#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Признак того, что вызов сделан из помощника начальной настройки программы,
	// при закрытии формы выполняется оповещение.
	НачальнаяНастройкаПрограммы = Параметры.НачальнаяНастройкаПрограммы;
	
	ИспользуетсяБазоваяВерсия = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИспользуетсяВебКлиент = НЕ ПустаяСтрока(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Элементы.УточнениеВариантаРасчетаДенежногоДовольствия.Видимость = Ложь;
	// Значение переменной: 0 - не установлено, 1 - сотрудники ОВД и пр.,  2 - военнослужащие.
	РасчетВоеннослужащихВнешнийПараметр = 0;
	
	Элементы.ПереносДанныхКОРП.Видимость = Ложь;
	ЗаполнитьСведенияКОРП();
	
	РежимВыгрузки = 1;
	ОбновитьОписаниеВариантаПереноса(РежимВыгрузки, ОписаниеВариантаПереноса);
	
	ИнициализацияПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НачальнаяНастройкаПрограммы Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ПереносДанныхВыполнялся", ПереносДанныхВыполнялся);
		ПараметрыОповещения.Вставить("ПереносДанныхЗавершенУспешно", ПереносДанныхЗавершенУспешно);
		ПараметрыОповещения.Вставить("РежимВыгрузки", РежимВыгрузки);
		ПараметрыОповещения.Вставить("МесяцНачалаЭксплуатации", Объект.МесяцНачалаЭксплуатации);
		ОповеститьОВыборе(ПараметрыОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяСсылкаНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ИнформационнаяСсылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаПутиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаПути.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПутьКИБ	= Элементы.ТаблицаПути.ТекущиеДанные.Путь;
	ИмяИБ	= Элементы.ТаблицаПути.ТекущиеДанные.Имя;
	
	Если БылПутьКИБ <> ПутьКИБ Тогда
		УстановитьВидимостьГруппаОшибкиПроверкиПодключения(ЭтаФорма, Ложь);
		БылПутьКИБ = ПутьКИБ;
		ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносДанныхЧерезИБПриИзменении(Элемент)
	
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	ОбновитьКнопки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносДанныхЧерезФайлПриИзменении(Элемент)
	
	ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	ОбновитьКнопки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОшибкиНажатие(Элемент)
	
	ПодготовитьОтчетОбОшибках();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСФайламиПриИзменении(Элемент)
	
	Если ПустаяСтрока(КаталогСФайлами) Тогда
		ИнформационнаяНадписьКаталог = "";
		Элементы.ИнформационнаяНадписьКаталог.РасширеннаяПодсказка.Заголовок = "";
		Возврат;
	КонецЕсли;
	ПроверитьКаталогСФайламиПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСФайламиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = НСтр("ru='Выберите папку с файлами для загрузки'");
	ДиалогВыбораКаталога.Каталог = КаталогСФайлами;
	ДиалогВыбораКаталога.Показать(Новый ОписаниеОповещения("КаталогСФайламиПослеВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	УстановитьВидимостьГруппаОшибкиПроверкиПодключения(ЭтаФорма, Ложь);
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	УстановитьВидимостьГруппаОшибкиПроверкиПодключения(ЭтаФорма, Ложь);
	ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаДляВыгрузкиПриИзменении(Элемент)
	
	ВыгрузкаИзV8 = Не (ПрограммаДляВыгрузки = "ЗиК");
	ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	
	ПрограммаДляВыгрузкиПредставление = Элементы.ПрограммаДляВыгрузки.СписокВыбора.НайтиПоЗначению(ПрограммаДляВыгрузки);
	УстановитьИнформационнуюСсылку(ПрограммаДляВыгрузки);

	Если Не ПереносИзИБДоступен Тогда
		
		ТекстИнфоНадписи = НСтр("ru = 'Перенос выполняется загрузкой данных из файлов, предварительно выгруженных
		|из программы %1, с использованием Помощника выгрузки.'");
		ИнформационнаяНадписьЗагрузкаИзФайлов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИнфоНадписи, ПрограммаДляВыгрузкиПредставление);
		
	Иначе
		
		ТекстИнфоНадписи = НСтр("ru = 'Загрузка данных из файлов, сформированных ранее в программе %1, с использованием Помощника выгрузки.'");
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИнфоНадписи, ПрограммаДляВыгрузкиПредставление);
		
		Элементы.ПереносДанныхЧерезФайл.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		
	КонецЕсли;
	
	ОбновитьЭУПереносДанныхКОРП();
	ОбновитьКнопки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодГодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Объект.ДатаНачалаПереносаРасчетныхДанных = Дата(ПериодГод,1,1);
КонецПроцедуры


#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой", Направление);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалаЭксплуатацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ПереносДанныхВыполнялся = Истина;
	КаталогВыгрузкиЗагрузки = "";
	ТаблицаОшибок.Очистить();
	НовыеЗагруженныеОбъекты = Новый ФиксированныйМассив(Новый Массив);
	ПоказыватьЗагруженныеОбъекты = Ложь;
	
	Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносВыполняется;
	Элементы.СтраницыРезультат.ТекущаяСтраница			= Элементы.Процесс;
	
	Перерисовать(1, "ВОчереди");
	
	Если ВыгрузкаИзV8 Тогда
		НетОшибок = ВыгрузкаИзИнформационнойБазыV8();
	Иначе
		НетОшибок = ВыгрузкаИзИнформационнойБазыV7();
	КонецЕсли;
	
	Если НетОшибок Тогда
		
		ЗагрузитьФайлыПереносаИзКаталога(КаталогВыгрузкиЗагрузки);
		
	Иначе
		
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница = Элементы.СтраницаЗаголовокПереносЗавершен;
		Элементы.СтраницыРезультат.ТекущаяСтраница        = Элементы.Ошибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайлов(Команда)
	
	Если РасширениеПодключено Тогда
		
		Если ПустаяСтрока(КаталогСФайлами) Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбрана папка с файлами для загрузки.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Элементы.СтраницыРезультатФайл.ТекущаяСтраница = Элементы.ПроцессФайл;
		
		ТаблицаОшибок.Очистить();
		НовыеЗагруженныеОбъекты = Новый ФиксированныйМассив(Новый Массив);
		ПоказыватьЗагруженныеОбъекты = Ложь;
		ПроверитьФайлыЗагрузить();
		
	Иначе
		
		Если ОписаниеВыбранногоФайла = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбран файл для загрузки.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;	
		КонецЕсли;
		
		ЭтапКонвертации = НСтр("ru = 'Загрузка файла'");
		
		РезультатВыполнения = ЗагрузитьВыбранныйФайлНаСервере();
		
		Если Не ПустаяСтрока(РезультатВыполнения) Тогда
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
			ЗагрузитьФайлыПереносаЗавершение(Ложь);
			Возврат;
		КонецЕсли;
		
		ЗагрузитьФайлыПереносаЗавершение(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВерсиюКомпоненты(Команда)
	
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	Отмена = Ложь;
	ВыполнитьДействияПередСменойСтраницы(Отмена,1);
	
	Если Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСменуСтраницы(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьСменуСтраницы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПомощникВыгрузки(Команда)
	
	ИмяМакета = ИменаМакетовПрограммВыгрузки[ПрограммаДляВыгрузки];
	
	ДополнительныеПараметры = Новый Структура("ИмяМакета", ИмяМакета);
	ОписаниеОповещения 		= Новый ОписаниеОповещения("СохранитьПомощникВыгрузкиПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощника(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСписокФайлов(Команда)
	
	Если ПустаяСтрока(КаталогСФайлами) Тогда
		Возврат;
	КонецЕсли;
	ПроверитьКаталогСФайламиПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаПереноса(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыгрузки", РежимВыгрузки);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимВыгрузки", РежимВыгрузки);
	ОписаниеОповещенияПриЗакрытии = Новый ОписаниеОповещения("ВыборВариантаПереносаЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.ПомощникПереходаСПрежнихПрограммЗарплатаКадры.Форма.ФормаВыбораВариантаПереносаДанных",ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещенияПриЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеРазделыКОРП(Команда)
	ВключитьОтключитьВсеРазделыКОРП(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеРазделыКОРП(Команда)
	ВключитьОтключитьВсеРазделыКОРП(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияПомощника()

	// Перенос из ИБ недоступен: 
	//  при работе в веб-клиенте
	//  при работе в модели сервиса
	//  для базовой версии (обеспечение требований безопасности).
	ПереносИзИБДоступен = Не (ИспользуетсяВебКлиент Или РазделениеВключено Или ИспользуетсяБазоваяВерсия);
	ПереносДанныхЧерезФайл = ?(ПереносИзИБДоступен, 0, 1);
	
	ПрограммаДляВыгрузкиЗаполнитьСписокВыбора();
	
	ИнформационнаяНадписьПереносБазовойВерсии = НСтр("ru = 'Используется базовая версия программы.'");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИнформационнаяНадписьПереносБазовойВерсии",
		"Видимость",
		ИспользуетсяБазоваяВерсия);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияОтступПапкаСФайлами",
		"Видимость",
		Не ИспользуетсяБазоваяВерсия);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПереносИзИБНедоступен",
		"Видимость",
		Не ПереносИзИБДоступен);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИнформационнаяНадписьРазделениеВключено",
		"Видимость",
		РазделениеВключено);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВыборПрограммы",
		"Доступность",
		Не РазделениеВключено);
		
	Объект.МесяцНачалаЭксплуатации = НачалоМесяца(ТекущаяДатаСеанса());
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачалаЭксплуатации", "МесяцНачалаЭксплуатацииСтрокой");
	
	Объект.ДатаНачалаПереносаРасчетныхДанных = НачалоГода(ДобавитьМесяц(ТекущаяДатаСеанса(), - 24));
	ПериодГод	= Год(Объект.ДатаНачалаПереносаРасчетныхДанных);
	
	ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	ЗаголовкиСтраниц = Новый ФиксированнаяСтруктура(ЗаголовкиСтраницПомощника());
	
	ОписаниеЭтапов = Новый Соответствие;
	ОписаниеЭтапов.Вставить(1, "Подключение");
	ОписаниеЭтапов.Вставить(2, "Выгрузка");
	ОписаниеЭтапов.Вставить(3, "Загрузка");
	Этапы = Новый ФиксированноеСоответствие(ОписаниеЭтапов);
	
	БылПутьКИБ = "";
	ВыгрузкаИзV8 = Истина;
	УстановитьВидимостьГруппаОшибкиПроверкиПодключения(ЭтаФорма, Ложь);
	
	НовыеЗагруженныеОбъекты = Новый ФиксированныйМассив(Новый Массив);
	
	ОбновитьНастройкиВариантаВыгрузки(ЭтаФорма);
	ЗаголовокТекущейСтраницы = ЗаголовокСтраницы(ЭтаФорма);
	ОбновитьКнопки(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПрограммаДляВыгрузкиЗаполнитьСписокВыбора()
	
	МакетыПрограммВыгрузки = Новый Соответствие;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Элементы.ПрограммаДляВыгрузки.СписокВыбора.Добавить("ЗУП","""1С:Зарплата и управление персоналом 8"" редакция 2.5");
		МакетыПрограммВыгрузки.Вставить("ЗУП","ПомощникВыгрузки_V8");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
			Элементы.ПрограммаДляВыгрузки.СписокВыбора.Добавить("ЗУПКОРП","""1С:Зарплата и управление персоналом 8 КОРП"" редакция 2.5");
			МакетыПрограммВыгрузки.Вставить("ЗУПКОРП","ПомощникВыгрузки_V8");
		КонецЕсли;
	Иначе
		Элементы.ПрограммаДляВыгрузки.СписокВыбора.Добавить("ЗБУ","""1С:Зарплата и кадры бюджетного учреждения 8"" редакция 1.0");
		МакетыПрограммВыгрузки.Вставить("ЗБУ","ПомощникВыгрузки_V8");
		Если Не ИспользуетсяБазоваяВерсия Тогда
			Элементы.ПрограммаДляВыгрузки.СписокВыбора.Добавить("МЗКБУ","""1С:Медицина. Зарплата и кадры бюджетного учреждения "" редакция 1.0");
			МакетыПрограммВыгрузки.Вставить("МЗКБУ","ПомощникВыгрузки_V8");
		КонецЕсли;
	КонецЕсли;
	Элементы.ПрограммаДляВыгрузки.СписокВыбора.Добавить("ЗиК","""1С:Зарплата и кадры 7.7"" редакция 2.3");
	МакетыПрограммВыгрузки.Вставить("ЗиК","ПомощникВыгрузки_V7");
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Элементы.ПрограммаДляВыгрузки.СписокВыбора.Добавить("БП3","""1С:Бухгалтерия 8"" редакция 3.0");
		МакетыПрограммВыгрузки.Вставить("БП3","ПомощникВыгрузки_БП3");
	КонецЕсли;
	
	ИменаМакетовПрограммВыгрузки = Новый ФиксированноеСоответствие(МакетыПрограммВыгрузки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьГруппаОшибкиПроверкиПодключения(Форма, Видимость)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаОшибкиПроверкиПодключения",
			"Видимость",
			Видимость);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭУПереносДанныхКОРП()

	ВыгружатьДанныеКОРП = (ПрограммаДляВыгрузки = "ЗУПКОРП") И (РежимВыгрузки = 1);
	Элементы.ПереносДанныхКОРП.Видимость = ВыгружатьДанныеКОРП;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияКОРП()
	
	СведенияКОРП.Очистить();
	ВыгружаемыеДанные = СтрШаблон(НСтр("ru = %1"), Элементы.СведенияКОРПДанные.СписокВыбора[0].Значение);
	ВсеДанныеНеИзменяется = НСтр("ru = 'Все данные (не изменяется)'");
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СистемнаяИнфо.ВерсияПриложения, ".");
	ВыгрузкаФайловДоступна = (ПодстрокиВерсии[1] = "3");
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "ПодборПерсонала";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Подбор персонала'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиПодборПерсонала", НСтр("ru = 'Настройки подсистемы ""Подбор персонала"".'"));
	Этапы.Добавить("ДанныеПоПодборуПерсонала", НСтр("ru = 'Данные по подбору персонала.'"));
	Этапы.Добавить("КандидатыЭлектроннаяПочта", НСтр("ru = 'Взаимодействия с кандидатами (электронная почта).'"));
	Этапы.Добавить("ВложенияЭлектронныхПисем", НСтр("ru = 'Вложения электронных писем взаимодействия с кандидатами.'"));
	Если ВыгрузкаФайловДоступна = Истина Тогда
		Этапы.Добавить("КандидатыФайлы", НСтр("ru = 'Файлы кандидатов.'"));
	КонецЕсли;
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "АдаптацияИУвольнение";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Адаптация и увольнение'");
	НоваяСтрока.ВыборАктуальныхДанных = Ложь;
	НоваяСтрока.Данные = ВсеДанныеНеИзменяется;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиАдаптацияИУвольнение", НСтр("ru = 'Настройки подсистемы ""Адаптация и увольнение"".'"));
	Этапы.Добавить("ДанныеАдаптацииИУвольнения", НСтр("ru = 'Данные адаптации и увольнения.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "АттестацияСотрудников";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Аттестация сотрудников'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиАттестацииСотрудников", НСтр("ru = 'Настройки подсистемы ""Аттестации сотрудников"".'"));
	Этапы.Добавить("ДанныеАттестацииСотрудников", НСтр("ru = 'Данные аттестации сотрудников.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "АнкетированиеСотрудников";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Анкетирование сотрудников'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиАнкетированияСотрудников", НСтр("ru = 'Настройки подсистемы ""Анкетирование"".'"));
	Этапы.Добавить("ДанныеАнкетированияСотрудников", НСтр("ru = 'Данные анкетирования.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "БронированиеПомещений";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Бронирование помещений'");
	НоваяСтрока.ВыборАктуальныхДанных = Ложь;
	НоваяСтрока.Данные = ВсеДанныеНеИзменяется;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("ДанныеБронированияПомещений", НСтр("ru = 'Данные бронирования помещений.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "Грейды";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Грейды'");
	НоваяСтрока.ВыборАктуальныхДанных = Ложь;
	НоваяСтрока.Данные = ВсеДанныеНеИзменяется;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиГрейдов", НСтр("ru = 'Настройки подсистемы ""Грейдов"".'"));
	Этапы.Добавить("ДанныеГрейдов", НСтр("ru = 'Данные грейдов.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "ИспытательныйСрок";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Испытательный срок'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("ДанныеИспытательногоСрока", НСтр("ru = 'Данные испытательного срока.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "КадровыйРезерв";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Кадровый резерв'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиКадровогоРезерва", НСтр("ru = 'Настройки подсистемы ""Кадровый резерв"".'"));
	Этапы.Добавить("ДанныеКадровогоРезерва", НСтр("ru = 'Данные кадрового резерва.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "КлючевыеПоказателиЭффективности";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Ключевые показатели эффективности'");
	НоваяСтрока.ВыборАктуальныхДанных = Ложь;
	НоваяСтрока.Данные = ВсеДанныеНеИзменяется;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("ДанныеКлючевыхПоказателейЭффективности", НСтр("ru = 'Данные ключевых показателей эффективности.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "ЛьготыСотрудников";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Льготы сотрудников'");
	НоваяСтрока.ВыборАктуальныхДанных = Ложь;
	НоваяСтрока.Данные = ВсеДанныеНеИзменяется;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиЛьготСотрудников", НСтр("ru = 'Настройки подсистемы ""Льготы сотрудников"".'"));
	Этапы.Добавить("ДанныеЛьготСотрудников", НСтр("ru = 'Данные льгот сотрудников.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "МедицинскоеСтрахование";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Медицинское страхование'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиМедицинскогоСтрахования", НСтр("ru = 'Настройки подсистемы ""Медицинское страхование"".'"));
	Этапы.Добавить("ДанныеМедицинскогоСтрахования", НСтр("ru = 'Данные медицинского страхования.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "ХарактеристикиПерсонала";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Характеристики персонала'");
	НоваяСтрока.ВыборАктуальныхДанных = Ложь;
	НоваяСтрока.Данные = ВсеДанныеНеИзменяется;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("ДанныеХарактеристикПерсонала", НСтр("ru = 'Данные о характеристиках персонала.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "ОбучениеИРазвитие";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Обучение и развитие'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиОбученияРазвития", НСтр("ru = 'Настройки подсистемы ""Обучение и развитие сотрудников"".'"));
	Этапы.Добавить("ДанныеОбученияРазвития", НСтр("ru = 'Данные обучения и развития сотрудников.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "Инструктажи";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Инструктажи'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиИнструктажей", НСтр("ru = 'Настройки подсистемы ""Инструктажи"".'"));
	Этапы.Добавить("ДанныеИнструктажей", НСтр("ru = 'Данные инструктажей.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "МедицинскиеОсмотры";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Медицинские осмотры'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиМедицинскихОсмотров", НСтр("ru = 'Настройки подсистемы ""Медицинские осмотры"".'"));
	Этапы.Добавить("ДанныеМедицинскихОсмотров", НСтр("ru = 'Данные медицинских осмотров.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "НесчастныеСлучаи";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Несчастные случаи'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиНесчастныхСлучаев", НСтр("ru = 'Настройки подсистемы ""Несчастные случаи"".'"));
	Этапы.Добавить("ДанныеНесчастныхСлучаев", НСтр("ru = 'Данные несчастных случаев.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "ОценкаПерсонала";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Оценка персонала'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиОценкиПерсонала", НСтр("ru = 'Настройки подсистемы ""Оценка персонала"".'"));
	Этапы.Добавить("ДанныеОценкиПерсонала", НСтр("ru = 'Данные оценки персонала.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	НоваяСтрока = СведенияКОРП.Добавить();
	НоваяСтрока.Выгружать = Истина;
	НоваяСтрока.Идентификатор = "СамообслуживаниеСотрудников";
	НоваяСтрока.НаименованиеПодсистемы = НСтр("ru = 'Самообслуживание сотрудников'");
	НоваяСтрока.ВыборАктуальныхДанных = Истина;
	НоваяСтрока.Данные = ВыгружаемыеДанные;
	Этапы = Новый СписокЗначений;
	Этапы.Добавить("НастройкиСамообслуживанияСотрудников",
		НСтр("ru = 'Настройки подсистемы ""Самообслуживание сотрудников"".'"));
	Этапы.Добавить("ДанныеСамообслуживанияСотрудников", НСтр("ru = 'Данные самообслуживания сотрудников.'"));
	НоваяСтрока.Этапы = ЗначениеВСтрокуВнутр(Этапы);
	
	СведенияКОРП.Сортировать("НаименованиеПодсистемы");
	
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияКОРПДанные");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияКОРП.ВыборАктуальныхДанных");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СведенияКОРПДанные");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияКОРП.ВыборАктуальныхДанных");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция МакетОбработки(ИмяМакета)
	
	Возврат Обработки.ПомощникПереходаСПрежнихПрограммЗарплатаКадры.ПолучитьМакет(ИмяМакета); 
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокИБ()
	
	Если ВыгрузкаИзV8 Тогда
		ЗаполнитьСписокИБV8();
	Иначе
		ЗаполнитьСписокИБV7();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокИБV7()
	
	ТаблицаПути.Очистить();
	
	СписокИБ = Новый Соответствие;
	
	Попытка
		HKEY_CURRENT_USER	= 2147483649;
		СписокБаз77			= "Software\1C\1Cv7\7.7\Titles";
		
		СистемныйРеестр = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");
		
		МассивИБ = Неопределено;
		СистемныйРеестр.EnumValues(HKEY_CURRENT_USER, СписокБаз77, МассивИБ);
		Для Каждого ПутьИБ Из МассивИБ Цикл
			ИмяИБ = "";
			СистемныйРеестр.GetStringValue(HKEY_CURRENT_USER, СписокБаз77, ПутьИБ, ИмяИБ);
			СписокИБ.Вставить(ИмяИБ, ПутьИБ);
		КонецЦикла;
		
	Исключение
		Возврат;
		
	КонецПопытки;
	
	Если СписокИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлОписанияМетаданных = Новый ТекстовыйДокумент;
	
	МассивИменФайлов = Новый Массив;
	МассивИменФайлов.Добавить("1cv7.dd");
	МассивИменФайлов.Добавить("1cv7.dds");
	
	Для Каждого КлючИЗначение Из СписокИБ Цикл
		Название	= КлючИЗначение.Ключ;
		Путь		= КлючИЗначение.Значение;
		
		ЯвляетсяКонфигурациейЗиК = Ложь;
		Для Каждого ИмяФайла Из МассивИменФайлов Цикл
			ФайлДляПроверки = Новый Файл(Путь + ИмяФайла);
			Если ФайлДляПроверки.Существует() Тогда
				ФайлОписанияМетаданных.Прочитать(Путь + ИмяФайла);
				ОписанияМетаданных = ФайлОписанияМетаданных.ПолучитьТекст();
				ЯвляетсяКонфигурациейЗиК = СтрНайти(ОписанияМетаданных, "CJ447") > 0;
				Если Не ЯвляетсяКонфигурациейЗиК Тогда
					ЯвляетсяКонфигурациейЗиК = СтрНайти(ОписанияМетаданных, "Журнал расчетов Зарплата") > 0;
					Если ЯвляетсяКонфигурациейЗиК Тогда  
						ЯвляетсяКонфигурациейЗиК = (СтрНайти(ОписанияМетаданных, "Регистр (Дв.)") = 0);
					КонецЕсли;	
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЯвляетсяКонфигурациейЗиК Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПути.Добавить();
		НоваяСтрока.Имя							= Название;
		НоваяСтрока.Путь						= Путь;
	КонецЦикла;
	
	ТаблицаПути.Сортировать("Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокИБV8()
	
	ТаблицаПути.Очистить();
	
	КаталогДанныхПользователя = "";
	
	#Если ВебКлиент Тогда
		
		КаталогДанныхПользователя = Вычислить("РабочийКаталогДанныхПользователя()");
		КаталогДанныхПользователя = Сред(КаталогДанныхПользователя, 1, СтрНайти(КаталогДанныхПользователя, "Roaming") + 6);
		
	#Иначе
		
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			КаталогДанныхПользователя = Вычислить("РабочийКаталогДанныхПользователя()");
			КаталогДанныхПользователя = Сред(КаталогДанныхПользователя, 1, СтрНайти(КаталогДанныхПользователя, "Roaming") + 6);
		Иначе
			Оболочка = Новый COMОбъект("WScript.Shell");
			КаталогДанныхПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
		КонецЕсли;
		
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(КаталогДанныхПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	ЛокальныеИБ	= КаталогДанныхПользователя + "\1C\1CEStart\ibases.v8i";
	ОбщиеИБ		= КаталогДанныхПользователя + "\1C\1CEStart\ibases.v8l";
	
	Файл = Новый Файл(ЛокальныеИБ);
	Если Файл.Существует() Тогда
		ПрочитатьСписокБаз(ЛокальныеИБ);
	КонецЕсли;
	
	Файл = Новый Файл(ОбщиеИБ);
	Если Файл.Существует() Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ОбщиеИБ);
		Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			ОбщаяИБ = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
			Файл = Новый Файл(ОбщаяИБ);
			Если Файл.Существует() Тогда
				ПрочитатьСписокБаз(ОбщаяИБ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПути.Сортировать("Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокБаз(ПутьКФайлу)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ИмяИБ	= "";
		ПутьИБ	= "";
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		Если Лев(ТекущаяСтрока,1) = "[" И Прав(ТекущаяСтрока,1) = "]" Тогда
			ИмяИБ = Сред(ТекущаяСтрока,2,СтрДлина(ТекущаяСтрока)-2);
			НомерСтроки = НомерСтроки + 1;
			ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
			Если СтрНайти(ТекущаяСтрока, "Connect=File=") <> 0 Тогда
				ПутьИБ = Сред(ТекущаяСтрока, 9, СтрДлина(ТекущаяСтрока)- 9);
				
				НоваяСтрока = ТаблицаПути.Добавить();
				НоваяСтрока.Имя		= ИмяИБ;
				НоваяСтрока.Путь	= ПутьИБ;
				
			ИначеЕсли СтрНайти(ТекущаяСтрока, "Connect=Srvr=") <> 0 Тогда
				ПутьИБ = Сред(ТекущаяСтрока, 9, СтрДлина(ТекущаяСтрока)- 9);
				
				НоваяСтрока = ТаблицаПути.Добавить();
				НоваяСтрока.Имя		= ИмяИБ;
				НоваяСтрока.Путь	= ПутьИБ;
				
			КонецЕсли;
			
			Если НомерСтроки >= КоличествоСтрок Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПриСменеСтраницы()
	
	ЗаголовокТекущейСтраницы = ЗаголовокСтраницы(ЭтаФорма);
	ОбновитьКнопки(ЭтаФорма);   
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКнопки(Форма)
	
	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	ИндексСтраницы = Форма.ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы = Неопределено Тогда
		ИндексСтраницы = 0;
	КонецЕсли;
	
	Если ТекущаяСтраницаИмя = "ПроверкаПодключенияКИБ" Тогда
		Форма.Элементы.Назад.Доступность  = Ложь;
		Форма.Элементы.Вперед.Доступность = Ложь;
	Иначе	
		Форма.Элементы.Назад.Доступность  = (ИндексСтраницы > 0);
		ПоследняяСтраница = Не (ИндексСтраницы < (Форма.ПорядокСтраниц.Количество() - 1));
		Форма.Элементы.Вперед.Доступность = Не ПоследняяСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокСтраницы(Форма)

	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	Если Форма.ЗаголовкиСтраниц.Свойство(ТекущаяСтраницаИмя) Тогда
		Возврат Форма.ЗаголовкиСтраниц[ТекущаяСтраницаИмя];
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаСервере
Функция ЗаголовкиСтраницПомощника()

	СтруктураСтраниц = Новый Структура;
	СтруктураСтраниц.Вставить("ПомощникНачало", НСтр("ru = 'Начало...'"));
	СтруктураСтраниц.Вставить("ПереносДанныхНачало", НСтр("ru = 'Выбор варианта переноса данных'"));
	СтруктураСтраниц.Вставить("ПереносДанныхИзИБ", НСтр("ru = 'Выбор информационной базы для переноса данных'"));
	СтруктураСтраниц.Вставить("ПроверкаПодключенияКИБ", НСтр("ru = 'Проверка установки соединения...'"));
	СтруктураСтраниц.Вставить("ПереносДанныхИзИБНастройки", НСтр("ru = 'Настройки переноса данных'"));
	СтруктураСтраниц.Вставить("ПереносДанныхИзИБНастройкиМедицинскоеСтрахование",
		НСтр("ru = 'Настройки переноса данных медицинского страхования'"));
	СтруктураСтраниц.Вставить("ВыгрузкаЗагрузкаДанныхИзИБ", НСтр("ru = 'Перенос данных из информационной базы'"));
	СтруктураСтраниц.Вставить("ЗагрузкаДанныхИзФайла", НСтр("ru = 'Загрузка данных из файлов'"));
	
	Возврат СтруктураСтраниц;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПорядокСтраницПоНастройкам(Форма)
	
	ПорядокСтраниц = Новый Массив;
	
	ПорядокСтраниц.Добавить("ПомощникНачало");
	
	// Перенос недоступен при работе в модели сервиса.
	Если Не Форма.РазделениеВключено Тогда
		
		Если Форма.ПереносИзИБДоступен Тогда
			ПорядокСтраниц.Добавить("ПереносДанныхНачало");
		КонецЕсли;
		
		Если Форма.ПереносДанныхЧерезФайл = 0 Тогда
			ПорядокСтраниц.Добавить("ПереносДанныхИзИБ");
			Если НужнаПроверкаПодключения(Форма) Тогда
				ПорядокСтраниц.Добавить("ПроверкаПодключенияКИБ");
			КонецЕсли;
			Если Форма.ПрограммаДляВыгрузки <> "БП3" Тогда
				ПорядокСтраниц.Добавить("ПереносДанныхИзИБНастройки");
				Если Форма.ЕстьВыгрузкаМедицинскогоСтрахования Тогда
					ПорядокСтраниц.Добавить("ПереносДанныхИзИБНастройкиМедицинскоеСтрахование");
				КонецЕсли;
			КонецЕсли;
			ПорядокСтраниц.Добавить("ВыгрузкаЗагрузкаДанныхИзИБ");
		Иначе
			ПорядокСтраниц.Добавить("ЗагрузкаДанныхИзФайла");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПорядокСтраниц;
	
КонецФункции

&НаКлиенте
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	ИмяЗакладки = "НеВыполняется";
	Если Состояние = "ВОчереди" Тогда
		НомерСостояния = 1;
		
	ИначеЕсли Состояние = "Выполняется" Тогда
		НомерСостояния = 2;
		ИмяЗакладки = "Выполняется";
		
	ИначеЕсли Состояние = "Ошибка" Тогда
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
		
	ИначеЕсли Состояние = "Успех" Тогда
		НомерСостояния = 4;
		ИмяЗакладки = "Выполнено";
		
	Иначе
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
		
	КонецЕсли;
	
	Если ОднаКартинка Тогда
		
		ЭтапСтрока = Этапы.Получить(Этап);
		Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
		Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
		
	Иначе
		
		Для НомерКартинки = Этап По Этапы.Количество() Цикл
			ЭтапСтрока = Этапы.Получить(НомерКартинки);
			Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
			Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьОтчетОбОшибках()
	
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках);
	ОтчетОбОшибках.ТолькоПросмотр		= Истина;
	ОтчетОбОшибках.ОтображатьЗаголовки	= Ложь;
	ОтчетОбОшибках.ОтображатьСетку		= Ложь;
	ОтчетОбОшибках.Показать(НСтр("ru='Список ошибок'"));
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПомощникПереходаСПрежнихПрограммЗарплатаКадры.СписокОшибок");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если ПереносДанныхЧерезФайл = 0 Тогда
		ОбластьШапка.Параметры.ИмяИБ = ИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = ПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = НСтр("ru = 'Загрузка из файлов'");
		ОбластьШапка.Параметры.ПутьКИБ = КаталогСФайлами;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап = СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации = СтрокаТаблицы.Рекомендации;
		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресаМакетовВоВременномХранилище(ИмяМакета, УникальныйИдентификатор, ВыгрузкаИзV8)
	
	АдресаМакетов = Новый Соответствие;
	
	Если ВыгрузкаИзV8 Тогда
		АдресМакета = ПоместитьВоВременноеХранилище(МакетОбработки(ИмяМакета), УникальныйИдентификатор);
		АдресаМакетов.Вставить(ИмяМакета+".epf", АдресМакета);
	Иначе
		КаталогВременныхФайлов = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(КаталогВременныхФайлов);
		
		ДвоичныеДанныеОбработкаВыгрузки = МакетОбработки(ИмяМакета);
		
		Чтение = Новый ЧтениеДанных(ДвоичныеДанныеОбработкаВыгрузки);
		Поток = Чтение.ИсходныйПоток();
		Архив = Новый ЧтениеZipФайла(Поток);
		Для Каждого АрхивныйФайл Из Архив.Элементы Цикл
			Архив.Извлечь(АрхивныйФайл, КаталогВременныхФайлов);
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, АрхивныйФайл.ПолноеИмя);
			АдресМакета = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайла), УникальныйИдентификатор);
			АдресаМакетов.Вставить(АрхивныйФайл.ПолноеИмя, АдресМакета);
		КонецЦикла;
		УдалитьФайлы(КаталогВременныхФайлов);
		
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(АдресаМакетов);
	
КонецФункции

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ТекстСообщения)

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Перенос данных из ИБ 1С 7'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, 
		ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыСтраницыПослеПодключенияРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеПодключено = Подключено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКаталогСФайлами",
		"Доступность",
		Подключено);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИнформационнаяНадписьТребуетсяПодключениеРасширения",
		"Видимость",
		Не Подключено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОписаниеВариантаПереноса(РежимВыгрузки, ОписаниеВариантаПереноса)
	
	Если РежимВыгрузки = 1 Тогда
		ОписаниеВариантаПереноса = НСтр("ru = 'Будут перенесены все данные, необходимые для расчета среднего заработка, сдачи отчетности по НДФЛ и взносам в этом году, но расчет зарплаты начнете ""с чистого листа"" без накопившихся в прошлой системе ошибок.'")
	Иначе
		ОписаниеВариантаПереноса = НСтр("ru = 'Будут перенесены все данные из предыдущей программы. При таком способе переноса есть риск перенести устаревшие данные и накопившиеся ошибки учета.'")	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаПереносаЗавершение(РезультатОповещения, ПараметрыОповещения) Экспорт

	РежимВыгрузки = РезультатОповещения.РежимВыгрузки;
	ОбновитьОписаниеВариантаПереноса(РежимВыгрузки, ОписаниеВариантаПереноса);
	ОбновитьНастройкиВариантаВыгрузки(ЭтаФорма);
	ОбновитьЭУПереносДанныхКОРП();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНастройкиВариантаВыгрузки(Форма)
	
	Форма.Элементы.ПериодГод.Видимость = Форма.РежимВыгрузки = 2;
	Форма.Элементы.МесяцНачалаЭксплуатацииСтрокой.Видимость = Форма.РежимВыгрузки = 1;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформационнуюСсылку(ИмяИсточника)
	
	ИнформационнаяСсылка = "";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УчетХозрасчетныхОрганизацийКлиент");
		Модуль.УстановитьИнформационнуюСсылкуПереносаДанных(ИмяИсточника, ИнформационнаяСсылка);
	КонецЕсли;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УчетБюджетныхУчрежденийКлиент");
		Модуль.УстановитьИнформационнуюСсылкуПереносаДанных(ИмяИсточника, ИнформационнаяСсылка);
	КонецЕсли;
	Если ПустаяСтрока(ИнформационнаяСсылка) Тогда
		Элементы.ИнформационнаяСсылка.Заголовок = "";
		Элементы.ИнформационнаяСсылкаЗагрузкаИзФайлов.Заголовок = "";
	Иначе
		Элементы.ИнформационнаяСсылка.Заголовок = НСтр("ru = 'Описание переноса данных'");
		Элементы.ИнформационнаяСсылкаЗагрузкаИзФайлов.Заголовок = НСтр("ru = 'Описание переноса данных'");
	КонецЕсли;
	
КонецПроцедуры

#Область ОбслуживаниеПротокола

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализацияСообщенийКодов(Форма)
	
	ОписанияСообщений = Новый Соответствие;
	
	ОписанияСообщений.Вставить(2,  НСтр("ru = 'Не удалось произвести подключение к информационной базе:'"));
	ОписанияСообщений.Вставить(3,  НСтр("ru = 'Ошибка создания COM-объекта. Обратитесь к администратору информационной системы.'"));
	ОписанияСообщений.Вставить(4,  НСтр("ru = 'Возможно, пользователь отменил подключение к информационной базе, либо была попытка немонопольного подключения.'"));
	ОписанияСообщений.Вставить(5,  НСтр("ru = 'Не удалось загрузить правила переноса данных:'"));
	ОписанияСообщений.Вставить(6,  НСтр("ru = 'Возможно, в правилах конвертации ошибка. Обратитесь в техническую поддержку.'"));
	ОписанияСообщений.Вставить(7,  НСтр("ru = 'Перенос данных завершился аварийно:'"));
	ОписанияСообщений.Вставить(8,  НСтр("ru = 'Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.'"));
	ОписанияСообщений.Вставить(9,  НСтр("ru = 'Не удалось получить данные для загрузки.'"));
	ОписанияСообщений.Вставить(10,  НСтр("ru = 'Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.'"));
	ОписанияСообщений.Вставить(11,  НСтр("ru = 'Не записан файл с правилами переноса на диск:'"));
	ОписанияСообщений.Вставить(12,  НСтр("ru = 'Возможно, у пользователя нет прав на запись файлов в каталог с ИБ.'"));
	ОписанияСообщений.Вставить(13,  НСтр("ru = 'Не удалось выгрузить данные'"));
	ОписанияСообщений.Вставить(14,  НСтр("ru = 'Посмотрите список ошибок в конфигурации, из которой выгружались данные.'"));
	ОписанияСообщений.Вставить(15,  НСтр("ru = 'Ошибка создания COM-объекта. Обратитесь к администратору информационной системы. Для выполнения переноса данных на компьютере должна быть установлена полная версия 1С:Предприятия.'"));
	
	Форма.ОписанияСообщений = Новый ФиксированноеСоответствие(ОписанияСообщений);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗафиксироватьОшибкуИСообщить(Форма, КодТекстОшибки, КодРекомендации, СообщатьПользователю = Истина, ИнформацияОбОшибке = Неопределено)
	
	Если Форма.ОписанияСообщений = Неопределено Тогда
		ИнициализацияСообщенийКодов(Форма);
	КонецЕсли;
	
	Если ТипЗнч(КодТекстОшибки) = Тип("Строка") Тогда
		ТекстОшибки  = ?(ЗначениеЗаполнено(КодТекстОшибки),КодТекстОшибки,Неопределено);
	Иначе
		ТекстОшибки  = Форма.ОписанияСообщений.Получить(КодТекстОшибки);	
	КонецЕсли;
	
	Если ТекстОшибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстРекомендации = Форма.ОписанияСообщений.Получить(КодРекомендации);
	
	Описание = "";
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
		Описание = Описание + Символы.ПС + ИнформацияОбОшибке;
	Иначе
		Пока ИнформацияОбОшибке <> Неопределено Цикл
			Описание = Описание + Символы.ПС + ИнформацияОбОшибке.Описание;
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		КонецЦикла;
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибки + " " + Описание;
	
	Если СообщатьПользователю Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
	КонецЕсли;
	
	Этап = Форма.ЭтапКонвертации;
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяОшибка = Форма.ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап			= Этап;
	НоваяОшибка.Ошибка			= ТекстОшибки;
	НоваяОшибка.Рекомендации	= ?(ТекстРекомендации = Неопределено,"",ТекстРекомендации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьВременныеФайлыИзКаталога(КаталогСФайлами)
	
	Попытка
		УдалитьФайлы(КаталогСФайлами);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок)
	
	ЕстьОшибки = Ложь;
	Для Номер = 1 По ФайлПротокола.КоличествоСтрок() Цикл
		
		СтрокаРезультата = ФайлПротокола.ПолучитьСтроку(Номер);
		
		Если (ПустаяСтрока(СтрокаРезультата) И Не ЕстьОшибки)
			Или СтрНайти(СтрокаРезультата, "Начало выгрузки") = 1
			Или СтрНайти(СтрокаРезультата, "Окончание выгрузки") = 1
			Или СтрНайти(СтрокаРезультата, "Выгружено объектов") = 1
			Или СтрНайти(СтрокаРезультата, "Ошибка.") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = Истина;
		Если Не ПустаяСтрока(ТекстОшибок) Тогда
			ТекстОшибок = ТекстОшибок + Символы.ПС;
		КонецЕсли;
		ТекстОшибок = ТекстОшибок + СтрокаРезультата;
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции 

#КонецОбласти

#Область ОбработчикиОбслуживанияВыбораФайловЗагрузки

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗагрузкиФайлов()
	
	ПараметрыЗагрузки = Новый Структура("
	|ПолноеИмяФайлаИнструкции,
	|ВыполняетсяЗагрузкаИБ,
	|ВыполняетсяЗагрузкаФайлов");
	
	ПараметрыЗагрузки.ВыполняетсяЗагрузкаИБ = Ложь;
	ПараметрыЗагрузки.ВыполняетсяЗагрузкаФайлов = Ложь;
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

&НаКлиенте
Процедура КаталогСФайламиПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КаталогСФайлами = ВыбранныеФайлы[0];
	
	ПроверитьКаталогСФайламиПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКаталогСФайламиПослеВыбора(ДополнительныеПараметры = Неопределено)

	Элементы.СтраницыРезультатФайл.ТекущаяСтраница = Элементы.ПроцессФайл;
	ЭтапКонвертации = "";
	
	// в выбранном каталоге должен быть файл с именем "ИнструкцияЗагрузки.txt"
	ПолноеИмяФайлаИнструкции = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСФайлами, "ИнструкцияЗагрузки.txt");
	ФайлНаДиске = Новый Файл(ПолноеИмяФайлаИнструкции);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ПараметрыЗагрузкиФайлов();
	КонецЕсли;	
	
	ДополнительныеПараметры.ПолноеИмяФайлаИнструкции = ПолноеИмяФайлаИнструкции;
	Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаИнструкцииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры


&НаКлиенте
Процедура ПроверкаСуществованияФайлаИнструкцииЗавершение(ФайлСуществует, ДополнительныеПараметры) Экспорт
	
	Если Не ФайлСуществует Тогда
		ТекстПредупреждения = НСтр("ru = 'ВНИМАНИЕ. В выбранной папке отсутствуют файлы для загрузки. Проверьте правильность указания папки с файлами.'");
		ИнформационнаяНадписьКаталог = ТекстПредупреждения;
		Элементы.ИнформационнаяНадписьКаталог.РасширеннаяПодсказка.Заголовок = "";
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		
		ИнформационнаяНадписьКаталог = "";
		Элементы.ИнформационнаяНадписьКаталог.РасширеннаяПодсказка.Заголовок = "";
		ЗаполнитьТаблицуФайловЗагрузки(ДополнительныеПараметры);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеИнструкцииЗагрузкиИФайловВКаталоге(ДополнительныеПараметры)
	
	// Максимальное количество файлов в инструкции.
	МаксимальноеКолФайлов = 70;
	КоличествоФайлов = ТаблицаФайловЗагрузки.Количество();
	
	Если КоличествоФайлов > МаксимальноеКолФайлов Тогда
		ТекстПредупреждения = НСтр("ru = 'ВНИМАНИЕ. В инструкции для загрузки превышено максимальное количество файлов.'");
		ИнформационнаяНадписьКаталог = ТекстПредупреждения;
		Элементы.ИнформационнаяНадписьКаталог.РасширеннаяПодсказка.Заголовок = "";
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		// Файл с инструкцией существует, получим имена файлов из каталога и сравним их с инструкцией.
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПоискаФайлов", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПоискФайлов(Оповещение, КаталогСФайлами, "*");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПоискаФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстПредупреждения = "";
	ТекстПодсказки = "";
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В каталоге «%1» не найдено файлов для загрузки.'"), КаталогСФайлами);
		
	Иначе
		
		ИменаФайлов = Новый Массив;
		Для каждого ОписаниеФайла Из НайденныеФайлы Цикл
			ИменаФайлов.Добавить(ОписаниеФайла.Имя);
		КонецЦикла;
		
		ТекстОписаниеСведений = "";
		Для каждого ЭлементКоллекции Из ТаблицаФайловЗагрузки Цикл
			Если ИменаФайлов.Найти(ЭлементКоллекции.ИмяФайла) = Неопределено Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В каталоге «%1» отсутствуют файлы, указанные в инструкции для загрузки.'"), КаталогСФайлами);
			КонецЕсли;
			ТекстОписаниеСведений = ТекстОписаниеСведений + Символы.ПС + ЭлементКоллекции.ОписаниеФайла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьОшибки = Не ПустаяСтрока(ТекстПредупреждения);
	Если ЕстьОшибки Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'В выбранной папке есть файлы для загрузки.'");
		
		ТекстПодсказки = НСтр("ru = 'В выбранной папке присутствуют следующие сведения для загрузки:'");
		ТекстПодсказки = ТекстПодсказки + ТекстОписаниеСведений;
	КонецЕсли;
	
	ИнформационнаяНадписьКаталог = ТекстПредупреждения;
	Элементы.ИнформационнаяНадписьКаталог.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
	Если Не ЕстьОшибки И ДополнительныеПараметры.ВыполняетсяЗагрузкаФайлов Тогда
		ЗагрузитьФайлыПереносаИзКаталога(КаталогСФайлами);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуФайловЗагрузки(ДополнительныеПараметры)

	ТаблицаФайловЗагрузки.Очистить();
	ПротоколЗагрузки = Новый ТекстовыйДокумент;
	
	ПолноеИмяФайлаИнструкции = ДополнительныеПараметры.ПолноеИмяФайлаИнструкции;
	ДополнительныеПараметры.Вставить("ПротоколЗагрузки", ПротоколЗагрузки);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТаблицуФайловЗагрузкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПротоколЗагрузки.НачатьЧтение(Оповещение,ПолноеИмяФайлаИнструкции);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуФайловЗагрузкиЗавершение(ДополнительныеПараметры) Экспорт

	ПротоколЗагрузки = ДополнительныеПараметры.ПротоколЗагрузки;
	
	КоличествоФайлов = ПротоколЗагрузки.КоличествоСтрок();
	
	ИндексФайла = 0;
	Для Сч = 1 По КоличествоФайлов Цикл
		СтрокаИнструкции = ПротоколЗагрузки.ПолучитьСтроку(Сч);
		Если ПустаяСтрока(СтрокаИнструкции) Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияРазделителя = СтрНайти(СтрокаИнструкции,"|");
		Если ПозицияРазделителя = 0 Тогда
			ИмяФайлаДляЗагрузки = СтрокаИнструкции;
			ОписаниеФайла 		= СтрокаИнструкции;
		Иначе
			ИмяФайлаДляЗагрузки = СОКРЛП(Лев(СтрокаИнструкции,ПозицияРазделителя-1));
			ОписаниеФайла 		= СОКРЛП(Сред(СтрокаИнструкции,ПозицияРазделителя+1));
			Если ПустаяСтрока(ОписаниеФайла) Тогда
				ОписаниеФайла = ИмяФайлаДляЗагрузки;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаФайловЗагрузки.Добавить();
		НоваяСтрока.Номер = ИндексФайла;
		НоваяСтрока.ИмяФайла = ИмяФайлаДляЗагрузки;
		НоваяСтрока.ОписаниеФайла = ОписаниеФайла;
		ИндексФайла = ИндексФайла + 1;
		
	КонецЦикла;
	
	Если ДополнительныеПараметры.ВыполняетсяЗагрузкаИБ Тогда
		ЗагрузитьФайлыПереносаИзКаталога(КаталогВыгрузкиЗагрузки);
	Иначе
		ПроверитьСоответствиеИнструкцииЗагрузкиИФайловВКаталоге(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбслуживанияВыгрузкиЗагрузки


&НаКлиенте
Процедура ПодготовитьФайлыВыгрузкиV7()

	#Если Не ВебКлиент Тогда
	КаталогВыгрузкиЗагрузки = ПолучитьИмяВременногоФайла();
	#КонецЕсли
	СоздатьКаталог(КаталогВыгрузкиЗагрузки);
	
	// двоичные данные обработки выгрузки
	ИмяМакета = ИменаМакетовПрограммВыгрузки[ПрограммаДляВыгрузки];
	ДвоичныеДанныеОбработкаВыгрузки = МакетОбработки(ИмяМакета);
	
	Чтение = Новый ЧтениеДанных(ДвоичныеДанныеОбработкаВыгрузки);
	Поток = Чтение.ИсходныйПоток();
	Архив = Новый ЧтениеZipФайла(Поток);
	Для Каждого АрхивныйФайл Из Архив.Элементы Цикл
		Если АрхивныйФайл.Расширение = "xml" Тогда
			ФайлПравил		= АрхивныйФайл;
		ИначеЕсли АрхивныйФайл.ИмяБезРасширения = "V77Exp" Тогда
			ФайлОбработки	= АрхивныйФайл;
		КонецЕсли;
	КонецЦикла;
	Архив.Извлечь(ФайлПравил, КаталогВыгрузкиЗагрузки);
	Архив.Извлечь(ФайлОбработки, КаталогВыгрузкиЗагрузки);
	
	ИмяФайлаПравилV7 	= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, ФайлПравил.ПолноеИмя);
	ИмяФайлаОбработкиV7 = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, ФайлОбработки.ПолноеИмя);

КонецПроцедуры

&НаКлиенте
Функция ВыгрузкаИзИнформационнойБазыV7()
	
	ЭтапКонвертации = НСтр("ru = 'Подключение к информационной базе'");
	Перерисовать(1, "Выполняется", Истина);

	Результат = УстановитьВнешнееСоединениеСБазойV7();
	Если Результат.ОшибкаПодключенияКомпоненты Тогда
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 2, 15,,Результат.КраткоеОписаниеОшибки);
		ИБИсточник = "";
		Перерисовать(1);
		Возврат Ложь;
	КонецЕсли;
	Перерисовать(1, "Успех", Истина);
	ИБИсточник = Результат.Соединение;
	Результат = Неопределено;
	
	ПодготовитьФайлыВыгрузкиV7();
	
	ПолноеИмяФайлаИнструкции = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ИнструкцияЗагрузки.txt");
	ФайлИнструкцийЗагрузки = Новый ЗаписьТекста(ПолноеИмяФайлаИнструкции, КодировкаТекста.ANSI);
	
	// Шаг № 2 выгрузка данных
	ЭтапКонвертации = НСтр("ru = 'Выгрузка данных'");
	Перерисовать(2, "Выполняется", Истина);
	
	Попытка
		
		ПараметрыВыгрузки = ИБИсточник.CreateObject("СписокЗначений"); 
		ПараметрыВыгрузки.ДобавитьЗначение(ИмяФайлаПравилV7,	"ИмяФайлаПравил");
		ПараметрыВыгрузки.ДобавитьЗначение("ВыполнитьАлгоритм",	"ИмяКоманды");
		
		Если РежимВыгрузки = 1 Тогда
			ПараметрыВыгрузки.ДобавитьЗначение("ТаблицаЭтаповВыгрузки_УпрощенныйПеренос",			"ИмяАлгоритма");
			ПараметрыВыгрузки.ДобавитьЗначение(ДобавитьМесяц(НачалоМесяца(Объект.МесяцНачалаЭксплуатации), -36),			"ДатаНачала");
		Иначе
			ПараметрыВыгрузки.ДобавитьЗначение("ТаблицаЭтаповВыгрузки",			"ИмяАлгоритма");
			ПараметрыВыгрузки.ДобавитьЗначение(НачалоГода(Объект.ДатаНачалаПереносаРасчетныхДанных), "ДатаНачала");
		КонецЕсли;
		
		ИБИсточник.глОбработчикСообщений = ПараметрыВыгрузки;
		ИБИсточник.EvalExpr("ОткрытьФормуМодально(""Отчет"", глОбработчикСообщений, """ + ИмяФайлаОбработкиV7 + """)");
		
		ТаблицаЭтаповВыгрузки = ИБИсточник.глОбработчикСообщений;
		
		ТипВозвращенногоЗначения = ИБИсточник.EvalExpr("ТипЗначенияСтр(глОбработчикСообщений)");
		Если ТипВозвращенногоЗначения <> "ТаблицаЗначений" Тогда
			
			Если (ТипВозвращенногоЗначения = "СписокЗначений") И (ИБИсточник.глОбработчикСообщений.Получить("ИмяФайлаПравил") = Неопределено) Тогда
				Описание = ИБИсточник.глОбработчикСообщений.ВСтрокуСРазделителями();
				ТекстСообщения = НСтр("ru = 'При открытии обработки переноса данных возникли ошибки:'" + Символы.ПС + Описание);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось открыть обработку переноса данных.'");
			КонецЕсли;
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстСообщения, 6);
			УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
			ИБИсточник = "";
			Перерисовать(2);
			Возврат Ложь;
			
		КонецЕсли;
		
		ПараметрыВыгрузки					= "";
		ТипВозвращенногоЗначения			= "";
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 5, 6,, ИнформацияОбОшибке());
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Попытка
		
		КорневыеСтрокиПравилВыгрузки = Новый Массив;
		ТаблицаЭтаповВыгрузки.ВыбратьСтроки();
		Пока ТаблицаЭтаповВыгрузки.ПолучитьСтроку() = 1 Цикл
			
			Если РежимВыгрузки <> 1 Тогда
				Если СтрНайти(ТаблицаЭтаповВыгрузки.ИмяГруппы,"_УпрощенныйПеренос") Тогда
					Продолжить;
				КонецЕсли;
			Иначе	
				Если СтрНайти(ТаблицаЭтаповВыгрузки.ИмяГруппы,"_ПереносНачислений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ОписаниеСтроки = Новый Структура("Наименование, ИспользуемыеПравила, ДатаНачала, ДатаОкончания");
			ОписаниеСтроки.Наименование 		= ТаблицаЭтаповВыгрузки.Представление;
			ОписаниеСтроки.ИспользуемыеПравила 	= ТаблицаЭтаповВыгрузки.ИспользуемыеПравила;
			ОписаниеСтроки.ДатаНачала 			= ТаблицаЭтаповВыгрузки.ДатаНачалаВыгрузки;
			ОписаниеСтроки.ДатаОкончания 		= ТаблицаЭтаповВыгрузки.ДатаОкончанияВыгрузки;
			
			КорневыеСтрокиПравилВыгрузки.Добавить(ОписаниеСтроки);
			
		КонецЦикла;
		ТаблицаЭтаповВыгрузки = "";
			
		КоличествоЭтаповВыгрузки = КорневыеСтрокиПравилВыгрузки.Количество();
		
		УИД = Новый УникальныйИдентификатор;
		
		ПрефиксФайловВыгрузкиV7 = УИД;
		
		Для Каждого ПравилоВыгрузки Из КорневыеСтрокиПравилВыгрузки Цикл
			
			ИБИсточник = "";
			
			ТекущийНомерВыгрузки = КорневыеСтрокиПравилВыгрузки.Найти(ПравилоВыгрузки) + 1;
			
			ЭтапКонвертации = НСтр("ru = 'Выгрузка данных:'") + " " + ПравилоВыгрузки.Наименование + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтаповВыгрузки + ")";
			
			ИмяФайлаОбмена = ПрефиксФайловВыгрузкиV7 + Прав("000" + ТекущийНомерВыгрузки, 3) + ".xml";
			ПолноеИмяФайлаОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, ИмяФайлаОбмена);
			
			ОбработкаПрерыванияПользователя();
			ОбновитьОтображениеДанных();
			
			// Выполним переподключение к ИБ, для освобождения памяти.
			Результат = УстановитьВнешнееСоединениеСБазойV7();
			ИБИсточник = Результат.Соединение;
			Результат = Неопределено;
			
			ПараметрыПравил = ИБИсточник.CreateObject("СписокЗначений");
			ПараметрыПравил.ДобавитьЗначение(Дата(ПериодГод, 1, 1),			"ДатаНачалаПереносаРасчетныхДанных");
			ПараметрыПравил.ДобавитьЗначение(1,								"ВыгрузкаИзПомощника");
			Если ЗначениеЗаполнено(ПравилоВыгрузки.ДатаНачала) Тогда
				// дата ограничения для "тяжелых" алгоритмов
				ПараметрыПравил.ДобавитьЗначение(ПравилоВыгрузки.ДатаНачала,"ДатаНачалаВыгрузки");
			КонецЕсли;
			Если ЗначениеЗаполнено(ПравилоВыгрузки.ДатаОкончания) Тогда
				// дата ограничения для "тяжелых" алгоритмов
				ПараметрыПравил.ДобавитьЗначение(ПравилоВыгрузки.ДатаОкончания,"ДатаОкончанияВыгрузки");
			КонецЕсли;
			
			Если РежимВыгрузки <> 1 Тогда
				ПараметрыПравил.ДобавитьЗначение(1, "ПереноситьНачисленияПредыдущейПрограммы");
			Иначе	
				ПараметрыПравил.ДобавитьЗначение(0, "ПереноситьНачисленияПредыдущейПрограммы");
				ПараметрыПравил.ДобавитьЗначение(Объект.МесяцНачалаЭксплуатации,"МесяцНачалаЭксплуатации");
			КонецЕсли;
			
			ПараметрыВыгрузки = ИБИсточник.CreateObject("СписокЗначений");
			ПараметрыВыгрузки.ДобавитьЗначение(ИмяФайлаПравилV7,					"ИмяФайлаПравил");
			ПараметрыВыгрузки.ДобавитьЗначение(ПравилоВыгрузки.ИспользуемыеПравила,	"ИспользуемыеПравилаВыгрузки");
			ПараметрыВыгрузки.ДобавитьЗначение(ПолноеИмяФайлаОбмена,						"ИмяФайлаДанных");
			ПараметрыВыгрузки.ДобавитьЗначение(ПараметрыПравил,						"ТаблицаНастройкиПараметров");
			ПараметрыВыгрузки.ДобавитьЗначение("Выгрузить",							"ИмяКоманды");
			
			ИБИсточник.глОбработчикСообщений = ПараметрыВыгрузки;
			ИБИсточник.EvalExpr("ОткрытьФормуМодально(""Отчет"", глОбработчикСообщений, """ + ИмяФайлаОбработкиV7 + """)");
			
			ФайлПротокола = Новый ТекстовыйДокумент;
			
			Результат = ИБИсточник.глОбработчикСообщений.ВСтрокуСРазделителями();
			Если ТипЗнч(Результат) = Тип("Число") Тогда
				ФайлПротокола.ДобавитьСтроку(НСтр("ru = 'Не удалось произвести выгрузку данных.'"));
			КонецЕсли;
			Если Результат <> "" Тогда
				СписокОшибок = СтрЗаменить(Результат, """,""", Символы.ПС);
				Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
					МассивОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СтрПолучитьСтроку(СписокОшибок, НомерСтроки)), "|");
					Если МассивОшибки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если МассивОшибки.Количество() = 1 Тогда
						ФайлПротокола.ДобавитьСтроку(МассивОшибки[0]);
						
					Иначе
						ФайлПротокола.ДобавитьСтроку(МассивОшибки[0] + " " + МассивОшибки[1]);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыВыгрузки = "";
			Результат		  = "";
			ПараметрыПравил   = "";
			
			ТекстОшибок = "";
			ЕстьОшибки = РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок);
			Если ЕстьОшибки Тогда
				
				ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстОшибок, 6, Ложь);
				УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравилV7);
				УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбработкиV7);
				
				Перерисовать(2);
				
				Возврат Ложь;
				
			КонецЕсли;
			
			ТекстСообщения = ИмяФайлаОбмена + " | " + ПравилоВыгрузки.Наименование;
			ФайлИнструкцийЗагрузки.ЗаписатьСтроку(ТекстСообщения);
			
		КонецЦикла;
		
		ФайлИнструкцийЗагрузки.Закрыть();
		
		Если Не ПрочитатьФайлИнструкцияЗагрузки() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 7, 8, Ложь, ИнформацияОбОшибке());
		
		ИБИсточник = "";
		Перерисовать(2);
		
		УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравилV7);
		УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбработкиV7);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравилV7);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбработкиV7);
	
	ИБИсточник = "";
	
	Перерисовать(2, "Успех", Истина);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьФайлыВыгрузкиV8()

	#Если Не ВебКлиент Тогда
	КаталогВыгрузкиЗагрузки = ПолучитьИмяВременногоФайла();
	#КонецЕсли
	СоздатьКаталог(КаталогВыгрузкиЗагрузки);
	
	// двоичные данные обработки выгрузки
	ИмяМакета = ИменаМакетовПрограммВыгрузки[ПрограммаДляВыгрузки];
	ДвоичныеДанныеОбработкаВыгрузки = МакетОбработки(ИмяМакета);
	
	// макет правил обслуживания запуска обработки выгрузки
	ДвоичныеДанныеПравила = МакетОбработки("ПравилаОбслуживанияВыгрузкиДанных");
	
	ИмяФайлаОбработкиВыгрузки 				= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ОбработкаВыгрузки.epf");
	ИмяФайлаПравилОбслуживанияВыгрузки 		= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ПравилаОбслуживанияВыгрузки.xml");
	ИмяФайлаПротоколаОбслуживанияВыгрузки 	= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ПротоколОбслуживанияВыгрузки.txt");
	ИмяФайлаОбслуживанияВыгрузки 			= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ОбслуживаниеВыгрузки.xml");
	ИмяФайлаСведенияКОРП 					= ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "СведенияКОРП.txt");
	
	ДвоичныеДанныеОбработкаВыгрузки.Записать(ИмяФайлаОбработкиВыгрузки);
	ДвоичныеДанныеПравила.Записать(ИмяФайлаПравилОбслуживанияВыгрузки);
	
	СохранитьСведенияКОРПВФайл(ИмяФайлаСведенияКОРП);

КонецПроцедуры

&НаСервере
Функция СохранитьСведенияКОРПВФайл(ИмяФайла)
	ЗначениеВФайл(ИмяФайла, РеквизитФормыВЗначение("СведенияКОРП"));
КонецФункции

&НаКлиенте
Функция ВыгрузкаИзИнформационнойБазыV8()
	
	ЭтапКонвертации = НСтр("ru = 'Подключение к информационной базе'");
	Перерисовать(1, "Выполняется", Истина);
	
	ИмяФайлаОбработкиВыгрузки = "";
	ИмяФайлаПравилОбслуживанияВыгрузки = "";
	ИмяФайлаПротоколаОбслуживанияВыгрузки = "";
	ИмяФайлаОбслуживанияВыгрузки = "";
	ИмяФайлаСведенияКОРП = "";
	
	Результат = УстановитьВнешнееСоединениеСБазойV8();
	Если Результат.ОшибкаПодключенияКомпоненты Тогда
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 2, 15,,Результат.КраткоеОписаниеОшибки);
		ИБИсточник = "";
		Перерисовать(1);
		Возврат Ложь;
	КонецЕсли;
	Перерисовать(1, "Успех", Истина);
	ИБИсточник = Результат.Соединение;
	Результат = Неопределено;
	
	ПодготовитьФайлыВыгрузкиV8();
	
	// Шаг № 2 выгрузка данных
	ЭтапКонвертации = НСтр("ru = 'Выгрузка данных'");
	Перерисовать(2, "Выполняется", Истина);
	
	ПараметрыПравил = Новый Структура;
	ПараметрыПравил.Вставить("КаталогДляВыгрузки", 		КаталогВыгрузкиЗагрузки);
	ПараметрыПравил.Вставить("ИмяФайлаОбработки", 		ИмяФайлаОбработкиВыгрузки);
	ПараметрыПравил.Вставить("РежимВыгрузки", 			РежимВыгрузки);
	ПараметрыПравил.Вставить("РасчетВоеннослужащихВнешнийПараметр", РасчетВоеннослужащихВнешнийПараметр);
	
	Если РежимВыгрузки = 1 Тогда
		ПараметрыПравил.Вставить("МесяцНачалаЭксплуатации", НачалоМесяца(Объект.МесяцНачалаЭксплуатации));
		Если ВыгружатьДанныеКОРП Тогда
			ВыгружатьПодсистемыКОРП = Ложь;
			Для каждого СтрокаСведений Из СведенияКОРП Цикл
				ВыгружатьПодсистемыКОРП = ВыгружатьПодсистемыКОРП Или СтрокаСведений.Выгружать;
			КонецЦикла;
			ПараметрыПравил.Вставить("ВыгружатьДанныеКОРП", ВыгружатьДанныеКОРП И ВыгружатьПодсистемыКОРП);
			ПараметрыПравил.Вставить("ИмяФайлаСведенияКОРП", ИмяФайлаСведенияКОРП);
			ПараметрыПравил.Вставить("СтраховаяКомпанияИдентификатор", Строка(СтраховаяКомпания.УникальныйИдентификатор()));
		КонецЕсли;
	Иначе
		ПараметрыПравил.Вставить("ДатаНачалаПереносаРасчетныхДанных", НачалоГода(Объект.ДатаНачалаПереносаРасчетныхДанных));
	КонецЕсли;
	
	Попытка
		ОбработкаОбмена = СоздатьОбработкуОбменаЗагрузитьПравила(ИБИсточник, ПараметрыПравил);
	Исключение
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 5, 6,,ИнформацияОбОшибке());
		ИБИсточник = "";
		Перерисовать(2);
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
	КонецПопытки;
	
	// Получение этапов выгрузки
	ЭтапыВыгрузки = Новый СписокЗначений;
	Попытка
		
		СтрокиПравилВыгрузки = ОбработкаОбмена.ТаблицаПравилВыгрузки.Строки;
		Для Каждого ПравилоВыгрузки Из СтрокиПравилВыгрузки Цикл
			ПравилоВыгрузки.Включить = 0;
		КонецЦикла;
		
		Правило = СтрокиПравилВыгрузки.Найти("ОписаниеЭтаповВыгрузки","Наименование");
		Правило.Включить = 1;
		
		ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбслуживанияВыгрузки;
		ОбработкаОбмена.ВыполнитьВыгрузку();
		
		// выполним анализ протокола обслуживания выгрузки
		ФайлПротокола = Новый ТекстовыйДокумент;
		ФайлПротокола.Прочитать(ИмяФайлаПротоколаОбслуживанияВыгрузки);
		ТекстОшибок = "";
		ЕстьОшибки = РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок);
		Если ЕстьОшибки Тогда
			
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстОшибок, 6, Ложь);
			УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
			
			Перерисовать(2);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Для каждого ЭлементСписка Из ОбработкаОбмена.Данные Цикл
			ЭтапыВыгрузки.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
		КонецЦикла;
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 7, 8, Ложь, ИнформацияОбОшибке());
		
		ИБИсточник = "";
		Перерисовать(2);
		
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	// Выгрузка данных
	Попытка
		
		СтрокиПравилВыгрузки = ОбработкаОбмена.ТаблицаПравилВыгрузки.Строки;
		Для Каждого ПравилоВыгрузки Из СтрокиПравилВыгрузки Цикл
			ПравилоВыгрузки.Включить = 0;
		КонецЦикла;
		
		Правило = СтрокиПравилВыгрузки.Найти("Выгрузка","Наименование");
		Правило.Включить = 1;
		
		КоличествоЭтапов = ЭтапыВыгрузки.Количество();
		ТекущийНомерВыгрузки = 1;
		
		ПараметрыПравил = Новый Структура("ИмяЭтапаДляВыгрузки");
		
		Для каждого Этап Из ЭтапыВыгрузки Цикл
			
			ПараметрыПравил.ИмяЭтапаДляВыгрузки = Этап.Значение;
			ЗаполнитьЗначенияСвойств(ОбработкаОбмена.Параметры, ПараметрыПравил);
			
			ЭтапКонвертации = НСтр("ru = 'Выгрузка данных:'") + " " + Этап.Представление + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтапов + ")";
			ТекущийНомерВыгрузки = ТекущийНомерВыгрузки + 1;
			
			ОбработкаПрерыванияПользователя();
			ОбновитьОтображениеДанных();
			
			ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбслуживанияВыгрузки;
			ОбработкаОбмена.ВыполнитьВыгрузку();
			
			// выполним анализ протокола обслуживания выгрузки
			ФайлПротокола = Новый ТекстовыйДокумент;
			ФайлПротокола.Прочитать(ИмяФайлаПротоколаОбслуживанияВыгрузки);
			ТекстОшибок = "";
			ЕстьОшибки = РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок);
			Если ЕстьОшибки Тогда
				ЗафиксироватьОшибкуИСообщить(ЭтаФорма, ТекстОшибок, 6, Ложь);
				УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
				Перерисовать(2);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПрочитатьФайлИнструкцияЗагрузки() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, 7, 8, Ложь, ИнформацияОбОшибке());
		
		ИБИсточник = "";
		Перерисовать(2);
		
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбработкиВыгрузки);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПравилОбслуживанияВыгрузки);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаПротоколаОбслуживанияВыгрузки);
	УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбслуживанияВыгрузки);
	
	ИБИсточник = "";
	
	Перерисовать(2, "Успех", Истина);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьФайлИнструкцияЗагрузки(Разделитель = "|")

	ТаблицаФайловЗагрузки.Очистить();
	
	ПолноеИмяФайлаИнструкции = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузкиЗагрузки, "ИнструкцияЗагрузки.txt");
	ФайлРезультатов = Новый Файл(ПолноеИмяФайлаИнструкции);
	Если Не ФайлРезультатов.Существует() Тогда
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма,13,14);
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат Ложь;
	КонецЕсли;
	
	ПротоколЗагрузки = Новый ТекстовыйДокумент;
	ПротоколЗагрузки.Прочитать(ПолноеИмяФайлаИнструкции);
	КоличествоФайлов = ПротоколЗагрузки.КоличествоСтрок();
	ИндексФайла = 0;
	Для Сч = 1 По КоличествоФайлов Цикл
		СтрокаИнструкции = ПротоколЗагрузки.ПолучитьСтроку(Сч);
		Если ПустаяСтрока(СтрокаИнструкции) Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияРазделителя = СтрНайти(СтрокаИнструкции,Разделитель);
		Если ПозицияРазделителя = 0 Тогда
			ИмяФайлаДляЗагрузки = СтрокаИнструкции;
			ОписаниеФайла 		= СтрокаИнструкции;
		Иначе
			ИмяФайлаДляЗагрузки = СОКРЛП(Лев(СтрокаИнструкции,ПозицияРазделителя-1));
			ОписаниеФайла 		= СОКРЛП(Сред(СтрокаИнструкции,ПозицияРазделителя+1));
			Если ПустаяСтрока(ОписаниеФайла) Тогда
				ОписаниеФайла = ИмяФайлаДляЗагрузки;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаФайловЗагрузки.Добавить();
		НоваяСтрока.Номер = ИндексФайла;
		НоваяСтрока.ИмяФайла = ИмяФайлаДляЗагрузки;
		НоваяСтрока.ОписаниеФайла = ОписаниеФайла;
		ИндексФайла = ИндексФайла + 1;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СоздатьОбработкуОбменаЗагрузитьПравила(ИБИсточник, ПараметрыПравил)

	ОбработкаОбмена = ИБИсточник.Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена												= "Выгрузка";
	ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю	= Истина;
	ОбработкаОбмена.ИмяФайлаПравилОбмена									= ИмяФайлаПравилОбслуживанияВыгрузки;
	ОбработкаОбмена.ИмяФайлаПротоколаОбмена									= ИмяФайлаПротоколаОбслуживанияВыгрузки;
	ОбработкаОбмена.ЗагрузитьПравилаОбмена();
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбмена.Параметры, ПараметрыПравил);
	
	Возврат  ОбработкаОбмена;

КонецФункции 


&НаКлиенте
Процедура ЗагрузитьФайлыПереносаИзКаталога(КаталогСФайламиДляЗагрузки)
	
	ПереносДанныхВыполнялся = Истина;
	
	Если ПереносДанныхЧерезФайл = 0 Тогда
		// Шаг № 3 инициализация обмена и загрузка данных.
		ЭтапКонвертации = НСтр("ru = 'Загрузка данных'");
		Перерисовать(3, "Выполняется", Истина);
	КонецЕсли;	
	
	Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		КоличествоЭтапов = ТаблицаФайловЗагрузки.Количество();
		ТекущийНомерВыгрузки = 1;
		
		Для Индекс = 0 По ТаблицаФайловЗагрузки.Количество() - 1 Цикл
			
			ЭтапКонвертации = НСтр("ru = 'Загрузка данных:'") + " " + ТаблицаФайловЗагрузки[Индекс].ОписаниеФайла + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтапов + ")";
			ТекущийНомерВыгрузки = ТекущийНомерВыгрузки + 1;
			
			ОбработкаПрерыванияПользователя();
			ОбновитьОтображениеДанных();
			
			РезультатВыполнения = ВыполнитьЗагрузкуФайлаНаСервере(ТаблицаФайловЗагрузки[Индекс].ИмяФайла, КаталогСФайламиДляЗагрузки);
			
			Если Не ПустаяСтрока(РезультатВыполнения) Тогда
				ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
				ЗагрузитьФайлыПереносаЗавершение(Ложь);
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗагрузитьФайлыПереносаЗавершение(Истина);
		
	ИначеЕсли ИспользуетсяВебКлиент Тогда
		
		ЗагрузитьФайлыПереносаКСВебКлиент(КаталогСФайламиДляЗагрузки);
		
	Иначе	
		
		ЗагрузитьФайлыПереносаКС(КаталогСФайламиДляЗагрузки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыПереносаКСВебКлиент(КаталогСФайламиДляЗагрузки)
	
	ОписаниеЭтапа = ТаблицаФайловЗагрузки[0].ОписаниеФайла;
	ИмяФайлаДанных = ТаблицаФайловЗагрузки[0].ИмяФайла;
	
	ЭтапКонвертации = НСтр("ru = 'Загрузка данных:'") + " " + ОписаниеЭтапа;
	ПолноеИмяФайлаДанных = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСФайламиДляЗагрузки, ИмяФайлаДанных);
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьФайлПереносаПослеПомещенияФайла", ЭтотОбъект);
	НачатьСозданиеДвоичныхДанныхИзФайла(Обработчик,ПолноеИмяФайлаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлПереносаПослеПомещенияФайла(ДвоичныеДанные, ДополнительныеПараметры) Экспорт
	
	АдресаЧастейФайла = Новый Массив;
	АдресаЧастейФайла.Добавить(ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор));
	РезультатВыполнения = ПолучитьИЗагрузитьФайлПереносаНаСервере(АдресаЧастейФайла,"xml");
	Если Не ПустаяСтрока(РезультатВыполнения) Тогда
		ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
		ЗагрузитьФайлыПереносаЗавершение(Ложь);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФайлыПереносаЗавершение(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыПереносаКС(КаталогСФайламиДляЗагрузки)
	
	КоличествоЭтапов = ТаблицаФайловЗагрузки.Количество();
	ТекущийНомерВыгрузки = 1;
	
	Для ИндексФайла = 0 По ТаблицаФайловЗагрузки.Количество() - 1 Цикл
		
		ОписаниеЭтапа  = ТаблицаФайловЗагрузки[ИндексФайла].ОписаниеФайла;
		ИмяФайлаДанных = ТаблицаФайловЗагрузки[ИндексФайла].ИмяФайла;
		
		ЭтапКонвертации = НСтр("ru = 'Загрузка данных:'") + " " + ОписаниеЭтапа + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтапов + ")";
		ТекущийНомерВыгрузки = ТекущийНомерВыгрузки + 1;
			
		ОбработкаПрерыванияПользователя();
		ОбновитьОтображениеДанных();
		
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаДанных));
		ПолноеИмяФайлаДанных = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСФайламиДляЗагрузки, ИмяФайлаДанных);
		
		#Если Не ВебКлиент Тогда
			ЧастиФайла = РазделитьФайл(ПолноеИмяФайлаДанных, 524288000);   
		#Иначе
			ЧастиФайла  = Новый Массив;
		#КонецЕсли
		
		АдресаЧастейФайла = Новый Массив;
		Для Каждого ЧастьФайла Из ЧастиФайла Цикл
			АдресаЧастейФайла.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ЧастьФайла), УникальныйИдентификатор));
			УдалитьВременныеФайлыИзКаталога(ЧастьФайла);
		КонецЦикла;
		
		РезультатВыполнения = ПолучитьИЗагрузитьФайлПереносаНаСервере(АдресаЧастейФайла, РасширениеФайла);
		
		Если Не ПустаяСтрока(РезультатВыполнения) Тогда
			ЗафиксироватьОшибкуИСообщить(ЭтаФорма, РезультатВыполнения, 0, Ложь);
			ЗагрузитьФайлыПереносаЗавершение(Ложь);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьФайлыПереносаЗавершение(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИЗагрузитьФайлПереносаНаСервере(АдресаЧастейФайла, РасширениеФайла)

	ИменаЧастей = Новый Массив;
	
	Для каждого АдресФайла Из АдресаЧастейФайла Цикл
	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		ИменаЧастей.Добавить(ИмяВременногоФайла);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		УдалитьИзВременногоХранилища(АдресФайла);
	
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ОбъединитьФайлы(ИменаЧастей, ИмяВременногоФайла);
	Для каждого ИмяЧастиФайла Из ИменаЧастей Цикл
		УдалитьВременныеФайлыИзКаталога(ИмяЧастиФайла);
	КонецЦикла;
	
	РезультатВыполнения = ВыполнитьЗагрузкуФайлаНаСервере(ИмяВременногоФайла);
	УдалитьВременныеФайлыИзКаталога(ИмяВременногоФайла);
	
	Возврат РезультатВыполнения;

КонецФункции 

&НаСервере
Функция ЗагрузитьВыбранныйФайлНаСервере()

	// Получим данные из временного хранилища и запишем их на диск.
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДанныеФайла = ПолучитьИзВременногоХранилища(ОписаниеВыбранногоФайла.Хранение);
	ДанныеФайла.Записать(ИмяВременногоФайла);
	
	РезультатВыполнения = ВыполнитьЗагрузкуФайлаНаСервере(ИмяВременногоФайла);
	УдалитьВременныеФайлыИзКаталога(ИмяВременногоФайла);
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция ВыполнитьЗагрузкуФайлаНаСервере(ИмяФайлаДанных, ПутьКФайлуДанных = "")
	
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	
	ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
	
	РезультатЗагрузки = "";
	Если ПустаяСтрока(ПутьКФайлуДанных) Тогда
		ИмяФайлаОбмена = ИмяФайлаДанных;
	Иначе
		ИмяФайлаОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКФайлуДанных, ИмяФайлаДанных);
	КонецЕсли;
	
	ИмяВременнойПапкиФайлов = "";
	ПараметрыПравил = Новый Структура("ПутьКПрисоединеннымФайлам");
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаОбмена));
	Если РасширениеФайла = "zip" Тогда
		
		ИмяВременнойПапкиФайлов = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапкиФайлов);
		
		Архив = Новый ЧтениеZipФайла(ИмяФайлаОбмена);
		Архив.ИзвлечьВсе(ИмяВременнойПапкиФайлов);
		Архив.Закрыть();
		
		Если ПереносДанныхЧерезФайл = 0 Тогда
			УдалитьВременныеФайлыИзКаталога(ИмяФайлаОбмена);
		КонецЕсли;
		
		ИмяФайлаОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяВременнойПапкиФайлов, "FileExchange.xml");
		ПараметрыПравил.ПутьКПрисоединеннымФайлам = ИмяВременнойПапкиФайлов;
		
	КонецЕсли;
	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;

	Попытка
		
		ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
		
	Исключение
		
		УдалитьВременныеФайлыИзКаталога(ИмяВременнойПапкиФайлов);
		
		РезультатЗагрузки = НСтр("ru = 'При чтении данных произошла ошибка:'") + Символы.ПС
		+ ОписаниеОшибки()+ Символы.ПС 
		+ НСтр("ru = 'Ошибка в формате файла данных.'");
		
		Возврат РезультатЗагрузки;
		
	КонецПопытки;
	
	Если НЕ ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
		
		УдалитьВременныеФайлыИзКаталога(ИмяВременнойПапкиФайлов);

		Возврат НСтр("ru = 'При чтении правил обмена данными произошла ошибка.'");
		
	КонецЕсли;
		
	
	Попытка
		
		ОбработкаОбмена.Данные = Новый Структура("ПутьКПрисоединеннымФайлам", ИмяВременнойПапкиФайлов);
		ОбработкаОбмена.ВыполнитьЗагрузку();
		
		Если ОбработкаОбмена.ФлагОшибки Тогда
			Если ТипЗнч(ОбработкаОбмена.Данные) = Тип("Строка") Тогда
				РезультатЗагрузки = ОбработкаОбмена.Данные;
			Иначе
				РезультатЗагрузки = НСтр("ru = 'Не удалось произвести загрузку данных. Проверьте служебные сообщения в окне сообщений.'");
			КонецЕсли;
		Иначе
			
			Если ОбработкаОбмена.Параметры.Свойство("РежимВыгрузки") Тогда
				Если ОбработкаОбмена.Параметры.РежимВыгрузки = 3 И ОбработкаОбмена.Параметры.Свойство("ЗагруженныеОбъекты") Тогда
					ПоказыватьЗагруженныеОбъекты = Истина;
					ЗагруженныеОбъекты = ОбработкаОбмена.Параметры.ЗагруженныеОбъекты;
					Для каждого ЭлементМассива Из НовыеЗагруженныеОбъекты Цикл
						ЗагруженныеОбъекты.Добавить(ЭлементМассива);
					КонецЦикла;
					НовыеЗагруженныеОбъекты = Новый ФиксированныйМассив(ЗагруженныеОбъекты);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		УдалитьВременныеФайлыИзКаталога(ИмяВременнойПапкиФайлов);
		
		РезультатЗагрузки = НСтр("ru = 'При чтении данных произошла ошибка:'") + Символы.ПС
		+ ОписаниеОшибки()+ Символы.ПС 
		+ НСтр("ru = 'Ошибка в формате файла данных.'");
		
		Возврат РезультатЗагрузки;
		
	КонецПопытки;
	
	УдалитьВременныеФайлыИзКаталога(ИмяВременнойПапкиФайлов);

	Возврат РезультатЗагрузки;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайлыПереносаЗавершение(ЗагрузкаВыполнена)
	
	УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
	
	Если ПереносДанныхЧерезФайл = 1 Тогда
		
		Если ЗагрузкаВыполнена Тогда
			Элементы.СтраницыРезультатФайл.ТекущаяСтраница	= Элементы.УспехФайл;
			Элементы.ЗагрузитьФайлы.Доступность				= Ложь;
			ПереносДанныхЗавершенУспешно 					= Истина;
		Иначе
			Элементы.СтраницыРезультатФайл.ТекущаяСтраница		= Элементы.ОшибкиФайл;
		КонецЕсли;
		
	Иначе	
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносЗавершен;
		Если ЗагрузкаВыполнена Тогда
			Перерисовать(3, "Успех", Истина);
			Элементы.СтраницыРезультат.ТекущаяСтраница	= Элементы.Успех;
			Элементы.ЗагрузитьДанные.Доступность		= Ложь;
			ПереносДанныхЗавершенУспешно 				= Истина;
		Иначе
			Элементы.СтраницыРезультат.ТекущаяСтраница		= Элементы.Ошибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагрузкаВыполнена И ПоказыватьЗагруженныеОбъекты Тогда
		ПоказатьЗагруженныеОбъекты();
	КонецЕсли;
	
	ОбновитьКнопки(ЭтаФорма);
	Если Не НачальнаяНастройкаПрограммы Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФайлыЗагрузить()

	Если Не ЗначениеЗаполнено(КаталогСФайлами) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыЗагрузкиФайлов();
	ДополнительныеПараметры.ВыполняетсяЗагрузкаФайлов = Истина;
	ПроверитьКаталогСФайламиПослеВыбора(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Функция УстановитьВнешнееСоединениеСБазойV8()

	ИмяCOMСоединителя = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИмяCOMСоединителя;
	
	Результат = Новый Структура;
	Результат.Вставить("Соединение");
	Результат.Вставить("КраткоеОписаниеОшибки", "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("ОшибкаПодключенияКомпоненты", Ложь);
	
	Попытка
		COMConnector = Новый COMObject(ИмяCOMСоединителя); 
	Исключение
		Информация = ИнформацияОбОшибке();
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось подключиться к другой программе: %1'");
		Результат.ОшибкаПодключенияКомпоненты = Истина;
		Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(Информация));
		Результат.КраткоеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, КраткоеПредставлениеОшибки(Информация));
		Возврат Результат;
	КонецПопытки;
	
	ШаблонСтрокиСоединения = "[СтрокаБазы][СтрокаАутентификации]";
	СтрокаБазы = ПутьКИБ;
	ИмяПользователя = Пользователь;
	Если СтрНайти(ИмяПользователя, """") Тогда
		ИмяПользователя = СтрЗаменить(ИмяПользователя, """", """""");
	КонецЕсли;
	
	ПарольПользователя = Пароль;
	Если СтрНайти(ПарольПользователя, """") Тогда
		ПарольПользователя = СтрЗаменить(ПарольПользователя, """", """""");
	КонецЕсли;
	
	СтрокаАутентификации = "; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
	СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ИмяПользователя",    ИмяПользователя);
	СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ПарольПользователя", ПарольПользователя);
	
	СтрокаСоединения = СтрЗаменить(ШаблонСтрокиСоединения, "[СтрокаБазы]", СтрокаБазы);
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаАутентификации]", СтрокаАутентификации);
	
	Попытка
		Результат.Соединение = COMConnector.Connect(СтрокаСоединения);
	Исключение
		Информация = ИнформацияОбОшибке();
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось подключиться к другой программе: %1'");
		Результат.ОшибкаПодключенияКомпоненты = Истина;
		Результат.ПодробноеОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(Информация));
		Результат.КраткоеОписаниеОшибки       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, КраткоеПредставлениеОшибки(Информация));
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция РезультатПроверкиПодключенияКИБV8()

	Результат = УстановитьВнешнееСоединениеСБазойV8();
	Если Результат.ОшибкаПодключенияКомпоненты Тогда
		Возврат Результат.КраткоеОписаниеОшибки;
	КонецЕсли;
	ИБИсточник = Результат.Соединение;
	Результат = Неопределено;
	
	ПодготовитьФайлыВыгрузкиV8();
	ПараметрыПравил = Новый Структура;
	ПараметрыПравил.Вставить("КаталогДляВыгрузки", 		КаталогВыгрузкиЗагрузки);
	ПараметрыПравил.Вставить("ИмяФайлаОбработки", 		ИмяФайлаОбработкиВыгрузки);
	
	Попытка
		ОбработкаОбмена = СоздатьОбработкуОбменаЗагрузитьПравила(ИБИсточник, ПараметрыПравил);
	Исключение
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	// получение информации о программе
	ИнформацияОПрограмме = Новый Структура("
	|НомерРелизаКонфигурации,
	|ИдентификаторКонфигурации,
	|СинонимКонфигурации,
	|МинимальнаяВерсияКонфигурацииОписание,
	|РасчетВоеннослужащихВнешнийПараметр"); 
	Попытка
		СтрокиПравилВыгрузки = ОбработкаОбмена.ТаблицаПравилВыгрузки.Строки;
		Для Каждого ПравилоВыгрузки Из СтрокиПравилВыгрузки Цикл
			ПравилоВыгрузки.Включить = 0;
		КонецЦикла;
		
		Правило = СтрокиПравилВыгрузки.Найти("ИнформацияОПрограмме","Наименование");
		Правило.Включить = 1;
		
		ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбслуживанияВыгрузки;
		ОбработкаОбмена.ВыполнитьВыгрузку();
		
		// выполним анализ протокола обслуживания выгрузки
		ФайлПротокола = Новый ТекстовыйДокумент;
		ФайлПротокола.Прочитать(ИмяФайлаПротоколаОбслуживанияВыгрузки);
		ТекстОшибок = "";
		ЕстьОшибки = РазобратьПротоколВыгрузки(ФайлПротокола, ТекстОшибок);
		Если ЕстьОшибки Тогда
			ИБИсточник = "";
			УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
			Возврат ТекстОшибок;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ИнформацияОПрограмме, ОбработкаОбмена.Данные);
		
	Исключение
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ИдентификаторКонфигурации = ИнформацияОПрограмме.ИдентификаторКонфигурации;
	Если ИдентификаторКонфигурации = Неопределено Тогда
		ИмяВыбраннойИБ = ?(ЗначениеЗаполнено(ИнформацияОПрограмме.СинонимКонфигурации),ИнформацияОПрограмме.СинонимКонфигурации,ИмяИБ);
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		ТекстСообщения = НСтр("ru = 'Выгрузка данных из выбранной информационной базы %1 не поддерживается.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяВыбраннойИБ);
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Если ИдентификаторКонфигурации <> ПрограммаДляВыгрузки Тогда
		ИмяВыбраннойИБ = ?(ЗначениеЗаполнено(ИнформацияОПрограмме.СинонимКонфигурации),ИнформацияОПрограмме.СинонимКонфигурации,ИмяИБ);
		ПрограммаДляВыгрузкиПредставление = Элементы.ПрограммаДляВыгрузки.СписокВыбора.НайтиПоЗначению(ПрограммаДляВыгрузки);
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		ТекстСообщения = НСтр("ru = 'Выбранная информационная база %1 не соответствует указанной программе для выгрузки данных %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяВыбраннойИБ, ПрограммаДляВыгрузкиПредставление);
		Возврат ТекстСообщения;
	КонецЕсли;
	
	МинимальнаяВерсияКонфигурацииОписание = ИнформацияОПрограмме.МинимальнаяВерсияКонфигурацииОписание;
	Если ЗначениеЗаполнено(ИнформацияОПрограмме.МинимальнаяВерсияКонфигурацииОписание) Тогда
		// версия ИБ источника ниже минимальной
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		ТекстСообщения = НСтр("ru = 'Версия выбранной программы для переноса данных: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИнформацияОПрограмме.НомерРелизаКонфигурации);
		ТекстСообщения = МинимальнаяВерсияКонфигурацииОписание + Символы.ПС + ТекстСообщения;
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Если ИнформацияОПрограмме.РасчетВоеннослужащихВнешнийПараметр <> Неопределено Тогда
		РасчетВоеннослужащихВнешнийПараметр = ИнформацияОПрограмме.РасчетВоеннослужащихВнешнийПараметр;
	КонецЕсли;
	
	ИБИсточник = "";
	УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
	Возврат "";

КонецФункции

&НаКлиенте
Функция УстановитьВнешнееСоединениеСБазойV7()

	ИмяCOMСоединителя = "V1CEnterprise.Application";
	
	Результат = Новый Структура;
	Результат.Вставить("Соединение");
	Результат.Вставить("КраткоеОписаниеОшибки", "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("ОшибкаПодключенияКомпоненты", Ложь);
	
	Попытка
		COMConnector = Новый COMObject(ИмяCOMСоединителя); 
	Исключение
		Информация = ИнформацияОбОшибке();
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось подключиться к другой программе: %1'");
		Результат.ОшибкаПодключенияКомпоненты = Истина;
		Результат.ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(Информация));
		Результат.КраткоеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, КраткоеПредставлениеОшибки(Информация));
		Возврат Результат;
	КонецПопытки;
	
	СтрокаПодключения = "/D""" + ПутьКИБ + """ ";
	Если ЗначениеЗаполнено(Пользователь) Тогда
		СтрокаПодключения = СтрокаПодключения + "/N""" + Пользователь + """";
	КонецЕсли;
	Если ЗначениеЗаполнено(Пароль) Тогда
		СтрокаПодключения = СтрокаПодключения + "/P""" + Пароль + """";
	КонецЕсли;
	
	Попытка
		 COMConnector.Initialize(COMConnector.RMTrade, СтрокаПодключения, "NO_SPLASH_SHOW");
	Исключение
		Информация = ИнформацияОбОшибке();
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не удалось подключиться к другой программе: %1'");
		Результат.ОшибкаПодключенияКомпоненты = Истина;
		Результат.ПодробноеОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(Информация));
		Результат.КраткоеОписаниеОшибки       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, КраткоеПредставлениеОшибки(Информация));
	КонецПопытки;
	
	Результат.Соединение = COMConnector;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РезультатПроверкиПодключенияКИБV7()
	
	Результат = УстановитьВнешнееСоединениеСБазойV7();
	Если Результат.ОшибкаПодключенияКомпоненты Тогда
		Возврат Результат.КраткоеОписаниеОшибки;
	КонецЕсли;
	ИБИсточник = Результат.Соединение;
	Результат = Неопределено;
	
	НомерРелизаКонфигурации		= ИБИсточник.Константа.НомерРелиза;
	ИдентификаторКонфигурации	= ИБИсточник.глИдентификаторКонфигурации();
	
	Если ИдентификаторКонфигурации <> "R2CLKTK" Тогда
		ПрограммаДляВыгрузкиПредставление = Элементы.ПрограммаДляВыгрузки.СписокВыбора.НайтиПоЗначению(ПрограммаДляВыгрузки);
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		ТекстСообщения = НСтр("ru = 'Выбранная информационная база не соответствует указанной программе для выгрузки данных %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПрограммаДляВыгрузкиПредставление);
		Возврат ТекстСообщения;	
	КонецЕсли;
	
	ПодготовитьФайлыВыгрузкиV7();
	
	ФайлОбмена = Новый ЧтениеXML();
	ФайлОбмена.ОткрытьФайл(ИмяФайлаПравилV7);
	Пока ФайлОбмена.Прочитать() Цикл
		Если ФайлОбмена.ЛокальноеИмя = "Источник" Тогда
			МинимальныйНомерРелиза = ФайлОбмена.ПолучитьАтрибут("ВерсияКонфигурации");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ФайлОбмена.Закрыть();
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерРелизаКонфигурации + ".0", МинимальныйНомерРелиза + ".0") < 0 Тогда
		// версия ИБ источника ниже минимальной
		ИБИсточник = "";
		УдалитьВременныеФайлыИзКаталога(КаталогВыгрузкиЗагрузки);
		МинимальнаяВерсияКонфигурацииОписание = НСтр("ru = 'Внимание! Перенос данных возможен из версии не ниже: %1'");
		МинимальнаяВерсияКонфигурацииОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(МинимальнаяВерсияКонфигурацииОписание, МинимальныйНомерРелиза);
		ТекстСообщения = НСтр("ru = 'Версия выбранной программы для переноса данных: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерРелизаКонфигурации);
		ТекстСообщения = МинимальнаяВерсияКонфигурацииОписание + Символы.ПС + ТекстСообщения;
		Возврат ТекстСообщения;	
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаКлиенте
Процедура ПроверкаПодключенияКИнформационнойБазе()

	Результат = РезультатПроверкиПодключенияКИБ();
	ЕстьОшибкаПроверкиПодключения = Ложь;
	Если Не ПустаяСтрока(Результат) Тогда
		ЕстьОшибкаПроверкиПодключения = Истина;
		УстановитьВидимостьГруппаОшибкиПроверкиПодключения(ЭтаФорма, Истина);
		ТекстСообщения = НСтр("ru = 'Проверка подключения к информационной базе.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + Результат;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ЕстьОшибкаПроверкиПодключения Тогда
		Назад(Неопределено);
	Иначе
		Вперед(Неопределено);
		ПорядокСтраниц   = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Функция РезультатПроверкиПодключенияКИБ()

	ПоляПроверки = Новый Структура("ПутьКИБ,Пользователь,Пароль");
	ЗаполнитьЗначенияСвойств(ПоляПроверки, ЭтаФорма);
	ПоляПроверкиПодключения = Новый ФиксированнаяСтруктура(ПоляПроверки);
	
	Если ВыгрузкаИзV8 Тогда
		РезультатПроверки = РезультатПроверкиПодключенияКИБV8();
	Иначе
		РезультатПроверки = РезультатПроверкиПодключенияКИБV7();
	КонецЕсли;
	
	Элементы.УточнениеВариантаРасчетаДенежногоДовольствия.Видимость = (РасчетВоеннослужащихВнешнийПараметр <> 0);
	
	Возврат РезультатПроверки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НужнаПроверкаПодключения(Форма)

	// Сравним текущие значения ПутьКИБ,Пользователь,Пароль
	// с теми для которых выполнялась проверка подключения.
	
	Если Форма.ИспользуетсяБазоваяВерсия Тогда
		Возврат Ложь;
	ИначеЕсли Форма.ПоляПроверкиПодключения = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Не Форма.ЕстьОшибкаПроверкиПодключения
		И Форма.ПоляПроверкиПодключения.ПутьКИБ = Форма.ПутьКИБ
		И Форма.ПоляПроверкиПодключения.Пользователь = Форма.Пользователь
		И Форма.ПоляПроверкиПодключения.Пароль = Форма.Пароль Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции


#КонецОбласти

#Область ОбслуживаниеПереходовПоСтраницам

&НаКлиенте
Процедура ВыполнитьСменуСтраницы(Направление)

	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	ОбработатьКомандуСменыСтраницы(Направление);
	ВыполнитьДействияПослеСменыСтраницы(ТекущаяСтраницаИмя);
	ОбновитьФормуПриСменеСтраницы();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПередСменойСтраницы(Отмена,Направление)

	УстановитьВидимостьГруппаОшибкиПроверкиПодключения(ЭтаФорма, Ложь);
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	
	Если Направление = 1 И ТекущаяСтраницаИмя = "ПомощникНачало" Тогда
		
		Если Не ЗначениеЗаполнено(ПрограммаДляВыгрузки) Тогда
			Отмена = Истина;
			ТекстСообщения = НСтр("ru = 'Не выбрана программа, из которой будут переноситься данные.'");
			ПоказатьПредупреждение(,ТекстСообщения);
		КонецЕсли;
		
	ИначеЕсли Направление = 1 И ТекущаяСтраницаИмя = "ПереносДанныхИзИБНастройки" Тогда
		
		УстановитьЕстьВыгрузкаМедицинскогоСтрахования();
		ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкам(ЭтаФорма));
		
	ИначеЕсли Направление = 1 И ТекущаяСтраницаИмя = "ПереносДанныхИзИБНастройкиМедицинскоеСтрахование"
		И Не ЗначениеЗаполнено(СтраховаяКомпания) Тогда
		
		ТекстВопроса = НСтр("ru = 'Внимание! Не указана страховая компания.
		|После переноса данных необходимо будет вручную заполнить
		|страховую компанию в документах 
		|""Прикрепление к программам медицинского страхования"".
		|Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, Символы.ПС, " ");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьДействияПослеВопросаМедицинскоеСтрахование", ЭтотОбъект),
			ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Отмена = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеВопросаМедицинскоеСтрахование(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьСменуСтраницы(1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеСменыСтраницы(БылаСтраницаИмя)
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	
	Если ТекущаяСтраницаИмя = "ПереносДанныхИзИБ" И БылаСтраницаИмя = "ПереносДанныхНачало" Тогда
		
		ЗаполнитьСписокИБ();
		
	ИначеЕсли ТекущаяСтраницаИмя = "ПроверкаПодключенияКИБ" И БылаСтраницаИмя = "ПереносДанныхИзИБ" Тогда
		
		ПодключитьОбработчикОжидания("ПроверкаПодключенияКИнформационнойБазе", 0.2, Истина);
		
	ИначеЕсли ТекущаяСтраницаИмя = "ВыгрузкаЗагрузкаДанныхИзИБ" Тогда
		
		Перерисовать(1, "ВОчереди");
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница	= Элементы.СтраницаЗаголовокПереносНеНачат;
		Элементы.СтраницыРезультат.ТекущаяСтраница			= Элементы.Процесс;
		ЭтапКонвертации = "";
		
	ИначеЕсли ТекущаяСтраницаИмя = "ЗагрузкаДанныхИзФайла" Тогда
		
		ТекстСообщения = НСтр("ru = 'Для загрузки файлов рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
		Обработчик = Новый ОписаниеОповещения("ПослеСменыСтраницыПослеПодключенияРасширения", ЭтотОбъект);
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Обработчик, ТекстСообщения, Ложь);
		
		Элементы.СтраницыРезультатФайл.ТекущаяСтраница			= Элементы.ПроцессФайл;
		ЭтапКонвертации = "";
		
	ИначеЕсли ТекущаяСтраницаИмя = "ПереносДанныхНачало" Тогда
		//  вернулись на первую страницу, сбрасываем информацию о выполненном переносе
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуСменыСтраницы(Направление)
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница.Имя;
	ИндексСтраницы = ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы = Неопределено Тогда
		ИндексНовойСтраницы = 0;
	Иначе
		ИндексНовойСтраницы = ИндексСтраницы + Направление;
	КонецЕсли;
	
	Если ИндексНовойСтраницы > ПорядокСтраниц.ВГраница() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИндексНовойСтраницы < 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтраницаИмя = ПорядокСтраниц.Получить(ИндексНовойСтраницы);
	Если НоваяСтраницаИмя <> Неопределено Тогда
		НоваяСтраница = Элементы.Найти(НоваяСтраницаИмя); 
		Если НоваяСтраница <> Неопределено Тогда          
			Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСохраненияПомощникаВыгрузки

&НаКлиенте
Процедура СохранитьПомощникВыгрузкиПродолжение(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ИмяМакета = ДополнительныеПараметры.ИмяМакета;
	АдресаФайлов = АдресаМакетовВоВременномХранилище(ИмяМакета, ЭтаФорма.УникальныйИдентификатор, ВыгрузкаИзV8);
	// АдресаФайлов - фиксированное соответствие
	// Ключ - Имя файла
	// Значение - адрес файла
	
	Если РасширениеРаботыСФайламиПодключено Тогда
		
		ДиалогВыбораФайла			= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.Заголовок	= НСтр("ru = 'Укажите папку для сохранения помощника выгрузки данных'");
		
		ДополнительныеПараметры.Вставить("АдресаФайлов", АдресаФайлов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайловВыборКаталогаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		
		Попытка
			
			Для каждого ЭлементКоллекции Из АдресаФайлов Цикл
			
				ИмяФайла   = ЭлементКоллекции.Ключ;
				АдресФайла = ЭлементКоллекции.Значение;
				
				ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
				Состояние(НСтр("ru = 'Файл успешно сохранен'"), , АдресФайла);
			
			КонецЦикла;
			
		Исключение
			ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
			|%1'");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьОшибкуВЖурнал(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловВыборКаталогаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество()>0 Тогда
		
		Каталог      = ВыбранныеФайлы.Получить(0);
		АдресаФайлов = ДополнительныеПараметры.АдресаФайлов;
		// АдресаФайлов - фиксированное соответствие
		// Ключ - Имя файла
		// Значение - адрес файла
		
		ПередаваемыеФайлы = Новый Массив;
		ПереданныеФайлы   = Новый Массив;
		МассивВызовов     = Новый Массив;
		
		Для каждого ЭлементКоллекции Из АдресаФайлов Цикл
			ИмяФайла   = ЭлементКоллекции.Ключ;
			АдресФайла = ЭлементКоллекции.Значение;
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Каталог, ИмяФайла);
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(ОписаниеФайла);
		КонецЦикла;
		
		МассивВызовов.Добавить(Новый Массив);
		
		МассивВызовов[0].Добавить("ПолучитьФайлы");
		МассивВызовов[0].Добавить(ПередаваемыеФайлы);
		МассивВызовов[0].Добавить(ПереданныеФайлы);
		МассивВызовов[0].Добавить("");
		МассивВызовов[0].Добавить(Ложь);
		
		ДополнительныеПараметры.Вставить("ПередаваемыеФайлы", ПередаваемыеФайлы);
		ДополнительныеПараметры.Вставить("Каталог", Каталог);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайловЗапросРазрешенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьЗапросРазрешенияПользователя(ОписаниеОповещения, МассивВызовов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловЗапросРазрешенийЗавершение(РазрешенияПолучены, ДополнительныеПараметры) Экспорт
	
	Если РазрешенияПолучены Тогда
		
		ПередаваемыеФайлы = ДополнительныеПараметры.ПередаваемыеФайлы;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПередаваемыеФайлы, ДополнительныеПараметры.Каталог, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	АдресаФайлов = ДополнительныеПараметры.АдресаФайлов;
	// АдресаФайлов - фиксированное соответствие
	// Ключ - Имя файла
	// Значение - адрес файла
	
	Если ДополнительныеПараметры.ПередаваемыеФайлы.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Помощник выгрузки сохранен в:'");
		Для каждого ОписаниеФайла Из ДополнительныеПараметры.ПередаваемыеФайлы Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + СОКРЛП(ОписаниеФайла.Имя); 
		КонецЦикла;	
	Иначе
		ИмяФайла = ДополнительныеПараметры.ПередаваемыеФайлы[0].Имя;
		ШаблонСообщения = НСтр("ru = 'Помощник выгрузки сохранен в: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайла);
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
	Для каждого АдресФайла Из АдресаФайлов Цикл
		УдалитьИзВременногоХранилища(АдресФайла.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказатьЗагруженныеОбъекты()

	Если НовыеЗагруженныеОбъекты.Количество() > 0 Тогда
		
		ИмяМенеджераПечати = "Обработка.ПомощникПереходаСПрежнихПрограммЗарплатаКадры";
		ОбъектыПечати = Новый Массив;
		ОбъектыПечати.Добавить(НовыеЗагруженныеОбъекты[0]);
		ОбъектыПечати.Добавить(НовыеЗагруженныеОбъекты);
		ОбъектыПечати.Добавить(КаталогСФайлами);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати, "ПФ_MXL_СписокЗагруженныхОбъектов", ОбъектыПечати, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьВсеРазделыКОРП(Включить)
	
	Для каждого ТекущаяСтрока Из СведенияКОРП Цикл
		ТекущаяСтрока.Выгружать = Включить;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЕстьВыгрузкаМедицинскогоСтрахования()

	ЕстьВыгрузкаМедицинскогоСтрахования = Ложь;
	
	Если ВыгружатьДанныеКОРП Тогда
		НайденныеСтроки = СведенияКОРП.НайтиСтроки(Новый Структура("Идентификатор", "МедицинскоеСтрахование"));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЕстьВыгрузкаМедицинскогоСтрахования = НайденныеСтроки[0].Выгружать;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьВыгрузкаМедицинскогоСтрахования Тогда
		СтраховаяКомпания = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти