#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		
		БазоваяВерсияКонфигурации = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
		ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
		ИспользоватьРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
		Если Не БазоваяВерсияКонфигурации Тогда
			КорпоративнаяВерсияКонфигурации = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
		КонецЕсли;
		
		СозданиеНовой = Истина;
		ОрганизацияСсылка = Справочники.Организации.ПолучитьСсылку();
		УстановитьПараметрыИНН(ЭтотОбъект);
		
		УстановитьОтображениеГруппыРКИСН(ЭтотОбъект);
		УстановитьОтображениеЭлементовЗависящихОтПримененияРК(ЭтотОбъект);
		УстановитьОтображениеЭлементовЗависящихОтПримененияСН(ЭтотОбъект);
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтотОбъект, "НастройкиСистемыНалогообложения", ОрганизацияСсылка);
		
		НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
			Модуль.ОбъектНазначенияПодготовитьФорму(ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		ОрганизацияСсылка = Объект.Ссылка;
	КонецЕсли;
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаПриСозданииНаСервере(ЭтотОбъект);
	
	УстановитьВидимостьИндивидуальногоПредпринимателя(ЭтотОбъект);
	УстановитьВидимостьЭУПриИзмененииОбособленноеПодразделение(ЭтотОбъект);
	УстановитьОтображениеЭлементовЗависящихОтСамостоятельностиОрганизации(ЭтотОбъект);
	
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ДополнительныеПараметры.ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	УправлениеКонтактнойИнформациейЗарплатаКадры.ПриСозданииНаСервере(ЭтотОбъект);
	
	УстановитьВидимостьРегистрацииВНалоговомОргане();
	УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтотОбъект);
	УстановитьДлинуКодаПоОКПО(ЭтотОбъект);

	ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляЦветТекстаПоля 		= ЦветаСтиля.ЦветТекстаПоля;
	ЦветСтиляПоясняющийТекст		= ЦветаСтиля.ПоясняющийТекст;
	
	ОбработатьОтображениеПоляИНН(ЭтотОбъект);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(
		Элементы.ОГРН,   Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтотОбъект);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(
		Элементы.ОГРНИП, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтотОбъект);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОКПО(Элементы.ОрганизацияКодПоОКПО, 
		Объект.КодПоОКПО, Объект.ЮридическоеФизическоеЛицо, Объект.ОбособленноеПодразделение, ЭтотОбъект);
	
	Параметры.Свойство("ОткрытаВОкнеКлиентскогоПриложения", ОткрытаВОкнеКлиентскогоПриложения);
	
	Если Параметры.Ключ.Пустая() Тогда
		ДокументооборотСГосОрганамиПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	ИННПрежнееЗначение = Объект.ИНН;
	Если Объект.ОбособленноеПодразделение Тогда
		ГоловнаяОрганизацияПрежняя = Объект.ГоловнаяОрганизация;
		ОтчитывающаясяОрганизацияПрежняя = ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация;
	Иначе
		ГоловнаяОрганизацияПрежняя = Справочники.Организации.ПустаяСсылка();
		ОтчитывающаясяОрганизацияПрежняя = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
		
	Если БазоваяВерсияКонфигурации Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаФилиал",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ЕстьОбособленныеПодразделения",
			"Заголовок",
			НСтр("ru = 'У организации есть обособленные подразделения'"));	
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОсновныеСведения",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная"));
	
	Элементы.НадписьСформироватьЗаявлениеНаПодключениеКЭлектронномуДокументообороту.Заголовок =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаголовокГиперссылкиЗаявления(
			ЭтотОбъект, Объект.Ссылка, Отказ, СтандартнаяОбработка);
		
	УстановитьПодсказкиВвода();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервОтпусковРасширенный");
		Модуль.ДополнитьФормуЭлементаСправочникаОрганизации(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		Модуль.ДополнитьФормуЭлементаСправочникаОрганизации(ЭтотОбъект);
	КонецЕсли;
	
	// Поддержка отображения списка значений параметров расчета для текущего элемента справочника
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетОкладовПреподавателей");
		Модуль.ДобавитьОтображениеЗначенийПараметровРасчета(ЭтотОбъект, Элементы.ГруппаСОТП, Объект.Ссылка);
	КонецЕсли;
	// Конец Поддержка отображения списка значений параметров расчета для текущего элемента справочника
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодписиДокументовОснованияПолномочий") Тогда
		Если КорпоративнаяВерсияКонфигурации Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ПодписиДокументовОснованияПолномочий");
			Модуль.ДополнитьФормуЭлементаСправочникаОрганизации(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокЕНВД = СтрШаблон(НСтр("ru = 'С %1 единый налог на вмененный доход отменен'"), Формат(ЗарплатаКадры.ДатаОтменыЕНВД(), "ДФ=dd.MM.yyyy"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияОтменаЕНВД",
		"Заголовок",
		ЗаголовокЕНВД);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ОткрытаВОкнеКлиентскогоПриложения Тогда
		
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписатьИЗакрыть.Заголовок = НСтр("ru = 'Записать'"); 
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписатьИЗакрыть.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Записать объект'");
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписать.Видимость = Ложь;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			
	КонецЕсли;
	
	УстановитьПредставленияНастроекОбмена(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане"
		И (Параметр.Владелец = Объект.Ссылка
			Или Объект.ОбособленноеПодразделение И Параметр.Владелец = Объект.ГоловнаяОрганизация) Тогда
		
		Если Объект.РегистрацияВНалоговомОргане <> Параметр.Ссылка Тогда
			Объект.РегистрацияВНалоговомОргане = Параметр.Ссылка;
			Модифицированность = Истина;
		КонецЕсли;
		УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" И ОрганизацияСсылка = Источник И Параметр.ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда	
		
		РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
					ЭтотОбъект,
					ОрганизацияСсылка,
					ИмяСобытия,
					Параметр,
					Источник);
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "НастройкиСистемыНалогообложения.Период", "НастройкиСистемыНалогообложенияПериодСтрокой");
		
	КонецЕсли;
	
	ЗарплатаКадрыКлиент.ОрганизацииФормаЭлементаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// Поддержка отображения списка значений параметров расчета для текущего элемента справочника
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетОкладовПреподавателейКлиент");
		Модуль.ОбработатьОповещениеИзмененияПараметраРасчета(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр);
	КонецЕсли;
	// Конец Поддержка отображения списка значений параметров расчета для текущего элемента справочника
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ОрганизацияСсылка = Объект.Ссылка;
	КонецЕсли;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
	БазоваяВерсияКонфигурации = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ИспользоватьРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	Если Не БазоваяВерсияКонфигурации Тогда
		КорпоративнаяВерсияКонфигурации = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаПриЧтенииНаСервере(ЭтотОбъект);
	ПрочитатьДанныеУчетнойПолитики();
	СтимулирующиеВыплатыФСС.ПрочитатьДополнительныеДанныеОрганизации(ЭтотОбъект, Объект.Ссылка);
	УчетСтраховыхВзносов.ПрочитатьДополнительныеДанныеОрганизации(ЭтотОбъект, Объект.Ссылка);
	
	УстановитьПараметрыИНН(ЭтотОбъект);
	
	УстановитьОтображениеГруппыРКИСН(ЭтотОбъект);
	УстановитьОтображениеЭлементовЗависящихОтПримененияРК(ЭтотОбъект);
	УстановитьОтображениеЭлементовЗависящихОтПримененияСН(ЭтотОбъект);
	УстановитьОтображениеГруппыРКИСН(ЭтотОбъект);
	УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(ЭтотОбъект);
	
	ОбновитьНаименованиеОрганаФСГС(ЭтотОбъект);
	
	ДокументооборотСГосОрганамиПриПолученииДанныхНаСервере();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
		Модуль.ОбъектНазначенияПриЧтенииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда 
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	ЗаписьНовогоОбъекта = Ложь;
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(ОрганизацияСсылка);
		ЗаписьНовогоОбъекта = Истина;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// Обработчик подсистемы "Свойства".
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если ТекущийОбъект.РегистрацияВНалоговомОргане.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Если ЗаписьНовогоОбъекта Тогда
			СуществующаяЗапись = Неопределено;
		Иначе
			СуществующаяЗапись = РегламентированнаяОтчетность.ПолучитьПоКодамРегистрациюВИФНС(ТекущийОбъект.Ссылка, "");
		КонецЕсли;
		
		Если СуществующаяЗапись = Неопределено Тогда
			
			РегистрацияНайдена = Ложь;
			Если ТекущийОбъект.ОбособленноеПодразделение Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.ГоловнаяОрганизация);
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
					|ГДЕ
					|	РегистрацииВНалоговомОргане.КПП = """"
					|	И РегистрацииВНалоговомОргане.Владелец = &Владелец";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					РегистрацияНайдена = Истина;
					ТекущийОбъект.РегистрацияВНалоговомОргане = Выборка.Ссылка;
					РегистрацияВНалоговомОрганеСсылка = ТекущийОбъект.РегистрацияВНалоговомОргане;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не РегистрацияНайдена Тогда
				ТекущийОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
				РегистрацияВНалоговомОрганеСсылка = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
			КонецЕсли;
			
		Иначе
			
			ТекущийОбъект.РегистрацияВНалоговомОргане = СуществующаяЗапись;
			РегистрацияВНалоговомОрганеСсылка = СуществующаяЗапись;
			
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		РегистрацияВНалоговомОрганеСсылка = ТекущийОбъект.РегистрацияВНалоговомОргане;
		
	КонецЕсли;
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаПередЗаписьюНаСервере(ЭтотОбъект);
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтотОбъект, "НастройкиСистемыНалогообложения", ОрганизацияСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РегистрацияВНалоговомОрганеСсылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрацияВНалоговомОрганеОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		РегистрацияВНалоговомОрганеОбъект.УстановитьСсылкуНового(ТекущийОбъект.РегистрацияВНалоговомОргане);
		
		Если ТекущийОбъект.Ссылка = ТекущийОбъект.ГоловнаяОрганизация Тогда
			РегистрацияВНалоговомОрганеОбъект.Владелец	= ТекущийОбъект.Ссылка;
		Иначе
			РегистрацияВНалоговомОрганеОбъект.Владелец	= ТекущийОбъект.ГоловнаяОрганизация;
		КонецЕсли;
		
		РегистрацияВНалоговомОрганеОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если Не Объект.РегистрацияВНалоговомОргане.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрацияВНалоговомОрганеОбъект = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		Если РегистрацияВНалоговомОрганеОбъект <> Неопределено Тогда
			РегистрацияВНалоговомОрганеОбъект.Записать();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
		Модуль.ОбъектНазначенияПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект.Ссылка, Отказ);
	КонецЕсли;
	
	СтимулирующиеВыплатыФСС.ЗаписатьДополнительныеДанныеОрганизации(ЭтотОбъект, ТекущийОбъект.Ссылка);
	УчетСтраховыхВзносов.ЗаписатьДополнительныеДанныеОрганизации(ЭтотОбъект, ТекущийОбъект.Ссылка, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаПослеЗаписиНаСервере(ЭтотОбъект);
	
	УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтотОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
		Модуль.ОбъектНазначенияПриПолученииДанных(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если СозданиеНовой И НЕ Параметры.Ключ.Пустая() Тогда
		Оповестить("СозданаОрганизация", Объект.Ссылка, );
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(Объект.Ссылка, ЭтотОбъект);
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЮридическоеФизическоеЛицоПриИзменении(Элемент)
	
	УстановитьВидимостьИндивидуальногоПредпринимателя(ЭтотОбъект);
	УстановитьПараметрыИНН(ЭтотОбъект);
	
	ОбработатьОтображениеПоляИНН(ЭтотОбъект);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(
		Элементы.ОГРН,   Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтотОбъект);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(
		Элементы.ОГРНИП, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтотОбъект);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОКПО(Элементы.ОрганизацияКодПоОКПО, 
		Объект.КодПоОКПО, Объект.ЮридическоеФизическоеЛицо, Объект.ОбособленноеПодразделение, ЭтотОбъект);
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Объект.ЕстьОбособленныеПодразделения = Ложь;
	КонецЕсли; 
	
	УстановитьОтображениеГруппыРКИСН(ЭтотОбъект);
	УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеФизическоеЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.ЗаполнитьНаименованияПоСокращенному(
		Объект.ЮридическоеФизическоеЛицо,
		Объект.НаименованиеСокращенное,
		Объект.Наименование,
		Объект.НаименованиеПолное,
		НаименованиеСокращенное,
		ФИОИндивидуальногоПредпринимателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОбособленныеПодразделенияПриИзменении(Элемент)
	
	УстановитьОтображениеГруппыРКИСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	Если Объект.ОбособленноеПодразделение Тогда
		ИННПрежнееЗначение = Объект.ИНН;
		Объект.ГоловнаяОрганизация = ГоловнаяОрганизацияПрежняя;
		ДанныеГоловнойОрганизации = ДанныеГоловнойОрганизации(ГоловнаяОрганизацияПрежняя);
		ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация = ОтчитывающаясяОрганизацияПрежняя;
		Объект.ИНН = ДанныеГоловнойОрганизации.ИНН;
	Иначе
		Объект.ИНН = ИННПрежнееЗначение;
		ГоловнаяОрганизацияПрежняя = Объект.ГоловнаяОрганизация;
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
		ОтчитывающаясяОрганизацияПрежняя = ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация;
		ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	
	ОбработатьОтображениеПоляИНН(ЭтотОбъект);
	УстановитьВидимостьЭУПриИзмененииОбособленноеПодразделение(ЭтотОбъект);
	УстановитьОтображениеЭлементовЗависящихОтСамостоятельностиОрганизации(ЭтотОбъект);
	УстановитьОтображениеГруппыРКИСН(ЭтотОбъект);
	УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(ЭтотОбъект);
	УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтотОбъект);
	УстановитьПараметрыВыбораТерриториальныхУсловий(ЭтотОбъект);
	УстановитьДлинуКодаПоОКПО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьСевернуюНадбавкуПриИзменении(Элемент)
	
	Если НЕ Объект.ПрименятьСевернуюНадбавку Тогда
		ПрименятьСевернуюНадбавкуПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьОтображениеЭлементовЗависящихОтПримененияСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПриИзменении(Элемент)
	
	Объект.РегистрационныйНомерПФР = ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	Объект.КодОрганаПФР	= Лев(СокрЛ(Объект.РегистрационныйНомерПФР), 7);
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(
		ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТерриториальныеУсловияПФРПриИзменении(Элемент)
	
	ПриИзмененииТерриториальныхУсловий(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеЗавершениеВыбора", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования, 
		НСтр("ru = 'Полное наименование'"));

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Объект.НаименованиеПолное = РезультатВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьРайонныйКоэффициентПриИзменении(Элемент)
	
	Если НЕ Объект.ПрименятьРайонныйКоэффициент Тогда
		Объект.ПрименятьСевернуюНадбавку = Ложь;
		Объект.РайонныйКоэффициент = 1;
		Объект.РайонныйКоэффициентРФ = 1;
		ПрименятьСевернуюНадбавкуПриИзмененииНаСервере();
		УстановитьОтображениеЭлементовЗависящихОтПримененияСН(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьОтображениеЭлементовЗависящихОтПримененияРК(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентРФПриИзменении(Элемент)
	
	ПриИзмененииРайонногоКоэффициента();
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентПриИзменении(Элемент)
	
	ПриИзмененииРайонногоКоэффициента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбменаСКонтролирующимиОрганамиПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастройкиДокументооборота", ЭтотОбъект);
	ЗаписатьПриНаличииИзменений(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаФССПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастройкиОбменаФСС", ЭтотОбъект);
	ЗаписатьПриНаличииИзменений(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодРегулирование(ЭтотОбъект, Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

//ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВ"
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ОбработатьОтображениеПоляИНН(ЭтотОбъект);
	ИННПрежнееЗначение = Объект.ИНН;
КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(
		Элементы.ОГРН, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОГРНИППриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(
		Элементы.ОГРНИП, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКодПоОКПОПриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОКПО(Элементы.ОрганизацияКодПоОКПО, 
		Объект.КодПоОКПО, Объект.ЮридическоеФизическоеЛицо, Объект.ОбособленноеПодразделение, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	ИндивидуальныйПредпринимательПриИзмененииНаСервере(Объект.ИНН, Объект.ИндивидуальныйПредприниматель, ФИОИндивидуальногоПредпринимателя);
	ОбработатьОтображениеПоляИНН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	ГоловнаяОрганизацияПриИзмененииНаСервере();
	ОбработатьОтображениеПоляИНН(ЭтотОбъект);
	УстановитьОтображениеЭлементовЗависящихОтСамостоятельностиОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчитывающиесяПоВзносамОрганизацииОтчитывающаясяОрганизацияПриИзменении(Элемент)
	УстановитьОтображениеЭлементовЗависящихОтСамостоятельностиОрганизации(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КрупнейшийНалогоплательщикПриИзменении(Элемент)
	
	Если НЕ Объект.КрупнейшийНалогоплательщик Тогда
		Объект.КодНалоговогоОрганаПолучателя = "";
	КонецЕсли;
	
	УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСПриИзменении(Элемент)
	ОбновитьНаименованиеОрганаФСГС(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПослеЗавершенияВыбораКодаОрганаФСГС", ЭтотОбъект));
	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		ДополнительныеПараметры.Вставить("ТекущийКодТОГС", Объект.КодОрганаФСГС);
	Иначе
		Фильтр = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
		НайденныеСтроки = ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"].НайтиСтроки(Фильтр);
		Для Каждого ОписаниеКонтактнойИнформацииФормы Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(ОписаниеКонтактнойИнформацииФормы.Значение) Тогда
				КодРегиона = КодРегионаПоАдресу(ОписаниеКонтактнойИнформацииФормы.Значение);
				Если ЗначениеЗаполнено(КодРегиона) Тогда
					ДополнительныеПараметры.Вставить("КодРегиона", КодРегиона);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьКодОрганаТОГС(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСистемыНалогообложенияПериодСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(
		ЭтотОбъект, "НастройкиСистемыНалогообложения.Период", "НастройкиСистемыНалогообложенияПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСистемыНалогообложенияПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(
		ЭтотОбъект,
		ЭтотОбъект,
		"НастройкиСистемыНалогообложения.Период",
		"НастройкиСистемыНалогообложенияПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСистемыНалогообложенияПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(
		ЭтотОбъект, 
		"НастройкиСистемыНалогообложения.Период", 
		"НастройкиСистемыНалогообложенияПериодСтрокой", 
		Направление, 
		Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСистемыНалогообложенияПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиСистемыНалогообложенияПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятия

&НаКлиенте
Процедура Подключаемый_МероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияВыбор(ЭтотОбъект, Элемент, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияПередУдалением(Элемент, Отказ)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияПередУдалением(ЭтотОбъект, Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияМероприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияМероприятиеНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияМероприятиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияМероприятиеОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьМастер(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуМастераЗаявленияНаПодключение", ЭтотОбъект);
	ЗаписатьПриНаличииИзменений(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьСписок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуСпискаЗаявленийНаПодключение", ЭтотОбъект);
	ЗаписатьПриНаличииИзменений(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРИстория(Команда)
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(
		"ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка, ЭтотОбъект, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРегистрациюВНалоговомОргане(Команда)
	
	ДополнительныеПараметры = Новый Структура("ЗаписатьОрганизацию", Истина);
	
	// Если данные организации еще не записаны, предложим записать.
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Организация еще не записана.
		|Записать и продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьРегистрациюВНалоговомОрганеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = '1С:Предприятие'"));
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьОрганизацию = Ложь;
		ИзменитьРегистрациюВНалоговомОрганеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТерриториальныеУсловияПФРИстория(Команда)
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(
		"ТерриториальныеУсловияПФР", ОрганизацияСсылка, ЭтотОбъект, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Процедура ВоинскийУчет(Команда)
	
	ОткрытьФормуНастроек("ОбщаяФорма.ОрганизацияВоинскийУчет");

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛица(Команда)
	
	ОткрытьФормуНастроек("ОбщаяФорма.ОрганизацияОтветственныеЛица");
	
КонецПроцедуры

&НаКлиенте
Процедура БухучетИВыплатаЗарплаты(Команда)
	
	ОткрытьФормуНастроек("ОбщаяФорма.ОрганизацияБухучетИВыплатаЗарплаты");
		
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитика(Команда)
	
	ОткрытьФормуНастроек("ОбщаяФорма.ОрганизацияУчетнаяПолитика");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ЗаписатьНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикЕНВДИстория(Команда)
	
	ТолькоПросмотрИстории = ТолькоПросмотр ИЛИ Объект.ОбособленноеПодразделение;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(
		"НастройкиСистемыНалогообложения", 
		?(Объект.ОбособленноеПодразделение, 
			Объект.ГоловнаяОрганизация, 
			ОрганизацияСсылка), 
		ЭтотОбъект, 
		ТолькоПросмотрИстории);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкиРасчетаРезервовОтпусков(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РезервОтпусковКлиентРасширенный");
		ОткрытьФормуНастроек(Модуль.ИмяФормыНастройкиРасчетаРезервовОтпусков());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкиМедицинскогоСтрахования(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("МедицинскоеСтрахованиеКлиент");
		ОткрытьФормуНастроек(Модуль.ИмяФормыНастройкиМедицинскогоСтрахования());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкиОснованияПолномочий(Команда)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодписиДокументовОснованияПолномочий") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодписиДокументовОснованияПолномочийКлиент");
		ОткрытьФормуНастроек(Модуль.ИмяФормыНастройкиОснованияПолномочий());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиОрганизации(Команда)
	
	ДополнительныеПараметры = Новый Структура("ЗаписатьОрганизацию", Истина);

	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Организация еще не записана.
		|Записать и продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("НастройкиОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = '1С:Предприятие'"));
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьОрганизацию = Ложь;
		НастройкиОрганизацииЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСоциальногоЭлектронногоДокументооборота(Команда)
	ЗаписатьПриНаличииИзменений(Новый ОписаниеОповещения("НастройкиСЭДОФССПослеЗаписи", ЭтотОбъект));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	УправлениеКонтактнойИнформациейЗарплатаКадры.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ИзменитьРегистрациюВНалоговомОрганеЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьОрганизацию Тогда 
		// Если получено разрешение на запись данных организации, запишем.
		ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена", Истина);
		Если НЕ Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеРегистрацииВНалоговомОргане", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ГоловнаяОрганизацияПриИзмененииНаСервере()
	
	ДанныеГоловнойОрганизации = ДанныеГоловнойОрганизации(Объект.ГоловнаяОрганизация);
	Объект.ИНН = ДанныеГоловнойОрганизации.ИНН;
	ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация = Справочники.Организации.ПустаяСсылка();
	ОтчитывающаясяОрганизацияПрежняя = Справочники.Организации.ПустаяСсылка();
	
	УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеГоловнойОрганизации(ГоловнаяОрганизация)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГоловнаяОрганизация, "ИНН");
	
КонецФункции

&НаСервере
Процедура УстановитьПодсказкиВвода()

	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Ромашка ООО'");      
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'ООО ""Ромашка""'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'Общество с ограниченной ответственностью ""Ромашка""'");	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеУчетнойПолитики()

	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
		ЭтотОбъект, "НастройкиСистемыНалогообложения", Объект.Ссылка);
	Если Не ЗначениеЗаполнено(НастройкиСистемыНалогообложения.Период) Тогда
		НастройкиСистемыНалогообложения.Период = Дата(2010,1,1);
		НастройкиСистемыНалогообложенияПрежняя = Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(НастройкиСистемыНалогообложения, Метаданные.РегистрыСведений.НастройкиСистемыНалогообложения));
	КонецЕсли;
	ОбновитьПолеНастройкиСистемыНалогообложенияПериод(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтотОбъект, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИндивидуальногоПредпринимателя(Форма)
	
	ЭтоЮридическоеЛицо = Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
	Если ЭтоЮридическоеЛицо Тогда
		
		Форма.Элементы.ГруппаИндивидуальныйПредприниматель.ТекущаяСтраница	= Форма.Элементы.ГруппаИндивидуальныйПредпринимательНевидимая;
		Форма.Элементы.ГруппаОГРН.ТекущаяСтраница							= Форма.Элементы.ГруппаОГРНЮридическоеЛицо;
		Форма.Элементы.ГруппаФилиал.ТекущаяСтраница 						= Форма.Элементы.ГруппаДоступенФилиал;
		
	Иначе
		
		Форма.Элементы.ГруппаИндивидуальныйПредприниматель.ТекущаяСтраница	= Форма.Элементы.ГруппаИндивидуальныйПредпринимательВидимая;
		Форма.Элементы.ГруппаОГРН.ТекущаяСтраница							= Форма.Элементы.ГруппаОГРНФизическоеЛицо;
		Форма.Элементы.ГруппаФилиал.ТекущаяСтраница 						= Форма.Элементы.ГруппаНеДоступенФилиал;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭУПриИзмененииОбособленноеПодразделение(Форма)
	
	Если Форма.Объект.ОбособленноеПодразделение Тогда
		Форма.Элементы.ГруппаГоловнаяОрганизация.ТекущаяСтраница = Форма.Элементы.ГруппаГоловнаяОрганизацияВидимая;
	Иначе
		Форма.Элементы.ГруппаГоловнаяОрганизация.ТекущаяСтраница = Форма.Элементы.ГруппаГоловнаяОрганизацияНевидимая;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИНН",
		"ТолькоПросмотр",
		Форма.Объект.ОбособленноеПодразделение);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НастройкиСистемыНалогообложенияПлательщикЕНВД",
		"Доступность",
		Не Форма.Объект.ОбособленноеПодразделение);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НастройкиСистемыНалогообложенияПериодСтрокой",
		"Доступность",
		Не Форма.Объект.ОбособленноеПодразделение);	
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРегистрацииВНалоговомОргане()
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	РегистрацияВНалоговомОрганеДоступна = ПравоДоступа("Чтение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаРегистрацияВНалоговомОргане",
		"Видимость",
		ИспользоватьРасчетЗарплатыРасширенная И РегистрацияВНалоговомОрганеДоступна);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИзменитьРегистрациюВНалоговомОргане",
		"Видимость",
		ИспользоватьРасчетЗарплатыРасширенная И РегистрацияВНалоговомОрганеДоступна);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеРегистрацииВНалоговомОргане(Форма)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы, "ГруппаРегистрацияВНалоговомОргане", "Видимость") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПредставлениеРегистрацииВНалоговомОргане =
		ЗарплатаКадрыКлиентСервер.ПредставлениеРегистрацииВНалоговомОргане(Форма.Объект.Ссылка, Форма.Объект.РегистрацияВНалоговомОргане);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ОбособленноеПодразделение
		Или Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		
		ВидимостьГруппыКрупнейшийНалогоплательщик = Ложь;
		
	Иначе
		ВидимостьГруппыКрупнейшийНалогоплательщик = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КрупнейшийНалогоплательщикГруппа",
		"Видимость",
		ВидимостьГруппыКрупнейшийНалогоплательщик
	);
	
	Если ВидимостьГруппыКрупнейшийНалогоплательщик Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КодНалоговогоОрганаПолучателя",
			"Доступность",
			Объект.КрупнейшийНалогоплательщик
		);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДлинуКодаПоОКПО(Форма)
		
	Если Форма.Объект.ОбособленноеПодразделение Тогда
		Форма.Элементы.ОрганизацияКодПоОКПО.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(14));
		Форма.Элементы.ОрганизацияКодПоОКПО.Заголовок = НСтр("ru = 'Идентификационный номер Росстата'");
	Иначе
		Форма.Элементы.ОрганизацияКодПоОКПО.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10));
		Форма.Элементы.ОрганизацияКодПоОКПО.Заголовок = НСтр("ru = 'Код по ОКПО'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиДокументооборота(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ОрганизацияЗаписанаУспешно() Тогда
		
		ЗначенияЗаполнения	= Новый Структура(
			"Организация, ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена",
			Объект.Ссылка, Объект.ВидОбменаСКонтролирующимиОрганами, Объект.УчетнаяЗаписьОбмена);
		ОткрытьФорму(
			"ОбщаяФорма.ОрганизацияНастройкаДокументооборота", 
			Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), 
			ЭтотОбъект);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОбменаФСС(Результат, ДополнительныеПараметры) Экспорт
	
	Если ОрганизацияЗаписанаУспешно() Тогда
		
		ПараметрыФормы = Новый Структура("ОрганизацияСсылка", Объект.Ссылка);
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастройкиОбменаФССЗавершение", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НастройкиОбменаФСС.ФормаЗаписи", ПараметрыФормы, , , , , 
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОбменаФССЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	НастройкиОбменаФССПредставление = ПолучитьНастройкиОбменаФСС(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуМастераЗаявленияНаПодключение(Результат, ДополнительныеПараметры) Экспорт

	Если ОрганизацияЗаписанаУспешно() Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
			Объект.Ссылка, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаЗаявленийНаПодключение(Результат, ДополнительныеПараметры) Экспорт

	Если ОрганизацияЗаписанаУспешно() Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуСпискаЗаявленийНаПодключение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(ИмяФормы)
	
	ДополнительныеПараметры = Новый Структура("ИмяФормы", ИмяФормы);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// Если данные организации еще не записаны, предложим записать.
	ЗаписатьПриНаличииИзменений(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ОрганизацияЗаписанаУспешно() Тогда 
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок", Объект.Наименование);
		ПараметрыОткрытия.Вставить("ОрганизацияСсылка", Объект.Ссылка);
			
		ОткрытьФорму(
			ДополнительныеПараметры.ИмяФормы, 
			ПараметрыОткрытия, 
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ОрганизацияЗаписанаУспешно()

	Возврат Не (Модифицированность Или Параметры.Свойство("Ключ") И Параметры.Ключ.Пустая());
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьПриНаличииИзменений(ОбработкаОповещения)
	
	Если ОрганизацияЗаписанаУспешно() Тогда
		ВыполнитьОбработкуОповещения(ОбработкаОповещения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОбработкаОповещения", ОбработкаОповещения);
	
	ТекстВопроса = НСтр("ru = 'Организация еще не записана.
		|Записать и продолжить?'");
		
	Оповещение = Новый ОписаниеОповещения("ЗаписатьПриНаличииИзмененийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = '1С:Предприятие'"));

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПриНаличииИзмененийЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Если получено разрешение на запись данных организации, запишем.
	Записать(); 
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ОбработкаОповещения") Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИндивидуальныйПредпринимательПриИзмененииНаСервере(ИНН, ИндивидуальныйПредприниматель, ФИОИндивидуальногоПредпринимателя)
	
	Если НЕ ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		ИНН = "";
		ФИОИндивидуальногоПредпринимателя = "";
		Возврат;
	КонецЕсли;
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИндивидуальныйПредприниматель, "ИНН");
	
	ФИО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИндивидуальныйПредприниматель, "ФИО");
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыИНН(Форма)
	
	Если Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Маска = "999999999999";
	Иначе
		Маска = "9999999999";
		Если СтрДлина(Форма.Объект.ИНН) > 10 Тогда
			Форма.Объект.ИНН = Лев(Форма.Объект.ИНН, 10);
		КонецЕсли; 
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИНН",
		"Маска",
		Маска);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеГруппыРКИСН(Форма)
	
	Если НЕ Форма.Объект.ЕстьОбособленныеПодразделения Тогда
				
		Форма.Элементы.СтраницыРК.ТекущаяСтраница = Форма.Элементы.РКНетФилиалов;    
		Форма.Элементы.СтраницыСН.ТекущаяСтраница = Форма.Элементы.СННетФилиалов;
		Форма.Элементы.ГруппаРКиСНИнформация.ТекущаяСтраница = Форма.Элементы.СтраницаРКСНИнформацияПустая;
		
	ИначеЕсли Форма.Объект.ОбособленноеПодразделение Тогда
		
		Форма.Элементы.СтраницыРК.ТекущаяСтраница = Форма.Элементы.РКФилиал;
		Форма.Элементы.СтраницыСН.ТекущаяСтраница = Форма.Элементы.СНФилиал;
		Форма.Элементы.ГруппаРКиСНИнформация.ТекущаяСтраница = Форма.Элементы.СтраницаРКСНИнформацияФилиал;
		
	Иначе
		
		Форма.Элементы.СтраницыРК.ТекущаяСтраница = Форма.Элементы.РКГоловнаяОрганизация;
		Форма.Элементы.СтраницыСН.ТекущаяСтраница = Форма.Элементы.СНГоловнаяОрганизация;
		Если Форма.БазоваяВерсияКонфигурации Тогда
			Форма.Элементы.ГруппаРКиСНИнформация.ТекущаяСтраница = Форма.Элементы.СтраницаРКСНИнформацияФилиал;
		Иначе
			Форма.Элементы.ГруппаРКиСНИнформация.ТекущаяСтраница = Форма.Элементы.СтраницаРКСНИнформацияГО;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовЗависящихОтПримененияРК(Форма)
	
	ПрименятьРайонныйКоэффициент = Форма.Объект.ПрименятьРайонныйКоэффициент;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрименятьСевернуюНадбавкуГО",
		"Доступность",
		ПрименятьРайонныйКоэффициент);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрименятьСевернуюНадбавкуФилиал",
		"Доступность",
		ПрименятьРайонныйКоэффициент);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрименятьСевернуюНадбавку",
		"Доступность",
		ПрименятьРайонныйКоэффициент);	
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"РайонныйКоэффициент",
		"Доступность",
		ПрименятьРайонныйКоэффициент);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"РайонныйКоэффициентРФ",
		"Доступность",
		ПрименятьРайонныйКоэффициент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовЗависящихОтПримененияСН(Форма)
	
	ПрименятьСевернуюНадбавку = Форма.Объект.ПрименятьСевернуюНадбавку;
	
	Если ПрименятьСевернуюНадбавку И Форма.ИспользоватьШтатноеРасписание Тогда
		Форма.Элементы.ГруппаПроцентСНОценкаФОТ.ТекущаяСтраница = Форма.Элементы.ГруппаПроцентСН;
	Иначе
		Форма.Элементы.ГруппаПроцентСНОценкаФОТ.ТекущаяСтраница = Форма.Элементы.ГруппаПроцентСНПустая;
	КонецЕсли;
	
	УстановитьПараметрыВыбораТерриториальныхУсловий(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовЗависящихОтСамостоятельностиОрганизации(Форма)
	
	ОрганизацияСамостоятельноОтчитываетсяПоВзносам = Не ЗначениеЗаполнено(Форма.ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация) Или Форма.ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация = Форма.Объект.Ссылка;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОрганизацияРегистрационныйНомерПФР",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИсторияРегистрацийВОрганеПФРПериодСтрокой",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИсторияРегистрацийВОрганеПФРИстория",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);	
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОрганизацияНаименованиеТерриториальногоОрганаПФР",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОрганизацияКодОрганаПФР",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОрганизацияРегистрационныйНомерФСС",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОрганизацияНаименованиеТерриториальногоОрганаФСС",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);	
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОрганизацияКодПодчиненностиФСС",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОрганизацияДополнительныйКодФСС",
		"Доступность",
		ОрганизацияСамостоятельноОтчитываетсяПоВзносам);
	
КонецПроцедуры

&НаСервере
Процедура ДокументооборотСГосОрганамиПриПолученииДанныхНаСервере()
	Элементы.ВидОбменаСКонтролирующимиОрганамиПредставление.Доступность = НЕ ТолькоПросмотр;
	НастройкиОбменаФССПредставление = ПолучитьНастройкиОбменаФСС(Объект.Ссылка);

	Элементы.НастройкиОбменаФССПредставление.Доступность = НЕ ТолькоПросмотр;
	
	УстановитьПредставленияНастроекОбмена(ЭтотОбъект);
	
	Элементы.ВидОбменаСКонтролирующимиОрганамиПредставление.ПропускатьПриВводе	= ЗначениеЗаполнено(Объект.ВидОбменаСКонтролирующимиОрганами);	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставленияНастроекОбмена(Форма)
	Организация = Форма.Объект;
	
	Если Организация.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате") Тогда
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление	= НСтр("ru='Обмен в универсальном формате'");
	ИначеЕсли Организация.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер") Тогда
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление	= НСтр("ru='Обмен посредством ПК ""Спринтер""'");
	Иначе
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление	= НСтр("ru='Не используется'");
	КонецЕсли;	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораТерриториальныхУсловий(Форма)
	
	Организация = Форма.Объект;
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьТерриторииСОсобымиКлиматическимиУсловиями", Организация.ПрименятьСевернуюНадбавку));
	Если Форма.КорпоративнаяВерсияКонфигурации И Организация.ОбособленноеПодразделение Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьЗаграничныеТерритории", Истина));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТерриториальныеУсловияПФР",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(МассивПараметровВыбора));
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиОбменаФСС(Организация)
	
	ПредставлениеНастроек = НСтр("ru='Не используется'");
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = РегистрыСведений.НастройкиОбменаФСС.Выбрать(Новый Структура("Организация", Организация));
	Если Выборка.Следующий() Тогда
		Если Выборка.ИспользоватьОбмен Тогда
			ПредставлениеНастроек = НСтр("ru='Включен'");
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	 
	Возврат ПредставлениеНастроек;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТерриториальныхУсловий(Форма)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "ТерриториальныеУсловияПФР", Форма.ОрганизацияСсылка);
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьПроцентЗаОсобыеКлиматическиеУсловия(
		Форма, Форма.Объект.ПроцентСевернойНадбавки, Форма.ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР);
		
КонецПроцедуры

&НаСервере
Процедура ПрименятьСевернуюНадбавкуПриИзмененииНаСервере()

	ТерриторииСОсобымиКлиматическимиУсловиями = Справочники.ТерриториальныеУсловияПФР.СписокТерриторийСОсобымиКлиматическимиУсловиями();
	Если ТерриторииСОсобымиКлиматическимиУсловиями.НайтиПоЗначению(ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР) <> Неопределено Тогда
		ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР = Справочники.ТерриториальныеУсловияПФР.ПустаяСсылка();
		ПриИзмененииТерриториальныхУсловий(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьОтображениеПоляИНН(Форма)
	
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляИНН(Форма.Элементы.ИНН, Форма.Объект.ИНН, Форма.Объект.ЮридическоеФизическоеЛицо, Форма, Форма.Объект.ОбособленноеПодразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОрганизацииЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьОрганизацию Тогда 
		// Если получено разрешение на запись данных организации, запишем.
		ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена", Истина);
		Если НЕ Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Ссылка); 
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("КлючВарианта", "НастройкиОрганизации");
	
	ОткрытьФорму("Отчет.НастройкиПрограммыЗарплатаКадры.Форма", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРайонногоКоэффициента()
	
	Если Объект.РайонныйКоэффициент < Объект.РайонныйКоэффициентРФ Тогда
		Объект.РайонныйКоэффициент = Объект.РайонныйКоэффициентРФ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодРегионаПоАдресу(Адрес)
	Попытка
		Возврат РаботаСАдресами.СведенияОбАдресе(Адрес).КодРегиона;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат "";
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияВыбораКодаОрганаФСГС(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	Объект.КодОрганаФСГС = ВыбранноеЗначение.КодТОГС;
	ОбновитьНаименованиеОрганаФСГС(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНаименованиеОрганаФСГС(Форма)
	Если ЗначениеЗаполнено(Форма.Объект.КодОрганаФСГС) Тогда
		Форма.НаименованиеОрганаФСГС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.НаименованиеТОГС(
			СокрЛП(Форма.Объект.КодОрганаФСГС));
	Иначе
		Форма.НаименованиеОрганаФСГС = "";
	КонецЕсли;
КонецПроцедуры

#Область АдаптацияУвольнение

&НаСервере
Функция ЗаголовкиГруппСтраницыАдаптацияУвольнение() Экспорт
	
	ЗаголовкиГрупп = Новый Структура();
	ЗаголовкиГрупп.Вставить("МероприятияАдаптацииГруппа", НСтр("ru = 'При приеме или переводе в организацию назначается задание'"));
	ЗаголовкиГрупп.Вставить("МероприятияУвольненияГруппа", НСтр("ru = 'При увольнении или переводе из организации назначается задание'"));
	
	Возврат ЗаголовкиГрупп;
	
КонецФункции

#КонецОбласти

#Область ЗаписьЭлемента

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ОповещениеЗавершения = Неопределено) Экспорт 
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаписьЭлементаСправочникаОрганизации");
	
	ПараметрыЗаписи = Новый Структура;
	ЗарплатаКадрыКлиент.ФормаОрганизацииПередЗаписью(Объект, ЭтотОбъект, Ложь, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
	
КонецПроцедуры

#КонецОбласти

// Поддержка отображения списка значений параметров расчета для текущего элемента справочника

&НаСервере
Процедура ОбновитьЗначенияПараметровРасчета() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетОкладовПреподавателей");
		Модуль.ОбновитьОтображениеЗначенийПараметровРасчета(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборЗначенияПараметраРасчета(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетОкладовПреподавателейКлиент");
		Модуль.ОбработатьВыборЗначенияПараметраРасчета(ЭтотОбъект, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Конец Поддержка отображения списка значений параметров расчета для текущего элемента справочника

#Область СЭДО

&НаКлиенте
Процедура НастройкиСЭДОФССПослеЗаписи(РезультатЗаписи, ПустойПараметр) Экспорт
	Если ОрганизацияЗаписанаУспешно() Тогда
		СЭДОФССКлиент.ОткрытьНастройкиОрганизации(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеНастройкиСистемыНалогообложенияПериод(Форма)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "НастройкиСистемыНалогообложения", Форма.Объект.Ссылка);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "НастройкиСистемыНалогообложения.Период", "НастройкиСистемыНалогообложенияПериодСтрокой");
	
КонецПроцедуры

#КонецОбласти
