#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//   Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Макеты = Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Макеты;
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021.Имя;
	КомандаПечати.Представление = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021.Представление();
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
		КомандаПечати,
		"Дата",
		ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2021Года(),
		ВидСравнения.БольшеИлиРавно);
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  Для чтения:
//    МассивОбъектов        - Массив    - Ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати       - Структура - Настройки печати;
//  Для изменения:
//    КоллекцияПечатныхФорм - ТаблицаЗначений - Табличные документы.
//    ОбъектыПечати         - СписокЗначений  - Разбивка областей табличного документа по напечатанным объектам.
//        * Значение      - ДокументСсылка - ссылка объекта
//        * Представление - Строка         - Имя области, в которую был выведен объект;
//    ПараметрыВывода       - Структура       - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	Менеджер = Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком;
	УправлениеПечатьюБЗК.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, Менеджер);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// ЗарплатаКадрыПодсистемы

// Формирует печатную форму. Вызывается из УправлениеПечатьюБЗК.Печать.
//
// Параметры:
//   КонтекстПечати - Структура - См. УправлениеПечатьюБЗК.КонтекстПечати.
//
Процедура ПриФормированииПечатнойФормы(КонтекстПечати) Экспорт
	
	Макеты = Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Макеты;
	Если КонтекстПечати.МетаданныеМакета = Макеты.ПФ_MXL_УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021 Тогда
		ПриПечатиУведомления(КонтекстПечати);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыПодсистемы

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Сотрудник.ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, ПараметрыФормы, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	ВсеПараметры = Новый Структура("Ключ, Основание");
	ЗаполнитьЗначенияСвойств(ВсеПараметры, ПараметрыФормы);
	Если Не ЗначениеЗаполнено(ВсеПараметры.Ключ) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Уведомление = НайтиУведомлениеПоОснованию(ВсеПараметры.Основание);
		УстановитьПривилегированныйРежим(Ложь);
		Если Уведомление.Ссылка <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы.Вставить("Ключ", Уведомление.Ссылка);
			ВыбраннаяФорма = "Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Форма.ФормаДокумента";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа.
//
// Возвращаемое значение:
//   Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("", "Сотрудник");
КонецФункции

// Вызывается из события "ПередЗаписью" документов, указанных в определяемом типе ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.
// Устанавливает пометка удаления уведомлений вместе с документом-основанием.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект.* - Документов-основание уведомления.
//
Процедура ПередЗаписьюОснованияУведомления(ДокументОбъект) Экспорт
	Если ДокументОбъект.ЭтоНовый() Тогда
		Возврат; // Для новых документов проверка не нужна.
	КонецЕсли;
	ДокументОснование = ДокументОбъект.Ссылка;
	ПометкаУдаления   = ДокументОбъект.ПометкаУдаления;
	Если ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ПометкаУдаления") Тогда
		Уведомление = НайтиУведомлениеПоОснованию(ДокументОснование, "Ссылка, ПометкаУдаления");
		Если Уведомление.Ссылка <> Неопределено
			И Уведомление.ПометкаУдаления <> ПометкаУдаления
			И УведомлениеДоступноДляИзменения(Уведомление.Ссылка) Тогда
			УведомлениеОбъект = Уведомление.Ссылка.ПолучитьОбъект();
			УведомлениеОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Переход на перечисление ОснованияПрекращенияПособийПоУходуЗаРебенком в рамках поддержки формата прямых выплат 1.7.7.
Процедура ЗаполнитьТипПриказа(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Уведомление.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Уведомление
	|ГДЕ
	|	Уведомление.ТипПриказа = ЗНАЧЕНИЕ(Перечисление.ОснованияПрекращенияПособийПоУходу.ПустаяСсылка)
	|	И Уведомление.УдалитьТипПриказа <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка)";
	
	ИзмерениеОтбора = "Ссылка";
	ПространствоБлокировки = "Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления,
				ПространствоБлокировки,
				ИзмерениеОтбора,
				Выборка[ИзмерениеОтбора]) Тогда
			ОбработкаЗавершена = Ложь; // Документ заблокирован, требуется повторная обработка.
			Продолжить;
		КонецЕсли;
		
		УведомлениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если УведомлениеОбъект.УдалитьТипПриказа = Перечисления.СостоянияСотрудника.Работа Тогда
			УведомлениеОбъект.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПриказОДосрочномВыходеНаРаботу;
		ИначеЕсли УведомлениеОбъект.УдалитьТипПриказа = Перечисления.СостоянияСотрудника.Увольнение Тогда
			УведомлениеОбъект.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПриказОбУвольнении;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(УведомлениеОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Находит документ "Уведомление о прекращении отпуска по уходу за ребенком" по документу-основанию и возвращает
// значения его реквизитов.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком - Основание уведомления.
//   ИменаРеквизитов - Строка - Имена реквизитов заявления, через запятую.
//
// Возвращаемое значение:
//   Неопределено - Если документ не найден.
//   ВыборкаИзРезультатаЗапроса - Если документ найден.
//
Функция НайтиУведомлениеПоОснованию(ДокументОснование, ИменаРеквизитов = "Ссылка") Экспорт
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Новый Структура(ИменаРеквизитов);
	КонецЕсли;
	
	Отбор = Новый Структура("ДокументОснование", ДокументОснование);
	
	Запрос = ЗапросПоДокументу(Отбор, ИменаРеквизитов, Истина, Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Новый Структура(ИменаРеквизитов);
КонецФункции

// Возвращает признак заполненности определяемого типа ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.
//
// Возвращаемое значение:
//   Булево - Признак заполненности определяемого типа ДокументыОснованияУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.
//
Функция ИспользоватьЗаполнениеПоОснованию() Экспорт
	МассивТипов = Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Реквизиты.ДокументОснование.Тип.Типы();
	ТипНеЗаполнен = (МассивТипов.Количество() = 1 И МассивТипов[0] = Тип("Строка"));
	Возврат Не ТипНеЗаполнен;
КонецФункции

// Возвращает запрос по документу с отборам и указанными полями.
Функция ЗапросПоДокументу(Отбор, Поля, ВыбратьПервый, Порядок)
	Запрос = Новый Запрос;
	
	Если Порядок = Неопределено Тогда
		Если ВыбратьПервый Тогда
			Порядок = "ПометкаУдаления ВОЗР, Дата УБЫВ, " + Поля;
		Иначе
			Порядок = Поля;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбратьПервый Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	&ИменаПолей КАК ИменаПолей
		|ИЗ
		|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Таблица
		|ГДЕ
		|	&Условия
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ПорядокЗаписей";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ИменаПолей КАК ИменаПолей
		|ИЗ
		|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Таблица
		|ГДЕ
		|	&Условия
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ПорядокЗаписей";
	КонецЕсли;
	
	ФрагментыУсловий = Новый Массив;
	Для Каждого КлючИЗначение Из Отбор Цикл
		ПолеОтбора = КлючИЗначение.Ключ;
		ЗначениеОтбора = КлючИЗначение.Значение;
		Запрос.УстановитьПараметр(ПолеОтбора, ЗначениеОтбора);
		Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ФрагментыУсловий.Добавить("Таблица." + ПолеОтбора + " В (&" + ПолеОтбора + ")");
		Иначе
			ФрагментыУсловий.Добавить("Таблица." + ПолеОтбора + " = &" + ПолеОтбора + "");
		КонецЕсли;
	КонецЦикла;
	Если ФрагментыУсловий.Количество() > 0 Тогда
		ТекстУсловий = "ГДЕ
		|	" + СтрСоединить(ФрагментыУсловий, Символы.ПС + Символы.Таб + "И ");
	Иначе
		ТекстУсловий = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ГДЕ
		|	&Условия",
		ТекстУсловий);
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ИменаПолей КАК ИменаПолей",
		Поля);
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ПорядокЗаписей",
		Порядок);
	
	Возврат Запрос;
КонецФункции

// Объект можно изменять если он не использован в реестрах, отправленных в ФСС.
Функция УведомлениеДоступноДляИзменения(Ссылка, ВозвращатьТекстОшибки = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ?(ВозвращатьТекстОшибки, "", Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уведомление", Ссылка);
	Запрос.УстановитьПараметр("Статусы", Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.СтатусыНеПозволяющиеРедактироватьДокументы());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиРеестров.Ссылка КАК Реестр,
	|	СтрокиРеестров.Ссылка.СтатусДокумента КАК СтатусРеестра
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК СтрокиРеестров
	|ГДЕ
	|	СтрокиРеестров.ПервичныйДокумент = &Уведомление
	|	И СтрокиРеестров.Ссылка.СтатусДокумента В(&Статусы)";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРеестров = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	УведомлениеМожноИзменять = (ТаблицаРеестров.Количество() = 0);
	
	Если ВозвращатьТекстОшибки Тогда
		Если УведомлениеМожноИзменять Тогда
			ТекстОшибки = "";
		Иначе
			МассивРеестров = Новый Массив;
			Для Каждого СтрокаТаблицы Из ТаблицаРеестров Цикл
				МассивРеестров.Добавить(СтрШаблон(НСтр("ru = '%1 со статусом %2'"), СтрокаТаблицы.Реестр, СтрокаТаблицы.СтатусРеестра));
			КонецЦикла;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Запрещено изменять %1, поскольку оно уже отправлено в ФСС (%2).'"), Ссылка, СтрСоединить(МассивРеестров, "; "));
		КонецЕсли;
		Возврат ТекстОшибки;
	Иначе
		Возврат УведомлениеМожноИзменять;
	КонецЕсли;
КонецФункции

Функция ДанныеОДетях(Уведомление, Сотрудник, ДатаПрекращенияОплаты) Экспорт
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаПрекращенияОплаты", ДатаПрекращенияОплаты);
	Запрос.УстановитьПараметр("ЕжемесячноеПособиеПоУходуЗаРебенком", Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком);
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявления.Ссылка КАК Заявление,
	|	Заявления.ИдентификаторСтрокиОснования КАК ИдентификаторСтрокиОснования,
	|	Заявления.ДокументОснование КАК ДокументОснование,
	|	Заявления.Дата КАК Дата,
	|	Заявления.ИмяРебенка КАК ИмяРебенка,
	|	Заявления.ДатаРожденияРебенка КАК ДатаРожденияРебенка
	|ПОМЕСТИТЬ ВТВсеЗаявления
	|ИЗ
	|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК Заявления
	|ГДЕ
	|	Заявления.Сотрудник = &Сотрудник
	|	И Заявления.ВидПособия = &ЕжемесячноеПособиеПоУходуЗаРебенком
	|	И Заявления.ДатаОкончанияОтпускаПоУходуЗаРебенком >= &ДатаПрекращенияОплаты
	|	И Заявления.ДатаНачалаОтпускаПоУходуЗаРебенком <= &ДатаПрекращенияОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВсеЗаявления.ИдентификаторСтрокиОснования КАК ИдентификаторСтрокиОснования,
	|	ВТВсеЗаявления.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(ВТВсеЗаявления.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТМаксимальныеДаты
	|ИЗ
	|	ВТВсеЗаявления КАК ВТВсеЗаявления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВсеЗаявления.ИдентификаторСтрокиОснования,
	|	ВТВсеЗаявления.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявления.ИдентификаторСтрокиОснования КАК ИдентификаторСтрокиОснования,
	|	Заявления.ДокументОснование КАК ДокументОснование,
	|	Заявления.ИмяРебенка КАК ИмяРебенка,
	|	Заявления.ДатаРожденияРебенка КАК ДатаРожденияРебенка,
	|	МИНИМУМ(Заявления.Заявление) КАК Заявление
	|ПОМЕСТИТЬ ВТМаксимальныеЗаявления
	|ИЗ
	|	ВТМаксимальныеДаты КАК МаксимальныеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеЗаявления КАК Заявления
	|		ПО МаксимальныеДаты.ИдентификаторСтрокиОснования = Заявления.ИдентификаторСтрокиОснования
	|			И МаксимальныеДаты.ДокументОснование = Заявления.ДокументОснование
	|			И МаксимальныеДаты.Дата = Заявления.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявления.ИдентификаторСтрокиОснования,
	|	Заявления.ДокументОснование,
	|	Заявления.ИмяРебенка,
	|	Заявления.ДатаРожденияРебенка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМаксимальныеЗаявления.ИдентификаторСтрокиОснования КАК ИдентификаторСтрокиОснования,
	|	ВТМаксимальныеЗаявления.ДокументОснование КАК ДокументОснование,
	|	ВТМаксимальныеЗаявления.Заявление КАК Заявление,
	|	ВТМаксимальныеЗаявления.ИмяРебенка КАК ИмяРебенка,
	|	ВТМаксимальныеЗаявления.ДатаРожденияРебенка КАК ДатаРожденияРебенка
	|ИЗ
	|	ВТМаксимальныеЗаявления КАК ВТМаксимальныеЗаявления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК УведомленияЗаявлений
	|		ПО ВТМаксимальныеЗаявления.Заявление = УведомленияЗаявлений.Заявление
	|			И (УведомленияЗаявлений.Ссылка <> &Уведомление)
	|			И (НЕ УведомленияЗаявлений.Ссылка.ПометкаУдаления)
	|ГДЕ
	|	УведомленияЗаявлений.Ссылка ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеОДетях = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеОДетях;
КонецФункции

#Область МеханизмФиксацииИзменений

Функция ПараметрыФиксацииВторичныхДанных(Объект) Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты(Объект), ФиксируемыеТаблицы());
КонецФункции

Функция ФиксируемыеТаблицы()
	ФиксируемыеТаблицы = Новый Структура;
	Возврат ФиксируемыеТаблицы;
КонецФункции

Функция ФиксируемыеРеквизиты(Объект)
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// Реквизиты документа-основания.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "ДокументОснование";
	Шаблон.Используется        = ИспользоватьЗаполнениеПоОснованию() И ЗначениеЗаполнено(Объект.ДокументОснование);
	Шаблон.ИмяГруппы           = "Шапка";
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Организация");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Сотрудник");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТипПриказа");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаПриказа");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НомерПриказа");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаПрекращенияОплаты");
	
	// Основные сведения об организации.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "Организация";
	Шаблон.ОснованиеЗаполнения = "ОсновныеСведения";
	Шаблон.Используется        = ЗначениеЗаполнено(Объект.Организация);
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеСтрахователя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИНН");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КПП");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТелефонСтрахователя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "АдресЭлектроннойПочтыСтрахователя");
	
	// Регистрационные сведения ФСС.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "Организация";
	Шаблон.ОснованиеЗаполнения = "РеквизитыФСС";
	Шаблон.ФиксацияГруппы      = Истина;
	Шаблон.Используется        = ЗначениеЗаполнено(Объект.Организация);
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеТерриториальногоОрганаФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РегистрационныйНомерФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КодПодчиненностиФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДополнительныйКодФСС");
	
	// Роль подписанта Руководитель.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Организация";
	Шаблон.ИмяГруппы           = "УполномоченныйПоПрямымВыплатамФСС";
	Шаблон.ФиксацияГруппы      = Истина;
	Шаблон.Используется        = ЗначениеЗаполнено(Объект.Организация);
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "УполномоченныйПоПрямымВыплатамФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДолжностьУполномоченногоПоПрямымВыплатамФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОснованиеПодписиУполномоченногоПоПрямымВыплатамФСС");
	
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

Процедура ПриПечатиУведомления(КонтекстПечати)
	ТабличныйДокумент = КонтекстПечати.ТабличныйДокумент;
	УправлениеПечатьюБЗК.УстановитьОтступ(ТабличныйДокумент, 0, 0, 0, 0);
	
	Запрос = ЗапросДляПечатиУведомления(КонтекстПечати.МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Заявление) Тогда
			Продолжить;
		КонецЕсли;
		УправлениеПечатьюБЗК.ПередПечатьюОчередногоОбъекта(КонтекстПечати);
		
		СекцияШапка = КонтекстПечати.Макет.ПолучитьОбласть("Шапка");
		ВывестиУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021(СекцияШапка, Выборка);
		ТабличныйДокумент.Вывести(СекцияШапка);
		
		УправлениеПечатьюБЗК.ПослеПечатиОчередногоОбъекта(КонтекстПечати, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросДляПечатиУведомления(МассивСсылок)
	// Получаем запросом необходимые данные.
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ДатаНачала", ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2021Года());

	// Создание ВТ кадровых данных.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Уведомление.УполномоченныйПоПрямымВыплатамФСС КАК ФизическоеЛицо,
	|	Уведомление.Дата КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(Описатель, Истина, "ФИОПолные");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументУведомление.Ссылка КАК Ссылка,
		|	ДокументУведомление.Дата КАК Дата,
		|	ТаблицаЗаявленияДокумента.Заявление КАК Заявление,
		|	ДокументУведомление.НаименованиеСтрахователя КАК НаименованиеСтрахователя,
		|	ДокументУведомление.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
		|	ДокументУведомление.КодПодчиненностиФСС КАК КодПодчиненностиФСС,
		|	ДокументУведомление.ИНН КАК ИНН,
		|	ДокументУведомление.КПП КАК КПП,
		|	ДокументУведомление.ДополнительныйКодФСС КАК ДополнительныйКодФСС,
		|	ДокументУведомление.НаименованиеТерриториальногоОрганаФСС КАК НаименованиеТерриториальногоОрганаФСС,
		|	ДокументУведомление.ТелефонСтрахователя КАК ТелефонСтрахователя,
		|	ДокументЗаявление.СНИЛСПолучателя КАК СНИЛСПолучателя,
		|	ДокументУведомление.АдресЭлектроннойПочтыСтрахователя КАК АдресЭлектроннойПочтыСтрахователя,
		|	ДокументУведомление.ТипПриказа КАК ТипПриказа,
		|	ДокументЗаявление.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДокументЗаявление.ФамилияПолучателя КАК ФамилияПолучателя,
		|	ДокументЗаявление.ИмяПолучателя КАК ИмяПолучателя,
		|	ДокументЗаявление.ОтчествоПолучателя КАК ОтчествоПолучателя,
		|	ДокументЗаявление.ФамилияЗаявителя КАК ФамилияЗаявителя,
		|	ДокументЗаявление.ОтчествоЗаявителя КАК ОтчествоЗаявителя,
		|	ДокументЗаявление.ИмяЗаявителя КАК ИмяЗаявителя,
		|	ДокументЗаявление.ДатаРожденияПолучателя КАК ДатаРожденияПолучателя,
		|	ДокументЗаявление.ИННПолучателя КАК ИННПолучателя,
		|	ДокументЗаявление.СерияДокументаУдостоверяющегоЛичностьПолучателя КАК СерияДокументаУдостоверяющегоЛичностьПолучателя,
		|	ДокументЗаявление.НомерДокументаУдостоверяющегоЛичностьПолучателя КАК НомерДокументаУдостоверяющегоЛичностьПолучателя,
		|	ДокументЗаявление.ДатаВыдачиДокументаУдостоверяющегоЛичностьПолучателя КАК ДатаВыдачиДокументаУдостоверяющегоЛичностьПолучателя,
		|	ДокументЗаявление.КемВыданДокументУдостоверяющийЛичностьПолучателя КАК КемВыданДокументУдостоверяющийЛичностьПолучателя,
		|	ДокументЗаявление.ДатаДействияДокументаУдостоверяющегоЛичностьПолучателя КАК ДатаДействияДокументаУдостоверяющегоЛичностьПолучателя,
		|	ДокументЗаявление.СерияДокументаНаПроживание КАК СерияДокументаНаПроживание,
		|	ДокументЗаявление.НомерДокументаНаПроживание КАК НомерДокументаНаПроживание,
		|	ДокументЗаявление.ДатаВыдачиДокументаНаПроживание КАК ДатаВыдачиДокументаНаПроживание,
		|	ВидДокументаУдостоверениеЛичности.КодМВД КАК КодУдостоверенияЛичности,
		|	ВидДокументаДокументНаПроживание.КодМВД КАК КодДокументаНаПроживание,
		|	ДокументЗаявление.АдресПолучателяРегистрации КАК АдресРегистрации,
		|	ДокументУведомление.ДатаПриказа КАК ДатаПриказа,
		|	ДокументУведомление.НомерПриказа КАК НомерПриказа,
		|	ДокументУведомление.ДатаПрекращенияОплаты КАК ДатаПрекращенияОплаты,
		|	КадровыеДанныеУполномоченных.ФИОПолные КАК ФИОУполномоченного,
		|	ДокументУведомление.ДолжностьУполномоченногоПоПрямымВыплатамФСС КАК ДолжностьУполномоченногоПоПрямымВыплатамФСС,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА Организации.НаименованиеСокращенное
		|		ИНАЧЕ ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК ОрганизацияНаименование
		|ИЗ
		|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК ДокументУведомление
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК ТаблицаЗаявленияДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ДокументЗаявление
		|			ПО ТаблицаЗаявленияДокумента.Заявление = ДокументЗаявление.Ссылка
		|		ПО (ТаблицаЗаявленияДокумента.Ссылка = ДокументУведомление.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидДокументаУдостоверениеЛичности
		|		ПО (ТаблицаЗаявленияДокумента.Заявление.ВидДокументаУдостоверяющегоЛичностьПолучателя = ВидДокументаУдостоверениеЛичности.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидДокументаДокументНаПроживание
		|		ПО (ТаблицаЗаявленияДокумента.Заявление.ВидДокументаНаПроживание = ВидДокументаДокументНаПроживание.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеУполномоченных
		|		ПО ДокументУведомление.УполномоченныйПоПрямымВыплатамФСС = КадровыеДанныеУполномоченных.ФизическоеЛицо
		|			И ДокументУведомление.Дата = КадровыеДанныеУполномоченных.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДокументУведомление.Организация = Организации.Ссылка
		|ГДЕ
		|	ДокументУведомление.Ссылка В(&МассивСсылок)
		|	И ДокументУведомление.Дата >= &ДатаНачала
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Возврат Запрос;
КонецФункции

Функция ЗаполнитьВМакетеИныеСведения(Макет, Выборка)
	
	НомерПриказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерПриказа, Истина, Истина);

	Если Выборка.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПриказОДосрочномВыходеНаРаботу Тогда
		
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Выборка.ДатаПриказа, ".",""), Макет, "ПриказОВыходеНаРаботуДата_", 8);
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(НомерПриказа, Макет, "ПриказОВыходеНаРаботуНомер_", 10);
		
	ИначеЕсли Выборка.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.ПриказОбУвольнении Тогда
				
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Выборка.ДатаПриказа, ".",""), Макет, "ПриказОбУвольненииДата_", 8);
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(НомерПриказа, Макет, "ПриказОбУвольненииНомер_", 10);
		
	ИначеЕсли Выборка.ТипПриказа = Перечисления.ОснованияПрекращенияПособийПоУходу.СвидетельствоОСмертиРебенка Тогда
		
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Выборка.ДатаПриказа, ".",""), Макет, "СвидетельствоОСмертиРебенкаДата_", 8);
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(НомерПриказа, Макет, "СвидетельствоОСмертиРебенкаНомер_", 10);
		
	Иначе 
		
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Выборка.ДатаПриказа, ".",""), Макет, "ИнойДокументПрекращенияДата_", 8);
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(НомерПриказа, Макет, "ИнойДокументПрекращенияНомер_", 10);
		
	КонецЕсли; 

КонецФункции

Процедура ВывестиУведомлениеОПрекращенииОтпускаПоУходуЗаРебенком_2021(Макет, Выборка)
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(27);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(
		ВРег(Выборка.НаименованиеТерриториальногоОрганаФСС), ДлиныСтрок), Макет, "Наименование_ФСС_", 135);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(
		ВРег(Выборка.ОрганизацияНаименование), ДлиныСтрок), Макет, "ФИО_Заявителя_", 135);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.РегистрационныйНомерФСС, Макет, "РегистрационныйНомер_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ДополнительныйКодФСС, Макет, "ДополнительныйКод_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КодПодчиненностиФСС, Макет, "КодПодчиненности_", 5);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ИНН, Макет, "ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КПП, Макет, "КПП_", 9);
	Макет.Области[ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ТипПриказа)].Текст = "v";
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(Выборка.ФамилияПолучателя), Макет, "ФИО_Получателя_", 36);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(Выборка.ИмяПолучателя), Макет, "ФИО_Получателя_", 36, 37);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(Выборка.ОтчествоПолучателя), Макет, "ФИО_Получателя_", 36, 73);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеДатуРожденияПолучателя(Макет, Выборка);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеУдостоверениеЛичности_2017(Макет, Выборка);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеРазрешениеНаПроживание(Макет, Выборка, 8);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеСведенияОМестеЖительства_2017(Макет, Выборка);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеСНИЛССотрудника(Макет, Выборка);
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьВМакетеИННСотрудника(Макет, Выборка);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(Выборка.ДатаПрекращенияОплаты, "ДФ=dd.MM.yy"), ".",""),
		Макет,"ДатаОкончанияОтпуска_", 6);
	ТелефонСтрахователя = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ПредставлениеТелефона(Выборка.ТелефонСтрахователя, 30);
	ПрямыеВыплатыПособийСоциальногоСтрахования.ВывестиТелефонПоБуквам(
		ТелефонСтрахователя,
		Макет,
		"ТелефонСоставителя_",
		30);
	ЗаполнитьВМакетеИныеСведения(Макет, Выборка);
	Макет.Параметры.ДолжностьРуководителя = Выборка.ДолжностьУполномоченногоПоПрямымВыплатамФСС;
	Макет.Параметры.ФИОРуководителя       = Выборка.ФИОУполномоченного;
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.АдресЭлектроннойПочтыСтрахователя, Макет, "АдресЭлектроннойПочты_", 28);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли