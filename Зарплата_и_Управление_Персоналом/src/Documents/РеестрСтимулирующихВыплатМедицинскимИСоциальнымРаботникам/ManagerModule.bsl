#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Отчет.РеестрыСтимулирующихВыплатМедицинскимИСоциальнымРаботникам";
	КомандаПечати.Идентификатор = "РеестрПолучателейВыплат";
	КомандаПечати.Порядок = 10;
	КомандаПечати.Представление = НСтр("ru = 'Реестр получателей выплат'");
	КомандаПечати.ИмяКомандыНаФорме = "";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников = Неопределено) Экспорт
	
	Отчеты.РеестрыСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента.
Функция ПриИзмененииСтатусаОтправкиДокумента(РеестрСсылка, СтатусОтправки) Экспорт
	
	СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ИзСтатусаОтправки(СтатусОтправки);
	
	Если ТипЗнч(СостояниеРеестра) = Тип("ПеречислениеСсылка.СостоянияРеестровФСС") Тогда
		
		ДокументОбъект = РеестрСсылка.ПолучитьОбъект();
		ДокументОбъект.СостояниеРеестра = СостояниеРеестра;
		СостояниеСтрокиПринятФСС = (СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ПринятФСС
			ИЛИ СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ЧастичноПринятФСС);
		
		Для Каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл
			СтрокаСотрудника.ПринятФСС = СостояниеСтрокиПринятФСС;
		КонецЦикла;
		Если СостояниеРеестра = Перечисления.СостоянияРеестровФСС.ЧастичноПринятФСС Тогда
			ЕстьОшибки = СтатусыОшибокСтрокИзОтветаФСС(РеестрСсылка, ДокументОбъект.Сотрудники);
		КонецЕсли;
		
		ДокументОбъект.Записать();
		
	Иначе
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове процедуры ""%1"": значение ""%2"" (тип ""%3"") не поддерживается для реестров прямых выплат.'"),
			"ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента",
			СтатусОтправки,
			ТипЗнч(СтатусОтправки));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Неопределено, РеестрСсылка, ТекстОшибки, "СтатусДокумента");
		
	КонецЕсли;
	
КонецФункции
#КонецОбласти

#Область ФормированиеФайла

Функция ФайлРеестра(Ссылка, УникальныйИдентификатор) Экспорт
	ВыборкаПоШапкеДокумента = СведенияДляРеестраПоШапкеДокументов(Ссылка).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
		
	ВыборкаСведенийДляРеестра = СведенияДляРеестраПоСотрудникам(Ссылка).Выбрать();
	
	ТекстXML = СформироватьФайлРеестра(ВыборкаПоШапкеДокумента, ВыборкаСведенийДляРеестра);
	
	Кодировка = "windows-1251";
	ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, Кодировка, Истина);
	
	ОписаниеФайла = Новый Структура("ИмяФайлаБезРасширения, ИмяФайлаСРасширением, ТекстXML, АдресДвоичныхДанных, Кодировка");
	ОписаниеФайла.ИмяФайлаБезРасширения = ИдентификаторФСС(ВыборкаПоШапкеДокумента);
	ОписаниеФайла.ИмяФайлаСРасширением  = ОписаниеФайла.ИмяФайлаБезРасширения + ".xml";
	ОписаниеФайла.ТекстXML              = ТекстXML;
	ОписаниеФайла.АдресДвоичныхДанных   = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ОписаниеФайла.Кодировка             = Кодировка;
	
	Возврат ОписаниеФайла;
КонецФункции

Функция ВыгрузитьДокумент(Ссылка, Отказ = Ложь) Экспорт
	ФайлРеестра = ФайлРеестра(Ссылка, Неопределено);
	Если ФайлРеестра = Неопределено Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлДляОтправки = Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки, ТипФайлаВыгрузки, КодировкаФайлаВыгрузки");
	ФайлДляОтправки.ИмяФайлаВыгрузки       = ФайлРеестра.ИмяФайлаСРасширением;
	ФайлДляОтправки.АдресФайлаВыгрузки     = ФайлРеестра.АдресДвоичныхДанных;
	ФайлДляОтправки.ТипФайлаВыгрузки       = "РеестрЗаявленийНаВыплатуПособийДляПередачиВФСС";
	ФайлДляОтправки.КодировкаФайлаВыгрузки = КодировкаТекста.ANSI;
	
	Возврат ФайлДляОтправки;
КонецФункции

Функция ЗаписатьРеестрВСтрокуXML(CovidWorkerRequest) Экспорт
	
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML();
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, CovidWorkerRequest, "submitCovidWorkerRegistrRequest");
	СтрокаXML = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	//УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML);
	
	Возврат СтрокаXML;
	
КонецФункции

Процедура УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML) Экспорт
	
	АтрибутXMLNS = "xmlns=""" + URIПространстваИменРеестров() + """";
	СтрокаXML = СтрЗаменить(СтрокаXML, АтрибутXMLNS, "");
	
КонецПроцедуры

Функция ИдентификаторФСС(Реестр) Экспорт
	РегистрационныйНомерФСС = Реестр.РегистрационныйНомерФСС;
	ДатаЗаявления = Формат(Реестр.Дата, "ДФ=yyyy_MM_dd");
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реестр.Номер, Истина, Истина);
	НомерДокумента = Прав("000"+ НомерДокумента, 4);
	ПозицияРазделителя = СтрНайти(НомерДокумента,"-");
	Если ПозицияРазделителя > 0 Тогда
		НомерДокумента = Сред(НомерДокумента, ПозицияРазделителя); 	
	КонецЕсли;
	НомерДокумента = Прав("000"+ НомерДокумента, 4);
	
	Возврат "C_" + РегистрационныйНомерФСС + "_" + ДатаЗаявления + "_" + НомерДокумента;
КонецФункции

#КонецОбласти


#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ФиксируемыеРеквизиты = ФиксируемыеРеквизиты();
	ФиксируемыеТЧ = Новый Структура("Сотрудники", СтрРазделить("Сотрудник,Должность,КатегорияПолучателя", ",", Ложь));
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты, ФиксируемыеТЧ);
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция КорневойЭлементРеестра()
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИменРеестров());
	ТипCovidWorkerRequest = ПакетXDTO.КорневыеСвойства.Получить("submitCovidWorkerRegistrRequest").Тип;
	Возврат ФабрикаXDTO.Создать(ТипCovidWorkerRequest);
КонецФункции

Функция СписокЭлементовРеестра(CovidWorkerRequest)
	
	Возврат CovidWorkerRequest["Row"];
	
КонецФункции

Функция ЭлементРеестра(КорневойXDTOЭлемент)
	
	ТипROW = КорневойXDTOЭлемент.Свойства().Получить("ROW").Тип;
	
	Возврат ФабрикаXDTO.Создать(ТипROW);
	
КонецФункции

Функция СведенияДляРеестраПоШапкеДокументов(Ссылки)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
	|	ДанныеДокументов.КодПодчиненностиФСС КАК КодПодчиненностиФСС,
	|	ДанныеДокументов.РеестрСоставил КАК РеестрСоставил,
	|	ДанныеДокументов.ФИОСоставителя КАК ФИОСоставителя,
	|	ДанныеДокументов.ТелефонСоставителя КАК ТелефонСоставителя,
	|	ДанныеДокументов.АдресЭлектроннойПочтыСоставителя КАК АдресЭлектроннойПочтыСоставителя,
	|	ДанныеДокументов.НаименованиеСтрахователя КАК НаименованиеСтрахователя,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.МесяцНачисления КАК МесяцНачисления,
	|	ДанныеДокументов.ОплатаПраздничныхДней КАК ОплатаПраздничныхДней,
	|	ДанныеДокументов.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокументов.ОкончаниеПериода КАК КонецПериода,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.ВидПособия КАК ВидПособия,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПолучательСтимулирующихВыплатФСС.МедицинскаяОрганизация)
	|			ТОГДА ""99""
	|		КОГДА ДанныеДокументов.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПолучательСтимулирующихВыплатФСС.ОрганизацияСоциальногоОбслуживания)
	|			ТОГДА ""98""
	|		ИНАЧЕ ""99""
	|	КОНЕЦ КАК ВидПособияКод,
	|	ДанныеДокументов.ВОрганизацииВыявленКоронавирус КАК ВОрганизацииВыявленКоронавирус
	|ИЗ
	|	Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам КАК ДанныеДокументов
	|ГДЕ
	|	ДанныеДокументов.Ссылка В(&Ссылки)";
	
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
				
	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция СведенияДляРеестраПоСотрудникам(Ссылка)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Исправление КАК Исправление,
	|	Сотрудники.КодПричиныИсправления КАК КодПричиныИсправления,
	|	Сотрудники.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	Сотрудники.ИзвещениеИзФССДата КАК ИзвещениеИзФССДата,
	|	Сотрудники.ИзвещениеИзФССНомер КАК ИзвещениеИзФССНомер,
	|	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	Сотрудники.Фамилия КАК Фамилия,
	|	Сотрудники.Имя КАК Имя,
	|	Сотрудники.Отчество КАК Отчество,
	|	Сотрудники.ДатаРождения КАК ДатаРождения,
	|	ВЫРАЗИТЬ(Сотрудники.Должность.Наименование КАК СТРОКА(100))КАК Должность,
	|	Сотрудники.КатегорияПолучателя КАК КатегорияПолучателя,
	|	ВЫБОР
	|		КОГДА Сотрудники.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|			ТОГДА 1
	|		КОГДА Сотрудники.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
	|			ТОГДА 0
	|		КОГДА Сотрудники.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВидЗанятости,
	|	Сотрудники.СпособВыплатыПособия КАК СпособВыплатыПособия,
	|	КлассификаторБанков.Код КАК БИКБанка,
	|	КлассификаторБанков.Наименование КАК НаименованиеБанка,
	|	Сотрудники.Банк КАК Банк,
	|	Сотрудники.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	Сотрудники.КартаМИР КАК КартаМИР,
	|	Сотрудники.ДнейКОплате КАК ДнейКОплате,
	|	Сотрудники.СменКОплате КАК СменКОплате,
	|	ВЫБОР
	|		КОГДА Сотрудники.РайонныйКоэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ Сотрудники.РайонныйКоэффициент
	|	КОНЕЦ КАК РайонныйКоэффициент,
	|	Сотрудники.ТерриториальныйКоэффициент КАК ТерриториальныйКоэффициент,
	|	ТерриторииСПовышающимКоэффициентомПоКоронавирусу.Код КАК ТерриториальныйКоэффициентКод,
	|	ТерриторииСПовышающимКоэффициентомПоКоронавирусу.Коэффициент КАК ТерриториальныйКоэффициентРазмер,
	|	Сотрудники.КомментарийСтрахователя КАК КомментарийСтрахователя,
	|	Сотрудники.СуммаВыплаты КАК СуммаВыплаты
	|ИЗ
	|	Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО (КлассификаторБанков.Ссылка = Сотрудники.Банк)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТерриторииСПовышающимКоэффициентомПоКоронавирусу КАК ТерриторииСПовышающимКоэффициентомПоКоронавирусу
	|		ПО (ТерриторииСПовышающимКоэффициентомПоКоронавирусу.Ссылка = Сотрудники.ТерриториальныйКоэффициент)
	|ГДЕ
	|	Сотрудники.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьФайлРеестра(ВыборкаПоШапкеДокумента, ВыборкаСведенийСотрудников)
	
	CovidWorkerRequest = КорневойЭлементРеестра();
	CovidWorkerRequest.author 			= ?(ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФИОСоставителя), ВыборкаПоШапкеДокумента.ФИОСоставителя, "");
	CovidWorkerRequest.versionSoftware	= "1.7.6";
	CovidWorkerRequest.software 		= Лев(РегламентированнаяОтчетность.НазваниеПрограммы(), 255);
	CovidWorkerRequest.phone 			= ВыборкаПоШапкеДокумента.ТелефонСоставителя;
	CovidWorkerRequest.email 			= ВыборкаПоШапкеДокумента.АдресЭлектроннойПочтыСоставителя;
	CovidWorkerRequest.emplOgrn 		= ВыборкаПоШапкеДокумента.ОГРН;
	CovidWorkerRequest.emplRegnum 		= ВыборкаПоШапкеДокумента.РегистрационныйНомерФСС;
	CovidWorkerRequest.emplKpp	 		= ВыборкаПоШапкеДокумента.КПП;
	CovidWorkerRequest.emplInn 			= ВыборкаПоШапкеДокумента.ИНН;
	CovidWorkerRequest.docType			= ВыборкаПоШапкеДокумента.ВидПособияКод;
	CovidWorkerRequest.holidayFlag		= Формат(ВыборкаПоШапкеДокумента.ОплатаПраздничныхДней,"БЛ=0; БИ=1");
	
	Если ВыборкаПоШапкеДокумента.ВидПособия = Перечисления.ПолучательСтимулирующихВыплатФСС.ОрганизацияСоциальногоОбслуживания Тогда
		CovidWorkerRequest.covid = Формат(ВыборкаПоШапкеДокумента.ВОрганизацииВыявленКоронавирус,"БЛ=0; БИ=1");
		Если ВыборкаПоШапкеДокумента.ОплатаПраздничныхДней Тогда
			CovidWorkerRequest.hdt1 = Формат(ВыборкаПоШапкеДокумента.НачалоПериода,"ДФ=yyyy-MM-dd");
			CovidWorkerRequest.hdt2 = Формат(ВыборкаПоШапкеДокумента.КонецПериода,"ДФ=yyyy-MM-dd");
		Иначе
			CovidWorkerRequest.dt1 = Формат(ВыборкаПоШапкеДокумента.НачалоПериода,"ДФ=yyyy-MM-dd");
			CovidWorkerRequest.dt2 = Формат(ВыборкаПоШапкеДокумента.КонецПериода,"ДФ=yyyy-MM-dd");
		КонецЕсли;
	Иначе
		Если ВыборкаПоШапкеДокумента.ОплатаПраздничныхДней Тогда
			CovidWorkerRequest.hdt1 = Формат(ВыборкаПоШапкеДокумента.НачалоПериода,"ДФ=yyyy-MM-dd");
			CovidWorkerRequest.hdt2 = Формат(ВыборкаПоШапкеДокумента.КонецПериода,"ДФ=yyyy-MM-dd");
		Иначе
			CovidWorkerRequest.dt1 = Формат(ВыборкаПоШапкеДокумента.НачалоПериода,"ДФ=yyyy-MM-dd");
		КонецЕсли;
	КонецЕсли;
	
	СписокROW = СписокЭлементовРеестра(CovidWorkerRequest);
	
	НомерДокументаВПачке = 0;
	НачалоНомераСтроки = ИдентификаторФСС(ВыборкаПоШапкеДокумента) + ":";
	
	Пока ВыборкаСведенийСотрудников.Следующий() Цикл
		
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		
		ROW = ЭлементРеестра(CovidWorkerRequest);
		
		ТипCommonDocInfo = ROW.Свойства().Получить("CommonDocInfo").Тип;
		CommonDocInfo = ФабрикаXDTO.Создать(ТипCommonDocInfo);

		CommonDocInfo.batchNo 			= НачалоНомераСтроки + Формат(НомерДокументаВПачке, "ЧЦ=10; ЧГ=");
		Если НЕ ВыборкаСведенийСотрудников.Исправление Тогда
			CommonDocInfo.typeInfo = "0";
		Иначе
			CommonDocInfo.typeInfo = "1";
			CommonDocInfo.recalcReasonCode = ВыборкаСведенийСотрудников.КодПричиныИсправления;
			CommonDocInfo.primeBatchNo = ВыборкаСведенийСотрудников.НомерПервичногоДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаСведенийСотрудников.ИзвещениеИзФССНомер)
			И ЗначениеЗаполнено(ВыборкаСведенийСотрудников.ИзвещениеИзФССДата) Тогда
			CommonDocInfo.respNo 			= ВыборкаСведенийСотрудников.ИзвещениеИзФССНомер;
			CommonDocInfo.respDate 			= Формат(ВыборкаСведенийСотрудников.ИзвещениеИзФССДата,"ДФ=yyyy-MM-dd");
		КонецЕсли;
		
		ROW.CommonDocInfo = CommonDocInfo;
		
		ТипInsuredData = ROW.Свойства().Получить("InsuredData").Тип;
		InsuredData = ФабрикаXDTO.Создать(ТипInsuredData);
		
		InsuredData.snils		= СтрЗаменить(СтрЗаменить(ВыборкаСведенийСотрудников.СтраховойНомерПФР, "-","")," ","");
		InsuredData.firstName	= ВыборкаСведенийСотрудников.Имя;
		InsuredData.lastName	= ВыборкаСведенийСотрудников.Фамилия;
		Если ЗначениеЗаполнено(ВыборкаСведенийСотрудников.Отчество) Тогда
			InsuredData.middleName	= ВыборкаСведенийСотрудников.Отчество;
		КонецЕсли;
		
		Если ВыборкаСведенийСотрудников.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
			InsuredData.paymentType = "2";
			InsuredData.paycardNum	= Справочники.БанковскиеКартыКонтрагентов.ОсновнойНомерДержателяКарты(ВыборкаСведенийСотрудников.КартаМир);
			ЗаполнятьБанковскиеРеквизиты = Ложь;
		Иначе
			InsuredData.paymentType = "1";
			ЗаполнятьБанковскиеРеквизиты = Истина;
		КонецЕсли;
		
		Если ЗаполнятьБанковскиеРеквизиты Тогда
			InsuredData.accountBic 	= ВыборкаСведенийСотрудников.БИКБанка;
			InsuredData.accountName	= ВыборкаСведенийСотрудников.НаименованиеБанка;
			InsuredData.account		= СтроковыеФункцииБЗККлиентСервер.СкопироватьЦифры(ВыборкаСведенийСотрудников.НомерЛицевогоСчета);
		КонецЕсли;
		
		InsuredData.birthday = Формат(ВыборкаСведенийСотрудников.ДатаРождения,"ДФ=yyyy-MM-dd");
		
		ROW.InsuredData = InsuredData;
		
		ТипEmployerData = ROW.Свойства().Получить("EmployerData").Тип;
		EmployerData = ФабрикаXDTO.Создать(ТипEmployerData);
		
		EmployerData.employer 		= ВыборкаПоШапкеДокумента.НаименованиеСтрахователя;
		EmployerData.emplRegnum 	= ВыборкаПоШапкеДокумента.РегистрационныйНомерФСС;
		EmployerData.emplParentNum 	= ВыборкаПоШапкеДокумента.КодПодчиненностиФСС;
		EmployerData.emplInn 		= ВыборкаПоШапкеДокумента.ИНН;
		
		ROW.EmployerData = EmployerData;
		
		ТипCalculationData = ROW.Свойства().Получить("CalculationData").Тип;
		CalculationData = ФабрикаXDTO.Создать(ТипCalculationData);
		
		Если ВыборкаПоШапкеДокумента.ВидПособия = Перечисления.ПолучательСтимулирующихВыплатФСС.ОрганизацияСоциальногоОбслуживания Тогда
			CalculationData.calcDays = ВыборкаСведенийСотрудников.ДнейКОплате;
		КонецЕсли;
		
		CalculationData.calcShifts = ВыборкаСведенийСотрудников.СменКОплате;
		
		CalculationData.kfReg = ВыборкаСведенийСотрудников.РайонныйКоэффициент;
		
		CalculationData.position= ВыборкаСведенийСотрудников.Должность;
		Если ВыборкаПоШапкеДокумента.ВидПособия = Перечисления.ПолучательСтимулирующихВыплатФСС.МедицинскаяОрганизация Тогда
			CalculationData.emplFlag = ВыборкаСведенийСотрудников.ВидЗанятости;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаСведенийСотрудников.КатегорияПолучателя) Тогда
			CalculationData.category = ВыборкаСведенийСотрудников.КатегорияПолучателя.Код;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаСведенийСотрудников.ТерриториальныйКоэффициент) Тогда
			ТипKfMultiplier = CalculationData.Свойства().Получить("kfMultiplier").Тип;
			KfMultiplier 	= ФабрикаXDTO.Создать(ТипKfMultiplier);
			KfMultiplier.multiplierValue = ВыборкаСведенийСотрудников.ТерриториальныйКоэффициентРазмер;
			KfMultiplier.territoryCode 	 = ВыборкаСведенийСотрудников.ТерриториальныйКоэффициентКод;
			CalculationData.kfMultiplier = KfMultiplier;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаСведенийСотрудников.КомментарийСтрахователя) Тогда
			CalculationData.emplNote = ВыборкаСведенийСотрудников.КомментарийСтрахователя;
		КонецЕсли;
		
		
		ROW.CalculationData = CalculationData;
		
		СписокROW.Добавить(ROW);
		
	КонецЦикла;
	
	СтрокаXML = ЗаписатьРеестрВСтрокуXML(CovidWorkerRequest);
	
	Возврат СтрокаXML;
	
КонецФункции 

Функция URIПространстваИменРеестров()
	Возврат "http://www.fss.ru/integration/types/pvso/quarantine/covidworkerregistr/v01";
КонецФункции

Функция НомерСтрокиИзНомераЗаписи(НомерЗаписи)
	
	ДлинаЗаписи = СтрДлина(НомерЗаписи);
	НомерСимволаРазделителя = СтрНайти(НомерЗаписи,":");
	ДлинаНомераСтроки = ДлинаЗаписи - НомерСимволаРазделителя;
	
	Возврат Прав(НомерЗаписи,ДлинаНомераСтроки)
	
КонецФункции

Функция СтатусыОшибокСтрокИзОтветаФСС(РеестрСсылка, ТаблицаСтрок)
	
	ЕстьОшибки = Ложь;
	ОтветФСССведения = ИнтерфейсыВзаимодействияБРОВызовСервера.СведенияКвитанцийОтчета(РеестрСсылка, "ФССКвитанция").Сведения;
	Если ОтветФСССведения.Количество() > 0 Тогда
		Протокол = ОтветФСССведения[0].Содержимое.ПротоколОбработки;
		Для Каждого СтрокаПротокола Из Протокол Цикл
			НомерСтроки = Число(НомерСтрокиИзНомераЗаписи(СтрокаПротокола.НомерЗаписи));
			ВСтрокеОшибка = Ложь;
			Для Каждого ОшибкаСтроки Из СтрокаПротокола.ОшибкиОбработки Цикл
				ВСтрокеОшибка = СтрНайти(ВРег(ОшибкаСтроки.КодОшибки),"ERR");
				Если ВСтрокеОшибка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТаблицы = ТаблицаСтрок.Найти(НомерСтроки,"НомерСтроки");
			Если ВСтрокеОшибка
				И СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.ПринятФСС = Ложь;
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ПолучитьСчетСотрудникаВБанке(Сотрудник, Организация, Банк) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат "";
	КонецЕсли;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Банк = &Банк
	|	И НЕ ЗарплатныеПроекты.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЛицевыеСчетаСотрудника = ОбменСБанкамиПоЗарплатнымПроектам.ЛицевыеСчетаСотрудников(
		Сотрудник,
		Истина,
		Организация,
		,
		Выборка.ЗарплатныйПроект);
		
	Если ЛицевыеСчетаСотрудника.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ЛицевыеСчетаСотрудника[0].НомерЛицевогоСчета;
	
КонецФункции

Функция СведенияПоСотрудникамНаСервере(Организация, НачалоПериода, ОкончаниеПериода, Сотрудники, Автозаполнение = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники, НачалоПериода, ОкончаниеПериода);
	ПараметрыПолученияРабочихМест.Организация = Организация;
	// Получаем рабочие места сотрудников
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	
	КадровыеДанные = "ФизическоеЛицо, СтраховойНомерПФР, Фамилия, Имя, Отчество, ДатаРождения, Организация, ВидЗанятости, Подразделение, Должность, ДолжностьПоШтатномуРасписанию, ВидМестаВыплаты, МестоВыплаты, ЗарплатныйПроект, НомерЛицевогоСчета";
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, Сотрудники, КадровыеДанные, ОкончаниеПериода);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМестаСотрудников.Организация КАК Организация,
		|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	РабочиеМестаСотрудников.Должность КАК Должность,
		|	РабочиеМестаСотрудников.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	РабочиеМестаСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	КадровыеДанныеСотрудников.Фамилия КАК Фамилия,
		|	КадровыеДанныеСотрудников.Имя КАК Имя,
		|	КадровыеДанныеСотрудников.Отчество КАК Отчество,
		|	КадровыеДанныеСотрудников.ДатаРождения КАК ДатаРождения,
		|	КадровыеДанныеСотрудников.ВидМестаВыплаты КАК ВидМестаВыплаты,
		|	КадровыеДанныеСотрудников.МестоВыплаты КАК МестоВыплаты,
		|	КадровыеДанныеСотрудников.ЗарплатныйПроект КАК ЗарплатныйПроект,
		|	КадровыеДанныеСотрудников.НомерЛицевогоСчета КАК НомерЛицевогоСчета
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО (КадровыеДанныеСотрудников.Сотрудник = РабочиеМестаСотрудников.Сотрудник)";
	
	ТаблицаКадровыхДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаКадровыхДанных.Колонки.Добавить("СпособВыплатыПособия", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВыплатыПособия"));
	ТаблицаКадровыхДанных.Колонки.Добавить("КартаМИР", Новый ОписаниеТипов("СправочникСсылка.БанковскиеКартыКонтрагентов"));
	ТаблицаКадровыхДанных.Колонки.Добавить("РайонныйКоэффициент", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаКадровыхДанных.Колонки.Добавить("КатегорияПолучателя", Новый ОписаниеТипов("СправочникСсылка.КатегорииПолучателейСтимулирующихВыплатФСС"));
	ТаблицаКадровыхДанных.Колонки.Добавить("ТерриториальныйКоэффициент", Новый ОписаниеТипов("СправочникСсылка.ТерриторииСПовышающимКоэффициентомПоКоронавирусу"));
	ТаблицаКадровыхДанных.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	
	ТерриторииОрганизаций = РегистрыСведений.ТерриторииОрганизацийПоКоронавирусу.ТерриторииОрганизаций(ТаблицаКадровыхДанных.ВыгрузитьКолонку("Организация"));
	КатегорииДолжностей = РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.КатегорииДолжностей(ТаблицаКадровыхДанных.ВыгрузитьКолонку("Должность"));
	КатегорииПозицийШтатногоРасписания = РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.КатегорииДолжностей(ТаблицаКадровыхДанных.ВыгрузитьКолонку("ДолжностьПоШтатномуРасписанию"));
	
	ЗарплатныеПроекты = Новый Соответствие();
	КартыМирСотрудников = СтимулирующиеВыплатыФСС.ПоследниеКартыМИРСотрудников(Сотрудники, ОкончаниеПериода, Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ПустаяСсылка(),"Сотрудники");
	 
	Для Каждого СтрокаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
		
		Если ЗначениеЗаполнено(СтрокаКадровыхДанных.МестоВыплаты) Тогда
			Если ТипЗнч(СтрокаКадровыхДанных.МестоВыплаты) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов") Тогда
				РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКадровыхДанных.МестоВыплаты, "Банк, НомерСчета", Истина);
				СтрокаКадровыхДанных.Банк 				= РеквизитыСчета.Банк;
				СтрокаКадровыхДанных.НомерЛицевогоСчета = РеквизитыСчета.НомерСчета;
			ИначеЕсли ТипЗнч(СтрокаКадровыхДанных.МестоВыплаты) = Тип("СправочникСсылка.ЗарплатныеПроекты") Тогда
				ЛицевыеСчетаЗарплатногоПроекта = ЗарплатныеПроекты[СтрокаКадровыхДанных.МестоВыплаты];
				Если ЛицевыеСчетаЗарплатногоПроекта = Неопределено Тогда
					ЛицевыеСчетаЗарплатногоПроекта = ОбменСБанкамиПоЗарплатнымПроектам.ЛицевыеСчетаСотрудников(Сотрудники, Истина, Организация,,СтрокаКадровыхДанных.МестоВыплаты);
					ЗарплатныеПроекты.Вставить(СтрокаКадровыхДанных.МестоВыплаты, ЛицевыеСчетаЗарплатногоПроекта);
				КонецЕсли;
				ЛицевойСчетСотрудника = ЛицевыеСчетаЗарплатногоПроекта.Найти(СтрокаКадровыхДанных.Сотрудник, "Сотрудник");
				Если НЕ ЛицевойСчетСотрудника = Неопределено Тогда
					СтрокаКадровыхДанных.Банк       		= ЛицевойСчетСотрудника.Банк;
					СтрокаКадровыхДанных.НомерЛицевогоСчета = ЛицевойСчетСотрудника.НомерЛицевогоСчета;
				ИначеЕсли ЗначениеЗаполнено(СтрокаКадровыхДанных.НомерЛицевогоСчета) Тогда
					ЗарплатныйПроект = ?(ЗначениеЗаполнено(СтрокаКадровыхДанных.ЗарплатныйПроект),СтрокаКадровыхДанных.ЗарплатныйПроект, СтрокаКадровыхДанных.МестоВыплаты);
					СтрокаКадровыхДанных.Банк       		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗарплатныйПроект, "Банк");
					СтрокаКадровыхДанных.НомерЛицевогоСчета = СтрокаКадровыхДанных.НомерЛицевогоСчета;
 				КонецЕсли;
			КонецЕсли
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаКадровыхДанных.Подразделение) Тогда
			СтрокаКадровыхДанных.РайонныйКоэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаКадровыхДанных.Подразделение, "РайонныйКоэффициентРФ");
		КонецЕсли;
		
		СтрокаКадровыхДанных.КартаМИР = КартыМирСотрудников[СтрокаКадровыхДанных.Сотрудник];
		
		Если ЗначениеЗаполнено(СтрокаКадровыхДанных.КартаМИР) Тогда
			СтрокаКадровыхДанных.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР;
		Иначе
			СтрокаКадровыхДанных.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк;
		КонецЕсли;
		
		СтрокаКадровыхДанных.КатегорияПолучателя = КатегорииПозицийШтатногоРасписания[СтрокаКадровыхДанных.ДолжностьПоШтатномуРасписанию];
		Если НЕ ЗначениеЗаполнено(СтрокаКадровыхДанных.КатегорияПолучателя) Тогда
			СтрокаКадровыхДанных.КатегорияПолучателя = КатегорииДолжностей[СтрокаКадровыхДанных.Должность];
		КонецЕсли;
		
		СтрокаКадровыхДанных.ТерриториальныйКоэффициент = ТерриторииОрганизаций[СтрокаКадровыхДанных.Организация];
		
	КонецЦикла;
	
	Если Автозаполнение Тогда
		УдаляемыеСтроки = ТаблицаКадровыхДанных.НайтиСтроки(Новый Структура("КатегорияПолучателя", Справочники.КатегорииПолучателейСтимулирующихВыплатФСС.ПустаяСсылка()));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ТаблицаКадровыхДанных.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаКадровыхДанных;
		
КонецФункции

Функция ПустаяТаблицаРабочегоПериода() 
	ТаблицаРабочегоПериода = Новый ТаблицаЗначений();
	ТаблицаРабочегоПериода.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаРабочегоПериода.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаРабочегоПериода.Колонки.Добавить("КатегорияПолучателя", Новый ОписаниеТипов("СправочникСсылка.КатегорииПолучателейСтимулирующихВыплатФСС"));
	ТаблицаРабочегоПериода.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаРабочегоПериода.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ТаблицаРабочегоПериода.Колонки.Добавить("ДоляНеполногоРабочегоВремени", ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	ТаблицаРабочегоПериода.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРабочегоПериода.Колонки.Добавить("НормаЧасов", ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	ТаблицаРабочегоПериода.Колонки.Добавить("НормаДней", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ТаблицаРабочегоПериода.Колонки.Добавить("ФактЧасов", ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	ТаблицаРабочегоПериода.Колонки.Добавить("ФактДней", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ТаблицаРабочегоПериода.Колонки.Добавить("РаботаСКоронавирусомДней", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ТаблицаРабочегоПериода.Колонки.Добавить("РаботаСКоронавирусомЧасов", ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	ТаблицаРабочегоПериода.Колонки.Добавить("ДнейКОплате", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ТаблицаРабочегоПериода.Колонки.Добавить("ДлительностьРабочейНедели", ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	ТаблицаРабочегоПериода.Колонки.Добавить("СменКОплате", ОбщегоНазначения.ОписаниеТипаЧисло(3,1));
	ТаблицаРабочегоПериода.Колонки.Добавить("НомерПервичногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ТаблицаРабочегоПериода.Колонки.Добавить("Исправление", Новый ОписаниеТипов("Булево"));
	ТаблицаРабочегоПериода.Колонки.Добавить("КодПричиныИсправления", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ТаблицаРабочегоПериода.Колонки.Добавить("ОплаченоРанее", Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаРабочегоПериода; 
КонецФункции

Функция ДанныеОтправленныхРеестров(Организация, ПолучательСтимулирующихВыплатФСС, Сотрудники, НачалоПериода, ОкончаниеПериода, Ссылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПолучательСтимулирующихВыплатФСС", ПолучательСтимулирующихВыплатФСС);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реестр.Ссылка КАК Ссылка,
	|	Реестр.Дата КАК Дата,
	|	Реестр.ОплатаПраздничныхДней КАК ОплатаПраздничныхДней,
	|	РеестрСотрудники.НомерСтроки КАК НомерСтроки,
	|	РеестрСотрудники.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	РеестрСотрудники.Сотрудник КАК Сотрудник,
	|	РеестрСотрудники.Должность КАК Должность,
	|	РеестрСотрудники.КатегорияПолучателя КАК КатегорияПолучателя,
	|	РеестрСотрудники.ДнейКОплате КАК ДнейКОплате,
	|	РеестрСотрудники.СменКОплате КАК СменКОплате
	|ПОМЕСТИТЬ ВТДанныеПринятыхРеестров
	|ИЗ
	|	Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Сотрудники КАК РеестрСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам КАК Реестр
	|		ПО РеестрСотрудники.Ссылка = Реестр.Ссылка
	|ГДЕ
	|	Реестр.ВидПособия = &ПолучательСтимулирующихВыплатФСС
	|	И (Реестр.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПолучательСтимулирующихВыплатФСС.МедицинскаяОрганизация)
	|				И Реестр.МесяцНачисления = &ПериодРасчета
	|			ИЛИ Реестр.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПолучательСтимулирующихВыплатФСС.ОрганизацияСоциальногоОбслуживания)
	|				И Реестр.НачалоПериода = &НачалоПериода
	|				И Реестр.ОкончаниеПериода = &ОкончаниеПериода)
	|	И Реестр.Организация = &Организация
	|	И Реестр.Проведен
	|	И (Реестр.СостояниеРеестра = ЗНАЧЕНИЕ(Перечисление.СостоянияРеестровФСС.ПринятФСС)
	|			ИЛИ Реестр.СостояниеРеестра = ЗНАЧЕНИЕ(Перечисление.СостоянияРеестровФСС.ЧастичноПринятФСС)
	|				И РеестрСотрудники.ПринятФСС)
	|	И РеестрСотрудники.Сотрудник В(&Сотрудники)
	|	И Реестр.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПринятыхРеестров.Сотрудник КАК Сотрудник,
	|	ДанныеПринятыхРеестров.Должность КАК Должность,
	|	ДанныеПринятыхРеестров.КатегорияПолучателя КАК КатегорияПолучателя,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ДанныеПринятыхРеестров.НомерПервичногоДокумента = """"
	|					И НЕ ДанныеПринятыхРеестров.ОплатаПраздничныхДней
	|				ТОГДА ДанныеПринятыхРеестров.Дата
	|		КОНЕЦ) КАК ДатаПервогоРеестра,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ДанныеПринятыхРеестров.ОплатаПраздничныхДней
	|				ТОГДА ДанныеПринятыхРеестров.Дата
	|		КОНЕЦ) КАК ДатаПоследнегоРеестра,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ДанныеПринятыхРеестров.НомерПервичногоДокумента = """"
	|					И ДанныеПринятыхРеестров.ОплатаПраздничныхДней
	|				ТОГДА ДанныеПринятыхРеестров.Дата
	|		КОНЕЦ) КАК ДатаПервогоРеестраПраздничных,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеПринятыхРеестров.ОплатаПраздничныхДней
	|				ТОГДА ДанныеПринятыхРеестров.Дата
	|		КОНЕЦ) КАК ДатаПоследнегоРеестраПраздничных
	|ПОМЕСТИТЬ ВТДанныеПринятыхРеестровСрез
	|ИЗ
	|	ВТДанныеПринятыхРеестров КАК ДанныеПринятыхРеестров
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПринятыхРеестров.Сотрудник,
	|	ДанныеПринятыхРеестров.Должность,
	|	ДанныеПринятыхРеестров.КатегорияПолучателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПринятыхРеестровСрез.Сотрудник КАК Сотрудник,
	|	ДанныеПринятыхРеестровСрез.Должность КАК Должность,
	|	ДанныеПринятыхРеестровСрез.КатегорияПолучателя КАК КатегорияПолучателя,
	|	ЕСТЬNULL(ПоследнийПринятыйРеестр.ДнейКОплате,0) КАК ДнейКОплате,
	|	ЕСТЬNULL(ПоследнийПринятыйРеестр.СменКОплате,0) КАК СменКОплате,
	|	ЕСТЬNULL(ПоследнийПринятыйРеестрПоПраздничным.СменКОплате,0) КАК СменКОплатеРеестрПраздничных,
	|	ИсходныйРеестр.Ссылка КАК Ссылка,
	|	ИсходныйРеестр.НомерСтроки КАК НомерСтроки,
	|	ИсходныйРеестрПоПраздничным.Ссылка КАК СсылкаРеестрПраздничных,
	|	ИсходныйРеестрПоПраздничным.НомерСтроки КАК НомерСтрокиРеестрПраздничных
	|ИЗ
	|	ВТДанныеПринятыхРеестровСрез КАК ДанныеПринятыхРеестровСрез
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПринятыхРеестров КАК ПоследнийПринятыйРеестрПоПраздничным
	|		ПО (ПоследнийПринятыйРеестрПоПраздничным.Сотрудник = ДанныеПринятыхРеестровСрез.Сотрудник)
	|			И (ПоследнийПринятыйРеестрПоПраздничным.Должность = ДанныеПринятыхРеестровСрез.Должность)
	|			И (ПоследнийПринятыйРеестрПоПраздничным.КатегорияПолучателя = ДанныеПринятыхРеестровСрез.КатегорияПолучателя)
	|			И (ПоследнийПринятыйРеестрПоПраздничным.ОплатаПраздничныхДней = ИСТИНА)
	|			И (ПоследнийПринятыйРеестрПоПраздничным.Дата = ДанныеПринятыхРеестровСрез.ДатаПоследнегоРеестраПраздничных)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПринятыхРеестров КАК ПоследнийПринятыйРеестр
	|		ПО (ПоследнийПринятыйРеестр.Сотрудник = ДанныеПринятыхРеестровСрез.Сотрудник)
	|			И (ПоследнийПринятыйРеестр.Должность = ДанныеПринятыхРеестровСрез.Должность)
	|			И (ПоследнийПринятыйРеестр.КатегорияПолучателя = ДанныеПринятыхРеестровСрез.КатегорияПолучателя)
	|			И (ПоследнийПринятыйРеестр.ОплатаПраздничныхДней = ЛОЖЬ)
	|			И (ПоследнийПринятыйРеестр.Дата = ДанныеПринятыхРеестровСрез.ДатаПоследнегоРеестра)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПринятыхРеестров КАК ИсходныйРеестр
	|		ПО (ИсходныйРеестр.Сотрудник = ДанныеПринятыхРеестровСрез.Сотрудник)
	|			И (ИсходныйРеестр.Должность = ДанныеПринятыхРеестровСрез.Должность)
	|			И (ИсходныйРеестр.КатегорияПолучателя = ДанныеПринятыхРеестровСрез.КатегорияПолучателя)
	|			И (ИсходныйРеестр.ОплатаПраздничныхДней = ЛОЖЬ)
	|			И (ИсходныйРеестр.Дата = ДанныеПринятыхРеестровСрез.ДатаПервогоРеестра)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПринятыхРеестров КАК ИсходныйРеестрПоПраздничным
	|		ПО (ИсходныйРеестрПоПраздничным.Сотрудник = ДанныеПринятыхРеестровСрез.Сотрудник)
	|			И (ИсходныйРеестрПоПраздничным.Должность = ДанныеПринятыхРеестровСрез.Должность)
	|			И (ИсходныйРеестрПоПраздничным.КатегорияПолучателя = ДанныеПринятыхРеестровСрез.КатегорияПолучателя)
	|			И (ИсходныйРеестрПоПраздничным.ОплатаПраздничныхДней = ИСТИНА)
	|			И (ИсходныйРеестрПоПраздничным.Дата = ДанныеПринятыхРеестровСрез.ДатаПервогоРеестраПраздничных)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция СотрудникиПолучателиСтимулирующихВыплатФСС(Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	
	КатегорииДолжностей = РегистрыСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС.КатегорииДолжностей();
	ДолжностиПолучателейВыплатФСС = Новый Массив();
	ПозицииШРПолучателейВыплатФСС = Новый Массив();
	
	Для Каждого КатегорияДолжности Из КатегорииДолжностей Цикл
		Если НЕ ЗначениеЗаполнено(КатегорияДолжности.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(КатегорияДолжности.Ключ) = Тип("СправочникСсылка.Должности") Тогда
			ДолжностиПолучателейВыплатФСС.Добавить(КатегорияДолжности.Ключ);
		ИначеЕсли ТипЗнч(КатегорияДолжности.Ключ) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			ПозицииШРПолучателейВыплатФСС.Добавить(КатегорияДолжности.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПериода;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПолученияСотрудников.Отборы, "Должность", "В", ДолжностиПолучателейВыплатФСС);
		
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников,"ВТСотрудникиПоДолжности");
	
	ПараметрыПолученияСотрудников.Отборы.Очистить();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПолученияСотрудников.Отборы, "ДолжностьПоШтатномуРасписанию", "В", ПозицииШРПолучателейВыплатФСС);
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников,"ВТСотрудникиПоПозицииШР");
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПоДолжности.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиПоДолжности КАК СотрудникиПоДолжности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиПоПозицииШР.Сотрудник
		|ИЗ
		|	ВТСотрудникиПоПозицииШР КАК СотрудникиПоПозицииШР";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция ТаблицаПериодовРаботСотрудниковСКоронавирусом(Организация, НачалоПериода, ОкончаниеПериода, Сотрудники, ПолучательСтимулирующихВыплатФСС)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ЗаданПереченьСотрудников", НЕ (Сотрудники = Неопределено));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ЭтоОрганизацияСоциальногоОбслуживания", ПолучательСтимулирующихВыплатФСС = Перечисления.ПолучательСтимулирующихВыплатФСС.ОрганизацияСоциальногоОбслуживания);
	Запрос.УстановитьПараметр("ЭтоМедицинскаяОрганизация", ПолучательСтимулирующихВыплатФСС = Перечисления.ПолучательСтимулирующихВыплатФСС.МедицинскаяОрганизация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыРаботыСКоронавирусом.Сотрудник КАК Сотрудник,
		|	ПериодыРаботыСКоронавирусом.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыРаботыСКоронавирусом.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ПериодыРаботыСКоронавирусом.ДатаНачала < &ДатаНачала
		|			ТОГДА &ДатаНачала
		|		ИНАЧЕ ПериодыРаботыСКоронавирусом.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПериодыРаботыСКоронавирусом.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОкончания
		|		КОГДА ПериодыРаботыСКоронавирусом.ДатаОкончания > &ДатаОкончания
		|			ТОГДА &ДатаОкончания
		|		ИНАЧЕ ПериодыРаботыСКоронавирусом.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыРаботыСКоронавирусом
		|ИЗ
		|	РегистрСведений.ПериодыРаботыСКоронавирусом КАК ПериодыРаботыСКоронавирусом
		|ГДЕ
		|	ПериодыРаботыСКоронавирусом.Организация = &Организация
		|	И (НЕ &ЗаданПереченьСотрудников
		|			ИЛИ &ЗаданПереченьСотрудников
		|				И ПериодыРаботыСКоронавирусом.Сотрудник В (&Сотрудники))";
	
	Если ПолучательСтимулирующихВыплатФСС = Перечисления.ПолучательСтимулирующихВыплатФСС.МедицинскаяОрганизация Тогда
		Запрос.Текст = Запрос.Текст +"
		|	И ПериодыРаботыСКоронавирусом.ДатаНачала <= &ДатаОкончания
		|	И (ВЫБОР
		|		КОГДА ПериодыРаботыСКоронавирусом.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ПериодыРаботыСКоронавирусом.ДатаОкончания >= &ДатаНачала
		|	КОНЕЦ)";
	Иначе
		Запрос.Текст = Запрос.Текст +"
		|	И ПериодыРаботыСКоронавирусом.ДатаНачала = &ДатаНачала
		|	И ПериодыРаботыСКоронавирусом.ДатаОкончания = &ДатаОкончания";
	КонецЕсли;
	Запрос.Выполнить();
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники, НачалоПериода, ОкончаниеПериода);
	ПараметрыПолученияРабочихМест.Организация = Организация;
	// Получаем рабочие места сотрудников
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТРабочиеМестаСотрудников");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц, Истина, 
		"ГрафикРаботы, ДоляНеполногоРабочегоВремени");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация КАК Организация,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизации.Должность КАК Должность,
	|	СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	|	СотрудникиОрганизации.ДатаНачала КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(СотрудникиОрганизации.ДатаОкончания, ДЕНЬ,-1) КАК ДатаОкончания,
	|	КадровыеДанныеСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
	|	СотрудникиОрганизации.ДатаНачала КАК КадровыеДанныеДатаНачала,
	|	СотрудникиОрганизации.ДатаОкончания КАК КадровыеДанныеДатаОкончания,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КатегорииПолучателейВыплатФССПозицияШР.КатегорияПолучателяСтимулирующихВыплатФСС, ЗНАЧЕНИЕ(Справочник.КатегорииПолучателейСтимулирующихВыплатФСС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииПолучателейСтимулирующихВыплатФСС.ПустаяСсылка)
	|			ТОГДА КатегорииПолучателейВыплатФССПозицияШР.КатегорияПолучателяСтимулирующихВыплатФСС
	|		ИНАЧЕ ЕСТЬNULL(КатегорииПолучателейВыплатФССДолжность.КатегорияПолучателяСтимулирующихВыплатФСС, ЗНАЧЕНИЕ(Справочник.КатегорииПолучателейСтимулирующихВыплатФСС.ПустаяСсылка))
	|	КОНЕЦ КАК КатегорияПолучателяСтимулирующихВыплатФСС,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию <> ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
	|			ТОГДА СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию.РаботаСКоронавирусом
	|		ИНАЧЕ СотрудникиОрганизации.Должность.РаботаСКоронавирусом
	|	КОНЕЦ КАК РаботаСКоронавирусом,
	|	ПериодыРаботыСКоронавирусом.ДатаНачала КАК ПериодыРаботыСКоронавирусомДатаНачала,
	|	ПериодыРаботыСКоронавирусом.ДатаОкончания КАК ПериодыРаботыСКоронавирусомДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыРаботыСКоронавирусомПредварительно
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО (КадровыеДанныеСотрудников.Сотрудник = СотрудникиОрганизации.Сотрудник)
	|			И (КадровыеДанныеСотрудников.Период = СотрудникиОрганизации.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС КАК КатегорииПолучателейВыплатФССДолжность
	|		ПО (КатегорииПолучателейВыплатФССДолжность.Должность = СотрудникиОрганизации.Должность)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииДолжностейПолучателейСтимулирующихВыплатФСС КАК КатегорииПолучателейВыплатФССПозицияШР
	|		ПО (КатегорииПолучателейВыплатФССПозицияШР.Должность = СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРаботыСКоронавирусом КАК ПериодыРаботыСКоронавирусом
	|		ПО (ПериодыРаботыСКоронавирусом.Сотрудник = СотрудникиОрганизации.Сотрудник)
	|ГДЕ
	|	(&ЗаданПереченьСотрудников
	|				И СотрудникиОрганизации.Сотрудник В (&Сотрудники)
	|			ИЛИ НЕ &ЗаданПереченьСотрудников
	|				И ВЫБОР
	|					КОГДА ЕСТЬNULL(КатегорииПолучателейВыплатФССПозицияШР.КатегорияПолучателяСтимулирующихВыплатФСС, ЗНАЧЕНИЕ(Справочник.КатегорииПолучателейСтимулирующихВыплатФСС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииПолучателейСтимулирующихВыплатФСС.ПустаяСсылка)
	|						ТОГДА КатегорииПолучателейВыплатФССПозицияШР.КатегорияПолучателяСтимулирующихВыплатФСС
	|					ИНАЧЕ ЕСТЬNULL(КатегорииПолучателейВыплатФССДолжность.КатегорияПолучателяСтимулирующихВыплатФСС, ЗНАЧЕНИЕ(Справочник.КатегорииПолучателейСтимулирующихВыплатФСС.ПустаяСсылка))
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.КатегорииПолучателейСтимулирующихВыплатФСС.ПустаяСсылка))
	|	И ((ЕСТЬNULL(ПериодыРаботыСКоронавирусом.ДатаНачала,ДАТАВРЕМЯ(3999,12,31)) < СотрудникиОрганизации.ДатаОкончания
	|		И (ПериодыРаботыСКоронавирусом.ДатаОкончания = ДАТАВРЕМЯ(1,1,1)
	|			ИЛИ ПериодыРаботыСКоронавирусом.ДатаОкончания > СотрудникиОрганизации.ДатаНачала)
	|		)
	|		ИЛИ (ВЫБОР
	|				КОГДА СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию <> ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
	|					ТОГДА СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию.РаботаСКоронавирусом
	|				ИНАЧЕ СотрудникиОрганизации.Должность.РаботаСКоронавирусом
	|			КОНЕЦ = ИСТИНА
	|			И &ЭтоМедицинскаяОрганизация))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРаботыСКоронавирусомПредварительно.Организация КАК Организация,
	|	ПериодыРаботыСКоронавирусомПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПериодыРаботыСКоронавирусомПредварительно.Сотрудник КАК Сотрудник,
	|	ПериодыРаботыСКоронавирусомПредварительно.Должность КАК Должность,
	|	ПериодыРаботыСКоронавирусомПредварительно.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	|	ПериодыРаботыСКоронавирусомПредварительно.ГрафикРаботы КАК ГрафикРаботы,
	|	ПериодыРаботыСКоронавирусомПредварительно.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
	|	ПериодыРаботыСКоронавирусомПредварительно.КатегорияПолучателяСтимулирующихВыплатФСС КАК КатегорияПолучателя,
	|	ПериодыРаботыСКоронавирусомПредварительно.КадровыеДанныеДатаНачала КАК КадровыеДанныеДатаНачала,
	|	ПериодыРаботыСКоронавирусомПредварительно.КадровыеДанныеДатаОкончания КАК КадровыеДанныеДатаОкончания,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА ПериодыРаботыСКоронавирусомПредварительно.РаботаСКоронавирусом
	|			ТОГДА ВЫБОР
	|					КОГДА ПериодыРаботыСКоронавирусомПредварительно.ДатаНачала > &ДатаНачала
	|						ТОГДА ПериодыРаботыСКоронавирусомПредварительно.ДатаНачала
	|					ИНАЧЕ &ДатаНачала
	|				КОНЕЦ
	|		ИНАЧЕ ПериодыРаботыСКоронавирусомПредварительно.ПериодыРаботыСКоронавирусомДатаНачала
	|	КОНЕЦ, ДЕНЬ) КАК ДатаНачала,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА ПериодыРаботыСКоронавирусомПредварительно.РаботаСКоронавирусом
	|			ТОГДА ВЫБОР
	|					КОГДА ПериодыРаботыСКоронавирусомПредварительно.ДатаОкончания < &ДатаОкончания
	|						ТОГДА ПериодыРаботыСКоронавирусомПредварительно.ДатаОкончания
	|					ИНАЧЕ &ДатаОкончания
	|				КОНЕЦ
	|		ИНАЧЕ ПериодыРаботыСКоронавирусомПредварительно.ПериодыРаботыСКоронавирусомДатаОкончания
	|	КОНЕЦ, ДЕНЬ) КАК ДатаОкончания
	|ИЗ
	|	ВТПериодыРаботыСКоронавирусомПредварительно КАК ПериодыРаботыСКоронавирусомПредварительно";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СменыРаботСотрудниковСКоронавирусом(Организация, НачалоПериода, ОкончаниеПериода, ПолучательСтимулирующихВыплатФСС, Сотрудники, ОплатаПраздничныхДней = Ложь, Ссылка = Неопределено, ДатаАктуальности = Неопределено) Экспорт
	ПериодыРаботыСКоронавирусом = ТаблицаПериодовРаботСотрудниковСКоронавирусом(Организация, НачалоПериода, ОкончаниеПериода, Сотрудники, ПолучательСтимулирующихВыплатФСС);
	
	ОбщиеГрафики = ПериодыРаботыСКоронавирусом.ВыгрузитьКолонку("ГрафикРаботы");
	СвойстваОбщихГрафиков = УчетРабочегоВремениРасширенный.СвойстваОбщихГрафиков(ОбщиеГрафики);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("ПериодыРаботыСКоронавирусом", ПериодыРаботыСКоронавирусом);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеПериода);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыРаботыСКоронавирусом.Организация КАК Организация,
	|	ПериодыРаботыСКоронавирусом.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПериодыРаботыСКоронавирусом.Сотрудник КАК Сотрудник,
	|	ПериодыРаботыСКоронавирусом.Должность КАК Должность,
	|	ПериодыРаботыСКоронавирусом.ГрафикРаботы КАК ГрафикРаботы,
	|	ПериодыРаботыСКоронавирусом.КатегорияПолучателя КАК КатегорияПолучателя,
	|	ПериодыРаботыСКоронавирусом.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
	|	НАЧАЛОПЕРИОДА(ПериодыРаботыСКоронавирусом.КадровыеДанныеДатаНачала,ДЕНЬ) КАК КадровыеДанныеДатаНачала,
	|	ПериодыРаботыСКоронавирусом.КадровыеДанныеДатаОкончания КАК КадровыеДанныеДатаОкончания,
	|	&ДатаНачала КАК ДатаНачала,
	|	&ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиГрафики
	|ИЗ
	|	&ПериодыРаботыСКоронавирусом КАК ПериодыРаботыСКоронавирусом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиГрафики.Организация КАК Организация,
	|	СотрудникиГрафики.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СотрудникиГрафики.ДатаНачала КАК ДатаНачала,
	|	СотрудникиГрафики.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТСотрудникиГрафики КАК СотрудникиГрафики";
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремени";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Истина;
	ПараметрыЗаполнения.ДатаАктуальности = КонецМесяца(?(ЗначениеЗаполнено(ДатаАктуальности), ДатаАктуальности, ОкончаниеПериода));
	ПараметрыЗаполнения.ДатаНачала = НачалоПериода;
	ПараметрыЗаполнения.ДатаОкончания = ОкончаниеПериода;;
	ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(НачалоПериода);;
	ПараметрыЗаполнения.МесяцДатаОкончания = КонецМесяца(ОкончаниеПериода);;
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыЗаполнения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.ГрафикРаботы КАК ГрафикРаботы,
	|	Сотрудники.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
	|	Сотрудники.КатегорияПолучателя КАК КатегорияПолучателя,
	|	ДанныеУчетаВремени.Должность КАК Должность,
	|	ДанныеУчетаВремени.Дата КАК Дата,
	|	ДанныеУчетаВремени.НормаЧасов КАК НормаЧасов,
	|	ДанныеУчетаВремени.Отклонение КАК Отклонение,
	|	ДанныеУчетаВремени.Часы КАК Часы,
	|	ДанныеУчетаВремени.Дни КАК Дни,
	|	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВидыИспользованияРабочегоВремени.РабочееВремя КАК РабочееВремя
	|ИЗ
	|	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиГрафики КАК Сотрудники
	|		ПО (Сотрудники.Организация = ДанныеУчетаВремени.Организация)
	|			И (Сотрудники.Сотрудник = ДанныеУчетаВремени.Сотрудник)
	|			И (Сотрудники.Должность = ДанныеУчетаВремени.Должность)
	|			И (ДанныеУчетаВремени.Дата >= Сотрудники.КадровыеДанныеДатаНачала)
	|			И (ДанныеУчетаВремени.Дата < Сотрудники.КадровыеДанныеДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|		ПО (ВидыИспользованияРабочегоВремени.Ссылка = ДанныеУчетаВремени.ВидУчетаВремени)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Сотрудник,
	|	ДанныеУчетаВремени.Дата";
	ВыборкаРабочегоВремени = Запрос.Выполнить().Выбрать();

	ТаблицаРабочегоПериода = ПустаяТаблицаРабочегоПериода();
	
	СтруктураПоиска = Новый Структура("Сотрудник, Дата, ГрафикРаботы");
	
	Пока ВыборкаРабочегоВремени.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРабочегоВремени);
		ДниСотрудника = ТаблицаРабочегоПериода.НайтиСтроки(СтруктураПоиска);
		Если ДниСотрудника.Количество() = 0 Тогда
			ДеньСотрудника = ТаблицаРабочегоПериода.Добавить();
			ЗаполнитьЗначенияСвойств(ДеньСотрудника,ВыборкаРабочегоВремени);
		Иначе
			ДеньСотрудника = ДниСотрудника[0];
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаРабочегоВремени.НормаЧасов) Тогда
			ДеньСотрудника.НормаДней = 1;
			ДеньСотрудника.НормаЧасов = ВыборкаРабочегоВремени.НормаЧасов;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаРабочегоВремени.Часы) Тогда
			Если ВыборкаРабочегоВремени.РабочееВремя
				ИЛИ ВыборкаРабочегоВремени.ВидУчетаВремени = Справочники.ВидыИспользованияРабочегоВремени.Командировка Тогда
				ДеньСотрудника.ФактДней = ВыборкаРабочегоВремени.Дни;
				ДеньСотрудника.ФактЧасов = ДеньСотрудника.ФактЧасов + ВыборкаРабочегоВремени.Часы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Сотрудник, ГрафикРаботы, Должность, КатегорияПолучателя, Дата");
	Для Каждого ПериодРаботыСКоронавирусом Из ПериодыРаботыСКоронавирусом Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПериодРаботыСКоронавирусом);
		ДатаРаботыСКоронавирусом = ПериодРаботыСКоронавирусом.ДатаНачала;
		Пока ДатаРаботыСКоронавирусом <= ПериодРаботыСКоронавирусом.ДатаОкончания Цикл
			СтруктураПоиска.Дата = ДатаРаботыСКоронавирусом;
			ДатаРаботыСКоронавирусом = ДатаРаботыСКоронавирусом + 86400;
			
			ДниСотрудника = ТаблицаРабочегоПериода.НайтиСтроки(СтруктураПоиска);
			Если ДниСотрудника.Количество() = 0 Тогда
				Продолжить;
			Иначе
				ДеньСотрудника = ДниСотрудника[0];
			КонецЕсли;
			Если ДеньСотрудника.ФактДней > 0 Тогда 
				ДеньСотрудника.РаботаСКоронавирусомДней = ДеньСотрудника.ФактДней;
			КонецЕсли;
			Если ДеньСотрудника.ФактЧасов > 0 Тогда 
				ДеньСотрудника.РаботаСКоронавирусомЧасов = ДеньСотрудника.ФактЧасов;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТаблицаРабочегоПериода.Свернуть("Сотрудник, Должность, КатегорияПолучателя, ГрафикРаботы, ДоляНеполногоРабочегоВремени, ОплаченоРанее, Исправление, КодПричиныИсправления, НомерПервичногоДокумента","НормаДней, НормаЧасов, ФактЧасов, ФактДней, РаботаСКоронавирусомДней, РаботаСКоронавирусомЧасов, ДнейКОплате,СменКОплате, ДлительностьРабочейНедели");
	
	НормаСменыМедОрганизаций = 5;
	НормаСменыСоцОрганизаций = 14;
	
	ДанныеОтправленныхРеестров = ДанныеОтправленныхРеестров(Организация, ПолучательСтимулирующихВыплатФСС, Сотрудники, НачалоПериода, ОкончаниеПериода, Ссылка);
	СтруктураПоиска = Новый Структура("Сотрудник, Должность, КатегорияПолучателя");
	
	Для Каждого ПериодСотрудника Из ТаблицаРабочегоПериода Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПериодСотрудника);
		ПереданныеВРеестрДанные = ДанныеОтправленныхРеестров.НайтиСтроки(СтруктураПоиска);
		
		СвойстваГрафика = СвойстваОбщихГрафиков[ПериодСотрудника.ГрафикРаботы];
		Если ЗначениеЗаполнено(СвойстваГрафика) Тогда
			ПериодСотрудника.ДлительностьРабочейНедели = СвойстваГрафика.ДлительностьРабочейНедели;
			Если ЗначениеЗаполнено(СвойстваГрафика.ГрафикПолногоРабочегоВремени) Тогда
				ПериодСотрудника.ДлительностьРабочейНедели = СвойстваГрафика.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели;
			КонецЕсли;
			Если ПолучательСтимулирующихВыплатФСС = Перечисления.ПолучательСтимулирующихВыплатФСС.МедицинскаяОрганизация Тогда
				ПериодСотрудника.СменКОплате = ПериодСотрудника.РаботаСКоронавирусомЧасов / (ПериодСотрудника.ДлительностьРабочейНедели / НормаСменыМедОрганизаций);
				ПериодСотрудника.ДнейКОплате = ПериодСотрудника.РаботаСКоронавирусомДней;
				Если СвойстваГрафика.НеполноеРабочееВремя
					И НЕ ЗначениеЗаполнено(СвойстваГрафика.ГрафикПолногоРабочегоВремени) Тогда
					ПериодСотрудника.СменКОплате = ПериодСотрудника.СменКОплате * ПериодСотрудника.ДоляНеполногоРабочегоВремени;
				КонецЕсли;
			Иначе
				ПериодСотрудника.СменКОплате = Цел(ПериодСотрудника.РаботаСКоронавирусомДней / НормаСменыСоцОрганизаций);
				ПериодСотрудника.ДнейКОплате = ПериодСотрудника.РаботаСКоронавирусомДней - ПериодСотрудника.СменКОплате * 14;
			КонецЕсли;
		КонецЕсли;
		
		Если ПереданныеВРеестрДанные.Количество() > 0 Тогда
			Если ОплатаПраздничныхДней Тогда
				ПериодСотрудника.ОплаченоРанее = ПереданныеВРеестрДанные[0].СменКОплатеРеестрПраздничных = ПериодСотрудника.СменКОплате;
				ПериодСотрудника.Исправление = НЕ ПериодСотрудника.ОплаченоРанее
					И НЕ ПереданныеВРеестрДанные[0].СменКОплатеРеестрПраздничных = 0;
				Если ПериодСотрудника.Исправление 
					И ЗначениеЗаполнено(ПереданныеВРеестрДанные[0].СсылкаРеестрПраздничных) Тогда
					ПериодСотрудника.КодПричиныИсправления = 1;
					НачалоНомераСтроки = ИдентификаторФСС(ПереданныеВРеестрДанные[0].СсылкаРеестрПраздничных) + ":";
					ПериодСотрудника.НомерПервичногоДокумента = НачалоНомераСтроки + Формат(ПереданныеВРеестрДанные[0].НомерСтрокиРеестрПраздничных, "ЧЦ=10; ЧГ=");
				КонецЕсли;
			Иначе
				ПериодСотрудника.СменКОплате = ПериодСотрудника.СменКОплате - ПереданныеВРеестрДанные[0].СменКОплатеРеестрПраздничных;
				ПериодСотрудника.ОплаченоРанее = (ПереданныеВРеестрДанные[0].СменКОплате = ПериодСотрудника.СменКОплате)
					И (ПереданныеВРеестрДанные[0].ДнейКОплате = ПериодСотрудника.ДнейКОплате);
				ПериодСотрудника.Исправление = НЕ ПериодСотрудника.ОплаченоРанее
					И НЕ ПереданныеВРеестрДанные[0].СменКОплате = 0;
				Если ПериодСотрудника.Исправление 
					И ЗначениеЗаполнено(ПереданныеВРеестрДанные[0].Ссылка) Тогда
					ПериодСотрудника.КодПричиныИсправления = 1;
					НачалоНомераСтроки = ИдентификаторФСС(ПереданныеВРеестрДанные[0].Ссылка) + ":";
					ПериодСотрудника.НомерПервичногоДокумента = НачалоНомераСтроки + Формат(ПереданныеВРеестрДанные[0].НомерСтроки, "ЧЦ=10; ЧГ=");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРабочегоПериода.Свернуть("Сотрудник, Должность, КатегорияПолучателя, ОплаченоРанее, Исправление, КодПричиныИсправления, НомерПервичногоДокумента","ДнейКОплате,СменКОплате");
	
	Возврат ТаблицаРабочегоПериода; 
	
КонецФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// Реквизиты организации.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "Организация";
	Шаблон.ОснованиеЗаполнения = "Организация";
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РегистрационныйНомерФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КодПодчиненностиФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РеестрСоставил", Ложь);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТелефонСоставителя", Ложь);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "АдресЭлектроннойПочтыСоставителя", Ложь);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИНН");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КПП");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОГРН");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеСтрахователя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВидПособия");
	
	// Кэш строк.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "КэшДанныхРеестра";
	Шаблон.ОснованиеЗаполнения = "КэшДанныхРеестра";
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СостояниеРеестра", Ложь);
			
	// Реквизиты табличной части "Сотрудники".
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.Путь           = "Сотрудники";
	Шаблон.РеквизитСтроки = Истина;
	
	//   Регистр сведений о Реестре.
	Шаблон.ОснованиеЗаполнения = "РегистрСведенийРеестра";
	Шаблон.ИмяГруппы           = "РегистрСведенийРеестра";
	Шаблон.ФиксацияГруппы      = Истина;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Исправление", Ложь);
	
	//   Документ-основание.
	Шаблон.ОснованиеЗаполнения = "Сотрудник";
	Шаблон.ИмяГруппы           = "КадровыеДанныеСотрудника";
	Шаблон.ФиксацияГруппы      = Ложь;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СтраховойНомерПФР");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Фамилия");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Имя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Отчество");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаРождения");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КатегорияПолучателя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВидЗанятости");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Должность");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РайонныйКоэффициент");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТерриториальныйКоэффициент");

	
	//   Извещение из ФСС / Отказ.
	Шаблон.ОснованиеЗаполнения = "ИзвещениеИзФСС";
	Шаблон.ИмяГруппы           = "ИзвещениеИзФСС";
	Шаблон.ФиксацияГруппы      = Ложь;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИзвещениеИзФССНомер", Ложь);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИзвещениеИзФССДата", Ложь);
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти


Функция ВОрганизацииВыявленКоронавирус(Организация, Дата) Экспорт
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ВОрганизацииВыявленКоронавирус КАК ВОрганизацииВыявленКоронавирус
	|ИЗ
	|	Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам КАК РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам
	|ГДЕ
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Организация = &Организация
	|	И РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Дата <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВОрганизацииВыявленКоронавирус;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьБанкИЛицевойСчет(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеВыполнено = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	Реестр.Ссылка КАК Ссылка,
		|	Реестр.НомерСтроки КАК НомерСтроки,
		|	БанковскиеСчетаКонтрагентов.Банк КАК Банк,
		|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерЛицевогоСчета
		|ИЗ
		|	Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.Сотрудники КАК Реестр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО (БанковскиеСчетаКонтрагентов.Ссылка = Реестр.НомерБанковскогоСчета)
		|ГДЕ
		|	Реестр.СпособВыплатыПособия = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПособия.ЧерезБанк)
		|	И Реестр.НомерБанковскогоСчета <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|	И Реестр.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Реестр.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбновлениеВыполнено = Ложь;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			
			Пока Выборка.Следующий() Цикл
				СтрокаСотрудника = ОбъектДокумента.Сотрудники[Выборка.НомерСтроки - 1];
				ЗаполнитьЗначенияСвойств(СтрокаСотрудника, Выборка, "Банк,НомерЛицевогоСчета");
			КонецЦикла;
			
			ОбъектДокумента.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбновлениеВыполнено);
	
КонецПроцедуры

Процедура ЗаполнитьДатыНачалаИОкончания(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеВыполнено = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	Реестр.Ссылка КАК Ссылка,
		|	НАЧАЛОПЕРИОДА(Реестр.МесяцНачисления, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(Реестр.МесяцНачисления, МЕСЯЦ) КАК ОкончаниеПериода
		|ИЗ
		|	Документ.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам КАК Реестр
		|ГДЕ
		|	Реестр.МесяцНачисления <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (Реестр.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ Реестр.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Реестр.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбновлениеВыполнено = Ложь;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОбъектДокумента, Выборка, "НачалоПериода,ОкончаниеПериода");
			
			ОбъектДокумента.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбновлениеВыполнено);
	
КонецПроцедуры

#КонецОбласти



#КонецЕсли