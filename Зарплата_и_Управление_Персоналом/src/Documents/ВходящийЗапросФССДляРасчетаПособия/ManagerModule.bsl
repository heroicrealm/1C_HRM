///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(Страхователь)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не СЭДОФСС.ДоступенОбменЧерезСЭДО()
		Или Не ПравоДоступа("Изменение", Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Требования = ТребованияПоОтправке();
	ФильтрСегодня = Новый Структура("Сегодня", Истина);
	НеобходимоОтправитьРеестровВсего   = Требования.Реестры.Количество();
	НеобходимоОтправитьРеестровСегодня = Требования.Реестры.НайтиСтроки(ФильтрСегодня).Количество();
	НеобходимоПодтвердитьВсего         = Требования.Подтверждения.Количество();
	
	Для Каждого Раздел Из Разделы Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "КритичныеТребованияПоОтправкеИзвещений" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (НеобходимоОтправитьРеестровСегодня > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Сегодня отправить реестры по извещениям ФСС'");
		Дело.Количество     = НеобходимоОтправитьРеестровСегодня;
		Дело.Подсказка      = НСтр("ru = 'После подтверждения получения извещений ФСС необходимо отправить реестр с недостающими сведениями в течении 5 рабочих дней.'");
		Дело.ПараметрыФормы = Новый Структура("ТолькоТребующиеОтправкиСегодня", Истина);
		Дело.Форма          = "Документ.ВходящийЗапросФССДляРасчетаПособия.ФормаСписка";
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ОбычныеТребованияПоОтправкеИзвещений" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (НеобходимоОтправитьРеестровВсего > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Отправить реестры по извещениям ФСС'");
		Дело.Количество     = НеобходимоОтправитьРеестровВсего;
		Дело.Подсказка      = НСтр("ru = 'После подтверждения получения извещений ФСС необходимо отправить реестр с недостающими сведениями в течении 5 рабочих дней.'");
		Дело.ПараметрыФормы = Новый Структура("ТолькоТребующиеОтправки", Истина);
		Дело.Форма          = "Документ.ВходящийЗапросФССДляРасчетаПособия.ФормаСписка";
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ОбычныеТребованияПоПодтверждениюИзвещений" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (НеобходимоПодтвердитьВсего > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Подтвердить получение извещений ФСС'");
		Дело.Количество     = НеобходимоПодтвердитьВсего;
		Дело.Подсказка      = НСтр("ru = 'Необходимо подтвердить получение извещений ФСС в течении 1 рабочего дня.'");
		Дело.ПараметрыФормы = Новый Структура("ТолькоТребующиеПодтверждения", Истина);
		Дело.Форма          = "Документ.ВходящийЗапросФССДляРасчетаПособия.ФормаСписка";
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Заполняет виды извещений ФСС.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьВидИзвещений(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|ГДЕ
	|	ВходящийЗапросФССДляРасчетаПособия.ВидИзвещенияФСС = ЗНАЧЕНИЕ(Перечисление.ВидыИзвещенийФСС.ПустаяСсылка)
	|	И ВходящийЗапросФССДляРасчетаПособия.ВходящийФайл <> ЗНАЧЕНИЕ(Справочник.ВходящийЗапросФССДляРасчетаПособияПрисоединенныеФайлы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИзвещениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИзвещениеОбъект.ВидИзвещенияФСС = Перечисления.ВидыИзвещенийФСС.ИзвещениеОПредставленииНедостающихСведений;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИзвещениеОбъект);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

// Заполняет таблицу ФизическиеЛица.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьТаблицуФизическихЛицИзвещений(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|ГДЕ
	|	ВходящийЗапросФССДляРасчетаПособия.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИзвещениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИзвещениеОбъект.ЗаполнитьТаблицуФизическихЛиц();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИзвещениеОбъект);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "Сотрудник");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ФиксируемыеРеквизиты = ФиксируемыеРеквизиты();
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

#Область МногофункциональныеДокументы

// Возвращает метаданные разделов документа.
//
// Возвращаемое значение:
//   Соответствие, Неопределено - Описание разделов документа.
//
Функция ОписаниеРазделовДанных() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗККлиентСервер");
		ВсеРазделы = Модуль.РазделыДанных();
		
		ОписаниеРазделовДанных = Новый Соответствие();
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.КадровыеДанные, ОписаниеРаздела);
		ОписаниеРаздела.РеквизитСостояние    = "Проведен";
		ОписаниеРаздела.РеквизитОтветсвенный = "Ответственный";
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.НачисленнаяЗарплата, ОписаниеРаздела);
		Возврат ОписаниеРазделовДанных;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает значения по которым будут проверяться права на документ.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Структура - Значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступа(ДокументОбъект) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульМногофункциональныеДокументыБЗК = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗК");
		Возврат МодульМногофункциональныеДокументыБЗК.ЗначенияДоступаПоСоставуДокумента(
			ДокументОбъект,
			ДокументОбъект.Организация);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ВводНаОсновании

// Формирует структуру данных для заполнения документа "Больничный лист".
//
// Параметры:
//   Ссылка - ДокументСсылка.ВходящийЗапросФССДляРасчетаПособия
//
Функция ДанныеДляЗаполненияБольничного(Ссылка) Экспорт
	ИменаРеквизитов = "Организация, Сотрудник, ФизическоеЛицо, НомерЛН";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	ЗначенияРеквизитов.Вставить("НомерЛисткаНетрудоспособности", ЗначенияРеквизитов.НомерЛН);
	Возврат ЗначенияРеквизитов;
КонецФункции

#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// При помощи механизмов фиксации описываются только механизмы обновления вторичных данных.
	// Механизмы заполнения первичных данных при этом могут существенно отличаться.
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "ПодтверждениеПолучения";
	Шаблон.ОснованиеЗаполнения = "ИдентификаторСообщения";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТребуетсяПодтверждение");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаОтправкиПодтверждения");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПодтверждениеПолученоФСС");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "МаксимальнаяДатаПодтверждения";
	Шаблон.ОснованиеЗаполнения = "ВходящаяДата";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "МаксимальнаяДатаПодтверждения");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "МаксимальнаяДатаОтправкиРеестра";
	Шаблон.ОснованиеЗаполнения = "ДатаОтправкиПодтверждения";
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "МаксимальнаяДатаОтправкиРеестра");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ВходящийРеестр";
	Шаблон.ОснованиеЗаполнения      = "ВходящийРеестр";
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Организация");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Сотрудник");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ВходящееЗаявлениеПервичныйДокумент";
	Шаблон.ОснованиеЗаполнения      = "ВходящийРеестр";
	Шаблон.ФиксацияГруппы           = Истина;
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящееЗаявление");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВходящийПервичныйДокумент");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ВходящийПервичныйДокумент";
	Шаблон.ОснованиеЗаполнения      = "ВходящийПервичныйДокумент";
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИсходящийПервичныйДокумент");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ИсходящийПервичныйДокумент";
	Шаблон.ОснованиеЗаполнения      = "ИсходящийПервичныйДокумент";
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИсходящееЗаявление");
	
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы                = "ИсходящееЗаявление";
	Шаблон.ОснованиеЗаполнения      = "ИсходящееЗаявление";
	Шаблон.ОтображатьПредупреждение = Ложь;
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИсходящийРеестр");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Обработано");
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

#Область СЭДО

Процедура ЗагрузитьУведомлениеОНаличииСообщения100(Страхователь, ИдентификаторСообщения, ТребуетсяПодтверждение) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		// Поиск документа по идентификатору сообщения.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗапросСведений.Ссылка КАК Ссылка,
		|	ЗапросСведений.Дата КАК Дата,
		|	ЗапросСведений.ПометкаУдаления КАК ПометкаУдаления,
		|	ЗапросСведений.Организация КАК Организация,
		|	ЗапросСведений.Страхователь КАК Страхователь,
		|	ЗапросСведений.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
		|ИЗ
		|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ЗапросСведений
		|ГДЕ
		|	ЗапросСведений.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Страхователь = Страхователь
				И Не Выборка.ПометкаУдаления
				И ТребуетсяПодтверждение = Выборка.ТребуетсяПодтверждение Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.ВходящийЗапросФССДляРасчетаПособия.СоздатьДокумент();
		КонецЕсли;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.Организация = Страхователь;
		КонецЕсли;
		ДокументОбъект.Страхователь           = Страхователь;
		ДокументОбъект.ИдентификаторСообщения = ИдентификаторСообщения;
		ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
		ДокументОбъект.ЗаполнитьДату();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке уведомления о наличии входящего запроса сведений для расчета пособия ФСС %1 возникла ошибка: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьСообщение100(Страхователь, ИдентификаторСообщения, ТекстXML, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'confirmationRequest']");
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'socialAssistNum']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'benefit1Approve']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'benefit2Approve']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'benefit4Approve']/..");
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		КореньDOM = СтруктураDOM.ДокументDOM;
	КонецЕсли;
	Если КореньDOM = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В xml-содержимом сообщения не удалось найти узел ""confirmationRequest"". Текст XML: %1'"), ТекстXML);
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Подготовка структуры документа.
	Документ = Новый Структура;
	Документ.Вставить("Страхователь", Страхователь);
	Документ.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	Документ.Вставить("Загружен", Истина);
	Документ.Вставить("СотрудникСНИЛС", "");
	Документ.Вставить("СотрудникФамилия", "");
	Документ.Вставить("СотрудникИмя", "");
	Документ.Вставить("СотрудникОтчество", "");
	Документ.Вставить("ТекстОшибки", "");
	
	// Чтение реквизитов XML.
	РеквизитыКорня = УзлыЭлементаDOM(КореньDOM, "socialAssistNum, benefit1Approve, benefit2Approve, benefit4Approve");
	
	Попытка
		// Чтение реквизитов XML.
		Документ.Вставить("НомерПроцесса", СериализацияБЗК.ЗначениеXML(РеквизитыКорня.socialAssistNum, Тип("Число")));
		Если ТипЗнч(РеквизитыКорня.benefit1Approve) = Тип("ЭлементDOM") Тогда
			Документ.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности);
			ЗаполнитьРеквизитыСообщения100(Документ, РеквизитыКорня.benefit1Approve);
		КонецЕсли;
		Если ТипЗнч(РеквизитыКорня.benefit2Approve) = Тип("ЭлементDOM") Тогда
			Документ.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам);
			ЗаполнитьРеквизитыСообщения100(Документ, РеквизитыКорня.benefit2Approve);
		КонецЕсли;
		Если ТипЗнч(РеквизитыКорня.benefit4Approve) = Тип("ЭлементDOM") Тогда
			Документ.Вставить("ВидПособия", Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком);
			ЗаполнитьРеквизитыСообщения100(Документ, РеквизитыКорня.benefit4Approve);
		КонецЕсли;
		ЗаполнитьФизическоеЛицоИСотрудника(Документ);
		ЗаполнитьКартуМИР(Документ);
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При чтении XML-содержимого входящего запроса сведений для расчета пособия %1 возникла ошибка: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Попытка
		ЗаполнитьСвойстваРеквизитов(Документ, СтруктураDOM);
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При заполнении свойств реквизитов входящего запроса сведений для расчета пособия %1 возникла ошибка: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	
	// Поиск документа по идентификатору сообщения.
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
		|	ВходящийЗапросФССДляРасчетаПособия.Дата КАК Дата,
		|	ВходящийЗапросФССДляРасчетаПособия.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
		|ГДЕ
		|	ВходящийЗапросФССДляРасчетаПособия.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПометкаУдаления,
		|	Дата УБЫВ";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.ВходящийЗапросФССДляРасчетаПособия.СоздатьДокумент();
		КонецЕсли;
		
		ЕстьИзменения = Не ДокументОбъект.Проведен;
		
		Для Каждого КлючИЗначение Из Документ Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
				ЗначениеДоИзменения = ДокументОбъект[КлючИЗначение.Ключ].Выгрузить();
				ДокументОбъект[КлючИЗначение.Ключ].Загрузить(КлючИЗначение.Значение);
				ЗначениеПослеизменения = ДокументОбъект[КлючИЗначение.Ключ].Выгрузить();
				Если Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(ЗначениеДоИзменения, ЗначениеПослеизменения) Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;
			Иначе
				ЗначениеДоИзменения = ДокументОбъект[КлючИЗначение.Ключ];
				ДокументОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				Если ЗначениеДоИзменения <> ДокументОбъект[КлючИЗначение.Ключ] Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке XML-содержимого Извещения ФСС %1 возникла ошибка: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	Результат.Обработано = Истина;
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСообщения100(Документ, ЭлементDOM) Экспорт
	ИменаПолей = "elnInfo, insurerInfo, insuredInfo, receivePayment,
	|calculationData, notice, vacation, wardInfo, refFamilyInfo, birthInfo, refNpayOther, otherMissing";
	Реквизиты = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	
	Если Реквизиты.elnInfo <> Неопределено Тогда
		НомерЛН = ЗначениеXMLТипаСтрока(УзлыЭлементаDOM(Реквизиты.elnInfo, "code").code);
		Если ТипЗнч(НомерЛН) = Тип("Строка") И ЗначениеЗаполнено(НомерЛН) Тогда
			Документ.Вставить("НомерЛН", НомерЛН);
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.insurerInfo <> Неопределено Тогда
		ИменаПолей = "regNum, partTime, parentNo";
		СтраховательDOM = УзлыЭлементаDOM(Реквизиты.insurerInfo, ИменаПолей);
		ЗагрузитьСведенияОСтрахователе(Документ, СтраховательDOM);
	КонецЕсли;
	
	Если Реквизиты.insuredInfo <> Неопределено Тогда
		ЗагрузитьСведенияОСотруднике(Документ, Реквизиты.insuredInfo);
	КонецЕсли;
	
	Если Реквизиты.receivePayment <> Неопределено Тогда
		ИменаПолей = "bankInfo, cardMir, otherFinOrg, currentAddress, currentAddressFias";
		СпособВыплаты = УзлыЭлементаDOM(Реквизиты.receivePayment, ИменаПолей);
		ЗагрузитьСпособВыплаты(Документ, СпособВыплаты);
	КонецЕсли;
	
	Если Реквизиты.calculationData <> Неопределено Тогда
		ИменаПолей = "baseCalcDays, years, kfReg, kfShotDays, experience, calcConditionList,
		|causeRadiation, payPeriodFSS, notice, excludePeriodList, downPeriodList";
		Расчет = УзлыЭлементаDOM(Реквизиты.calculationData, ИменаПолей);
		ЗагрузитьДанныеДляРасчета(Документ, Расчет);
	КонецЕсли;
	
	Если Реквизиты.notice <> Неопределено Тогда
		ЗагрузитьДанныеИзвещения(Документ, Реквизиты.notice);
	КонецЕсли;
	
	Если Реквизиты.vacation <> Неопределено Тогда
		ИменаПолей = "num, issueDate, beginDate, endDate";
		ОтпускПоУходуDOM = УзлыЭлементаDOM(Реквизиты.vacation, ИменаПолей);
		ЗагрузитьОтпускПоУходу(Документ, ОтпускПоУходуDOM);
	КонецЕсли;
	
	Если Реквизиты.wardInfo <> Неопределено Тогда
		ИменаПолей = "type, num, issueDate";
		УсыновлениеОпекаDOM = УзлыЭлементаDOM(Реквизиты.wardInfo, ИменаПолей);
		ЗагрузитьРешениеОбУсыновленииОпеке(Документ, УсыновлениеОпекаDOM);
	КонецЕсли;
	
	Если Реквизиты.refFamilyInfo <> Неопределено Тогда
		ИменаПолей = "num, issueDate";
		ПередачаНаВоспитаниеDOM = УзлыЭлементаDOM(Реквизиты.refFamilyInfo, ИменаПолей);
		ЗагрузитьДоговорПередачиНаВоспитание(Документ, ПередачаНаВоспитаниеDOM);
	КонецЕсли;
	
	Если Реквизиты.birthInfo <> Неопределено Тогда
		ИменаПолей = "zagsAct, otherDoc, birthDate, fullName, snils";
		ИнформацияОРожденииDOM = УзлыЭлементаDOM(Реквизиты.birthInfo, ИменаПолей);
		ЗагрузитьИнформациюОРождении(Документ, ИнформацияОРожденииDOM);
	КонецЕсли;
	
	Если Реквизиты.refNpayOther <> Неопределено Тогда
		ИменаПолей = "num, issueDate";
		СправкаОтДругогоРодителяDOM = УзлыЭлементаDOM(Реквизиты.refNpayOther, ИменаПолей);
		ЗагрузитьСправкуОтДругогоРодителя(Документ, СправкаОтДругогоРодителяDOM);
	КонецЕсли;
	
	Если Реквизиты.otherMissing <> Неопределено Тогда
		Документ.Вставить("ДругойРодительОтсутствует", СериализацияБЗК.ЗначениеXML(Реквизиты.otherMissing, Тип("Булево")));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСведенияОСтрахователе(Документ, СтраховательDOM)
	Документ.Вставить("РегистрационныйНомерФСС", ЗначениеXMLТипаСтрока(СтраховательDOM.regNum));
	Документ.Вставить("КодПодчиненностиФСС", ЗначениеXMLТипаСтрока(СтраховательDOM.parentNo));
	partTime = ЗначениеXMLТипаСтрока(СтраховательDOM.partTime);
	Документ.Вставить("ВнешнееСовместительство", СтрСравнить(partTime, "OUTER") = 0);
КонецПроцедуры

Процедура ЗагрузитьСведенияОСотруднике(Документ, ЭлементDOM)
	ИменаПолей = "category, snils, inn, fullName, birthDate, gender,
	|taxpayer, id,
	|residenceDocument, residenceDocumentType,
	|workContract,
	|address, regAddress,
	|otherInfo";
	СотрудникDOM = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	
	Если СотрудникDOM.category <> Неопределено Тогда
		Документ.Вставить("СотрудникКатегория", ЗначениеXMLТипаСтрока(СотрудникDOM.category));
	КонецЕсли;
	
	Документ.Вставить("СотрудникСНИЛС", ЗначениеXMLТипаСНИЛС(СотрудникDOM.snils));
	Документ.Вставить("СотрудникИНН",   ЗначениеXMLТипаСтрока(СотрудникDOM.inn));
	
	ИменаПолей = "firstName,lastName,middleName";
	ФИО = УзлыЭлементаDOM(СотрудникDOM.fullName, ИменаПолей);
	Документ.Вставить("СотрудникИмя",      ЗначениеXMLТипаСтрока(ФИО.firstName));
	Документ.Вставить("СотрудникОтчество", ЗначениеXMLТипаСтрока(ФИО.middleName));
	Документ.Вставить("СотрудникФамилия",  ЗначениеXMLТипаСтрока(ФИО.lastName));
	
	Документ.Вставить("СотрудникДатаРождения", ЗначениеXMLТипаДата(СотрудникDOM.birthDate));
	
	Пол = ВРег(СокрЛП(ЗначениеXMLТипаСтрока(СотрудникDOM.gender)));
	Если Пол = "MALE" Тогда
		Документ.Вставить("СотрудникПол", Перечисления.ПолФизическогоЛица.Мужской);
	ИначеЕсли Пол = "FEMALE" Тогда
		Документ.Вставить("СотрудникПол", Перечисления.ПолФизическогоЛица.Женский);
	Иначе
		Документ.Вставить("СотрудникПол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	КонецЕсли;
	
	Если ТипЗнч(СотрудникDOM.taxpayer) = Тип("ЭлементDOM") Тогда
		ИменаПолей = "taxpayerStatus, countryCode";
		СведенияDOM = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
		
		Если СведенияDOM.taxpayerStatus <> Неопределено Тогда
			Документ.Вставить("КодСтатусаНалогоплательщика", ЗначениеXMLТипаСтрока(СведенияDOM.taxpayerStatus));
		КонецЕсли;
		
		Если СведенияDOM.countryCode <> Неопределено Тогда
			Документ.Вставить("КодСтраныГражданства", ЗначениеXMLТипаСтрока(СведенияDOM.countryCode));
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьАдрес(Документ, "АдресРегистрации", СотрудникDOM.taxpayer, "address", "foreignAddress");
	
	Если СотрудникDOM.id <> Неопределено Тогда
		ЗагрузитьУдостоверениеЛичности(Документ, СотрудникDOM.id);
	КонецЕсли;
	
	Если СотрудникDOM.workContract <> Неопределено Тогда
		ИменаПолей = "begin,end";
		ТрудовойДоговорDOM = УзлыЭлементаDOM(СотрудникDOM.workContract, ИменаПолей);
		Документ.Вставить("ТрудовойДоговорДатаНачала",    ЗначениеXMLТипаДата(ТрудовойДоговорDOM.begin));
		Документ.Вставить("ТрудовойДоговорДатаОкончания", ЗначениеXMLТипаДата(ТрудовойДоговорDOM.end));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьУдостоверениеЛичности(Документ, ЭлементDOM)
	
	// См. тип IdType пространства имен "http://www.fss.ru/integration/types/person/v02".
	ИменаПолей = "type, series, num, issueDate, dept, endDate";
	Паспорт = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	КодМВД       = ЗначениеXMLТипаСтрока(Паспорт.type);
	Серия        = ЗначениеXMLТипаСтрока(Паспорт.series);
	Номер        = ЗначениеXMLТипаСтрока(Паспорт.num);
	ДатаВыдачи   = ЗначениеXMLТипаДата(Паспорт.issueDate);
	КемВыдан     = ЗначениеXMLТипаСтрока(Паспорт.dept);
	СрокДействия = ЗначениеXMLТипаДата(Паспорт.endDate);
	Если ЗначениеЗаполнено(КодМВД) Тогда
		Вид = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", КодМВД);
		Документ.Вставить("УдостоверениеЛичностиВидКодМВД", КодМВД);
		Документ.Вставить("УдостоверениеЛичностиВид",       Вид);
	КонецЕсли;
	Если ЗначениеЗаполнено(Серия) Тогда
		Документ.Вставить("УдостоверениеЛичностиСерия",        Серия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Номер) Тогда
		Документ.Вставить("УдостоверениеЛичностиНомер",        Номер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаВыдачи) Тогда
		Документ.Вставить("УдостоверениеЛичностиДатаВыдачи",   ДатаВыдачи);
	КонецЕсли;
	Если ЗначениеЗаполнено(КемВыдан) Тогда
		Документ.Вставить("УдостоверениеЛичностиКемВыдан",     КемВыдан);
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокДействия) Тогда
		Документ.Вставить("УдостоверениеЛичностиСрокДействия", СрокДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСпособВыплаты(Документ, СпособВыплаты)
	
	Если ТипЗнч(СпособВыплаты.bankInfo) = Тип("ЭлементDOM") Тогда
		ИменаПолей = "bankName,bik,corAccNum,accountNum";
		БанкDOM = УзлыЭлементаDOM(СпособВыплаты.bankInfo, ИменаПолей);
		Документ.Вставить("БанкНаименование", ЗначениеXMLТипаСтрока(БанкDOM.bankName));
		Документ.Вставить("БанкБИК",          ЗначениеXMLТипаСтрока(БанкDOM.bik));
		Документ.Вставить("БанкКоррСчет",     ЗначениеXMLТипаСтрока(БанкDOM.corAccNum));
		Документ.Вставить("НомерСчета",       ЗначениеXMLТипаСтрока(БанкDOM.accountNum));
		Документ.Вставить("Банк",             НайтиБанкПоБИК(Документ.БанкБИК, Документ.БанкКоррСчет));
		Если ЗначениеЗаполнено(Документ.БанкБИК) И ЗначениеЗаполнено(Документ.НомерСчета) Тогда
			Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.ЧерезБанк);
		КонецЕсли;
	КонецЕсли;
	
	Если СпособВыплаты.cardMir <> Неопределено Тогда
		НомерКартыМИР = ЗначениеXMLТипаСтрока(СпособВыплаты.cardMir);
		Если ЗначениеЗаполнено(НомерКартыМИР) Тогда
			РезультатПроверки = ПроверкиБЗККлиентСервер.РезультатПроверкиНомераКарты(НомерКартыМИР, Истина);
			Если РезультатПроверки.Успех Тогда
				Документ.Вставить("НомерКартыМИР", НомерКартыМИР);
			Иначе
				СообщенияБЗК.СообщитьОПроблеме(РезультатПроверки.Текст);
			КонецЕсли;
			Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.НаКартуМИР);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СпособВыплаты.otherFinOrg) = Тип("ЭлементDOM") Тогда
		ИменаПолей = "name,bik,inn";
		ИнаяОрганизацияDOM = УзлыЭлементаDOM(СпособВыплаты.otherFinOrg, ИменаПолей);
		Документ.Вставить("ИнаяОрганизацияНаименование", ЗначениеXMLТипаСтрока(ИнаяОрганизацияDOM.name));
		Документ.Вставить("ИнаяОрганизацияБИК",          ЗначениеXMLТипаСтрока(ИнаяОрганизацияDOM.bik));
		Документ.Вставить("ИнаяОрганизацияИНН",          ЗначениеXMLТипаСтрока(ИнаяОрганизацияDOM.inn));
		Если ЗначениеЗаполнено(Документ.ИнаяОрганизацияБИК) Или ЗначениеЗаполнено(Документ.ИнаяОрганизацияИНН) Тогда
			Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.ИнаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагрузитьАдрес(Документ, "АдресПроживания", СпособВыплаты, "currentFiasAddress") Тогда
		Документ.Вставить("СпособВыплатыПособия", Перечисления.СпособыВыплатыПособия.ПочтовымПереводом);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиБанкПоБИК(БИК, КоррСчет = "")
	Если Не ЗначениеЗаполнено(БИК) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаБанков = РаботаСБанками.СведенияБИК(БИК);
	
	Количество = ТаблицаБанков.Количество();
	Если Количество = 0 Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Количество > 1 Тогда
		
		Если ЗначениеЗаполнено(КоррСчет) Тогда
			Копия = ТаблицаБанков.Скопировать(Новый Структура("КоррСчет", КоррСчет));
			Копия.Сортировать("ДеятельностьПрекращена Возр");
			Если Копия.Количество() > 0 Тогда
				Возврат Копия[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаБанков.Сортировать("ДеятельностьПрекращена Возр");
		
	КонецЕсли;
	
	Возврат ТаблицаБанков[0].Ссылка;
КонецФункции

Процедура ЗагрузитьПричинуЛьгот(Документ, ПричинаЛьготDOM)
	
	Менеджер = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом;
	ПричинаПредоставленияЛьготыСтрокой = ЗначениеXMLТипаСтрока(ПричинаЛьготDOM);
	Если ПричинаПредоставленияЛьготыСтрокой = "1" Тогда
		Документ.Вставить("ПричинаПредоставленияЛьготы", Менеджер.Чернобыль);
	ИначеЕсли ПричинаПредоставленияЛьготыСтрокой = "2" Тогда
		Документ.Вставить("ПричинаПредоставленияЛьготы", Менеджер.Семипалатинск);
	ИначеЕсли ПричинаПредоставленияЛьготыСтрокой = "3" Тогда
		Документ.Вставить("ПричинаПредоставленияЛьготы", Менеджер.Маяк);
	ИначеЕсли ПричинаПредоставленияЛьготыСтрокой = "4" Тогда
		Документ.Вставить("ПричинаПредоставленияЛьготы", Менеджер.ПодразделенияОсобогоРиска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеДляРасчета(Документ, Расчет)
	
	Документ.Вставить("КалендарныхДнейРасчетногоПериода", ЗначениеXMLТипаЧисло(Расчет.baseCalcDays));
	
	Если Расчет.years <> Неопределено Тогда
		ТекстОшибки = "";
		НомерГода = 0;
		Для Каждого ГодDOM Из Расчет.years.ДочерниеУзлы Цикл
			Если ГодDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыГодаDOM = УзлыЭлементаDOM(ГодDOM, "calc, baseSum");
			НомерГода = НомерГода + 1;
			Если НомерГода = 1 Тогда
				Документ.Вставить("ПервыйРасчетныйГод", ЗначениеXMLТипаЧисло(РеквизитыГодаDOM.calc));
				Документ.Вставить("ПервыйРасчетныйГодЗаработок", ЗначениеXMLТипаЧисло(РеквизитыГодаDOM.baseSum));
			ИначеЕсли НомерГода = 2 Тогда
				Документ.Вставить("ВторойРасчетныйГод", ЗначениеXMLТипаЧисло(РеквизитыГодаDOM.calc));
				Документ.Вставить("ВторойРасчетныйГодЗаработок", ЗначениеXMLТипаЧисло(РеквизитыГодаDOM.baseSum));
			Иначе
				ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(
					НСтр("ru = '- Расчетный период № %1: год ""%2"", заработок ""%3""'"),
					НомерГода,
					ЗначениеXMLТипаСтрока(РеквизитыГодаDOM.calc),
					ЗначениеXMLТипаСтрока(РеквизитыГодаDOM.baseSum));
			КонецЕсли;
		КонецЦикла;
		Если ТекстОшибки <> "" Тогда
			ТекстОшибки = НСтр("ru = 'Более двух расчетных периодов:'") + ТекстОшибки;
			Документ.ТекстОшибки = Документ.ТекстОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Документ.Вставить("РайонныйКоэффициент", ЗначениеXMLТипаЧисло(Расчет.kfReg));
	
	Документ.Вставить("ДоляВремени", ЗначениеXMLТипаЧисло(Расчет.kfShotDays));
	
	Если Расчет.experience <> Неопределено Тогда
		ИменаПолей = "insurYY, insurMM, notInsurYY, notInsurMM";
		СтажDOM = УзлыЭлементаDOM(Расчет.experience, ИменаПолей);
		Документ.Вставить("СтраховойСтажЛет",       ЗначениеXMLТипаЧисло(СтажDOM.insurYY));
		Документ.Вставить("СтраховойСтажМесяцев",   ЗначениеXMLТипаЧисло(СтажDOM.insurMM));
		Документ.Вставить("НестраховойСтажЛет",     ЗначениеXMLТипаЧисло(СтажDOM.notInsurYY));
		Документ.Вставить("НестраховойСтажМесяцев", ЗначениеXMLТипаЧисло(СтажDOM.notInsurMM));
	КонецЕсли;
	
	Если Расчет.calcConditionList <> Неопределено Тогда
		ТекстОшибки = "";
		Номер = 0;
		Для Каждого УсловиеИсчисленияDOM Из Расчет.calcConditionList.ДочерниеУзлы Цикл
			Если УсловиеИсчисленияDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			Номер = Номер + 1;
			Если Номер < 4 Тогда
				Документ.Вставить("УсловияИсчисленияКод" + Номер, ЗначениеXMLТипаСтрока(УсловиеИсчисленияDOM));
			Иначе
				ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(
					НСтр("ru = '- Условие исчисления № %1: ""%2""'"),
					Номер,
					ЗначениеXMLТипаСтрока(УсловиеИсчисленияDOM));
			КонецЕсли;
		КонецЦикла;
		Если ТекстОшибки <> "" Тогда
			ТекстОшибки = НСтр("ru = 'Более трех условий исчисления:'") + ТекстОшибки;
			Документ.ТекстОшибки = Документ.ТекстОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если Расчет.causeRadiation <> Неопределено Тогда
		ЗагрузитьПричинуЛьгот(Документ, Расчет.causeRadiation);
	КонецЕсли;
	
	Если Расчет.payPeriodFSS <> Неопределено Тогда
		ПериодDOM = УзлыЭлементаDOM(Расчет.payPeriodFSS, "begin, end");
		Документ.Вставить("ОплатаФССДатаНачала",    ЗначениеXMLТипаДата(ПериодDOM.begin));
		Документ.Вставить("ОплатаФССДатаОкончания", ЗначениеXMLТипаДата(ПериодDOM.end));
	КонецЕсли;
	
	Если Расчет.notice <> Неопределено Тогда
		ЗагрузитьДанныеИзвещения(Документ, Расчет.notice);
	КонецЕсли;
	
	Если Расчет.excludePeriodList <> Неопределено Тогда
		ИсключаемыеПериоды = Новый ТаблицаЗначений;
		ИсключаемыеПериоды.Колонки.Добавить("КодПричины",    Новый ОписаниеТипов("Строка"));
		ИсключаемыеПериоды.Колонки.Добавить("ДатаНачала",    Новый ОписаниеТипов("Дата"));
		ИсключаемыеПериоды.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		Для Каждого ИсключаемыйПериодDOM Из Расчет.excludePeriodList.ДочерниеУзлы Цикл
			Если ИсключаемыйПериодDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			ИсключаемыйПериод = УзлыЭлементаDOM(ИсключаемыйПериодDOM, "type, period");
			Если ИсключаемыйПериод.period = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Период = УзлыЭлементаDOM(ИсключаемыйПериод.period, "begin, end");
			Строка = ИсключаемыеПериоды.Добавить();
			Строка.КодПричины    = ЗначениеXMLТипаСтрока(ИсключаемыйПериод.type);
			Строка.ДатаНачала    = ЗначениеXMLТипаДата(Период.begin);
			Строка.ДатаОкончания = ЗначениеXMLТипаДата(Период.end);
		КонецЦикла;
		Документ.Вставить("ИсключаемыеПериоды", ИсключаемыеПериоды);
	КонецЕсли;
	
	Если Расчет.downPeriodList <> Неопределено Тогда
		ПериодыПростоя = Новый ТаблицаЗначений;
		ПериодыПростоя.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ПериодыПростоя.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		ПериодыПростоя.Колонки.Добавить("СреднийЗаработок", Новый ОписаниеТипов("Число"));
		Для Каждого ПериодПростояDOM Из Расчет.downPeriodList.ДочерниеУзлы Цикл
			Если ПериодПростояDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			ПериодПростоя = УзлыЭлементаDOM(ПериодПростояDOM, "period, idleAverage");
			Если ПериодПростоя.period = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Период = УзлыЭлементаDOM(ПериодПростоя.period, "begin, end");
			Строка = ПериодыПростоя.Добавить();
			Строка.СреднийЗаработок = ЗначениеXMLТипаЧисло(ПериодПростоя.idleAverage);
			Строка.ДатаНачала       = ЗначениеXMLТипаДата(Период.begin);
			Строка.ДатаОкончания    = ЗначениеXMLТипаДата(Период.end);
		КонецЦикла;
		Документ.Вставить("ПериодыПростоя", ПериодыПростоя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеИзвещения(Документ, ИзвещениеXTDO)
	СвойстваИзвещенияDOM = УзлыЭлементаDOM(ИзвещениеXTDO, "num, date");
	Документ.Вставить("ИзвещениеФССНомер", ЗначениеXMLТипаСтрока(СвойстваИзвещенияDOM.num));
	Документ.Вставить("ИзвещениеФССДата",  ЗначениеXMLТипаДата(СвойстваИзвещенияDOM.date));
КонецПроцедуры

Процедура ЗагрузитьОтпускПоУходу(Документ, ОтпускПоУходуDOM)
	Документ.Вставить("ОтпускПоУходуНомер",         ЗначениеXMLТипаСтрока(ОтпускПоУходуDOM.num));
	Документ.Вставить("ОтпускПоУходуДата",          ЗначениеXMLТипаДата(ОтпускПоУходуDOM.issueDate));
	Документ.Вставить("ОтпускПоУходуДатаНачала",    ЗначениеXMLТипаДата(ОтпускПоУходуDOM.beginDate));
	Документ.Вставить("ОтпускПоУходуДатаОкончания", ЗначениеXMLТипаДата(ОтпускПоУходуDOM.endDate));
КонецПроцедуры

Процедура ЗагрузитьРешениеОбУсыновленииОпеке(Документ, УсыновлениеОпекаDOM)
	Документ.Вставить("УсыновлениеОпекаТип",   ЗначениеXMLТипаСтрока(УсыновлениеОпекаDOM.type));
	Документ.Вставить("УсыновлениеОпекаНомер", ЗначениеXMLТипаСтрока(УсыновлениеОпекаDOM.num));
	Документ.Вставить("УсыновлениеОпекаДата",  ЗначениеXMLТипаДата(УсыновлениеОпекаDOM.issueDate));
КонецПроцедуры

Процедура ЗагрузитьДоговорПередачиНаВоспитание(Документ, ПередачаНаВоспитаниеDOM)
	Документ.Вставить("ПередачаНаВоспитаниеНомер", ЗначениеXMLТипаСтрока(ПередачаНаВоспитаниеDOM.num));
	Документ.Вставить("ПередачаНаВоспитаниеДата",  ЗначениеXMLТипаДата(ПередачаНаВоспитаниеDOM.issueDate));
КонецПроцедуры

Процедура ЗагрузитьИнформациюОРождении(Документ, ИнформацияDOM)
	
	Если ИнформацияDOM.zagsAct <> Неопределено Тогда
		ИменаПолей = "num, issueDate, cert";
		АктDOM = УзлыЭлементаDOM(ИнформацияDOM.zagsAct, ИменаПолей);
		Если АктDOM.num <> Неопределено Тогда
			Документ.Вставить("АктоваяЗаписьОРожденииНомер", ЗначениеXMLТипаСтрока(АктDOM.num));
		КонецЕсли;
		Если АктDOM.issueDate <> Неопределено Тогда
			Документ.Вставить("АктоваяЗаписьОРожденииДата", ЗначениеXMLТипаДата(АктDOM.issueDate));
		КонецЕсли;
		Если АктDOM.cert <> Неопределено Тогда
			ЗагрузитьСвидетельствоОРождении(Документ, АктDOM.cert);
		КонецЕсли;
	КонецЕсли;
	
	Если ИнформацияDOM.otherDoc <> Неопределено Тогда
		ИменаПолей = "num, issueDate, cert";
		ИнойДокументDOM = УзлыЭлементаDOM(ИнформацияDOM.otherDoc, ИменаПолей);
		Если ИнойДокументDOM.num <> Неопределено Тогда
			Документ.Вставить("ИнойДокументОРожденииСерияНомер", ЗначениеXMLТипаСтрока(ИнойДокументDOM.num));
		КонецЕсли;
		Если ИнойДокументDOM.issueDate <> Неопределено Тогда
			Документ.Вставить("ИнойДокументОРожденииДатаВыдачи", ЗначениеXMLТипаДата(ИнойДокументDOM.issueDate));
		КонецЕсли;
		Если ИнойДокументDOM.cert <> Неопределено Тогда
			ЗагрузитьСвидетельствоОРождении(Документ, ИнойДокументDOM.cert);
		КонецЕсли;
	КонецЕсли;
	
	Документ.Вставить("РебенокДатаРождения", ЗначениеXMLТипаДата(ИнформацияDOM.birthDate));
	
	ИменаПолей = "firstName, lastName, middleName";
	ФИО = УзлыЭлементаDOM(ИнформацияDOM.fullName, ИменаПолей);
	Документ.Вставить("РебенокИмя",      ЗначениеXMLТипаСтрока(ФИО.firstName));
	Документ.Вставить("РебенокОтчество", ЗначениеXMLТипаСтрока(ФИО.middleName));
	Документ.Вставить("РебенокФамилия",  ЗначениеXMLТипаСтрока(ФИО.lastName));
	
	Документ.Вставить("РебенокСНИЛС", ЗначениеXMLТипаСНИЛС(ИнформацияDOM.snils));
	
КонецПроцедуры

Процедура ЗагрузитьСвидетельствоОРождении(Документ, ЭлементDOM)
	ИменаПолей = "num, issueDate";
	СвидетельствоDOM = УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	Если СвидетельствоDOM.num <> Неопределено Тогда
		Документ.Вставить("СвидетельствоОРожденииСерияНомер", ЗначениеXMLТипаСтрока(СвидетельствоDOM.num));
	КонецЕсли;
	Если СвидетельствоDOM.issueDate <> Неопределено Тогда
		Документ.Вставить("СвидетельствоОРожденииДатаВыдачи", ЗначениеXMLТипаДата(СвидетельствоDOM.issueDate));
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьСправкуОтДругогоРодителя(Документ, СправкаОтДругогоРодителяDOM)
	Документ.Вставить("СправкаОтДругогоРодителяНомер", ЗначениеXMLТипаСтрока(СправкаОтДругогоРодителяDOM.num));
	Документ.Вставить("СправкаОтДругогоРодителяДата",  ЗначениеXMLТипаДата(СправкаОтДругогоРодителяDOM.issueDate));
КонецПроцедуры

Функция ЗагрузитьАдрес(Документ, Префикс, Родитель, ИмяОбъектаАдреса, ИмяПоляЗаПределамиРФ = "")
	Если Родитель = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПоляИндекс = "postalCode";
	ИменаПолей = ИмяОбъектаАдреса + "," + ИмяПоляИндекс + ?(ИмяПоляЗаПределамиРФ = "", "", "," + ИмяПоляЗаПределамиРФ);
	Реквизиты = ОбщегоНазначенияБЗК.ЗначенияСвойств(Родитель, ИменаПолей);
	
	ОбъектАдресаDOM = Реквизиты[ИмяОбъектаАдреса];
	Если ОбъектАдресаDOM = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// См. тип "AddressFiasType" пространства имен "http://www.fss.ru/integration/types/common/v01".
	ИменаПолей = "houseGuid, guid, house, building, flat";
	АдресФИАСDOM = УзлыЭлементаDOM(ОбъектАдресаDOM, ИменаПолей);
	Документ.Вставить(Префикс + "ФИАСДом",  ЗначениеXMLТипаСтрока(АдресФИАСDOM.houseGuid));
	Документ.Вставить(Префикс + "ФИАСРО",   ЗначениеXMLТипаСтрока(АдресФИАСDOM.guid));
	Документ.Вставить(Префикс + "Дом",      ЗначениеXMLТипаСтрока(АдресФИАСDOM.house));
	Документ.Вставить(Префикс + "Корпус",   ЗначениеXMLТипаСтрока(АдресФИАСDOM.building));
	Документ.Вставить(Префикс + "Квартира", ЗначениеXMLТипаСтрока(АдресФИАСDOM.flat));
	
	Документ.Вставить(Префикс + "Индекс", ЗначениеXMLТипаСтрока(Реквизиты[ИмяПоляИндекс]));
	
	Если ИмяПоляЗаПределамиРФ <> "" Тогда
		Документ.Вставить(Префикс + "ЗаПределамиРФ", ЗначениеXMLТипаСтрока(Реквизиты[ИмяПоляЗаПределамиРФ]));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ[Префикс + "ФИАСДом"]) Тогда
		Идентификатор = Документ[Префикс + "ФИАСДом"];
		ЭтоИдентификаторДома = Истина;
	ИначеЕсли ЗначениеЗаполнено(Документ[Префикс + "ФИАСРО"]) Тогда
		Идентификатор = Документ[Префикс + "ФИАСРО"];
		ЭтоИдентификаторДома = Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеАдреса = НайтиАдресПоСведенияОЗастрахованномЛицеФСС(Документ, Префикс, Идентификатор, ЭтоИдентификаторДома);
	Документ.Вставить(Префикс, ЗначениеАдреса);
	Возврат Истина;
КонецФункции

Функция НайтиАдресПоСведенияОЗастрахованномЛицеФСС(Документ, Префикс, Идентификатор, ЭтоИдентификаторДома)
	Если Не ЗначениеЗаполнено(Документ.СотрудникСНИЛС) Или Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗастрахованномЛицеФСС.Дата КАК Дата,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживания КАК ЗначениеАдреса,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживанияИндекс КАК Индекс,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживанияДом КАК Дом,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживанияКорпус КАК Корпус,
	|	СведенияОЗастрахованномЛицеФСС.АдресПроживанияКвартира КАК Квартира
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.СНИЛС = &СНИЛС
	|	И СведенияОЗастрахованномЛицеФСС.АдресПроживанияФИАСДом = &Идентификатор
	|	И НЕ СведенияОЗастрахованномЛицеФСС.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗастрахованномЛицеФСС.Дата,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрации,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрацииИндекс,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрацииДом,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрацииКорпус,
	|	СведенияОЗастрахованномЛицеФСС.АдресРегистрацииКвартира
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.СНИЛС = &СНИЛС
	|	И СведенияОЗастрахованномЛицеФСС.АдресРегистрацииФИАСДом = &Идентификатор
	|	И НЕ СведенияОЗастрахованномЛицеФСС.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("СНИЛС",         Документ.СотрудникСНИЛС);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Если Не ЭтоИдентификаторДома Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФИАСДом", "ФИАСРО");
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Индекс = Документ[Префикс + "Индекс"]
			И НРег(СокрЛП(СтрокаТаблицы.Дом)) = НРег(СокрЛП(Документ[Префикс + "Дом"]))
			И НРег(СокрЛП(СтрокаТаблицы.Корпус)) = НРег(СокрЛП(Документ[Префикс + "Корпус"]))
			И НРег(СокрЛП(СтрокаТаблицы.Квартира)) = НРег(СокрЛП(Документ[Префикс + "Квартира"])) Тогда
			Возврат СтрокаТаблицы.ЗначениеАдреса;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция УзлыЭлементаDOM(ЭлементDOM, ИменаРеквизитов)
	Возврат СериализацияБЗК.УзлыЭлементаDOM(ЭлементDOM, ИменаРеквизитов);
КонецФункции

Функция ЗначениеXMLТипаСтрока(ЗначениеXML)
	Возврат СериализацияБЗК.ЗначениеXMLТипаСтрока(ЗначениеXML);
КонецФункции

Функция ЗначениеXMLТипаСНИЛС(ЗначениеXML)
	Возврат УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(ЗначениеXMLТипаСтрока(ЗначениеXML));
КонецФункции

Функция ЗначениеXMLТипаДата(ЗначениеXML)
	Возврат СериализацияБЗК.ЗначениеXML(ЗначениеXML, Тип("Дата"));
КонецФункции

Функция ЗначениеXMLТипаЧисло(ЗначениеXML)
	Возврат СериализацияБЗК.ЗначениеXML(ЗначениеXML, Тип("Число"));
КонецФункции

Процедура ЗаполнитьФизическоеЛицоИСотрудника(Документ)
	
	РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(
		Документ.СотрудникСНИЛС,
		Документ.СотрудникФамилия,
		Документ.СотрудникИмя,
		Документ.СотрудникОтчество);
	
	Документ.Вставить("СотрудникТекстОшибкиПоиска", "");
	Документ.Вставить("ФизическоеЛицо", РезультатПоиска.ФизическоеЛицо);
	Если ЗначениеЗаполнено(Документ.ФизическоеЛицо) Тогда
		КадровыеДанные = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
			Документ.Страхователь,
			Документ.ФизическоеЛицо,
			"Организация",
			ТекущаяДатаСеанса(),
			Ложь,
			Документ.СотрудникТекстОшибкиПоиска);
		Если КадровыеДанные = Неопределено Тогда
			Документ.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			Документ.Вставить("Сотрудник",   Справочники.Сотрудники.ПустаяСсылка());
		Иначе
			Документ.Вставить("Организация", КадровыеДанные.Организация);
			Документ.Вставить("Сотрудник",   КадровыеДанные.Сотрудник);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Документ.СотрудникСНИЛС) Тогда
			Документ.СотрудникТекстОшибкиПоиска = СтрШаблон(
				НСтр("ru = 'Не удалось найти физическое лицо по СНИЛС ""%1"": %2.'"),
				Документ.СотрудникСНИЛС,
				РезультатПоиска.ТекстОшибки);
		Иначе
			Документ.СотрудникТекстОшибкиПоиска = СтрШаблон(
				НСтр("ru = 'Не удалось найти физическое лицо по ФИО ""%1 %2 %3"": %4.'"),
				Документ.СотрудникФамилия,
				Документ.СотрудникИмя,
				Документ.СотрудникОтчество,
				РезультатПоиска.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКартуМИР(Документ)
	НомерКартыМИР = ОбщегоНазначенияБЗК.ЗначениеСвойства(Документ, "НомерКартыМИР");
	Документ.Удалить("НомерКартыМИР");
	Если Не ЗначениеЗаполнено(НомерКартыМИР) Тогда
		Возврат;
	КонецЕсли;
	
	Начало = СтрЗаменить(Лев(НомерКартыМИР, 6), "*", "");
	Окончание = СтрЗаменить(Прав(НомерКартыМИР, 6), "*", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеКартыКонтрагентов.Ссылка КАК Ссылка,
	|	БанковскиеКартыКонтрагентов.Владелец КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.БанковскиеКартыКонтрагентов КАК БанковскиеКартыКонтрагентов
	|ГДЕ
	|	БанковскиеКартыКонтрагентов.Код ПОДОБНО &Шаблон
	|	И БанковскиеКартыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Шаблон", Начало + "%" + Окончание);
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	СтрокаТаблицы = Таблица.Найти(Документ.ФизическоеЛицо, "ФизическоеЛицо");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = Таблица.Найти(Справочники.ФизическиеЛица.ПустаяСсылка(), "ФизическоеЛицо");
	КонецЕсли;
	Если СтрокаТаблицы = Неопределено Тогда
		Свойства = Новый Структура("ЭтоНациональныйПлатежныйИнструмент", Истина);
		ОсновныеРеквизитыКарты = Справочники.БанковскиеКартыКонтрагентов.ОсновныеРеквизитыКарты();
		ОсновныеРеквизитыКарты.ОсновнойНомерДержателяКарты = НомерКартыМИР;
		КартаМИР = Справочники.БанковскиеКартыКонтрагентов.Добавить(
			Документ.ФизическоеЛицо,
			ОсновныеРеквизитыКарты,
			Свойства,
			Ложь);
	Иначе
		КартаМИР = СтрокаТаблицы.Ссылка;
	КонецЕсли;
	Документ.Вставить("КартаМИР", КартаМИР);
КонецПроцедуры

Процедура ЗаполнитьСвойстваРеквизитов(Документ, СтруктураDOM)
	СвойстваРеквизитов = Новый ТаблицаЗначений;
	СвойстваРеквизитов.Колонки.Добавить("ТипРеквизита", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРеквизитовДляРасчетаПособияФСС"));
	СвойстваРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	СвойстваРеквизитов.Колонки.Добавить("ИмяТаблицы", Новый ОписаниеТипов("Строка"));
	СвойстваРеквизитов.Колонки.Добавить("Изменяемый", Новый ОписаниеТипов("Булево, Число"));
	СвойстваРеквизитов.Колонки.Добавить("Обязательный", Новый ОписаниеТипов("Булево, Число"));
	ВыражениеXPath = СериализацияБЗК.ВычислитьВыражениеXPath(СтруктураDOM, "//*/@*");
	БыстрыйПоиск = Перечисления.ТипыРеквизитовДляРасчетаПособияФСС.СоответствиеДляПоискаПоИменам();
	Пока Истина Цикл
		АтрибутDOM = ВыражениеXPath.ПолучитьСледующий();
		Если АтрибутDOM = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если НРег(АтрибутDOM.ЛокальноеИмя) = "editable" Тогда
			ИмяСвойства = "Изменяемый";
		ИначеЕсли НРег(АтрибутDOM.ЛокальноеИмя) = "required" Тогда
			ИмяСвойства = "Обязательный";
		Иначе
			Продолжить;
		КонецЕсли;
		ЗначениеСвойства = СериализацияБЗК.ЗначениеXML(АтрибутDOM.ТекстовоеСодержимое, Тип("Булево"));
		// Определение имени реквизита.
		ЭлементDOM = АтрибутDOM.ЭлементВладелец;
		ИмяРеквизита = НРег(ЭлементDOM.ЛокальноеИмя);
		// Определение пути к реквизиту.
		МассивИмен = Новый Массив;
		ЭлементDOM = ЭлементDOM.РодительскийУзел;
		ЛокальноеИмя = НРег(ЭлементDOM.ЛокальноеИмя);
		Пока ЛокальноеИмя <> "socialassistnum"
			И ЛокальноеИмя <> "benefit1approve"
			И ЛокальноеИмя <> "benefit2approve"
			И ЛокальноеИмя <> "benefit4approve"
			И ЗначениеЗаполнено(ЛокальноеИмя) Цикл
			МассивИмен.Вставить(0, ЛокальноеИмя);
			ЭлементDOM = ЭлементDOM.РодительскийУзел;
			ЛокальноеИмя = НРег(ЭлементDOM.ЛокальноеИмя);
		КонецЦикла;
		ИмяТаблицы = СтрСоединить(МассивИмен, ".");
		// Поиск и добавление строки результата.
		Фильтр = Новый Структура("ИмяРеквизита, ИмяТаблицы", ИмяРеквизита, ИмяТаблицы);
		Фильтр.Вставить(ИмяСвойства, Неопределено);
		Найденные = СвойстваРеквизитов.НайтиСтроки(Фильтр);
		Если Найденные.Количество() > 0 Тогда
			СтрокаТаблицы = Найденные[0];
		Иначе
			ПолноеИмя = ?(ИмяТаблицы = "", "", ИмяТаблицы + ".") + ИмяРеквизита;
			СтрокаТаблицы = СвойстваРеквизитов.Добавить();
			СтрокаТаблицы.ИмяРеквизита = ИмяРеквизита;
			СтрокаТаблицы.ИмяТаблицы   = ИмяТаблицы;
			СтрокаТаблицы.ТипРеквизита = БыстрыйПоиск[ПолноеИмя];
		КонецЕсли;
		СтрокаТаблицы[ИмяСвойства] = ЗначениеСвойства;
	КонецЦикла;
	Документ.Вставить("СвойстваРеквизитов", СвойстваРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область Регламенты

Функция МаксимальнаяДатаПодтвержденияПолучения(Объект) Экспорт
	Возврат БлижайшийРабочийДень(Объект.ВходящаяДата, РабочихДнейНаПодтверждениеПолучения());
КонецФункции

Функция МаксимальнаяДатаОтправкиРеестра(Объект) Экспорт
	Если ЗначениеЗаполнено(Объект.ДатаОтправкиПодтверждения)
		И Объект.ДатаОтправкиПодтверждения < Объект.МаксимальнаяДатаПодтверждения Тогда
		ДатаОтсчета = Объект.ДатаОтправкиПодтверждения;
	Иначе
		ДатаОтсчета = Объект.МаксимальнаяДатаПодтверждения;
	КонецЕсли;
	Возврат БлижайшийРабочийДень(ДатаОтсчета, РабочихДнейНаОтправкуРеестра());
КонецФункции

// См. п.7 Положения № 1 утвержденного Постановлением Правительства РФ от 21.04.2011 N 294.
Функция РабочихДнейНаПодтверждениеПолучения()
	Возврат 1;
КонецФункции

// См. п.7 Положения № 1 утвержденного Постановлением Правительства РФ от 21.04.2011 N 294.
Функция РабочихДнейНаОтправкуРеестра()
	Возврат 5;
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Функция ТребованияПоОтправке()
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	НачалоРабочегоДня = НачалоДня(БлижайшийРабочийДень(НачалоТекущегоДня));
	// Бумагу отправляют через 2-3 дня, а на подтверждение получения дается 1 день.
	НачалоТекущегоДняМинусДваДня = НачалоТекущегоДня - 86400 * 2;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВходящийЗапросФССДляРасчетаПособия.МаксимальнаяДатаОтправкиРеестра <= &НачалоРабочегоДня
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сегодня
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|ГДЕ
	|	НЕ ВходящийЗапросФССДляРасчетаПособия.Обработано
	|	И ВходящийЗапросФССДляРасчетаПособия.МаксимальнаяДатаОтправкиРеестра >= &НачалоТекущегоДня
	|	И НЕ ВходящийЗапросФССДляРасчетаПособия.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящийЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВходящийЗапросФССДляРасчетаПособия.МаксимальнаяДатаПодтверждения <= &НачалоРабочегоДня
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сегодня
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФССДляРасчетаПособия
	|ГДЕ
	|	НЕ ВходящийЗапросФССДляРасчетаПособия.Обработано
	|	И НЕ ВходящийЗапросФССДляРасчетаПособия.ПодтверждениеПолученоФСС
	|	И ВходящийЗапросФССДляРасчетаПособия.ДатаОтправкиПодтверждения = &ПустаяДата
	|	И ВходящийЗапросФССДляРасчетаПособия.МаксимальнаяДатаПодтверждения >= &НачалоТекущегоДняМинусДваДня
	|	И НЕ ВходящийЗапросФССДляРасчетаПособия.ПометкаУдаления";
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоТекущегоДня);
	Запрос.УстановитьПараметр("НачалоРабочегоДня", НачалоРабочегоДня);
	Запрос.УстановитьПараметр("НачалоТекущегоДняМинусДваДня", НачалоТекущегоДняМинусДваДня);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Массив = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура("Реестры, Подтверждения");
	Результат.Реестры       = Массив[0].Выгрузить();
	Результат.Подтверждения = Массив[1].Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция БлижайшийРабочийДень(Дата, НомерДня = 0) Экспорт
	БлижайшиеРабочиеДни = БлижайшиеРабочиеДни(Дата, НомерДня + 1);
	Количество = БлижайшиеРабочиеДни.Количество();
	Если Количество = 0 Тогда
		Возврат Дата;
	Иначе
		Возврат БлижайшиеРабочиеДни[Количество - 1];
	КонецЕсли;
КонецФункции

Функция БлижайшиеРабочиеДни(Знач ДатаНачала, Знач Количество)
	РабочиеДни = Новый Массив;
	Если Количество < 1 Тогда
		Возврат РабочиеДни;
	КонецЕсли;
	
	ДатаНачала = НачалоДня(ДатаНачала);
	
	// Наполнение массива календарных дней, от которых будет отталкиваться запрос по рабочим дням.
	// Коэффициент компенсирует праздники и выходные с небольшим запасом, для минимизации обращений к СУБД.
	КалендарныеДни = Новый Массив;
	ВГраницаКалендарныхДней = ?(Количество < 2, 0, Цел(Количество * 1.5));
	Для ИндексДня = 0 По ВГраницаКалендарныхДней Цикл
		КалендарныеДни.Добавить(ДатаНачала + 86400 * ИндексДня);
	КонецЦикла;
	
	РабочиеДниКоличество = 0;
	Календарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Если Не ЗначениеЗаполнено(Календарь) Тогда
		Возврат РабочиеДни;
	КонецЕсли;
	БлижайшиеРабочиеДаты = КалендарныеГрафики.БлижайшиеРабочиеДаты(Календарь, КалендарныеДни);
	Если БлижайшиеРабочиеДаты <> Неопределено Тогда
		
		Для Каждого КалендарныйДень Из КалендарныеДни Цикл
			РабочийДень = БлижайшиеРабочиеДаты[КалендарныйДень];
			Если ТипЗнч(РабочийДень) = Тип("Дата")
				И РабочийДень >= КалендарныйДень
				И РабочиеДни.Найти(РабочийДень) = Неопределено Тогда
				РабочиеДни.Добавить(РабочийДень);
				РабочиеДниКоличество = РабочиеДниКоличество + 1;
				Если РабочиеДниКоличество = Количество Тогда
					Возврат РабочиеДни;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если найдено недостаточно рабочих дней (например, часть календарных дней попало на длинные праздники),
		// то выполняется второй запрос с недостающими днями.
		Если РабочиеДниКоличество > 0 Тогда
			ОсталосьДней = Количество - РабочиеДниКоличество;
			СледующийДень = РабочиеДни[РабочиеДниКоличество-1] + 86400;
			БлижайшиеРабочиеДни = БлижайшиеРабочиеДни(СледующийДень, ОсталосьДней);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РабочиеДни, БлижайшиеРабочиеДни, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РабочиеДни;
КонецФункции

#КонецОбласти

#Область Заполнение

Процедура ПриЗаписиПервичногоДокумента(ПервичныйДокументОбъект, Отказ) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаРеквизитов = "НомерЛисткаНетрудоспособности, Организация, ГоловнаяОрганизация, ИсправленныйДокумент, Сотрудник, ФизическоеЛицо";
	Значения = ОбщегоНазначенияБЗК.ЗначенияСвойств(ПервичныйДокументОбъект, ИменаРеквизитов);
	НомерЛН              = Значения.НомерЛисткаНетрудоспособности;
	ГоловнаяОрганизация  = Значения.ГоловнаяОрганизация;
	ИсправленныйДокумент = Значения.ИсправленныйДокумент;
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) И ЗначениеЗаполнено(Значения.Организация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Значения.Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапрос.Ссылка КАК Ссылка,
	|	ВходящийЗапрос.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ВходящийЗапрос.НомерЛН КАК НомерЛН,
	|	ВходящийЗапрос.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВходящийЗапрос.Сотрудник КАК Сотрудник,
	|	ВходящийЗапрос.Организация КАК Организация
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапрос
	|ГДЕ
	|	ВходящийЗапрос.НомерЛН = &НомерЛН
	|	И ВходящийЗапрос.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВходящийЗапрос.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Если Не ПервичныйДокументОбъект.ПометкаУдаления
				И (Не ЗначениеЗаполнено(Выборка.ПервичныйДокумент)
					Или Выборка.ПервичныйДокумент = ПервичныйДокументОбъект.Ссылка
					Или Выборка.ПервичныйДокумент = ИсправленныйДокумент) Тогда
				ПервичныйДокумент  = ПервичныйДокументОбъект.Ссылка;
				ЗначенияРеквизитов = Значения;
			Иначе
				ИменаРеквизитов = "Ссылка, Организация, Сотрудник, ФизическоеЛицо";
				ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
					Выборка.НомерЛН,
					Выборка.ГоловнаяОрганизация,
					,
					ИменаРеквизитов);
				Если ЗначенияРеквизитов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПервичныйДокумент = ЗначенияРеквизитов.Ссылка;
			КонецЕсли;
			РеквизитыДляОбновления = Новый Структура;
			Если ПервичныйДокумент <> Выборка.ПервичныйДокумент Тогда
				РеквизитыДляОбновления.Вставить("ПервичныйДокумент", ПервичныйДокумент);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Сотрудник)
				Или ЗначениеЗаполнено(ЗначенияРеквизитов.ФизическоеЛицо) Тогда
				РеквизитыДляОбновления.Вставить("Сотрудник",      ЗначенияРеквизитов.Сотрудник);
				РеквизитыДляОбновления.Вставить("ФизическоеЛицо", ЗначенияРеквизитов.ФизическоеЛицо);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация) Тогда
				РеквизитыДляОбновления.Вставить("Организация", ЗначенияРеквизитов.Организация);
			КонецЕсли;
			Если РеквизитыДляОбновления.Количество() > 0 Тогда
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДляОбновления);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось обновить Входящий запрос ФСС для расчета пособия ""%1"": %2'"),
				Выборка.Ссылка,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция СписокВыбораЗаявлений(ФизическоеЛицо, ПервичныйДокумент, ИсключаемоеЗаявление, Количество) Экспорт
	Результат = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Результат;
	КонецЕсли;
	// Если первичный документ заполнен - получить последнее заявление по документу.
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		Отбор.Вставить("ДокументОснование", ПервичныйДокумент);
	Иначе
		Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	КонецЕсли;
	Поля = "Ссылка, Дата";
	Сортировки = "Дата Убыв, Ссылка Убыв";
	Запрос = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗапросПоДокументу(Отбор, Поля, Количество, Сортировки);
	Таблица = Запрос.Выполнить().Выгрузить();
	Результат.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("Ссылка"));
	Если ЗначениеЗаполнено(ИсключаемоеЗаявление) Тогда
		ЭлементСписка = Результат.НайтиПоЗначению(ИсключаемоеЗаявление);
		Если ЭлементСписка <> Неопределено Тогда
			Результат.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция РеестрыПоЗаявлению(Заявление, ПервичныйДокумент, ИсключаемоеЗаявление, Количество) Экспорт
	Если Не ЗначениеЗаполнено(Заявление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Реестр.Ссылка КАК Ссылка,
	|	Реестр.СтатусДокумента КАК СтатусДокумента,
	|	Реестр.Номер КАК Номер,
	|	Реестр.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС)
	|			ТОГДА 6
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПереданВФСС)
	|			ТОГДА 5
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен)
	|			ТОГДА 4
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС)
	|			ТОГДА 3
	|		КОГДА Реестр.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.Аннулирован)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ВесСостояния,
	|	Реестр.ПометкаУдаления КАК ПометкаУдаления,
	|	Реестр.Проведен КАК Проведен
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК ТаблицаСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК Реестр
	|		ПО ТаблицаСведений.Ссылка = Реестр.Ссылка
	|ГДЕ
	|	&Условия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	Проведен УБЫВ,
	|	ВесСостояния УБЫВ,
	|	Дата УБЫВ";
	
	Если Количество = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	ИначеЕсли Количество > 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(Количество, "ЧГ="));
	КонецЕсли;
	
	Условия = Новый Массив;
	Условия.Добавить("ТаблицаСведений.Заявление = &Заявление");
	Запрос.УстановитьПараметр("Заявление", Заявление);
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		Условия.Добавить("ТаблицаСведений.ПервичныйДокумент = &ПервичныйДокумент");
		Запрос.УстановитьПараметр("ПервичныйДокумент", ПервичныйДокумент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсключаемоеЗаявление) Тогда
		Условия.Добавить("ТаблицаСведений.Заявление <> &ИсключаемоеЗаявление");
		Запрос.УстановитьПараметр("ИсключаемоеЗаявление", ИсключаемоеЗаявление);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", СтрСоединить(Условия, " И "));
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли