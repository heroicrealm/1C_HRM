///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Входящие документы от ФСС загружаются в автоматическом режиме'");
	КонецЕсли;
	
	Элементы.СведенияВЗапросеГруппа.ТолькоПросмотр = Истина;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	СЭДОФСС.ПриСозданииФормыЗапросаИлиОтветаДляРасчетаПособия(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_ОтпускПоУходуЗаРебенком"
		Или ИмяСобытия = "Запись_Отпуск"
		Или ИмяСобытия = "Запись_ЗаявлениеСотрудникаНаВыплатуПособия"
		Или ИмяСобытия = "Запись_РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий"
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВходящийЗапросФССДляРасчетаПособия", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПособияПриИзменении(Элемент)
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОшибкаПриПоискеСотрудникаНажатие(Элемент)
	ОшибкаПриПоискеФизическогоЛицаНадписьНажатие(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПриПоискеФизическогоЛицаНадписьНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИнформированиеПользователяКлиент.ПоказатьПодробности(Объект.СотрудникТекстОшибкиПоиска, , БиблиотекаКартинок.Предупреждение24БЗК);
КонецПроцедуры

&НаКлиенте
Процедура СсылкиПрямыхВыплатФССОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	Если Адрес = "СоздатьСведения" Тогда
		СтандартнаяОбработка = Ложь;
		ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.ОткрытьЗаявлениеСотрудникаПоОснованию(Объект.ПервичныйДокумент);
	ИначеЕсли Адрес = "ПоказатьВсе" Тогда
		СтандартнаяОбработка = Ложь;
		ОтборыСписка = Новый Структура;
		ОтборыСписка.Вставить("ГоловнаяОрганизация",           Объект.ГоловнаяОрганизация);
		ОтборыСписка.Вставить("НомерЛисткаНетрудоспособности", Объект.НомерЛН);
		ПараметрыСписка = Новый Структура;
		ПараметрыСписка.Вставить("Отбор", ОтборыСписка);
		УникальностьСписка = Объект.НомерЛН;
		ОткрытьФорму("Документ.ЗаявлениеСотрудникаНаВыплатуПособия.ФормаСписка", ПараметрыСписка, , УникальностьСписка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьРедактирования(Команда)
	ВключитьВозможностьРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТекстXML(Команда)
	СЭДОФССКлиент.ПоказатьТекстXML(Объект.ИдентификаторСообщения);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	ПервичнаяИнициализицияФормы = (Элементы.УсловияИсчисленияКод1.СписокВыбора.Количество() = 0);
	Если ПервичнаяИнициализицияФормы Тогда
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод1);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод2);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод3);
		СЭДОФСС.СписокВыбораКатегорийЗастрахованныхЛиц(Элементы.КатегорияЗастрахованногоЛица.СписокВыбора);
	КонецЕсли;
	
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	ТолькоПросмотр = Не Объект.Загружен;
	
	ЭтоОбычныйБольничный = (Объект.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности);
	ЭтоБольничныйПоБиР   = (Объект.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам);
	ЭтоОтпускПоУходу     = (Объект.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком);
	ЭтоБольничный        = ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР;
	
	ОбновитьВидимостьЭлементовПоПравам();
	
	ОбновитьСсылкиПрямыхВыплатФСС();
	
	Элементы.ОшибкаПриПоискеФизическогоЛицаГруппа.Видимость = ЗначениеЗаполнено(Объект.СотрудникТекстОшибкиПоиска)
		И Не ЗначениеЗаполнено(Объект.ФизическоеЛицо);
	Элементы.УдостоверениеЛичностиВидКодМВД.Видимость = ЗначениеЗаполнено(Объект.УдостоверениеЛичностиВидКодМВД)
		И Не ЗначениеЗаполнено(Объект.УдостоверениеЛичностиВид);
	
	ОбновитьЭлементыСпособаВыплаты();
	
	ОбновитьСвертываемыеГруппы();
	
	ОбновитьВидимостьГруппПоВидуПособия();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементовПоПравам()
	ЭтоРасчетчик = СЭДОФСС.ЕстьПравоПросмотраФактическихНачисленийВДокументе(Объект);
	Элементы.ПервыйРасчетныйГодЗаработок.Видимость = ЭтоРасчетчик;
	Элементы.ВторойРасчетныйГодЗаработок.Видимость = ЭтоРасчетчик;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСсылкиПрямыхВыплатФСС()
	Если ЗначениеЗаполнено(Объект.ПервичныйДокумент)
		И ТипЗнч(Объект.ПервичныйДокумент) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		ПрямыеВыплатыПособийСоциальногоСтрахования.ОбновитьНадписьВБольничном(
			Элементы.СсылкиПрямыхВыплатФСС,
			Объект.ПервичныйДокумент,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПервичныйДокумент, "ПособиеВыплачиваетсяФСС"));
	Иначе
		Элементы.СсылкиПрямыхВыплатФСС.Заголовок = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьГруппПоВидуПособия()
	СвертываемыеГруппыИзменитьВидимость(Элементы.СрочныйТрудовойДоговорГруппа, ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу);
	СвертываемыеГруппыИзменитьВидимость(Элементы.УсловияИсчисленияГруппа,      ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу);
	СвертываемыеГруппыИзменитьВидимость(Элементы.ЛьготыГруппа,                 ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу);
	СвертываемыеГруппыИзменитьВидимость(Элементы.ИсключаемыеПериодыГруппа,     ЭтоОбычныйБольничный);
	СвертываемыеГруппыИзменитьВидимость(Элементы.ПериодыПростояГруппа,         ЭтоОбычныйБольничный);
	СвертываемыеГруппыИзменитьВидимость(Элементы.ОтпускПоУходуГруппа,          ЭтоОтпускПоУходу);
	СвертываемыеГруппыИзменитьВидимость(Элементы.УсыновлениеОпекаГруппа,       ЭтоБольничныйПоБиР);
	СвертываемыеГруппыИзменитьВидимость(Элементы.ПередачаНаВоспитаниеГруппа,   ЭтоБольничныйПоБиР);
	СвертываемыеГруппыИзменитьВидимость(Элементы.СвидетельствоОРожденииГруппа, ЭтоБольничныйПоБиР);
	СвертываемыеГруппыИзменитьВидимость(Элементы.РебенокГруппа,                ЭтоБольничныйПоБиР);
	СвертываемыеГруппыИзменитьВидимость(Элементы.СправкаОтДругогоРодителяГруппа, ЭтоБольничныйПоБиР);
	Элементы.НомерЛН.Видимость                     = ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР;
	Элементы.РасчетныйПериодГруппа.Видимость       = ВидимостьРасчетногоПериода();
	Элементы.ДоляВремени.Видимость                 = ВидимостьДолиВремени();
	Элементы.СтажГруппа.Видимость                  = ВидимостьСтажа();
	Элементы.ПериодОплатыЗаСчетФССГруппа.Видимость = ВидимостьПериодаОплатыЗаСчетФСС();
КонецПроцедуры

&НаСервере
Функция ВидимостьРасчетногоПериода()
	Возврат ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьСтажа()
	Возврат ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьДолиВремени()
	Возврат ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьПериодаОплатыЗаСчетФСС()
	Возврат ЭтоОбычныйБольничный;
КонецФункции

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитать()
	ОтключитьОбработчикОжидания("ПрочитатьНаКлиенте");
	ПодключитьОбработчикОжидания("ПрочитатьНаКлиенте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНаКлиенте()
	Если Не Модифицированность Тогда
		Прочитать();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаСервере
Процедура ВключитьВозможностьРедактированияНаСервере()
	Элементы.СведенияВЗапросеГруппа.ТолькоПросмотр = Ложь;
	Элементы.СлужебныеПоляГруппа.ТолькоПросмотр = Ложь;
	Элементы.Страхователь.ТолькоПросмотр = Ложь;
	Элементы.Дата.ТолькоПросмотр = Ложь;
	Элементы.Номер.ТолькоПросмотр = Ложь;
	Элементы.ВидПособия.ТолькоПросмотр = Ложь;
	Элементы.ИсключаемыеПериоды.ИзменятьСоставСтрок      = Истина;
	Элементы.ИсключаемыеПериоды.ИзменятьПорядокСтрок     = Истина;
	Элементы.ИсключаемыеПериоды.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	Элементы.ПериодыПростоя.ИзменятьСоставСтрок      = Истина;
	Элементы.ПериодыПростоя.ИзменятьПорядокСтрок     = Истина;
	Элементы.ПериодыПростоя.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	ОбновитьЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область ЭлементыШапки

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	Иначе
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Страхователь);
	КонецЕсли;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Объект.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо");
	Иначе
		Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	ОбновитьЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СвертываемыеГруппы

#Область ПараметрыСвертываемыхГрупп

&НаСервере
Процедура ПриОпределенииСвертываемыхГрупп(Группы)
	Группы.Добавить(Элементы.СведенияОЗастрахованномЛицеГруппа);
	Группы.Добавить(Элементы.АдресРегистрацииГруппа);
	Группы.Добавить(Элементы.УдостоверениеЛичностиГруппа);
	Группы.Добавить(Элементы.СрочныйТрудовойДоговорГруппа);
	Группы.Добавить(Элементы.ЛьготыГруппа);
	Группы.Добавить(Элементы.УсловияИсчисленияГруппа);
	Группы.Добавить(Элементы.ДанныеДляРасчетаГруппа);
	Группы.Добавить(Элементы.ОтпускПоУходуГруппа);
	Группы.Добавить(Элементы.СвидетельствоОРожденииГруппа);
	Группы.Добавить(Элементы.РебенокГруппа);
	Группы.Добавить(Элементы.СправкаОтДругогоРодителяГруппа);
	Группы.Добавить(Элементы.УсыновлениеОпекаГруппа);
	Группы.Добавить(Элементы.ПередачаНаВоспитаниеГруппа);
	Группы.Добавить(Элементы.СпособВыплатыГруппа);
	Группы.Добавить(Элементы.ИсключаемыеПериодыГруппа);
	Группы.Добавить(Элементы.ПериодыПростояГруппа);
	Группы.Добавить(Элементы.ИзвещениеФССГруппа);
	Группы.Добавить(Элементы.ТекстОшибкиГруппа);
	Группы.Добавить(Элементы.СтраховательГруппа);
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияЭлементовСвертываемыхГрупп()
	// Обработка не требуется.
КонецПроцедуры

&НаСервере
Процедура ПриОпределенииСвойствСвертываемойГруппы(Группа, Представление, Заполнена, Развернута, Видимость)
	
	Если Группа = Элементы.СведенияОЗастрахованномЛицеГруппа Тогда
		Представление = ПредставлениеЗастрахованногоЛица();
		
	ИначеЕсли Группа = Элементы.АдресРегистрацииГруппа Тогда
		Представление = ПредставлениеАдреса("АдресРегистрации", Истина);
		
	ИначеЕсли Группа = Элементы.УдостоверениеЛичностиГруппа Тогда
		Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
			Объект.УдостоверениеЛичностиВид,
			Объект.УдостоверениеЛичностиСерия,
			Объект.УдостоверениеЛичностиНомер,
			Объект.УдостоверениеЛичностиДатаВыдачи,
			Объект.УдостоверениеЛичностиСрокДействия,
			Объект.УдостоверениеЛичностиКемВыдан);
		
	ИначеЕсли Группа = Элементы.СрочныйТрудовойДоговорГруппа Тогда
		Если ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаНачала)
			И ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаОкончания) Тогда
			Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ТрудовойДоговорДатаНачала, Объект.ТрудовойДоговорДатаОкончания);
		КонецЕсли;
		Видимость = ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.ЛьготыГруппа Тогда
		Представление = ПредставлениеЛьгот();
		Видимость = ЭтоБольничный Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.УсловияИсчисленияГруппа Тогда
		Представление = ПредставлениеУсловийИсчисления();
		Видимость = ЭтоБольничный Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.ДанныеДляРасчетаГруппа Тогда
		Представление = ПредставлениеДанныхДляРасчета();
		
	ИначеЕсли Группа = Элементы.ОтпускПоУходуГруппа Тогда
		Представление = ПредставлениеОтпускаПоУходу();
		Видимость = ЭтоОтпускПоУходу Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.СвидетельствоОРожденииГруппа Тогда
		Представление = ПредставлениеСвидетельстваОРождении();
		Видимость = ЭтоБольничныйПоБиР Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.РебенокГруппа Тогда
		Представление = ПредставлениеРебенка();
		Видимость = ЭтоБольничныйПоБиР Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.СправкаОтДругогоРодителяГруппа Тогда
		Представление = ПредставлениеСправкиОтДругогоРодителя();
		Видимость = ЭтоБольничныйПоБиР Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.УсыновлениеОпекаГруппа Тогда
		Представление = ПредставлениеУсыновленияОпеки();
		Видимость = ЭтоБольничныйПоБиР Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.ПередачаНаВоспитаниеГруппа Тогда
		Представление = ПредставлениеПередачиНаВоспитание();
		Видимость = ЭтоБольничныйПоБиР Или ЗначениеЗаполнено(Представление);
		
	ИначеЕсли Группа = Элементы.СпособВыплатыГруппа Тогда
		
		Заполнена = ЗначениеЗаполнено(Объект.СпособВыплатыПособия);
		Если Не Заполнена Тогда
			Представление = НСтр("ru = 'Не заполнен'");
		ИначеЕсли Не Развернута Тогда
			Если Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
				Представление = ПредставлениеАдреса("АдресПроживания", Ложь);
			Иначе
				Представление = СЭДОФСС.ПредставлениеСпособаВыплаты(Объект);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ИсключаемыеПериодыГруппа Тогда
		Заполнена = Объект.ИсключаемыеПериоды.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеИсключаемыхПериодов();
		КонецЕсли;
		Видимость = ЭтоОбычныйБольничный Или Заполнена;
		
	ИначеЕсли Группа = Элементы.ПериодыПростояГруппа Тогда
		Заполнена = Объект.ПериодыПростоя.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеПериодовПростоя();
		КонецЕсли;
		Видимость = ЭтоОбычныйБольничный Или Заполнена;
		
	ИначеЕсли Группа = Элементы.ИзвещениеФССГруппа Тогда
		Представление = ПредставлениеИзвещенияФСС();
		
	ИначеЕсли Группа = Элементы.ТекстОшибкиГруппа Тогда
		Видимость     = ЗначениеЗаполнено(Объект.ТекстОшибки);
		Заполнена     = Истина;
		Представление = "-";
		
	ИначеЕсли Группа = Элементы.СтраховательГруппа Тогда
		Представление = ПредставлениеСтрахователя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗастрахованногоЛица()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.СотрудникФамилия + " " + Объект.СотрудникИмя + " " + Объект.СотрудникОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения'") + " " + Формат(Объект.СотрудникДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1'"), Объект.СотрудникСНИЛС));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеАдреса(Префикс, ЕстьПолеЗаПределамиРФ)
	Если ЕстьПолеЗаПределамиРФ И ЗначениеЗаполнено(Объект[Префикс + "ЗаПределамиРФ"]) Тогда
		Возврат Объект[Префикс + "ЗаПределамиРФ"];
	КонецЕсли;
	
	ЗначениеАдреса = Объект[Префикс];
	Дом            = Объект[Префикс + "Дом"];
	Корпус         = Объект[Префикс + "Корпус"];
	Квартира       = Объект[Префикс + "Квартира"];
	ФИАСДом        = Объект[Префикс + "ФИАСДом"];
	ФИАСРО         = Объект[Префикс + "ФИАСРО"];
	Представление  = "";
	
	// Поиск адреса был осуществлен при загрузке входящего запроса - по сведениям о застрахованном лице.
	Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
	КонецЕсли;
	
	// Поиск адреса по идентификатору дома.
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ФИАСДом) Тогда
		Попытка
			ПараметрыПолученияАдреса = Новый Структура;
			ПараметрыПолученияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдреса = РаботаСАдресами.АдресПоИдентификатору(ФИАСДом, ПараметрыПолученияАдреса);
		Исключение
			ЗначениеАдреса = "";
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при поиске адреса %1 по идентификатору %2: %3'");
			Текст = СтрШаблон(Текст, Префикс, ФИАСДом, Ошибка);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
		КонецПопытки;
		Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Квартира) Тогда
				Представление = Представление + ", " + Квартира;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск адреса по идентификатору родительского объекта.
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ФИАСРО) Тогда
		Попытка
			ПараметрыПолученияАдреса = Новый Структура;
			ПараметрыПолученияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдреса = РаботаСАдресами.АдресПоИдентификатору(ФИАСРО, ПараметрыПолученияАдреса);
		Исключение
			ЗначениеАдреса = "";
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при поиске адреса %1 по идентификатору %2: %3'");
			Текст = СтрШаблон(Текст, Префикс, ФИАСРО, Ошибка);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
		КонецПопытки;
		Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Дом) Тогда
				Представление = Представление + ", " + Дом;
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Корпус) Тогда
				Представление = Представление + ", " + Корпус;
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Квартира) Тогда
				Представление = Представление + ", " + Квартира;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

&НаСервере
Функция ПредставлениеЛьгот()
	Возврат Строка(Объект.ПричинаПредоставленияЛьготы);
КонецФункции

&НаСервере
Функция ПредставлениеУсловийИсчисления()
	Представления = Новый Массив;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод1) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод2) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод3) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод3);
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеДанныхДляРасчета()
	Представления = Новый Массив;
	
	Если ВидимостьРасчетногоПериода() Тогда
		Годы = Новый Массив;
		Если ЗначениеЗаполнено(Объект.ПервыйРасчетныйГод) Тогда
			Годы.Добавить(Формат(Объект.ПервыйРасчетныйГод, "ЧГ="));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ВторойРасчетныйГод) Тогда
			Годы.Добавить(Формат(Объект.ВторойРасчетныйГод, "ЧГ="));
		КонецЕсли;
		Если Годы.Количество() > 0 Тогда
			Представления.Добавить(СтрШаблон(НСтр("ru = 'Расчетные годы: %1'"), СтрСоединить(Годы, ", ")));
		КонецЕсли;
	КонецЕсли;
	
	Если ВидимостьСтажа() Тогда
		Если ЗначениеЗаполнено(Объект.СтраховойСтажЛет) Или ЗначениеЗаполнено(Объект.СтраховойСтажМесяцев) Тогда
			Представления.Добавить(СтрШаблон(
				НСтр("ru = 'Страховой стаж: %1'"),
				ЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Объект.СтраховойСтажЛет, Объект.СтраховойСтажМесяцев)));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.НестраховойСтажЛет) Или ЗначениеЗаполнено(Объект.НестраховойСтажМесяцев) Тогда
			Представления.Добавить(СтрШаблон(
				НСтр("ru = 'Нестраховой стаж: %1'"),
				ЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Объект.НестраховойСтажЛет, Объект.НестраховойСтажМесяцев)));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'РК: %1'"), Объект.РайонныйКоэффициент));
	КонецЕсли;
	Если ВидимостьДолиВремени() И ЗначениеЗаполнено(Объект.ДоляВремени) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'Ставок: %1'"), Объект.ДоляВремени));
	КонецЕсли;
	
	Если ВидимостьПериодаОплатыЗаСчетФСС()
		И ЗначениеЗаполнено(Объект.ОплатаФССДатаНачала)
		И ЗначениеЗаполнено(Объект.ОплатаФССДатаОкончания) Тогда
		Представления.Добавить(СтрШаблон(
			НСтр("ru = 'Оплата за счет ФСС: %1'"),
			ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ОплатаФССДатаНачала, Объект.ОплатаФССДатаОкончания)));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеОтпускаПоУходу()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ОтпускПоУходуНомер) Тогда
		Представления.Добавить("№ " + Объект.ОтпускПоУходуНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтпускПоУходуДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.ОтпускПоУходуДата, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаНачала)
		И ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаОкончания) Тогда
		Представления.Добавить(ОбщегоНазначенияБЗК.НаименованиеПериода(
			Объект.ОтпускПоУходуДатаНачала,
			Объект.ОтпускПоУходуДатаОкончания));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеСвидетельстваОРождении()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СвидетельствоОРожденииСерияНомер) Тогда
		Представления.Добавить("№ " + Объект.СвидетельствоОРожденииСерияНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СвидетельствоОРожденииДатаВыдачи) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.СвидетельствоОРожденииДатаВыдачи, "ДЛФ=D"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииДата)
		Или ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииНомер) Тогда
		Представления.Добавить(НСтр("ru = 'актовая запись ЗАГС'"));
		Если ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииНомер) Тогда
			Представления.Добавить("№ " + Объект.АктоваяЗаписьОРожденииНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииДата) Тогда
			Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.АктоваяЗаписьОРожденииДата, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииДатаВыдачи)
		Или ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерияНомер) Тогда
		Представления.Добавить(НСтр("ru = 'иной документ'"));
		Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерияНомер) Тогда
			Представления.Добавить("№ " + Объект.ИнойДокументОРожденииСерияНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииДатаВыдачи) Тогда
			Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.ИнойДокументОРожденииДатаВыдачи, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеРебенка()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.РебенокФамилия + " " + Объект.РебенокИмя + " " + Объект.РебенокОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения'") + " " + Формат(Объект.РебенокДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1'"), Объект.РебенокСНИЛС));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеСправкиОтДругогоРодителя()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СправкаОтДругогоРодителяНомер) Тогда
		Представления.Добавить("№ " + Объект.СправкаОтДругогоРодителяНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СправкаОтДругогоРодителяДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.СправкаОтДругогоРодителяДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеУсыновленияОпеки()
	Если Объект.УсыновлениеОпекаТип = "1" Тогда
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об усыновлении'");
	ИначеЕсли Объект.УсыновлениеОпекаТип = "2" Тогда
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об установлении опеки над ребенком'");
	Иначе
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об усыновлении / опеке'");
	КонецЕсли;
	
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.УсыновлениеОпекаНомер) Тогда
		Представления.Добавить("№ " + Объект.УсыновлениеОпекаНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсыновлениеОпекаДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.УсыновлениеОпекаДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеПередачиНаВоспитание()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ПередачаНаВоспитаниеНомер) Тогда
		Представления.Добавить("№ " + Объект.ПередачаНаВоспитаниеНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПередачаНаВоспитаниеДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.ПередачаНаВоспитаниеДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеИсключаемыхПериодов()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ИсключаемыеПериоды Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Если ЗначениеЗаполнено(Период.КодПричины) Тогда
			Представление = Представление + " (" + Строка(Период.КодПричины) + ")";
		КонецЕсли;
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеПериодовПростоя()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ПериодыПростоя Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Если ЗначениеЗаполнено(Период.СреднийЗаработок) Тогда
			Представление = Представление + " (" + Строка(Период.СреднийЗаработок) + ")";
		КонецЕсли;
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеИзвещенияФСС()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ИзвещениеФССНомер) Тогда
		Представления.Добавить("№ " + Объект.ИзвещениеФССНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ИзвещениеФССДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.ИзвещениеФССДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеСтрахователя()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС) Тогда
		Представления.Добавить(НСтр("ru = 'регистрационный номер'") + " " + Объект.РегистрационныйНомерФСС);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		Представления.Добавить(НСтр("ru = 'код подчиненности'") + " " + Объект.КодПодчиненностиФСС);
	КонецЕсли;
	Если Представления.Количество() = 0 И ЗначениеЗаполнено(Объект.Страхователь) Тогда
		Представления.Добавить(Строка(Объект.Страхователь));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсСвертываемыхГрупп

&НаСервере
Процедура ОбновитьСвертываемыеГруппы()
	ВидимостьОбновлена = Ложь;
	
	ИнициализироватьСвертываемыеГруппы(ВидимостьОбновлена);
	
	Если Не ВидимостьОбновлена Тогда
		Для Каждого ЭлементСписка Из СвертываемыеГруппы Цикл
			ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КартинкаСвертываемойГруппыНажатие(Элемент)
	СвернутьРазвернутьГруппу(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаСвертываемойГруппы(Команда)
	СвернутьРазвернутьГруппу(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура СвертываемыеГруппыИзменитьВидимость(Группа, Видимость)
	Элементы[Группа.Имя + "_1"].Видимость = Видимость;
	Если Видимость Тогда
		ОбновитьЭлементыСвертываемойГруппы(СвертываемыеГруппы.НайтиПоЗначению(Группа.Имя));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеМеханизмыСвертываемыхГрупп

&НаСервере
Процедура ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка, СвертываемаяГруппа = Неопределено, Картинка = Неопределено, Кнопка = Неопределено)
	ИмяГруппы = ЭлементСписка.Значение;
	Родитель  = Элементы[ИмяГруппы + "_1"];
	
	Если СвертываемаяГруппа = Неопределено Тогда
		СвертываемаяГруппа = Элементы[ИмяГруппы];
		Картинка    = Элементы[ИмяГруппы + "_Картинка"];
		Кнопка      = Элементы[ИмяГруппы + "_Команда"];
	КонецЕсли;
	
	Представление = "";
	Заполнена     = Неопределено;
	Развернута    = ЭлементСписка.Пометка Или ВременноРазвернутыеГруппы.Свойство(ИмяГруппы);
	Видимость     = Родитель.Видимость;
	
	ПриОпределенииСвойствСвертываемойГруппы(СвертываемаяГруппа, Представление, Заполнена, Развернута, Видимость);
	
	Если Видимость <> Родитель.Видимость Тогда
		Родитель.Видимость = Видимость;
	КонецЕсли;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СвертываемаяГруппа.Видимость = Развернута;
	
	Если Заполнена = Неопределено Тогда
		Заполнена = ЗначениеЗаполнено(Представление);
	КонецЕсли;
	Если Не Развернута И Не Заполнена И Не ЗначениеЗаполнено(Представление) Тогда
		Представление = НСтр("ru = 'Нет'");
	КонецЕсли;
	Если Заполнена Тогда
		Картинка.Картинка = ?(Развернута, БиблиотекаКартинок.СтрелкаВнизЗеленая, БиблиотекаКартинок.СтрелкаВправоЗеленая);
		Кнопка.ЦветТекста = ЦветаСтиля.ОбычнаяГруппаЦветБЗК;
	Иначе
		Картинка.Картинка = ?(Развернута, БиблиотекаКартинок.СтрелкаВнизСераяБЗК, БиблиотекаКартинок.СтрелкаВправоСераяБЗК);
		Кнопка.ЦветТекста = ЦветаСтиля.ЗаголовокПоляЗаполняемогоАвтоматическиЦветБЗК;
	КонецЕсли;
	Если Развернута Или Не ЗначениеЗаполнено(Представление) Или Представление = "-" Тогда
		Кнопка.Заголовок = СвертываемаяГруппа.Заголовок;
	Иначе
		Кнопка.Заголовок = СвертываемаяГруппа.Заголовок + ": " + Представление;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвертываемыеГруппы(ВидимостьОбновлена)
	// СвертываемыеГруппы - СписокЗначений
	//   * Пометка - Показывать
	//   * Значение - Префикс элементов
	//   * Представление - Имя группы
	// Сохраняется в хранилище. При чтении - заполняет только пометки.
	Если СвертываемыеГруппы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	ВременноРазвернутыеГруппы = Новый Структура;
	// Наполнение списка групп.
	МассивГрупп = Новый Массив;
	ПриОпределенииСвертываемыхГрупп(МассивГрупп);
	Для Каждого Группа Из МассивГрупп Цикл
		СвертываемыеГруппы.Добавить(Группа.Имя);
	КонецЦикла;
	// Чтение настроек списка.
	ПрочитатьНастройкиСвертываемыхГрупп();
	// Добавление элементов формы.
	ДобавитьЭлементыСвертываемыхГрупп();
	// Отключение второго цикла.
	ВидимостьОбновлена = Истина;
	ПослеДобавленияЭлементовСвертываемыхГрупп();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиСвертываемыхГрупп()
	СписокЗначений = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, "СвертываемыеГруппы");
	Если ТипЗнч(СписокЗначений) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из СписокЗначений Цикл
			ЭлементСпискаФормы = СвертываемыеГруппы.НайтиПоЗначению(ЭлементСписка.Значение);
			Если ЭлементСпискаФормы <> Неопределено Тогда
				ЭлементСпискаФормы.Пометка = ЭлементСписка.Пометка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСвертываемыхГрупп()
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, "СвертываемыеГруппы", СвертываемыеГруппы);
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыСвертываемыхГрупп()
	Для Каждого ЭлементСписка Из СвертываемыеГруппы Цикл
		ИмяГруппы = ЭлементСписка.Значение;
		СвертываемаяГруппа = Элементы.Найти(ИмяГруппы);
		Если СвертываемаяГруппа = Неопределено Тогда
			Текст = СтрШаблон(НСтр("ru = 'Не найдена сворачивающаяся группа %1'"), ИмяГруппы);
			СообщенияПользователюБЗК.СообщитьПользователю(Текст);
			СвертываемыеГруппы.Очистить();
			Возврат;
		КонецЕсли;
		Родитель = СвертываемаяГруппа.Родитель;
		
		ГруппаСтрок = Элементы.Вставить(ИмяГруппы + "_1", Тип("ГруппаФормы"), Родитель, СвертываемаяГруппа);
		ГруппаСтрок.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтрок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаСтрок.Отображение = СвертываемаяГруппа.Отображение;
		ГруппаСтрок.ОтображатьЗаголовок = Ложь;
		
		ГруппаКолонок = Элементы.Добавить(ИмяГруппы + "_2", Тип("ГруппаФормы"), ГруппаСтрок);
		ГруппаКолонок.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКолонок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаКолонок.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКолонок.ОтображатьЗаголовок = Ложь;
		ГруппаКолонок.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаКолонок.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		Картинка = Элементы.Добавить(ИмяГруппы + "_Картинка", Тип("ДекорацияФормы"), ГруппаКолонок);
		Картинка.Вид         = ВидДекорацииФормы.Картинка;
		Картинка.Гиперссылка = Истина;
		Картинка.УстановитьДействие("Нажатие", "Подключаемый_КартинкаСвертываемойГруппыНажатие");
		
		Команда = Команды.Добавить(ИмяГруппы + "_Команда");
		Команда.Действие = "Подключаемый_КнопкаСвертываемойГруппы";
		
		Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ГруппаКолонок);
		Кнопка.ИмяКоманды        = Команда.Имя;
		Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		Кнопка.ЦветТекста        = ЦветаСтиля.ОбычнаяГруппаЦветБЗК;
		
		Если ГруппаСтрок.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
			Или ГруппаСтрок.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение Тогда
			Кнопка.Шрифт = ШрифтыСтиля.ОбычнаяГруппаШрифтБЗК;
		КонецЕсли;
		
		Элементы.Переместить(СвертываемаяГруппа, ГруппаСтрок);
		
		СвертываемаяГруппа.Поведение            = ПоведениеОбычнойГруппы.Обычное;
		СвертываемаяГруппа.Отображение          = ОтображениеОбычнойГруппы.Нет;
		СвертываемаяГруппа.ОтображатьЗаголовок  = Ложь;
		СвертываемаяГруппа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСлева;
		СвертываемаяГруппа.Подсказка            = " ";
		
		ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка, СвертываемаяГруппа, Картинка, Кнопка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьГруппу(ИмяЭлемента)
	Позиция = СтрНайти(ИмяЭлемента, "_", НаправлениеПоиска.СКонца);
	ИмяГруппы = Лев(ИмяЭлемента, Позиция - 1);
	ЭлементСписка = СвертываемыеГруппы.НайтиПоЗначению(ИмяГруппы);
	ЭлементСписка.Пометка = Не ЭлементСписка.Пометка И Не ВременноРазвернутыеГруппы.Свойство(ИмяГруппы);
	ВременноРазвернутыеГруппы.Удалить(ИмяГруппы);
	СохранитьНастройкиСвертываемыхГрупп();
	ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = Объект.Организация;
	ИначеЕсли ЗначениеЗаполнено(Объект.Страхователь) Тогда
		Организация = Объект.Страхователь;
	Иначе
		Организация = Объект.ГоловнаяОрганизация;
	КонецЕсли;
	
	ИменаПолей =
	"НаимЮЛПол,
	|НаимЮЛСокр,
	|РегистрационныйНомерФСС,
	|КодПодчиненностиФСС,
	|ДополнительныйКодФСС,
	|ИННЮЛ,
	|КППЮЛ,
	|ОГРН,
	|УполномоченныйПоПрямымВыплатамФСС";
	Сведения = ЗарплатаКадры.СведенияОбОрганизации(Организация, ИменаПолей, ТекущаяДатаСеанса());
	
	НаименованиеОрганизации = ?(ЗначениеЗаполнено(Сведения.НаимЮЛПол), Сведения.НаимЮЛПол, Сведения.НаимЮЛСокр);
	
	Если ЗначениеЗаполнено(Сведения.ДополнительныйКодФСС)
		И Сведения.ДополнительныйКодФСС <> Сведения.РегистрационныйНомерФСС Тогда
		РегистрацияФСС = Сведения.РегистрационныйНомерФСС + "/" + Сведения.КодПодчиненностиФСС + " (" + Сведения.ДополнительныйКодФСС + ")";
	Иначе
		РегистрацияФСС = Сведения.РегистрационныйНомерФСС + "/" + Сведения.КодПодчиненностиФСС;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
	ИначеЕсли ТипЗнч(Сведения.УполномоченныйПоПрямымВыплатамФСС) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизическоеЛицо = Сведения.УполномоченныйПоПрямымВыплатамФСС;
	Иначе
		ФизическоеЛицо = Объект.Ответственный;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация; 
	
	//  Вложения - Массив Из Структура, Неопределено - файлы вложений. Важно: допускаются только
	//              текстовые вложения (*.txt). Поля структуры элемента вложения:
	//   *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
	//   *ВидДанных - Строка - определяет преобразование переданных данных.
	//                Возможна передача одного из значений:
	//                  - ИмяФайла - Строка - полное имя файла вложения;
	//                  - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
	//                  - Текст - Строка - текст вложения;
	//   *Данные - Строка - данные для формирования вложения;
	Вложения = Новый Массив;
	
	ТекстXML = СЭДОФСС.ТекстXML(Объект.ИдентификаторСообщения);
	Если ЗначениеЗаполнено(ТекстXML) Тогда
		Кодировка = СериализацияБЗК.КодировкаXML(ТекстXML);
		ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, Кодировка, Истина);
		Вложение = Новый Структура("Представление, ВидДанных, Данные");
		Вложение.Представление = НСтр("ru = 'ЗапросСведенийДляРасчета'") + "_" + Объект.ИдентификаторСообщения + ".xml";
		Вложение.ВидДанных     = "Адрес";
		Вложение.Данные        = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		Вложения.Добавить(Вложение);
		Уточнение = НСтр("ru = '(xml приложен)'");
	Иначе
		Уточнение = НСтр("ru = '(xml пуст)'");
	КонецЕсли;
	
	//  ДанныеСообщения - Структура - данные для формирования сообщения:
	//   *Тема - Строка - тема сообщения;
	//   *Сообщение  - Строка - тело текст сообщения для отправки;
	//   *Получатель - Строка - условное имя получателя сообщения. Возможные значения:
	//        - "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
	//          необходимый адрес выбирается в соответствии с настройками доменной зоны
	//          серверов Интернет-поддержки;
	//        - "taxcom" - соответствует адресу "taxcom@1c.ru";
	//        - "backup" - соответствует адресу "support.backup@1c.ru";
	Сообщение = Новый Структура("Тема, Сообщение, Получатель, ИспользоватьСтантартныйШаблон");
	Сообщение.ИспользоватьСтантартныйШаблон = Ложь;
	Сообщение.Получатель = "v8";
	Сообщение.Тема = НСтр("ru = 'Вопрос по СЭДО (тип 100: запрос сведений для расчета пособия ФСС) от %1 (%2)'");
	Сообщение.Тема = СтрШаблон(Сообщение.Тема, Объект.Дата, Объект.ИдентификаторСообщения);
	Сообщение.Сообщение = НСтр(
		"ru = 'Здравствуйте!
		|Вопрос по документу ""[Документ]"" [Уточнение].
		|
		|<Опишите вопрос, приложите снимки экрана>.
		|
		|Регистрационный номер программы: <Укажите номер из регистрационной карточки программного продукта>.
		|
		|Организация: [Организация].
		|ОГРН: [ОГРН], ИНН: [ИНН], КПП: [КПП].
		|Регистрация в ФСС: [РегистрацияФСС].
		|Версия платформы: [ВерсияПлатформы].
		|Версия конфигурации: [ИмяКонфигурация] [ВерсияКонфигурации].
		|
		|С уважением, [Ответственный].'");
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Документ]",           Строка(Объект.Ссылка));
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Уточнение]",          Уточнение);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Организация]",        НаименованиеОрганизации);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ОГРН]",               Сведения.ОГРН);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ИНН]",                Сведения.ИННЮЛ);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[КПП]",                Сведения.КППЮЛ);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[РегистрацияФСС]",     РегистрацияФСС);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ИмяКонфигурация]",    Метаданные.Имя);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ВерсияКонфигурации]", Метаданные.Версия);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ВерсияПлатформы]",    СистемнаяИнформация.ВерсияПриложения);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Ответственный]",      ФизическоеЛицо);
	
	ПараметрыЖурнала = Неопределено;
	
	Возврат СообщенияВСлужбуТехническойПоддержки.ПодготовитьСообщение(Сообщение, Вложения, ПараметрыЖурнала);
КонецФункции

#КонецОбласти

#Область СпособВыплаты

&НаСервере
Процедура ОбновитьЭлементыСпособаВыплаты()
	Если Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособВыплатыПособия, Элементы.СтраницаВыплатитьНаКартуМИР);
	ИначеЕсли Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособВыплатыПособия, Элементы.СтраницаВыплатитьЧерезБанк);
	ИначеЕсли Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособВыплатыПособия, Элементы.СтраницаВыплатитьПочтовымПереводом);
	Иначе
		УстановитьСтраницу(Элементы.СтраницыСпособВыплатыПособия, Элементы.СтраницаВыплатитьНаКартуМИР);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницу(Страницы, ТекущаяСтраница)
	Для Каждого Страница Из Страницы.ПодчиненныеЭлементы Цикл
		Страница.Видимость = (Страница = ТекущаяСтраница);
	КонецЦикла;
	Страницы.ТекущаяСтраница = ТекущаяСтраница;
КонецПроцедуры

#КонецОбласти


#КонецОбласти
