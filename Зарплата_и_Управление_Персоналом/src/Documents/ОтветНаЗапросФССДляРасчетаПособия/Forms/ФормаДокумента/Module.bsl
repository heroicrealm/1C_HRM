///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		// Заполнение ключевых реквизитов из параметров.
		Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Параметры.Свойство("Сотрудник", Объект.Сотрудник);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				УстановитьПривилегированныйРежим(Истина);
				КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Ложь, Объект.Сотрудник, "Организация", ТекущаяДатаСеанса());
				УстановитьПривилегированныйРежим(Ложь);
				Если КадровыеДанные <> Неопределено Тогда
					Объект.Организация = КадровыеДанные.Организация;
				КонецЕсли;
			Иначе
				Параметры.Свойство("Организация", Объект.Организация);
			КонецЕсли;
		КонецЕсли;
		// Заполнение ключевых реквизитов из умолчаний.
		ЗначенияДляЗаполнения = Новый Структура;
		Если Не ЗначениеЗаполнено(Объект.Организация) И Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		КонецЕсли;
		Если ЗначенияДляЗаполнения.Количество() > 0 Тогда
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		КонецЕсли;
		// Заполнение второстепенных реквизитов.
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	СЭДОФСС.ПриСозданииФормыЗапросаИлиОтветаДляРасчетаПособия(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекстЗапросаXML = ТекущийОбъект.ХранилищеXML.Получить();
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_НастройкиПрямыхВыплатФСССотрудников"
		И Параметр.ФизическоеЛицо = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ОтветНаЗапросФССДляРасчетаПособия"
		И (Источник = Объект.Ссылка Или Не ЗначениеЗаполнено(Источник)) Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_СведенияОЗастрахованномЛицеФСС" Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_НастройкиПрямыхВыплатФССОрганизаций"
		И Параметр.ГоловнаяОрганизация = Объект.ГоловнаяОрганизация Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеСчетаКонтрагентов" Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БанковскиеКартыКонтрагентов"
		И Источник = Объект.КартаМИР Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = Объект.ФизическоеЛицо Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	ИначеЕсли ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_ОтпускПоУходуЗаРебенком"
		Или ИмяСобытия = "Запись_Отпуск"
		Или ИмяСобытия = "Запись_ЗаявлениеСотрудникаНаВыплатуПособия"
		Или ИмяСобытия = "Запись_РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий"
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеОтправкиПодтвержденияПолучения() Тогда
		ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СвертываемыеГруппыОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты);
	
	// До проверки объекта создаем его, дозаполняем и сами проверяем.
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Если Не Объект.ОтключитьПроверкиПроведения Тогда
			Отказ = Истина;
		КонецЕсли;
		ОбработатьСообщенияПользователю();
	КонецЕсли;
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтотОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, ЭтотОбъект.Объект);
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	ОбновитьЭлементыФормы();
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтветНаЗапросФССДляРасчетаПособия", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидПособияПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере("СотрудникПриИзменении");
КонецПроцедуры

&НаКлиенте
Процедура ПервичныйДокументПриИзменении(Элемент)
	ПервичныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВходящийЗапросПриИзменении(Элемент)
	ВходящийЗапросПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникГражданствоПриИзменении(Элемент)
	СотрудникГражданствоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособВыплатыПособияПриИзменении(Элемент)
	СпособВыплатыПособияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	БанкПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресПроживанияВидПриИзменении(Элемент)
	АдресПроживанияВидПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиСерияПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиНомерПриИзменении(Элемент)
	Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтказВНазначенииПособияПриИзменении(Элемент)
	ОтказВНазначенииПособияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтказВНазначенииПособияПричинаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект." + Элемент.Имя,
		НСтр("ru = 'Причина отказа в назначении пособия'"));
КонецПроцедуры

&НаКлиенте
Процедура АдресРегистрацииЗаПределамиРФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект." + Элемент.Имя,
		НСтр("ru = 'Адрес регистрации за пределами РФ'"));
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеПриИзменении(Элемент)
	ИсправлениеПриИзмененииСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеКодПричиныПриИзменении(Элемент)
	ИсправлениеКодПричиныПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеОписаниеПричиныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.ИсправлениеОписаниеПричины", Элемент.ПодсказкаВвода);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументПроведенИОтправленОбработкаНавигационнойСсылки(Элемент, Адрес, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Измерения = Новый Структура("ИсходящийДокумент", Объект.Ссылка);
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = Измерения;
	КлючРегистра = Новый(Тип("РегистрСведенийКлючЗаписи.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий"), ПараметрыЗаписи);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючРегистра);
	ОткрытьФорму(
		"РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ФормаЗаписи",
		ПараметрыФормы,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыИсключаемыеПериоды

&НаКлиенте
Процедура ИсключаемыеПериодыПриИзменении(Элемент)
	Объект.АвтозаполнениеПериодовОплаты = Ложь;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда) 
	ОтменитьВсеИсправленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияСотрудника(Команда)
	СотрудникПриИзмененииНаСервере("ОтменитьИсправленияСотрудника");
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияСпособаВыплатыПособия(Команда)
	ОтменитьИзмененияСпособаВыплатыПособияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

&НаКлиенте
Процедура Подключаемый_ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь)
	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИзменитьАдресРегистрации(Команда)
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ФизическоеЛицо);
		ПараметрыФормы.Вставить("ВводАдреса", Истина);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	Иначе
		Подключаемый_ПолеВводаКонтактнойИнформацииНачалоВыбора(Элементы.АдресПроживанияПредставление, Неопределено, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпособВыплатыПособия(Команда)
	УчетПособийСоциальногоСтрахованияКлиент.НастроитьСпособПрямыхВыплатФизическогоЛица(
		Объект.Организация,
		Объект.ФизическоеЛицо,
		ЭтотОбъект,
		Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПроверкиПроведения(Команда)
	Объект.ОтключитьПроверкиПроведения = Не Объект.ОтключитьПроверкиПроведения;
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВопросВПоддержку(Команда)
	
	ВопросВПоддержку = ПодготовитьВопросВПоддержку();
	
	//   *КодОшибки - Строка - идентификатор ошибки при отправки:
	//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
	//   *URLСтраницы - Строка - URL страницы отправки сообщения.
	Если Не ЗначениеЗаполнено(ВопросВПоддержку.КодОшибки) Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки'"));
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
			ВопросВПоддержку.URLСтраницы,
			ПараметрыОткрытия);
	Иначе
		ИнформированиеПользователяКлиент.ПоказатьПодробности(ВопросВПоддержку.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьРедактирования(Команда)
	ВключитьВозможностьРедактированияНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

&НаСервере
Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ПараметрыФиксации = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПараметрыФиксацииВторичныхДанных(Объект);
	ПараметрыФиксации.Вставить("ОписаниеФормы", ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы());
	
	ОписаниеЭлементовФормы = Новый Соответствие;
	ОписаниеПутиКРеквизитамОбъекта = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеПутиКРеквизитамОбъекта.ПрефиксПути = "Объект";
	Для Каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеПутиКРеквизитамОбъекта);
	КонецЦикла;
	
	// Адреса редактируется через реквизит формы, поэтому для них указываются пустой префикс пути к объекту.
	ОписаниеПутиКРеквизитамФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации Цикл
		ОписаниеЭлементовФормы.Вставить(КлючИЗначение.Ключ, ОписаниеПутиКРеквизитамФормы);
	КонецЦикла;
	
	ПараметрыФиксации.ОписаниеФормы.ОписаниеЭлементовФормы = ОписаниеЭлементовФормы;
	Возврат ПараметрыФиксации;
КонецФункции

&НаСервере
Функция ФиксацияБыстрыйПоискРеквизитов()
	БыстрыйПоискРеквизитов = Новый Соответствие; // Ключ - имя элемента, значение - имя реквизита.
	ПараметрыФиксации = ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"];
	Для Каждого КлючИЗначение Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		ИмяРеквизита = КлючИЗначение.Значение.ИмяРеквизита;
		// Поиск элементов по имени.
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			БыстрыйПоискРеквизитов.Вставить(ИмяРеквизита, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	Возврат БыстрыйПоискРеквизитов;
КонецФункции

&НаСервере
Процедура ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения(ОснованиеЗаполнения, ТекущаяСтрока = 0)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, ОснованиеЗаполнения, ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыОбъекта()
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыСтрок(ЭтотОбъект);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, ДокументОбъект);
	
	Если ДокументОбъект.ОбновитьВторичныеДанные(ЭтотОбъект.ПараметрыФиксацииВторичныхДанных) Тогда
		Если ТолькоПросмотр Или Не ПравоДоступа("Изменение", ДокументОбъект.Метаданные()) Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.ВывестиПредупреждениеОНаличииИзмененийВИсходныхДанныхКоторыеНельзяПрименить(
				ЭтотОбъект);
		Иначе
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);
			КонецЕсли;
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтотОбъект, Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаНаСервере(ИмяЭлемента)
	Элемент = Элементы[ИмяЭлемента];
	ОписаниеЭлементов = ФиксацияБыстрыйПоискРеквизитов();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(ЭтотОбъект, Элемент, ОписаниеЭлементов);
	ОбновитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.ОтветНаЗапросФССДляРасчетаПособия.ОбъектЗафиксирован(Объект);
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Процедура ОбновитьЭлементыКонтактнойИнформации()
	ИнициализироватьПоляВводаКонтактнойИнформации();
	Для Каждого КлючИЗначение Из ПоляВводаКонтактнойИнформации Цикл
		ИмяРеквизитаФормы = КлючИЗначение.Ключ;
		Если ИмяРеквизитаФормы = "БыстрыйПоискРеквизитовФормы" Тогда
			Продолжить;
		КонецЕсли;
		Реквизит          = КлючИЗначение.Значение;
		Если Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			КонтактнаяИнформацияБЗК.ОбновитьПолеВводаАдреса(ЭтотОбъект, ИмяРеквизитаФормы, Объект[Реквизит.Имя]);
		ИначеЕсли Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			КонтактнаяИнформацияБЗК.ОбновитьПолеВводаТелефона(ЭтотОбъект, ИмяРеквизитаФормы, Объект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоляВводаКонтактнойИнформации()
	Если ПоляВводаКонтактнойИнформации <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	// ПоляВводаКонтактнойИнформации - Структура
	//   * Ключ     - Строка    - Имя реквизита формы.
	//   * Значение - Структура - Свойства реквизита объекта.
	//       * Имя - Строка - Имя реквизита объекта хранящего значение контактной информации.
	//       * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
	//       * Вид - Строка - Имя предопределенного вида контактной информации.
	ПоляВводаКонтактнойИнформации = Новый Структура;
	БыстрыйПоискРеквизитовФормы = Новый Структура;
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "АдресПроживания";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	Реквизит = ОписаниеРеквизитаКонтактнойИнформации();
	Реквизит.Имя = "АдресРегистрации";
	Реквизит.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	Реквизит.Вид = "Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица";
	ПоляВводаКонтактнойИнформации.Вставить(Реквизит.Имя + "Представление", Реквизит);
	БыстрыйПоискРеквизитовФормы.Вставить(Реквизит.Имя, Реквизит.Имя + "Представление");
	
	ПоляВводаКонтактнойИнформации.Вставить("БыстрыйПоискРеквизитовФормы", БыстрыйПоискРеквизитовФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеРеквизитаКонтактнойИнформации()
	Возврат Новый Структура("Имя, Тип, Вид");
КонецФункции

&НаСервере
Процедура АдаптироватьСообщениеПользователюКПолямВводаКонтактнойИнформации(Сообщение)
	Если ЗначениеЗаполнено(Сообщение.Поле)
		И СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Сообщение.Поле)
		И ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы.Свойство(Сообщение.Поле) Тогда
		Сообщение.Поле = ПоляВводаКонтактнойИнформации.БыстрыйПоискРеквизитовФормы[Сообщение.Поле];
		Сообщение.ПутьКДанным = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаКонтактнойИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Реквизит = ПоляВводаКонтактнойИнформации[Элемент.Имя];
	Оповещение = Новый ОписаниеОповещения("ПолеВводаКонтактнойИнформацииЗавершениеВыбора", ЭтотОбъект, Реквизит);
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПредопределенноеЗначение(Реквизит.Вид),
		Объект[Реквизит.Имя]);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаКонтактнойИнформацииЗавершениеВыбора(РезультатВыбора, Реквизит) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Структура")Тогда
		Объект[Реквизит.Имя] = РезультатВыбора.Значение;
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, Реквизит.Имя);
		ФиксацияЗаполнитьРеквизитыОбъекта();
		ОбновитьЭлементыФормы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СвертываемыеГруппы

#Область ПараметрыСвертываемыхГрупп

&НаСервере
Процедура ПриОпределенииСвертываемыхГрупп(Группы)
	Группы.Добавить(Элементы.СведенияОЗастрахованномЛицеГруппа);
	Группы.Добавить(Элементы.АдресРегистрацииГруппа);
	Группы.Добавить(Элементы.УдостоверениеЛичностиГруппа);
	Группы.Добавить(Элементы.СрочныйТрудовойДоговорГруппа);
	Группы.Добавить(Элементы.ЛьготыГруппа);
	Группы.Добавить(Элементы.УсловияИсчисленияГруппа);
	Группы.Добавить(Элементы.ДанныеДляРасчетаГруппа);
	Группы.Добавить(Элементы.ОтпускПоУходуГруппа);
	Группы.Добавить(Элементы.СвидетельствоОРожденииГруппа);
	Группы.Добавить(Элементы.РебенокГруппа);
	Группы.Добавить(Элементы.СправкаОтДругогоРодителяГруппа);
	Группы.Добавить(Элементы.УсыновлениеОпекаГруппа);
	Группы.Добавить(Элементы.ПередачаНаВоспитаниеГруппа);
	Группы.Добавить(Элементы.СпособВыплатыГруппа);
	Группы.Добавить(Элементы.ИсключаемыеПериодыГруппа);
	Группы.Добавить(Элементы.ПериодыПростояГруппа);
	Группы.Добавить(Элементы.ИзвещениеФССГруппа);
	Группы.Добавить(Элементы.ИсправлениеГруппа);
	Группы.Добавить(Элементы.СтраховательГруппа);
	Группы.Добавить(Элементы.ОтказВНазначенииПособияГруппа);
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияЭлементовСвертываемыхГрупп()
	ГруппаСпособовВыплаты = Элементы.СпособВыплатыГруппа.Родитель;
	Элементы.Переместить(Элементы.ИзменитьСпособВыплатыПособий, ГруппаСпособовВыплаты.ПодчиненныеЭлементы[0]);
	ГруппаАдресаРегистрации = Элементы.АдресРегистрацииГруппа.Родитель;
	Элементы.Переместить(Элементы.ИзменитьАдрес, ГруппаАдресаРегистрации.ПодчиненныеЭлементы[0]);
КонецПроцедуры

&НаСервере
Процедура ПриОпределенииСвойствСвертываемойГруппы(Группа, Представление, Заполнена, Развернута, Видимость)
	
	Если Группа = Элементы.СведенияОЗастрахованномЛицеГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеЗастрахованногоЛица();
		
	ИначеЕсли Группа = Элементы.АдресРегистрацииГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеАдреса("АдресРегистрации", Истина);
		
	ИначеЕсли Группа = Элементы.УдостоверениеЛичностиГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = СЭДОФСС.ПредставлениеУдостоверенияЛичности(
			Объект.УдостоверениеЛичностиВид,
			Объект.УдостоверениеЛичностиСерия,
			Объект.УдостоверениеЛичностиНомер,
			Объект.УдостоверениеЛичностиДатаВыдачи,
			Объект.УдостоверениеЛичностиСрокДействия,
			Объект.УдостоверениеЛичностиКемВыдан);
		
	ИначеЕсли Группа = Элементы.СрочныйТрудовойДоговорГруппа Тогда
		Видимость = ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаНачала)
			И ЗначениеЗаполнено(Объект.ТрудовойДоговорДатаОкончания) Тогда
			Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ТрудовойДоговорДатаНачала, Объект.ТрудовойДоговорДатаОкончания);
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ЛьготыГруппа Тогда
		Видимость = ЭтоБольничный;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеЛьгот();
		
	ИначеЕсли Группа = Элементы.УсловияИсчисленияГруппа Тогда
		Видимость = ЭтоБольничный;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеУсловийИсчисления();
		
	ИначеЕсли Группа = Элементы.ДанныеДляРасчетаГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеДанныхДляРасчета();
		
	ИначеЕсли Группа = Элементы.ОтпускПоУходуГруппа Тогда
		Видимость = ЭтоБольничныйПоБиР;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеОтпускаПоУходу();
		
	ИначеЕсли Группа = Элементы.СвидетельствоОРожденииГруппа Тогда
		Видимость = ЭтоОтпускПоУходу;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеСвидетельстваОРождении();
		
	ИначеЕсли Группа = Элементы.РебенокГруппа Тогда
		Видимость = ЭтоОтпускПоУходу;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеРебенка();
		
	ИначеЕсли Группа = Элементы.СправкаОтДругогоРодителяГруппа Тогда
		Видимость = ЭтоОтпускПоУходу;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеСправкиОтДругогоРодителя();
		
	ИначеЕсли Группа = Элементы.УсыновлениеОпекаГруппа Тогда
		Видимость = ЭтоОтпускПоУходу;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеУсыновленияОпеки();
		
	ИначеЕсли Группа = Элементы.ПередачаНаВоспитаниеГруппа Тогда
		Видимость = ЭтоОтпускПоУходу;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеПередачиНаВоспитание();
		
	ИначеЕсли Группа = Элементы.СпособВыплатыГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Заполнена = ЗначениеЗаполнено(Объект.СпособВыплатыПособия);
		Если Не Заполнена Тогда
			Представление = НСтр("ru = 'Не заполнен'");
		ИначеЕсли Не Развернута Тогда
			Если Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
				Представление = ПредставлениеАдреса("АдресПроживания", Ложь);
			Иначе
				Представление = СЭДОФСС.ПредставлениеСпособаВыплаты(Объект);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ИсключаемыеПериодыГруппа Тогда
		Видимость = ЭтоОбычныйБольничный;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		Заполнена = Объект.ИсключаемыеПериоды.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеИсключаемыхПериодов();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ПериодыПростояГруппа Тогда
		Видимость = ЭтоОбычныйБольничный;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		Заполнена = Объект.ПериодыПростоя.Количество() > 0;
		Если Заполнена И Не Развернута Тогда
			Представление = ПредставлениеПериодовПростоя();
		КонецЕсли;
		
	ИначеЕсли Группа = Элементы.ИзвещениеФССГруппа Тогда
		Видимость = Не Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Представление = ПредставлениеИзвещенияФСС();
		
	ИначеЕсли Группа = Элементы.ИсправлениеГруппа Тогда
		Представление = ПредставлениеСвертываемойГруппыИсправления();
		
	ИначеЕсли Группа = Элементы.ОтказВНазначенииПособияГруппа Тогда
		Видимость = Объект.ОтказВНазначенииПособия;
		Если Не Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Развернута    = Истина;
		Представление = ПредставлениеОтказаВНазначенииПособияГруппа();
		
	ИначеЕсли Группа = Элементы.СтраховательГруппа Тогда
		Представление = ПредставлениеСтрахователя();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсСвертываемыхГрупп

&НаСервере
Процедура ОбновитьСвертываемыеГруппы()
	ВидимостьОбновлена = Ложь;
	
	ИнициализироватьСвертываемыеГруппы(ВидимостьОбновлена);
	
	Если Не ВидимостьОбновлена Тогда
		Для Каждого ЭлементСписка Из СвертываемыеГруппы Цикл
			ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КартинкаСвертываемойГруппыНажатие(Элемент)
	СвернутьРазвернутьГруппу(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КнопкаСвертываемойГруппы(Команда)
	СвернутьРазвернутьГруппу(Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура СвертываемыеГруппыОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ВременноРазвернутыеГруппы.Очистить();
КонецПроцедуры

&НаСервере
Процедура СвертываемыеГруппыАдаптироватьСообщениеПользователю(Сообщение)
	Элемент = Элементы.Найти(Сообщение.Поле);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Элемент.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	Пока Истина Цикл
		Элемент = Элемент.Родитель;
		Если ТипЗнч(Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
			Прервать;
		КонецЕсли;
		ЭлементСписка = СвертываемыеГруппы.НайтиПоЗначению(Элемент.Имя);
		Если ЭлементСписка <> Неопределено И Не ЭлементСписка.Пометка Тогда
			ВременноРазвернутыеГруппы.Вставить(ЭлементСписка.Значение, Истина);
			ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СвертываемыеГруппыОбновить(Группа)
	ОбновитьЭлементыСвертываемойГруппы(СвертываемыеГруппы.НайтиПоЗначению(Группа.Имя));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеМеханизмыСвертываемыхГрупп

&НаСервере
Процедура ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка, СвертываемаяГруппа = Неопределено, Картинка = Неопределено, Кнопка = Неопределено)
	ИмяГруппы = ЭлементСписка.Значение;
	Родитель  = Элементы[ИмяГруппы + "_1"];
	
	Если СвертываемаяГруппа = Неопределено Тогда
		СвертываемаяГруппа = Элементы[ИмяГруппы];
		Картинка    = Элементы[ИмяГруппы + "_Картинка"];
		Кнопка      = Элементы[ИмяГруппы + "_Команда"];
	КонецЕсли;
	
	Представление = "";
	Заполнена     = Неопределено;
	Развернута    = ЭлементСписка.Пометка Или ВременноРазвернутыеГруппы.Свойство(ИмяГруппы);
	Видимость     = Родитель.Видимость;
	
	ПриОпределенииСвойствСвертываемойГруппы(СвертываемаяГруппа, Представление, Заполнена, Развернута, Видимость);
	
	Если Видимость <> Родитель.Видимость Тогда
		Родитель.Видимость = Видимость;
	КонецЕсли;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СвертываемаяГруппа.Видимость = Развернута;
	
	Если Заполнена = Неопределено Тогда
		Заполнена = ЗначениеЗаполнено(Представление);
	КонецЕсли;
	Если Не Развернута И Не Заполнена И Не ЗначениеЗаполнено(Представление) Тогда
		Представление = НСтр("ru = 'Нет'");
	КонецЕсли;
	Если Заполнена Тогда
		Картинка.Картинка = ?(Развернута, БиблиотекаКартинок.СтрелкаВнизЗеленая, БиблиотекаКартинок.СтрелкаВправоЗеленая);
		Кнопка.ЦветТекста = ЦветаСтиля.ОбычнаяГруппаЦветБЗК;
	Иначе
		Картинка.Картинка = ?(Развернута, БиблиотекаКартинок.СтрелкаВнизСераяБЗК, БиблиотекаКартинок.СтрелкаВправоСераяБЗК);
		Кнопка.ЦветТекста = ЦветаСтиля.ЗаголовокПоляЗаполняемогоАвтоматическиЦветБЗК;
	КонецЕсли;
	Если Развернута Или Не ЗначениеЗаполнено(Представление) Или Представление = "-" Тогда
		Кнопка.Заголовок = СвертываемаяГруппа.Заголовок;
	Иначе
		Кнопка.Заголовок = СвертываемаяГруппа.Заголовок + ": " + Представление;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвертываемыеГруппы(ВидимостьОбновлена)
	// СвертываемыеГруппы - СписокЗначений
	//   * Пометка - Показывать
	//   * Значение - Префикс элементов
	//   * Представление - Имя группы
	// Сохраняется в хранилище. При чтении - заполняет только пометки.
	Если СвертываемыеГруппы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	ВременноРазвернутыеГруппы = Новый Структура;
	// Наполнение списка групп.
	МассивГрупп = Новый Массив;
	ПриОпределенииСвертываемыхГрупп(МассивГрупп);
	Для Каждого Группа Из МассивГрупп Цикл
		СвертываемыеГруппы.Добавить(Группа.Имя);
	КонецЦикла;
	// Чтение настроек списка.
	ПрочитатьНастройкиСвертываемыхГрупп();
	// Добавление элементов формы.
	ДобавитьЭлементыСвертываемыхГрупп();
	// Отключение второго цикла.
	ВидимостьОбновлена = Истина;
	ПослеДобавленияЭлементовСвертываемыхГрупп();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиСвертываемыхГрупп()
	СписокЗначений = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, "СвертываемыеГруппы");
	Если ТипЗнч(СписокЗначений) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из СписокЗначений Цикл
			ЭлементСпискаФормы = СвертываемыеГруппы.НайтиПоЗначению(ЭлементСписка.Значение);
			Если ЭлементСпискаФормы <> Неопределено Тогда
				ЭлементСпискаФормы.Пометка = ЭлементСписка.Пометка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСвертываемыхГрупп()
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, "СвертываемыеГруппы", СвертываемыеГруппы);
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыСвертываемыхГрупп()
	Для Каждого ЭлементСписка Из СвертываемыеГруппы Цикл
		ИмяГруппы = ЭлементСписка.Значение;
		СвертываемаяГруппа = Элементы.Найти(ИмяГруппы);
		Если СвертываемаяГруппа = Неопределено Тогда
			Текст = СтрШаблон(НСтр("ru = 'Не найдена сворачивающаяся группа %1'"), ИмяГруппы);
			СообщенияПользователюБЗК.СообщитьПользователю(Текст);
			СвертываемыеГруппы.Очистить();
			Возврат;
		КонецЕсли;
		Родитель = СвертываемаяГруппа.Родитель;
		
		ГруппаСтрок = Элементы.Вставить(ИмяГруппы + "_1", Тип("ГруппаФормы"), Родитель, СвертываемаяГруппа);
		ГруппаСтрок.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтрок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаСтрок.Отображение = СвертываемаяГруппа.Отображение;
		ГруппаСтрок.ОтображатьЗаголовок = Ложь;
		
		ГруппаКолонок = Элементы.Добавить(ИмяГруппы + "_2", Тип("ГруппаФормы"), ГруппаСтрок);
		ГруппаКолонок.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКолонок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаКолонок.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКолонок.ОтображатьЗаголовок = Ложь;
		ГруппаКолонок.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаКолонок.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		Картинка = Элементы.Добавить(ИмяГруппы + "_Картинка", Тип("ДекорацияФормы"), ГруппаКолонок);
		Картинка.Вид         = ВидДекорацииФормы.Картинка;
		Картинка.Гиперссылка = Истина;
		Картинка.УстановитьДействие("Нажатие", "Подключаемый_КартинкаСвертываемойГруппыНажатие");
		
		Команда = Команды.Добавить(ИмяГруппы + "_Команда");
		Команда.Действие = "Подключаемый_КнопкаСвертываемойГруппы";
		
		Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ГруппаКолонок);
		Кнопка.ИмяКоманды        = Команда.Имя;
		Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		Кнопка.ЦветТекста        = ЦветаСтиля.ОбычнаяГруппаЦветБЗК;
		
		Если ГруппаСтрок.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
			Или ГруппаСтрок.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение Тогда
			Кнопка.Шрифт = ШрифтыСтиля.ОбычнаяГруппаШрифтБЗК;
		КонецЕсли;
		
		Элементы.Переместить(СвертываемаяГруппа, ГруппаСтрок);
		
		СвертываемаяГруппа.Поведение            = ПоведениеОбычнойГруппы.Обычное;
		СвертываемаяГруппа.Отображение          = ОтображениеОбычнойГруппы.Нет;
		СвертываемаяГруппа.ОтображатьЗаголовок  = Ложь;
		СвертываемаяГруппа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСлева;
		СвертываемаяГруппа.Подсказка            = " ";
		
		ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка, СвертываемаяГруппа, Картинка, Кнопка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьГруппу(ИмяЭлемента)
	Позиция = СтрНайти(ИмяЭлемента, "_", НаправлениеПоиска.СКонца);
	ИмяГруппы = Лев(ИмяЭлемента, Позиция - 1);
	ЭлементСписка = СвертываемыеГруппы.НайтиПоЗначению(ИмяГруппы);
	ЭлементСписка.Пометка = Не ЭлементСписка.Пометка И Не ВременноРазвернутыеГруппы.Свойство(ИмяГруппы);
	ВременноРазвернутыеГруппы.Удалить(ИмяГруппы);
	СохранитьНастройкиСвертываемыхГрупп();
	ОбновитьЭлементыСвертываемойГруппы(ЭлементСписка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Форма

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = "Объект")
	ПервичнаяИнициализицияФормы = (Элементы.УсловияИсчисленияКод1.СписокВыбора.Количество() = 0);
	Если ПервичнаяИнициализицияФормы Тогда
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод1);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод2);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.ЗаполнитьСписокВыбораКодУсловийИсчисления(Элементы.УсловияИсчисленияКод3);
		СЭДОФСС.СписокВыбораКатегорийЗастрахованныхЛиц(Элементы.КатегорияЗастрахованногоЛица.СписокВыбора);
		СЭДОФСС.СписокВыбораПричинИсправления(Элементы.ИсправлениеКодПричины.СписокВыбора);
	Иначе
		Документ = ?(ТекущийОбъект = "Объект", Объект, ТекущийОбъект);
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(ЭтотОбъект, Документ);
	КонецЕсли;
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыФиксацииВторичныхДанных());
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(
		ЭтотОбъект,
		ФиксацияБыстрыйПоискРеквизитов());
	ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Ложь);
	
	ФиксацияЗаполнитьРеквизитыОбъекта();
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	
	ТолькоПросмотр = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект);
	
	УстановитьФункциональныеОпцииФормы();
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияПрочитатьОбновитьВторичныеДанные()
	ОтключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные");
	ПодключитьОбработчикОжидания("ПрочитатьОбновитьВторичныеДанные", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОбновитьВторичныеДанные()
	ПрочитатьОбновитьВторичныеДанныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОбновитьВторичныеДанныеНаСервере()
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ФиксацияЗаполнитьРеквизитыОбъекта();
		ОбновитьЭлементыФормы();
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Иначе
		Прочитать();
		Надпись = Элементы.Найти("ПредупреждениеОбновленияВторичныхДанных");
		Если Надпись <> Неопределено И Надпись.Видимость Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	Объект.АвтозаполнениеПериодовОплаты = Истина;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	ОбновитьЭлементыФормы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	ДокументЗафиксирован = ОбъектЗафиксирован();
	ТолькоПросмотр = ДокументЗафиксирован;
	
	// Заполнени флажков формы ЭтоОбычныйБольничный, ЭтоБольничныйПоБиР и ЭтоОтпускПоУходу.
	СведенияОВидеПособия = Документы.ОтветНаЗапросФССДляРасчетаПособия.СведенияОВидеПособия(Объект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияОВидеПособия);
	ЭтоБольничный = ЭтоОбычныйБольничный Или ЭтоБольничныйПоБиР;
	
	ОбновитьВидимостьЭлементовПоПравам();
	
	ОбновитьКнопкиФормы(ДокументЗафиксирован);
	
	ОбновитьПанельСостоянияДокумента();
	
	ОбновитьПоляШапкиФормы();
	
	ОбновитьЭлементыКонтактнойИнформации();
	
	ОбновитьЭлементыСпособаВыплатыПособия();
	
	ОбновитьГруппуИзвещениеФСС();
	
	ОбновитьГруппуАдресРегистрации();
	
	ОбновитьЭлементыГруппыИсправление();
	
	ОбновитьСвертываемыеГруппы();
	
	ОбновитьВидимостьГруппПоВидуПособия();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиФормы(ДокументЗафиксирован)
	
	Элементы.ФормаОбновитьВторичныеДанные.Видимость           = Не ДокументЗафиксирован;
	Элементы.ФормаОтменитьВсеИсправления.Видимость            = Не ДокументЗафиксирован;
	Элементы.ОтменитьИзмененияКадровыхДанных.Видимость        = Не ДокументЗафиксирован;
	Элементы.ОтменитьИзмененияСпособаВыплатыПособия.Видимость = Не ДокументЗафиксирован;
	
	ДокументОтправлен = Не Объект.ПометкаУдаления И ЗначениеЗаполнено(Объект.ДатаОтправки);
	Элементы.ОтправитьВФонд.ТолькоВоВсехДействиях = ДокументОтправлен;
	
	Элементы.ФормаОтключитьПроверкиПроведения.Пометка = Объект.ОтключитьПроверкиПроведения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельСостоянияДокумента()
	ПоложениеКнопкиЗакрыть     = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КнопкаПоУмолчанию          = Неопределено;
	ПравоИзменения             = (Элементы.Найти("ФормаПровести") <> Неопределено);
	Если Объект.ПометкаУдаления Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПомеченНаУдаление;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаЗаписать;
		КонецЕсли;
	ИначеЕсли Не Объект.Проведен Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументНеПроведен;
		Если ПравоИзменения Тогда
			КнопкаПоУмолчанию = Элементы.ФормаПровести;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		ТекущаяСтраница = Элементы.СтраницаДокументПроведенИНеОтправлен;
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ОбщиеФормыСЭДОФСС.Команды.ОтправитьВФонд) Тогда
			КнопкаПоУмолчанию = Элементы.ОтправитьВФонд;
		КонецЕсли;
	Иначе
		СостояниеОтправки = СостояниеОтправки();
		Если СостояниеОтправки.ЕстьОшибки Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьОшибки;
			Элементы.НадписьДокументПроведенИЕстьОшибки.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		ИначеЕсли СостояниеОтправки.ЕстьПредпреждения Тогда
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИЕстьПредпруждения;
			Элементы.НадписьДокументПроведенИЕстьПредпруждения.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиСкопировать = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Если ПравоИзменения Тогда
				КнопкаПоУмолчанию = Элементы.КнопкаСкопировать;
			КонецЕсли;
		Иначе
			ТекущаяСтраница = Элементы.СтраницаДокументПроведенИОтправлен;
			Элементы.НадписьДокументПроведенИОтправлен.Заголовок = СостояниеОтправки.ЗаголовокНадписи;
			ПоложениеКнопкиЗакрыть = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			КнопкаПоУмолчанию = Элементы.ФормаЗакрыть;
		КонецЕсли;
	КонецЕсли;
	Если КнопкаПоУмолчанию <> Неопределено Тогда
		КнопкаПоУмолчанию.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.СтраницыСостоянияДокумента.ТекущаяСтраница = ТекущаяСтраница;
	Если ПравоИзменения Тогда
		Элементы.КнопкаСкопировать.ПоложениеВКоманднойПанели = ПоложениеКнопкиСкопировать;
	КонецЕсли;
	Элементы.ФормаЗакрыть.ПоложениеВКоманднойПанели = ПоложениеКнопкиЗакрыть;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоляШапкиФормы()
	
	НастроитьПолеВводаПервичногоДокумента(
		Объект.ВидПособия,
		Объект.Сотрудник,
		Элементы.ПервичныйДокумент,
		Объект.ПервичныйДокумент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьПолеВводаПервичногоДокумента(ВидПособия, Сотрудник, ПолеВвода, ПервичныйДокумент)
	СвойстваПособия = ПрямыеВыплатыПособийСоциальногоСтрахования.СвойстваПособияФСС(ВидПособия, ПервичныйДокумент);
	
	ОбратныйИндекс = СвойстваПособия.ПараметрыВыбора.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		ПараметрВыбора = СвойстваПособия.ПараметрыВыбора[ОбратныйИндекс];
		Если СтрЗаканчиваетсяНа(ПараметрВыбора.Имя, "ПособиеВыплачиваетсяФСС") Тогда
			СвойстваПособия.ПараметрыВыбора.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТипов = СвойстваПособия.ОписаниеТипов;
	Если ОписаниеТипов = Неопределено Тогда
		Если ПолеВвода.ВыбиратьТип Тогда
			ОписаниеТипов = Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия.Реквизиты.ДокументОснование.Тип;
		Иначе
			ОписаниеТипов = Новый ОписаниеТипов;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОписаниеТипов.СодержитТип(ТипЗнч(ПервичныйДокумент)) Тогда
		ПервичныйДокумент = ОписаниеТипов.ПривестиЗначение();
	КонецЕсли;
	
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Если СвойстваПособия.ОтбиратьПоСотруднику Тогда
			ПутьКРеквизитуСвязи = "Объект.Сотрудник";
		Иначе
			ПутьКРеквизитуСвязи = "Объект.ФизическоеЛицо";
		КонецЕсли;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Сотрудник", ПутьКРеквизитуСвязи));
	КонецЕсли;
	
	// Скрытие поля "Документ основание" в случае, когда выбор документа технически невозможен, а именно:
	// Описание типов пустое, либо типов несколько и первичный документ не заполнен (ПервичныйДокумент = Неопределено);
	// И выбор типа первичного документа запрещен и тип строго зависит от вида пособия (Не ПолеВвода.ВыбиратьТип).
	ПолеВвода.Видимость             = (ПервичныйДокумент <> Неопределено Или ПолеВвода.ВыбиратьТип);
	ПолеВвода.ОграничениеТипа       = ОписаниеТипов;
	ПолеВвода.Заголовок             = СвойстваПособия.ЗаголовокПоля;
	ПолеВвода.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	ПолеВвода.ПараметрыВыбора       = Новый ФиксированныйМассив(СвойстваПособия.ПараметрыВыбора);
КонецПроцедуры

&НаСервере
Функция СостояниеОтправки()
	РегистрацияСведенийОбъект = РеквизитФормыВЗначение("РегистрацияСведений");
	РегистрацияСведенийОбъект.ИсходящийДокумент = Объект.Ссылка;
	РегистрацияСведенийОбъект.Прочитать();
	ЗначениеВРеквизитФормы(РегистрацияСведенийОбъект, "РегистрацияСведений");
	
	Состояние         = РегистрацияСведений.Состояние;
	ВариантыСостояний = Перечисления.СостоянияДокументаСЭДОФСС;
	ЕстьОшибки        = Ложь;
	ЕстьПредпреждения = Ложь;
	Если Состояние = ВариантыСостояний.ПодготовленКОтправке Тогда
		Представление = НСтр("ru = 'Проведен и <a href=""1"">готов к отправке</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаПриОтправке Тогда
		Представление = НСтр("ru = 'При отправке в Фонд <a href=""1"">возникла ошибка</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Отправлен Тогда
		Представление = НСтр("ru = '<a href=""1"">Отправлен в Фонд</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ОшибкаЛогическогоКонтроля Тогда
		ЕстьОшибки = Истина;
		Представление = НСтр("ru = 'Не принят, см. <a href=""1"">ошибки логического контроля</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.Принят Тогда
		Представление = НСтр("ru = '<a href=""1"">Успешно принят ФСС</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.НеПринят Тогда
		ЕстьОшибки = Истина;
		Представление = НСтр("ru = 'Документ не принят, см. <a href=""1"">протокол</a>'");
	ИначеЕсли Состояние = ВариантыСостояний.ПринятСЗамечаниями Тогда
		ЕстьПредпреждения = Истина;
		Представление = НСтр("ru = '<a href=""1"">Успешно принят ФСС</a>'");
	Иначе
		СостояниеСтрокой = Строка(Состояние);
		СостояниеСтрокой = НРег(Лев(СостояниеСтрокой, 1)) + Сред(СостояниеСтрокой, 2);
		Представление = СтрШаблон(НСтр("ru = 'Проведен и <a href=""1"">%1</a>'"), СостояниеСтрокой);
	КонецЕсли;
	
	Результат = Новый Структура("Состояние, ЗаголовокНадписи, ЕстьОшибки, ЕстьПредпреждения");
	Результат.Состояние         = Состояние;
	Результат.ЗаголовокНадписи  = СтроковыеФункции.ФорматированнаяСтрока(Представление);
	Результат.ЕстьОшибки        = ЕстьОшибки;
	Результат.ЕстьПредпреждения = ЕстьПредпреждения;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСообщенияПользователю()
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Если Объект.ОтключитьПроверкиПроведения Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		// Адаптация сообщений к особенностям формы.
		Если ЗначениеЗаполнено(Сообщение.Поле) Тогда
			АдаптироватьСообщениеПользователюКПолямВводаКонтактнойИнформации(Сообщение);
			СвертываемыеГруппыАдаптироватьСообщениеПользователю(Сообщение);
		КонецЕсли;
		Сообщение.Сообщить();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементовПоПравам()
	Права = СЭДОФСС.ПраваНаФактическиеНачисленияВДокументе(Объект);
	ПравоПросмотраФактическихНачислений = Права.Просмотр;
	ПравоИзмененияФактическихНачислений = Права.Редактирование;
	Элементы.ПервыйРасчетныйГодЗаработок.Видимость   = ПравоПросмотраФактическихНачислений;
	Элементы.ВторойРасчетныйГодЗаработок.Видимость   = ПравоПросмотраФактическихНачислений;
	Элементы.ПервыйРасчетныйГодЗаработок.Доступность = ПравоИзмененияФактическихНачислений;
	Элементы.ВторойРасчетныйГодЗаработок.Доступность = ПравоИзмененияФактическихНачислений;
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуИзвещениеФСС()
	
	ЗаголовокНадписи = "";
	Если ЗначениеЗаполнено(Объект.ИзвещениеФССНомер)
		И ЗначениеЗаполнено(Объект.ИзвещениеФССДата) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзвещениеФСС.Ссылка КАК Ссылка,
		|	ИзвещениеФСС.Представление КАК Представление
		|ИЗ
		|	Документ.ИзвещениеФСС КАК ИзвещениеФСС
		|ГДЕ
		|	ИзвещениеФСС.ВходящийНомер = &ВходящийНомер
		|	И ИзвещениеФСС.ВходящаяДата = &ВходящаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзвещениеФСС.ПометкаУдаления,
		|	ИзвещениеФСС.Ссылка УБЫВ";
		Запрос.УстановитьПараметр("ВходящийНомер", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Объект.ИзвещениеФССНомер));
		Запрос.УстановитьПараметр("ВходящаяДата",  Объект.ИзвещениеФССДата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Адрес = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
			ЗаголовокНадписи = СтроковыеФункции.ФорматированнаяСтрока(
				СтрШаблон("<a href=""%1"">%2</a>", Адрес, Выборка.Представление));
		КонецЕсли;
	КонецЕсли;
	Элементы.ИзвещениеФСССсылка.Заголовок = ЗаголовокНадписи;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппуАдресРегистрации()
	Элементы.АдресРегистрацииЗаПределамиРФ.Видимость = ЗначениеЗаполнено(Объект.АдресРегистрацииЗаПределамиРФ)
		Или (Объект.КодСтраныГражданства <> "643" И Не ЗначениеЗаполнено(Объект.АдресРегистрации));
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьГруппПоВидуПособия()
	Элементы.НомерЛН.Видимость                          = ЭтоБольничный;
	Элементы.РасчетныйПериодГруппа.Видимость            = ВидимостьРасчетногоПериода();
	Элементы.СтажГруппа.Видимость                       = ВидимостьСтажа();
	Элементы.ДоляВремени.Видимость                      = ВидимостьДолиВремени();
	Элементы.КалендарныхДнейРасчетногоПериода.Видимость = ЭтоБольничный;
	Элементы.ПериодОплатыЗаСчетФССГруппа.Видимость      = ВидимостьПериодаОплатыЗаСчетФСС();
КонецПроцедуры

&НаСервере
Функция ВидимостьРасчетногоПериода()
	Возврат ЭтоБольничный;
КонецФункции

&НаСервере
Функция ВидимостьСтажа()
	Возврат ЭтоБольничный;
КонецФункции

&НаСервере
Функция ВидимостьДолиВремени()
	Возврат ЭтоОбычныйБольничный Или ЭтоОтпускПоУходу;
КонецФункции

&НаСервере
Функция ВидимостьПериодаОплатыЗаСчетФСС()
	Возврат ЭтоОбычныйБольничный;
КонецФункции

#КонецОбласти

#Область Организация

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
	Иначе
		Объект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Страхователь);
	КонецЕсли;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Организация");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Организация");
	УстановитьФункциональныеОпцииФормы();
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПредставлениеСтрахователя()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.НомерСтрахователяФСС) Тогда
		Представления.Добавить(НСтр("ru = 'регистрационный номер'") + " " + Объект.НомерСтрахователяФСС);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		Представления.Добавить(НСтр("ru = 'код подчиненности'") + " " + Объект.КодПодчиненностиФСС);
	КонецЕсли;
	Если Представления.Количество() = 0 И ЗначениеЗаполнено(Объект.Страхователь) Тогда
		Представления.Добавить(Строка(Объект.Страхователь));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область Сотрудник

&НаСервере
Процедура СотрудникПриИзмененииНаСервере(ИмяСобытия)
	Если ИмяСобытия = "СотрудникПриИзменении" Тогда
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Объект.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо");
		Иначе
			Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Сотрудник");
	КонецЕсли;
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Сотрудник");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СотрудникГражданствоПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СотрудникГражданство");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("СотрудникГражданство");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗастрахованногоЛица()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.СотрудникФамилия + " " + Объект.СотрудникИмя + " " + Объект.СотрудникОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения'") + " " + Формат(Объект.СотрудникДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СотрудникСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1'"), Объект.СотрудникСНИЛС));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеЛьгот()
	Возврат Строка(Объект.ПричинаПредоставленияЛьготы);
КонецФункции

&НаСервере
Функция ПредставлениеАдреса(Префикс, ЕстьПолеЗаПределамиРФ)
	Если ЕстьПолеЗаПределамиРФ И ЗначениеЗаполнено(Объект[Префикс + "ЗаПределамиРФ"]) Тогда
		Возврат Объект[Префикс + "ЗаПределамиРФ"];
	КонецЕсли;
	
	ЗначениеАдреса = Объект[Префикс];
	Дом            = Объект[Префикс + "Дом"];
	Корпус         = Объект[Префикс + "Корпус"];
	Квартира       = Объект[Префикс + "Квартира"];
	ФИАСДом        = Объект[Префикс + "ФИАСДом"];
	ФИАСРО         = Объект[Префикс + "ФИАСРО"];
	Представление  = "";
	
	// Поиск адреса был осуществлен при загрузке входящего запроса - по сведениям о застрахованном лице.
	Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
	КонецЕсли;
	
	// Поиск адреса по идентификатору дома.
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ФИАСДом) Тогда
		Попытка
			ПараметрыПолученияАдреса = Новый Структура;
			ПараметрыПолученияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдреса = РаботаСАдресами.АдресПоИдентификатору(ФИАСДом, ПараметрыПолученияАдреса);
		Исключение
			ЗначениеАдреса = "";
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при поиске адреса %1 по идентификатору %2: %3'");
			Текст = СтрШаблон(Текст, Префикс, ФИАСДом, Ошибка);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
		КонецПопытки;
		Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Квартира) Тогда
				Представление = Представление + ", " + Квартира;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск адреса по идентификатору родительского объекта.
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ФИАСРО) Тогда
		Попытка
			ПараметрыПолученияАдреса = Новый Структура;
			ПараметрыПолученияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдреса = РаботаСАдресами.АдресПоИдентификатору(ФИАСРО, ПараметрыПолученияАдреса);
		Исключение
			ЗначениеАдреса = "";
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при поиске адреса %1 по идентификатору %2: %3'");
			Текст = СтрШаблон(Текст, Префикс, ФИАСРО, Ошибка);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
		КонецПопытки;
		Если ЗначениеЗаполнено(ЗначениеАдреса) Тогда
			Представление = СЭДОФСС.КраткоеПредставлениеАдреса(ЗначениеАдреса);
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Дом) Тогда
				Представление = Представление + ", " + Дом;
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Корпус) Тогда
				Представление = Представление + ", " + Корпус;
			КонецЕсли;
			Если ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(Квартира) Тогда
				Представление = Представление + ", " + Квартира;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

#КонецОбласти

#Область ДанныеДляРасчета

&НаСервере
Функция ПредставлениеУсловийИсчисления()
	Представления = Новый Массив;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод1) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод2) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсловияИсчисленияКод3) Тогда
		Представления.Добавить(Объект.УсловияИсчисленияКод3);
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеДанныхДляРасчета()
	Представления = Новый Массив;
	
	Если ВидимостьРасчетногоПериода() Тогда
		Годы = Новый Массив;
		Если ЗначениеЗаполнено(Объект.ПервыйРасчетныйГод) Тогда
			Годы.Добавить(Формат(Объект.ПервыйРасчетныйГод, "ЧГ="));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ВторойРасчетныйГод) Тогда
			Годы.Добавить(Формат(Объект.ВторойРасчетныйГод, "ЧГ="));
		КонецЕсли;
		Если Годы.Количество() > 0 Тогда
			Представления.Добавить(СтрШаблон(НСтр("ru = 'Расчетные годы: %1'"), СтрСоединить(Годы, ", ")));
		КонецЕсли;
	КонецЕсли;
	
	Если ВидимостьСтажа() Тогда
		Если ЗначениеЗаполнено(Объект.СтраховойСтажЛет) Или ЗначениеЗаполнено(Объект.СтраховойСтажМесяцев) Тогда
			Представления.Добавить(СтрШаблон(
				НСтр("ru = 'Страховой стаж: %1'"),
				ЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Объект.СтраховойСтажЛет, Объект.СтраховойСтажМесяцев)));
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.НестраховойСтажЛет) Или ЗначениеЗаполнено(Объект.НестраховойСтажМесяцев) Тогда
			Представления.Добавить(СтрШаблон(
				НСтр("ru = 'Нестраховой стаж: %1'"),
				ЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(Объект.НестраховойСтажЛет, Объект.НестраховойСтажМесяцев)));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'РК: %1'"), Объект.РайонныйКоэффициент));
	КонецЕсли;
	Если ВидимостьДолиВремени() И ЗначениеЗаполнено(Объект.ДоляВремени) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'Ставок: %1'"), Объект.ДоляВремени));
	КонецЕсли;
	
	Если ВидимостьПериодаОплатыЗаСчетФСС()
		И ЗначениеЗаполнено(Объект.ОплатаФССДатаНачала)
		И ЗначениеЗаполнено(Объект.ОплатаФССДатаОкончания) Тогда
		Представления.Добавить(СтрШаблон(
			НСтр("ru = 'Оплата за счет ФСС: %1'"),
			ОбщегоНазначенияБЗК.НаименованиеПериода(Объект.ОплатаФССДатаНачала, Объект.ОплатаФССДатаОкончания)));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область ОтпускПоУходу

&НаСервере
Функция ПредставлениеОтпускаПоУходу()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ОтпускПоУходуНомер) Тогда
		Представления.Добавить("№ " + Объект.ОтпускПоУходуНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтпускПоУходуДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.ОтпускПоУходуДата, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаНачала)
		И ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаОкончания) Тогда
		Представления.Добавить(ОбщегоНазначенияБЗК.НаименованиеПериода(
			Объект.ОтпускПоУходуДатаНачала,
			Объект.ОтпускПоУходуДатаОкончания));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеСвидетельстваОРождении()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СвидетельствоОРожденииСерияНомер) Тогда
		Представления.Добавить("№ " + Объект.СвидетельствоОРожденииСерияНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СвидетельствоОРожденииДатаВыдачи) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.СвидетельствоОРожденииДатаВыдачи, "ДЛФ=D"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииДата)
		Или ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииНомер) Тогда
		Представления.Добавить(НСтр("ru = 'актовая запись ЗАГС'"));
		Если ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииНомер) Тогда
			Представления.Добавить("№ " + Объект.АктоваяЗаписьОРожденииНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.АктоваяЗаписьОРожденииДата) Тогда
			Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.АктоваяЗаписьОРожденииДата, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииДатаВыдачи)
		Или ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерияНомер) Тогда
		Представления.Добавить(НСтр("ru = 'иной документ'"));
		Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииСерияНомер) Тогда
			Представления.Добавить("№ " + Объект.ИнойДокументОРожденииСерияНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИнойДокументОРожденииДатаВыдачи) Тогда
			Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.ИнойДокументОРожденииДатаВыдачи, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеРебенка()
	Представления = Новый Массив;
	Представление = СокрЛП(Объект.РебенокФамилия + " " + Объект.РебенокИмя + " " + Объект.РебенокОтчество);
	Если ЗначениеЗаполнено(Представление) Тогда
		Представления.Добавить(Представление);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокДатаРождения) Тогда
		Представления.Добавить(НСтр("ru = 'Дата рождения'") + " " + Формат(Объект.РебенокДатаРождения, "ДЛФ=D"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РебенокСНИЛС) Тогда
		Представления.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС: %1'"), Объект.РебенокСНИЛС));
	КонецЕсли;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

&НаСервере
Функция ПредставлениеСправкиОтДругогоРодителя()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СправкаОтДругогоРодителяНомер) Тогда
		Представления.Добавить("№ " + Объект.СправкаОтДругогоРодителяНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СправкаОтДругогоРодителяДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.СправкаОтДругогоРодителяДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеУсыновленияОпеки()
	Если Объект.УсыновлениеОпекаТип = "1" Тогда
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об усыновлении'");
	ИначеЕсли Объект.УсыновлениеОпекаТип = "2" Тогда
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об установлении опеки над ребенком'");
	Иначе
		Элементы.УсыновлениеОпекаГруппа.Заголовок = НСтр("ru = 'Решение об усыновлении / опеке'");
	КонецЕсли;
	
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.УсыновлениеОпекаНомер) Тогда
		Представления.Добавить("№ " + Объект.УсыновлениеОпекаНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УсыновлениеОпекаДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.УсыновлениеОпекаДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

&НаСервере
Функция ПредставлениеПередачиНаВоспитание()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ПередачаНаВоспитаниеНомер) Тогда
		Представления.Добавить("№ " + Объект.ПередачаНаВоспитаниеНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПередачаНаВоспитаниеДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.ПередачаНаВоспитаниеДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

#КонецОбласти

#Область ИсключаемыеПериоды

&НаСервере
Функция ПредставлениеИсключаемыхПериодов()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ИсключаемыеПериоды Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Если ЗначениеЗаполнено(Период.Причина) Тогда
			Представление = Представление + " (" + Строка(Период.Причина) + ")";
		КонецЕсли;
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область ПериодыПростоя

&НаСервере
Функция ПредставлениеПериодовПростоя()
	Представления = Новый Массив;
	Для Каждого Период Из Объект.ПериодыПростоя Цикл
		Представление = ОбщегоНазначенияБЗК.НаименованиеПериода(Период.ДатаНачала, Период.ДатаОкончания);
		Если ЗначениеЗаполнено(Период.СреднийЗаработок) Тогда
			Представление = Представление + " (" + Строка(Период.СреднийЗаработок) + ")";
		КонецЕсли;
		Представления.Добавить(Представление);
	КонецЦикла;
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

#КонецОбласти

#Область СпособВыплаты

&НаСервере
Процедура ОбновитьЭлементыСпособаВыплатыПособия()
	// Страница способа выплаты.
	СпособВыплаты = Объект.СпособВыплатыПособия;
	Если СпособВыплаты = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьНаКартуМИР);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьЧерезБанк);
	ИначеЕсли СпособВыплаты = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьПочтовымПереводом);
	Иначе
		Объект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР;
		УстановитьСтраницу(Элементы.СтраницыСпособовВыплатыПособия, Элементы.СтраницаВыплатитьНаКартуМИР);
	КонецЕсли;
	// Результат проверки номера счета.
	РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(
		Объект.НомерСчета,
		Объект.БанкБИК,
		Объект.БанкКоррСчет);
	Элементы.РезультатПроверкиНомераСчета.Заголовок = РезультатПроверки.Пояснение;
	Если РезультатПроверки.Успех Тогда
		Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаУспешнойОперацииБЗК;
	Иначе
		Элементы.РезультатПроверкиНомераСчета.ЦветФона = ЦветаСтиля.ЦветФонаПредупрежденияБЗК;
	КонецЕсли;
	// Цвет гиперссылки "Изменить способ выплаты пособия".
	Если ЭтотОбъект["СпособВыплатыПособияФикс"]
		Или ЭтотОбъект["БанкФикс"]
		Или ЭтотОбъект["АдресПроживанияВидФикс"] Тогда
		Элементы.ИзменитьСпособВыплатыПособий.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Иначе
		Элементы.ИзменитьСпособВыплатыПособий.ЦветТекста = Новый Цвет;
	КонецЕсли;
	// Видимость кнопки "Отменить изменения способа выплаты пособия".
	Элементы.ОтменитьИзмененияСпособаВыплатыПособия.Видимость = (
		ЭтотОбъект["СпособВыплатыПособияФикс"]
		Или ЭтотОбъект["КартаМИРФикс"]
		Или ЭтотОбъект["БанкФикс"]
		Или ЭтотОбъект["БанкБИКФикс"]
		Или ЭтотОбъект["БанкКоррСчетФикс"]
		Или ЭтотОбъект["БанкНаименованиеФикс"]
		Или ЭтотОбъект["НомерСчетаФикс"]
		Или ЭтотОбъект["АдресПроживанияВидФикс"]
		Или ЭтотОбъект["АдресПроживанияФикс"]
		Или ЭтотОбъект["АдресПроживанияФИАСДомФикс"]
		Или ЭтотОбъект["АдресПроживанияФИАСРОФикс"]);
КонецПроцедуры

&НаСервере
Процедура ОтменитьИзмененияСпособаВыплатыПособияНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоИмениГруппы(
		ЭтотОбъект,
		"СпособВыплатыПособия");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СпособВыплатыПособияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СпособВыплатыПособия");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("СпособВыплатыПособия");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Банк");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("Банк");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура АдресПроживанияВидПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "АдресПроживанияВид");
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("АдресПроживанияВид");
	ФиксацияЗаполнитьРеквизитыОбъекта();
	ОбновитьЭлементыФормы();
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Исправление

&НаСервере
Процедура ОбновитьЭлементыГруппыИсправление()
	Элементы.ИсправлениеОписаниеПричины.Доступность = Объект.Исправление;
	Элементы.ИсправлениеКодПричины.Доступность      = Объект.Исправление;
	Элементы.ИсправлениеКодПричины.Подсказка        = НаименованиеПричиныИсправления();
КонецПроцедуры

&НаСервере
Функция НаименованиеПричиныИсправления()
	Если Не ЗначениеЗаполнено(Объект.ИсправлениеКодПричины) Тогда
		Возврат "";
	КонецЕсли;
	ЭлементСписка = Элементы.ИсправлениеКодПричины.СписокВыбора.НайтиПоЗначению(Объект.ИсправлениеКодПричины);
	Если ЭлементСписка = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если КодСимвола(ЭлементСписка.Представление, 3) = КодСимвола(".") Тогда
		Возврат СокрЛП(Сред(ЭлементСписка.Представление, 4));
	Иначе
		Возврат СокрЛП(ЭлементСписка.Представление)
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ИсправлениеПриИзмененииСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "Исправление");
	ОбновитьЭлементыГруппыИсправление();
	СвертываемыеГруппыОбновить(Элементы.ИсправлениеГруппа);
КонецПроцедуры

&НаСервере
Процедура ИсправлениеКодПричиныПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ИсправлениеКодПричины");
	НаименованиеПричиныИсправления = НаименованиеПричиныИсправления();
	Если Не ЗначениеЗаполнено(НаименованиеПричиныИсправления) Тогда
		Объект.ИсправлениеКодПричины = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ИсправлениеОписаниеПричины)
		Или Лев(Объект.ИсправлениеОписаниеПричины, 108) = Лев(Элементы.ИсправлениеКодПричины.Подсказка, 108) Тогда
		Если Объект.ИсправлениеКодПричины = "06" Тогда
			Объект.ИсправлениеОписаниеПричины = "";
		Иначе
			Объект.ИсправлениеОписаниеПричины = НаименованиеПричиныИсправления;
		КонецЕсли;
	КонецЕсли;
	ОбновитьЭлементыГруппыИсправление();
	СвертываемыеГруппыОбновить(Элементы.ИсправлениеГруппа);
КонецПроцедуры

&НаСервере
Функция ПредставлениеСвертываемойГруппыИсправления()
	Если Объект.Исправление Тогда
		ЭлементСписка = Элементы.ИсправлениеКодПричины.СписокВыбора.НайтиПоЗначению(Объект.ИсправлениеКодПричины);
		Если ЭлементСписка = Неопределено Тогда
			Возврат НСтр("ru = '<Причина не указана>'");
		КонецЕсли;
		Возврат ЭлементСписка.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ПервичныйДокумент

&НаСервере
Процедура ПервичныйДокументПриИзмененииНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("ПервичныйДокумент");
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ПервичныйДокумент");
	Если ЗначениеЗаполнено(Объект.ПервичныйДокумент) Тогда
		ДокуменОбъект = РеквизитФормыВЗначение("Объект");
		ДокуменОбъект.Заполнить(Объект.ПервичныйДокумент);
		ЗначениеВРеквизитФормы(ДокуменОбъект, "Объект");
	КонецЕсли;
	ПриПолученииДанныхНаСервере("Объект");
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ВходящийЗапрос

&НаСервере
Процедура ВходящийЗапросПриИзмененииНаСервере()
	ФиксацияСброситьФиксациюИзмененийПоОснованиюЗаполнения("*");
	Если ЗначениеЗаполнено(Объект.ВходящийЗапрос) Тогда
		ДокуменОбъект = РеквизитФормыВЗначение("Объект");
		ДокуменОбъект.Заполнить(Объект.ВходящийЗапрос);
		ЗначениеВРеквизитФормы(ДокуменОбъект, "Объект");
	КонецЕсли;
	ПриПолученииДанныхНаСервере("Объект");
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ИзвещениеФСС

&НаСервере
Функция ПредставлениеИзвещенияФСС()
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ИзвещениеФССНомер) Тогда
		Представления.Добавить("№ " + Объект.ИзвещениеФССНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ИзвещениеФССДата) Тогда
		Представления.Добавить(НСтр("ru = 'от'") + " " + Формат(Объект.ИзвещениеФССДата, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, " ");
КонецФункции

#КонецОбласти

#Область ОтказВНазначенииПособия

&НаСервере
Функция ПредставлениеОтказаВНазначенииПособияГруппа()
	Если Объект.ОтказВНазначенииПособия Тогда
		Если ЗначениеЗаполнено(Объект.ОтказВНазначенииПособияПричина) Тогда
			Возврат НСтр("ru = 'По причине: '") + Объект.ОтказВНазначенииПособияПричина;
		Иначе
			Возврат НСтр("ru = 'Отказать в назначении пособия без уточнения причины'");
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОтказВНазначенииПособияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "ОтказВНазначенииПособия");
	ОбновитьЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницу(Страницы, ТекущаяСтраница)
	Для Каждого Страница Из Страницы.ПодчиненныеЭлементы Цикл
		Страница.Видимость = (Страница = ТекущаяСтраница);
	КонецЦикла;
	Страницы.ТекущаяСтраница = ТекущаяСтраница;
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаСервере
Процедура ВключитьВозможностьРедактированияНаСервере()
	Элементы.СлужебныеПоляГруппа.ТолькоПросмотр = Ложь;
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Функция ПодготовитьВопросВПоддержку()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = Объект.Организация;
	ИначеЕсли ЗначениеЗаполнено(Объект.Страхователь) Тогда
		Организация = Объект.Страхователь;
	Иначе
		Организация = Объект.ГоловнаяОрганизация;
	КонецЕсли;
	
	ИменаПолей =
	"НаимЮЛПол,
	|НаимЮЛСокр,
	|РегистрационныйНомерФСС,
	|КодПодчиненностиФСС,
	|ДополнительныйКодФСС,
	|ИННЮЛ,
	|КППЮЛ,
	|ОГРН,
	|УполномоченныйПоПрямымВыплатамФСС";
	Сведения = ЗарплатаКадры.СведенияОбОрганизации(Организация, ИменаПолей, ТекущаяДатаСеанса());
	
	НаименованиеОрганизации = ?(ЗначениеЗаполнено(Сведения.НаимЮЛПол), Сведения.НаимЮЛПол, Сведения.НаимЮЛСокр);
	
	Если ЗначениеЗаполнено(Сведения.ДополнительныйКодФСС)
		И Сведения.ДополнительныйКодФСС <> Сведения.РегистрационныйНомерФСС Тогда
		РегистрацияФСС = Сведения.РегистрационныйНомерФСС + "/" + Сведения.КодПодчиненностиФСС + " (" + Сведения.ДополнительныйКодФСС + ")";
	Иначе
		РегистрацияФСС = Сведения.РегистрационныйНомерФСС + "/" + Сведения.КодПодчиненностиФСС;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
	ИначеЕсли ТипЗнч(Сведения.УполномоченныйПоПрямымВыплатамФСС) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизическоеЛицо = Сведения.УполномоченныйПоПрямымВыплатамФСС;
	Иначе
		ФизическоеЛицо = Объект.Ответственный;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация; 
	
	//  Вложения - Массив Из Структура, Неопределено - файлы вложений. Важно: допускаются только
	//              текстовые вложения (*.txt). Поля структуры элемента вложения:
	//   *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
	//   *ВидДанных - Строка - определяет преобразование переданных данных.
	//                Возможна передача одного из значений:
	//                  - ИмяФайла - Строка - полное имя файла вложения;
	//                  - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
	//                  - Текст - Строка - текст вложения;
	//   *Данные - Строка - данные для формирования вложения;
	Вложения = Новый Массив;
	
	Если ЗначениеЗаполнено(ТекстЗапросаXML) Тогда
		Кодировка = СериализацияБЗК.КодировкаXML(ТекстЗапросаXML);
		ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстЗапросаXML, Кодировка, Истина);
		Вложение = Новый Структура("Представление, ВидДанных, Данные");
		Вложение.Представление = СтрШаблон(НСтр("ru = 'ОтветНаЗапросФССДляРасчетаПособия_%1.xml'"), Объект.ИдентификаторСообщения);
		Вложение.ВидДанных     = "Адрес";
		Вложение.Данные        = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		Вложения.Добавить(Вложение);
		Уточнение = НСтр("ru = '(xml приложен)'");
	Иначе
		Уточнение = НСтр("ru = '(xml пуст)'");
	КонецЕсли;
	
	//  ДанныеСообщения - Структура - данные для формирования сообщения:
	//   *Тема - Строка - тема сообщения;
	//   *Сообщение  - Строка - тело текст сообщения для отправки;
	//   *Получатель - Строка - условное имя получателя сообщения. Возможные значения:
	//        - "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
	//          необходимый адрес выбирается в соответствии с настройками доменной зоны
	//          серверов Интернет-поддержки;
	//        - "taxcom" - соответствует адресу "taxcom@1c.ru";
	//        - "backup" - соответствует адресу "support.backup@1c.ru";
	Сообщение = Новый Структура("Тема, Сообщение, Получатель, ИспользоватьСтантартныйШаблон");
	Сообщение.ИспользоватьСтантартныйШаблон = Ложь;
	Сообщение.Получатель = "v8";
	Сообщение.Тема = НСтр("ru = 'Вопрос по СЭДО (тип 101: ответ на запрос ФСС для расчета пособий) от %1 (%2)'");
	Сообщение.Тема = СтрШаблон(Сообщение.Тема, Объект.Дата, Объект.ИдентификаторСообщения);
	Сообщение.Сообщение = НСтр(
		"ru = 'Здравствуйте!
		|Вопрос по документу ""[Документ]"" [Уточнение].
		|
		|<Опишите вопрос, приложите снимки экрана>.
		|
		|Регистрационный номер программы: <Укажите номер из регистрационной карточки программного продукта>.
		|
		|Организация: [Организация].
		|ОГРН: [ОГРН], ИНН: [ИНН], КПП: [КПП].
		|Регистрация в ФСС: [РегистрацияФСС].
		|Версия платформы: [ВерсияПлатформы].
		|Версия конфигурации: [ИмяКонфигурация] [ВерсияКонфигурации].
		|
		|С уважением, [Ответственный].'");
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Документ]",           Строка(Объект.Ссылка));
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Уточнение]",          Уточнение);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Организация]",        НаименованиеОрганизации);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ОГРН]",               Сведения.ОГРН);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ИНН]",                Сведения.ИННЮЛ);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[КПП]",                Сведения.КППЮЛ);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[РегистрацияФСС]",     РегистрацияФСС);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ИмяКонфигурация]",    Метаданные.Имя);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ВерсияКонфигурации]", Метаданные.Версия);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ВерсияПлатформы]",    СистемнаяИнформация.ВерсияПриложения);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Ответственный]",      ФизическоеЛицо);
	
	ПараметрыЖурнала = Неопределено;
	
	Возврат СообщенияВСлужбуТехническойПоддержки.ПодготовитьСообщение(Сообщение, Вложения, ПараметрыЖурнала);
КонецФункции

#КонецОбласти

#КонецОбласти
