#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	ИсправленныйДокумент = ОбъектКопирования.Ссылка;
	ОтключитьПроверкиПроведения = Ложь;
	ХранилищеXML                = Неопределено;
	ДатаОтправки                = '00010101';
	ИдентификаторСообщения      = "";
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание, ТекстЗаполнения, СтандартнаяОбработка)
	ВерсияДокумента = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.АктуальнаяВерсия();
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		
		Если Основание.Свойство("Действие")
			И Основание.Действие = "Исправить"
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов") Тогда
			
			МодульИсправлениеДокументовЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("ИсправлениеДокументовЗарплатаКадры");
			МодульИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(
				ЭтотОбъект,
				Основание.Ссылка,
				,
				,
				Основание);
			
		ИначеЕсли Основание.Свойство("Сотрудник") И ЗначениеЗаполнено(Основание.Сотрудник) Тогда
			Основание = Основание.Сотрудник;
		Иначе
			ЗначенияДляЗаполнения = Новый Структура("Ответственный");
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияДляЗаполнения);
			ПервичныйДокумент = ОбщегоНазначенияБЗК.ЗначениеСвойства(Основание, "Основание");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВходящийЗапросФССДляРасчетаПособия") Тогда
		ВходящийЗапрос = Основание;
		ПараметрыФиксации = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПараметрыФиксацииВторичныхДанных();
		ЗаполнитьПервичныеДанныеИзВходящегоЗапроса(ПараметрыФиксации);
		ДополнитьДаннымиВходящегоЗапроса(ПараметрыФиксации, Истина);
		ЗаполнитьДанныеОрганизации(ПараметрыФиксации);
		ЗаполнитьКадровыеДанныеСотрудника(ПараметрыФиксации);
		ЗаполнитьПервичныйДокумент(ПараметрыФиксации); // Для заполнения больничного нужен номер ЛН и головная организация.
		ЗаполнитьДанныеИзПервичногоДокумента(ПараметрыФиксации);
		
	ИначеЕсли Метаданные().Реквизиты.ПервичныйДокумент.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		ПервичныйДокумент = Основание;
		ПараметрыФиксации = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПараметрыФиксацииВторичныхДанных();
		ЗаполнитьДанныеИзПервичногоДокумента(ПараметрыФиксации);
		
	КонецЕсли;
	
	ОбновитьВторичныеДанные();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОтказВНазначенииПособия Тогда
		ПроверяемыеРеквизиты.Очистить();
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ОтказВНазначенииПособияПричина");
	Иначе
		СведенияОВидеПособия = Документы.ОтветНаЗапросФССДляРасчетаПособия.СведенияОВидеПособия(ЭтотОбъект);
		Если СведенияОВидеПособия.ЭтоОбычныйБольничный Тогда
			ПроверитьСведенияОбЭЛН(Отказ);
			ПроверитьСведенияОСтрахователе(Отказ);
			ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия);
			ПроверитьСпособВыплаты(Отказ);
			ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия);
			ПроверитьИзвещение(Отказ);
		ИначеЕсли СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
			ПроверитьСведенияОбЭЛН(Отказ);
			ПроверитьСведенияОСтрахователе(Отказ);
			ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия);
			ПроверитьСпособВыплаты(Отказ);
			ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия);
			ПроверитьСведенияОбОтпуске(Отказ);
			ПроверитьИзвещение(Отказ);
		ИначеЕсли СведенияОВидеПособия.ЭтоОтпускПоУходу Тогда
			ПроверитьСведенияОСтрахователе(Отказ);
			ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия);
			ПроверитьСпособВыплаты(Отказ);
			ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия);
			ПроверитьИнформациюОбУсыновленииОпеке(Отказ);
			ПроверитьИнформациюОПередачеНаВоспитание(Отказ);
			ПроверитьИнформациюОРожденииРебенка(Отказ);
			ПроверитьИнформациюОДругомРодителе(Отказ);
			ПроверитьИзвещение(Отказ);
		КонецЕсли;
		ПроверитьДатуУвольнения(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение недостающих полей.
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата(); // АПК:143 Для фильтрации событий в журнале регистрации требуется дата сервера.
	КонецЕсли;
	
	ЭтоПроведение = (РежимЗаписи = РежимЗаписиДокумента.Проведение
		Или (Проведен И РежимЗаписи = РежимЗаписиДокумента.Запись));
	
	Если ЭтоПроведение Тогда
		ТекстXML = Документы.ОтветНаЗапросФССДляРасчетаПособия.ТекстXML(ЭтотОбъект);
	Иначе
		ТекстXML = "";
	КонецЕсли;
	ХранилищеXML = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
	
	ЗначенияРеквизитовДоЗаписи = ЗначенияРеквизитовДоЗаписи();
	ЗначенияРеквизитовДоЗаписи.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("ЗначенияРеквизитовДоЗаписи", ЗначенияРеквизитовДоЗаписи);
	
	Если ЗначениеЗаполнено(ИдентификаторСообщения)
		И ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо)
		И ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо <> ФизическоеЛицо Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимо изменять физическое лицо в отправленном документе.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗаполнитьПоДокументу(ЭтотОбъект);
	Если ЗначениеЗаполнено(ВходящийЗапрос)
		И Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходящийЗапрос, "ОтветНаЗапрос")) Тогда
		ВходящийЗапросОбъект = ВходящийЗапрос.ПолучитьОбъект();
		ВходящийЗапросОбъект.ОтветНаЗапрос = Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВходящийЗапросОбъект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПередЗаписью

Функция ЗначенияРеквизитовДоЗаписи()
	ИменаРеквизитов = "Дата, ГоловнаяОрганизация, ФизическоеЛицо, ПометкаУдаления, Проведен";
	Если ЭтоНовый() Тогда
		Возврат ОбщегоНазначенияБЗК.ЗначенияСвойств(ЭтотОбъект, ИменаРеквизитов);
	Иначе
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = Документы.ОтветНаЗапросФССДляРасчетаПособия.ПараметрыФиксацииВторичныхДанных(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗаполнитьПервичныеДанныеИзВходящегоЗапроса(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьПервичныйДокумент(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьДанныеИзПервичногоДокумента(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьДанныеОрганизации(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКадровыеДанныеСотрудника(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодСтраныГражданства(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьСпособВыплатыПособия(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКонтактыФизическогоЛица(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодыАдреса(ПараметрыФиксации, "АдресРегистрации", Истина) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодыАдреса(ПараметрыФиксации, "АдресПроживания", Ложь) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ДополнитьДаннымиВходящегоЗапроса(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован;
КонецФункции

Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.ОтветНаЗапросФССДляРасчетаПособия.ОбъектЗафиксирован(ЭтотОбъект);
КонецФункции

Функция ЗаполнитьПервичныеДанныеИзВходящегоЗапроса(ПараметрыФиксации) Экспорт
	Если Не ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЗапроса = ДанныеВходящегоЗапроса();
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВходящийЗапросИдентификатор", РеквизитыЗапроса.ИдентификаторСообщения);
	Реквизиты.Вставить("НомерПроцесса",               РеквизитыЗапроса.НомерПроцесса);
	Реквизиты.Вставить("Организация",                 РеквизитыЗапроса.Организация);
	Реквизиты.Вставить("Сотрудник",                   РеквизитыЗапроса.Сотрудник);
	Реквизиты.Вставить("ИзвещениеФССНомер",           РеквизитыЗапроса.ИзвещениеФССНомер);
	Реквизиты.Вставить("ИзвещениеФССДата",            РеквизитыЗапроса.ИзвещениеФССДата);
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьПервичныйДокумент(ПараметрыФиксации)
	Реквизиты = Новый Структура("ПервичныйДокумент");
	
	Если ЗначениеЗаполнено(НомерЛН)
		И (ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности
			Или ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам) Тогда
		Отбор = Новый Структура;
		Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
			Отбор.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
		КонецЕсли;
		Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо);
		КонецЕсли;
		ПоследнийБольничный = Документы.БольничныйЛист.ПоследнийБольничныйПоНомеру(НомерЛН, , Отбор);
		Если ЗначениеЗаполнено(ПоследнийБольничный) Тогда
			Реквизиты.ПервичныйДокумент = ПоследнийБольничный;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьДанныеИзПервичногоДокумента(ПараметрыФиксации)
	Если Не ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	
	ДанныеДляРасчетаСреднегоЗаработка = Неопределено;
	
	МенеджерОснования = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПервичныйДокумент);
	МенеджерОснования.ЗаполнитьОтветНаЗапросФССДляРасчетаПособия(ПервичныйДокумент, ЭтотОбъект, Реквизиты, ДанныеДляРасчетаСреднегоЗаработка);
	
	Если ДанныеДляРасчетаСреднегоЗаработка <> Неопределено Тогда
		ЗаполнитьРеквизитыРасчетаСреднегоЗаработка(Реквизиты, ДанныеДляРасчетаСреднегоЗаработка);
	КонецЕсли;
	
	Если Не Реквизиты.Свойство("Исправление") Тогда
		Реквизиты.Вставить("Исправление", Ложь);
		Реквизиты.Вставить("КодПричиныИсправления", "");
		Реквизиты.Вставить("ОписаниеПричиныИсправления", "");
	КонецЕсли;
	
	// Дата представления пакета документов страхователю является максимальной датой всех документов пакета;
	// Она не может быть меньше даты заявления сотрудника на выплату пособия.
	Если Реквизиты.Свойство("ДатаПредставленияПакетаДокументов")
		И ТипЗнч(Реквизиты.ДатаПредставленияПакетаДокументов) = Тип("Дата")
		И НачалоДня(Реквизиты.ДатаПредставленияПакетаДокументов) < НачалоДня(Дата) Тогда
		// Если документ-основание сообщил заведомо неподходящую дату,
		// то дата очищается в расчете на то, что в реестре будет выбрана дата заявления.
		Реквизиты.Вставить("ДатаПредставленияПакетаДокументов", '00010101');
	КонецЕсли;
	
	ДоляВремениЗаполненаИзПервичногоДокумента = Ложь;
	РайонныйКоэффициентЗаполненИзПервичногоДокумента = Ложь;
	ПричинаПредоставленияЛьготыЗаполненаИзПервичногоДокумента = Ложь;
	Если Реквизиты.Свойство("ДоляВремени")
		И ТипЗнч(Реквизиты.ДоляВремени) = Тип("Число")
		И Реквизиты.ДоляВремени > 0
		И Реквизиты.ДоляВремени <= 1 Тогда
		ДоляВремениЗаполненаИзПервичногоДокумента = Истина;
	КонецЕсли;
	Если Реквизиты.Свойство("РайонныйКоэффициент")
		И ТипЗнч(Реквизиты.РайонныйКоэффициент) = Тип("Число")
		И Реквизиты.РайонныйКоэффициент >= 1 Тогда
		РайонныйКоэффициентЗаполненИзПервичногоДокумента = Истина;
	КонецЕсли;
	Если Реквизиты.Свойство("ПричинаПредоставленияЛьготы")
		И ТипЗнч(Реквизиты.ПричинаПредоставленияЛьготы) = Тип("ПеречислениеСсылка.ОснованияФинансированияПособияФедеральнымБюджетом")
		И ЗначениеЗаполнено(Реквизиты.ПричинаПредоставленияЛьготы) Тогда
		ПричинаПредоставленияЛьготыЗаполненаИзПервичногоДокумента = Истина;
	КонецЕсли;
	ПараметрыФиксации.Вставить("ДоляВремениЗаполненаИзПервичногоДокумента", ДоляВремениЗаполненаИзПервичногоДокумента);
	ПараметрыФиксации.Вставить("РайонныйКоэффициентЗаполненИзПервичногоДокумента", РайонныйКоэффициентЗаполненИзПервичногоДокумента);
	ПараметрыФиксации.Вставить("ПричинаПредоставленияЛьготыЗаполненаИзПервичногоДокумента", ПричинаПредоставленияЛьготыЗаполненаИзПервичногоДокумента);
	
	ЕстьИзменения = Ложь;
	
	Если АвтозаполнениеПериодовОплаты И Реквизиты.Свойство("ИсключаемыеПериоды") Тогда
		ИсключаемыеПериодыДоИзменения = ИсключаемыеПериоды.Выгрузить();
		ИсключаемыеПериоды.Загрузить(Реквизиты.ИсключаемыеПериоды);
		ИсключаемыеПериоды.Сортировать("ДатаНачала, ДатаОкончания");
		Если Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(ИсключаемыеПериодыДоИзменения, ИсключаемыеПериоды.Выгрузить()) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	Реквизиты.Удалить("ИсключаемыеПериоды");
	
	Если АвтозаполнениеПериодовОплаты И Реквизиты.Свойство("ПериодыПростоя") Тогда
		ПериодыПростояДоИзменения = ПериодыПростоя.Выгрузить();
		ПериодыПростоя.Загрузить(Реквизиты.ПериодыПростоя);
		ПериодыПростоя.Сортировать("ДатаНачала, ДатаОкончания");
		Если Не ОбщегоНазначенияБЗК.ЗначенияСовпадают(ПериодыПростояДоИзменения, ПериодыПростоя.Выгрузить()) Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	Реквизиты.Удалить("ПериодыПростоя");
	
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Возврат ЕстьИзменения;
КонецФункции

Процедура ЗаполнитьРеквизитыРасчетаСреднегоЗаработка(Реквизиты, ДанныеДляРасчетаСреднегоЗаработка)
	
	ПараметрыРасчета      = ДанныеДляРасчетаСреднегоЗаработка.ПараметрыРасчета;
	ДанныеРасчетаСреднего = ДанныеДляРасчетаСреднегоЗаработка.ДанныеРасчетаСреднего;
	
	Реквизиты.Вставить("ДатаНачалаРасчетногоПериода",    ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало);
	Реквизиты.Вставить("ДатаОкончанияРасчетногоПериода", ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание);
	Реквизиты.Вставить("ПервыйРасчетныйГод",             ПараметрыРасчета.РасчетныеГоды[0]);
	Реквизиты.Вставить("ВторойРасчетныйГод",             ПараметрыРасчета.РасчетныеГоды[1]);
	Реквизиты.Вставить("ЗаменаЛетРасчетногоПериода",     Ложь);
	Реквизиты.Вставить("ПервыйРасчетныйГодЗаработок",    0);
	Реквизиты.Вставить("ВторойРасчетныйГодЗаработок",    0);
	Реквизиты.Вставить("ДоляВремени", УчетПособийСоциальногоСтрахованияКлиентСервер.ДоляНеполногоВремени(ПараметрыРасчета));
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ДатаНачалаСобытия) Тогда
		Реквизиты.Вставить("ДатаНачалаСобытия", ДатаНачалаСобытия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ДатаНачалаСобытия)
		И ЗначениеЗаполнено(ПараметрыРасчета.ПорядокРасчета) Тогда
		
		ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(
			ПараметрыРасчета.ДатаНачалаСобытия,
			ПараметрыРасчета.ПорядокРасчета);
		
		ПервыйГодПоДатеСобытия = Год(ПериодРасчетаСреднего.ДатаНачала);
		ВторойГодПоДатеСобытия = Год(ПериодРасчетаСреднего.ДатаОкончания);
		
		Если ПервыйГодПоДатеСобытия <> Реквизиты.ПервыйРасчетныйГод
			Или ВторойГодПоДатеСобытия <> Реквизиты.ВторойРасчетныйГод Тогда
			Реквизиты.ЗаменаЛетРасчетногоПериода = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УчитываемыхДнейВКалендарныхГодах = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыхДнейВКалендарныхГодахФСС(
		ПараметрыРасчета,
		ДанныеРасчетаСреднего);
	Реквизиты.Вставить("КалендарныхДнейРасчетногоПериода", УчитываемыхДнейВКалендарныхГодах);
	
	СтрокаПоГоду = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементКоллекцииПоОтбору(
		ДанныеРасчетаСреднего,
		Новый Структура("РасчетныйГод", Реквизиты.ПервыйРасчетныйГод));
	Если СтрокаПоГоду <> Неопределено Тогда
		Реквизиты.ПервыйРасчетныйГодЗаработок = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыйЗаработокФССПоГоду(
			ПараметрыРасчета,
			СтрокаПоГоду);
	КонецЕсли;
	
	СтрокаПоГоду = УчетПособийСоциальногоСтрахованияКлиентСервер.ЭлементКоллекцииПоОтбору(
		ДанныеРасчетаСреднего,
		Новый Структура("РасчетныйГод", Реквизиты.ВторойРасчетныйГод));
	Если СтрокаПоГоду <> Неопределено Тогда
		Реквизиты.ВторойРасчетныйГодЗаработок = УчетПособийСоциальногоСтрахованияКлиентСервер.УчитываемыйЗаработокФССПоГоду(
			ПараметрыРасчета,
			СтрокаПоГоду);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеОрганизации(ПараметрыФиксации)
	// Головная организация заполняется безусловно, т.к. определяет права.
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	Реквизиты = Новый Структура("Страхователь, НомерСтрахователяФСС, КодПодчиненностиФСС");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ИменаПолей = "НомерСтрахователяФСС, КодПодчиненностиФСС";
		Сведения = СЭДОФСС.СведенияОСтрахователе(Организация, ИменаПолей, Дата);
		Реквизиты.Страхователь         = Сведения.Страхователь;
		Реквизиты.НомерСтрахователяФСС = Сведения.НомерСтрахователяФСС;
		Реквизиты.КодПодчиненностиФСС  = Сведения.КодПодчиненностиФСС;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКадровыеДанныеСотрудника(ПараметрыФиксации)
	Реквизиты = Новый Структура(
	"СотрудникФамилия,
	|СотрудникИмя,
	|СотрудникОтчество,
	|СотрудникДатаРождения,
	|СотрудникГражданство,
	|СотрудникПол,
	|СотрудникСНИЛС,
	|СотрудникИНН,
	|ДоляВремени,
	|РайонныйКоэффициент,
	|ТрудовойДоговорДатаНачала,
	|ТрудовойДоговорДатаОкончания,
	|УдостоверениеЛичностиВид,
	|УдостоверениеЛичностиСерия,
	|УдостоверениеЛичностиНомер,
	|УдостоверениеЛичностиДатаВыдачи,
	|УдостоверениеЛичностиКемВыдан,
	|УдостоверениеЛичностиСрокДействия,
	|СтатусНалогоплательщика,
	|КодСтатусаНалогоплательщика,
	|ВнешнееСовместительство,
	|ПричинаПредоставленияЛьготы");
	ФизическоеЛицо = Неопределено; // Заполняется безусловно, т.к. определяет права.
	Если ПараметрыФиксации.Свойство("ДоляВремениЗаполненаИзПервичногоДокумента")
		И ПараметрыФиксации.ДоляВремениЗаполненаИзПервичногоДокумента Тогда
		Реквизиты.Удалить("ДоляВремени");
	КонецЕсли;
	Если ПараметрыФиксации.Свойство("РайонныйКоэффициентЗаполненИзПервичногоДокумента")
		И ПараметрыФиксации.РайонныйКоэффициентЗаполненИзПервичногоДокумента Тогда
		Реквизиты.Удалить("РайонныйКоэффициент");
	КонецЕсли;
	Если ПараметрыФиксации.Свойство("РайонныйКоэффициентЗаполненИзПервичногоДокумента")
		И ПараметрыФиксации.РайонныйКоэффициентЗаполненИзПервичногоДокумента Тогда
		Реквизиты.Удалить("ПричинаПредоставленияЛьготы");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ИменаПолей = Документы.ОтветНаЗапросФССДляРасчетаПособия.ИменаПолейТребуемыхКадровыхДанных();
		КадровыеДанные = Новый Структура(ИменаПолей);
		КадровыеДанныеСотрудника = ОбщегоНазначенияБЗК.ЗначениеСвойства(ДополнительныеСвойства, "КадровыеДанные");
		Если КадровыеДанныеСотрудника = Неопределено Тогда
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, ИменаПолей, Дата);
		КонецЕсли;
		Если КадровыеДанныеСотрудника <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(КадровыеДанные, КадровыеДанныеСотрудника);
			ФизическоеЛицо = КадровыеДанные.ФизическоеЛицо; // Заполняется безусловно, т.к. определяет права.
			
			// ФИО, ИНН, СНИЛС, Дата рождения, Гражданство.
			Реквизиты.СотрудникФамилия      = КадровыеДанные.Фамилия;
			Реквизиты.СотрудникИмя          = КадровыеДанные.Имя;
			Реквизиты.СотрудникОтчество     = КадровыеДанные.Отчество;
			Реквизиты.СотрудникГражданство  = КадровыеДанные.Страна;
			Реквизиты.СотрудникДатаРождения = КадровыеДанные.ДатаРождения;
			Реквизиты.СотрудникПол          = КадровыеДанные.Пол;
			Реквизиты.СотрудникСНИЛС        = КадровыеДанные.СтраховойНомерПФР;
			Реквизиты.СотрудникИНН          = КадровыеДанные.ИНН;
			
			// Удостоверение личности.
			Реквизиты.УдостоверениеЛичностиВид          = КадровыеДанные.ДокументВид;
			Реквизиты.УдостоверениеЛичностиСерия        = СокрЛП(КадровыеДанные.ДокументСерия);
			Реквизиты.УдостоверениеЛичностиНомер        = СокрЛП(КадровыеДанные.ДокументНомер);
			Реквизиты.УдостоверениеЛичностиДатаВыдачи   = КадровыеДанные.ДокументДатаВыдачи;
			Реквизиты.УдостоверениеЛичностиКемВыдан     = КадровыеДанные.ДокументКемВыдан;
			Реквизиты.УдостоверениеЛичностиСрокДействия = КадровыеДанные.ДокументСрокДействия;
			
			// Место работы.
			Реквизиты.СтатусНалогоплательщика = КадровыеДанные.СтатусНалогоплательщика;
			Реквизиты.ВнешнееСовместительство = ЭтоВнешнееСовместительство(КадровыеДанные.ВидЗанятости);
			Реквизиты.КодСтатусаНалогоплательщика = СЭДОФСС.КодСтатусаНалогоплательщика(Реквизиты.СтатусНалогоплательщика);
			
			Если КадровыеДанные.Свойство("ДоляНеполногоРабочегоВремени") И Реквизиты.Свойство("ДоляВремени") Тогда
				Реквизиты.ДоляВремени = УчетПособийСоциальногоСтрахования.ДоляНеполногоРабочегоВремени(
					КадровыеДанные.ДоляНеполногоРабочегоВремени);
			КонецЕсли;
			Если Реквизиты.Свойство("РайонныйКоэффициент") Тогда
				Реквизиты.РайонныйКоэффициент = КадровыеДанные.РайонныйКоэффициентРФ;
			КонецЕсли;
			
			// Срочный трудовой договор.
			Если КадровыеДанные.Свойство("СрочныйДоговор")
				И КадровыеДанные.СрочныйДоговор = Истина // Может быть Null для непринятых сотрудников.
				И (Не ЗначениеЗаполнено(ДатаНачалаСобытия)
					Или КадровыеДанные.ДатаОкончания >= ДатаНачалаСобытия) Тогда
				Реквизиты.Вставить("ТрудовойДоговорДатаНачала",    КадровыеДанные.ДатаНачала);
				Реквизиты.Вставить("ТрудовойДоговорДатаОкончания", КадровыеДанные.ДатаОкончания);
			КонецЕсли;
			
			// Льготы.
			Если Реквизиты.Свойство("ПричинаПредоставленияЛьготы") Тогда
				Реквизиты.ПричинаПредоставленияЛьготы = КадровыеДанные.ЛьготаПриНачисленииПособий;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКодСтраныГражданства(ПараметрыФиксации)
	Реквизиты = Новый Структура("КодСтраныГражданства");
	
	Если ЗначениеЗаполнено(СотрудникГражданство) Тогда
		Реквизиты.КодСтраныГражданства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникГражданство, "Код");
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЭтоВнешнееСовместительство(ВидЗанятости)
	Возврат ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство;
КонецФункции

Функция ЗаполнитьСпособВыплатыПособия(ПараметрыФиксации)
	// Получение сведений о способах выплаты.
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		НастройкиПрямыхВыплат = СпособыПрямыхВыплатФСС.НастройкиСотрудников(Организация, ФизическоеЛицо, Дата);
		СпособПрямыхвыплат    = НастройкиПрямыхВыплат.ТаблицаРезультат[0];
	Иначе
		НастройкиПрямыхВыплат = Неопределено;
		СпособПрямыхвыплат    = Неопределено;
	КонецЕсли;
	// Заполнение первичных сведений о способе выплаты.
	ЕстьИзменения = Ложь;
	РеквизитыСпособа = РеквизитыСпособаПрямыхвыплат(СпособПрямыхвыплат);
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыСпособа, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	// Заполнение банковских реквизитов.
	РеквизитыБанка = РеквизитыБанка(НастройкиПрямыхВыплат, СпособПрямыхвыплат);
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыБанка, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	Возврат ЕстьИзменения;
КонецФункции

Функция РеквизитыСпособаПрямыхвыплат(СпособПрямыхвыплат)
	РеквизитыСпособа = Новый Структура("СпособВыплатыПособия, КартаМИР, Банк, НомерСчета, АдресПроживанияВид");
	Если СпособПрямыхвыплат = Неопределено Тогда
		Возврат РеквизитыСпособа;
	КонецЕсли;
	
	ТипыСпособовПрямыхВыплат = СпособыПрямыхВыплатФСС.ТипыСпособовПрямыхВыплат();
	ТипСпособа = ТипыСпособовПрямыхВыплат.Найти(ТипЗнч(СпособПрямыхвыплат.Значение), "Тип");
	Если ТипСпособа = Неопределено Тогда
		Возврат РеквизитыСпособа;
	КонецЕсли;
	
	РеквизитыСпособа.СпособВыплатыПособия = ТипСпособа.СпособВыплатыПособия;
	Если РеквизитыСпособа.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		РеквизитыСпособа.КартаМИР           = СпособПрямыхвыплат.Значение;
	ИначеЕсли РеквизитыСпособа.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		РеквизитыСпособа.Банк               = СпособПрямыхвыплат.Банк;
		РеквизитыСпособа.НомерСчета         = СпособПрямыхвыплат.НомерСчета;
	Иначе
		РеквизитыСпособа.АдресПроживанияВид = СпособПрямыхвыплат.Значение;
	КонецЕсли;
	
	Возврат РеквизитыСпособа;
КонецФункции

Функция РеквизитыБанка(НастройкиПрямыхВыплат, СпособПрямыхвыплат)
	РеквизитыБанка = Новый Структура("БанкНаименование, БанкБИК, БанкКоррСчет");
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат РеквизитыБанка;
	КонецЕсли;
	
	// Определение способа прямых выплат по выбранному банку.
	Если НастройкиПрямыхВыплат <> Неопределено
		И (СпособПрямыхвыплат = Неопределено Или Банк <> СпособПрямыхвыплат.Банк) Тогда
		Найденные = НастройкиПрямыхВыплат.БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Банк, ПометкаУдаления", Банк, Ложь));
		Если Найденные.Количество() = 0 Тогда
			Найденные = НастройкиПрямыхВыплат.БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Банк", Банк));
		КонецЕсли;
		Если Найденные.Количество() = 0 Тогда
			СпособПрямыхвыплат = Неопределено;
		Иначе
			СпособПрямыхвыплат = Найденные[0];
		КонецЕсли;
	КонецЕсли;
	
	// Определение реквизитов банка.
	Если СпособПрямыхвыплат = Неопределено Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Наименование, Код, КоррСчет");
		РеквизитыБанка.БанкНаименование = Реквизиты.Наименование;
		РеквизитыБанка.БанкБИК          = Реквизиты.Код;
		РеквизитыБанка.БанкКоррСчет     = Реквизиты.КоррСчет;
	Иначе
		РеквизитыБанка.БанкНаименование = СпособПрямыхвыплат.НаименованиеБанка;
		РеквизитыБанка.БанкБИК          = СпособПрямыхвыплат.БИК;
		РеквизитыБанка.БанкКоррСчет     = СпособПрямыхвыплат.КоррСчет;
	КонецЕсли;
	
	Возврат РеквизитыБанка;
КонецФункции

Функция ЗаполнитьКонтактыФизическогоЛица(ПараметрыФиксации)
	Реквизиты = Новый Структура("АдресРегистрации, АдресПроживания");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		АдресРегистрацииВид = КадровыйУчет.ВидКонтактнойИнформацииАдресПоПропискеФизическиеЛица();
		
		ВидыКИ = Новый Массив;
		ВидыКИ.Добавить(АдресРегистрацииВид);
		Если ЗначениеЗаполнено(АдресПроживанияВид) Тогда
			ВидыКИ.Добавить(АдресПроживанияВид);
		КонецЕсли;
		
		ТаблицаКИ = КонтактнаяИнформацияБЗК.КонтактнаяИнформацияОбъектов(ФизическоеЛицо, , ВидыКИ);
		
		СтрокаКИ = ТаблицаКИ.Найти(АдресРегистрацииВид, "Вид");
		Если СтрокаКИ <> Неопределено Тогда
			Реквизиты.АдресРегистрации = СтрокаКИ.Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресПроживанияВид) Тогда
			СтрокаКИ = ТаблицаКИ.Найти(АдресПроживанияВид, "Вид");
			Если СтрокаКИ <> Неопределено Тогда
				Реквизиты.АдресПроживания = СтрокаКИ.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКодыАдреса(ПараметрыФиксации, ИмяПоляАдрес, ЕстьПолеЗаПределамиРФ)
	Суффиксы = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ФИАСДом, ФИАСРО";
	Если ЕстьПолеЗаПределамиРФ Тогда
		Суффиксы = Суффиксы + ", ЗаПределамиРФ";
	КонецЕсли;
	Массив = СтрРазделить(Суффиксы, ", ", Ложь);
	ИменаРеквизитов = ИмяПоляАдрес + СтрСоединить(Массив, ", " + ИмяПоляАдрес);
	Реквизиты = Новый Структура(ИменаРеквизитов);
	
	Адрес = ЭтотОбъект[ИмяПоляАдрес];
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("БезПредставлений",               Не ЕстьПолеЗаПределамиРФ);
	ДополнительныеПараметры.Вставить("КодыАдреса",                     Истина);
	ДополнительныеПараметры.Вставить("КодыКЛАДР",                      Ложь);
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	ДополнительныеПараметры.Вставить("ПроверитьАдрес",                 Ложь);
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
	
	ИменаПолей = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Строение, Сооружение, Участок, Квартира";
	СтруктураАдреса = КонтактнаяИнформацияБЗК.СвернутьСведенияОбАдресе(СведенияОбАдресе, ИменаПолей);
	СтруктураАдреса.Корпус = КонтактнаяИнформацияБЗК.ПредставлениеКорпусов(СтруктураАдреса, 30);
	СтруктураАдреса.Удалить("Строение");
	СтруктураАдреса.Удалить("Сооружение");
	СтруктураАдреса.Удалить("Участок");
	
	СтруктураАдреса.Вставить("ФИАСДом", Строка(СведенияОбАдресе.ИдентификаторДома));
	СтруктураАдреса.Вставить("ФИАСРО",  Строка(СведенияОбАдресе.ИдентификаторАдресногоОбъекта));
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ФИАСДом)
		И СтруктураАдреса.ФИАСРО <> СведенияОбАдресе.ИдентификаторЗемельногоУчастка Тогда
		СтруктураАдреса.ФИАСДом = Строка(СведенияОбАдресе.ИдентификаторЗемельногоУчастка);
	КонецЕсли;
	
	Если ЕстьПолеЗаПределамиРФ Тогда
		Если СведенияОбАдресе.КодСтраны = "643" Тогда
			ЗаПределамиРФ = "";
		Иначе
			ЗаПределамиРФ = СведенияОбАдресе.Представление;
		КонецЕсли;
		СтруктураАдреса.Вставить("ЗаПределамиРФ", ЗаПределамиРФ);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураАдреса Цикл
		Реквизиты[ИмяПоляАдрес + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ДополнитьДаннымиВходящегоЗапроса(ПараметрыФиксации, Принудительно = Ложь)
	Если Не ЗначениеЗаполнено(ВходящийЗапрос) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	РеквизитыЗапроса = ДанныеВходящегоЗапроса();
	
	Если Принудительно
		Или (Не ЗначениеЗаполнено(НомерЛН) И ЗначениеЗаполнено(РеквизитыЗапроса.НомерЛН)) Тогда
		Реквизиты.Вставить("НомерЛН", РеквизитыЗапроса.НомерЛН);
	КонецЕсли;
	
	Если Принудительно Или Не ЗначениеЗаполнено(СотрудникКатегория) Тогда
		СписокВыбора = СЭДОФСС.СписокВыбораКатегорийЗастрахованныхЛиц();
		Если ЗначениеЗаполнено(РеквизитыЗапроса.СотрудникКатегория)
			И СписокВыбора.НайтиПоЗначению(РеквизитыЗапроса.СотрудникКатегория) <> Неопределено Тогда
			Реквизиты.Вставить("СотрудникКатегория", РеквизитыЗапроса.СотрудникКатегория);
		Иначе
			Реквизиты.Вставить("СотрудникКатегория", СписокВыбора[0].Значение);
		КонецЕсли;
	КонецЕсли;
	
	Если Принудительно Или (Не ЗначениеЗаполнено(ВидПособия) И ЗначениеЗаполнено(РеквизитыЗапроса.ВидПособия)) Тогда
		Реквизиты.Вставить("ВидПособия", РеквизитыЗапроса.ВидПособия);
	КонецЕсли;
	
	Если Принудительно Или (Не ЗначениеЗаполнено(КодСтатусаНалогоплательщика)
			И ЗначениеЗаполнено(РеквизитыЗапроса.КодСтатусаНалогоплательщика)) Тогда
		Реквизиты.Вставить("КодСтатусаНалогоплательщика", РеквизитыЗапроса.КодСтатусаНалогоплательщика);
	КонецЕсли;
	
	// Трудовой договор заполняется только в том случае, если в его период попадает случай нетрудоспособности.
	Если Принудительно Или 
		(Не ЗначениеЗаполнено(ТрудовойДоговорДатаНачала)
			И Не ЗначениеЗаполнено(ТрудовойДоговорДатаОкончания)
			И ЗначениеЗаполнено(РеквизитыЗапроса.ТрудовойДоговорДатаНачала)
			И ЗначениеЗаполнено(РеквизитыЗапроса.ТрудовойДоговорДатаОкончания)
			И (Не ЗначениеЗаполнено(ДатаНачалаСобытия)
				Или ДатаНачалаСобытия < РеквизитыЗапроса.ТрудовойДоговорДатаОкончания)) Тогда
		Реквизиты.Вставить("ТрудовойДоговорДатаНачала", РеквизитыЗапроса.ТрудовойДоговорДатаНачала);
		Реквизиты.Вставить("ТрудовойДоговорДатаОкончания", РеквизитыЗапроса.ТрудовойДоговорДатаОкончания);
	КонецЕсли;
	
	Если Принудительно
		Или (Не ЗначениеЗаполнено(ОплатаФССДатаНачала) И Не ЗначениеЗаполнено(ОплатаФССДатаОкончания)) Тогда
		Реквизиты.Вставить("ОплатаФССДатаНачала",    РеквизитыЗапроса.ОплатаФССДатаНачала);
		Реквизиты.Вставить("ОплатаФССДатаОкончания", РеквизитыЗапроса.ОплатаФССДатаОкончания);
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ДанныеВходящегоЗапроса()
	РеквизитыЗапроса = ОбщегоНазначенияБЗК.ЗначениеСвойства(ДополнительныеСвойства, "РеквизитыЗапроса");
	Если РеквизитыЗапроса <> Неопределено Тогда
		Возврат РеквизитыЗапроса;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ * ИЗ Документ.ВходящийЗапросФССДляРасчетаПособия ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ВходящийЗапрос);
	РеквизитыЗапроса = Запрос.Выполнить().Выгрузить()[0];
	ДополнительныеСвойства.Вставить("РеквизитыЗапроса", РеквизитыЗапроса);
	Возврат РеквизитыЗапроса;
КонецФункции

#КонецОбласти

#Область ОбработкаПроверкиЗаполнения

Процедура ПроверитьСведенияОбЭЛН(Отказ)
	ПроверкиБЗК.ПроверитьНомерЛН(Отказ, ЭтотОбъект, "НомерЛН");
КонецПроцедуры

Процедура ПроверитьСведенияОСтрахователе(Отказ)
	ПроверкиБЗК.ПроверитьРегистрационныйНомерФСС(Отказ, ЭтотОбъект, "НомерСтрахователяФСС");
КонецПроцедуры

Процедура ПроверитьСведенияОЗастрахованномЛице(Отказ, СведенияОВидеПособия)
	ЭтоРезидент = (КодСтраныГражданства = "643");
	
	// Категория застрахованного лица.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникКатегория");
	
	// СНИЛС.
	Если Не ЗначениеЗаполнено(СотрудникСНИЛС) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникСНИЛС");
	Иначе
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СотрудникСНИЛС, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в СНИЛС %1: %2'");
			Текст = СтрШаблон(Текст, СотрудникСНИЛС, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СотрудникСНИЛС");
		КонецЕсли;
	КонецЕсли;
	
	// ИНН.
	Если ЗначениеЗаполнено(СотрудникИНН) Тогда
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СотрудникИНН, Ложь, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в ИНН %1: %2'");
			Текст = СтрШаблон(Текст, СотрудникИНН, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СотрудникИНН");
		КонецЕсли;
	ИначеЕсли ЭтоРезидент Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникИНН");
	КонецЕсли;
	
	// ФИО.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникФамилия");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникИмя");
	
	// Дата рождения, Пол.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникДатаРождения");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникПол");
	
	// Код статуса налогоплательщика, код страны гражданства.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КодСтатусаНалогоплательщика");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КодСтраныГражданства");
	
	// Адрес регистрации.
	Если ЗначениеЗаполнено(АдресРегистрацииФИАСДом) Или ЗначениеЗаполнено(АдресРегистрацииФИАСРО) Тогда
		ПроверитьАдрес(Отказ, "АдресРегистрации");
	КонецЕсли;
	Если Не ЭтоРезидент И Не ЗначениеЗаполнено(АдресРегистрации) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АдресРегистрацииЗаПределамиРФ");
	КонецЕсли;
	
	// Удостоверение личности.
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Сотрудник",           "Сотрудник");
	ИменаРеквизитов.Вставить("ФизическоеЛицо",      "ФизическоеЛицо");
	ИменаРеквизитов.Вставить("ВидДокумента",        "УдостоверениеЛичностиВид");
	ИменаРеквизитов.Вставить("СерияДокумента",      "УдостоверениеЛичностиСерия");
	ИменаРеквизитов.Вставить("НомерДокумента",      "УдостоверениеЛичностиНомер");
	ИменаРеквизитов.Вставить("ДатаВыдачиДокумента", "УдостоверениеЛичностиДатаВыдачи");
	ИменаРеквизитов.Вставить("КемВыданДокумент",    "УдостоверениеЛичностиКемВыдан");
	ПрямыеВыплатыПособийСоциальногоСтрахования.ПроверитьДокументУдостоверяющийЛичность(Отказ, ЭтотОбъект, ИменаРеквизитов);
	
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(УдостоверениеЛичностиВид);
	Если ЗначениеЗаполнено(УдостоверениеЛичностиВид)
		И Не ЗначениеЗаполнено(УдостоверениеЛичностиСрокДействия)
		И Не СведенияОВидеДокумента.ЭтоПаспортРФ Тогда
		Текст = НСтр("ru = 'Не заполнен срок действия документа, удостоверяющего личность'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "УдостоверениеЛичностиСрокДействия");
	ИначеЕсли ЗначениеЗаполнено(УдостоверениеЛичностиСрокДействия)
		И УдостоверениеЛичностиСрокДействия < ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()) Тогда
		Текст = НСтр("ru = 'Истек срок действия документа, удостоверяющего личность (%1)'");
		Текст = СтрШаблон(Текст, Формат(УдостоверениеЛичностиСрокДействия, "ДЛФ=D"));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "УдостоверениеЛичностиСрокДействия");
	КонецЕсли;
	
	// Срочный трудовой договор.
	Если (СведенияОВидеПособия.ЭтоОбычныйБольничный Или СведенияОВидеПособия.ЭтоОтпускПоУходу) Тогда
		ПроверкиБЗК.ПроверитьПериод(
			Отказ,
			ЭтотОбъект,
			"ТрудовойДоговорДатаНачала",
			"ТрудовойДоговорДатаОкончания",
			НСтр("ru = 'срочного трудового договора'"),
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСпособВыплаты(Отказ)
	
	Если СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		ПроверитьАдрес(Отказ, "АдресПроживания");
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КартаМИР");
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		Если ЗначениеЗаполнено(БанкБИК) И ЗначениеЗаполнено(НомерСчета) Тогда
			РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(НомерСчета, БанкБИК, БанкКоррСчет);
			Если Не РезультатПроверки.Успех Тогда
				СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, РезультатПроверки.Пояснение, "НомерСчета");
			КонецЕсли;
		Иначе
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "Банк");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "БанкБИК");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "НомерСчета");
		КонецЕсли;
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "БанкНаименование");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеДляРасчета(Отказ, СведенияОВидеПособия)
	
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный Или СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КалендарныхДнейРасчетногоПериода");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ПервыйРасчетныйГод");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ВторойРасчетныйГод");
	КонецЕсли;
	
	// Районный коэффициент.
	СЭДОФСС.ПроверитьРайонныйКоэффициент(Отказ, ЭтотОбъект, "РайонныйКоэффициент", Ложь);
	
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный Тогда
		
		// Период за который начисляется пособие ФСС.
		ПроверкиБЗК.ПроверитьПериод(
			Отказ,
			ЭтотОбъект,
			"ОплатаФССДатаНачала",
			"ОплатаФССДатаОкончания",
			НСтр("ru = 'периода оплаты за счет ФСС'"),
			Ложь);
		
		// Периоды за которые не начисляется пособие за счет ФСС.
		ПроверитьИсключаемыеПериоды(Отказ);
		
		// Периоды простоя.
		ПроверитьПериодыПростоя(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИсключаемыеПериоды(Отказ)
	Для Каждого ИсключаемыйПериод Из ИсключаемыеПериоды Цикл
		ПроверкиБЗК.ПроверитьПериодВСтрокеТаблицы(
			Отказ,
			ЭтотОбъект,
			"ИсключаемыеПериоды",
			ИсключаемыйПериод,
			"ДатаНачала",
			"ДатаОкончания",
			НСтр("ru = 'исключаемого периода'"));
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаСтрокиТаблицы(
			Отказ,
			ЭтотОбъект,
			"ИсключаемыеПериоды",
			ИсключаемыйПериод,
			"Причина");
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьПериодыПростоя(Отказ)
	Для Каждого ПериодПростоя Из ПериодыПростоя Цикл
		ПроверкиБЗК.ПроверитьПериодВСтрокеТаблицы(
			Отказ,
			ЭтотОбъект,
			"ПериодыПростоя",
			ПериодПростоя,
			"ДатаНачала",
			"ДатаОкончания",
			НСтр("ru = 'периода простоя'"));
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаСтрокиТаблицы(
			Отказ,
			ЭтотОбъект,
			"ПериодыПростоя",
			ПериодПростоя,
			"СреднийЗаработок");
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДатуУвольнения(Отказ)
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка что сотрудник не уволен на момент оформления документа.
	ДатаПроверки = ?(ЗначениеЗаполнено(ДатаНачалаСобытия), ДатаНачалаСобытия, Дата);
	Если Не ЗначениеЗаполнено(ДатаПроверки) Тогда
		ДатаПроверки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Ложь, Сотрудник, "ДатаУвольнения", ДатаПроверки);
	УстановитьПривилегированныйРежим(Ложь);
	Если КадровыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КадровыеДанные.ДатаУвольнения)
		И НачалоДня(ДобавитьМесяц(КадровыеДанные.ДатаУвольнения, 2)) < НачалоДня(ДатаПроверки) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно подготовить сведения для расчета пособия от %1 после увольнения сотрудника (%2). Необходимо изменить дату документа или выбрать другого сотрудника.'"),
			Формат(ДатаПроверки, "ДЛФ=D"),
			Формат(КадровыеДанные.ДатаУвольнения, "ДЛФ=D"));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "Дата");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИзвещение(Отказ)
	Если ЗначениеЗаполнено(ИзвещениеФССДата) Или ЗначениеЗаполнено(ИзвещениеФССНомер) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИзвещениеФССДата");
		СЭДОФСС.ПроверитьНомерИзвещенияФСС(Отказ, ЭтотОбъект, "ИзвещениеФССНомер");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьСведенияОбОтпуске(Отказ)
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ОтпускПоУходуНомер");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ОтпускПоУходуДата");
	ПроверкиБЗК.ПроверитьПериод(
		Отказ,
		ЭтотОбъект,
		"ОтпускПоУходуДатаНачала",
		"ОтпускПоУходуДатаОкончания",
		НСтр("ru = 'отпуска по уходу'"),
		Ложь);
КонецПроцедуры

Процедура ПроверитьИнформациюОбУсыновленииОпеке(Отказ)
	// Данные об усыновлении/опеке.
	Если Не ЗначениеЗаполнено(УсыновлениеОпекаТип)
		И Не ЗначениеЗаполнено(УсыновлениеОпекаНомер)
		И Не ЗначениеЗаполнено(УсыновлениеОпекаДата) Тогда
		Возврат;
	КонецЕсли;
	// Тип, Номер, Дата выдачи.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "УсыновлениеОпекаТип");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "УсыновлениеОпекаНомер");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "УсыновлениеОпекаДата");
КонецПроцедуры

Процедура ПроверитьИнформациюОПередачеНаВоспитание(Отказ)
	// Документ о передаче в приемную семью.
	Если Не ЗначениеЗаполнено(ПередачаНаВоспитаниеДата)
		И Не ЗначениеЗаполнено(ПередачаНаВоспитаниеНомер) Тогда
		Возврат;
	КонецЕсли;
	// Номер, Дата выдачи документа о передаче в приемную семью.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ПередачаНаВоспитаниеДата");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ПередачаНаВоспитаниеНомер");
КонецПроцедуры

Процедура ПроверитьИнформациюОРожденииРебенка(Отказ)
	// Свидетельство о рождении.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СвидетельствоОРожденииСерияНомер");
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СвидетельствоОРожденииДатаВыдачи");
	
	// Иной документ подтверждающий рождение ребенка.
	Иное = (ЗначениеЗаполнено(ИнойДокументОРожденииСерияНомер) Или ЗначениеЗаполнено(ИнойДокументОРожденииДатаВыдачи));
	Если Иное Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИнойДокументОРожденииСерияНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "ИнойДокументОРожденииДатаВыдачи");
	КонецЕсли;
	
	// Данные о актовой записи ЗАГС.
	Если Не Иное
		Или ЗначениеЗаполнено(АктоваяЗаписьОРожденииНомер)
		Или ЗначениеЗаполнено(АктоваяЗаписьОРожденииДата) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктоваяЗаписьОРожденииНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "АктоваяЗаписьОРожденииДата");
	КонецЕсли;
	
	// ФИО ребенка.
	Если ЗначениеЗаполнено(РебенокФамилия) Или ЗначениеЗаполнено(РебенокИмя) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокФамилия");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокИмя");
	КонецЕсли;
	
	// СНИЛС ребенка.
	ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РебенокСНИЛС");
КонецПроцедуры

Процедура ПроверитьИнформациюОДругомРодителе(Отказ)
	
	// Справка от другого родителя о неполучении пособия.
	Если ЗначениеЗаполнено(СправкаОтДругогоРодителяНомер) Или ЗначениеЗаполнено(СправкаОтДругогоРодителяДата) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОтДругогоРодителяНомер");
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СправкаОтДругогоРодителяДата");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАдрес(Отказ, ИмяПоляАдрес)
	ТекстОшибки = ТекстОшибкиЗаполненияАдреса(ИмяПоляАдрес);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Текст = Метаданные().Реквизиты[ИмяПоляАдрес].Представление() + ": " + ТекстОшибки;
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, ИмяПоляАдрес);
	КонецЕсли;
КонецПроцедуры

Функция ТекстОшибкиЗаполненияАдреса(ИмяПоляАдрес)
	ЗначениеАдреса = ЭтотОбъект[ИмяПоляАдрес];
	Если Не ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Возврат НСтр("ru = 'Адрес не заполнен'");
	КонецЕсли;
	
	ТекстыОшибок = Новый Массив;
	
	Индекс  = ЭтотОбъект[ИмяПоляАдрес + "Индекс"];
	ФИАСДом = ЭтотОбъект[ИмяПоляАдрес + "ФИАСДом"];
	ФИАСРО  = ЭтотОбъект[ИмяПоляАдрес + "ФИАСРО"];
	
	Если Не ЗначениеЗаполнено(Индекс) Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'Не заполнен индекс.'"));
	ИначеЕсли СтрДлина(Индекс) <> 6 Тогда
		ТекстыОшибок.Добавить(СтрШаблон(НСтр("ru = 'Индекс занимает %1 символов, ожидалось 6.'"), СтрДлина(Индекс)));
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(Индекс);
		Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Текст = НСтр("ru = 'В индексе должны быть только цифры (%1 - не цифра).'");
			Иначе
				Текст = НСтр("ru = 'В индексе должны быть только цифры (%1 - не цифры).'");
			КонецЕсли;
			ТекстыОшибок.Добавить(СтрШаблон(Текст, ЛишниеСимволы));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФИАСДом) И Не ЗначениеЗаполнено(ФИАСРО) Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'Не заполнен идентификатор ФИАС.'"));
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстыОшибок, Символы.ПС);
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли