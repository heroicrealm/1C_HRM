///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//  Параметры                  - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
//  Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия);
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СЭДО

Функция СведенияОВидеПособия(Документ) Экспорт
	Результат = Новый Структура("ЭтоОбычныйБольничный, ЭтоБольничныйПоБиР, ЭтоОтпускПоУходу", Ложь, Ложь, Ложь);
	
	Если Документ.ОтказВНазначенииПособия Тогда
		// Все - Ложь.
	ИначеЕсли Документ.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности Тогда
		Результат.ЭтоОбычныйБольничный = Истина;
	ИначеЕсли Документ.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам Тогда
		Результат.ЭтоБольничныйПоБиР = Истина;
	ИначеЕсли Документ.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком Тогда
		Результат.ЭтоОтпускПоУходу = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ТекстXML(Документ) Экспорт
	СведенияОВидеПособия = СведенияОВидеПособия(Документ);
	Если Документ.ОтказВНазначенииПособия Тогда
		НомерСхемы = 1;
	ИначеЕсли СведенияОВидеПособия.ЭтоОбычныйБольничный Тогда
		НомерСхемы = 1;
	ИначеЕсли СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
		НомерСхемы = 2;
	ИначеЕсли СведенияОВидеПособия.ЭтоОтпускПоУходу Тогда
		НомерСхемы = 4;
	Иначе
		Возврат "";
	КонецЕсли;
	
	МенеджерXML = Обработки.ПостроительXML.Создать();
	МенеджерXML.ФорматДат = "ДФ=yyyy-MM-dd";
	
	// В корне 1 элемент: Подтверждение сведений проактивно собранных Фондом.
	КореньXML = МенеджерXML.ДобавитьУзел(МенеджерXML.ДеревоXML, "proactive:approveSocialAssist");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "proactive", "urn:ru:fss:integration:types:proactive:v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "common", "http://www.fss.ru/integration/types/common/v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "benefit", "urn:ru:fss:integration:types:proactive:benefit" + НомерСхемы + ":v01");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "person", "http://www.fss.ru/integration/types/person/v02");
	МенеджерXML.ДобавитьПространствоИмен(КореньXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	// Идентификатор входящего запроса.
	МенеджерXML.ДобавитьАтрибут(КореньXML, "responseOn", Документ.ВходящийЗапросИдентификатор);
	
	// Номер процесса социальной поддержки.
	МенеджерXML.ДобавитьУзел(КореньXML, "proactive:socialAssistNum", Документ.НомерПроцесса);
	
	// Причина изменения (перерасчета). Заполняется в случае повторного направления ответа.
	Если Документ.Исправление Тогда
		МенеджерXML.ДобавитьУзел(КореньXML, "proactive:changeReason", Документ.ИсправлениеКодПричины);
	КонецЕсли;
	
	// Данные для расчета пособия.
	Если Документ.ОтказВНазначенииПособия Тогда
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "proactive:refuse");
		МенеджерXML.ДобавитьУзел(УзелДанных, "proactive:reason", Документ.ОтказВНазначенииПособияПричина);
	Иначе
		УзелДанных = МенеджерXML.ДобавитьУзел(КореньXML, "benefit:benefit" + НомерСхемы + "Approve");
		Если СведенияОВидеПособия.ЭтоОбычныйБольничный Тогда
			ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, СведенияОВидеПособия);
			ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, СведенияОВидеПособия);
			ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных);
		ИначеЕсли СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
			ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, СведенияОВидеПособия);
			ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, СведенияОВидеПособия);
			ВыгрузитьСведенияОбОтпуске(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных);
		ИначеЕсли СведенияОВидеПособия.ЭтоОтпускПоУходу Тогда
			ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, СведенияОВидеПособия);
			ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, СведенияОВидеПособия);
			ВыгрузитьИнформациюОбУсыновленииОпеке(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьИнформациюОПередачеНаВоспитание(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьИнформациюОРожденииРебенка(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьИнформациюОДругомРодителе(Документ, МенеджерXML, УзелДанных);
			ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных);
		КонецЕсли;
	КонецЕсли;
	
	// Замечания.
	Если Документ.Исправление Тогда
		МенеджерXML.ДобавитьУзел(КореньXML, "proactive:note", Документ.ИсправлениеОписаниеПричины);
	КонецЕсли;
	
	МенеджерXML.НачатьЗаписьВСтрокуXML(Ложь);
	СтрокаXML = МенеджерXML.СтрокаXML();
	Возврат СтрокаXML;
КонецФункции

Процедура ПриЗаполненииПараметровОтправки(МассивСсылок, ТаблицаОтправки) Экспорт
	
	ИменаРеквизитовСтроки = "Ссылка, Номер, Дата, ФизическоеЛицо, Организация";
	ИменаРеквизитов = "Ссылка, Номер, Дата, ДатаОтправки, ФизическоеЛицо, Организация, ХранилищеXML, ПометкаУдаления, Проведен";
	Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Документ = КлючИЗначение.Значение;
		// Добавление строки отправки и заполнение представления.
		СтрокаОтправки = ТаблицаОтправки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтправки, Документ, ИменаРеквизитовСтроки);
		СтрокаОтправки.ТипСообщения = 101;
		СтрокаОтправки.ТекстXML     = Документ.ХранилищеXML.Получить();
		СтрокаОтправки.Отправить    = Ложь;
		// Проверки и обновление вторичных данных документа перед отправкой.
		Если Документ.ПометкаУдаления Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиУдален();
			СтрокаОтправки.Результат = НСтр("ru = 'Документ помечен на удаление'");
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОтправлен();
			Если НачалоДня(Документ.ДатаОтправки) <= ТекущаяДатаСеанса() Тогда
				Текст = НСтр("ru = 'Документ уже отправлен %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДЛФ=D"));
			Иначе
				Текст = НСтр("ru = 'Документ уже отправлен в %1'");
				СтрокаОтправки.Результат = СтрШаблон(Текст, Формат(Документ.ДатаОтправки, "ДФ=HH:mm"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПредупреждение();
			ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, "");
			Если Не ДокументОбъект.ОтключитьПроверкиПроведения Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Проведение документа если требуется.
		ЕстьИзменения = ДокументОбъект.ОбновитьВторичныеДанные();
		СтрокаОтправки.Отправить = Истина;
		Если ЕстьИзменения Или Не ДокументОбъект.Проведен Тогда
			Попытка
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиПроведен();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаполнитьЗначенияСвойств(СтрокаОтправки, ДокументОбъект, ИменаРеквизитовСтроки);
				СтрокаОтправки.ТекстXML = ДокументОбъект.ХранилищеXML.Получить();
			Исключение
				СтрокаОтправки.Отправить = Ложь;
				СтрокаОтправки.ИндексКартинки = СЭДОФССКлиентСервер.ИндексКартинкиОстановлен();
				ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеВыбранныхДокументовКОтправке(МассивСсылок, ТаблицаОтправки) Экспорт
	// Действие не требуется.
КонецПроцедуры

Процедура ЗарегистрироватьРезультатыОтправки(СтрокаОтправки, Измененные) Экспорт
	ДатаОтправки = ?(СтрокаОтправки.Доставлен, СтрокаОтправки.ДатаОтправки, '00010101');
	
	// Сначала записывается отправляемый документ, т.к. его данные влияют на данные регистров (кэши).
	ОтправленныйОбъект = СтрокаОтправки.Ссылка.ПолучитьОбъект();
	ОтправленныйОбъект.ДатаОтправки           = ДатаОтправки;
	ОтправленныйОбъект.ИдентификаторСообщения = СтрокаОтправки.ДоставкаИдентификатор;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОтправленныйОбъект);
	
	// Затем записывается транспортный документ, и при записи он запускает обновление регистров.
	РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗаполнитьПоДокументу(ОтправленныйОбъект, СтрокаОтправки);
	
	Измененные.Добавить(ОтправленныйОбъект.Ссылка);
КонецПроцедуры

Функция ЗаголовокФормыОтправкиСведенийВФСС() Экспорт
	Возврат НСтр("ru = 'Отправка ответов на запросы ФСС для расчета пособия через СЭДО'");
КонецФункции

#КонецОбласти

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "Сотрудник");
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных(Документ = Неопределено) Экспорт
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксации(ФиксируемыеРеквизиты(Документ));
КонецФункции

// Определяет по данным документа признак фиксации.
//
// Параметры:
//   Документ - ДокументОбъект.ОтветНаЗапросФССДляРасчетаПособия, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектЗафиксирован(Документ) Экспорт
	Возврат Не Документ.ПометкаУдаления И ЗначениеЗаполнено(Документ.ДатаОтправки);
КонецФункции

#КонецОбласти

#Область МногофункциональныеДокументы

// Возвращает метаданные разделов документа.
//
// Возвращаемое значение:
//   Соответствие, Неопределено - Описание разделов документа.
//
Функция ОписаниеРазделовДанных() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗККлиентСервер");
		ВсеРазделы = Модуль.РазделыДанных();
		
		ОписаниеРазделовДанных = Новый Соответствие();
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.КадровыеДанные, ОписаниеРаздела);
		ОписаниеРаздела.РеквизитСостояние    = "Проведен";
		ОписаниеРаздела.РеквизитОтветсвенный = "Ответственный";
		
		ОписаниеРаздела = Модуль.НовыйОписаниеРазделаДанных();
		ОписаниеРазделовДанных.Вставить(ВсеРазделы.НачисленнаяЗарплата, ОписаниеРаздела);
		Возврат ОписаниеРазделовДанных;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает значения по которым будут проверяться права на документ.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//   Структура - Значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступа(ДокументОбъект) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульМногофункциональныеДокументыБЗК = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗК");
		Возврат МодульМногофункциональныеДокументыБЗК.ЗначенияДоступаПоСоставуДокумента(
			ДокументОбъект,
			ДокументОбъект.Организация);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты(Документ = Неопределено)
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	Если Документ = Неопределено Тогда
		ЗаполненВходящийЗапрос    = Истина;
		ЗаполненПервичныйДокумент = Истина;
		ЗаполненНомерЛН           = Истина;
	Иначе
		ЗаполненВходящийЗапрос    = ЗначениеЗаполнено(Документ.ВходящийЗапрос);
		ЗаполненПервичныйДокумент = ЗначениеЗаполнено(Документ.ПервичныйДокумент);
		ЗаполненНомерЛН           = ЗначениеЗаполнено(Документ.НомерЛН);
	КонецЕсли;
	
	// Первичный документ может заполниться на основании номера ЛН.
	Если ЗаполненНомерЛН Тогда
		Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
		Группа.ОснованиеЗаполнения = "ЭтотОбъект";
		Группа.ИмяГруппы           = "ЭтотОбъект";
		Группа.ФиксацияГруппы      = Ложь;
		
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПервичныйДокумент");
	КонецЕсли;
	
	// Реквизиты входящего запроса.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ВходящийЗапрос";
	Группа.ИмяГруппы           = "ВходящийЗапрос";
	Группа.ФиксацияГруппы      = Ложь;
	
	Если ЗаполненВходящийЗапрос Тогда
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Организация");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Сотрудник");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерПроцесса");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВходящийЗапросИдентификатор");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникКатегория");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВидПособия");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИзвещениеФССНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИзвещениеФССДата");
	КонецЕсли;
	
	// Реквизиты оснований.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "ПервичныйДокумент";
	Группа.ИмяГруппы           = "ПервичныйДокумент";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Исправление");
	
	Если ЗаполненПервичныйДокумент Или ЗаполненВходящийЗапрос Тогда
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктоваяЗаписьОРожденииДата");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АктоваяЗаписьОРожденииНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерЛН");
	КонецЕсли;
	
	Если ЗаполненПервичныйДокумент Тогда
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДатаНачалаСобытия");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РайонныйКоэффициент");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДоляВремени");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ДругойРодительОтсутствует");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОтДругогоРодителяДата");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СправкаОтДругогоРодителяНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииДатаВыдачи");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ИнойДокументОРожденииСерияНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииДатаВыдачи");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СвидетельствоОРожденииСерияНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПередачаНаВоспитаниеДата");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПередачаНаВоспитаниеНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсыновлениеОпекаНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсыновлениеОпекаДата");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсыновлениеОпекаТип");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокДатаРождения");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокФамилия");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокИмя");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокОтчество");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "РебенокСНИЛС");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуНомер");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуДата");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуДатаНачала");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОтпускПоУходуДатаОкончания");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховойСтажЛет");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СтраховойСтажМесяцев");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НестраховойСтажЛет");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НестраховойСтажМесяцев");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсловияИсчисленияКод1");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсловияИсчисленияКод2");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УсловияИсчисленияКод3");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ЗаменаЛетРасчетногоПериода");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПервыйРасчетныйГод");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПервыйРасчетныйГодЗаработок");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВторойРасчетныйГод");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ВторойРасчетныйГодЗаработок");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КалендарныхДнейРасчетногоПериода");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОплатаФССДатаНачала");
		ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ОплатаФССДатаОкончания");
		
		ГруппаТаблицы = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
		ГруппаТаблицы.Путь                = "ИсключаемыеПериоды";
		ГруппаТаблицы.РеквизитСтроки      = Истина;
		ГруппаТаблицы.ОснованиеЗаполнения = "ПервичныйДокумент";
		ГруппаТаблицы.ИмяГруппы           = "ПервичныйДокумент_ИсключаемыеПериоды";
		ГруппаТаблицы.ФиксацияГруппы      = Истина;
		
		ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаТаблицы, "Причина");
		
	КонецЕсли;
	
	// Реквизиты организации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Организация";
	Группа.ИмяГруппы           = "Организация";
	Группа.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Страхователь");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерСтрахователяФСС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КодПодчиненностиФСС");
	
	// Отдельные кадровые данные.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "Сотрудник";
	ГруппаКадровыеДанные.ИмяГруппы           = "СотрудникКадровыеДанные";
	ГруппаКадровыеДанные.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникДатаРождения");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникГражданство");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникПол");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникИНН");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СотрудникСНИЛС");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "СтатусНалогоплательщика");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "КодСтатусаНалогоплательщика");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ВнешнееСовместительство");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "АдресРегистрации");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "АдресПроживания");
	
	// Срочный трудовой договор.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "Сотрудник";
	ГруппаКадровыеДанные.ИмяГруппы           = "ТрудовойДоговорПериод";
	ГруппаКадровыеДанные.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ТрудовойДоговорДатаНачала");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "ТрудовойДоговорДатаОкончания");
	
	// Гражданство.
	ГруппаКадровыеДанные = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	ГруппаКадровыеДанные.ОснованиеЗаполнения = "СотрудникГражданство";
	ГруппаКадровыеДанные.ИмяГруппы           = "СотрудникГражданство";
	ГруппаКадровыеДанные.ФиксацияГруппы      = Ложь;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, ГруппаКадровыеДанные, "КодСтраныГражданства");
	
	// Кадровые данные: ФИО.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Сотрудник";
	Группа.ИмяГруппы           = "ФИО";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникФамилия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникИмя");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СотрудникОтчество");
	
	// Кадровые данные: Удостоверение личности.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Сотрудник";
	Группа.ИмяГруппы           = "УдостоверениеЛичности";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиВид");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиСерия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиНомер");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиДатаВыдачи");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиКемВыдан");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "УдостоверениеЛичностиСрокДействия");
	
	// Кадровые данные: Адрес регистрации.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "АдресРегистрации";
	Группа.ИмяГруппы           = "АдресРегистрации";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииЗаПределамиРФ");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииИндекс");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииКвартира");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииКорпус");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииФИАСДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресРегистрацииФИАСРО");
	
	// Кадровые данные: Льготы.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Сотрудник";
	Группа.ИмяГруппы           = "Льготы";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "ПричинаПредоставленияЛьготы");
	
	// Способ выплаты пособия.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Сотрудник";
	Группа.ИмяГруппы           = "СпособВыплатыПособия";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "СпособВыплатыПособия");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "КартаМИР");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "Банк");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "НомерСчета");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияВид");
	
	// Способ выплаты пособия: Сведения о банке.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "Банк";
	Группа.ИмяГруппы           = "РеквизитыБанка";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкБИК");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкКоррСчет");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "БанкНаименование");
	
	// Способ выплаты пособия: реквизиты адреса проживания.
	Группа = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Группа.ОснованиеЗаполнения = "АдресПроживания";
	Группа.ИмяГруппы           = "АдресПроживания";
	Группа.ФиксацияГруппы      = Истина;
	
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияВид");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияИндекс");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияКвартира");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияКорпус");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияФИАСДом");
	ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, "АдресПроживанияФИАСРО");
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

Процедура ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Группа, ИмяРеквизита, ОтображатьПредупреждение = Неопределено) Экспорт
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(
		ФиксируемыеРеквизиты,
		Группа,
		ИмяРеквизита,
		ОтображатьПредупреждение);
КонецПроцедуры

#КонецОбласти

#Область ТекстXML

Процедура ВыгрузитьСведенияОбЭЛН(Документ, МенеджерXML, УзелДанных)
	УзелЭЛН = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:elnInfo");
	МенеджерXML.ДобавитьУзел(УзелЭЛН, "benefit:code", Документ.НомерЛН);
КонецПроцедуры

Процедура ВыгрузитьСведенияОСтрахователе(Документ, МенеджерXML, УзелДанных)
	УзелСтрахователь = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:insurerInfo");
	
	// Регистрационный номер страхователя.
	МенеджерXML.ДобавитьУзел(УзелСтрахователь, "benefit:regNum", Документ.НомерСтрахователяФСС);
	
	// Признак места работы.
	ВнешнееСовместительство = ?(Документ.ВнешнееСовместительство, "OUTER", "NONE");
	МенеджерXML.ДобавитьУзел(УзелСтрахователь, "benefit:partTime", ВнешнееСовместительство);
	
	// Код подчиненности.
	КодПодчиненностиФСС = ?(ЗначениеЗаполнено(Документ.КодПодчиненностиФСС), Документ.КодПодчиненностиФСС, Неопределено);
	МенеджерXML.ДобавитьУзел(УзелСтрахователь, "benefit:parentNo", КодПодчиненностиФСС);
КонецПроцедуры

Процедура ВыгрузитьСведенияОЗастрахованномЛице(Документ, МенеджерXML, УзелДанных, СведенияОВидеПособия)
	УзелСотрудник = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:insuredInfo");
	
	// Категория застрахованного лица, СНИЛС, ИНН.
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:category", ВРег(УбратьПробелы(Документ.СотрудникКатегория)));
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:snils", УбратьПробелы(Документ.СотрудникСНИЛС));
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:inn", Документ.СотрудникИНН);
	
	// ФИО.
	УзелФИО = МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:fullName");
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:firstName",  Документ.СотрудникИмя);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:lastName",   Документ.СотрудникФамилия);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:middleName", Документ.СотрудникОтчество, Истина);
	
	// Дата рождения, Пол.
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:birthDate", Документ.СотрудникДатаРождения);
	Пол = ?(Документ.СотрудникПол = Перечисления.ПолФизическогоЛица.Женский, "FEMALE", "MALE");
	МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:gender", Пол);
	
	// Код статуса налогоплательщика, код страны гражданства.
	Налогоплательщик = МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:taxpayer");
	МенеджерXML.ДобавитьУзел(Налогоплательщик, "benefit:taxpayerStatus", Документ.КодСтатусаНалогоплательщика);
	МенеджерXML.ДобавитьУзел(Налогоплательщик, "benefit:countryCode",    Документ.КодСтраныГражданства);
	
	// Адрес регистрации.
	Если ЗначениеЗаполнено(Документ.АдресРегистрацииИндекс)
		И (ЗначениеЗаполнено(Документ.АдресРегистрацииФИАСДом) Или ЗначениеЗаполнено(Документ.АдресРегистрацииФИАСРО)) Тогда
		ЗаписатьАдрес(МенеджерXML, Налогоплательщик, Документ, "АдресРегистрации", "benefit:postalCode", "benefit:address");
	ИначеЕсли ЗначениеЗаполнено(Документ.АдресРегистрацииЗаПределамиРФ) Тогда
		МенеджерXML.ДобавитьУзел(Налогоплательщик, "benefit:foreignAddress", Документ.АдресРегистрацииЗаПределамиРФ);
	Иначе
		МенеджерXML.ДобавитьУзел(Налогоплательщик, "benefit:address");
		МенеджерXML.ДобавитьУзел(Налогоплательщик, "benefit:postalCode");
	КонецЕсли;
	
	// Удостоверение личности тип "IdType" пространства имен "http://www.fss.ru/integration/types/person/v02".
	УзелПаспорт = МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:id");
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(Документ.УдостоверениеЛичностиВид);
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:type",      СведенияОВидеДокумента.КодМВД);
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:series",    УбратьПробелы(Документ.УдостоверениеЛичностиСерия));
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:num",       УбратьПробелы(Документ.УдостоверениеЛичностиНомер));
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:issueDate", Документ.УдостоверениеЛичностиДатаВыдачи);
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:dept",      Документ.УдостоверениеЛичностиКемВыдан);
	МенеджерXML.ДобавитьУзел(УзелПаспорт, "person:endDate",   Документ.УдостоверениеЛичностиСрокДействия, Истина);
	
	// Срочный трудовой договор.
	Если (СведенияОВидеПособия.ЭтоОбычныйБольничный Или СведенияОВидеПособия.ЭтоОтпускПоУходу)
		И ЗначениеЗаполнено(Документ.ТрудовойДоговорДатаНачала)
		И ЗначениеЗаполнено(Документ.ТрудовойДоговорДатаОкончания)
		И (Не ЗначениеЗаполнено(Документ.ДатаНачалаСобытия)
			Или Документ.ДатаНачалаСобытия < Документ.ТрудовойДоговорДатаОкончания) Тогда
		УзелДоговор = МенеджерXML.ДобавитьУзел(УзелСотрудник, "benefit:workContract", Неопределено, Истина, Истина);
		МенеджерXML.ДобавитьУзел(УзелДоговор, "common:begin", Документ.ТрудовойДоговорДатаНачала);
		МенеджерXML.ДобавитьУзел(УзелДоговор, "common:end",   Документ.ТрудовойДоговорДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьСпособВыплаты(Документ, МенеджерXML, УзелДанных)
	УзелСпособ = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:receivePayment");
	
	// Способ выплаты пособий.
	Если Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		УзелСчетВБанке = МенеджерXML.ДобавитьУзел(УзелСпособ, "common:bankInfo");
		МенеджерXML.ДобавитьУзел(УзелСчетВБанке, "common:bankName",   Документ.БанкНаименование);
		МенеджерXML.ДобавитьУзел(УзелСчетВБанке, "common:bik",        Документ.БанкБИК);
		МенеджерXML.ДобавитьУзел(УзелСчетВБанке, "common:accountNum", Документ.НомерСчета);
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		НомерКарты = БанковскиеКарты.ПолныйНомерКарты(Документ.КартаМИР);
		МенеджерXML.ДобавитьУзел(УзелСпособ, "common:cardMir", УбратьПробелы(НомерКарты));
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		ЗаписатьАдрес(МенеджерXML, УзелСпособ, Документ, "АдресПроживания", "common:postalCode", "common:currentFiasAddress");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеДляРасчета(Документ, МенеджерXML, УзелДанных, СведенияОВидеПособия)
	УзелРасчет = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:calculationData");
	
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный Или СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
		МенеджерXML.ДобавитьУзел(УзелРасчет, "benefit:baseCalcDays", Документ.КалендарныхДнейРасчетногоПериода, Ложь, Истина);
		
		// Флаг наличия заявления о замене годов, Года для расчета, Сумма заработка за год.
		УзелГоды = МенеджерXML.ДобавитьУзел(УзелРасчет, "benefit:years");
		Если Документ.ЗаменаЛетРасчетногоПериода Тогда
			МенеджерXML.ДобавитьУзел(УзелГоды, "benefit:changeYear", Документ.ЗаменаЛетРасчетногоПериода);
		КонецЕсли;
		УзелГод1 = МенеджерXML.ДобавитьУзел(УзелГоды, "benefit:year");
		МенеджерXML.ДобавитьУзел(УзелГод1, "benefit:calc",    Документ.ПервыйРасчетныйГод);
		МенеджерXML.ДобавитьУзел(УзелГод1, "benefit:baseSum", Документ.ПервыйРасчетныйГодЗаработок);
		УзелГод2 = МенеджерXML.ДобавитьУзел(УзелГоды, "benefit:year");
		МенеджерXML.ДобавитьУзел(УзелГод2, "benefit:calc",    Документ.ВторойРасчетныйГод);
		МенеджерXML.ДобавитьУзел(УзелГод2, "benefit:baseSum", Документ.ВторойРасчетныйГодЗаработок);
	КонецЕсли;
	
	// Районный коэффициент.
	МенеджерXML.ДобавитьУзел(УзелРасчет, "benefit:kfReg", Документ.РайонныйКоэффициент*100, Ложь, Истина);
	
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный Или СведенияОВидеПособия.ЭтоБольничныйПоБиР Тогда
		// Количество ставок при неполном рабочем времени (от 0 до 1).
		МенеджерXML.ДобавитьУзел(УзелРасчет, "benefit:kfShortDays", Документ.ДоляВремени, Ложь, Истина);
		
		// Страховой стаж, Нестраховой период.
		УзелСтаж = МенеджерXML.ДобавитьУзел(УзелРасчет, "benefit:experience");
		МенеджерXML.ДобавитьУзел(УзелСтаж, "benefit:insurYY",    Документ.СтраховойСтажЛет);
		МенеджерXML.ДобавитьУзел(УзелСтаж, "benefit:insurMM",    Документ.СтраховойСтажМесяцев);
		МенеджерXML.ДобавитьУзел(УзелСтаж, "benefit:notInsurYY", Документ.НестраховойСтажЛет);
		МенеджерXML.ДобавитьУзел(УзелСтаж, "benefit:notInsurMM", Документ.НестраховойСтажМесяцев);
		
		// Условия исчисления.
		УзелУсловия = МенеджерXML.ДобавитьУзел(УзелРасчет, "benefit:calcConditionList", Неопределено, Ложь, Истина);
		Если ЗначениеЗаполнено(Документ.УсловияИсчисленияКод1) Тогда
			МенеджерXML.ДобавитьУзел(УзелУсловия, "benefit:calcCondition", Документ.УсловияИсчисленияКод1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.УсловияИсчисленияКод2) Тогда
			МенеджерXML.ДобавитьУзел(УзелУсловия, "benefit:calcCondition", Документ.УсловияИсчисленияКод2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Документ.УсловияИсчисленияКод3) Тогда
			МенеджерXML.ДобавитьУзел(УзелУсловия, "benefit:calcCondition", Документ.УсловияИсчисленияКод3);
		КонецЕсли;
		
		// Причина воздействия радиации.
		ПричинаЧислом = СЭДОФСС.ПричинаПредоставленияЛьготыЧислом(Документ.ПричинаПредоставленияЛьготы);
		Если ПричинаЧислом <> Неопределено Тогда
			МенеджерXML.ДобавитьУзел(УзелСтаж, "benefit:causeRadiation", ПричинаЧислом);
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОВидеПособия.ЭтоОбычныйБольничный Тогда
		
		// Период за который начисляется пособие ФСС.
		УзелПериод = МенеджерXML.ДобавитьУзел(УзелРасчет, "benefit:payPeriodFSS");
		Если ЗначениеЗаполнено(Документ.ОплатаФССДатаНачала) И ЗначениеЗаполнено(Документ.ОплатаФССДатаОкончания) Тогда
			МенеджерXML.ДобавитьУзел(УзелПериод, "benefit:begin", Документ.ОплатаФССДатаНачала);
			МенеджерXML.ДобавитьУзел(УзелПериод, "benefit:end",   Документ.ОплатаФССДатаОкончания);
		КонецЕсли;
		
		// Периоды за которые не начисляется пособие за счет ФСС.
		ВыгрузитьИсключаемыеПериоды(Документ, МенеджерXML, УзелРасчет);
		
		// Периоды простоя.
		ВыгрузитьПериодыПростоя(Документ, МенеджерXML, УзелРасчет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьИсключаемыеПериоды(Документ, МенеджерXML, УзелДанных)
	УзелПериоды = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:excludePeriodList");
	Для Каждого ИсключаемыйПериод Из Документ.ИсключаемыеПериоды Цикл
		Если Не ЗначениеЗаполнено(ИсключаемыйПериод.Причина)
			Или Не ЗначениеЗаполнено(ИсключаемыйПериод.ДатаНачала)
			Или Не ЗначениеЗаполнено(ИсключаемыйПериод.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		КодПричины = Перечисления.ПричиныНеоплатыБольничных.ЗначениеЧислом(ИсключаемыйПериод.Причина);
		УзелПериод = МенеджерXML.ДобавитьУзел(УзелПериоды, "benefit:excludePeriod");
		МенеджерXML.ДобавитьУзел(УзелПериод, "benefit:type", КодПричины);
		УзелДаты = МенеджерXML.ДобавитьУзел(УзелПериод, "benefit:period");
		МенеджерXML.ДобавитьУзел(УзелДаты, "common:begin", ИсключаемыйПериод.ДатаНачала);
		МенеджерXML.ДобавитьУзел(УзелДаты, "common:end", ИсключаемыйПериод.ДатаОкончания);
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузитьПериодыПростоя(Документ, МенеджерXML, УзелДанных)
	УзелПериоды = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:downPeriodList");
	Для Каждого ПериодПростоя Из Документ.ПериодыПростоя Цикл
		Если Не ЗначениеЗаполнено(ПериодПростоя.ДатаНачала)
			Или Не ЗначениеЗаполнено(ПериодПростоя.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		УзелПериод = МенеджерXML.ДобавитьУзел(УзелПериоды, "benefit:downPeriod");
		УзелДаты = МенеджерXML.ДобавитьУзел(УзелПериод, "benefit:period");
		МенеджерXML.ДобавитьУзел(УзелДаты, "common:begin",      ПериодПростоя.ДатаНачала);
		МенеджерXML.ДобавитьУзел(УзелДаты, "common:end",        ПериодПростоя.ДатаОкончания);
		МенеджерXML.ДобавитьУзел(УзелПериод, "benefit:idleAverage", ПериодПростоя.СреднийЗаработок);
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузитьСведенияОбОтпуске(Документ, МенеджерXML, УзелДанных)
	// Информация о отпуске по уходу за ребенком (отпуска по беременности и родам)).
	УзелОтпуск = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:vacation");
	
	// Номер приказа об отпуске.
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "benefit:num", Документ.ОтпускПоУходуНомер);
	
	// Дата приказа об отпуске.
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "benefit:issueDate", Документ.ОтпускПоУходуДата);
	
	// Дата начала отпуска.
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "benefit:beginDate", Документ.ОтпускПоУходуДатаНачала);
	
	// Дата окончания отпуска.
	МенеджерXML.ДобавитьУзел(УзелОтпуск, "benefit:endDate", Документ.ОтпускПоУходуДатаОкончания);
КонецПроцедуры

Процедура ВыгрузитьИнформациюОбУсыновленииОпеке(Документ, МенеджерXML, УзелДанных)
	// Данные об усыновлении/опеке.
	Если Не ЗначениеЗаполнено(Документ.УсыновлениеОпекаТип)
		И Не ЗначениеЗаполнено(Документ.УсыновлениеОпекаНомер)
		И Не ЗначениеЗаполнено(Документ.УсыновлениеОпекаДата) Тогда
		Возврат;
	КонецЕсли;
	// Тип, Номер, Дата выдачи.
	УзелОпека = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:wardInfo");
	МенеджерXML.ДобавитьУзел(УзелОпека, "benefit:type",      Документ.УсыновлениеОпекаТип,   Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелОпека, "benefit:num",       Документ.УсыновлениеОпекаНомер, Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелОпека, "benefit:issueDate", Документ.УсыновлениеОпекаДата,  Ложь, Истина);
КонецПроцедуры

Процедура ВыгрузитьИнформациюОПередачеНаВоспитание(Документ, МенеджерXML, УзелДанных)
	// Документ о передаче в приемную семью.
	Если Не ЗначениеЗаполнено(Документ.ПередачаНаВоспитаниеДата)
		И Не ЗначениеЗаполнено(Документ.ПередачаНаВоспитаниеНомер) Тогда
		Возврат;
	КонецЕсли;
	// Номер, Дата выдачи документа о передаче в приемную семью.
	УзелОпека = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:refFamilyInfo");
	МенеджерXML.ДобавитьУзел(УзелОпека, "benefit:num",       Документ.ПередачаНаВоспитаниеНомер, Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелОпека, "benefit:issueDate", Документ.ПередачаНаВоспитаниеДата,  Ложь, Истина);
КонецПроцедуры

Процедура ВыгрузитьИнформациюОРожденииРебенка(Документ, МенеджерXML, УзелДанных)
	// Информация о рождении ребенка.
	УзелРебенок = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:birthInfo", Неопределено, Ложь, Истина);
	
	Если ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииНомер)
		И ЗначениеЗаполнено(Документ.АктоваяЗаписьОРожденииДата) Тогда
		// Данные о актовой записи ЗАГС.
		УзелЗАГС = МенеджерXML.ДобавитьУзел(УзелРебенок, "benefit:zagsAct");
		МенеджерXML.ДобавитьУзел(УзелЗАГС, "benefit:num",       Документ.АктоваяЗаписьОРожденииНомер);
		МенеджерXML.ДобавитьУзел(УзелЗАГС, "benefit:issueDate", Документ.АктоваяЗаписьОРожденииДата);
		// Свидетельство о рождении.
		Свидетельство = МенеджерXML.ДобавитьУзел(УзелЗАГС, "benefit:cert", Неопределено, Истина, Истина);
		МенеджерXML.ДобавитьУзел(Свидетельство, "benefit:num",       Документ.СвидетельствоОРожденииСерияНомер);
		МенеджерXML.ДобавитьУзел(Свидетельство, "benefit:issueDate", Документ.СвидетельствоОРожденииДатаВыдачи);
	Иначе
		// Иной документ подтверждающий рождение ребенка.
		УзелИное = МенеджерXML.ДобавитьУзел(УзелРебенок, "benefit:otherDoc");
		МенеджерXML.ДобавитьУзел(УзелИное, "benefit:num",       Документ.ИнойДокументОРожденииСерияНомер, Ложь, Истина);
		МенеджерXML.ДобавитьУзел(УзелИное, "benefit:issueDate", Документ.ИнойДокументОРожденииДатаВыдачи, Ложь, Истина);
		// Свидетельство о рождении.
		Свидетельство = МенеджерXML.ДобавитьУзел(УзелИное, "benefit:cert", Неопределено, Истина, Ложь);
		МенеджерXML.ДобавитьУзел(Свидетельство, "benefit:num",       Документ.СвидетельствоОРожденииСерияНомер, Ложь, Истина);
		МенеджерXML.ДобавитьУзел(Свидетельство, "benefit:issueDate", Документ.СвидетельствоОРожденииДатаВыдачи, Ложь, Истина);
	КонецЕсли;
	
	// Дата рождения ребенка.
	МенеджерXML.ДобавитьУзел(УзелРебенок, "benefit:birthDate", Документ.РебенокДатаРождения, Ложь, Истина);
	
	// ФИО ребенка.
	УзелФИО = МенеджерXML.ДобавитьУзел(УзелРебенок, "benefit:fullName", Неопределено, Ложь, Истина);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:firstName",  Документ.РебенокИмя);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:lastName",   Документ.РебенокФамилия);
	МенеджерXML.ДобавитьУзел(УзелФИО, "person:middleName", Документ.РебенокОтчество, Истина);
	
	// СНИЛС ребенка.
	МенеджерXML.ДобавитьУзел(УзелРебенок, "benefit:snils", УбратьПробелы(Документ.РебенокСНИЛС));
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОДругомРодителе(Документ, МенеджерXML, УзелДанных)
	// Справка от другого родителя о неполучении пособия.
	УзелСправка = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:refNpayOther", Неопределено, Ложь, Истина);
	
	Если ЗначениеЗаполнено(Документ.СправкаОтДругогоРодителяНомер)
		Или ЗначениеЗаполнено(Документ.СправкаОтДругогоРодителяДата)
		Или Не Документ.ДругойРодительОтсутствует Тогда
		// Номер, Дата выдачи.
		МенеджерXML.ДобавитьУзел(УзелСправка, "benefit:num",       Документ.СправкаОтДругогоРодителяНомер, Ложь, Истина);
		МенеджерXML.ДобавитьУзел(УзелСправка, "benefit:issueDate", Документ.СправкаОтДругогоРодителяДата,  Ложь, Истина);
	Иначе
		// Заполняется в случае если другой родитель отсутствует.
		МенеджерXML.ДобавитьУзел(УзелСправка, "benefit:otherMissing", Документ.ДругойРодительОтсутствует, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьИзвещение(Документ, МенеджерXML, УзелДанных)
	
	// Данные извещения по прямым выплатам.
	Если ЗначениеЗаполнено(Документ.ИзвещениеФССДата) И ЗначениеЗаполнено(Документ.ИзвещениеФССНомер) Тогда
		УзелИзвещение = МенеджерXML.ДобавитьУзел(УзелДанных, "benefit:notice");
		МенеджерXML.ДобавитьУзел(УзелИзвещение, "benefit:num",  Документ.ИзвещениеФССНомер);
		МенеджерXML.ДобавитьУзел(УзелИзвещение, "benefit:date", Документ.ИзвещениеФССДата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАдрес(МенеджерXML, УзелАдреса, Документ, ИмяПоляАдрес, ИмяУзлаИндекс, ИмяУзлаФИАСXML)
	// Минимизация числа идентификаторов в выгрузке чтобы уменьшить расходы на проверку.
	УзелФИАС = МенеджерXML.ДобавитьУзел(УзелАдреса, ИмяУзлаФИАСXML);
	Если ЗначениеЗаполнено(Документ[ИмяПоляАдрес + "ФИАСДом"]) Тогда
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:houseGuid", Документ[ИмяПоляАдрес + "ФИАСДом"]);
	Иначе
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:guid",     Документ[ИмяПоляАдрес + "ФИАСРО"]);
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:house",    Документ[ИмяПоляАдрес + "Дом"],    Истина);
		МенеджерXML.ДобавитьУзел(УзелФИАС, "common:building", Документ[ИмяПоляАдрес + "Корпус"], Истина);
	КонецЕсли;
	МенеджерXML.ДобавитьУзел(УзелФИАС,   "common:flat",       Документ[ИмяПоляАдрес + "Квартира"], Истина);
	МенеджерXML.ДобавитьУзел(УзелАдреса, ИмяУзлаИндекс, Документ[ИмяПоляАдрес + "Индекс"]);
КонецПроцедуры

#КонецОбласти

#Область ПриЗаполненииПараметровОтправки

Функция ЗаполнитьТекстОшибкиПроверкиЗаполнения(СтрокаОтправки, ТекстИсключенияПриПроведении)
	СтрокаОтправки.Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Количество = СтрокаОтправки.Ошибки.Количество();
	Если Количество = 1 Тогда
		СтрокаОтправки.Результат = СтрокаОтправки.Ошибки[0].Текст;
	ИначеЕсли Количество > 1 Тогда
		СтрокаОтправки.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка заполнения;;%1 ошибки заполнения;%1 ошибок заполнения;'"),
			Количество);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстИсключенияПриПроведении) Тогда
		Если СтрокаОтправки.Результат = "" Тогда
			СтрокаОтправки.Результат = СтрШаблон(НСтр("ru = 'Ошибка проведения: %1'"), ТекстИсключенияПриПроведении);
		Иначе
			СтрокаОтправки.Результат = СтрокаОтправки.Результат + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'И ошибка проведения: %1'"), ТекстИсключенияПриПроведении);
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти

Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
	ИменаПолей = 
	"ФизическоеЛицо,
	|Фамилия,
	|Имя,
	|Отчество,
	|ДатаРождения,
	|Страна,
	|Пол,
	|ИНН,
	|СтраховойНомерПФР,
	|ДокументВид,
	|ДокументСерия,
	|ДокументНомер,
	|ДокументДатаВыдачи,
	|ДокументКемВыдан,
	|ДокументСрокДействия,
	|СтатусНалогоплательщика,
	|ВидЗанятости,
	|РайонныйКоэффициентРФ,
	|ЛьготаПриНачисленииПособий,
	|ОтношениеКОсобойЗоне,
	|ВидОсобойЗоны";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		ИменаПолей = ИменаПолей + 
		",
		|ДатаНачала,
		|ДатаОкончания,
		|ДоляНеполногоРабочегоВремени,
		|СрочныйДоговор";
	КонецЕсли;
	
	Возврат ИменаПолей;
КонецФункции

Функция УбратьПробелы(Строка, УбратьТире = Истина)
	ПробелыИПереносыСтрок = " " + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	Если УбратьТире Тогда
		ПробелыИПереносыСтрок = ПробелыИПереносыСтрок + "-";
	КонецЕсли;
	Возврат СтрСоединить(СтрРазделить(СокрЛП(Строка), ПробелыИПереносыСтрок, Ложь), "");
КонецФункции

Функция СоздатьДокументыПоСотрудникам(МассивСотрудников) Экспорт
	СозданныеДокументы = Новый Массив;
	
	Дата = НачалоДня(ТекущаяДатаСеанса());
	
	// Добавление новых документов.
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивСотрудников, "Организация", Дата);
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		
		КадровыеДанные = КадровыеДанныеСотрудников.Найти(Сотрудник, "Сотрудник");
		Если КадровыеДанные = Неопределено Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ГоловнаяОрганизация");
		Иначе
			Организация = КадровыеДанные.Организация;
		КонецЕсли;
		
		ДокументОбъект = Документы.ОтветНаЗапросФССДляРасчетаПособия.СоздатьДокумент();
		ДокументОбъект.Дата          = Дата;
		ДокументОбъект.Организация   = Организация;
		ДокументОбъект.Сотрудник     = Сотрудник;
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.ОбновитьВторичныеДанные();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат СозданныеДокументы;
КонецФункции

Функция КоличествоОжидаемыхСообщений(ГоловнаяОрганизация, Организации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий КАК Регистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Регистрации.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	Регистрации.Состояние = &Отправлен
	|	И Регистрации.ДатаОтправки > &ДатаНачалаАктуальности
	|	И Регистрации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И Организации.Ссылка В(&Организации)";
	
	Запрос.УстановитьПараметр("Отправлен", Перечисления.СостоянияДокументаСЭДОФСС.Отправлен);
	Запрос.УстановитьПараметр("ДатаНачалаАктуальности", ДатаНачалаАктуальности());
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Регистрации.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Регистрации.ГоловнаяОрганизация = Организации.Ссылка", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организации.Ссылка В(&Организации)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
КонецФункции

Функция ДатаНачалаАктуальности()
	Возврат НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
КонецФункции

#КонецОбласти

#КонецЕсли