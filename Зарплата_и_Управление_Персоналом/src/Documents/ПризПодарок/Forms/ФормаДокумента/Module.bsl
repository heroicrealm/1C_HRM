#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

&НаКлиенте
Перем АктивизированныйСотрудник;

&НаКлиенте
Перем СотрудникиПередУдалением;

&НаКлиенте
Перем СотрудникиКРасчету Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, МесяцРасчета",
			"Объект.Организация", 
			"Объект.Ответственный", 
			"Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
			Объект.ПериодРегистрации = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Объект.ДатаПолученияДохода = ТекущаяДатаСеанса();
		
		ЗаполнитьДанныеФормыПоОрганизации();
		ПриПолученииДанныхНаСервере();
		
		УстановитьКодДохода();
		УстановитьКодВычета();
		УстановитьВидДоходаСтраховыхВзносов();
		РассчитатьНДФЛ();
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриСозданииНаСервереФормыОбъекта(ЭтотОбъект, Отказ, СтандартнаяОбработка, Объект);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПриЧтенииНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, Объект);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДанныеВРеквизиты();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
	// БлокировкаИзмененияОбъектов
	БлокировкаИзмененияОбъектов.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец БлокировкаИзмененияОбъектов
	
	// КадровыйЭДО
	КадровыйЭДО.ПослеЗаписиНаСервереФормыОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Объект);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Оповестить("Запись_ПризПодарок", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыПоказателиДокумента" И Источник.ВладелецФормы = ЭтаФорма Тогда
		Если Параметр.Показатели.Количество() > 0 Тогда 
			ОбработатьИзменениеПоказателейНаСервере(Параметр.Показатели);
			СотрудникиКРасчету.Очистить();
			РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтаФорма, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ИсправлениеДокументовЗарплатаКадрыКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// КадровыйЭДО
	КадровыйЭДОКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец КадровыйЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры
	
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьОтветственныхЛиц();
КонецПроцедуры

&НаКлиенте
Процедура ВидПризаПодаркаПриИзменении(Элемент)
	
	ВидПризаПодаркаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодДоходаНДФЛПриИзменении(Элемент)
	
	 КодДоходаНДФЛПриИзмененииНаСервере();
	 
КонецПроцедуры

&НаКлиенте
Процедура КодВычетаНДФЛПриИзменении(Элемент)
	
	КодВычетаНДФЛПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияДоходаПриИзменении(Элемент)
	
	ДатаПолученияДоходаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредусмотреноКолдоговоромПриИзменении(Элемент)
	
	ПредусмотреноКолдоговоромПриИзмененииНаСервере();
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	ПериодРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ПериодРегистрацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

#КонецОбласти

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтаФорма, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов"

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Ложь);
	
	Если Элементы.Начисления.ТекущиеДанные <> Неопределено Тогда
		АктивизированныйСотрудник = Элементы.Начисления.ТекущиеДанные.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	СотрудникиПередУдалением = РасчетЗарплатыРасширенныйКлиент.ВыделенныеСотрудникиКоллекции(Объект.Начисления, Элементы.Начисления.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачислений(), Истина, , ОписаниеДокумента(ЭтаФорма));
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	НачисленияПослеУдаленияНаСервере(СотрудникиПередУдалением);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ОбработатьИзменениеСотрудника(Элементы.Начисления.ТекущаяСтрока, АктивизированныйСотрудник);
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	РасчетЗарплатыРасширенныйКлиент.УстановитьЗначенияКонтролируемыхПолей("Начисления", ДанныеСтроки, ЭтаФорма["КонтролируемыеПоляНачисления"], СтарыеЗначенияКонтролируемыхПолей);
	ДанныеСтроки.ФиксЗаполнение = Ложь;
	ДанныеСтроки.ФиксРасчет = Ложь;
	ДанныеСтроки.ФиксСуммаВычета = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияКодВычетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные.ФиксСуммаВычета = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСуммаВычетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные.ФиксСуммаВычета = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачислений());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыНачислений());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПересчитатьСотрудника(Команда)
	
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Начисления", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ОбновитьПодключаемыеКоманды(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Сторнировать(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Сторнировать(ЭтотОбъект, "Начисление");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКСторно(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКСторно(ЭтотОбъект);
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	НачалоПериодаПримененияОтбора = НачалоМесяца(Объект.ДатаПолученияДохода);
	ОкончаниеПериодаПримененияОтбора = КонецМесяца(Объект.ДатаПолученияДохода);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПоказыватьДоговорниковГПХ", ПолучитьФункциональнуюОпциюФормы("ИспользоватьНачисленияПоДоговорам"));
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Начисления,
		Объект.Организация, ,
		НачалоПериодаПримененияОтбора, ОкончаниеПериодаПримененияОтбора,
		, АдресСпискаПодобранныхСотрудников(),
		Новый Структура("Отбор", СтруктураОтбора));
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокумент(Команда)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатели(Команда)
	
	МассивПоказателей = Новый Массив;
	
	ПараметрыФормы = Новый Структура("МассивПоказателей", МассивПоказателей);
	ОткрытьФорму("ОбщаяФорма.ГрупповоеЗаполнениеПоказателейДокументов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// БлокировкаИзмененияОбъектов
&НаКлиенте
Процедура Подключаемый_РазблокироватьФормуОбъекта(Команда)
	
	БлокировкаИзмененияОбъектовКлиент.РазблокироватьФормуОбъекта(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры
// Конец БлокировкаИзмененияОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ИсправлениеДокументов

&НаКлиенте
Процедура УстановитьПоляИсправленияНаКлиенте() Экспорт
	
	УстановитьПоляИсправления(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПоляИсправления(Форма)

	ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(Форма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ДополнитьФорму()
	
	РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФорму(ЭтотОбъект, ОписаниеДокумента(ЭтаФорма));
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(ЭтотОбъект, ОписаниеТаблицыНачислений(), "", "КомандыНачисления");
	
	ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(ЭтотОбъект);
	
	Если КодыДоходовНДФЛПодарковПризов = Неопределено Тогда
		КодыДоходовПодарковПризов = Новый Соответствие;
		ВидПодаркаПриза = ПредопределенноеЗначение("Перечисление.ВидыПризовПодарков.Подарок");
		КодыДоходовПодарковПризов.Вставить(ВидПодаркаПриза, УчетНДФЛРасширенный.ДоходыНДФЛПоВидуПризовПодарков(ВидПодаркаПриза));
		ВидПодаркаПриза = ПредопределенноеЗначение("Перечисление.ВидыПризовПодарков.Приз");
		КодыДоходовПодарковПризов.Вставить(ВидПодаркаПриза, УчетНДФЛРасширенный.ДоходыНДФЛПоВидуПризовПодарков(ВидПодаркаПриза));
		КодыДоходовНДФЛПодарковПризов = Новый ФиксированноеСоответствие(КодыДоходовПодарковПризов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма);
	УстановитьПоляИсправления(ЭтаФорма);
	ЗарплатаКадрыРасширенный.ЗаполнитьДоступностьМестаПолученияДохода(ЭтаФорма, МассивОписанийТаблицФормы());
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ДополнитьФорму();
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(ЭтотОбъект, ОписаниеТаблицыНачислений(), "Начисления");
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
	ЗаполнитьСписокВыбораКодДоходаНДФЛ();
	УстановитьФункциональныеОпцииФормы();
	
	ДанныеВРеквизиты();
	
	УстановитьВидимостьПерерасчетов(ЭтаФорма);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.ФиксСуммаВычета");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НачисленияСуммаВычета");
	
	ТекущийШрифт = Элементы.Начисления.Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийУстановитьУсловноеОформление(ЭтотОбъект, ОписаниеТаблицыНачислений());

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПерерасчетов(Форма)
	
	ПерерасчетыДоступны = ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступны(Форма,, "", Ложь);
	Форма.Элементы.НачисленияПерерасчетСтраница.Видимость = ПерерасчетыДоступны;
	Форма.Элементы.Страницы.ОтображениеСтраниц = ?(ПерерасчетыДоступны, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКодДоходаНДФЛ()
	
	Элементы.КодДоходаНДФЛ.СписокВыбора.ЗагрузитьЗначения(КодыДоходовНДФЛПодарковПризов.Получить(Объект.ВидПризаПодарка));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодДохода()
	
	Если Объект.ВидПризаПодарка = Перечисления.ВидыПризовПодарков.Подарок Тогда
		Объект.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2720;
	Иначе
		Объект.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2740;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВычета()
	
	Объект.КодВычетаНДФЛ = УчетНДФЛ.КодВычетаПоКодуДоходаНДФЛ(Объект.КодДоходаНДФЛ);
	УстановитьКодВычетаСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВычетаСотрудников()
	
	Для Каждого ДанныеСотрудника Из Объект.Начисления Цикл 
		ДанныеСотрудника.КодВычета = Объект.КодВычетаНДФЛ;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНДФЛ(Знач СотрудникиФизическиеЛица = Неопределено, РассчитыватьВычет = Истина)
	
	Если Не ЗначениеЗаполнено(Объект.КодДоходаНДФЛ) Тогда
		Возврат;
	КонецЕсли;
	
	Если СотрудникиФизическиеЛица = Неопределено Тогда
		СотрудникиФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	КонецЕсли;
	
	Если ТипЗнч(СотрудникиФизическиеЛица) <> Тип("Массив") Тогда
		СотрудникиФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникиФизическиеЛица);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СотрудникиФизическиеЛица, Справочники.Сотрудники.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СотрудникиФизическиеЛица, Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Если СотрудникиФизическиеЛица.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивСотрудников, Справочники.Сотрудники.ПустаяСсылка());
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	ФизическиеЛицаКРасчету = Новый Соответствие;
	
	Если ТипЗнч(СотрудникиФизическиеЛица[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		Для Каждого Сотрудник Из СотрудникиФизическиеЛица Цикл 
			ФизическиеЛицаКРасчету.Вставить(ФизическиеЛицаСотрудников[Сотрудник], Истина);
		КонецЦикла;
	Иначе 
		Для Каждого ФизическоеЛицо Из СотрудникиФизическиеЛица Цикл 
			ФизическиеЛицаКРасчету.Вставить(ФизическоеЛицо, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если РассчитыватьВычет Тогда 
		РассчитатьВычет(ФизическиеЛицаКРасчету, ФизическиеЛицаСотрудников);
	КонецЕсли;
	
	ПризыПодарки = Новый ТаблицаЗначений;
	ПризыПодарки.Колонки.Добавить("НомерСтроки",	Новый ОписаниеТипов("Число"));
	ПризыПодарки.Колонки.Добавить("ФизическоеЛицо",	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПризыПодарки.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	ПризыПодарки.Колонки.Добавить("КодДохода",		Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	ПризыПодарки.Колонки.Добавить("КодВычета",		Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ПризыПодарки.Колонки.Добавить("СуммаДохода",	Новый ОписаниеТипов("Число"));
	ПризыПодарки.Колонки.Добавить("СуммаВычета",	Новый ОписаниеТипов("Число"));
	
	Для Каждого ДанныеСотрудника Из Объект.Начисления Цикл
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[ДанныеСотрудника.Сотрудник];
		Если ФизическиеЛицаКРасчету[ФизическоеЛицо] = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСотрудника.ФиксНДФЛ Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСотрудника.НДФЛ = 0;
		
		СтрокаДохода = ПризыПодарки.Добавить();
		СтрокаДохода.НомерСтроки = ДанныеСотрудника.НомерСтроки;
		СтрокаДохода.ФизическоеЛицо = ФизическоеЛицо;
		СтрокаДохода.КодДохода = Объект.КодДоходаНДФЛ;
		СтрокаДохода.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ПрочиеНатуральныеДоходы;
		СтрокаДохода.КодВычета = Объект.КодВычетаНДФЛ;
		СтрокаДохода.СуммаДохода = ДанныеСотрудника.Результат;
		СтрокаДохода.СуммаВычета = ДанныеСотрудника.СуммаВычета;
		
	КонецЦикла;
	
	Если ПризыПодарки.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	УчетНДФЛРасширенный.РассчитатьНалогДляКонкретногоДохода(Объект.ДатаПолученияДохода, ПризыПодарки);
	
	Для Каждого СтрокаДохода Из ПризыПодарки Цикл 
		НайденныеСтроки = Объект.Начисления.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаДохода.НомерСтроки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеСотрудника = НайденныеСтроки[0];
			ДанныеСотрудника.СуммаНДФЛ = СтрокаДохода.НДФЛ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВычет(ФизическиеЛицаКРасчету, ФизическиеЛицаСотрудников)
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ИсходныеДанные.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	ИсходныеДанные.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ИсходныеДанные.Колонки.Добавить("КоличествоДетей", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.ПризПодарок"));
	ИсходныеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Для Каждого ДанныеСотрудника Из Объект.Начисления Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.Сотрудник)
			Или Не ЗначениеЗаполнено(ДанныеСотрудника.КодВычета) Тогда
			Продолжить;
		КонецЕсли;
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[ДанныеСотрудника.Сотрудник];
		Если ФизическиеЛицаКРасчету[ФизическоеЛицо] = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ДанныеСотрудника.ФиксСуммаВычета Тогда 
			ДанныеСотрудника.СуммаВычета = 0;
		КонецЕсли;
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.КодДохода = Объект.КодДоходаНДФЛ;
		НоваяСтрока.Сумма = ДанныеСотрудника.Результат;
		НоваяСтрока.КодВычета = ДанныеСотрудника.КодВычета;
		НоваяСтрока.Регистратор = Объект.Ссылка;
		НоваяСтрока.НомерСтроки = ДанныеСотрудника.НомерСтроки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ФизическоеЛицо,
	|	ИсходныеДанные.КодДохода,
	|	ИсходныеДанные.Сумма,
	|	ИсходныеДанные.КодВычета,
	|	ИсходныеДанные.КоличествоДетей,
	|	ИсходныеДанные.Регистратор,
	|	ИсходныеДанные.НомерСтроки
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	Запрос.Выполнить();
	
	ОтменятьТранзакцию = Ложь;
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Если Не ТранзакцияАктивна() Тогда
			ОтменятьТранзакцию = Истина;
			НачатьТранзакцию();
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Объект.ИсправленныйДокумент);
		НаборЗаписей.Записать();
		НаборЗаписей = РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Объект.ИсправленныйДокумент);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(Объект.Ссылка, Объект.Организация, Объект.ДатаПолученияДохода, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВычетыКДоходамФизическихЛиц.НомерСтроки КАК НомерСтроки,
	|	ВычетыКДоходамФизическихЛиц.СуммаВычета
	|ИЗ
	|	ВТВычетыКДоходамФизическихЛиц КАК ВычетыКДоходамФизическихЛиц
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		НайденныеСтроки = Объект.Начисления.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеСотрудника = НайденныеСтроки[0];
			Пока Выборка.Следующий() Цикл
				Если Не ДанныеСотрудника.ФиксСуммаВычета Тогда 
					ДанныеСотрудника.СуммаВычета = ДанныеСотрудника.СуммаВычета + Выборка.СуммаВычета;
				КонецЕсли;
			КонецЦикла;
			ДанныеСотрудника.СуммаВычета = Мин(ДанныеСотрудника.СуммаВычета, ДанныеСотрудника.Результат);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.МесяцНачисленияИмя				= "ПериодРегистрации";
	Описание.ИменаПолейНачисления			= "ВидПризаПодарка";
	Описание.ВидНачисленияВШапке			= Истина;
	Описание.ВидНачисленияИмя				= "ВидПризаПодарка";
	
	Описание.ПериодДействияВШапке			= Истина;
	Описание.ПланируемаяДатаВыплатыИмя		= "ДатаПолученияДохода";
	Описание.ПорядокВыплатыИмя				= Неопределено;
	
	Описание.НачисленияИмя					= "Начисления";
	Описание.НачисленияКоманднаяПанельИмя	= "КомандыНачисления";
	
	Описание.УстанавливатьФиксРасчет		= Ложь;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Месяц", "МесяцНачисленияСтрокой"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Дата получения дохода", "Объект.ДатаПолученияДохода"));
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.СодержитПолеСотрудник				= Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник				= "Сотрудник";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета				= "ВидПризаПодарка";
	ОписаниеТаблицы.СодержитПолеВидРасчета				= Ложь;
	ОписаниеТаблицы.ИмяРеквизитаДатаНачала				= Неопределено;
	ОписаниеТаблицы.ИмяРеквизитаДатаОкончания			= Неопределено;
	ОписаниеТаблицы.ИмяРеквизитаПериод					= "ДатаПолученияДохода";
	ОписаниеТаблицы.СодержитПолеКодВычета 				= Истина;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления				= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетов()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ЭтоПерерасчеты 							= Истина;
	ОписаниеТаблицы.СодержитПолеСотрудник					= Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник					= "Сотрудник";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета					= "ВидПризаПодарка";
	ОписаниеТаблицы.СодержитПолеВидРасчета					= Ложь;
	ОписаниеТаблицы.ИмяРеквизитаДатаНачала					= Неопределено;
	ОписаниеТаблицы.ИмяРеквизитаДатаОкончания				= Неопределено;
	ОписаниеТаблицы.ИмяРеквизитаПериод						= "ДатаПолученияДохода";
	ОписаниеТаблицы.СодержитПолеКодВычета 					= Истина;
	ОписаниеТаблицы.СодержитПолеМестоПолученияДохода 		= Истина;
	ОписаниеТаблицы.СодержитРегистраторРазовогоНачисления 	= Истина;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления					= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы()
	
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений());
	МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов());
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции

&НаСервере
Процедура НачисленияПослеУдаленияНаСервере(Сотрудники)
	
	РасчетЗарплатыРасширенный.ОчиститьДанныеФормыПоСотруднику(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), Сотрудники, Объект.Организация);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСотрудника(ИдентификаторСтроки, ПрежнийСотрудник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник;
	
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки);
	
	РасчетЗарплатыРасширенный.ОбработатьИзменениеСотрудникаВедущейТаблицыФормы(
		ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Сотрудник, ПрежнийСотрудник);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки)
	
	ДополнитьСтрокиНаСервере(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСтроки));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокиНаСервере(ИдентификаторыСтрок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокСотрудников = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл 
		ДанныеСотрудника = Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(ДанныеСотрудника.Сотрудник) Тогда 
			СписокСотрудников.Добавить(ДанныеСотрудника.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, "Подразделение", Объект.ДатаПолученияДохода);
	
	Для Каждого КадровыеДанныеСотрудника Из КадровыеДанные Цикл 
		НайденныеСтроки = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", КадровыеДанныеСотрудника.Сотрудник));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Подразделение = КадровыеДанныеСотрудника.Подразделение;
			НайденнаяСтрока.КодВычета = Объект.КодВычетаНДФЛ;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если Не РасчетЗарплатыРасширенныйКлиент.ДобавитьСотрудникаКРасчету(ЭтаФорма, Сотрудник, ОписаниеТаблицы) Тогда
		РассчитатьСотрудникаНаСервере(Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник)
	
	РассчитатьНДФЛ(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник));
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВидПризаПодаркаПриИзмененииНаСервере()
	
	УстановитьКодДохода();
	ЗаполнитьСписокВыбораКодДоходаНДФЛ();
	УстановитьКодВычета();
	РассчитатьНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура КодДоходаНДФЛПриИзмененииНаСервере()
	
	УстановитьКодВычета();
	РассчитатьНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура КодВычетаНДФЛПриИзмененииНаСервере()
	
	УстановитьКодВычетаСотрудников();
	РассчитатьНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПолученияДоходаПриИзмененииНаСервере()
	
	УстановитьКодВычета();
	РассчитатьНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура ПредусмотреноКолдоговоромПриИзмененииНаСервере()
	
	УстановитьВидДоходаСтраховыхВзносов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидДоходаСтраховыхВзносов()
	
	Если Объект.ПредусмотреноКолдоговором Тогда
		Объект.ВидДоходаСтраховыеВзносы  = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Иначе
		Объект.ВидДоходаСтраховыеВзносы  = Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.ПериодРегистрации));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтветственныхЛиц()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеЗначения = Новый Структура("Организация, МесяцРасчета", "Объект.Организация", "Объект.ПериодРегистрации");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
	УстановитьОтветственныхЛиц();
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораНаСервере(Знач Сотрудники)
	
	ИдентификаторыСтрок = Новый Массив;
	
	Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		
		Если СтрокиНачислений.Количество() = 0 Тогда
			СтрокаНачисления = Объект.Начисления.Добавить();
			СтрокаНачисления.Сотрудник = Сотрудник;
		Иначе
			СтрокаНачисления = СтрокиНачислений[0];
		КонецЕсли;
		
		ИдентификаторыСтрок.Добавить(СтрокаНачисления.ПолучитьИдентификатор());
	КонецЦикла;
	
	ОбработатьДобавлениеСотрудников(ИдентификаторыСтрок, Сотрудники);
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	ПерезаполнитьДанныеФормыНаСервере(Сотрудники, СохранятьИсправления);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеФормыНаСервере(Знач Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	Если НЕ СохранятьИсправления Тогда
		Отбор = Новый Структура("Сотрудник");
		Для каждого Сотрудник Из Сотрудники Цикл
			Отбор.Вставить("Сотрудник", Сотрудник);
			
			// Заполняем поля по итогам заполнения коллекций.
			СтрокиПоСотруднику = Объект.Начисления.НайтиСтроки(Отбор);
			Для каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
				ИдентификаторыСтрок.Добавить(СтрокаПоСотруднику.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДополнитьСтрокиНаСервере(ИдентификаторыСтрок);
	РассчитатьНДФЛ(Сотрудники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСотрудника(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля) Экспорт
	ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля)
	РасчетЗарплатыРасширенный.ПересчитатьСотрудникаНаСервере(ЭтаФорма, ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавлениеСотрудников(ИдентификаторыСтрок, Сотрудники)
	
	ДополнитьСтрокиНаСервере(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	СотрудникиКРасчету.Очистить();
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПоказателейНаСервере(ЗначенияПоказателей)
	
	ФиксированнаяСумма = ЗначенияПоказателей[Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка()];
	
	Сотрудники = Новый Массив;
	УникальныеСотрудники = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из Объект.Начисления Цикл
		
		Если ФиксированнаяСумма <> Неопределено Тогда
			СтрокаСотрудника.Результат = ФиксированнаяСумма;
		КонецЕсли;
		
		Если УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
			Сотрудники.Добавить(СтрокаСотрудника.Сотрудник);
			УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьНДФЛ();
	РассчитатьСотрудникаНаСервере(Сотрудники);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере(СотрудникиКРасчету)
	
	Для Каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаССотрудниками.Значение.СписокСотрудников, "Ключ");
		РассчитатьНДФЛ(Сотрудники);
	КонецЦикла;
	
КонецПроцедуры

#Область КонтролируемыеПоля

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Сотрудник");
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксСуммаВычета = Новый Массив;
	НачисленияФиксСуммаВычета.Добавить("КодВычета");
	НачисленияФиксСуммаВычета.Добавить("СуммаВычета");
	
	НачисленияФиксЗаполнение = Новый Массив;
	НачисленияФиксЗаполнение.Добавить("МестоПолученияДохода");
	
	НачисленияФиксНДФЛ = Новый Массив;
	НачисленияФиксНДФЛ.Добавить("СуммаНДФЛ");
	
	НачисленияПоля = Новый Структура;
	НачисленияПоля.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	НачисленияПоля.Вставить("ФиксЗаполнение", НачисленияФиксЗаполнение);
	НачисленияПоля.Вставить("ФиксСуммаВычета", НачисленияФиксСуммаВычета);
	НачисленияПоля.Вставить("ФиксНДФЛ", НачисленияФиксНДФЛ);
	
	Возврат Новый Структура("Начисления", НачисленияПоля);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	
	Возврат СтарыеЗначенияКонтролируемыхПолей;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

&НаСервере
// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.ФизическиеЛица");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

// КадровыйЭДО
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодключаемыеКоманды(УправляемаяФорма)
	
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, УправляемаяФорма.Объект, Истина);
	
КонецПроцедуры
// Конец КадровыйЭДО

#КонецОбласти

#Область Инициализация

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
СотрудникиКРасчету = Новый Соответствие;

#КонецОбласти
