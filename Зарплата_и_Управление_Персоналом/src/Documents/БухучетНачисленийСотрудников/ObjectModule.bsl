#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не РазныеДатыДляСотрудников Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ДатаНачала");
	КонецЕсли;
	
	КонтейнерОшибок = Неопределено;
	ПроверкаЗаполненияТаблицыСотрудники(КонтейнерОшибок);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, , Истина)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетПлановыхНачислений(Движения, ДанныеДляПроведения.ОтражениеВБухучете);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает таблицу значений - данные, необходимые для формирования плановых начислений по договорам.
//
Функция ДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РазныеДатыДляСотрудников", РазныеДатыДляСотрудников);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &РазныеДатыДляСотрудников
	|			ТОГДА Бухучет.ДатаНачала
	|		ИНАЧЕ &ДатаНачала
	|	КОНЕЦ КАК Период,
	|	Бухучет.Сотрудник КАК Сотрудник,
	|	&Организация КАК Организация,
	|	Бухучет.Начисление КАК Начисление,
	|	Бухучет.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Бухучет.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Бухучет.СтатьяРасходов КАК СтатьяРасходов,
	|	Бухучет.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ВЫБОР
	|		КОГДА Бухучет.ДокументОснование В (ЗНАЧЕНИЕ(Документ.Совмещение.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.НазначениеПлановогоНачисления.ПустаяСсылка))
	|				ИЛИ НЕ Бухучет.Начисление.ПоддерживаетНесколькоПлановыхНачислений
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Бухучет.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ИСТИНА КАК Используется,
	|	ИСТИНА КАК НеИзменятьПриОтменеНачисления
	|ИЗ
	|	Документ.БухучетНачисленийСотрудников.Сотрудники КАК Бухучет
	|ГДЕ
	|	Бухучет.Ссылка = &Регистратор";
	
	ДанныеДляПроведения.Вставить("ОтражениеВБухучете", Запрос.Выполнить().Выгрузить());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ПроверкаЗаполненияТаблицыСотрудники(КонтейнерОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение)";
	ДоплатыЗаСовмещение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого СтрокаТЧ Из Сотрудники Цикл
	
		Если ДоплатыЗаСовмещение.Найти(СтрокаТЧ.Начисление) <> Неопределено И Не ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 не заполнено Основание.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СтрокаТЧ.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Сотрудники[%1].ДокументОснование", ТекстСообщения, "", СтрокаТЧ.НомерСтроки,,СтрокаТЧ.НомерСтроки-1);
			
		КонецЕсли;
	
	КонецЦикла;
		
КонецПроцедуры


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли