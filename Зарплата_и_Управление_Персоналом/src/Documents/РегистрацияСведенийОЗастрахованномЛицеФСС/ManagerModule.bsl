///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ДокументОснование)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ДокументОснование)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область СоставДокументов

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
//
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке("ФизическоеЛицо", "");
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СЭДО

// Загружает ошибку логического контроля регистрации сведений о застрахованном лице.
Процедура ЗагрузитьОшибкуСообщения86(Страхователь, ИдентификаторСообщения, ТекстОшибки, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК РегистрацияСведенийОЗастрахованномЛицеФСС
	|ГДЕ
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.ДоставкаИдентификатор = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.Ссылка
	|ИЗ
	|	Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК РегистрацияСведенийОЗастрахованномЛицеФСС
	|ГДЕ
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.РегистрацияИдентификатор = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	ТекстОшибки = СокрЛП(ТекстОшибки);
	Добавка = Символы.ПС + Символы.ПС + НСтр("ru = 'Ошибка логического контроля: '") + СокрЛ(ТекстОшибки);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		Если СтрНайти(Объект.ОшибкиЛогическогоКонтроля, ТекстОшибки) = 0 Тогда
			Если ПустаяСтрока(Объект.ОшибкиЛогическогоКонтроля) Тогда
				Объект.ОшибкиЛогическогоКонтроля = ТекстОшибки;
			Иначе
				Объект.ОшибкиЛогическогоКонтроля = Объект.ОшибкиЛогическогоКонтроля + Символы.ПС + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		Объект.ЕстьОшибкиЛогическогоКонтроля = Истина;
		Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	
КонецПроцедуры

// Загружает результат регистрации сведений о застрахованном лице в базу данных.
Процедура ЗагрузитьСообщение87(Страхователь, ИдентификаторСообщения, ТекстXML, Результат) Экспорт
	// Примера нет, ожидаемые поля: snils, status(enumeration), protocol[item[mnemonic,level,text,description]].
	// Поиск корневого узла.
	ОбъектXDTO = ОбъектXDTOПоСНИЛС(ТекстXML, Результат, ИдентификаторСообщения);
	Если ОбъектXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Чтение реквизитов.
	ДатаСообщения   = СЭДОФСС.ДатаСообщения(ИдентификаторСообщения);
	СНИЛСФСС        = СериализацияБЗК.СтроковыйРеквизитОбъекта(ОбъектXDTO, "snils");
	СНИЛС           = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СНИЛСФСС);
	Статус          = СериализацияБЗК.СтроковыйРеквизитОбъекта(ОбъектXDTO, "status");
	Протокол        = СериализацияБЗК.СписокXDTO(ОбъектXDTO, "protocol.item");
	ПредставлениеПротокола = ПредставлениеПротокола(Протокол);
	СведенияОСтатусе       = СведенияОСтатусеРегистрации(Статус);
	
	Если ЗначениеЗаполнено(Статус) И СведенияОСтатусе.Расшифровка = "" Тогда
		Текст = СтрШаблон(НСтр("ru = 'Неизвестный статус: ""%1"".'"), Статус);
		ПредставлениеПротокола = Текст + Символы.ПС + ПредставлениеПротокола;
	КонецЕсли;
	
	ДоставкаИдентификатор = СериализацияБЗК.СтроковыйРеквизитОбъекта(ОбъектXDTO, "responseOn");
	
	// Поиск и создание документа.
	ТекстОшибки = "";
	Объект = СоздатьДокументПоСообщению(СНИЛС, Страхователь, ТекстОшибки, ДоставкаИдентификатор, ДатаСообщения, "Регистрация", ИдентификаторСообщения);
	Если Объект = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки + " " + СтрШаблон(НСтр("ru = 'Текст XML: %1.'"), ТекстXML);
			СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РегистрацияСтатус) Тогда
		СведенияОСтатусеОбъекта = СведенияОСтатусеРегистрации(Объект.РегистрацияСтатус);
		Если СведенияОСтатусе.Приоритет < СведенияОСтатусеОбъекта.Приоритет Тогда
			Возврат; // Неактуальный (старый) статус.
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение документа.
	Объект.Зарегистрирован          = СведенияОСтатусе.Зарегистрирован;
	Объект.РегистрацияДата          = ДатаСообщения;
	Объект.РегистрацияСтатус        = Статус;
	Объект.РегистрацияПротокол      = ПредставлениеПротокола;
	Объект.РегистрацияИдентификатор = ИдентификаторСообщения;
	Если Объект.Зарегистрирован Тогда
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	Результат.Обработано = Истина;
КонецПроцедуры

// Загружает информацию о несоответствии сведений о застрахованном лице в базу данных.
Процедура ЗагрузитьСообщение88(Страхователь, ИдентификаторСообщения, ТекстXML, Результат) Экспорт
	// Примера нет, ожидаемые поля: snils, protocol[item[code,message,description]].
	// Поиск корневого узла.
	ОбъектXDTO = ОбъектXDTOПоСНИЛС(ТекстXML, Результат, ИдентификаторСообщения);
	Если ОбъектXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Чтение реквизитов.
	ДатаСообщения = СЭДОФСС.ДатаСообщения(ИдентификаторСообщения);
	СНИЛСФСС      = СериализацияБЗК.СтроковыйРеквизитОбъекта(ОбъектXDTO, "snils");
	СНИЛС         = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СНИЛСФСС);
	Протокол      = СериализацияБЗК.СписокXDTO(ОбъектXDTO, "protocol.item");
	ПредставлениеПротокола = ПредставлениеПротокола(Протокол);
	ДоставкаИдентификатор = СериализацияБЗК.СтроковыйРеквизитОбъекта(ОбъектXDTO, "responseOn");
	
	// Поиск и создание документа.
	ТекстОшибки = "";
	Объект = СоздатьДокументПоСообщению(СНИЛС, Страхователь, ТекстОшибки, ДоставкаИдентификатор, ДатаСообщения, "Несоответствие", ИдентификаторСообщения);
	Если Объект = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки + " " + СтрШаблон(НСтр("ru = 'Текст XML: %1.'"), ТекстXML);
			СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Заполнение документа.
	Объект.НесоответствиеИдентификатор = ИдентификаторСообщения;
	Объект.НесоответствиеПротокол      = ПредставлениеПротокола;
	Объект.НесоответствиеДата          = ДатаСообщения;
	Объект.Записать(РежимЗаписиДокумента.Запись);
	
	Результат.Обработано = Истина;
КонецПроцедуры

// Находит корневой узел по имени вложенного узла "snils".
Функция ОбъектXDTOПоСНИЛС(ТекстXML, Результат, ИдентификаторСообщения)
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	ЭлементDOM = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'snils']/..");
	Если ЭлементDOM = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В xml-содержимом сообщения не удалось найти узел ""snils"". Текст XML: %1'"), ТекстXML);
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	ФрагментXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(ЭлементDOM);
	ОбъектXDTO  = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(ФрагментXML);
	Возврат ОбъектXDTO;
КонецФункции

Функция ПредставлениеПротокола(Протокол)
	// Для сообщения 87 ожидаемые поля: mnemonic,level,text,description.
	// Для сообщения 88 ожидаемые поля: code,message,description.
	Если Протокол = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МассивСтрок = Новый Массив;
	Для Каждого ЗаписьПротокола Из Протокол Цикл
		Тип         = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "mnemonic");
		Код         = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "code");
		УровеньАнгл = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "level");
		Текст       = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "text");
		Сообщение   = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "message");
		Подробности = СериализацияБЗК.СтроковыйРеквизитОбъекта(ЗаписьПротокола, "description");
		// Все данные будут записываться в переменную Текст.
		Если ЗначениеЗаполнено(Текст) Тогда
			Массив = СтрРазделить(Текст, Символы.ПС + Символы.ВК, Ложь);
			Текст = СтрСоединить(Массив, Символы.ПС + "  ");
		КонецЕсли;
		Если ЗначениеЗаполнено(Сообщение) Тогда
			Массив = СтрРазделить(Сообщение, Символы.ПС + Символы.ВК, Ложь);
			Сообщение = СтрСоединить(Массив, Символы.ПС + "  ");
			Текст = ?(ЗначениеЗаполнено(Текст), Текст + Символы.ПС + "  " + Сообщение, Сообщение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Подробности) Тогда
			Массив = СтрРазделить(Подробности, Символы.ПС + Символы.ВК, Ложь);
			Подробности = СтрСоединить(Массив, Символы.ПС + "    ");
			Текст = ?(ЗначениеЗаполнено(Текст), Текст + Символы.ПС + "    " + Подробности, Подробности);
		КонецЕсли;
		Если ЗначениеЗаполнено(Тип) Тогда
			Текст = СокрП(Тип + ": " + Текст);
		КонецЕсли;
		Если ЗначениеЗаполнено(Код) Тогда
			Текст = СокрП(Код + ": " + Текст);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Текст) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(УровеньАнгл) Тогда
			Если СтрСравнить(УровеньАнгл, "INFO") = 0 Тогда
				Уровень = Строка(УровеньЖурналаРегистрации.Информация);
			ИначеЕсли СтрСравнить(УровеньАнгл, "WARN") = 0 Тогда
				Уровень = Строка(УровеньЖурналаРегистрации.Предупреждение);
			ИначеЕсли СтрСравнить(УровеньАнгл, "ERR") = 0 Тогда
				Уровень = Строка(УровеньЖурналаРегистрации.Ошибка);
			Иначе
				Уровень = УровеньАнгл;
			КонецЕсли;
			Текст = "[" + Уровень + "] " + Текст;
		КонецЕсли;
		МассивСтрок.Добавить(Текст);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция СведенияОСтатусеРегистрации(Статус)
	Результат = Новый Структура("Приоритет, Зарегистрирован, Расшифровка");
	
	СтатусВРег = ВРег(СокрЛП(Статус));
	
	// Статусы из актуальной спецификации.
	Если СтатусВРег = "RECEIVED" Тогда
		Результат.Приоритет       = 1;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Началась регистрация карточки застрахованного лица'");
		
	ИначеЕсли СтатусВРег = "ERROR" Тогда
		Результат.Приоритет       = 2;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Регистрация отклонена, выявлены ошибки не позволяющие зарегистрировать карточку застрахованного лица'");
		
	ИначеЕсли СтатусВРег = "PROCESSED" Тогда
		Результат.Приоритет       = 3;
		Результат.Зарегистрирован = Истина;
		Результат.Расшифровка     = НСтр("ru = 'Карточка застрахованного лица успешно зарегистрирована'");
	
	// Статусы из первых версий спецификации.
	ИначеЕсли СтатусВРег = "INVALIDATE" Тогда
		Результат.Приоритет       = 2;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = НСтр("ru = 'Карточка застрахованного лица не актуальна'");
		
	ИначеЕсли СтатусВРег = "REGISTRED" Тогда
		Результат.Приоритет       = 3;
		Результат.Зарегистрирован = Истина;
		Результат.Расшифровка     = НСтр("ru = 'Карточка застрахованного лица принята'");
		
	Иначе
		Результат.Приоритет       = 0;
		Результат.Зарегистрирован = Ложь;
		Результат.Расшифровка     = "";
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СоздатьДокументПоСообщению(СНИЛС, Страхователь, ТекстОшибки, ДоставкаИдентификатор, ДатаСообщения, ПрефиксПоля, Идентификатор)
	// Проверка СНИЛС, поиск физического лица и головной организации.
	Если Не ЗначениеЗаполнено(СНИЛС) Тогда
		ТекстОшибки = НСтр("ru = 'В xml-документе пустой узел ""snils"".'");
		Возврат Неопределено;
	КонецЕсли;
	РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(СНИЛС, "", "", "");
	ФизическоеЛицо = РезультатПоиска.ФизическоеЛицо;
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ТекстОшибки = РезультатПоиска.ТекстОшибки;
		Возврат Неопределено;
	КонецЕсли;
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Страхователь);
	
	// Поиск документа по идентификатору или физическому лицу.
	ДокументОснование = Неопределено;
	Объект = Неопределено;
	Ссылка = НайтиПоРеквизиту(ПрефиксПоля + "Идентификатор", Идентификатор);
	Если Не ЗначениеЗаполнено(Ссылка) И ЗначениеЗаполнено(ДоставкаИдентификатор) Тогда
		Ссылка = НайтиПоРеквизиту("ДоставкаИдентификатор", ДоставкаИдентификатор);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Регистр = СведенияОРегистрацииИзРегистра(ФизическоеЛицо, ГоловнаяОрганизация);
		ДокументОснование = Регистр.ОтправленныеСведения;
		Если ЗначениеЗаполнено(Регистр.РегистрацияСведений)
			И Не ЗначениеЗаполнено(Регистр[ПрефиксПоля + "Идентификатор"]) Тогда
			Ссылка = Регистр.РегистрацияСведений;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение документа.
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Объект = Ссылка.ПолучитьОбъект();
		// Если идентификатор доставки совпадает, то проверки дат не требуются.
		Если ЗначениеЗаполнено(ДоставкаИдентификатор)
			И Объект.ДоставкаИдентификатор = ДоставкаИдентификатор Тогда
			Возврат Объект;
		КонецЕсли;
		// Исключение затирания ранними сообщениями актуальной информации.
		Если ЗначениеЗаполнено(Объект[ПрефиксПоля + "Идентификатор"])
			И Объект[ПрефиксПоля + "Идентификатор"] <> Идентификатор
			И Объект[ПрефиксПоля + "Дата"] > ДатаСообщения Тогда
			ТекстЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сообщение СЭДО %1 от %2 не повлияло на учет отправленных сведений, поскольку в программу уже загружено более позднее сообщение %3 от %4. Физическое лицо: %5, Страхователь: %6.'"),
				Идентификатор,
				ДатаСообщения,
				Объект[ПрефиксПоля + "Идентификатор"],
				Объект[ПрефиксПоля + "Дата"],
				ФизическоеЛицо,
				Страхователь);
			ЗаписьЖурналаРегистрации(
				СЭДОФСС.ИмяСобытияЖурнала(),
				УровеньЖурналаРегистрации.Предупреждение,
				Объект.Метаданные(),
				Ссылка,
				ТекстЖурнала);
			Возврат Неопределено;
		КонецЕсли;
		Если НачалоДня(Объект.ДатаОтправки) > ДатаСообщения Тогда
			ТекстЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сообщение СЭДО %1 от %2 не повлияло на учет отправленных сведений, поскольку из программы позже (%3) отправлены новые сведения. Физическое лицо: %4, Страхователь: %5.'"),
				Идентификатор,
				ДатаСообщения,
				Объект.ДатаОтправки,
				ФизическоеЛицо,
				Страхователь);
			ЗаписьЖурналаРегистрации(
				СЭДОФСС.ИмяСобытияЖурнала(),
				УровеньЖурналаРегистрации.Предупреждение,
				Объект.Метаданные(),
				Ссылка,
				ТекстЖурнала);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Объект = СоздатьДокумент();
		Объект.ДокументОснование   = ДокументОснование;
		Объект.СНИЛС               = СНИЛС;
		Объект.ФизическоеЛицо      = ФизическоеЛицо;
		Объект.ГоловнаяОрганизация = ГоловнаяОрганизация;
	КонецЕсли;
	
	Возврат Объект;
КонецФункции

Функция СведенияОРегистрацииИзРегистра(ФизическоеЛицо, ГоловнаяОрганизация)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗастрахованныхЛицахФСС.РегистрацияСведений КАК РегистрацияСведений,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.ДоставкаИдентификатор КАК ДоставкаИдентификатор,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.РегистрацияИдентификатор КАК РегистрацияИдентификатор,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.НесоответствиеИдентификатор КАК НесоответствиеИдентификатор,
	|	СведенияОЗастрахованныхЛицахФСС.ОтправленныеСведения КАК ОтправленныеСведения
	|ИЗ
	|	РегистрСведений.СведенияОЗастрахованныхЛицахФСС КАК СведенияОЗастрахованныхЛицахФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК РегистрацияСведенийОЗастрахованномЛицеФСС
	|		ПО СведенияОЗастрахованныхЛицахФСС.РегистрацияСведений = РегистрацияСведенийОЗастрахованномЛицеФСС.Ссылка
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахФСС.ФизическоеЛицо = &ФизическоеЛицо
	|	И СведенияОЗастрахованныхЛицахФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Таблица.Добавить();
	КонецЕсли;
	Возврат Таблица[0];
КонецФункции


#КонецОбласти


#КонецОбласти

#КонецЕсли