///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	// Второстепенные реквизиты шапки заполняются в функции ОбновитьВторичныеДанные.
	ФиксацияИзменений.Очистить();
	
	// Заполнение ключевых реквизитов шапки.
	Организация = ОбъектКопирования.Организация;
	Сотрудник   = ОбъектКопирования.Сотрудник;
	
	// Очистка результатов.
	КоличествоОшибокПроведения  = Неопределено;
	ОтключитьПроверкиПроведения = Ложь;
	РегистрацияСведений         = Неопределено;
	ХранилищеXML                = Неопределено;
	ДатаОтправки                = Неопределено;
КонецПроцедуры

Процедура ОбработкаЗаполнения(СсылкаОснования, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(СсылкаОснования) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаОснования, "Организация, Сотрудник");
		Организация = РеквизитыОснования.Организация;
		Сотрудник   = РеквизитыОснования.Сотрудник;
	ИначеЕсли ТипЗнч(СсылкаОснования) = Тип("ДокументСсылка.Увольнение") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаОснования, "Организация, Сотрудник");
		Организация = РеквизитыОснования.Организация;
		Сотрудник   = РеквизитыОснования.Сотрудник;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьСНИЛС(Отказ);
	ПроверитьРеквизитыСотрудника(Отказ);
	ПроверитьСпособВыплатыПособий(Отказ);
	
	Если ЗначениеЗаполнено(ДатаУвольнения) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдостоверениеЛичностиВид");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдостоверениеЛичностиДатаВыдачи");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдостоверениеЛичностиКемВыдан");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдостоверениеЛичностиНомер");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СпособВыплатыПособия");
	КонецЕсли;
	
	// Проверка что на дату нет других действующих сведений.
	Если Не ДополнительныеСвойства.Свойство("КритичныеПроверкиЗаполненияВыполнены") Тогда
		Ошибки = КритичныеОшибкиЗаполнения();
		Для Каждого Ошибка Из Ошибки Цикл
			Отказ = Истина;
			Ошибка.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// Заполнение недостающих полей.
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата(); // АПК:143 Для фильтрации событий в журнале регистрации требуется дата сервера.
	КонецЕсли;
	
	// Далее - бизнес-логика, выход если она отключена.
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроведение = (РежимЗаписи = РежимЗаписиДокумента.Проведение
		Или (Проведен И РежимЗаписи = РежимЗаписиДокумента.Запись));
	
	Если Не ПометкаУдаления И Не ДополнительныеСвойства.Свойство("КритичныеПроверкиЗаполненияВыполнены") Тогда
		Ошибки = КритичныеОшибкиЗаполнения();
		Если Ошибки.Количество() > 0 Тогда
			ТекстыОшибок = Новый Массив;
			Для Каждого Ошибка Из Ошибки Цикл
				ТекстыОшибок.Добавить(Ошибка.Текст);
			КонецЦикла;
			ВызватьИсключение СтрСоединить(ТекстыОшибок, Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроведение Тогда
		ТекстXML = Документы.СведенияОЗастрахованномЛицеФСС.ТекстXML(ЭтотОбъект);
		ЗаполнитьРегистрацию();
	Иначе
		ТекстXML = "";
	КонецЕсли;
	ХранилищеXML = Новый ХранилищеЗначения(ТекстXML, Новый СжатиеДанных(9));
	
	ЗначенияРеквизитовДоЗаписи = ЗначенияРеквизитовДоЗаписи();
	ЗначенияРеквизитовДоЗаписи.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("ЗначенияРеквизитовДоЗаписи", ЗначенияРеквизитовДоЗаписи);
	
	Если ЗначениеЗаполнено(ДатаОтправки)
		И ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо)
		И ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо <> ФизическоеЛицо Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимо изменять физическое лицо в отправленном документе.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитовДоЗаписи = ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	
	Если ЗначениеЗаполнено(РегистрацияСведений) Тогда
		ЗаполнитьДокументОснование   = (ЗначенияРеквизитовДоЗаписи.ЭтоНовый И Проведен);
		ЗаполнитьГоловнуюОрганизацию = ЗначенияРеквизитовДоЗаписи.ГоловнаяОрганизация <> ГоловнаяОрганизация;
		ЗаполнитьФизическоеЛицо      = ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо <> ФизическоеЛицо;
		Если ЗаполнитьДокументОснование Или ЗаполнитьГоловнуюОрганизацию Или ЗаполнитьФизическоеЛицо Тогда
			УстановитьПривилегированныйРежим(Истина);
			РегистрацияОбъект = РегистрацияСведений.ПолучитьОбъект();
			РегистрацияОбъект.ДокументОснование   = Ссылка;
			РегистрацияОбъект.ГоловнаяОрганизация = ГоловнаяОрганизация;
			РегистрацияОбъект.ФизическоеЛицо      = ФизическоеЛицо;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РегистрацияОбъект);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.СведенияОЗастрахованныхЛицахФСС.ПриЗаписиСведений(ЭтотОбъект, ЗначенияРеквизитовДоЗаписи);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбработкаПроверкиЗаполнения

Процедура ПроверитьРеквизитыСотрудника(Отказ)
	Если ЗначениеЗаполнено(ДатаУвольнения) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРезидент = Справочники.СтатусыНалогоплательщиковПоНДФЛ.ЭтоРезидент(СтатусНалогоплательщика);
	
	// ИНН.
	Если ЗначениеЗаполнено(СотрудникИНН) Тогда
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СотрудникИНН, Ложь, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в ИНН %1: %2'");
			Текст = СтрШаблон(Текст, СотрудникИНН, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СотрудникИНН");
		КонецЕсли;
	ИначеЕсли ЭтоРезидент Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СотрудникИНН");
	КонецЕсли;
	
	// Удостоверение личности.
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Сотрудник",           "Сотрудник");
	ИменаРеквизитов.Вставить("ФизическоеЛицо",      "ФизическоеЛицо");
	ИменаРеквизитов.Вставить("ВидДокумента",        "УдостоверениеЛичностиВид");
	ИменаРеквизитов.Вставить("СерияДокумента",      "УдостоверениеЛичностиСерия");
	ИменаРеквизитов.Вставить("НомерДокумента",      "УдостоверениеЛичностиНомер");
	ИменаРеквизитов.Вставить("ДатаВыдачиДокумента", "УдостоверениеЛичностиДатаВыдачи");
	ИменаРеквизитов.Вставить("КемВыданДокумент",    "УдостоверениеЛичностиКемВыдан");
	ПрямыеВыплатыПособийСоциальногоСтрахования.ПроверитьДокументУдостоверяющийЛичность(Отказ, ЭтотОбъект, ИменаРеквизитов);
	
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(УдостоверениеЛичностиВид);
	Если ЗначениеЗаполнено(УдостоверениеЛичностиВид)
		И Не ЗначениеЗаполнено(УдостоверениеЛичностиСрокДействия)
		И Не СведенияОВидеДокумента.ЭтоПаспортРФ Тогда
		Текст = НСтр("ru = 'Не заполнен срок действия документа, удостоверяющего личность'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "УдостоверениеЛичностиСрокДействия");
	ИначеЕсли ЗначениеЗаполнено(УдостоверениеЛичностиСрокДействия)
		И УдостоверениеЛичностиСрокДействия < ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()) Тогда
		Текст = НСтр("ru = 'Истек срок действия документа, удостоверяющего личность (%1)'");
		Текст = СтрШаблон(Текст, Формат(УдостоверениеЛичностиСрокДействия, "ДЛФ=D"));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "УдостоверениеЛичностиСрокДействия");
	КонецЕсли;
	
	// Разрешение на проживание.
	Если Документы.СведенияОЗастрахованномЛицеФСС.ТребуетсяВыгрузитьРазрешениеНаПроживание(ЭтотОбъект) Тогда
		Если Не ЗначениеЗаполнено(РазрешениеНаПроживаниеВид) Тогда
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеВид");
		Иначе
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеНомер");
			Вид = Документы.СведенияОЗастрахованномЛицеФСС.СведенияОВидеРазрешенияНаПроживание(РазрешениеНаПроживаниеВид);
			Если Вид.ЭтоВНЖ Тогда
				ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеСерия");
				ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеДатаВыдачи");
			ИначеЕсли Вид.ЭтоРВП Тогда
				ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "РазрешениеНаПроживаниеСрокДействия");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Адрес регистрации.
	Если ЭтоРезидент Тогда
		ТекстОшибки = ПроверитьАдрес("АдресРегистрации");
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Текст = Метаданные().Реквизиты.АдресРегистрации.Представление() + ": " + ТекстОшибки;
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "АдресРегистрации");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСНИЛС(Отказ)
	Если Не ЗначениеЗаполнено(СНИЛС) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "СНИЛС");
	Иначе
		ТекстОшибки = "";
		Если Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СНИЛС, ТекстОшибки) Тогда
			Текст = НСтр("ru = 'Ошибка в СНИЛС %1: %2'");
			Текст = СтрШаблон(Текст, СНИЛС, ТекстОшибки);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "СНИЛС");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьСпособВыплатыПособий(Отказ)
	Если ЗначениеЗаполнено(ДатаУвольнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		ТекстОшибки = ПроверитьАдрес("АдресПроживания");
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Текст = Метаданные().Реквизиты.АдресПроживания.Представление() + ": " + ТекстОшибки;
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, Текст, "АдресПроживания");
		КонецЕсли;
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "КартаМИР");
	ИначеЕсли СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		Если ЗначениеЗаполнено(БанкБИК) И ЗначениеЗаполнено(НомерСчета) Тогда
			РезультатПроверки = ПроверкиБЗК.РезультатПроверкиНомераСчета(НомерСчета, БанкБИК, БанкКоррСчет);
			Если Не РезультатПроверки.Успех Тогда
				СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, ЭтотОбъект, РезультатПроверки.Пояснение, "НомерСчета");
			КонецЕсли;
		Иначе
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "Банк");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "БанкБИК");
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "НомерСчета");
		КонецЕсли;
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, ЭтотОбъект, "БанкНаименование");
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьАдрес(ИмяПоляАдрес)
	ЗначениеАдреса = ЭтотОбъект[ИмяПоляАдрес];
	Если Не ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Возврат НСтр("ru = 'Адрес не заполнен'");
	КонецЕсли;
	
	ТекстыОшибок = Новый Массив;
	
	Индекс = ЭтотОбъект[ИмяПоляАдрес + "Индекс"];
	Если Не ЗначениеЗаполнено(Индекс) Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'Не заполнен индекс.'"));
	ИначеЕсли СтрДлина(Индекс) <> 6 Тогда
		ТекстыОшибок.Добавить(СтрШаблон(НСтр("ru = 'Индекс занимает %1 символов, ожидалось 6.'"), СтрДлина(Индекс)));
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(Индекс);
		Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Текст = НСтр("ru = 'В индексе должны быть только цифры (%1 - не цифра).'");
			Иначе
				Текст = НСтр("ru = 'В индексе должны быть только цифры (%1 - не цифры).'");
			КонецЕсли;
			ТекстыОшибок.Добавить(СтрШаблон(Текст, ЛишниеСимволы));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстыОшибок, Символы.ПС);
КонецФункции

Функция КритичныеОшибкиЗаполнения() Экспорт
	Ошибки = Новый Массив;
	
	// Если документ подготовлен к отправке, но не отправлен, то проверяется уникальность на дату.
	Если Не ПометкаУдаления И ЗначениеЗаполнено(ГоловнаяОрганизация) И ЗначениеЗаполнено(ФизическоеЛицо) И Не ЗначениеЗаполнено(ДатаОтправки) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Настройки = ЗапросыБЗК.НастройкиЗапросаКТаблице();
		Настройки.УчитыватьRLS = Ложь;
		Настройки.Количество   = 1;
		Настройки.Порядок      = "Дата Убыв";
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ГоловнаяОрганизация", "=",  ГоловнаяОрганизация);
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ФизическоеЛицо",      "=",  ФизическоеЛицо);
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "Дата",                ">=", НачалоДня(Дата));
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "Дата",                "<=", КонецДня(Дата));
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "Ссылка",              "<>", Ссылка);
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ПометкаУдаления",     "=",  Ложь);
		ЗапросыБЗК.ДобавитьОтбор(Настройки.Отбор, "ДатаОтправки",        "=",  '00010101');
		Запрос = ЗапросыБЗК.ЗапросКТаблице(Метаданные.Документы.СведенияОЗастрахованномЛицеФСС, "Ссылка, Дата", Настройки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'На %1 уже есть сведения о застрахованном лице от %2'");
			Сообщение.Текст = СтрШаблон(Сообщение.Текст, Формат(Дата, "ДЛФ=D"), Формат(Выборка.Дата, "ДЛФ=D"));
			Сообщение.Поле  = "Дата";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Ошибки.Добавить(Сообщение);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КритичныеПроверкиЗаполненияВыполнены", Истина);
	
	Возврат Ошибки;
КонецФункции

#КонецОбласти

#Область ПередЗаписью

Функция ЗначенияРеквизитовДоЗаписи()
	ИменаРеквизитов = "Дата, ГоловнаяОрганизация, ФизическоеЛицо, ДатаОтправки, ПометкаУдаления, Проведен";
	Если ЭтоНовый() Тогда
		Возврат ОбщегоНазначенияБЗК.ЗначенияСвойств(ЭтотОбъект, ИменаРеквизитов);
	Иначе
		Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьРегистрацию() Экспорт
	Если ЗначениеЗаполнено(РегистрацияСведений) Тогда
		Возврат;
	КонецЕсли;
	// Регистрация является продолжением текущего документа.
	// Но если документ - новый, то поле "Ссылка" может быть не заполнено.
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрацияОбъект = Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.СоздатьДокумент();
	ИменаПолей = "ФизическоеЛицо, ГоловнаяОрганизация";
	ЗаполнитьЗначенияСвойств(РегистрацияОбъект, ЭтотОбъект, ИменаПолей);
	РегистрацияОбъект.ДокументОснование = Ссылка;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РегистрацияОбъект);
	
	РегистрацияСведений = РегистрацияОбъект.Ссылка;
КонецПроцедуры

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ОбновитьВторичныеДанные(ПараметрыФиксации = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ПараметрыФиксации = Неопределено Тогда
		ПараметрыФиксации = Документы.СведенияОЗастрахованномЛицеФСС.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	Если ЗаполнитьДанныеОрганизации(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьОтветственныхЛицОрганизации(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКадровыеДанныеУполномоченногоПредставителя(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКадровыеДанныеСотрудника(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодСтраныГражданства(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьРазрешениеНаПроживание(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьСпособВыплатыПособия(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКонтактыФизическогоЛица(ПараметрыФиксации) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодыАдреса(ПараметрыФиксации, "АдресРегистрации") Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ЗаполнитьКодыАдреса(ПараметрыФиксации, "АдресПроживания") Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован;
КонецФункции

Функция ОбъектЗафиксирован() Экспорт
	Возврат Документы.СведенияОЗастрахованномЛицеФСС.ОбъектЗафиксирован(ЭтотОбъект);
КонецФункции

Функция ЗаполнитьДанныеОрганизации(ПараметрыФиксации)
	// Головная организация заполняется безусловно, т.к. определяет права.
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	Реквизиты = Новый Структура("СтраховательНаименование, СтраховательЭлектроннаяПочта, СтраховательТелефон");
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ИменаПолей = "НаимЮЛПол, НаимЮЛСокр, АдресЭлектроннойПочтыОрганизации, ТелОрганизации_JSON";
		Сведения = СЭДОФСС.СведенияОСтрахователе(Организация, ИменаПолей, Дата);
		
		Если ЗначениеЗаполнено(Сведения.НаимЮЛСокр) И СтрДлина(Сведения.НаимЮЛПол) > 150 Тогда
			Реквизиты.СтраховательНаименование = Сведения.НаимЮЛСокр;
		Иначе
			Реквизиты.СтраховательНаименование = Сведения.НаимЮЛПол;
		КонецЕсли;
		Реквизиты.СтраховательЭлектроннаяПочта = Сведения.АдресЭлектроннойПочтыОрганизации;
		Реквизиты.СтраховательТелефон          = Сведения.ТелОрганизации_JSON;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьОтветственныхЛицОрганизации(ПараметрыФиксации)
	ИменаЗаполняемыхПолей =
	"УполномоченныйПредставитель,
	|УполномоченныйПредставительДолжность,
	|УполномоченныйПредставительОснованиеПодписи";
	
	Реквизиты = Новый Структура(ИменаЗаполняемыхПолей);
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ИменаРолей = "УполномоченныйПоПрямымВыплатамФСС";
		ОтветственныеЛица = ПодписиДокументов.ОтветственныеЛицаОрганизации(Организация, ИменаРолей, Дата);
		Реквизиты.УполномоченныйПредставитель                 = ОтветственныеЛица.УполномоченныйПоПрямымВыплатамФСС;
		Реквизиты.УполномоченныйПредставительДолжность        = ОтветственныеЛица.УполномоченныйПоПрямымВыплатамФССДолжность;
		Реквизиты.УполномоченныйПредставительОснованиеПодписи = ОтветственныеЛица.УполномоченныйПоПрямымВыплатамФССОснованиеПодписи;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКадровыеДанныеУполномоченногоПредставителя(ПараметрыФиксации)
	ИменаЗаполняемыхПолей = "УполномоченныйПредставительФИО";
	
	Реквизиты = Новый Структура(ИменаЗаполняемыхПолей);
	Если ФиксацияВторичныхДанныхВДокументах.РеквизитыШапкиЗафиксированы(ЭтотОбъект, Реквизиты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УполномоченныйПредставитель) Тогда
		Реквизиты.УполномоченныйПредставительФИО = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			УполномоченныйПредставитель,
			"ФИО"));
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКадровыеДанныеСотрудника(ПараметрыФиксации)
	Реквизиты = Новый Структура(
	"СотрудникФамилия,
	|СотрудникИмя,
	|СотрудникОтчество,
	|ДатаРождения,
	|ДатаУвольнения,
	|Гражданство,
	|Пол,
	|СНИЛС,
	|УдостоверениеЛичностиВид,
	|УдостоверениеЛичностиСерия,
	|УдостоверениеЛичностиНомер,
	|УдостоверениеЛичностиДатаВыдачи,
	|УдостоверениеЛичностиКемВыдан,
	|УдостоверениеЛичностиСрокДействия,
	|СтатусНалогоплательщика,
	|СотрудникИНН,
	|ВнешнееСовместительство,
	|ПричинаПредоставленияЛьготы,
	|ОтношениеКОсобойЗоне,
	|ВидОсобойЗоны");
	ФизическоеЛицо = Неопределено; // Заполняется безусловно, т.к. определяет права.
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		КадровыеДанныеСотрудника = ОбщегоНазначенияБЗК.ЗначениеСвойства(ДополнительныеСвойства, "КадровыеДанные");
		Если КадровыеДанныеСотрудника = Неопределено Тогда
			ИменаПолей = Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных();
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, ИменаПолей, Дата);
		КонецЕсли;
		Если КадровыеДанныеСотрудника <> Неопределено Тогда
			ФизическоеЛицо = КадровыеДанныеСотрудника.ФизическоеЛицо; // Заполняется безусловно, т.к. определяет права.
			
			// ФИО, ИНН, СНИЛС, Дата рождения, Гражданство.
			Реквизиты.СотрудникФамилия  = КадровыеДанныеСотрудника.Фамилия;
			Реквизиты.СотрудникИмя      = КадровыеДанныеСотрудника.Имя;
			Реквизиты.СотрудникОтчество = КадровыеДанныеСотрудника.Отчество;
			Реквизиты.Гражданство       = КадровыеДанныеСотрудника.Страна;
			Реквизиты.ДатаРождения      = КадровыеДанныеСотрудника.ДатаРождения;
			Реквизиты.ДатаУвольнения    = КадровыеДанныеСотрудника.ДатаУвольнения;
			Реквизиты.Пол               = КадровыеДанныеСотрудника.Пол;
			Реквизиты.СотрудникИНН      = КадровыеДанныеСотрудника.ИНН;
			Реквизиты.СНИЛС             = КадровыеДанныеСотрудника.СтраховойНомерПФР;
			
			// Удостоверение личности.
			Реквизиты.УдостоверениеЛичностиВид          = КадровыеДанныеСотрудника.ДокументВид;
			Реквизиты.УдостоверениеЛичностиСерия        = СокрЛП(КадровыеДанныеСотрудника.ДокументСерия);
			Реквизиты.УдостоверениеЛичностиНомер        = СокрЛП(КадровыеДанныеСотрудника.ДокументНомер);
			Реквизиты.УдостоверениеЛичностиДатаВыдачи   = КадровыеДанныеСотрудника.ДокументДатаВыдачи;
			Реквизиты.УдостоверениеЛичностиКемВыдан     = КадровыеДанныеСотрудника.ДокументКемВыдан;
			Реквизиты.УдостоверениеЛичностиСрокДействия = КадровыеДанныеСотрудника.ДокументСрокДействия;
			
			// Место работы.
			Реквизиты.СтатусНалогоплательщика = КадровыеДанныеСотрудника.СтатусНалогоплательщика;
			Реквизиты.ВнешнееСовместительство = ЭтоВнешнееСовместительство(КадровыеДанныеСотрудника.ВидЗанятости);
			
			// Льготы.
			Реквизиты.ПричинаПредоставленияЛьготы = КадровыеДанныеСотрудника.ЛьготаПриНачисленииПособий;
			Реквизиты.ОтношениеКОсобойЗоне        = КадровыеДанныеСотрудника.ОтношениеКОсобойЗоне;
			Реквизиты.ВидОсобойЗоны               = КадровыеДанныеСотрудника.ВидОсобойЗоны;
			
		КонецЕсли;
		
		// Льготы из предшествующего документа.
		Если Реквизиты.ПричинаПредоставленияЛьготы = Неопределено
			И Реквизиты.ОтношениеКОсобойЗоне = Неопределено
			И Реквизиты.ВидОсобойЗоны = Неопределено Тогда
			ПредшествующиеСведения = ПредшествующиеСведенияОЗастрахованномЛице();
			Если ПредшествующиеСведения <> Неопределено Тогда
				Реквизиты.ПричинаПредоставленияЛьготы = ПредшествующиеСведения.ПричинаПредоставленияЛьготы;
				Реквизиты.ОтношениеКОсобойЗоне        = ПредшествующиеСведения.ОтношениеКОсобойЗоне;
				Реквизиты.ВидОсобойЗоны               = ПредшествующиеСведения.ВидОсобойЗоны;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКодСтраныГражданства(ПараметрыФиксации)
	Реквизиты = Новый Структура("КодСтраныГражданства");
	
	Если ЗначениеЗаполнено(Гражданство) Тогда
		Реквизиты.КодСтраныГражданства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Гражданство, "Код");
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЭтоВнешнееСовместительство(ВидЗанятости)
	Возврат ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство;
КонецФункции

Функция ПредшествующиеСведенияОЗастрахованномЛице()
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		НачалоДня = КонецДня(Дата) + 1;
	Иначе
		НачалоДня = КонецДня(ТекущаяДатаСеанса()) + 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОЗастрахованномЛицеФСС.ПричинаПредоставленияЛьготы КАК ПричинаПредоставленияЛьготы,
	|	СведенияОЗастрахованномЛицеФСС.ВидОсобойЗоны КАК ВидОсобойЗоны,
	|	СведенияОЗастрахованномЛицеФСС.ОтношениеКОсобойЗоне КАК ОтношениеКОсобойЗоне
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.ФизическоеЛицо = &ФизическоеЛицо
	|	И СведенияОЗастрахованномЛицеФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СведенияОЗастрахованномЛицеФСС.Ссылка <> &Ссылка
	|	И СведенияОЗастрахованномЛицеФСС.Проведен
	|	И СведенияОЗастрахованномЛицеФСС.Дата < &НачалоДня
	|
	|УПОРЯДОЧИТЬ ПО
	|	СведенияОЗастрахованномЛицеФСС.Дата УБЫВ,
	|	СведенияОЗастрахованномЛицеФСС.Ссылка";
	Запрос.УстановитьПараметр("ФизическоеЛицо",      ФизическоеЛицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Ссылка",              Ссылка);
	Запрос.УстановитьПараметр("НачалоДня",           НачалоДня);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ЗаполнитьРазрешениеНаПроживание(ПараметрыФиксации)
	Реквизиты = Новый Структура("РазрешениеНаПроживаниеВид, РазрешениеНаПроживаниеСерия, РазрешениеНаПроживаниеНомер,
		|РазрешениеНаПроживаниеДатаВыдачи, РазрешениеНаПроживаниеСрокДействия");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) И Не СЭДОФСС.ГражданствоРФ(КодСтраныГражданства) Тогда
		РазрешениеНаПроживание = Документы.СведенияОЗастрахованномЛицеФСС.НайтиРазрешениеНаПроживание(ФизическоеЛицо, Дата);
		Реквизиты.РазрешениеНаПроживаниеВид          = РазрешениеНаПроживание.Вид;
		Реквизиты.РазрешениеНаПроживаниеСерия        = СокрЛП(РазрешениеНаПроживание.Серия);
		Реквизиты.РазрешениеНаПроживаниеНомер        = СокрЛП(РазрешениеНаПроживание.Номер);
		Реквизиты.РазрешениеНаПроживаниеДатаВыдачи   = РазрешениеНаПроживание.ДатаВыдачи;
		Реквизиты.РазрешениеНаПроживаниеСрокДействия = РазрешениеНаПроживание.СрокДействия;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьСпособВыплатыПособия(ПараметрыФиксации)
	// Получение сведений о способах выплаты.
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		НастройкиПрямыхВыплат = СпособыПрямыхВыплатФСС.НастройкиСотрудников(Организация, ФизическоеЛицо, Дата);
		СпособПрямыхвыплат    = НастройкиПрямыхВыплат.ТаблицаРезультат[0];
	Иначе
		НастройкиПрямыхВыплат = Неопределено;
		СпособПрямыхвыплат    = Неопределено;
	КонецЕсли;
	// Заполнение первичных сведений о способе выплаты.
	ЕстьИзменения = Ложь;
	РеквизитыСпособа = РеквизитыСпособаПрямыхвыплат(СпособПрямыхвыплат);
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыСпособа, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	// Заполнение банковских реквизитов.
	РеквизитыБанка = РеквизитыБанка(НастройкиПрямыхВыплат, СпособПрямыхвыплат);
	Если ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(РеквизитыБанка, ЭтотОбъект, ПараметрыФиксации) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	Возврат ЕстьИзменения;
КонецФункции

Функция РеквизитыСпособаПрямыхвыплат(СпособПрямыхвыплат)
	РеквизитыСпособа = Новый Структура("СпособВыплатыПособия, КартаМИР, Банк, НомерСчета, АдресПроживанияВид");
	Если СпособПрямыхвыплат = Неопределено Тогда
		Возврат РеквизитыСпособа;
	КонецЕсли;
	
	ТипыСпособовПрямыхВыплат = СпособыПрямыхВыплатФСС.ТипыСпособовПрямыхВыплат();
	ТипСпособа = ТипыСпособовПрямыхВыплат.Найти(ТипЗнч(СпособПрямыхвыплат.Значение), "Тип");
	Если ТипСпособа = Неопределено Тогда
		Возврат РеквизитыСпособа;
	КонецЕсли;
	
	РеквизитыСпособа.СпособВыплатыПособия = ТипСпособа.СпособВыплатыПособия;
	Если РеквизитыСпособа.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		РеквизитыСпособа.КартаМИР           = СпособПрямыхвыплат.Значение;
	ИначеЕсли РеквизитыСпособа.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		РеквизитыСпособа.Банк               = СпособПрямыхвыплат.Банк;
		РеквизитыСпособа.НомерСчета         = СпособПрямыхвыплат.НомерСчета;
	Иначе
		РеквизитыСпособа.АдресПроживанияВид = СпособПрямыхвыплат.Значение;
	КонецЕсли;
	
	Возврат РеквизитыСпособа;
КонецФункции

Функция РеквизитыБанка(НастройкиПрямыхВыплат, СпособПрямыхвыплат)
	РеквизитыБанка = Новый Структура("БанкНаименование, БанкБИК, БанкКоррСчет");
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат РеквизитыБанка;
	КонецЕсли;
	
	// Определение способа прямых выплат по выбранному банку.
	Если НастройкиПрямыхВыплат <> Неопределено
		И (СпособПрямыхвыплат = Неопределено Или Банк <> СпособПрямыхвыплат.Банк) Тогда
		Найденные = НастройкиПрямыхВыплат.БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Банк, ПометкаУдаления", Банк, Ложь));
		Если Найденные.Количество() = 0 Тогда
			Найденные = НастройкиПрямыхВыплат.БанковскиеРеквизиты.НайтиСтроки(Новый Структура("Банк", Банк));
		КонецЕсли;
		Если Найденные.Количество() = 0 Тогда
			СпособПрямыхвыплат = Неопределено;
		Иначе
			СпособПрямыхвыплат = Найденные[0];
		КонецЕсли;
	КонецЕсли;
	
	// Определение реквизитов банка.
	Если СпособПрямыхвыплат = Неопределено Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Наименование, Код, КоррСчет");
		РеквизитыБанка.БанкНаименование = Реквизиты.Наименование;
		РеквизитыБанка.БанкБИК          = Реквизиты.Код;
		РеквизитыБанка.БанкКоррСчет     = Реквизиты.КоррСчет;
	Иначе
		РеквизитыБанка.БанкНаименование = СпособПрямыхвыплат.НаименованиеБанка;
		РеквизитыБанка.БанкБИК          = СпособПрямыхвыплат.БИК;
		РеквизитыБанка.БанкКоррСчет     = СпособПрямыхвыплат.КоррСчет;
	КонецЕсли;
	
	Возврат РеквизитыБанка;
КонецФункции

Функция ЗаполнитьКонтактыФизическогоЛица(ПараметрыФиксации)
	Реквизиты = Новый Структура("АдресРегистрации, АдресПроживания, СотрудникТелефон");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		АдресРегистрацииВид = КадровыйУчет.ВидКонтактнойИнформацииАдресПоПропискеФизическиеЛица();
		ТелефонДомашнийВид  = КадровыйУчет.ВидКонтактнойИнформацииТелефонДомашнийФизическиеЛица();
		ТелефонМобильныйВид = КадровыйУчет.ВидКонтактнойИнформацииТелефонМобильныйФизическиеЛица();
		
		ВидыКИ = Новый Массив;
		ВидыКИ.Добавить(АдресРегистрацииВид);
		Если ЗначениеЗаполнено(АдресПроживанияВид) Тогда
			ВидыКИ.Добавить(АдресПроживанияВид);
		КонецЕсли;
		ВидыКИ.Добавить(ТелефонДомашнийВид);
		ВидыКИ.Добавить(ТелефонМобильныйВид);
		
		ТаблицаКИ = КонтактнаяИнформацияБЗК.КонтактнаяИнформацияОбъектов(ФизическоеЛицо, , ВидыКИ);
		
		СтрокаКИ = ТаблицаКИ.Найти(АдресРегистрацииВид, "Вид");
		Если СтрокаКИ <> Неопределено Тогда
			Реквизиты.АдресРегистрации = СтрокаКИ.Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресПроживанияВид) Тогда
			СтрокаКИ = ТаблицаКИ.Найти(АдресПроживанияВид, "Вид");
			Если СтрокаКИ <> Неопределено Тогда
				Реквизиты.АдресПроживания = СтрокаКИ.Значение;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаКИ = ТаблицаКИ.Найти(ТелефонДомашнийВид, "Вид");
		Если СтрокаКИ <> Неопределено Тогда
			Реквизиты.СотрудникТелефон = СтрокаКИ.Значение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Реквизиты.СотрудникТелефон) Тогда
			СтрокаКИ = ТаблицаКИ.Найти(ТелефонМобильныйВид, "Вид");
			Если СтрокаКИ <> Неопределено Тогда
				Реквизиты.СотрудникТелефон = СтрокаКИ.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

Функция ЗаполнитьКодыАдреса(ПараметрыФиксации, ИмяПоляАдрес)
	Суффиксы = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ФИАСДом, ФИАСРО";
	Массив = СтрРазделить(Суффиксы, ", ", Ложь);
	ИменаРеквизитов = ИмяПоляАдрес + СтрСоединить(Массив, ", " + ИмяПоляАдрес);
	Реквизиты = Новый Структура(ИменаРеквизитов);
	
	Адрес = ЭтотОбъект[ИмяПоляАдрес];
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("БезПредставлений",               Истина);
	ДополнительныеПараметры.Вставить("КодыАдреса",                     Истина);
	ДополнительныеПараметры.Вставить("КодыКЛАДР",                      Ложь);
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	ДополнительныеПараметры.Вставить("ПроверитьАдрес",                 Ложь);
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
	
	ИменаПолей = "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Строение, Сооружение, Участок, Квартира";
	СтруктураАдреса = КонтактнаяИнформацияБЗК.СвернутьСведенияОбАдресе(СведенияОбАдресе, ИменаПолей);
	СтруктураАдреса.Корпус = КонтактнаяИнформацияБЗК.ПредставлениеКорпусов(СтруктураАдреса, 30);
	СтруктураАдреса.Удалить("Строение");
	СтруктураАдреса.Удалить("Сооружение");
	СтруктураАдреса.Удалить("Участок");
	
	СтруктураАдреса.Вставить("ФИАСДом", Строка(СведенияОбАдресе.ИдентификаторДома));
	СтруктураАдреса.Вставить("ФИАСРО",  Строка(СведенияОбАдресе.ИдентификаторАдресногоОбъекта));
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ФИАСДом)
		И СтруктураАдреса.ФИАСРО <> СведенияОбАдресе.ИдентификаторЗемельногоУчастка Тогда
		СтруктураАдреса.ФИАСДом = Строка(СведенияОбАдресе.ИдентификаторЗемельногоУчастка);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураАдреса Цикл
		Реквизиты[ИмяПоляАдрес + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ЭтотОбъект, ПараметрыФиксации);
КонецФункции

#КонецОбласти


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли