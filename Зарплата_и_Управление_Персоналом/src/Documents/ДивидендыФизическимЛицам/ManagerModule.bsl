#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(Начисления.Акционер, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ДивидендыФизическимЛицам;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

Функция СпособВыплатыПрочихДоходов() Экспорт
	Возврат Перечисления.СпособыВыплатыПрочихДоходов.Дивиденды;
КонецФункции

#Область ОбработчикиРегистрацииФизическихЛиц

Функция ПринадлежностиОбъекта() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация");
КонецФункции

#КонецОбласти

#Область ОбработчикиПравилРегистрации

Процедура ЗарегистрироватьИзмененияПослеОбработки(ИмяПланаОбмена, ПРО, Объект, Отказ, Получатели, Выгрузка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульСинхронизацияДанных = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		МодульСинхронизацияДанных.ЗарегистрироватьСовместноРегистрируемыеОбъекты(
			Объект.Начисления.ВыгрузитьКолонку("Акционер"), Получатели);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПравилаРегистрацииРегистров(ИмяПланаОбмена, Отказ, Получатели, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

// Регистрирует изменение организации или структурного подразделения для сотрудников и физических лиц
//
// Параметры:
//		МассивДокументов - Массив - Массив объектов заполненный при загрузке сообщения обмена
//
Процедура ЗарегистрироватьЗависимыеОбъектыПослеЗагрузкиОбменаДанными(МассивДокументов) Экспорт
	
	// Зарегистрируем сотрудников по виду документа, изменяющего принадлежность к организации
	Для Каждого ДокументОбъект Из МассивДокументов Цикл
		Для Каждого СтрокаДокумента Из ДокументОбъект.Начисления Цикл
			Если ЗначениеЗаполнено(СтрокаДокумента.Акционер) И ОбщегоНазначения.СсылкаСуществует(СтрокаДокумента.Акционер) Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(ДокументОбъект.ОбменДанными.Получатели, СтрокаДокумента.Акционер);
			КонецЕсли;
		КонецЦикла;
		
		СинхронизацияДанныхЗарплатаКадрыСервер.ПринадлежностьФизлицаОрганизацииПриЗаписи(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция СвойстваИсправляемогоДокумента(ДокументСсылка) Экспорт
	
	Реквизиты = ИсправлениеДокументовЗарплатаКадры.РеквизитыИсправляемогоРасчетногоДокумента();
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, Реквизиты);
	
КонецФункции

Функция ПараметрыИсправляемогоДокумента(ДокументСсылка) Экспорт
	
	Возврат ИсправлениеДокументовЗарплатаКадры.ПараметрыИсправляемогоДокумента(ДокументСсылка,
		СвойстваИсправляемогоДокумента(ДокументСсылка));
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции
	
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Справка о списании депонированной зарплаты.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Документ.ДивидендыФизическимЛицам";
	КомандаПечати.Идентификатор = "ПФ_MXL_СправкаОДивидендах";
	КомандаПечати.Представление = НСтр("ru = 'Справка о дивидендах'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//	МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//	ПараметрыПечати - Структура - дополнительные настройки печати;
//	КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//	ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//	ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	НужноПечататьСправку = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаОДивидендах");
	
	Если НужноПечататьСправку Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаОДивидендах",
			НСтр("ru = 'Справка о дивидендах'"), ПечатьСправки(МассивОбъектов, ОбъектыПечати), ,
			"Документ.ДивидендыФизическимЛицам.ПФ_MXL_СправкаОРегистрацииПрочихДоходов");
	КонецЕсли;
						
КонецПроцедуры								

Функция ПечатьСправки(МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РегистрацияПрочихДоходов_СправкаОДивидендах";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДанныеПечатиОбъектов = ДанныеПечатиДокументов(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл
		
		ДанныеДокумента = ДанныеПечати.Значение;
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если ДанныеДокумента.Форма2021года Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДивидендыФизическимЛицам.ПФ_MXL_СправкаОДивидендах2021");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДивидендыФизическимЛицам.ПФ_MXL_СправкаОДивидендах");
		КонецЕсли;
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаШапкаПовторятьПриПечати = Макет.ПолучитьОбласть("ШапкаПовторятьПриПечати");
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеДокумента);
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
		
		Для каждого ДанныеСотрудника Из ДанныеДокумента.ТабличнаяЧастьДокумента Цикл
			
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьМакетаСтрока);
			МассивВыводимыхОбластей.Добавить(ОбластьМакетаПодвал);
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьМакетаШапкаПовторятьПриПечати);
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ДанныеСотрудника);
			
			ДокументРезультат.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ПодписиДокументовКлиентСервер.ДополнитьТекстОснованиемПодписи(
			ДанныеДокумента.ИсполнительРасшифровкаПодписи, ДанныеДокумента.ОснованиеПодписиИсполнителя);
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДокумента);
		ДокументРезультат.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеПечатиДокументов(МассивОбъектов)
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДивидендыФизическимЛицам.Ссылка.Организация.НаименованиеПолное КАК Организация,
		|	ДивидендыФизическимЛицам.Ссылка КАК Ссылка,
		|	ДивидендыФизическимЛицам.Ссылка.Номер КАК Номер,
		|	НАЧАЛОПЕРИОДА(ДивидендыФизическимЛицам.Ссылка.Дата, ДЕНЬ) КАК Период,
		|	ДивидендыФизическимЛицам.Ссылка.ДатаВыплаты КАК ДатаВыплаты,
		|	ДивидендыФизическимЛицам.Акционер КАК ФизическоеЛицо,
		|	ДивидендыФизическимЛицам.НДФЛ + ДивидендыФизическимЛицам.НДФЛСПревышения КАК НДФЛ,
		|	ДивидендыФизическимЛицам.Начислено КАК Начислено,
		|	ДивидендыФизическимЛицам.ВычетПоНДФЛ КАК СуммаВычета,
		|	ДивидендыФизическимЛицам.Удержано КАК Удержано,
		|	ДивидендыФизическимЛицам.КВыплате КАК СуммаКВыплате,
		|	ДивидендыФизическимЛицам.Ссылка.Исполнитель.ФИО КАК Исполнитель,
		|	ДивидендыФизическимЛицам.Ссылка.ДолжностьИсполнителя КАК ДолжностьИсполнителя,
		|	ДивидендыФизическимЛицам.Ссылка.ОснованиеПодписиИсполнителя КАК ОснованиеПодписиИсполнителя,
		|	ДивидендыФизическимЛицам.НалогНаПрибыльКЗачету КАК НалогНаПрибыльКЗачету
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ДивидендыФизическимЛицам.Начисления КАК ДивидендыФизическимЛицам
		|ГДЕ
		|	ДивидендыФизическимЛицам.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументов");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВТ, Истина, "ФИОПолные");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Номер КАК Номер,
		|	ДанныеДокументов.Период КАК Дата,
		|	ДанныеДокументов.ДатаВыплаты КАК ДатаВыплаты,
		|	ЕСТЬNULL(КадровыеДанныеФизическихЛиц.ФИОПолные, ДанныеДокументов.ФизическоеЛицо) КАК Акционер,
		|	ДанныеДокументов.НДФЛ КАК НДФЛ,
		|	ДанныеДокументов.Начислено КАК Начислено,
		|	ДанныеДокументов.СуммаВычета КАК СуммаВычета,
		|	ДанныеДокументов.НалогНаПрибыльКЗачету КАК НалогНаПрибыльКЗачету,
		|	ДанныеДокументов.Удержано КАК Удержано,
		|	ДанныеДокументов.СуммаКВыплате КАК СуммаКВыплате,
		|	ЕСТЬNULL(ДанныеДокументов.Исполнитель, """") КАК Исполнитель,
		|	ДанныеДокументов.ДолжностьИсполнителя КАК ДолжностьИсполнителя,
		|	ДанныеДокументов.ОснованиеПодписиИсполнителя КАК ОснованиеПодписиИсполнителя
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
		|		ПО ДанныеДокументов.Период = КадровыеДанныеФизическихЛиц.Период
		|			И ДанныеДокументов.ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
		|ИТОГИ
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(Номер),
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(ДатаВыплаты),
		|	СУММА(НДФЛ),
		|	СУММА(Начислено),
		|	СУММА(СуммаВычета),
		|	СУММА(НалогНаПрибыльКЗачету),
		|	СУММА(Удержано),
		|	СУММА(СуммаКВыплате),
		|	МАКСИМУМ(Исполнитель),
		|	МАКСИМУМ(ДолжностьИсполнителя),
		|	МАКСИМУМ(ОснованиеПодписиИсполнителя)
		|ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	ГруппировкаПоДокументу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ГруппировкаПоДокументу.Следующий() Цикл
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("Ссылка", ГруппировкаПоДокументу.Ссылка);
		ДанныеПечати.Вставить("Форма2021года", ГруппировкаПоДокументу.ДатаВыплаты >= УчетНДФЛ.ПараметрыРасчетаНДФЛПоПрогрессивнойШкале().НачалоРасчетаНДФЛПоПрогрессивнойШкале);
		ДанныеПечати.Вставить("НазваниеОрганизации", ГруппировкаПоДокументу.Организация);
		ДанныеПечати.Вставить("ЕдиницаИзмерения", ВалютаУчета.НаименованиеПолное);
		ДанныеПечати.Вставить("ДатаДокумента", Формат(ГруппировкаПоДокументу.Дата, "ДЛФ=D"));
		ДанныеПечати.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ГруппировкаПоДокументу.Номер, Истина, Истина));
		ДанныеПечати.Вставить("Начислено", ГруппировкаПоДокументу.Начислено);
		ДанныеПечати.Вставить("СуммаВычета", ГруппировкаПоДокументу.СуммаВычета);
		ДанныеПечати.Вставить("НалогНаПрибыльКЗачету", ГруппировкаПоДокументу.НалогНаПрибыльКЗачету);
		ДанныеПечати.Вставить("НДФЛ", ГруппировкаПоДокументу.НДФЛ);
		ДанныеПечати.Вставить("Удержано", ГруппировкаПоДокументу.Удержано);
		ДанныеПечати.Вставить("СуммаКВыплате", ГруппировкаПоДокументу.СуммаКВыплате);
		ДанныеПечати.Вставить("ДолжностьИсполнителя", ГруппировкаПоДокументу.ДолжностьИсполнителя);
		ДанныеПечати.Вставить("ИсполнительРасшифровкаПодписи", ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ГруппировкаПоДокументу.Исполнитель));
		ДанныеПечати.Вставить("ОснованиеПодписиИсполнителя", ГруппировкаПоДокументу.ОснованиеПодписиИсполнителя);
		ДанныеПечати.Вставить("ТабличнаяЧастьДокумента", Новый Массив);
		
		ГруппировкаПоСотрудникам = ГруппировкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ГруппировкаПоСотрудникам.Следующий() Цикл
			
			СтрокаДанныхПечати = Новый Структура;
			СтрокаДанныхПечати.Вставить("Акционер", ГруппировкаПоСотрудникам.Акционер);
			СтрокаДанныхПечати.Вставить("Начислено", ГруппировкаПоСотрудникам.Начислено);
			СтрокаДанныхПечати.Вставить("СуммаВычета", ГруппировкаПоСотрудникам.СуммаВычета);
			СтрокаДанныхПечати.Вставить("НалогНаПрибыльКЗачету", ГруппировкаПоСотрудникам.НалогНаПрибыльКЗачету);
			СтрокаДанныхПечати.Вставить("НДФЛ", ГруппировкаПоСотрудникам.НДФЛ);
			СтрокаДанныхПечати.Вставить("Удержано", ГруппировкаПоСотрудникам.Удержано);
			СтрокаДанныхПечати.Вставить("СуммаКВыплате", ГруппировкаПоСотрудникам.СуммаКВыплате);
			
			ДанныеПечати.ТабличнаяЧастьДокумента.Добавить(СтрокаДанныхПечати);
			
		КонецЦикла;
		
		ДанныеПечатиОбъектов.Вставить(ГруппировкаПоДокументу.Ссылка, ДанныеПечати);
		
	КонецЦикла;
	
	Возврат ДанныеПечатиОбъектов;
	
КонецФункции

#КонецОбласти

Функция ДанныеДляПроведенияДивиденды(МенеджерВременныхТаблиц) Экспорт
	
	ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	ДивидендыСотрудникам = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	ДивидендыАкционерам  = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды];
	
	ВидыДоходаИсполнительногоПроизводства = УчетНачисленнойЗарплаты.ВидыДоходовИсполнительногоПроизводстваНачислений();
	ВидДоходаДивидендыСотрудникам = ВидыДоходаИсполнительногоПроизводства[Перечисления.ВидыОсобыхНачисленийИУдержаний.ДивидендыСотрудников];
	ВидДоходаДивидендыАкционерам = ВидыДоходаИсполнительногоПроизводства[Перечисления.ВидыОсобыхНачисленийИУдержаний.Дивиденды];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДивидендыСотрудникам", ДивидендыСотрудникам);
	Запрос.УстановитьПараметр("Дивиденды", ДивидендыАкционерам);
	Запрос.УстановитьПараметр("ВидДоходаДивидендыСотрудникам", ВидДоходаДивидендыСотрудникам);
	Запрос.УстановитьПараметр("ВидДоходаДивидендыАкционерам", ВидДоходаДивидендыАкционерам);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Дивиденды.Ссылка КАК Ссылка,
	|	Дивиденды.НомерСтроки КАК НомерСтроки,
	|	Дивиденды.ФизическоеЛицо КАК Акционер,
	|	Дивиденды.КатегорияДохода КАК КатегорияДохода,
	|	Дивиденды.Начислено КАК Начислено,
	|	Дивиденды.ВычетПоНДФЛ КАК ВычетПоНДФЛ,
	|	Дивиденды.НДФЛ КАК НДФЛ,
	|	Дивиденды.НДФЛСПревышения КАК НДФЛСПревышения,
	|	Дивиденды.НалогНаПрибыльКЗачету КАК НалогНаПрибыльКЗачету,
	|	Дивиденды.КВыплате КАК КВыплате,
	|	Дивиденды.Удержано КАК Удержано,
	|	ЕСТЬNULL(ВТОсновныеСотрудникиФизическихЛиц.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.Дивиденды)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДивидендыСотрудников)
	|	КОНЕЦ КАК Начисление,
	|	ВЫБОР
	|		КОГДА ВТОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивиденды)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам)
	|	КОНЕЦ КАК ВидУдержания,
	|	ВЫБОР
	|		КОГДА ВТОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL
	|			ТОГДА &Дивиденды
	|		ИНАЧЕ &ДивидендыСотрудникам
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА ВТОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL
	|			ТОГДА &ВидДоходаДивидендыАкционерам
	|		ИНАЧЕ &ВидДоходаДивидендыСотрудникам
	|	КОНЕЦ КАК ВидДоходаИсполнительногоПроизводства
	|ИЗ
	|	ВТДанныеДокумента КАК Дивиденды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ВТОсновныеСотрудникиФизическихЛиц
	|		ПО Дивиденды.ФизическоеЛицо = ВТОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура ПеренестиВычетВНалогНаПрибыль(ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ДивидендыФизическимЛицамНачисления.Ссылка КАК Ссылка,
	|	ДивидендыФизическимЛицамНачисления.Ссылка.ДатаВыплаты КАК ДатаВыплаты
	|ИЗ
	|	Документ.ДивидендыФизическимЛицам.Начисления КАК ДивидендыФизическимЛицамНачисления
	|ГДЕ
	|	ДивидендыФизическимЛицамНачисления.Ссылка.ДатаВыплаты >= ДАТАВРЕМЯ(2021, 1, 1, 0, 0, 0)
	|	И ДивидендыФизическимЛицамНачисления.ВычетПоНДФЛ <> 0
	|	И ДивидендыФизическимЛицамНачисления.НалогНаПрибыльКЗачету = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыплаты";
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса; 
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ДивидендыФизическимЛицам", "Ссылка", ВыборкаДокументов.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		// Обновление документа.
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаДокумента Из ДокументОбъект.Начисления Цикл
			Если СтрокаДокумента.ВычетПоНДФЛ = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДокумента.НалогНаПрибыльКЗачету = Окр(СтрокаДокумента.ВычетПоНДФЛ * 0.13);
			Если СтрокаДокумента.ВычетПоНДФЛ >= СтрокаДокумента.Начислено Тогда
				СтрокаДокумента.НДФЛ = СтрокаДокумента.НДФЛ + СтрокаДокумента.НалогНаПрибыльКЗачету;
			ИначеЕсли СтрокаДокумента.НДФЛСПревышения > 0 И СтрокаДокумента.НДФЛ = 0 Тогда
				СтрокаДокумента.НДФЛСПревышения = СтрокаДокумента.НДФЛСПревышения + СтрокаДокумента.НалогНаПрибыльКЗачету;
			Иначе
				СтрокаДокумента.НДФЛ = СтрокаДокумента.НДФЛ + СтрокаДокумента.НалогНаПрибыльКЗачету;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		// Обновление строк исчисленного налога в движениях.
		Если ДокументОбъект.Проведен Тогда
			ТаблицаДивидендов = ДокументОбъект.Начисления.Выгрузить();
			ТаблицаДивидендов.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
			Для каждого СтрокаДокумента Из ТаблицаДивидендов Цикл
				Если СтрокаДокумента.СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка05 Тогда
					СтрокаДокумента.КатегорияДохода	= Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05
				ИначеЕсли СтрокаДокумента.СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка10 Тогда
					СтрокаДокумента.КатегорияДохода	= Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10
				ИначеЕсли СтрокаДокумента.СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка12 Тогда
					СтрокаДокумента.КатегорияДохода	= Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12
				Иначе
					СтрокаДокумента.КатегорияДохода	= Перечисления.КатегорииДоходовНДФЛ.Дивиденды
				КонецЕсли;
			КонецЦикла;
			Отказ = Ложь;
			Движения = Новый Структура("СведенияОДоходахНДФЛ, РасчетыНалогоплательщиковСБюджетомПоНДФЛ", 
				РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей(),
				РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СоздатьНаборЗаписей());
			УчетНДФЛ.СформироватьДоходыИНДФЛСДивидендов(ДокументОбъект.Ссылка, Движения, Отказ, ДокументОбъект.Организация, ДокументОбъект.ДатаВыплаты, ТаблицаДивидендов, ДокументОбъект.ВключатьВДекларациюПоНалогуНаПрибыль);
			
			НовыйНабор = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ;
			СтарыйНабор = ДокументОбъект.Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ;
			СтарыйНабор.Прочитать();
			Для каждого СтрокаНабора Из СтарыйНабор Цикл
				Если СтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовыйНабор.Добавить(), СтрокаНабора);
			КонецЦикла; 
			НовыйНабор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ);
		КонецЕсли;
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
