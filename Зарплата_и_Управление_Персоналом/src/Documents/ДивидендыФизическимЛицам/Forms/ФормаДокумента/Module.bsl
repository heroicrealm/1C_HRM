#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// создается новый документ
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, МесяцРасчета", 
							"Объект.Организация", "Объект.Ответственный", "Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
		Если Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
			Объект.ПериодРегистрации = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Объект.ДатаВыплаты = НачалоДня(ТекущаяДатаСеанса()) + 86400;
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	ДатаПлатежаНДФЛПрежняя = Объект.ДатаПлатежаНДФЛ;
	ПеречислениеНДФЛРеквизитыПрежняя = Объект.ПеречислениеНДФЛРеквизиты;
	ПеречислениеНДФЛВыполненоПрежняя = Объект.ПеречислениеНДФЛВыполнено;
	
	ОбновитьФормуПоНастройкамПеречисленияНДФЛ(ЭтаФорма, Объект.ПеречислениеНДФЛВыполнено, Объект.РегистрироватьВыплатуВедомостью);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Обработчик подсистемы "ВерсионированиеОбъектов".
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ДивидендыФизическимЛицам", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаУдержаний" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеУдержанийНаСервере(Параметр);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры
	
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьОтветственныхЛиц();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыплатыПриИзменении(Элемент)
	
	Если Объект.ПеречислениеНДФЛВыполнено И (Не ЗначениеЗаполнено(Объект.ДатаПлатежаНДФЛ) Или Объект.ДатаПлатежаНДФЛ < Объект.ДатаВыплаты) Тогда
		Объект.ДатаПлатежаНДФЛ = Объект.ДатаВыплаты;
	КонецЕсли;
	
	ДатаВыплатыПриИзмененииНаСервере();
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Модифицированность);
	ПриИзмененииПериодаРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	ПриИзмененииПериодаРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодаРегистрацииПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПеречислениеНДФЛВыполненоПриИзменении(Элемент)
	
	ОбновитьРеквизитыПеречисленияНДФЛ();
	ОбновитьФормуПоНастройкамПеречисленияНДФЛ(ЭтаФорма,Объект.ПеречислениеНДФЛВыполнено,Объект.РегистрироватьВыплатуВедомостью);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьВыплатуВедомостьюПриИзменении(Элемент)
	
	Если Объект.РегистрироватьВыплатуВедомостью Тогда
		ПеречислениеНДФЛВыполненоПрежняя = Объект.ПеречислениеНДФЛВыполнено;
		Объект.ПеречислениеНДФЛВыполнено = Ложь;
	Иначе
		Объект.ПеречислениеНДФЛВыполнено = ПеречислениеНДФЛВыполненоПрежняя;
	КонецЕсли;
	
	ОбновитьРеквизитыПеречисленияНДФЛ();
	ОбновитьФормуПоНастройкамПеречисленияНДФЛ(ЭтаФорма, Объект.ПеречислениеНДФЛВыполнено, Объект.РегистрироватьВыплатуВедомостью);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	Если Элементы.Начисления.ТекущиеДанные <> Неопределено Тогда
		УдаляемоеФизическоеЛицо = Элементы.Начисления.ТекущиеДанные.Акционер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.Начисления.ТекущиеДанные <> Неопределено Тогда
		
		Если НоваяСтрока И Копирование Тогда
			Элементы.Начисления.ТекущиеДанные.Акционер = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Иначе
			УдаляемоеФизическоеЛицо = Элементы.Начисления.ТекущиеДанные.Акционер;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УдаляемоеФизическоеЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	УдалитьДанныеУдаляемогоФизическогоЛица();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияАкционерПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	
	Если ДанныеСтроки.Акционер <> УдаляемоеФизическоеЛицо Тогда
		УдалитьДанныеУдаляемогоФизическогоЛица();
		УдаляемоеФизическоеЛицо = ДанныеСтроки.Акционер;
		ЗаполнитьУдержанияФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки.Акционер));
	КонецЕсли;

	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачисленоПриИзменении(Элемент)
	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСтавкаНДФЛПриИзменении(Элемент)
	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВычетПоНДФЛПриИзменении(Элемент)
	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНалогНаПрибыльКЗачетуПриИзменении(Элемент)
	РассчитатьНДФЛПоТекущейСтроке();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДобавитьНовыеСтроки(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение));
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		ДобавитьНовыеСтроки(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПодборАкционеров(Команда)
	
	ФизическиеЛицаЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуПодбораФизическихЛицПоРоли(
		Элементы.Начисления,
		Объект.Организация,
		ПредопределенноеЗначение("Перечисление.РолиФизическихЛиц.Акционер"),
		АдресСпискаПодобранныхФизическихЛиц());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеУдержаний(Команда)
	РасчетЗарплатыРасширенныйКлиент.ОткрытьФормуПодробнееОРасчетеУдержаний(Объект, "ДивидендыФизическимЛицам", ЭтаФорма, ОписаниеДокумента());
КонецПроцедуры

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтаФорма, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтаФорма, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов"

&НаКлиенте
Процедура ВводДанныхОПеречисленииНДФЛ(Команда)
	
	ЗарплатаКадрыРасширенныйКлиент.ВвестиДанныеОПеречисленииНДФЛВБюджет(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры


// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура РассчитатьНДФЛАкционераНаСервере(ВыбраннаяСтрока)
	
	ТекущиеДанные = Объект.Начисления.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НДФЛ = 0;
	ТекущиеДанные.НДФЛСПревышения = 0;
	ТекущиеДанные.КВыплате = 0;
	
	Акционер = ТекущиеДанные.Акционер;
	Начислено = ТекущиеДанные.Начислено;
	ВычетПоНДФЛ = ТекущиеДанные.ВычетПоНДФЛ;
		
	Если Не (ЗначениеЗаполнено(Акционер) И ЗначениеЗаполнено(Начислено)) Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;
	СтавкаНДФЛ = ТекущиеДанные.СтавкаНДФЛ;
	Если ЗначениеЗаполнено(СтавкаНДФЛ) Тогда
		Если СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка05 Тогда
			КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05;
		ИначеЕсли СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка10 Тогда
			КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10;
		ИначеЕсли СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка12 Тогда
			КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12;
		КонецЕсли;
	КонецЕсли;
	
	НДФЛ = УчетНДФЛРасширенный.НалогСДивидендовАкционера(Объект.ДатаВыплаты, Объект.Организация, Акционер, Начислено, ВычетПоНДФЛ, КатегорияДивидендов, Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, НДФЛ);
	
	УдержанияАкционера = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", Акционер));
	Если УдержанияАкционера.Количество() Тогда
		
		Для Каждого Удержание Из УдержанияАкционера Цикл
			Удержание.Результат = 0;
		КонецЦикла;
		ТекущиеДанные.Удержано = 0;
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Если Объект.Ссылка.Пустая() Тогда
			ДокументОбъект.УстановитьСсылкуНового(Документы.ДивидендыФизическимЛицам.ПолучитьСсылку());
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Ссылка КАК Ссылка,
		|	Дивиденды.НомерСтроки КАК НомерСтроки,
		|	Дивиденды.Акционер КАК ФизическоеЛицо,
		|	Дивиденды.Начислено КАК Начислено,
		|	Дивиденды.ВычетПоНДФЛ КАК ВычетПоНДФЛ,
		|	Дивиденды.НДФЛ КАК НДФЛ,
		|	Дивиденды.НДФЛСПревышения КАК НДФЛСПревышения,
		|	Дивиденды.НалогНаПрибыльКЗачету КАК НалогНаПрибыльКЗачету,
		|	Дивиденды.КВыплате КАК КВыплате,
		|	Дивиденды.Удержано КАК Удержано,
		|	ВЫБОР
		|		КОГДА Дивиденды.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка05)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05)
		|		КОГДА Дивиденды.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка10)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10)
		|		КОГДА Дивиденды.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка12)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.Дивиденды)
		|	КОНЕЦ КАК КатегорияДохода
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&Начисления КАК Дивиденды";
		Если ДокументОбъект.ДатаВыплаты < УчетНДФЛ.ПараметрыРасчетаНДФЛПоПрогрессивнойШкале().НачалоРасчетаНДФЛПоПрогрессивнойШкале Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Дивиденды.НалогНаПрибыльКЗачету", "0");
		Иначе
			Запрос.Текст = ТекстЗапроса
		КонецЕсли;
		
		Начисления = Объект.Начисления.Выгрузить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные));
		Для каждого СтрокаНачисления Из Начисления Цикл
			НалогНаПрибыльДляДивидендов = СтрокаНачисления.НалогНаПрибыльКЗачету;
			Если НалогНаПрибыльДляДивидендов * СтрокаНачисления.НДФЛ > 0 Тогда // Производим зачет сумм налога на прибыль в счет исчисленного налога с дивидендов.
				Если СтрокаНачисления.НДФЛ > 0 Тогда
					ОстатокСуммыКЗачету = Макс(НалогНаПрибыльДляДивидендов - СтрокаНачисления.НДФЛ, 0);
					СтрокаНачисления.НДФЛ = Макс(СтрокаНачисления.НДФЛ - НалогНаПрибыльДляДивидендов, 0);
				Иначе
					ОстатокСуммыКЗачету = Мин(НалогНаПрибыльДляДивидендов - СтрокаНачисления.НДФЛ, 0);
					СтрокаНачисления.НДФЛ = Мин(СтрокаНачисления.НДФЛ - НалогНаПрибыльДляДивидендов, 0);
				КонецЕсли;
				НалогНаПрибыльДляДивидендов = ОстатокСуммыКЗачету;
			КонецЕсли;
			Если НалогНаПрибыльДляДивидендов * СтрокаНачисления.НДФЛСПревышения > 0 Тогда
				Если СтрокаНачисления.НДФЛСПревышения > 0 Тогда
					СтрокаНачисления.НДФЛСПревышения = Макс(СтрокаНачисления.НДФЛСПревышения - НалогНаПрибыльДляДивидендов, 0);
				Иначе
					СтрокаНачисления.НДФЛСПревышения = Мин(СтрокаНачисления.НДФЛСПревышения - НалогНаПрибыльДляДивидендов, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("Начисления", Начисления);
		Запрос.Выполнить();
		
		ДатаОперации = ?(ЗначениеЗаполнено(ДокументОбъект.ДатаВыплаты), ДокументОбъект.ДатаВыплаты, ДокументОбъект.ПериодРегистрации);
		ОтборАкционеры = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОтборАкционеры, "ФизическоеЛицо", "=", ТекущиеДанные.Акционер, Истина);
		КадровыйУчет.СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ДокументОбъект.Организация, ДатаОперации, ДатаОперации, , Истина, ОтборАкционеры);
		Запрос.Текст = "ВЫБРАТЬ ФизическиеЛицаРаботавшиеВОрганизации.* ИЗ ВТФизическиеЛицаРаботавшиеВОрганизации КАК ФизическиеЛицаРаботавшиеВОрганизации";
		ФизическиеЛицаРаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛицаРаботавшиеВОрганизации");
		КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ФизическиеЛицаРаботавшиеВОрганизации, ДокументОбъект.Организация, ДатаОперации, ДатаОперации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокумента.НДФЛ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВТОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивиденды)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам)
		|	КОНЕЦ КАК ВидУдержания
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ВТОсновныеСотрудникиФизическихЛиц
		|		ПО ДанныеДокумента.ФизическоеЛицо = ВТОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.ФизическоеЛицо,
		|	ДанныеДокумента.НДФЛСПревышения,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения)
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ВТОсновныеСотрудникиФизическихЛиц
		|		ПО ДанныеДокумента.ФизическоеЛицо = ВТОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ВТОсновныеСотрудникиФизическихЛиц.Сотрудник ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.Дивиденды)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДивидендыСотрудников)
		|	КОНЕЦ КАК Начисление,
		|	&Ссылка КАК ДокументОснование,
		|	ДанныеДокумента.Начислено КАК Сумма
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ВТОсновныеСотрудникиФизическихЛиц
		|		ПО ДанныеДокумента.ФизическоеЛицо = ВТОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо";
		Результат = Запрос.ВыполнитьПакет();
		
		ДанныеДляПроведения = Новый Структура;
		
		НДФЛ = Результат[0].Выгрузить();
		НДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ДанныеДляПроведения.Вставить("НДФЛ", НДФЛ);
		
		ДанныеДляПроведения.Вставить("Начисления", Результат[1].Выгрузить());
		
		ВременныйРегистратор = Документы.ДивидендыФизическимЛицам.ПолучитьСсылку();
		НаборДвижений = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.ДивидендыФизическимЛицам, ВременныйРегистратор);
		
		УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(
												НаборДвижений, Ложь, ДокументОбъект.Организация, ДокументОбъект.ПериодРегистрации, ДанныеДляПроведения.Начисления, , ДанныеДляПроведения.НДФЛ);
		
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ДокументОбъект.ПериодРегистрации, ДокументОбъект.Организация);
		
		МенеджерВременныхТаблицУдержания = Новый МенеджерВременныхТаблиц;
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблицУдержания, НаборДвижений.НачисленияУдержанияПоКонтрагентамАкционерам);
		ДокументОбъект.Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Очистить();
		
		ДанныеДивидендов = Документы.ДивидендыФизическимЛицам.ДанныеДляПроведенияДивиденды(Запрос.МенеджерВременныхТаблиц);
		УчетНДФЛРасширенный.СформироватьДоходыИНДФЛСДивидендов(ДокументОбъект.Ссылка, НаборДвижений, Ложь,
								ДокументОбъект.Организация, ДокументОбъект.ДатаВыплаты, ДанныеДивидендов, ДокументОбъект.ВключатьВДекларациюПоНалогуНаПрибыль,,,,Ложь);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблицУдержания, НаборДвижений.СведенияОДоходахНДФЛ);
		
		МенеджерРасчета.УстановитьМенеджерВременныхТаблиц(МенеджерВременныхТаблицУдержания);
		
		МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = Истина;
		МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = Истина;
		МенеджерРасчета.ИсключаемыйРегистратор = ДокументОбъект.Ссылка;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияАкционера, МенеджерРасчета.Зарплата.Удержания);
		
		МенеджерРасчета.РассчитатьЗарплату();
		
		// Перенос в документ результатов расчета удержаний
		ИдентификаторыУдержаний = Объект.Удержания.Выгрузить( , "ИдентификаторСтрокиВидаРасчета");
		ИдентификаторыУдержаний.Сортировать("ИдентификаторСтрокиВидаРасчета Убыв");
		МаксимальныйИдентификатор = 
			?(ИдентификаторыУдержаний.Количество() И ИдентификаторыУдержаний[0].ИдентификаторСтрокиВидаРасчета <> 0, 
				ИдентификаторыУдержаний[0].ИдентификаторСтрокиВидаРасчета, 
				3*1000000);
		
		Если МенеджерРасчета.Зарплата.Удержания.Количество() Тогда
			Для Каждого СтрокаУдержания Из УдержанияАкционера Цикл
				СтрокиПоказателей = Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаУдержания.ИдентификаторСтрокиВидаРасчета));
				Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
					Объект.Показатели.Удалить(СтрокаПоказателей);
				КонецЦикла;
				Объект.Удержания.Удалить(СтрокаУдержания);
			КонецЦикла;
			
			Удержано = 0;
			Для Каждого СтрокаУдержания Из МенеджерРасчета.Зарплата.Удержания Цикл
				МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
				
				НовоеУдержание = Объект.Удержания.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеУдержание, СтрокаУдержания);
				НовоеУдержание.ИдентификаторСтрокиВидаРасчета = МаксимальныйИдентификатор;
				
				Для Каждого ЗначениеПоказателя Из СтрокаУдержания.Показатели Цикл
					СтрокаПоказателей = Объект.Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоказателей, ЗначениеПоказателя);
					СтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = МаксимальныйИдентификатор;
				КонецЦикла;
				
				Удержано = Удержано + СтрокаУдержания.Результат;
			КонецЦикла;
			ТекущиеДанные.Удержано = Удержано;
		КонецЕсли;
		
		// Значение показателей в данные формы
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеТаблицыУдержаний()), 2);
		
	КонецЕсли;
	
	ТекущиеДанные.КВыплате = Начислено - ТекущиеДанные.НДФЛ - ТекущиеДанные.НДФЛСПревышения + ТекущиеДанные.НалогНаПрибыльКЗачету - ТекущиеДанные.Удержано;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНДФЛПоТекущейСтроке();
	
	РассчитатьНДФЛАкционераНаСервере(Элементы.Начисления.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхФизическихЛиц()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(,"Акционер").ВыгрузитьКолонку("Акционер"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ДобавитьНовыеСтроки(ФизическиеЛица)
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Акционер", ФизическоеЛицо));
		Если СтрокиНачислений.Количество() = 0 Тогда
			НоваяСтрока = Объект.Начисления.Добавить();
			НоваяСтрока.Акционер = ФизическоеЛицо;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение удержаний по исполнительным листам выбранных физических лиц
	Если ФизическиеЛица.Количество() Тогда
		ЗаполнитьУдержанияФизическихЛиц(ФизическиеЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ДатаВыплатыПриИзмененииНаСервере()
	
	ОбновитьНастройкуПолейВычетаЗачета();
	ПерезаполнитьНачисленияСотрудникаНаСервере(, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкуПолейВычетаЗачета()
	
	ПоказыватьНалогКЗачету = Объект.ДатаВыплаты >= УчетНДФЛ.ПараметрыРасчетаНДФЛПоПрогрессивнойШкале().НачалоРасчетаНДФЛПоПрогрессивнойШкале;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачисленияВычетПоНДФЛ", "Видимость", Не ПоказыватьНалогКЗачету);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачисленияНалогНаПрибыльКЗачету", "Видимость", ПоказыватьНалогКЗачету);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтветственныхЛиц()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеЗначения = Новый Структура("Организация, МесяцРасчета", "Объект.Организация", "Объект.ПериодРегистрации");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");

	УстановитьОтветственныхЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыУдержаний(), "Удержания", , Ложь);
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеТаблицыУдержаний()), 2);
	
	// заполним предупреждения
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
	УстановитьНачальныеЗначенияПеречислениеНДФЛ();
	
	ОбновитьНастройкуПолейВычетаЗачета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальныеЗначенияПеречислениеНДФЛ()
	
	ПоказыватьВводДокументаПеречисленияНДФЛ = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		ПоказыватьВводДокументаПеречисленияНДФЛ = Модуль.ПоказыватьВводДокументаПеречисленияНДФЛ()
													И ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
				"ВводДанныхОПеречисленииНДФЛ", "Видимость", ПоказыватьВводДокументаПеречисленияНДФЛ);
	
	// Регистрация перечисления НДФЛ показывается, если
	// в документе уже указано, что налог перечислен или не ведется учет расчетов с бюджетом.
	ПоказыватьПеречислениеНДФЛ = Объект.ПеречислениеНДФЛВыполнено Или Не ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ");
	Если ПоказыватьПеречислениеНДФЛПрежняя = Неопределено Тогда
		ПоказыватьПеречислениеНДФЛПрежняя = ПоказыватьПеречислениеНДФЛ;
	Иначе
		ПоказыватьПеречислениеНДФЛ = ПоказыватьПеречислениеНДФЛ Или ПоказыватьПеречислениеНДФЛПрежняя;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
				"ГруппаПеречислениеНДФЛ", "Видимость", ПоказыватьПеречислениеНДФЛ);
	
	ПоказыватьРегистрациюВыплатВедомостью = ПолучитьФункциональнуюОпцию("ИспользоватьВедомостиДляВыплатыПрочихДоходов");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.МесяцНачисленияИмя 	= "ПериодРегистрации";
	Описание.УдержанияИмя			= "Удержания";
	Описание.ПериодДействияВШапке 	= Истина;
	Описание.НеРаспределятьПоСтатьямФинансирования = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеУдержанийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.Удержания.Загрузить(Параметр.Удержания.Выгрузить());
	
	Для Каждого Строка Из Объект.Начисления Цикл
		Удержано = 0;
		СтрокиУдержаний = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", Строка.Акционер));
		Для Каждого СтрокаУдержания Из СтрокиУдержаний Цикл
			Удержано = Удержано + СтрокаУдержания.Результат;
		КонецЦикла;
		Строка.Удержано = Удержано;
		Строка.КВыплате = Строка.Начислено - Строка.НДФЛ - Строка.НДФЛСПревышения + Строка.НалогНаПрибыльКЗачету - Строка.Удержано;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдержанияФизическихЛиц(ФизическиеЛица)
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		УдаляемыеСтроки = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Объект.Удержания.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	КатегорияИсполнительныйЛист = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ИсполнительныйЛист");
	КатегорияВознаграждениеПлатежногоАгента = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента");
	
	МенеджерРасчета = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаУвольнения, ГоловнаяОрганизация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Отбор = Новый Структура("ФизическоеЛицо, ДокументОснование, Удержание");
	ДатаУдержания = ?(ЗначениеЗаполнено(Объект.ДатаВыплаты), Объект.ДатаВыплаты, Объект.Дата);
	Если ДатаУдержания > КонецМесяца(Объект.ПериодРегистрации) Тогда
		ДатаУдержания = НачалоДня(КонецМесяца(Объект.ПериодРегистрации));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ПериодРегистрации
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) > КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНачала,
	|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ИТОГИ ПО
	|	ГоловнаяОрганизация,
	|	ДатаНачала";
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПериода = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериода.Следующий() Цикл
			МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ВыборкаПериода.ДатаНачала, Объект.Организация);
			ФизическиеЛицаПериода = Новый Массив;
			Выборка = ВыборкаПериода.Выбрать();
			Пока Выборка.Следующий() Цикл
				ФизическиеЛицаПериода.Добавить(Выборка.ФизическоеЛицо);
			КонецЦикла;
			
			МенеджерРасчета.ЗаполнитьУдержанияФизическихЛицЗаПериод(ФизическиеЛицаПериода, ВыборкаОрганизация.ГоловнаяОрганизация, ВыборкаПериода.ДатаНачала, КонецМесяца(ВыборкаПериода.ДатаНачала));
			Для Каждого СтрокаУдержания Из МенеджерРасчета.Зарплата.Удержания Цикл
				Если СтрокаУдержания.Категория = КатегорияИсполнительныйЛист 
					Или СтрокаУдержания.Категория = КатегорияВознаграждениеПлатежногоАгента Тогда
					
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаУдержания);
					Если Объект.Удержания.НайтиСтроки(Отбор).Количество() Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Объект.Удержания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
					
					НоваяСтрока.ДатаНачала = ДатаУдержания;
					НоваяСтрока.ДатаОкончания = КонецДня(ДатаУдержания);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Проверим удержания:
	// Если Сотрудник уволен, тогда исполнительные листы фиксированной суммой и до предела не считаем,
	// если Сотрудник не уволен, тогда можем считать все.
	ТаблицаУдержаний = Объект.Удержания.Выгрузить(, "НомерСтроки, ДокументОснование, ФизическоеЛицо");
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);
	Запрос.УстановитьПараметр("ДатаВыплаты", Объект.ДатаВыплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТИсполнительныеЛисты
	|ИЗ
	|	&ТаблицаУдержаний КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительныеЛисты.ДокументОснование КАК ДокументОснование,
	|	ИсполнительныеЛисты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МИНИМУМ(ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	ВТИсполнительныеЛисты КАК ИсполнительныеЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ИсполнительныеЛисты.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсполнительныеЛисты.ДокументОснование,
	|	ИсполнительныеЛисты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(УсловияУдержанияПоИсполнительномуДокументу.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериодыПолученияУсловийПоИсполнительнымЛистам
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО ВТДанные.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И (ВЫБОР
	|				КОГДА ВТДанные.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА &ДатаВыплаты
	|				ИНАЧЕ ВТДанные.ДатаУвольнения
	|			КОНЕЦ > УсловияУдержанияПоИсполнительномуДокументу.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанные.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПолученияУсловийПоИсполнительнымЛистам КАК ВТПериодыПолученияУсловийПоИсполнительнымЛистам
	|		ПО ВТДанные.ДокументОснование = ВТПериодыПолученияУсловийПоИсполнительнымЛистам.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО ВТДанные.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И (ВТПериодыПолученияУсловийПоИсполнительнымЛистам.Период = УсловияУдержанияПоИсполнительномуДокументу.Период)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УсловияУдержанияПоИсполнительномуДокументу.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой)
	|					ИЛИ ЕСТЬNULL(ВТДанные.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|						И УсловияУдержанияПоИсполнительномуДокументу.Предел <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдаляемыеСтроки = Объект.Удержания.НайтиСтроки(Новый Структура("ДокументОснование", Выборка.ДокументОснование));
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Объект.Удержания.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеУдаляемогоФизическогоЛица()
	
	Если ЗначениеЗаполнено(УдаляемоеФизическоеЛицо) Тогда
		
		СтрокиФизическогоЛица = Объект.Начисления.НайтиСтроки(Новый Структура("Акционер", УдаляемоеФизическоеЛицо));
		Если СтрокиФизическогоЛица.Количество() > 0 Тогда
			РассчитатьНДФЛАкционераНаСервере(СтрокиФизическогоЛица[0].ПолучитьИдентификатор());
		Иначе
			СтрокиКУдалению = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", УдаляемоеФизическоеЛицо));
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				СтрокиПоказателей = Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаКУдалению.ИдентификаторСтрокиВидаРасчета));
				Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
					Объект.Показатели.Удалить(СтрокаПоказателей);
				КонецЦикла;
				Объект.Удержания.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
		
		УдаляемоеФизическоеЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СведенияОбУдержаниях() Экспорт
	
	Возврат РасчетЗарплатыРасширенный.СведенияОбУдержаниях(ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	ПерезаполнитьНачисленияСотрудникаНаСервере(Сотрудники, СохранятьИсправления);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНачисленияСотрудникаНаСервере(Сотрудники = Неопределено, СохранятьИсправления = Истина)
	
	Если Не СохранятьИсправления Тогда
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		ИначеЕсли ТипЗнч(Сотрудники) = Тип("Массив") Тогда 
			СписокФизическихЛиц = Сотрудники;
		Иначе
			СписокФизическихЛиц = Объект.Начисления.Выгрузить(, "Акционер").ВыгрузитьКолонку("Акционер");
		КонецЕсли;
		
		ЗаполнитьУдержанияФизическихЛиц(СписокФизическихЛиц);
	КонецЕсли;
	
	Для Каждого НачислениеФизическогоЛица Из Объект.Начисления Цикл
		Если СписокФизическихЛиц.Найти(НачислениеФизическогоЛица.Акционер) <> Неопределено Тогда
			РассчитатьНДФЛАкционераНаСервере(НачислениеФизическогоЛица.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.СодержитПолеСотрудник	= Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник	= "ФизическоеЛицо";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета	= "Удержание";
	ОписаниеТаблицы.ИмяТаблицы 				= "Удержания";
	ОписаниеТаблицы.НомерТаблицы 			= 3;
	ОписаниеТаблицы.СодержитПолеВидРасчета	= Истина;
	ОписаниеТаблицы.СодержитПолеСотрудник	= Ложь;
	ОписаниеТаблицы.ПутьКДанным				= "Объект.Удержания";
	ОписаниеТаблицы.ПутьКДаннымПоказателей	= "Объект.Показатели";
	ОписаниеТаблицы.ИмяРеквизитаДатаНачала	= "ДатаНачала";
	ОписаниеТаблицы.ИмяРеквизитаДатаОкончания = "ДатаОкончания";
	
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияПериодаРегистрацииПриИзменении()
	РассчитатьНДФЛиУдержанияАкционеров();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодаРегистрации()
	РассчитатьНДФЛиУдержанияАкционеров();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНДФЛиУдержанияАкционеров()
	ПерезаполнитьНачисленияСотрудникаНаСервере(, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыПеречисленияНДФЛ()

	Если Объект.ПеречислениеНДФЛВыполнено Тогда
		Объект.ДатаПлатежаНДФЛ = ДатаПлатежаНДФЛПрежняя;
		Объект.ПеречислениеНДФЛРеквизиты = ПеречислениеНДФЛРеквизитыПрежняя;
	Иначе
		ДатаПлатежаНДФЛПрежняя = Объект.ДатаПлатежаНДФЛ;
		Объект.ДатаПлатежаНДФЛ = Дата(1,1,1);
		ПеречислениеНДФЛРеквизитыПрежняя = Объект.ПеречислениеНДФЛРеквизиты;
		Объект.ПеречислениеНДФЛРеквизиты = "";
	КонецЕсли;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоНастройкамПеречисленияНДФЛ(Форма, ПеречислениеНДФЛВыполнено, РегистрироватьВыплатуВедомостью);

	ВыплатаРегистрируетсяВедомостью = Форма.ПоказыватьРегистрациюВыплатВедомостью И РегистрироватьВыплатуВедомостью;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.КоманднаяПанель.ПодчиненныеЭлементы,
			"ФормаОбработкаСозданиеВедомостейПрочихДоходовСоздатьВедомостиПрочихДоходовПоДокументу",
			"Видимость",
			ВыплатаРегистрируетсяВедомостью);
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаПеречислениеНДФЛ",
			"Доступность",
			Не ВыплатаРегистрируетсяВедомостью);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ВводДанныхОПеречисленииНДФЛ",
			"Доступность",
			Не ВыплатаРегистрируетсяВедомостью);
		
	Если Не ВыплатаРегистрируетсяВедомостью Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ВводДанныхОПеречисленииНДФЛ",
			"Доступность",
			Не ПеречислениеНДФЛВыполнено);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДатаПлатежаНДФЛ",
			"Доступность",
			ПеречислениеНДФЛВыполнено);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДатаПлатежаНДФЛ",
			"АвтоОтметкаНезаполненного",
			ПеречислениеНДФЛВыполнено);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДатаПлатежаНДФЛ",
			"ОтметкаНезаполненного",
			ПеречислениеНДФЛВыполнено И Не ЗначениеЗаполнено(Форма.Объект.ДатаПлатежаНДФЛ));
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПеречислениеНДФЛРеквизиты",
			"Доступность",
			ПеречислениеНДФЛВыполнено);
		
	КонецЕсли;

КонецПроцедуры


#Область КлючевыеРеквизитыЗаполненияФормы

&НаСервере
// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.Удержания");
	Массив.Добавить("Объект.Показатели");
	Возврат Массив;
	
КонецФункции

&НаСервере
// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",	НСтр("ru = 'организации'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#КонецОбласти
