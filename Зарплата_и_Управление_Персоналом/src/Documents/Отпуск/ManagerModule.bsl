#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.Отпуск - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.Отпуск - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ);
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
	
	РезультатИсправления = ИсправлениеДокументовЗарплатаКадры.ПриПроведенииИсправления(ДокументСсылка,
		Движения, РежимПроведения, Отказ, РеквизитыДляПроведения, СтруктураВидовУчета, Объект);
	
	Если РеквизитыДляПроведения.ДокументРассчитан Тогда 
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			
			Если РеквизитыДляПроведения.ПериодыПриостановкиОтпуска.Количество() > 0 Тогда
				Движения.Начисления.ДополнительныеСвойства.Вставить("ОтключитьРегистрациюПерерасчетов");
			КонецЕсли;

			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияРезультатовНачислений(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеРезультатовНачислений);
			ПерерасчетЗарплаты.СформироватьДвиженияИсходныеДанныхПерерасчетов(Движения, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Начисления);
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(
				Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержанийДоПределаПоСотрудникам(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияДоПределаПоСотрудникам);
			РасчетЗарплатыРасширенный.СформироватьЗадолженностьПоУдержаниямФизическихЛиц(Движения, ДанныеДляПроведения.ЗадолженностьПоУдержаниям);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				Модуль.СформироватьДвиженияНачислений(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации);
			КонецЕсли;
			
			ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ);

			// Заполним описание данных для проведения в учете начисленной зарплаты.
			ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
			ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
			ДанныеДляПроведенияУчетЗарплаты.Организация 			= РеквизитыДляПроведения.Организация;
			ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= РеквизитыДляПроведения.ПериодРегистрации;
			ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= РеквизитыДляПроведения.ПорядокВыплаты;
			ДанныеДляПроведенияУчетЗарплаты.ДниОтпускаАвансом 		= ДанныеДляПроведения.ДниОтпускаАвансом;
			ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
			
			// - Регистрация начислений в учете начислений и удержаний.
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НачисленияПоСотрудникам, Неопределено);
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				Модуль.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты);
				Модуль.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты);
			КонецЕсли;
			
			// - Регистрация бухучета начислений и удержаний, выполняется до вызова регистрации доходов в учете НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено);
						
			// - Регистрация бухучета займов.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				Неопределено, ДанныеДляПроведения.УдержанияЗаймов, Неопределено);
						
			// Подготовка данных для регистрации удержаний, НДФЛ и Корректировок выплаты в учете начисленной зарплаты.
			УчетНачисленнойЗарплаты.СоздатьВТРаспределениеНачисленийТекущегоДокумента(ДанныеДляПроведенияУчетЗарплаты);
						
			// - Регистрация материальной выгоды в учете НДФЛ.
			ДатаОперацииПоНалогам = НачалоДня(РеквизитыДляПроведения.ДатаНачалаСобытия) - 1;
			УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.МатериальнаяВыгода, Ложь, , ДокументСсылка, РеквизитыДляПроведения.ДоходПолученНаТерриторииРФ);
						
			// НДФЛ
			// Если ранее при начислении авансов НДФЛ был удержан и перечислен, соответствующие ему доходы следует зачесть при
			// начислении зарплаты за тот же месяц.
			ЗасчитыватьДанныеАвансов = РеквизитыДляПроведения.РассчитатьЗарплату;	
			Если ЗасчитыватьДанныеАвансов
				И РезультатИсправления.ИсправлениеВТекущемПериоде 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДляПроведения.ИсправленныйДокумент, "РассчитатьЗарплату") Тогда
					 ЗасчитыватьДанныеАвансов = Ложь
			КонецЕсли;
			УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(
				РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения, Истина, Истина, РеквизитыДляПроведения.ДоходПолученНаТерриторииРФ, , , "ВТНачисленияДляУчетаДоходовНДФЛ", ЗасчитыватьДанныеАвансов);
				
			// КорректировкиВыплаты
			РасчетЗарплатыРасширенный.СформироватьДвиженияКорректировкиВыплатыПоВременнойТаблицеНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, ДанныеДляПроведения, Истина, Истина);
			
			// Займы
			// - взаиморасчеты по займам
			ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
			
			УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			
			// - Регистрация удержаний в учете начисленной зарплаты.
			УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам);
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.УдержанияПоСотрудникам);
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьЗаймы(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				ДанныеДляПроведения.УдержанияЗаймов, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);	
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				Модуль.ЗарегистрироватьКорректировкиДляРасчетаСохраняемогоДенежногоСодержания(ДанныеДляПроведения.КорректировкиДляРегистрацииДенежногоСодержания, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаНачало, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаОкончание);
				Модуль.ЗарегистрироватьНачисленияСоставМесячногоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СоставМесячногоДенежногоСодержания);
			КонецЕсли;
			
			// - Регистрация бухучета НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				Неопределено, Неопределено, ДанныеДляПроведения.НДФЛПоСотрудникам);
						
			// - Регистрация бухучета займов.
			ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				Неопределено, Неопределено, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);

			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			// - регистрация пособий
			УчетСтраховыхВзносов.СформироватьПособия(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Пособия, Неопределено);
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			// Корректировки данных для среднего заработка.
			ПараметрыКорректировок = УчетСреднегоЗаработка.ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка();
			ПараметрыКорректировок.Организация = РеквизитыДляПроведения.Организация;
			ПараметрыКорректировок.ФизическоеЛицо = РеквизитыДляПроведения.ФизическоеЛицо;
			ПараметрыКорректировок.Сотрудник = РеквизитыДляПроведения.Сотрудник;
			
			УчетСреднегоЗаработка.ЗаписатьКорректировкиОбщегоСреднегоЗаработка(
				УчетСреднегоЗаработка.КорректировкиОбщегоСреднегоЗаработкаДокумента(РеквизитыДляПроведения.Ссылка), 
				РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаНачало, 
				РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаОкончание, 
				ПараметрыКорректировок);
				
				// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
		ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
		ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
		ПараметрыДвиженийОтпусков.РабочиеПериоды = ДанныеДляПроведения.РабочиеПериодыДляОтпусков;
		ПараметрыДвиженийОтпусков.Основания = ДанныеДляПроведения.ОснованияДляОтпусков;
		ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
		
		ДатыНачалаКомпенсаций = Новый Соответствие;
		ДатаКомпенсации = ДатаКомпенсацииОтпуска(РеквизитыДляПроведения.ПланируемаяДатаВыплаты, РеквизитыДляПроведения.ПериодРегистрации);
		ДатыНачалаКомпенсаций.Вставить(РеквизитыДляПроведения.Сотрудник, ДатаКомпенсации);
		ПараметрыДвиженийОтпусков.ДатыНачалаКомпенсаций = ДатыНачалаКомпенсаций;
		
		ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
		ОстаткиОтпусков.СформироватьДвиженияПериодовОтпусков(Движения, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.ПериодыОтпусков);
		
		СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(Движения, РеквизитыДляПроведения.Ссылка, ДанныеСостоянийСотрудника(РеквизитыДляПроведения));
		
		Если РеквизитыДляПроведения.ПредоставитьОтгул Тогда
			ДанныеОбОтгулах = ДанныеОбОтгулах(РеквизитыДляПроведения);
			УчетРабочегоВремениРасширенный.ЗарегистрироватьИПроверитьОстаткиДниЧасыОтгуловСотрудников(Движения, ДанныеОбОтгулах, Отказ);
		КонецЕсли;
		
		УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляРегистрацииВУчетаСтажаПФР(РеквизитыДляПроведения.Ссылка)[РеквизитыДляПроведения.Ссылка]);
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, РеквизитыДляПроведения.СотрудникиДаты, РеквизитыДляПроведения.Ссылка);
			КадровыйУчетРасширенный.СформироватьДвиженияЗанятостиВременноОсвобожденныхПозицииШтатногоРасписания(
				Движения, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ДатаНачалаПериодаОтсутствия, РеквизитыДляПроведения.ДатаОкончанияПериодаОтсутствия, Ложь);
		КонецЕсли;
		
		УчетСреднегоЗаработка.УдалитьПричиныПерерасчетов(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		ПерерасчетЗарплаты.УдалитьПерерасчетыПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ВыполнитьЗапланированныеКорректировкиДвижений(Движения);
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
	
КонецПроцедуры

// Сторнирует документ по учетам. Используется подсистемой исправления документов.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений исправляющего документа в которую будут добавлены сторно стоки.
//  Регистратор				 - ДокументСсылка				 - Документ регистратор исправления (документ исправление).
//  ИсправленныйДокумент	 - ДокументСсылка				 - Исправленный документ движения которого будут сторнированы.
//  СтруктураВидовУчета		 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  ДополнительныеПараметры	 - Структура					 - Структура со свойствами:
//  					* ИсправлениеВТекущемПериоде - Булево - Истина когда исправление выполняется в периоде регистрации исправленного документа.
//						* ОтменаДокумента - Булево - Истина когда исправление вызвано документом СторнированиеНачислений.
//  					* ПериодРегистрации	- Дата - Период регистрации документа регистратора исправления.
// 
// Возвращаемое значение:
//  Булево - "Истина" если сторнирование выполнено этой функцией, "Ложь" если специальной процедуры не предусмотрено.
//
Функция СторнироватьПоУчетам(Движения, Регистратор, ИсправленныйДокумент, СтруктураВидовУчета, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		УчетРабочегоВремениРасширенный.СторнироватьДниЧасыОтгуловСотрудников(Движения, ИсправленныйДокумент);
	КонецЕсли;
	
	Если (ДополнительныеПараметры.ОтменаДокумента Или ДополнительныеПараметры.ИсправлениеВТекущемПериоде)
		И Не ДополнительныеПараметры.ИсправлениеДоначислением Тогда
		
		// При отмене документа реквизиты для проведения сформированы документом СторнированиеНачислений,
		// их структура отличается от реквизитов для проведения исправленного документа.
		СторнироватьРасчеты = ДополнительныеПараметры.ОтменаДокумента Или ДополнительныеПараметры.РеквизитыДляПроведения.ДокументРассчитан;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего И СторнироватьРасчеты Тогда
			УчетСреднегоЗаработка.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		КонецЕсли;
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		КонецЕсли;
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета И СторнироватьРасчеты Тогда
			
			Если ДополнительныеПараметры.ИсправлениеВТекущемПериоде И Не ДополнительныеПараметры.Свойство("СторнироватьЗарегистрированноеПриНачисленииАванса") Тогда
				РеквизитыИсправленногоДокумента = РеквизитыДляПроведения(ИсправленныйДокумент);
				Если РеквизитыИсправленногоДокумента.РассчитатьЗарплату
					И (ДополнительныеПараметры.ОтменаДокумента Или Не ДополнительныеПараметры.РеквизитыДляПроведения.РассчитатьЗарплату) Тогда
					ДополнительныеПараметры.Вставить("СторнироватьЗарегистрированноеПриНачисленииАванса", Истина)
				КонецЕсли;
			КонецЕсли;
			
			РасчетЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			ОтражениеЗарплатыВБухучетеРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
			УчетНДФЛРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			УчетНачисленнойЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			УчетСтраховыхВзносовРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры);
			
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияБезСпецификиУчетов(
				Движения, ИсправленныйДокумент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Описание - возвращает описание разделов данных, которые содержит документ
// 
// Возвращаемое значение:
// 	Соответствие - описание разделов данных документов -
//	 *Ключ - Строка - имя раздела. Одно из значений структуры 
//		возвращаемой методом см. МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных
//   *Значение - см. МногофункциональныеДокументыБЗККлиентСервер.НовыйОписаниеРазделаДанных - описание раздела
//
Функция ОписаниеРазделовДанных() Экспорт
	ВсеРазделы = МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных();
	
	ОписаниеРазделовДанных = Новый Соответствие();
	
	ОписаниеРаздела = МногофункциональныеДокументыБЗККлиентСервер.НовыйОписаниеРазделаДанных();
	ОписаниеРазделовДанных.Вставить(ВсеРазделы.КадровыеДанные, ОписаниеРаздела);	
	ОписаниеРаздела.РеквизитСостояние = "Проведен";
	ОписаниеРаздела.РеквизитОтветсвенный = "Ответственный";
	
	ОписаниеРаздела = МногофункциональныеДокументыБЗККлиентСервер.НовыйОписаниеРазделаДанных();
	ОписаниеРазделовДанных.Вставить(ВсеРазделы.НачисленнаяЗарплата, ОписаниеРаздела);
	ОписаниеРаздела.РеквизитСостояние = "ДокументРассчитан";	
	ОписаниеРаздела.РеквизитОтветсвенный = "Рассчитал";
	ОписаниеРаздела.ТребуетсяУтверждениеПриПроведении = Истина;
	ОписаниеРаздела.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не рассчитан.'");
	
	Возврат ОписаниеРазделовДанных;
КонецФункции

// Описание - возвращает структуру со значениями по которым будут проверяться права на разделы документа
// 				 
// Параметры:
//  ДокументОбъект - ДокументОбъект.Отпуск, ДанныеФормыСтруктура - объект или данные формы, 
//					отображающие данные документа, для которого нужно получить данные
//
// Возвращаемое значение:
// 	Структура -  см. НовыйЗначенияДоступа - значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступа(ДокументОбъект) Экспорт
	Возврат МногофункциональныеДокументыБЗК.ЗначенияДоступаПоСоставуДокумента(
		ДокументОбъект, 
		ДокументОбъект.Организация);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаОбъекта.
Функция ОписаниеСоставаОбъекта() Экспорт
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаОбъектаФизическоеЛицоВШапке();
КонецФункции

Процедура ЗаполнитьДниОтпускаАвансом(ДокументСсылка, ДанныеДляПроведения, Сторнирование = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Или ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Отпуск") Тогда 
		ДниОтпускаАвансом = ОтражениеЗарплатыВУчете.НоваяТаблицаДнейОтпускаАвансом();
		ДанныеДляПроведения.Вставить("ДниОтпускаАвансом", ДниОтпускаАвансом);	
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Сторнирование", Сторнирование);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Отпуск.ВидРасчетаОсновногоОтпуска КАК Начисление,
	               |	Отпуск.КоличествоДнейОсновногоОтпускаАвансом КАК КоличествоДнейАвансом,
	               |	&Сторнирование КАК Сторно
	               |ИЗ
	               |	Документ.Отпуск КАК Отпуск
	               |ГДЕ
	               |	Отпуск.Ссылка = &Ссылка
	               |	И Отпуск.ВидРасчетаОсновногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтпускДополнительныеОтпуска.ВидРасчета,
	               |	ОтпускДополнительныеОтпуска.КоличествоДнейАвансом,
	               |	&Сторнирование
	               |ИЗ
	               |	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	               |ГДЕ
	               |	ОтпускДополнительныеОтпуска.Ссылка = &Ссылка
	               |	И ОтпускДополнительныеОтпуска.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтпускОтпускаАвансомПерерасчет.ВидРасчета,
	               |	ОтпускОтпускаАвансомПерерасчет.КоличествоДнейАвансом,
	               |	ИСТИНА
	               |ИЗ
	               |	Документ.Отпуск.ОтпускаАвансомПерерасчет КАК ОтпускОтпускаАвансомПерерасчет
	               |ГДЕ
	               |	ОтпускОтпускаАвансомПерерасчет.Ссылка = &Ссылка
	               |	И ОтпускОтпускаАвансомПерерасчет.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
	               |	И НЕ &Сторнирование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДниОтпускаАвансом = ОтражениеЗарплатыВУчете.НоваяТаблицаДнейОтпускаАвансом();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДниОтпускаАвансом.Добавить(), Выборка);
	КонецЦикла;
	
	ДниОтпускаАвансом.Свернуть("Начисление, Сторно", "КоличествоДнейАвансом");
	
	ДанныеДляПроведения.Вставить("ДниОтпускаАвансом", ДниОтпускаАвансом);	
	
КонецПроцедуры

Функция ОписаниеТаблицРазовыхНачислений() Экспорт 
	ОписаниеТаблиц = Новый Массив;
	ОписаниеТаблицы = ДокументыРазовыхНачислений.НовыйОписаниеТаблицыРазовыхНачислений();
	ОписаниеТаблиц.Добавить(ОписаниеТаблицы);
	ОписаниеТаблицы.ИмяТаблицы = "Начисления";
	ОписаниеТаблицы.ИмяПоляВидРасчета = "Начисление";
	
	Возврат ОписаниеТаблиц;
КонецФункции	

Функция СвойстваИсправляемогоДокумента(ДокументСсылка) Экспорт
	
	Реквизиты = ИсправлениеДокументовЗарплатаКадры.РеквизитыИсправляемогоРасчетногоДокумента();
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, Реквизиты);
	
КонецФункции

Функция ПараметрыИсправляемогоДокумента(ДокументСсылка) Экспорт
	
	Возврат ИсправлениеДокументовЗарплатаКадры.ПараметрыИсправляемогоДокумента(ДокументСсылка,
		СвойстваИсправляемогоДокумента(ДокументСсылка));
	
КонецФункции

Функция ПараметрыСторнируемогоДокумента(ДокументСсылка) Экспорт
	
	Свойства = ПараметрыИсправляемогоДокумента(ДокументСсылка);
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ДатаВыплаты", "ПланируемаяДатаВыплаты");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Свойства, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, Реквизиты));
	
	Параметры = ИсправлениеДокументовЗарплатаКадры.ПараметрыСторнируемогоДокумента(ДокументСсылка, Свойства);
	
	ОписаниеТаблицы = ИсправлениеДокументовЗарплатаКадры.НовыйОписаниеТаблицыНачислений();
	ОписаниеТаблицы.ИмяТаблицы = "Начисления";
	ОписаниеТаблицы.ИмяПоляВидРасчета = "Начисление";
	Параметры.ТаблицыНачислений.Добавить(ОписаниеТаблицы);
	
	ОписаниеТаблицы = ИсправлениеДокументовЗарплатаКадры.НовыйОписаниеТаблицыНачислений();
	ОписаниеТаблицы.ИмяТаблицы = "УправленческиеНачисления";
	ОписаниеТаблицы.ИмяПоляВидРасчета = "Начисление";
	Параметры.ТаблицыНачислений.Добавить(ОписаниеТаблицы);
	
	Возврат Параметры;
	
КонецФункции

#Область РассылкаДокументов

Процедура ДобавитьКомандыРассылки(Команды) Экспорт
	
	Команда = Команды.Добавить();
	Команда.ТипПараметра = Новый ОписаниеТипов("ДокументСсылка.Отпуск");
	Команда.Представление = НСтр("ru = 'Рассылка приказов (Т-6)'");
	Команда.Назначение = РассылкаДокументов.ВидыНазначенияКомандыРассылки().ДляСписка;
	Команда.РежимЗаписи = РассылкаДокументов.РежимыЗаписиОбъектаПередВыполнениемКомандыРассылки().Проводить;
	Команда.ПечатныеФормы = РассылкаДокументовКлиентСервер.НоваяПечатнаяФорма();
	Команда.ПечатныеФормы.Идентификатор = "ПФ_MXL_Т6";
	Команда.ТемаПисьма = НСтр("ru = 'Приказ о предоставлении отпуска (Т-6)'");
	// АПК:374-выкл. Восклицательный знак в тексте письма, а не в сообщении пользователю.
	Команда.ТекстПисьма = 
		НСтр("ru = 'Добрый день!
			 |
			 |Во вложении приказ о вашем отпуске (форма Т-6).
			 |Пожалуйста, распечатайте его, поставьте свою подпись в обозначенных местах и пришлите нам фотографию или скан-копию в ответ на это письмо.
			 |
			 |С уважением, Администрация.'");
	// АПК:374-вкл
	
КонецПроцедуры

#КонецОбласти

#Область ПрямыеВыплаты

// Возникает при заполнении документа ЗаявлениеСотрудникаНаВыплатуПособия на основании текущего документа.
Процедура ЗаполнитьЗаявлениеСотрудникаНаВыплатуПособияПоОснованию(Отпуск, Заявление, РеквизитыДокумента, ДанныеДляРасчетаСреднегоЗаработка) Экспорт
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отпуск, "Организация, Сотрудник, ИсправленныйДокумент, Дата");
	РеквизитыДокумента.Вставить("Организация", РеквизитыОтпуска.Организация);
	РеквизитыДокумента.Вставить("Сотрудник", РеквизитыОтпуска.Сотрудник);
	РеквизитыДокумента.Вставить("ДатаПредставленияПакетаДокументов", РеквизитыОтпуска.Дата);
	Если ЗначениеЗаполнено(РеквизитыОтпуска.ИсправленныйДокумент) Тогда
		РеквизитыДокумента.Вставить("Перерасчет", Истина);
		РеквизитыДокумента.Вставить("КодПричиныПерерасчета", "01");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СЭДО

// Возникает при заполнении документа ОтветНаЗапросФССДляРасчетаПособия на основании текущего документа.
Процедура ЗаполнитьОтветНаЗапросФССДляРасчетаПособия(Отпуск, ДокументСЭДО, Реквизиты, ДанныеДляРасчетаСреднегоЗаработка) Экспорт
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отпуск, "Организация, Сотрудник, ДатаНачалаСобытия");
	Реквизиты.Вставить("Организация", РеквизитыОтпуска.Организация);
	Реквизиты.Вставить("Сотрудник", РеквизитыОтпуска.Сотрудник);
	Реквизиты.Вставить("ДатаНачалаСобытия", РеквизитыОтпуска.ДатаНачалаСобытия);
КонецПроцедуры

#КонецОбласти

Функция ОбъектЗаблокирован(СсылкаНаОбъект) Экспорт
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.Отпуск) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументРассчитан");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.Отпуск);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ о предоставлении отпуска.
	КадровыйУчетРасширенный.ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати);
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ПолныеПрава,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_Т60";
		КомандаПечати.Представление = НСтр("ru = 'Записка - расчет о предоставлении отпуска (Т-60)'");
		КомандаПечати.Порядок = 20;
		КомандаПечати.ФункциональныеОпции = "РаботаВХозрасчетнойОрганизации";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Документ.Отпуск";
		КомандаПечати.Идентификатор = "ПФ_MXL_СправкаДляОплатыОтпускаЧАЭС";
		КомандаПечати.Представление = НСтр("ru = 'Справка для оплаты доп. отпуска гражданам, подвергшимся воздействию радиации'");
		КомандаПечати.Порядок = 80;
		КомандаПечати.ФункциональныеОпции = "ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
	КонецЕсли;
	
	// Расчет среднего заработка
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.Отпуск");
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка0504425(КомандыПечати, "Документ.Отпуск");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДобавитьКомандыПечатиСохраняемогоДенежногоСодержания(КомандыПечати);
	КонецЕсли; 
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаДляОплатыОтпускаЧАЭС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_СправкаДляОплатыОтпускаЧАЭС", НСтр("ru = 'Справка для оплаты доп. отпуска гражданам, подвергшимся воздействию радиации'"),
		ТабличныйДокументСправкиДляОплатыОтпускаЧАЭС(УправлениеПечатью.МакетПечатнойФормы("Документ.Отпуск.ПФ_MXL_СправкаДляОплатыОтпускаЧАЭС"), МассивОбъектов, ОбъектыПечати), ,
		"Документ.Отпуск.ПФ_MXL_СправкаДляОплатыОтпускаЧАЭС");
	КонецЕсли;
	
	Обработки.ПечатьРасчетаСреднегоЗаработка.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета = Неопределено) Экспорт 
	
	Если СтруктураВидовУчета = Неопределено Тогда
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет,НачисленияПерерасчетНулевыеСторно", "Ссылка.ПериодРегистрации");
		Если РеквизитыДляПроведения.ДокументРассчитан Тогда
			
			РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплаты.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ИсправленныйДокумент);
			РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплатыРасширенный.ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения);
			РасчетЗарплатыРасширенный.ЗаполнитьПогашениеЗадолженностиПоУдержаниям(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.ПериодРегистрации);
			
			ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				ПараметрыУправленческаяЗарплата = Модуль.ДополнительныеПараметрыПодготовкиДанныхДляПроведения();
				ПараметрыУправленческаяЗарплата.ПолеДатыДействия = "Ссылка.ПериодРегистрации"; 
				ПараметрыУправленческаяЗарплата.ПолеВидаНачисления = "Начисление"; 
				Модуль.ПриПодготовкеДанныхДляПроведенияДокументаРасчетаЗарплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ПараметрыУправленческаяЗарплата);
			КонецЕсли;
			
			ДатаОперации = Мин(КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), РеквизитыДляПроведения.ДатаНачалаСобытия - 1);
			ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДатаОперации, "Ссылка.ПериодРегистрации");
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				КорректировкиДляРегистрацииДенежногоСодержания = Модуль.СведенияОКорректировкахДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка);
				ДанныеДляПроведения.Вставить("КорректировкиДляРегистрацииДенежногоСодержания", КорректировкиДляРегистрацииДенежногоСодержания);
				
				СоставМесячногоДенежногоСодержания = Модуль.СведенияОСоставеМесячногоДенежногоСодержания(РеквизитыДляПроведения.Ссылка, "ДенежноеСодержание,ДенежноеСодержаниеФактическиеНачисления");
				ДанныеДляПроведения.Вставить("СоставМесячногоДенежногоСодержания", СоставМесячногоДенежногоСодержания);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеДляПроведения.Вставить("РабочиеПериодыДляОтпусков", РабочиеПериодыДляОтпусков(РеквизитыДляПроведения.Ссылка));
		ДанныеДляПроведения.Вставить("ОснованияДляОтпусков", ОснованияДляОтпусков(РеквизитыДляПроведения.Ссылка));
		
		ЗаполнитьДниОтпускаАвансом(РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения);
		ЗаполнитьПериодыОтпусков(РеквизитыДляПроведения, ДанныеДляПроведения);
		
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ДокументРассчитан И СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отпуск.Ссылка КАК Ссылка,
	|	Отпуск.ДокументРассчитан КАК ДокументРассчитан,
	|	Отпуск.Организация КАК Организация,
	|	Отпуск.ПериодРегистрации КАК ПериодРегистрации,
	|	Отпуск.ПорядокВыплаты КАК ПорядокВыплаты,
	|	Отпуск.Дата КАК Дата,
	|	Отпуск.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	Отпуск.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Отпуск.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Отпуск.ПредоставитьОтгул КАК ПредоставитьОтгул,
	|	Отпуск.ОсвобождатьСтавку КАК ОсвобождатьСтавку,
	|	Отпуск.Сотрудник КАК Сотрудник,
	|	Отпуск.ДатаНачалаПериодаОтсутствия КАК ДатаНачалаПериодаОтсутствия,
	|	Отпуск.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончанияПериодаОтсутствия,
	|	Отпуск.ИсправленныйДокумент КАК ИсправленныйДокумент,
	|	Отпуск.ВидВремени КАК ВидВремени,
	|	Отпуск.Номер КАК Номер,
	|	Отпуск.ПредоставитьОсновнойОтпуск КАК ПредоставитьОсновнойОтпуск,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияОсновногоОтпуска,
	|	Отпуск.ПредоставитьДополнительныйОтпуск КАК ПредоставитьДополнительныйОтпуск,
	|	Отпуск.РасходДнейОтгула КАК РасходДнейОтгула,
	|	Отпуск.РасходЧасовОтгула КАК РасходЧасовОтгула,
	|	Отпуск.КоличествоДнейОтгула КАК КоличествоДнейОтгула,
	|	Отпуск.ВидРасчетаОтгул КАК ВидРасчетаОтгул,
	|	Отпуск.ДокументЗаполнения КАК ДокументЗаполнения,
	|	Отпуск.ДокументЗаполнения.Номер КАК НомерДокументаЗаполнения,
	|	Отпуск.ДокументЗаполнения.Дата КАК ДатаДокументаЗаполнения,
	|	Отпуск.ДоходПолученНаТерриторииРФ КАК ДоходПолученНаТерриторииРФ,
	|	Отпуск.РассчитатьЗарплату КАК РассчитатьЗарплату
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.СуммаВычета КАК СуммаВычета,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.РанееНачислено КАК РанееНачислено
	|ИЗ
	|	Документ.Отпуск.РаспределениеПоТерриториямУсловиямТруда КАК ОтпускРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускРаспределениеРезультатовНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОтпускРаспределениеРезультатовНачислений.Территория КАК Территория,
	|	ОтпускРаспределениеРезультатовНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ОтпускРаспределениеРезультатовНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	ОтпускРаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ОтпускРаспределениеРезультатовНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СУММА(ОтпускРаспределениеРезультатовНачислений.Результат) КАК Результат,
	|	ОтпускРаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат
	|ИЗ
	|	Документ.Отпуск.РаспределениеРезультатовНачислений КАК ОтпускРаспределениеРезультатовНачислений
	|ГДЕ
	|	ОтпускРаспределениеРезультатовНачислений.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускРаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат,
	|	ОтпускРаспределениеРезультатовНачислений.СтатьяРасходов,
	|	ОтпускРаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете,
	|	ОтпускРаспределениеРезультатовНачислений.Территория,
	|	ОтпускРаспределениеРезультатовНачислений.ОблагаетсяЕНВД,
	|	ОтпускРаспределениеРезультатовНачислений.СтатьяФинансирования,
	|	ОтпускРаспределениеРезультатовНачислений.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускДополнительныеОтпуска.НомерСтроки КАК НомерСтроки,
	|	ОтпускДополнительныеОтпуска.ВидОтпуска КАК ВидОтпуска,
	|	ОтпускДополнительныеОтпуска.ВидРасчета КАК ВидРасчета,
	|	ОтпускДополнительныеОтпуска.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремени,
	|	ОтпускДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КоличествоДней КАК КоличествоДней,
	|	ОтпускДополнительныеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ОтпускДополнительныеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	ОтпускДополнительныеОтпуска.КоличествоДнейКомпенсации КАК КоличествоДнейКомпенсации,
	|	ОтпускДополнительныеОтпуска.ВидРасчетаКомпенсации КАК ВидРасчетаКомпенсации,
	|	ОтпускДополнительныеОтпуска.Основание КАК Основание
	|ИЗ
	|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	|ГДЕ
	|	ОтпускДополнительныеОтпуска.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускНачисления.НомерСтроки КАК НомерСтроки,
	|	ОтпускНачисления.Начисление КАК Начисление,
	|	ОтпускНачисления.ДатаНачала КАК ДатаНачала,
	|	ОтпускНачисления.ДатаОкончания КАК ДатаОкончания,
	|	ОтпускНачисления.Результат КАК Результат,
	|	ОтпускНачисления.Подразделение КАК Подразделение,
	|	ОтпускНачисления.ВидЗанятости КАК ВидЗанятости,
	|	ОтпускНачисления.НормаДней КАК НормаДней,
	|	ОтпускНачисления.НормаЧасов КАК НормаЧасов,
	|	ОтпускНачисления.ОтработаноДней КАК ОтработаноДней,
	|	ОтпускНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ОтпускНачисления.Сотрудник КАК Сотрудник,
	|	ОтпускНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	ОтпускНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	|	ОтпускНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|	ОтпускНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ОтпускНачисления.ФиксСтрока КАК ФиксСтрока,
	|	ОтпускНачисления.ФиксЗаполнение КАК ФиксЗаполнение,
	|	ОтпускНачисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
	|	ОтпускНачисления.ФиксРасчет КАК ФиксРасчет,
	|	ОтпускНачисления.ВремяВЧасах КАК ВремяВЧасах,
	|	ОтпускНачисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|	ОтпускНачисления.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериод,
	|	ОтпускНачисления.ОбщийГрафик КАК ОбщийГрафик,
	|	ОтпускНачисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	ОтпускНачисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремени,
	|	ОтпускНачисления.СуммаВычета КАК СуммаВычета,
	|	ОтпускНачисления.КодВычета КАК КодВычета,
	|	ОтпускНачисления.УдалитьКодВычета КАК УдалитьКодВычета,
	|	ОтпускНачисления.ОплаченоДней КАК ОплаченоДней,
	|	ОтпускНачисления.ОплаченоЧасов КАК ОплаченоЧасов,
	|	ОтпускНачисления.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.Отпуск.Начисления КАК ОтпускНачисления
	|ГДЕ
	|	ОтпускНачисления.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускПериодыПриостановкиОтпуска.НомерСтроки КАК НомерСтроки,
	|	ОтпускПериодыПриостановкиОтпуска.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ОтпускПериодыПриостановкиОтпуска.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ОтпускПериодыПриостановкиОтпуска.КоличествоДнейПриостановки КАК КоличествоДнейПриостановки,
	|	ОтпускПериодыПриостановкиОтпуска.Причина КАК Причина
	|ИЗ
	|	Документ.Отпуск.ПериодыПриостановкиОтпуска КАК ОтпускПериодыПриостановкиОтпуска
	|ГДЕ
	|	ОтпускПериодыПриостановкиОтпуска.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	Пока ВыборкаРеквизиты.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
	КонецЦикла;
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	РеквизитыДляПроведения.РаспределениеРезультатовНачислений = Результаты[2].Выгрузить();
	РеквизитыДляПроведения.ДополнительныеОтпуска = Результаты[3].Выгрузить();
	РеквизитыДляПроведения.Начисления = Результаты[4].Выгрузить();
	РеквизитыДляПроведения.ПериодыПриостановкиОтпуска = Результаты[5].Выгрузить();

	СотрудникиДаты = Результаты[0].Выгрузить();
	СотрудникиДаты.Колонки.ДатаНачалаСобытия.Имя = "ДатаСобытия";
	РеквизитыДляПроведения.СотрудникиДаты = СотрудникиДаты;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура() Экспорт 
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура(
		"Ссылка,
		|ДокументРассчитан,
		|Организация,
		|ПериодРегистрации,
		|ПорядокВыплаты,
		|Дата,
		|ПланируемаяДатаВыплаты,
		|ДатаНачалаСобытия,
		|ПериодРасчетаСреднегоЗаработкаНачало,
		|ПериодРасчетаСреднегоЗаработкаОкончание,
		|ФизическоеЛицо,
		|ПредоставитьОтгул,
		|ОсвобождатьСтавку,
		|Сотрудник,
		|ДатаНачалаПериодаОтсутствия,
		|ДатаОкончанияПериодаОтсутствия,
		|ИсправленныйДокумент,
		|ВидВремени,
		|Номер,
		|ПредоставитьОсновнойОтпуск,
		|ДатаНачалаОсновногоОтпуска,
		|ДатаОкончанияОсновногоОтпуска,
		|ПредоставитьДополнительныйОтпуск, 
		|РасходДнейОтгула,
		|РасходЧасовОтгула,
		|КоличествоДнейОтгула,
		|ВидРасчетаОтгул,
		|ДополнительныеОтпуска,
		|Начисления,
		|РаспределениеПоТерриториямУсловиямТруда, 
		|ДокументЗаполнения,
		|НомерДокументаЗаполнения,
		|ДатаДокументаЗаполнения,
		|ДоходПолученНаТерриторииРФ,
		|РаспределениеРезультатовНачислений,
		|СотрудникиДаты,
		|РассчитатьЗарплату,
		|ПериодыПриостановкиОтпуска");
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

// Проверяет, что сотрудник, указанный в документе работает в период отсутствия.
//
// Параметры:
//		ДокументОбъект	- ДокументОбъект.Отпуск
//		Отказ			- Булево
//
Процедура ПроверитьРаботающих(ДокументОбъект, Отказ) Экспорт
	
	Если НЕ (ДокументОбъект.ПредоставитьОсновнойОтпуск 
		Или ДокументОбъект.ПредоставитьКомпенсациюОсновногоОтпуска
		Или ДокументОбъект.ПредоставитьДополнительныйОтпуск) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПроверяемогоПериода 			= '00010101';
	ОкончаниеПроверяемогоПериода 		= '00010101';
	
	Если ДокументОбъект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда	
		НачалоПроверяемогоПериода 		= ДокументОбъект.ПериодРегистрации;
		ОкончаниеПроверяемогоПериода  	= КонецМесяца(ДокументОбъект.ПериодРегистрации);
	КонецЕсли;
	
	Если ДокументОбъект.ПредоставитьОсновнойОтпуск Тогда
		
		Если НЕ ЗначениеЗаполнено(НачалоПроверяемогоПериода) Тогда
			НачалоПроверяемогоПериода = ДокументОбъект.ДатаНачалаОсновногоОтпуска;
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ДатаНачалаОсновногоОтпуска) Тогда
			НачалоПроверяемогоПериода = Мин(НачалоПроверяемогоПериода, ДокументОбъект.ДатаНачалаОсновногоОтпуска);
		КонецЕсли;
		
		ОкончаниеПроверяемогоПериода = Макс(ОкончаниеПроверяемогоПериода, ДокументОбъект.ДатаОкончанияОсновногоОтпуска);
	КонецЕсли;
	
	Если ДокументОбъект.ПредоставитьДополнительныйОтпуск Тогда
		Для каждого ДополнительныйОтпуск Из ДокументОбъект.ДополнительныеОтпуска Цикл
			
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) Тогда
				
				Если НЕ ЗначениеЗаполнено(НачалоПроверяемогоПериода) Тогда
					НачалоПроверяемогоПериода = ДополнительныйОтпуск.ДатаНачала;
				Иначе
					НачалоПроверяемогоПериода = Мин(НачалоПроверяемогоПериода, ДополнительныйОтпуск.ДатаНачала);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) Тогда
				ОкончаниеПроверяемогоПериода = Макс(ОкончаниеПроверяемогоПериода, ДополнительныйОтпуск.ДатаОкончания);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= ДокументОбъект.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= НачалоПроверяемогоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ОкончаниеПроверяемогоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Сотрудник),
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект")
	);
	
КонецПроцедуры

Функция ДанныеСостоянийСотрудника(РеквизитыДляПроведения) Экспорт 
	
	ДанныеСостояний = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	
	Если РеквизитыДляПроведения.ПредоставитьОсновнойОтпуск Тогда
		ПериодыНачислений = Новый Массив;
		ПериодОтпуска = Новый Структура;
		ПериодОтпуска.Вставить("ДатаНачалаПериода", РеквизитыДляПроведения.ДатаНачалаОсновногоОтпуска);
		ПериодОтпуска.Вставить("ДатаОкончанияПериода", РеквизитыДляПроведения.ДатаОкончанияОсновногоОтпуска);
		ПериодыНачислений.Добавить(ПериодОтпуска);
		Если РеквизитыДляПроведения.ПериодыПриостановкиОтпуска.Количество()> 0 Тогда
			ПериодыНачислений = ИсключитьИнтервалыИзПериодов(ПериодОтпуска, РеквизитыДляПроведения.ПериодыПриостановкиОтпуска);
		КонецЕсли;
		Для Каждого ПериодНачисления Из ПериодыНачислений Цикл
			НоваяСтрока = ДанныеСостояний.Добавить();
			НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
			НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.ОтпускОсновной;
			НоваяСтрока.Начало = ПериодНачисления.ДатаНачалаПериода;
			НоваяСтрока.Окончание = ПериодНачисления.ДатаОкончанияПериода;
			НоваяСтрока.ВидВремени = РеквизитыДляПроведения.ВидВремени;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ПредоставитьДополнительныйОтпуск Тогда
		Для Каждого СтрокаТаблицы Из РеквизитыДляПроведения.ДополнительныеОтпуска Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачала) 
				И Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда
				// Если не заполнен период, то это - компенсация.
				Продолжить;
			КонецЕсли;
			ПериодыНачисленияДопОтпусков = Новый Массив;
			ПериодДопОтпуска = Новый Структура;
			ПериодДопОтпуска.Вставить("ДатаНачалаПериода", СтрокаТаблицы.ДатаНачала);
			ПериодДопОтпуска.Вставить("ДатаОкончанияПериода", СтрокаТаблицы.ДатаОкончания);
			ПериодыНачисленияДопОтпусков.Добавить(ПериодДопОтпуска);
			Если РеквизитыДляПроведения.ПериодыПриостановкиОтпуска.Количество() > 0 Тогда
				ПериодыНачисленияДопОтпусков = ИсключитьИнтервалыИзПериодов(ПериодДопОтпуска, РеквизитыДляПроведения.ПериодыПриостановкиОтпуска);
			КонецЕсли;
			Для Каждого ПериодНачисления Из ПериодыНачисленияДопОтпусков Цикл
				НоваяСтрока = ДанныеСостояний.Добавить();
				НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
				НоваяСтрока.Состояние = СостоянияСотрудников.СостояниеПоВидуОтпуска(СтрокаТаблицы.ВидОтпуска);
				НоваяСтрока.Начало = ПериодНачисления.ДатаНачалаПериода;
				НоваяСтрока.Окончание = ПериодНачисления.ДатаОкончанияПериода;
				НоваяСтрока.ВидВремени = СтрокаТаблицы.ВидВремени;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ПредоставитьОтгул Тогда
		НоваяСтрока = ДанныеСостояний.Добавить();
		НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		НоваяСтрока.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ДополнительныеВыходныеДниНеОплачиваемые");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПериодОтгула(РеквизитыДляПроведения));
	КонецЕсли;
	
	Возврат ДанныеСостояний;
	
КонецФункции

Функция ДанныеОбОтгулах(РеквизитыДляПроведения)

	ТаблицаОтгулов = Новый Структура("Организация, Сотрудник, Период, ВидДвижения, Дни, Часы");
	ТаблицаОтгулов.Период = ДатаНачалаОтгула(РеквизитыДляПроведения);
	ТаблицаОтгулов.ВидДвижения = ВидДвиженияНакопления.Расход;
	ТаблицаОтгулов.Организация = РеквизитыДляПроведения.Организация;
	ТаблицаОтгулов.Сотрудник = РеквизитыДляПроведения.Сотрудник;
	ТаблицаОтгулов.Дни = РеквизитыДляПроведения.РасходДнейОтгула; 
	ТаблицаОтгулов.Часы = РеквизитыДляПроведения.РасходЧасовОтгула;

	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаОтгулов);
	
КонецФункции

Функция ПериодОтгула(РеквизитыДляПроведения)
	
	Начало = ?(РеквизитыДляПроведения.ПредоставитьОсновнойОтпуск, КонецДня(РеквизитыДляПроведения.ДатаОкончанияОсновногоОтпуска)+1, '00010101');
	Если РеквизитыДляПроведения.ПредоставитьДополнительныйОтпуск Тогда
		Для Каждого СтрокаТаблицы Из РеквизитыДляПроведения.ДополнительныеОтпуска Цикл
			Начало = Макс(Начало , КонецДня(СтрокаТаблицы.ДатаОкончания)+1);
		КонецЦикла;
	КонецЕсли;
	Окончание = УчетРабочегоВремениРасширенный.ДатаОкончанияПоГрафикуРаботыСотрудника(РеквизитыДляПроведения.Сотрудник, Начало, РеквизитыДляПроведения.КоличествоДнейОтгула);
	
	Возврат Новый Структура("Начало, Окончание", Начало, Окончание);
	
КонецФункции

Функция ДатаНачалаОтгула(РеквизитыДляПроведения)

	ОтгулыНачисления = РеквизитыДляПроведения.Начисления.НайтиСтроки(Новый Структура("Начисление", РеквизитыДляПроведения.ВидРасчетаОтгул));
	Если ОтгулыНачисления.Количество() > 0 Тогда
		Возврат ОтгулыНачисления[0].ДатаНачала;
	Иначе	
		Возврат РеквизитыДляПроведения.Дата;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьПериодыОтпусков(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Отпуск.Сотрудник КАК Сотрудник,
	               |	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
	               |	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания,
	               |	&ОсновнойОтпуск КАК ВидОтпуска,
	               |	Отпуск.КоличествоДнейОсновногоОтпуска КАК КоличествоДней,
	               |	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийПериодС,
	               |	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийПериодПо,
	               |	ЛОЖЬ КАК Компенсация,
	               |	Отпуск.ДатаНачалаОсновногоОтпуска КАК ПериодЗаписи,
	               |	Отпуск.Основание КАК Основание
	               |ИЗ
	               |	Документ.Отпуск КАК Отпуск
	               |ГДЕ
	               |	Отпуск.Ссылка = &Ссылка
	               |	И Отпуск.ПредоставитьОсновнойОтпуск
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДополнительныеОтпуска.Ссылка.Сотрудник,
	               |	ДополнительныеОтпуска.ДатаНачала,
	               |	ДополнительныеОтпуска.ДатаОкончания,
	               |	ДополнительныеОтпуска.ВидОтпуска,
	               |	ДополнительныеОтпуска.КоличествоДней,
	               |	ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	               |	ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	               |	ЛОЖЬ,
	               |	ДополнительныеОтпуска.ДатаНачала,
	               |	ДополнительныеОтпуска.Основание
	               |ИЗ
	               |	Документ.Отпуск.ДополнительныеОтпуска КАК ДополнительныеОтпуска
	               |ГДЕ
	               |	ДополнительныеОтпуска.Ссылка = &Ссылка
	               |	И ДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск
	               |	И ДополнительныеОтпуска.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Отпуск.Сотрудник,
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	&ОсновнойОтпуск,
	               |	Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска,
	               |	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	               |	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	               |	ИСТИНА,
	               |	Отпуск.Дата,
	               |	Отпуск.Основание
	               |ИЗ
	               |	Документ.Отпуск КАК Отпуск
	               |ГДЕ
	               |	Отпуск.Ссылка = &Ссылка
	               |	И Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска
	               |	И Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска > 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДополнительныеОтпуска.Ссылка.Сотрудник,
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ДополнительныеОтпуска.ВидОтпуска,
	               |	СУММА(ДополнительныеОтпуска.КоличествоДнейКомпенсации),
	               |	МИНИМУМ(ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск),
	               |	МАКСИМУМ(ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск),
	               |	ИСТИНА,
	               |	ДополнительныеОтпуска.Ссылка.Дата,
	               |	МАКСИМУМ(ВЫРАЗИТЬ(ДополнительныеОтпуска.Основание КАК СТРОКА(1024)))
	               |ИЗ
	               |	Документ.Отпуск.ДополнительныеОтпуска КАК ДополнительныеОтпуска
	               |ГДЕ
	               |	ДополнительныеОтпуска.Ссылка = &Ссылка
	               |	И ДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск
	               |	И ДополнительныеОтпуска.КоличествоДнейКомпенсации > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДополнительныеОтпуска.Ссылка.Сотрудник,
	               |	ДополнительныеОтпуска.ВидОтпуска,
	               |	ДополнительныеОтпуска.Ссылка.Дата";
	
	ПериодыОтпусков = ОстаткиОтпусков.ПустаяТаблицаПериодовОтпусков();
	
	ИсходныйДокумент = РеквизитыДляПроведения.Ссылка;
	ИсходныйДокументДата = РеквизитыДляПроведения.Дата;
	ИсходныйДокументНомер = РеквизитыДляПроведения.Номер;
	ДокументЗаполнения = РеквизитыДляПроведения.ДокументЗаполнения;
	
	Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда 
		ИсходныйДокумент = ИсправлениеДокументовЗарплатаКадры.ПервыйДокументЦепочкиИсправлений(РеквизитыДляПроведения.ИсправленныйДокумент);
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, "Дата, Номер, ДокументЗаполнения"); 
	    ИсходныйДокументДата = ЗначенияРеквизитов["Дата"];
	    ИсходныйДокументНомер = ЗначенияРеквизитов["Номер"];
	    ДокументЗаполнения = ЗначенияРеквизитов["ДокументЗаполнения"];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументЗаполнения) Тогда
		ИсходныйДокумент = ДокументЗаполнения;
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, "Дата, Номер"); 
	    ИсходныйДокументДата = ЗначенияРеквизитов["Дата"];
	    ИсходныйДокументНомер = ЗначенияРеквизитов["Номер"];
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ПериодыОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Состояние = СостоянияСотрудников.СостояниеПоВидуОтпуска(Выборка.ВидОтпуска);
		НоваяСтрока.ИсходныйДокумент = ИсходныйДокумент;
		НоваяСтрока.ИсходныйДокументДата = ИсходныйДокументДата;
		НоваяСтрока.ИсходныйДокументНомер = ИсходныйДокументНомер;
	КонецЦикла;
	
	ДанныеДляПроведения.Вставить("ПериодыОтпусков", ПериодыОтпусков);	
	
КонецПроцедуры

Процедура ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ)
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ИменаРеквизитов = 
	"ПериодРегистрации,
	|Организация,
	|ИсправленныйДокумент,
	|ВидРасчетаОсновногоОтпуска";
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИменаРеквизитов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.*
	               |ИЗ
	               |	Документ.Отпуск.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Ссылка = &Ссылка";
				   
	Начисления = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
	ПараметрыПроверки.Организация = РеквизитыДокумента.Организация;
	ПараметрыПроверки.ПериодРегистрации = РеквизитыДокумента.ПериодРегистрации;
	ПараметрыПроверки.Документ = ДокументСсылка;
	ПараметрыПроверки.Начисления = Начисления;
	ПараметрыПроверки.ИсправленныйДокумент = РеквизитыДокумента.ИсправленныйДокумент;
	ПараметрыПроверки.ОсновныеНачисления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДокумента.ВидРасчетаОсновногоОтпуска);
	
	РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
	
КонецПроцедуры

Функция ИсключитьИнтервалыИзПериодов(ИсходныйПериод, Интервалы) Экспорт
	
	ТекущийПериод = ИсходныйПериод;
	РезультирующиеПериоды = Новый Массив;
	
	Интервалы.Сортировать("ДатаНачалаПериода");
	
		Для Каждого Интервал Из Интервалы Цикл
			ПериодПересечения = ОбщегоНазначенияБЗК.ПериодПересеченияДвухИнтервалов(ТекущийПериод.ДатаНачалаПериода, 
				ТекущийПериод.ДатаОкончанияПериода,
				Интервал.ДатаНачалаПериода,
				Интервал.ДатаОкончанияПериода);
			Если ПериодПересечения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТекущийПериод.ДатаНачалаПериода > ПериодПересечения.ДатаНачала
				И ТекущийПериод.ДатаОкончанияПериода < ПериодПересечения.ДатаОкончания Тогда
				ТекущийПериод = Неопределено;
				Прервать;
			КонецЕсли;
			Если ТекущийПериод.ДатаНачалаПериода <> ПериодПересечения.ДатаНачала Тогда
				НовыйПериод = Новый Структура;
				НовыйПериод.Вставить("ДатаНачалаПериода", ТекущийПериод.ДатаНачалаПериода);
				НовыйПериод.Вставить("ДатаОкончанияПериода", НачалоДня(ПериодПересечения.ДатаНачала) - 1);
				РезультирующиеПериоды.Добавить(НовыйПериод);
			КонецЕсли;
			Если ПериодПересечения.ДатаОкончания <> ТекущийПериод.ДатаОкончанияПериода Тогда
				ТекущийПериод.ДатаНачалаПериода = КонецДня(ПериодПересечения.ДатаОкончания) + 1;
			Иначе
				ТекущийПериод = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийПериод <> Неопределено Тогда 
			РезультирующиеПериоды.Добавить(ТекущийПериод);
		КонецЕсли;
			
	Возврат РезультирующиеПериоды;
	
КонецФункции

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок, ПоСтатьямФинансирования = Ложь, ИмяМакета = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отпуск.Сотрудник КАК Сотрудник,
	|	Отпуск.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Отпуск.Ссылка КАК Ссылка,
	|	Отпуск.Организация КАК Организация,
	|	ЕСТЬNULL(ОтпускаСотрудников.Дата, Отпуск.Дата) КАК ДатаДокумента,
	|	ЕСТЬNULL(ОтпускаСотрудников.Номер, Отпуск.Номер) КАК НомерДокумента,
	|	Отпуск.ДатаНачалаПериодаОтсутствия КАК ДатаНачалаОтсутствия,
	|	Отпуск.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончанияОтсутствия,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоРасчетногоПериода,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание КАК ОкончаниеРасчетногоПериода,
	|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	Организации.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Организации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Отпуск.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И Отпуск.ДатаНачалаСобытия = КадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Отпуск.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
	|		ПО Отпуск.ДокументЗаполнения = ОтпускаСотрудников.Ссылка
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивСсылок)";
	
	Результат = Запрос.Выполнить();
	
	ДанныеДокументов = Новый Массив;
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеДокументов;
	КонецЕсли;
		
	ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке("Отпуск", МассивСсылок);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
		
		ДанныеОНачислениях 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОНачислениях"], 		"Ссылка", Выборка.Ссылка);
		ДанныеОВремени 		= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОВремени"], 			"Ссылка", Выборка.Ссылка);
		ДанныеОбИндексации 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОбИндексации"], 		"Ссылка", Выборка.Ссылка);
		
		МассивОтпусков = ВидыОтпусковОбъекта(Выборка.Ссылка.ПолучитьОбъект());
		Если ОстаткиОтпусков.СодержатсяТолькоОтпускаПоРабочимДням(МассивОтпусков, Выборка.Сотрудник, Выборка.ДатаНачалаСобытия) Тогда
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке;
		Иначе
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням;
		КонецЕсли;
		
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
		ДополнительныеПараметры.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
		ДополнительныеПараметры.НачалоПериода = Выборка.НачалоРасчетногоПериода;
		ДополнительныеПараметры.ОкончаниеПериода = Выборка.ОкончаниеРасчетногоПериода;
		ДополнительныеПараметры.ПоСтатьямФинансирования = ПоСтатьямФинансирования;
		ДополнительныеПараметры.СпособРасчетаОтпуска = СпособРасчета;

		ДанныеДокумента.ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
		
		ДанныеДокумента.ПараметрыРасчета.СпособРасчета = СпособРасчета;
		ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок = Ложь;
		ДанныеДокумента.ПараметрыРасчета.НачалоРасчетногоПериода = Выборка.НачалоРасчетногоПериода;
		ДанныеДокумента.ПараметрыРасчета.ОкончаниеРасчетногоПериода = Выборка.ОкончаниеРасчетногоПериода;
		
		ДанныеДокументов.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отпуск.Сотрудник КАК Сотрудник,
	|	Отпуск.ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости");
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудники";
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка0504425(МассивСсылок) Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос;
	ЗапросПоОрганизациям.УстановитьПараметр("МассивСсылок", МассивСсылок);
	ЗапросПоОрганизациям.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отпуск.Организация КАК Организация,
	|	Отпуск.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивСсылок)";
	
	ТаблицаРезультатовПоОрганизациям = ЗапросПоОрганизациям.Выполнить().Выгрузить();
	
	ОрганизацииИСведенияОНих = ЗарплатаКадрыРасширенный.ПолучитьИННиКППОрганизаций(ТаблицаРезультатовПоОрганизациям);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Отпуск.Ссылка КАК Ссылка,
	|	Отпуск.ДатаНачалаПериодаОтсутствия КАК Дата,
	|	Отпуск.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	Отпуск.Бухгалтер КАК Бухгалтер,
	|	Отпуск.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТСотрудникиИПериод
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "ГлавныйБухгалтер,Бухгалтер,Исполнитель", "ВТСотрудникиИПериод");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ДополнительныеОтпуска.КоличествоДней) КАК КоличествоДней,
	|	ДополнительныеОтпуска.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДополнительныеОтпуска
	|ИЗ
	|	Документ.Отпуск.ДополнительныеОтпуска КАК ДополнительныеОтпуска
	|ГДЕ
	|	ДополнительныеОтпуска.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДополнительныеОтпуска.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуск.Ссылка КАК Ссылка,
	|	Отпуск.ВидРасчетаОсновногоОтпуска КАК Начисление,
	|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.ДатаНачалаПериодаОтсутствия КАК ДатаНачалаОтсутствия,
	|	Отпуск.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончанияОтсутствия,
	|	Отпуск.КоличествоДнейОсновногоОтпуска КАК ДнейОсновногоОтпуска,
	|	ЕСТЬNULL(ВТДополнительныеОтпуска.КоличествоДней, 0) КАК ДнейДополнительногоОтпуска,
	|	Отпуск.КоличествоДнейОсновногоОтпуска + ЕСТЬNULL(ВТДополнительныеОтпуска.КоличествоДней, 0) КАК ДнейОтпускаВсего,
	|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК ГлавныйБухгалтерРасшифровкаПодписи,
	|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
	|	ФИОИсполнителя.РасшифровкаПодписи КАК ИсполнительРасшифровкаПодписи,
	|	Отпуск.ДолжностьИсполнителя КАК ДолжностьИсполнителя,
	|	Отпуск.Основание КАК Основание,
	|	Отпуск.РассчитатьЗарплату КАК РассчитатьЗарплату,
	|	ВЫБОР
	|		КОГДА Отпуск.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)
	|			ТОГДА Отпуск.ИсправленныйДокумент.ПериодРегистрации
	|		ИНАЧЕ Отпуск.ПериодРегистрации
	|	КОНЕЦ КАК НачалоПериодаРасчетаЗарплаты
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО Отпуск.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И Отпуск.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО Отпуск.Ссылка = ФИОБухгалтера.Ссылка
	|			И Отпуск.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОИсполнителя
	|		ПО Отпуск.Ссылка = ФИОИсполнителя.Ссылка
	|			И Отпуск.Исполнитель = ФИОИсполнителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеОтпуска КАК ВТДополнительныеОтпуска
	|		ПО Отпуск.Ссылка = ВТДополнительныеОтпуска.Ссылка
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуск.Ссылка КАК Ссылка,
	|	1 КАК Приоритет,
	|	ВЫБОР
	|		КОГДА Отпуск.ПредоставитьОсновнойОтпуск = ИСТИНА
	|			ТОГДА &ОсновнойОтпуск
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВидОтпуска,
	|	ВидыОтпусков.Наименование КАК ВидОтпускаНаименование
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	|		ПО (ВидыОтпусков.Ссылка = &ОсновнойОтпуск)
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивСсылок)
	|	И НЕ ВЫБОР
	|				КОГДА Отпуск.ПредоставитьОсновнойОтпуск = ИСТИНА
	|					ТОГДА &ОсновнойОтпуск
	|				ИНАЧЕ NULL
	|			КОНЕЦ ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускДополнительныеОтпуска.Ссылка,
	|	2,
	|	ОтпускДополнительныеОтпуска.ВидОтпуска,
	|	ОтпускДополнительныеОтпуска.ВидОтпуска.Наименование
	|ИЗ
	|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	|ГДЕ
	|	ОтпускДополнительныеОтпуска.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ОсновнойОтпуск = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ?(ОсновнойОтпуск = Неопределено, Null, ОсновнойОтпуск));
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаВидыОтпусков = Результаты[Результаты.Количество() - 1].Выбрать();
	Выборка = Результаты[Результаты.Количество() - 2].Выбрать();
	
	ДанныеДокументов = Новый Массив;
	
	БазовыеДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок, Истина);
	
	Отбор = Новый Структура("Ссылка");
	
	Для каждого БазовыеДанныеДокумента Из БазовыеДанныеДокументов Цикл
		
		Выборка.Сбросить();
		НаименованиеСобытия = "";
		
		ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка0504425(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, БазовыеДанныеДокумента, , "РеквизитыДокумента");   
		
		// Т.к. структура реквизитов документа в базовых и расширенных данных различается их надо обработать отдельно.
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, БазовыеДанныеДокумента.РеквизитыДокумента);
		Отбор.Ссылка = БазовыеДанныеДокумента.РеквизитыДокумента.Ссылка;
		Если Выборка.НайтиСледующий(Отбор) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка); 
			Пока ВыборкаВидыОтпусков.НайтиСледующий(Отбор) Цикл
				НаименованиеСобытия = НаименованиеСобытия + ?(ЗначениеЗаполнено(НаименованиеСобытия), ", ", "") + ВыборкаВидыОтпусков.ВидОтпускаНаименование;
			КонецЦикла;
			ДанныеДокумента.РеквизитыДокумента.НаименованиеСобытия = НаименованиеСобытия;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, 
			ОрганизацииИСведенияОНих.Получить(БазовыеДанныеДокумента.РеквизитыДокумента.Организация),
			"ИНН, КПП"); 
		
		ДанныеДокументов.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

#КонецОбласти

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Истина);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru = 'Отпуск'"));
КонецПроцедуры 

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов);	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт 
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);	
КонецФункции

#КонецОбласти

#Область ПечатьСправкиДляОплатыОтпускаЧАЭС

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о доплате за дни нетрудоспособности.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументСправкиДляОплатыОтпускаЧАЭС(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаДляОплатыОтпускаЧАЭС";
	
	ДанныеДляПечатиСправкиДляОплатыОтпускаЧАЭС = ДанныеДляПечатиСправкиДляОплатыОтпускаЧАЭС(МассивОбъектов);

	ВывестиДанныеСправкиДляОплатыОтпускаЧАЭСВТабличныйДокумент(Макет, ДокументРезультат, ДанныеДляПечатиСправкиДляОплатыОтпускаЧАЭС, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДляПечатиСправкиДляОплатыОтпускаЧАЭС(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	Отпуска.Ссылка,
	|	Отпуска.ДатаНачалаПериодаОтсутствия КАК Дата,
	|	Отпуска.Руководитель КАК Руководитель,
	|	Отпуска.ГлавныйБухгалтер КАК ГлавныйБухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.Отпуск КАК Отпуска
	|ГДЕ
	|	Отпуска.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("ГлавныйБухгалтер");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокументов");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отпуска.Ссылка,
	|	Отпуска.Сотрудник,
	|	Отпуска.ФизическоеЛицо,
	|	Отпуска.Номер КАК НомерДокумента,
	|	Отпуска.Дата КАК ДатаДокумента,
	|	Отпуска.РасчетДенежногоСодержания КАК РасчетДенежногоСодержания,
	|	Отпуска.СохраняемоеДенежноеСодержание КАК СохраняемоеДенежноеСодержание,
	|	ВЫБОР
	|		КОГДА ОрганизацияСправочник.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОрганизацияСправочник.Наименование
	|		ИНАЧЕ ОрганизацияСправочник.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК ГлавныйБухгалтерРасшифровкаПодписи,
	|	Отпуска.ДолжностьРуководителя,
	|	Отпуска.ПериодРасчетаСреднегоЗаработкаНачало КАК РасчетныйПериодС,
	|	Отпуска.ПериодРасчетаСреднегоЗаработкаОкончание КАК РасчетныйПериодПо,
	|	ОтпускДополнительныеОтпуска.ДатаНачала,
	|	ОтпускДополнительныеОтпуска.ДатаОкончания,
	|	ОтпускДополнительныеОтпуска.КоличествоДней КАК ДнейОтпуска,
	|	ОтпускДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуска
	|		ПО ВТДанныеДокументов.Ссылка = Отпуска.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО (Отпуска.ДатаНачалаПериодаОтсутствия = ФИОРуководителя.Дата)
	|			И (Отпуска.Ссылка = ФИОРуководителя.Ссылка)
	|			И (Отпуска.Руководитель = ФИОРуководителя.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО (Отпуска.ДатаНачалаПериодаОтсутствия = ФИОГлавногоБухгалтера.Дата)
	|			И (Отпуска.Ссылка = ФИОГлавногоБухгалтера.Ссылка)
	|			И (Отпуска.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияСправочник
	|		ПО (Отпуска.Организация = ОрганизацияСправочник.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	|		ПО ВТДанныеДокументов.Ссылка = ОтпускДополнительныеОтпуска.Ссылка
	|			И (ОтпускДополнительныеОтпуска.ВидОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС))";
	
	Результат = Запрос.Выполнить();              
	
	СписокСотрудников = Результат.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, "ФИО,ДокументПредставление,Пол");
	
	ДанныеРасчетаСреднегоЗаработкаДокументов = Документы.Отпуск.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок);

	Возврат Новый Структура("ДанныеСправок, КадровыеДанныеСотрудников, ДанныеРасчетаСреднегоЗаработкаДокументов", Результат.Выбрать(), КадровыеДанныеСотрудников, ДанныеРасчетаСреднегоЗаработкаДокументов);
	
КонецФункции 

Процедура ВывестиДанныеСправкиДляОплатыОтпускаЧАЭСВТабличныйДокумент(Макет, ДокументРезультат, ДанныеДляПечатиСправок, ОбъектыПечати)
	
	ДанныеСправок				= ДанныеДляПечатиСправок.ДанныеСправок;
	КадровыеДанныеСотрудников 	= ДанныеДляПечатиСправок.КадровыеДанныеСотрудников;
	ДанныеРасчетаСреднегоЗаработкаДокументов = ДанныеДляПечатиСправок.ДанныеРасчетаСреднегоЗаработкаДокументов;
	ПервыйДокумент = Истина;
	
	Если ДанныеСправок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Документом не регистрируется дополнительных отпусков гражданам, подвергшимся воздействию радиации вследствие катастрофы на ЧАЭС.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	Пока ДанныеСправок.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало 		= ДокументРезультат.ВысотаТаблицы + 1;
		
		СекцияСправка			= Макет.ПолучитьОбласть("Справка");
		
		ЗаполняемыеСвойства = "НаименованиеОрганизации,НомерДокумента,ДатаДокумента,ДнейОтпуска,РуководительРасшифровкаПодписи,ДолжностьРуководителя,ГлавныйБухгалтерРасшифровкаПодписи";
		ЗаполнитьЗначенияСвойств(СекцияСправка.Параметры, ДанныеСправок, ЗаполняемыеСвойства);
		
		СекцияСправка.Параметры.НаименованиеОрганизации = СокрЛП(СекцияСправка.Параметры.НаименованиеОрганизации);
		
		ФорматнаяСтрокаДаты = "ДЛФ=DD";
		
		ПредставлениеДатыНачалаОтпуска  							= Формат(ДанныеСправок.ДатаНачала, ФорматнаяСтрокаДаты);
		ПредставлениеДатыОкончанияОтпуска  							= Формат(ДанныеСправок.ДатаОкончания, ФорматнаяСтрокаДаты);
		СекцияСправка.Параметры.ДатаНачалаЧисло 					= СокрЛП(Лев(ПредставлениеДатыНачалаОтпуска,2));
		СекцияСправка.Параметры.ДатаНачалаМесяцГод 					= СокрЛП(Прав(ПредставлениеДатыНачалаОтпуска, СтрДлина(ПредставлениеДатыНачалаОтпуска)-2));
		СекцияСправка.Параметры.ДатаОкончанияЧисло 					= СокрЛП(Лев(ПредставлениеДатыОкончанияОтпуска,2));
		СекцияСправка.Параметры.ДатаОкончанияМесяцГод 				= СокрЛП(Прав(ПредставлениеДатыОкончанияОтпуска, СтрДлина(ПредставлениеДатыОкончанияОтпуска)-2));
		
		ПредставлениеДатыНачалаРасчетногоПериода 						= Формат(ДанныеСправок.РасчетныйПериодС, ФорматнаяСтрокаДаты);
		ПредставлениеДатыОкончанияРасчетногоПериода  					= Формат(ДанныеСправок.РасчетныйПериодПо, ФорматнаяСтрокаДаты);
		СекцияСправка.Параметры.ДатаНачалаРасчетногоПериодаЧисло 		= СокрЛП(Лев(ПредставлениеДатыНачалаРасчетногоПериода,2));
		СекцияСправка.Параметры.ДатаНачалаРасчетногоПериодаМесяцГод 	= СокрЛП(Прав(ПредставлениеДатыНачалаРасчетногоПериода, СтрДлина(ПредставлениеДатыНачалаРасчетногоПериода)-2));
		СекцияСправка.Параметры.ДатаОкончанияРасчетногоПериодаЧисло 	= СокрЛП(Лев(ПредставлениеДатыОкончанияРасчетногоПериода,2));
		СекцияСправка.Параметры.ДатаОкончанияРасчетногоПериодаМесяцГод 	= СокрЛП(Прав(ПредставлениеДатыОкончанияРасчетногоПериода, СтрДлина(ПредставлениеДатыОкончанияРасчетногоПериода)-2));
		
		ПредставлениеДатыНачалаПериодаРаботы  						= Формат(ДанныеСправок.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, ФорматнаяСтрокаДаты);
		ПредставлениеДатыОкончанияПериодаРаботы  					= Формат(ДанныеСправок.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, ФорматнаяСтрокаДаты);
		СекцияСправка.Параметры.ДатаНачалаПериодаРаботыЧисло 		= СокрЛП(Лев(ПредставлениеДатыНачалаПериодаРаботы,2));
		СекцияСправка.Параметры.ДатаНачалаПериодаРаботыМесяцГод 	= СокрЛП(Прав(ПредставлениеДатыНачалаПериодаРаботы, СтрДлина(ПредставлениеДатыНачалаПериодаРаботы)-2));
		СекцияСправка.Параметры.ДатаОкончанияПериодаРаботыЧисло 	= СокрЛП(Лев(ПредставлениеДатыОкончанияПериодаРаботы,2));
		СекцияСправка.Параметры.ДатаОкончанияПериодаРаботыМесяцГод 	= СокрЛП(Прав(ПредставлениеДатыОкончанияПериодаРаботы, СтрДлина(ПредставлениеДатыОкончанияПериодаРаботы)-2));
		
		
		Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработкаДокументов Цикл
			Если ДанныеСправок.Ссылка = Элемент.РеквизитыДокумента.Ссылка Тогда
				ДанныеРасчетаСреднегоЗаработка 	= Элемент.ДанныеРасчетаСреднего;
				ПараметрыРасчетаСреднего 		= Элемент.ПараметрыРасчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Заработок 			= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["Заработок"], "Учтено");		
		ОтработаноДней 		= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["ОтработанноеВремя"], "Учтено");
		СреднийЗаработок 	= УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(Заработок, ОтработаноДней);
		
		Если ДанныеСправок.РасчетДенежногоСодержания Тогда
			НормаДней = 0;
			Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
				Модуль = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("РасчетДенежногоСодержания");
				НормаДней = Модуль.КоличествоДнейВМесяцеДляОплатыОтпусков(ДанныеСправок.ДатаНачала);	
			КонецЕсли;
			
			Заработок 		 = ДанныеСправок.СохраняемоеДенежноеСодержание;		
			СреднийЗаработок = 0;
			Если НормаДней <> 0 Тогда 
				СреднийЗаработок = Заработок / НормаДней;	
			КонецЕсли;
		КонецЕсли;
		
		СекцияСправка.Параметры.ОтработаноДней 		= ОтработаноДней;
		СекцияСправка.Параметры.ЗаработокРуб 		= Формат(Цел(Заработок),"ЧДЦ=0; ЧН=-");
		СекцияСправка.Параметры.ЗаработокКоп 		= Формат((Заработок - Цел(Заработок)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-");
		СекцияСправка.Параметры.ДневнойЗаработокРуб = Формат(Цел(СреднийЗаработок),"ЧДЦ=0; ЧН=-");
		СекцияСправка.Параметры.ДневнойЗаработокКоп = Формат((СреднийЗаработок - Цел(СреднийЗаработок)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-");
		
		КВыплате = СреднийЗаработок * ДанныеСправок.ДнейОтпуска;
		
		СекцияСправка.Параметры.КВыплатеРуб 		= Формат(Цел(КВыплате),"ЧДЦ=0; ЧН=-");
		СекцияСправка.Параметры.КВыплатеКоп 		= Формат((КВыплате - Цел(КВыплате)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-");
		СекцияСправка.Параметры.КВыплатеПрописью 	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(КВыплате, ВалютаУчета);
		
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ДанныеСправок.Сотрудник);
		ФамилияИО = КадровыеДанныеСотрудника.ФИО;
		ФизическиеЛицаЗарплатаКадры.Просклонять(ФамилияИО, 3, ФамилияИО, КадровыеДанныеСотрудника.Пол, КадровыеДанныеСотрудника.ФизическоеЛицо);
		СекцияСправка.Параметры.ФамилияИО = ФамилияИО;
		СекцияСправка.Параметры.ДокументПредставление = КадровыеДанныеСотрудника.ДокументПредставление;
		
		Если ДанныеСправок.РасчетДенежногоСодержания Тогда
			СекцияСправка.Область("ОбластьОтработаноДней").Текст = "";
		КонецЕсли;
		
		ДокументРезультат.Вывести(СекцияСправка);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, 
		НомерСтрокиНачало, ОбъектыПечати, ДанныеСправок.Ссылка);
		
	КонецЦикла;		
	
КонецПроцедуры

#КонецОбласти 

Функция ДатаКомпенсацииОтпуска(ПланируемаяДатаВыплаты, ПериодРегистрации) Экспорт 
	
	ДатаКомпенсации = ?(ПланируемаяДатаВыплаты < ПериодРегистрации, ПериодРегистрации,
		?(ПланируемаяДатаВыплаты > КонецМесяца(ПериодРегистрации), НачалоДня(КонецМесяца(ПериодРегистрации)), ПланируемаяДатаВыплаты));
		
	Возврат ДатаКомпенсации;	
		
КонецФункции	

Функция ПланируемаяДатыВыплатыОтпуска(ДатаНачалаСобытия, ГрафикРаботы) Экспорт
	
	ПланируемаяДатыВыплатыОтпуска = Неопределено;
	
	Если ЗначениеЗаполнено(ДатаНачалаСобытия) И ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Если ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.ГрафикиРаботыСотрудников") Тогда
			ДатаОтсчета = ДатаНачалаСобытия - (86400 * 3);
			ПланируемаяДатыВыплатыОтпуска = УчетРабочегоВремениРасширенный.ПредыдущийРабочийДеньПоГрафику(ГрафикРаботы, ДатаОтсчета);
		Иначе
			ДатаОтсчета = ДатаНачалаСобытия - (86400 * 4);
			ДатыРабочихДней = КалендарныеГрафики.ДатыБлижайшихРабочихДней(ГрафикРаботы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаОтсчета), Истина, Ложь);
			Если ДатыРабочихДней <> Неопределено Тогда
				ПланируемаяДатыВыплатыОтпуска = ДатыРабочихДней.Получить(ДатаОтсчета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПланируемаяДатыВыплатыОтпуска;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт 	
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отпуск.Сотрудник КАК Сотрудник,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияОсновногоОтпуска,
	|	Отпуск.ВидРасчетаОсновногоОтпуска.ВидСтажаПФР2014 КАК ВидСтажаОтпускОсновной,
	|	Отпуск.ПредоставитьДополнительныйОтпуск КАК ПредоставитьДополнительныйОтпуск,
	|	Отпуск.Ссылка КАК Ссылка,
	|	Отпуск.ПредоставитьОсновнойОтпуск КАК ПредоставитьОсновнойОтпуск
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаОсновногоОтпуска,
	|	ДанныеДокумента.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияОсновногоОтпуска,
	|	ДанныеДокумента.ВидСтажаОтпускОсновной КАК ВидСтажаОтпускОсновной,
	|	ДанныеДокумента.ПредоставитьДополнительныйОтпуск КАК ПредоставитьДополнительныйОтпуск,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПредоставитьОсновнойОтпуск КАК ПредоставитьОсновнойОтпуск,
	|	ОтпускДополнительныеОтпуска.ВидОтпуска КАК ВидОтпуска,
	|	ОтпускДополнительныеОтпуска.ВидРасчета.ВидСтажаПФР2014 КАК ВидСтажаДополнительныйОтпуск,
	|	ОтпускДополнительныеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ОтпускДополнительныеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	ОтпускДополнительныеОтпуска.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	|		ПО ДанныеДокумента.Ссылка = ОтпускДополнительныеОтпуска.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускПериодыПриостановкиОтпуска.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ОтпускПериодыПриостановкиОтпуска.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ОтпускПериодыПриостановкиОтпуска.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Отпуск.ПериодыПриостановкиОтпуска КАК ОтпускПериодыПриостановкиОтпуска
	|ГДЕ
	|	ОтпускПериодыПриостановкиОтпуска.Ссылка В(&МассивСсылок)";
	
	Результат =  Запрос.ВыполнитьПакет();
	Выборка = Результат[1].Выбрать();
	ПериодыПриостановкиОтпусков = Результат[2].Выгрузить();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		Отбор = Новый Структура("Ссылка", Выборка.Ссылка);
		ПериодыПриостановкиОтпуска = ПериодыПриостановкиОтпусков.Скопировать(Отбор);
		Если Выборка.ПредоставитьОсновнойОтпуск Тогда
			Если ЗначениеЗаполнено(Выборка.ВидСтажаОтпускОсновной) Тогда 
				ПериодыНачислений = Новый Массив;
				ПериодОтпуска = Новый Структура;
				ПериодОтпуска.Вставить("ДатаНачалаПериода", Выборка.ДатаНачалаОсновногоОтпуска);
				ПериодОтпуска.Вставить("ДатаОкончанияПериода", Выборка.ДатаОкончанияОсновногоОтпуска);
				ПериодыНачислений.Добавить(ПериодОтпуска);
				Если ПериодыПриостановкиОтпуска.Количество()> 0 Тогда
					ПериодыНачислений = ИсключитьИнтервалыИзПериодов(ПериодОтпуска, ПериодыПриостановкиОтпуска);
				КонецЕсли;
				Для Каждого ПериодНачислений Из ПериодыНачислений Цикл
					ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
					ОписаниеПериода.Сотрудник = Выборка.Сотрудник;	
					ОписаниеПериода.ДатаНачалаПериода = ПериодНачислений.ДатаНачалаПериода;
					ОписаниеПериода.ДатаОкончанияПериода = ПериодНачислений.ДатаОкончанияПериода;
					ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.ОтпускОсновной;
					РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
					УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", Выборка.ВидСтажаОтпускОсновной);							
				КонецЦикла;
			КонецЕсли;									
		КонецЕсли;
		
		Если Выборка.ПредоставитьДополнительныйОтпуск Тогда
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.ДатаНачала) 
					Или Не ЗначениеЗаполнено(Выборка.ДатаОкончания) 
					Или Не ЗначениеЗаполнено(Выборка.ВидРасчета) Тогда
					
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.ВидСтажаДополнительныйОтпуск) Тогда
					ПериодыНачисленияДопОтпусков = Новый Массив;
					ПериодДопОтпуска = Новый Структура;
					ПериодДопОтпуска.Вставить("ДатаНачалаПериода", Выборка.ДатаНачала);
					ПериодДопОтпуска.Вставить("ДатаОкончанияПериода", Выборка.ДатаОкончания);
					ПериодыНачисленияДопОтпусков.Добавить(ПериодДопОтпуска);
					Если ПериодыПриостановкиОтпуска.Количество()> 0 Тогда
						ПериодыНачисленияДопОтпусков = ИсключитьИнтервалыИзПериодов(ПериодДопОтпуска, ПериодыПриостановкиОтпуска);
					КонецЕсли;
					Для Каждого ПериодНачисленияДопОтпуска Из ПериодыНачисленияДопОтпусков Цикл
						ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
						ОписаниеПериода.Сотрудник = Выборка.Сотрудник;	
						ОписаниеПериода.ДатаНачалаПериода = ПериодНачисленияДопОтпуска.ДатаНачалаПериода;
						ОписаниеПериода.ДатаОкончанияПериода = ПериодНачисленияДопОтпуска.ДатаОкончанияПериода;
						ОписаниеПериода.Состояние = СостоянияСотрудников.СостояниеПоВидуОтпуска(Выборка.ВидОтпуска);
						РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
						УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", Выборка.ВидСтажаДополнительныйОтпуск);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеДляРегистрацииВУчете;
	
КонецФункции	

Функция РабочиеПериодыДляОтпусков(Объект)
	
	РабочиеПериодыДляОтпусков = Новый Соответствие;
	Если Объект.ПредоставитьОсновнойОтпуск Или Объект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		РабочиеПериодыДляОтпусков.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), 
		Новый Структура("РабочийПериодС, РабочийПериодПо", Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, Объект.КонецПериодаЗаКоторыйПредоставляетсяОтпуск));
	КонецЕсли;
	
	Если Объект.ПредоставитьДополнительныйОтпуск Тогда  
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			РабочиеПериодыДляОтпусков.Вставить(ДополнительныйОтпуск.ВидОтпуска, 
			Новый Структура("РабочийПериодС, РабочийПериодПо", ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск));
		КонецЦикла;
	КонецЕсли;
	
	Возврат РабочиеПериодыДляОтпусков;
	
КонецФункции

Функция ОснованияДляОтпусков(Объект)
	
	ОснованияДляОтпусков = Новый Соответствие;
	Если Объект.ПредоставитьОсновнойОтпуск Или Объект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		ОснованияДляОтпусков.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), Объект.Основание);
	КонецЕсли;
	
	Если Объект.ПредоставитьДополнительныйОтпуск Тогда  
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			ОснованияДляОтпусков.Вставить(ДополнительныйОтпуск.ВидОтпуска, ДополнительныйОтпуск.Основание);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОснованияДляОтпусков;
	
КонецФункции

Процедура ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Ссылка,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ЛОЖЬ КАК Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	0 КАК РезультатВТомЧислеЗаСчетФБ
	|ПОМЕСТИТЬ ВТНачисленияДляУчетаПособий
	|ИЗ
	|	Документ.Отпуск.Начисления КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачислений.Сторно
	|			ТОГДА ТаблицаНачислений.СторнируемыйДокумент
	|		ИНАЧЕ ТаблицаНачислений.Ссылка
	|	КОНЕЦ,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	0
	|ИЗ
	|	Документ.Отпуск.НачисленияПерерасчет КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Выполнить();
	
	ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации);

	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособиях(ДанныеДляПроведения, ПособиеПлатитУчастникПилотногоПроекта);

КонецПроцедуры

Функция ПериодОтсутствия(ПериодыОтсутствий) Экспорт
	
	ПериодОтсутствия = Новый Структура("НачалоПериода,ОкончаниеПериода", '00010101', '00010101');
	
	Для каждого Период Из ПериодыОтсутствий Цикл
		Если ЗначениеЗаполнено(Период.НачалоПериода) Тогда
			Если НЕ ЗначениеЗаполнено(ПериодОтсутствия.НачалоПериода) Тогда
				ПериодОтсутствия.НачалоПериода = Период.НачалоПериода;
			Иначе
				ПериодОтсутствия.НачалоПериода = Мин(ПериодОтсутствия.НачалоПериода, Период.НачалоПериода);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Период.ОкончаниеПериода) Тогда
			ПериодОтсутствия.ОкончаниеПериода = Макс(ПериодОтсутствия.ОкончаниеПериода, Период.ОкончаниеПериода);
		КонецЕсли;	   
	КонецЦикла;
	
	Возврат ПериодОтсутствия;
	
КонецФункции

Функция ПериодыОтсутствий(Объект) Экспорт
	
	ПериодыОтсутствий = Новый ТаблицаЗначений;
	ПериодыОтсутствий.Колонки.Добавить("НачалоПериода");
	ПериодыОтсутствий.Колонки.Добавить("ОкончаниеПериода");
	
	КонецИнтервала = Дата(1,1,1);
	
	Если Объект.ПредоставитьОсновнойОтпуск Тогда
		ПериодОтсутствия = ПериодыОтсутствий.Добавить();
		ПериодОтсутствия.НачалоПериода = Объект.ДатаНачалаОсновногоОтпуска;
		ПериодОтсутствия.ОкончаниеПериода  = Объект.ДатаОкончанияОсновногоОтпуска;
		КонецИнтервала = Макс(КонецИнтервала, ПериодОтсутствия.ОкончаниеПериода);
	КонецЕсли;
	
	Если Объект.ПредоставитьДополнительныйОтпуск Тогда
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			ПериодОтсутствия = ПериодыОтсутствий.Добавить();
			ПериодОтсутствия.НачалоПериода = ДополнительныйОтпуск.ДатаНачала;
			ПериодОтсутствия.ОкончаниеПериода  = ДополнительныйОтпуск.ДатаОкончания;
			КонецИнтервала = Макс(КонецИнтервала, ПериодОтсутствия.ОкончаниеПериода);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ПредоставитьОтгул Тогда
		ПериодОтсутствия = ПериодыОтсутствий.Добавить();
		ПериодОтсутствия.НачалоПериода = КонецДня(КонецИнтервала) + 1;
		ПериодОтсутствия.ОкончаниеПериода  = УчетРабочегоВремениРасширенный.ДатаОкончанияПоГрафикуРаботыСотрудника(Объект.Сотрудник, ПериодОтсутствия.НачалоПериода, Объект.КоличествоДнейОтгула);
	КонецЕсли;
	
	Возврат ПериодыОтсутствий;
	
КонецФункции

Функция ВидыОтпусковОбъекта(ТекущийОбъект) Экспорт

	МассивВидовОтпусков = Новый Массив;
	
	Если ТекущийОбъект.ПредоставитьОсновнойОтпуск ИЛИ ТекущийОбъект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		МассивВидовОтпусков.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	КонецЕсли;
	Если ТекущийОбъект.ПредоставитьДополнительныйОтпуск Тогда
		МассивДополнительныхОтпусков = ТекущийОбъект.ДополнительныеОтпуска.Выгрузить().ВыгрузитьКолонку("ВидОтпуска");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВидовОтпусков, МассивДополнительныхОтпусков, Истина);
	КонецЕсли;
	
	Возврат МассивВидовОтпусков;

КонецФункции

// Функция возвращает структуру с описанием данного вида документа.
//
Функция ОписаниеДокумента() Экспорт 

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.СтруктураОписанияДокумента();
	
	ОписаниеДокумента.КраткоеНазваниеИменительныйПадеж	 = НСтр("ru = 'отпуск'");
	ОписаниеДокумента.КраткоеНазваниеРодительныйПадеж	 = НСтр("ru = 'отпуска'");
	ОписаниеДокумента.ИмяРеквизитаСотрудник				 = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаОтсутствующийСотрудник = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия		 = "ДатаНачалаПериодаОтсутствия";
	ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия	 = "ДатаОкончанияПериодаОтсутствия";
	
	Возврат ОписаниеДокумента;

КонецФункции

Функция ДанныеДляБухучетаЗарплатыПервичныхДокументов(Объект) Экспорт

	ДанныеДляБухучета = Новый Структура;
	ДанныеДляБухучета.Вставить("ДокументОснование", Объект.Ссылка);
	
	СтатьяРасходов = Объект.СтатьяРасходов;
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		СтатьяРасходов = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяОплатаТруда();
	КонецЕсли;
	
	ТаблицаБухучетЗарплаты = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаБухучетЗарплатыПервичныхДокументов();
	
	ВРОтпускаКомпенсации = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ВидРасчетаОсновногоОтпуска) Тогда
		ВРОтпускаКомпенсации.Добавить(Объект.ВидРасчетаОсновногоОтпуска);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидРасчетаКомпенсацииОсновногоОтпуска) Тогда
		ВРОтпускаКомпенсации.Добавить(Объект.ВидРасчетаКомпенсацииОсновногоОтпуска);
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект.ДополнительныеОтпуска Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВидРасчета) И ВРОтпускаКомпенсации.Найти(СтрокаТЧ.ВидРасчета) = Неопределено Тогда
			ВРОтпускаКомпенсации.Добавить(СтрокаТЧ.ВидРасчета);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВидРасчетаКомпенсации) И ВРОтпускаКомпенсации.Найти(СтрокаТЧ.ВидРасчетаКомпенсации) = Неопределено Тогда
			ВРОтпускаКомпенсации.Добавить(СтрокаТЧ.ВидРасчетаКомпенсации);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ОтпускКомпенсация Из ВРОтпускаКомпенсации Цикл
	
		НоваяСтрока = ТаблицаБухучетЗарплаты.Добавить();
		НоваяСтрока.ДокументОснование = Объект.Ссылка;
		НоваяСтрока.НачислениеУдержание = ОтпускКомпенсация;
		НоваяСтрока.СпособОтраженияЗарплатыВБухучете = Объект.СпособОтраженияЗарплатыВБухучете;
		НоваяСтрока.ОтношениеКЕНВД = Объект.ОтношениеКЕНВД;
		НоваяСтрока.СтатьяФинансирования = Объект.СтатьяФинансирования;
		НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
	
	КонецЦикла;
	
	ДанныеДляБухучета.Вставить("ТаблицаБухучетЗарплаты", ТаблицаБухучетЗарплаты);
	
	Возврат ДанныеДляБухучета;
	
КонецФункции

#Область ПараметрыВыбораНачислений

Функция ДополнительныеПараметрыВыбораНачислений(Документ, ПутьКРеквизиту) Экспорт
	Результат = Новый Соответствие;
	
	Если ПутьКРеквизиту = "ВидРасчетаОсновногоОтпуска" Тогда
		Категория = КатегорияНачисленияОтпуск(Документ);
	ИначеЕсли ПутьКРеквизиту = "ВидРасчетаКомпенсацииОсновногоОтпуска" Тогда
		Категория = КатегорияНачисленияКомпенсацияОтпуска(Документ);
	ИначеЕсли ПутьКРеквизиту = "ВидРасчетаЕдиновременнойВыплатыКОтпуску" Тогда
		Категория = КатегорияНачисленияЕдиновременнойВыплаты(Документ);
	ИначеЕсли ПутьКРеквизиту = "ВидРасчетаМатериальнойПомощиПриОтпуске" Тогда
		Категория = КатегорияНачисленияМатериальнойПомощи(Документ);
	ИначеЕсли ПутьКРеквизиту = "ДополнительныеОтпуска.ВидРасчета" Тогда
		МассивКатегорий = Новый Массив;
		МассивКатегорий.Добавить(КатегорияНачисленияОтпуск(Документ));
		МассивКатегорий.Добавить(КатегорияНачисленияОтпускБезОплаты());
		Категория = Новый ФиксированныйМассив(МассивКатегорий);
	ИначеЕсли ПутьКРеквизиту = "ДополнительныеОтпуска.ВидРасчетаКомпенсации" Тогда
		Категория = КатегорияНачисленияКомпенсацияОтпуска(Документ);
	КонецЕсли;
	
	Результат.Вставить("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Категория);
	Возврат Результат;
КонецФункции

Функция КатегорияНачисленияКомпенсацияОтпуска(Документ) Экспорт
	Если Документ.РасчетДенежногоСодержания Тогда
		Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска;
	Иначе
		Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска;
	КонецЕсли;
КонецФункции

Функция КатегорияНачисленияОтпуск(Документ) Экспорт
	Если Документ.РасчетДенежногоСодержания Тогда
		Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска;
	Иначе
		Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
	КонецЕсли;
КонецФункции

Функция КатегорияНачисленияОтпускБезОплаты() Экспорт
	Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
КонецФункции

Функция КатегорияНачисленияЕдиновременнойВыплаты(Документ)
	Если Документ.РасчетДенежногоСодержания Тогда
		Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего;
	Иначе
		Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску;
	КонецЕсли;
КонецФункции

Функция КатегорияНачисленияМатериальнойПомощи(Документ)
	Если Документ.РасчетДенежногоСодержания Тогда
		Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего;
	Иначе
		Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске;
	КонецЕсли;
КонецФункции

#КонецОбласти

Процедура ЗаполнитьДатуЗапретаРедактирования(ОбъектДокумента) Экспорт
	
	ЗарплатаКадры.ЗаполнитьДатуЗапретаРедактирования(ОбъектДокумента, "ДатаНачалаСобытия");
	
КонецПроцедуры

Процедура ЗаполнитьДатыЗапрета(ПараметрыОбновления) Экспорт
	
	ОбновлениеВыполнено = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.Дата КАК Дата
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.ДатаЗапрета = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отпуск.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбновлениеВыполнено = Ложь;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Ссылка);
			МенеджерДокумента.ЗаполнитьДатуЗапретаРедактирования(ОбъектДокумента);
			
			ОбъектДокумента.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбновлениеВыполнено);
	
КонецПроцедуры

Процедура ЗаполнитьДатуРасчетаДенежногоСодержания(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеВыполнено = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.ДатаНачалаСобытия КАК ДатаРасчетаДенежногоСодержания
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.ДатаРасчетаДенежногоСодержания = ДАТАВРЕМЯ(1, 1, 1)
		|	И Отпуск.ДатаНачалаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отпуск.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбновлениеВыполнено = Ложь;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДокумента.ДатаРасчетаДенежногоСодержания = Выборка.ДатаРасчетаДенежногоСодержания; 
						
			ОбъектДокумента.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбновлениеВыполнено);
	
КонецПроцедуры

Процедура ЗаполнитьИсходныеДанныеПерерасчетов(ПараметрыОбновления) Экспорт

	ПараметрыЗаполнения = ПерерасчетЗарплаты.ПараметрыЗаполненияИсходныхДанныхПерерасчетов();
	ПерерасчетЗарплаты.ЗаполнитьИсходныеДанныеПерерасчетов(ПараметрыОбновления, Метаданные.Документы.Отпуск, ПараметрыЗаполнения);

КонецПроцедуры

Процедура ЗаполнитьДвиженияЗанятостьПозицийШтатногоРасписания(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаНачалаПериодаОтсутствия КАК ДатаНачала,
		|	ТаблицаДокумента.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончания,
		|	ЕСТЬNULL(ТаблицаДокументаИсправления.Ссылка, ТаблицаДокументаСторнирование.Ссылка) КАК РегистраторИзмерение
		|ИЗ
		|	Документ.Отпуск КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ТаблицаДокумента.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И (КОНЕЦПЕРИОДА(ТаблицаДокумента.ДатаНачалаПериодаОтсутствия, ДЕНЬ) >= КадроваяИсторияСотрудников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|		ПО ТаблицаДокумента.Ссылка = ЗанятостьПозицийШтатногоРасписания.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Отпуск КАК ТаблицаДокументаИсправления
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИспр КАК ЗанятостьПозицийШтатногоРасписанияИспр
		|			ПО ТаблицаДокументаИсправления.Ссылка = ЗанятостьПозицийШтатногоРасписанияИспр.РегистраторИзмерение
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаИсправления.ИсправленныйДокумент
		|			И (ТаблицаДокументаИсправления.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СторнированиеНачислений КАК ТаблицаДокументаСторнирование
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИспр КАК ЗанятостьПозицийШтатногоРасписанияСторнирование
		|			ПО ТаблицаДокументаСторнирование.Ссылка = ЗанятостьПозицийШтатногоРасписанияСторнирование.РегистраторИзмерение
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаСторнирование.СторнируемыйДокумент
		|			И (ТаблицаДокументаСторнирование.Проведен)
		|ГДЕ
		|	ТаблицаДокумента.Проведен
		|	И ТаблицаДокумента.ОсвобождатьСтавку
		|	И ЗанятостьПозицийШтатногоРасписания.Регистратор ЕСТЬ NULL
		|	И ЗанятостьПозицийШтатногоРасписанияИспр.РегистраторИзмерение ЕСТЬ NULL
		|	И ЗанятостьПозицийШтатногоРасписанияСторнирование.РегистраторИзмерение ЕСТЬ NULL
		|	И НЕ КадроваяИсторияСотрудников.Сотрудник ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	Регистратор,
		|	Сотрудник";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.ЗаполнитьДвиженияПоДаннымВыборкиРегистраторов(Выборка, Ложь, ПараметрыОбновления);
	
КонецПроцедуры

Функция КоличествоДнейОтпускаАвансом(КоличествоДнейОтпуска, ОстатокОтпуска) Экспорт
	
	Остаток = ?(ОстатокОтпуска = Неопределено, 0, ОстатокОтпуска);
	Возврат Мин(КоличествоДнейОтпуска, Макс(КоличествоДнейОтпуска - Остаток, 0));
	
КонецФункции

Функция ОстаткиВРазрезеВидовОтпусков(Сотрудник, ДатаНачалаСобытия, ИсключаемыеРегистраторы) Экспорт
	
	ОстатокОтпуска = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(Сотрудник, ДатаНачалаСобытия - 86400, ИсключаемыеРегистраторы);
	
	ОстаткиВРазрезеВидовОтпусков = Новый Соответствие;
	Для Каждого ДанныеВидаОтпуска Из ОстатокОтпуска.ОстаткиВРазрезеВидовОтпусков Цикл 
		ОстаткиВРазрезеВидовОтпусков.Вставить(ДанныеВидаОтпуска.ВидЕжегодногоОтпуска, ДанныеВидаОтпуска.КоличествоДней);
	КонецЦикла;	
	
	Возврат ОстаткиВРазрезеВидовОтпусков;
	
КонецФункции

Процедура ИсправитьДвиженияЗанятостьПозицийШтатногоРасписания(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗанятостьПозицийШтатногоРасписания.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ЗанятостьПозицийШтатногоРасписания КАК ЗанятостьПозицийШтатногоРасписания
		|ГДЕ
		|	ЗанятостьПозицийШтатногоРасписания.КоличествоСтавок = 0
		|	И ЗанятостьПозицийШтатногоРасписания.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ТИПЗНАЧЕНИЯ(ЗанятостьПозицийШтатногоРасписания.Регистратор) = ТИП(Документ.Отпуск)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаНачалаПериодаОтсутствия КАК ДатаНачала,
		|	ТаблицаДокумента.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончания,
		|	ЕСТЬNULL(ТаблицаДокументаИсправления.Ссылка, ТаблицаДокументаСторнирование.Ссылка) КАК РегистраторИзмерение
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Отпуск КАК ТаблицаДокументаИсправления
		|			ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаИсправления.ИсправленныйДокумент
		|				И (ТаблицаДокументаИсправления.Проведен)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СторнированиеНачислений КАК ТаблицаДокументаСторнирование
		|			ПО ТаблицаДокумента.Ссылка = ТаблицаДокументаСторнирование.СторнируемыйДокумент
		|				И (ТаблицаДокументаСторнирование.Проведен)
		|		ПО Регистраторы.Регистратор = ТаблицаДокумента.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	Регистратор,
		|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗанятостьПозицийШтатногоРасписания.ЗаполнитьДвиженияПоДаннымВыборкиРегистраторов(Выборка, Ложь, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоДнейПриостановки(ДокументОбъект, СтрокаПериодов) Экспорт
	ОтпускВРабочихДняхПоДоговору = ОстаткиОтпусков.ОтпускСотрудникаВРабочихДняхПоДоговору(
		ДокументОбъект.Сотрудник, ДокументОбъект.ДатаНачалаСобытия);
	ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), ОтпускВРабочихДняхПоДоговору);
	СтрокаПериодов.КоличествоДнейПриостановки = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(ДокументОбъект.Сотрудник, 
		СтрокаПериодов.ДатаНачалаПериода, СтрокаПериодов.ДатаОкончанияПериода, 
		ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
КонецПроцедуры

#КонецОбласти

#КонецЕсли
