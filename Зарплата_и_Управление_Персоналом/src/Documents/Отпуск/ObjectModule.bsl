#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") Тогда
			Если ДанныеЗаполнения.Действие = "Исправить" Тогда
				
				ДокументыРазовыхНачислений.СкопироватьИсправляемыйДокумент(ЭтотОбъект, 
												ДанныеЗаполнения.Ссылка, 
												"ДокументРассчитан,ДокументЗаполнения,Рассчитал", 
												"ДанныеОбИндексации,Начисления,НачисленияПерерасчет,НачисленияПерерасчетНулевыеСторно,
												|ОтпускаАвансомПерерасчет,НДФЛ,ОтработанноеВремяДляСреднегоОбщий,ПогашениеЗаймов,
												|Показатели,ПримененныеВычетыНаДетейИИмущественные,
												|РаспределениеРезультатовНачислений,РаспределениеРезультатовУдержаний,
												|СреднийЗаработокОбщий,Удержания",
												ДанныеЗаполнения);
				
				ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
				
				ЗапрашиваемыеЗначения = Новый Структура;
				ЗапрашиваемыеЗначения.Вставить("Ответственный", "Ответственный");
				ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения);
				
				Если ПредоставитьОсновнойОтпуск И КоличествоДнейОсновногоОтпускаАвансом > 0 Тогда
					НоваяСтрока = ОтпускаАвансомПерерасчет.Добавить();
					НоваяСтрока.ВидРасчета = ВидРасчетаОсновногоОтпуска;
					НоваяСтрока.КоличествоДнейАвансом = КоличествоДнейОсновногоОтпускаАвансом;
				КонецЕсли;
				
				Для Каждого ДанныеДополнительногоОтпуска Из ДополнительныеОтпуска Цикл 
					ЗаполнитьЗначенияСвойств(ОтпускаАвансомПерерасчет.Добавить(), ДанныеДополнительногоОтпуска);
				КонецЦикла;
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
					Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
					Модуль.ЗаполнитьОтпускПоЗаявкеСотрудника(ЭтотОбъект, ДанныеЗаполнения);
				КонецЕсли;
				
				Если ДанныеЗаполнения.Свойство("ОснованиеПриостановки") Тогда
					ЗаполнитьПоОснованиямПриостановки(ДанныеЗаполнения);
				КонецЕсли;
				
			ИначеЕсли ДанныеЗаполнения.Действие = "Заполнить" Тогда
				
				ЗаполнитьПоДаннымЗаполнения(ДанныеЗаполнения);
				
			ИначеЕсли ДанныеЗаполнения.Действие = "ЗаполнитьПоЗаявке" Тогда
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
					Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
					Модуль.ЗаполнитьОтпускПоЗаявкеСотрудника(ЭтотОбъект, ДанныеЗаполнения);
				КонецЕсли;
				
			ИначеЕсли ДанныеЗаполнения.Действие = "ЗаполнитьИзОбучения" Тогда
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда 
					Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
					Модуль.ЗаполнитьОтпускИзДокументаОбучения(ЭтотОбъект, ДанныеЗаполнения);
				КонецЕсли;
				
			ИначеЕсли ДанныеЗаполнения.Действие = "ЗаполнитьПослеПереноса" Тогда	
				
				ЗаполнитьПослеПереноса(ДанныеЗаполнения);	
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			Если ДанныеЗаполнения.Свойство("Сотрудник") И ЗначениеЗаполнено(ДанныеЗаполнения.Сотрудник) Тогда
				ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения.Сотрудник);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.Отпуск.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПредоставитьОсновнойОтпуск Тогда
		
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачалаОсновногоОтпуска, "Объект.ДатаНачалаОсновногоОтпуска", Отказ, НСтр("ru='Дата начала основного отпуска'"), , , Ложь);
		ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", Отказ, НСтр("ru='Начало периода за который предоставляется основной отпуск'"), , , Ложь);
		
	КонецЕсли;
	
	Если ОсвобождатьСтавку Тогда
		
		ПериодыОтсутствий = Документы.Отпуск.ПериодыОтсутствий(ЭтотОбъект);
		ПериодОтсутствия = Документы.Отпуск.ПериодОтсутствия(ПериодыОтсутствий);
		
		УправлениеШтатнымРасписанием.ПроверитьВозможностьПроведенияВременногоОсвобожденияСтавок(
			Ссылка, Проведен, Сотрудник, ПериодОтсутствия.НачалоПериода, ПериодОтсутствия.ОкончаниеПериода, Отказ,
			ИсправленныйДокумент, "Сотрудник,ДатаНачалаПериодаОтсутствия,ДатаОкончанияПериодаОтсутствия");
		
	КонецЕсли;
	
	КонтейнерОшибок = Неопределено;
	
	ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок);	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		Если ДокументРассчитан Тогда 
			
			ЗарплатаКадры.ПроверитьДатуВыплаты(ЭтотОбъект, Отказ);
			
			ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок);                                                                        
			
			ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
			ПроверитьПериодДействияНачислений(Отказ);
			
			// Проверка корректности распределения по источникам финансирования
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "Начисления,НачисленияПерерасчет,Удержания,НДФЛ,ПогашениеЗаймов,КорректировкиВыплаты";
			
			ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
				ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
			
			// Проверка корректности распределения по территориям и условиям труда
			ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет";
			
			РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
				ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Документы.Отпуск.ПроверитьРаботающих(ЭтотОбъект, Отказ);
	
	ПроверитьПериодРаботыЗаКоторыйПредоставляетсяОтпуск(КонтейнерОшибок);
	
	ПроверитьКоличествоДнейОтгула(КонтейнерОшибок);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, Отказ);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ПроверитьНаличиеОтпускаПоЗаявкеСотрудника(ЗаявкаСотрудника, Сотрудник, Ссылка, Отказ, ИсправленныйДокумент);
	КонецЕсли;
	
	УдалитьПроверенныеРеквизиты(ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОсвобождатьСтавку Тогда
		
		УправлениеШтатнымРасписанием.ПроверитьВозможностьОтменыПроведения(Ссылка, Сотрудник,
			ДатаНачалаПериодаОтсутствия, ДатаОкончанияПериодаОтсутствия, Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) И ПериодыПриостановкиОтпуска.Количество() > 0 Тогда
	
		ПроверитьПересекающиесяБольничные();
	
	КонецЕсли;
	
	ПерерасчетЗарплаты.УдалитьПерерасчетыПоРегистратору(Ссылка);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Документы.Отпуск.ЗаполнитьДатуЗапретаРедактирования(ЭтотОбъект);
	
	ПериодыОтсутствий = Документы.Отпуск.ПериодыОтсутствий(ЭтотОбъект);
	ПериодОтсутствия = Документы.Отпуск.ПериодОтсутствия(ПериодыОтсутствий);
	ДатаНачалаПериодаОтсутствия = ПериодОтсутствия.НачалоПериода;
	ДатаОкончанияПериодаОтсутствия = ПериодОтсутствия.ОкончаниеПериода;
	
	ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачалаПериодаОтсутствия, ДатаОкончанияПериодаОтсутствия);
	
	ДокументыРазовыхНачислений.ЗаполнитьРегистраторРазовыхНачисленийПередЗаписью(ЭтотОбъект);
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокумент(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УчетСреднегоЗаработка.ЗаписатьДатуНачалаСобытия(Ссылка, Сотрудник, ДатаНачалаСобытия);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЦепочкиДокументов");
		Модуль.УстановитьВторичныеРеквизитыДокументаЗамещения(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.СохранитьВариантРасчетаСреднегоЗаработкаДокумента(ЭтотОбъект, ДатаНачалаСобытия);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляБухучета = Документы.Отпуск.ДанныеДляБухучетаЗарплатыПервичныхДокументов(ЭтотОбъект);
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьБухучетЗарплатыПервичныхДокументов(ДанныеДляБухучета);
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументыРазовыхНачислений.ПриКопированииДокумента(ЭтотОбъект);
	РасчетЗарплатыРасширенный.ЗаполнитьИсходныйДокументПриКопировании(ЭтотОбъект, ОбъектКопирования.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДаннымЗаполнения(ДанныеЗаполнения)
	
	Если ЭтоНовый() Тогда
		
		ДокументЗаполнения = ДанныеЗаполнения.Ссылка;
		Организация = ДанныеЗаполнения.Организация;
		Сотрудник = ДанныеЗаполнения.Сотрудник;
		
		ДанныеЗаполнения.Свойство("Руководитель", Руководитель);
		ДанныеЗаполнения.Свойство("ДолжностьРуководителя", ДолжностьРуководителя);
		
		ПредоставитьОсновнойОтпуск = Ложь;
		
	КонецЕсли;
	
	РанняяДатаОтпуска = '00010101';
	ПредоставитьДополнительныйОтпуск = Ложь;
	
	Для каждого ДанныеОтпуска Из ДанныеЗаполнения.ДанныеОтпусков Цикл
		
		Если РанняяДатаОтпуска > ДанныеОтпуска.ДатаНачала
			ИЛИ РанняяДатаОтпуска = '00010101' Тогда
			
			РанняяДатаОтпуска = ДанныеОтпуска.ДатаНачала;
			
		КонецЕсли; 
		
		КоличествоДнейКомпенсации = ?(ДанныеОтпуска.Свойство("КоличествоДнейКомпенсации"), ДанныеОтпуска.КоличествоДнейКомпенсации, 0);
		
		Если Не ПредоставитьЕдиновременнуюВыплатуКОтпуску Тогда 
			ПредоставитьЕдиновременнуюВыплатуКОтпуску = ?(ДанныеОтпуска.Свойство("ПредоставитьЕдиновременнуюВыплатуКОтпуску"), ДанныеОтпуска.ПредоставитьЕдиновременнуюВыплатуКОтпуску, Ложь);
		КонецЕсли;
		
		Если (ДанныеЗаполнения.Свойство("АвторасчетПериодаПредоставления")
			И ДанныеЗаполнения.АвторасчетПериодаПредоставления)
			ИЛИ НЕ ДанныеОтпуска.Свойство("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск")
			ИЛИ НЕ ДанныеОтпуска.Свойство("КонецПериодаЗаКоторыйПредоставляетсяОтпуск") Тогда
			
			// Если необходимо рассчитать период предоставления отпуска - рассчитываем.
			СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
			СтруктураПараметров.Сотрудник = Сотрудник;
			СтруктураПараметров.ТекущийРегистратор = Ссылка;
			СтруктураПараметров.ВидОтпуска = ДанныеОтпуска.ВидОтпуска;
			СтруктураПараметров.ДатаНачала = ДанныеОтпуска.ДатаНачала;
			СтруктураПараметров.ДатаОкончания = ДанныеОтпуска.ДатаОкончания;
			СтруктураПараметров.ДатаКомпенсации = ?(ЗначениеЗаполнено(ПериодРегистрации), ПериодРегистрации, НачалоМесяца(ТекущаяДатаСеанса()));
			СтруктураПараметров.КоличествоДнейКомпенсации = ?(ЗначениеЗаполнено(КоличествоДнейКомпенсации), КоличествоДнейКомпенсации, КоличествоДнейКомпенсацииОсновногоОтпуска);
			РабочийПериодОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
			
			НачалоПериодаПредоставления = РабочийПериодОтпуска.РабочийГодС;
			КонецПериодаПредоставления = РабочийПериодОтпуска.РабочийГодПо;
		Иначе
			// Если нет - копируем из данных заполнения.
			НачалоПериодаПредоставления = ДанныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск;
			КонецПериодаПредоставления = ДанныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск;
		КонецЕсли;
			
		Если ДанныеОтпуска.ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
			
			Если ДанныеОтпуска.Свойство("Основание") Тогда
				Основание = ДанныеОтпуска.Основание;
			КонецЕсли;
			
			ДатаНачалаОсновногоОтпуска = ДанныеОтпуска.ДатаНачала;
			ДатаОкончанияОсновногоОтпуска = ДанныеОтпуска.ДатаОкончания;
			
			КоличествоДнейОсновногоОтпуска = ДанныеОтпуска.КоличествоДней;
			КоличествоДнейКомпенсацииОсновногоОтпуска = КоличествоДнейКомпенсации;
			
			ПредоставитьОсновнойОтпуск = КоличествоДнейОсновногоОтпуска <> 0;
			
			ПредоставитьКомпенсациюОсновногоОтпуска = КоличествоДнейКомпенсацииОсновногоОтпуска <> 0;
			
			НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= НачалоПериодаПредоставления;
			КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= КонецПериодаПредоставления;
			
			Если ЗначениеЗаполнено(ДанныеОтпуска.ВидОтпускаПрежний)
				И ДанныеОтпуска.ВидОтпускаПрежний <> ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				
				СтрокиОтпуска = ДополнительныеОтпуска.НайтиСтроки(Новый Структура("ВидОтпуска", ДанныеОтпуска.ВидОтпускаПрежний));
				Если СтрокиОтпуска.Количество() > 0 Тогда
					
					ДополнительныеОтпуска.Удалить(СтрокиОтпуска[0]);
					ПредоставитьДополнительныйОтпуск = ДополнительныеОтпуска.Количество() > 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ПредоставитьДополнительныйОтпуск = Истина;
			
			Если ЗначениеЗаполнено(ДанныеОтпуска.ВидОтпускаПрежний) Тогда
				
				Если ДанныеОтпуска.ВидОтпускаПрежний = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				
					ПредоставитьОсновнойОтпуск = Ложь;
					
					ДатаНачалаОсновногоОтпуска = '00010101';
					ДатаОкончанияОсновногоОтпуска = '00010101';
					
					КоличествоДнейОсновногоОтпуска = 0;
					КоличествоДнейКомпенсацииОсновногоОтпуска = 0;
					ПредоставитьКомпенсациюОсновногоОтпуска = Ложь;
					
					НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
					КонецПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
					
					ИскомыйВидОтпуска = ДанныеОтпуска.ВидОтпуска;
					
				Иначе
					ИскомыйВидОтпуска = ДанныеОтпуска.ВидОтпускаПрежний;
				КонецЕсли
				
			Иначе
				ИскомыйВидОтпуска = ДанныеОтпуска.ВидОтпуска;
			КонецЕсли;
			
			СтрокиОтпуска = ДополнительныеОтпуска.НайтиСтроки(Новый Структура("ВидОтпуска", ИскомыйВидОтпуска));
			Если СтрокиОтпуска.Количество() > 0 Тогда
				СтрокаДополнительногоОтпуска = СтрокиОтпуска[0];
			Иначе
				СтрокаДополнительногоОтпуска = ДополнительныеОтпуска.Добавить();
			КонецЕсли;
			
			Если ДанныеОтпуска.Свойство("Основание") Тогда
				СтрокаДополнительногоОтпуска.Основание = ДанныеОтпуска.Основание;
			КонецЕсли;
			
			СтрокаДополнительногоОтпуска.ВидОтпуска = ДанныеОтпуска.ВидОтпуска;
			
			СтрокаДополнительногоОтпуска.ДатаНачала = ДанныеОтпуска.ДатаНачала;
			СтрокаДополнительногоОтпуска.ДатаОкончания = ДанныеОтпуска.ДатаОкончания;
			
			СтрокаДополнительногоОтпуска.КоличествоДней = ДанныеОтпуска.КоличествоДней;
			СтрокаДополнительногоОтпуска.КоличествоДнейКомпенсации = КоличествоДнейКомпенсации;
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДополнительногоОтпуска.ВидОтпуска, "ОтпускЯвляетсяЕжегодным") Тогда
				СтрокаДополнительногоОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = НачалоПериодаПредоставления;
				СтрокаДополнительногоОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск = КонецПериодаПредоставления;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПредоставитьДополнительныйОтпуск Тогда 
		ДополнительныеОтпуска.Очистить();
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда 
		Если ПредоставитьОсновнойОтпуск И ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) Тогда 
			РанняяДатаОтпуска = Мин(ДатаНачалаОсновногоОтпуска, РанняяДатаОтпуска);
		КонецЕсли;
		Если ПредоставитьДополнительныйОтпуск Тогда 
			Для Каждого СтрокаДополнительногоОтпуска Из ДополнительныеОтпуска Цикл
				Если ЗначениеЗаполнено(СтрокаДополнительногоОтпуска.ДатаНачала) Тогда 
					РанняяДатаОтпуска = Мин(СтрокаДополнительногоОтпуска.ДатаНачала, РанняяДатаОтпуска);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДатаНачалаСобытия = РанняяДатаОтпуска;
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		ДатаНачалаСобытия = НачалоМесяца(ТекущаяДатаСеанса());
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ДатаПриема");
		Если КадровыеДанные.Количество() > 0 
			И ЗначениеЗаполнено(КадровыеДанные[0].ДатаПриема) 
			И НачалоМесяца(КадровыеДанные[0].ДатаПриема) = ДатаНачалаСобытия
			И КадровыеДанные[0].ДатаПриема > ДатаНачалаСобытия Тогда
			// Если сотрудник принят в месяце начисления, то установим дату начал события равной дате приема.
			ДатаНачалаСобытия = КадровыеДанные[0].ДатаПриема;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьКоличествоДнейОтпускаАвансом();
	
	ЗарплатаКадрыРасширенный.УстановитьВариантРасчетаДокументаПоСреднемуЗаработку(ЭтотОбъект);
	
	// Определим категории начислений.
	ДопПараметры = Документы.Отпуск.ДополнительныеПараметрыВыбораНачислений(ЭтотОбъект, "ВидРасчетаОсновногоОтпуска");
	ПланыВидовРасчета.Начисления.УстановитьНачислениеПоУмолчаниюВОбъекте(ЭтотОбъект, "ВидРасчетаОсновногоОтпуска", ДопПараметры);
	
	Если ЗначениеЗаполнено(ДатаНачалаСобытия) И ЗначениеЗаполнено(Сотрудник) Тогда
		ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(ДатаНачалаСобытия, Сотрудник, ВидРасчетаОсновногоОтпуска);
		ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
		ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
	КонецЕсли;
	
	ПроизводственныйКалендарьСотрудника = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ГрафикРаботы");
		Если КадровыеДанныеСотрудника.Количество() > 0
			И ЗначениеЗаполнено(КадровыеДанныеСотрудника[0].ГрафикРаботы) Тогда
			ПроизводственныйКалендарьСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КадровыеДанныеСотрудника[0].ГрафикРаботы, "ПроизводственныйКалендарь");
		КонецЕсли;
	КонецЕсли;
	
	ПланируемаяДатыВыплатыОтпуска = Документы.Отпуск.ПланируемаяДатыВыплатыОтпуска(ДатаНачалаСобытия, ПроизводственныйКалендарьСотрудника);
	Если ПланируемаяДатыВыплатыОтпуска <> Неопределено Тогда
		ПланируемаяДатаВыплаты = ПланируемаяДатыВыплатыОтпуска;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(РанняяДатаОтпуска) И РанняяДатаОтпуска < ТекущаяДатаСеанса() Тогда
			Дата = РанняяДатаОтпуска;
		Иначе
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ПериодРегистрации = НачалоМесяца(Дата);
		
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Ответственный", "Ответственный");
		
		ФиксированныеЗначения = Новый Массив;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			ЗапрашиваемыеЗначения.Вставить("Организация", "Организация");
			
			Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
				ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ДолжностьРуководителя) Тогда
				ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
			КонецЕсли; 
			
			ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "ГлавныйБухгалтер");
			ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Бухгалтер");
			
			ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "РаботникКадровойСлужбы");
			ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "ДолжностьРаботникаКадровойСлужбы");
			
			ФиксированныеЗначения.Добавить("Организация");
			
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ФиксированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоДнейОтпускаАвансом()
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Или Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда 
		Возврат;
	КонецЕсли;
	
	ИсключаемыеРегистраторы = Новый Массив;
	ИсключаемыеРегистраторы.Добавить(Ссылка);
	ИсключаемыеРегистраторы.Добавить(ИсправленныйДокумент);
	
	ОстаткиВРазрезеВидовОтпусков = Документы.Отпуск.ОстаткиВРазрезеВидовОтпусков(Сотрудник, ДатаНачалаСобытия, ИсключаемыеРегистраторы);
	
	Если ПредоставитьОсновнойОтпуск Тогда
		ОстатокОтпуска = ОстаткиВРазрезеВидовОтпусков.Получить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
		КоличествоДнейОсновногоОтпускаАвансом = Документы.Отпуск.КоличествоДнейОтпускаАвансом(КоличествоДнейОсновногоОтпуска, ОстатокОтпуска);
	КонецЕсли;
	
	ВидыОтпусков = ДополнительныеОтпуска.ВыгрузитьКолонку("ВидОтпуска");
	ЕжегодныеОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыОтпусков, "ОтпускЯвляетсяЕжегодным");
	Для Каждого СтрокаОтпуска Из ДополнительныеОтпуска Цикл
		Если Не ЕжегодныеОтпуска[СтрокаОтпуска.ВидОтпуска] Тогда
			СтрокаОтпуска.КоличествоДнейАвансом = 0;
			Продолжить;
		КонецЕсли;
		ОстатокОтпуска = ОстаткиВРазрезеВидовОтпусков.Получить(СтрокаОтпуска.ВидОтпуска);
		СтрокаОтпуска.КоличествоДнейАвансом = Документы.Отпуск.КоличествоДнейОтпускаАвансом(СтрокаОтпуска.КоличествоДней, ОстатокОтпуска);
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодыНачисленийЕжегодныхОплачиваемыхОтпусков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтпускНачисления.ДатаНачала КАК ДатаНачала,
		|	ОтпускНачисления.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.Отпуск.Начисления КАК ОтпускНачисления
		|ГДЕ
		|	ОтпускНачисления.Ссылка = &Ссылка
		|	И ОтпускНачисления.Начисление.ВидОтпуска В (&ВидОтпуска)";
	
	Запрос.УстановитьПараметр("ВидОтпуска", Справочники.ВидыОтпусков.ВидыЕжегодныхОплачиваемыхОтпусков());
	Запрос.УстановитьПараметр("Ссылка", ИсправленныйДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьПоОснованиямПриостановки(ДанныеЗаполнения)
	ДанныеБольничного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ОснованиеПриостановки, 
		"ДатаНачала, ДатаОкончания, ПериодРегистрации");
	ПериодРегистрации = ДанныеБольничного.ПериодРегистрации;
	ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	НоваяСтрока = ПериодыПриостановкиОтпуска.Добавить();
	НоваяСтрока.Причина = ДанныеЗаполнения.ОснованиеПриостановки;
	ПериодПересечения = ОбщегоНазначенияБЗК.ПериодПересеченияДвухИнтервалов(ДанныеБольничного.ДатаНачала, 
		ДанныеБольничного.ДатаОкончания, ДатаНачалаПериодаОтсутствия, ДатаОкончанияПериодаОтсутствия);
	НоваяСтрока.ДатаНачалаПериода = ПериодПересечения.ДатаНачала;
	НоваяСтрока.ДатаОкончанияПериода = ПериодПересечения.ДатаОкончания;
	
	Документы.Отпуск.ЗаполнитьКоличествоДнейПриостановки(ЭтотОбъект, НоваяСтрока);
КонецПроцедуры

#Область ПроверкаЗаполненияДокумента

Функция ДокументГотовКРасчету(ВыводитьСообщения = Истина) Экспорт
	
	КонтейнерОшибок = Неопределено;
	
	ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок);
	
	ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок, Истина);                                                                        
		
	КонтейнерСодержитОшибки = Ложь;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, КонтейнерСодержитОшибки);
	
	Если Не ВыводитьСообщения Тогда
		
		ПолучитьСообщенияПользователю(Истина);		
		
	КонецЕсли;
	
	Возврат Не КонтейнерСодержитОшибки;	
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок)
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан период регистрации.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПериодРегистрации", ТекстСообщения, "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" обязательно к заполнению.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Организация", ТекстСообщения, "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Сотрудник"" обязательно к заполнению.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Сотрудник", ТекстСообщения, "");
	КонецЕсли;

	Если НЕ ПредоставитьОсновнойОтпуск 
		И НЕ ПредоставитьКомпенсациюОсновногоОтпуска 
		И НЕ ПредоставитьДополнительныйОтпуск 
		И НЕ ПредоставитьМатериальнуюПомощьПриОтпуске Тогда
		ТекстСообщения = НСтр("ru = 'Документом не оплачивается ни основной, ни дополнительный отпуск.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.", ТекстСообщения, "");
	КонецЕсли;
	
	Если ПредоставитьОсновнойОтпуск Тогда
		Если НЕ ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И НЕ ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) Тогда
			Если НЕ ПредоставитьКомпенсациюОсновногоОтпуска Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить даты начала и окончания отпуска.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаОсновногоОтпуска", ТекстСообщения, "");
			Иначе
				ТекстСообщения = НСтр("ru = 'Флажок оплаты основного отпуска взведен, но не одно поле не заполнено. Снимите флажок, или заполните даты основного отпуска.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПредоставитьОсновнойОтпуск", ТекстСообщения, "");
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена дата начала основного отпуска.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаОсновногоОтпуска", ТекстСообщения, "");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) И ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания основного отпуска.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончанияОсновногоОтпуска", ТекстСообщения, "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) И ДатаНачалаОсновногоОтпуска > ДатаОкончанияОсновногоОтпуска Тогда
				ТекстСообщения = НСтр("ru = 'Дата окончания основного отпуска не может быть меньше даты начала.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончанияОсновногоОтпуска", ТекстСообщения, "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		Если НЕ	ЗначениеЗаполнено(КоличествоДнейКомпенсацииОсновногоОтпуска) Тогда
			ТекстСообщения = НСтр("ru = 'Флажок оплаты компенсации основного отпуска взведен, но не указано количество дней. Снимите флажок или укажите количество дней компенсации'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПредоставитьКомпенсациюОсновногоОтпуска", ТекстСообщения, "");
		КонецЕсли;
	КонецЕсли;

	Если ПредоставитьДополнительныйОтпуск Тогда
		Если ДополнительныеОтпуска.Количество() < 1 Тогда                            			
			ТекстСообщения = НСтр("ru = 'Флажок оплаты дополнительных отпусков взведен, но не один отпуск не добавлен. Снимите флажок или добавьте дополнительный отпуск.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска", ТекстСообщения, "");
		Иначе
			
			Если ПредоставитьОсновнойОтпуск Тогда
				Период = Новый Структура;
				Период.Вставить("НомерСтроки", 0);
				Период.Вставить("ДатаНачала", ДатаНачалаОсновногоОтпуска);
				Период.Вставить("ДатаОкончания", ДатаОкончанияОсновногоОтпуска);
				НомераСтрок = ПересеченияПериодов(Период, ДополнительныеОтпуска);
				Если ЗначениеЗаполнено(НомераСтрок) Тогда
					ТекстСообщения = НСтр("ru = 'Период основного отпуска пересекается с периодами следующих строк дополнительных отпусков: %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомераСтрок);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска", ТекстСообщения, "");
				КонецЕсли;
			КонецЕсли;
			
			Для каждого ДополнительныйОтпуск Из ДополнительныеОтпуска Цикл
				ИндексСтроки = ДополнительныйОтпуск.НомерСтроки - 1;
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ВидОтпуска) Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнен вид дополнительного отпуска.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ВидОтпуска", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания)
					И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДнейКомпенсации) Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнены ни даты отпуска, ни количество дней компенсации.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаНачала", ТекстСообщения, "", ИндексСтроки);
				Иначе
					Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) Тогда
						ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена дата начала отпуска.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаНачала", ТекстСообщения, "", ИндексСтроки);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) Тогда
						ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена дата окончания отпуска.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаОкончания", ТекстСообщения, "", ИндексСтроки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) 
						И ДополнительныйОтпуск.ДатаНачала > ДополнительныйОтпуск.ДатаОкончания Тогда
						ТекстСообщения = НСтр("ru = 'В строке %1 дата окончания отпуска меньше даты начала.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаОкончания", ТекстСообщения, "", ИндексСтроки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) 
						И ДополнительныйОтпуск.ДатаНачала <= ДополнительныйОтпуск.ДатаОкончания  Тогда
						НомераСтрок = ПересеченияПериодов(ДополнительныйОтпуск, ДополнительныеОтпуска);
						Если ЗначениеЗаполнено(НомераСтрок) Тогда
							ТекстСообщения = НСтр("ru = 'Период строки %1 пересекается с периодами следующих строк: %2.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки, НомераСтрок);
							ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаОкончания", ТекстСообщения, "", ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	    	
	ПроверитьЦелостностьПериодаОтпуска(КонтейнерОшибок);

КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок, ПроверкаПередРасчетом = Ложь)
	
	Если Не ДокументРассчитан И Не ПроверкаПередРасчетом Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПредоставитьОсновнойОтпуск 
		И ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) 
		И НЕ ЗначениеЗаполнено(ВидРасчетаОсновногоОтпуска) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияОсновногоОтпуска")  Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран вид начисления для оплаты основного отпуска.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось подобрать вид начисления для оплаты основного отпуска.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидРасчетаОсновногоОтпуска", ТекстСообщения, "");
		
	КонецЕсли;
	
	Если ПредоставитьКомпенсациюОсновногоОтпуска 
		И Не ЗначениеЗаполнено(ВидРасчетаКомпенсацииОсновногоОтпуска) Тогда
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска") Тогда 
			ТекстСообщения = НСтр("ru = 'Не выбран вид начисления для оплаты компенсации основного отпуска.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось подобрать вид начисления для оплаты компенсации основного отпуска.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидРасчетаКомпенсацииОсновногоОтпуска", ТекстСообщения, "");
	КонецЕсли; 
	
	Если ПредоставитьДополнительныйОтпуск Тогда
		Для каждого ДополнительныйОтпуск Из ДополнительныеОтпуска Цикл
			ИндексСтроки = ДополнительныйОтпуск.НомерСтроки - 1;
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала)	И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) 
				И Не ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДней) Тогда
				ТекстСообщения = НСтр("ru = 'В строке %1 указаны даты отпуска, но не указано количество дней.'");
				ЗначениеПодстановки = ДополнительныйОтпуск.НомерСтроки;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗначениеПодстановки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].КоличествоДней", ТекстСообщения, "", ИндексСтроки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала)	И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) 
				И ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДней) И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ВидРасчета) Тогда
				Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияДополнительногоОтпуска") Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 не выбран вид начисления для оплаты отпуска.'");
					ЗначениеПодстановки = ДополнительныйОтпуск.НомерСтроки;
				Иначе 
					ТекстСообщения = НСтр("ru = 'Не удалось подобрать вид начисления для оплаты %1.'"); 
					ЗначениеПодстановки = ДополнительныйОтпуск.ВидОтпуска;
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗначениеПодстановки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ВидРасчета", ТекстСообщения, "", ИндексСтроки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДнейКомпенсации) И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ВидРасчетаКомпенсации) Тогда
				Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска") Тогда 	
					ТекстСообщения = НСтр("ru = 'В строке %1 не выбран вид начисления для оплаты компенсации отпуска.'");
					ЗначениеПодстановки = ДополнительныйОтпуск.НомерСтроки;
				Иначе 
					ТекстСообщения = НСтр("ru = 'Не удалось подобрать вид начисления для оплаты компенсации %1.'"); 
					ЗначениеПодстановки = ДополнительныйОтпуск.ВидОтпуска;
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗначениеПодстановки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ВидРасчетаКомпенсации", ТекстСообщения, "", ИндексСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПредоставитьМатериальнуюПомощьПриОтпуске 
		И ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску") 
		И Не ЗначениеЗаполнено(ВидРасчетаМатериальнойПомощиПриОтпуске) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран вид начисления для выплаты материальной помощи к отпуску.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидРасчетаМатериальнойПомощиПриОтпуске", ТекстСообщения, "");
	КонецЕсли;
	
	ПроверитьЗаполнениеПланируемойДатыВыплаты(КонтейнерОшибок, ПроверкаПередРасчетом);
	
КонецПроцедуры

Процедура ПроверитьЦелостностьПериодаОтпуска(КонтейнерОшибок)
	
	ПериодыРазрывов = ПериодыРазрывов();
	
	Для каждого ПериодРазрыва Из ПериодыРазрывов Цикл
		Если НачалоДня(ПериодРазрыва.ДатаНачала) = НачалоДня(ПериодРазрыва.ДатаОкончания) Тогда
			ТекстСообщения = НСтр("ru = 'Период отпуска прерывается %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(ПериодРазрыва.ДатаНачала,"ДЛФ=D"));
		Иначе 				
			ТекстСообщения = НСтр("ru = 'Период отпуска прерывается с %1 по %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(ПериодРазрыва.ДатаНачала,"ДЛФ=D"), Формат(ПериодРазрыва.ДатаОкончания,"ДЛФ=D"));
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПериодРазрыва" + ПериодРазрыва.ДатаНачала, ТекстСообщения, "");
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПланируемойДатыВыплаты(КонтейнерОшибок, ПроверкаПередРасчетом)
	
	МассивНачисленийДокумента = Новый Массив;
	
	Если НЕ ПроверкаПередРасчетом Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, Начисления.ВыгрузитьКолонку("Начисление"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, НачисленияПерерасчет.ВыгрузитьКолонку("Начисление"), Истина);
	КонецЕсли;
	
	Если УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, МассивНачисленийДокумента)
		И Не ЗначениеЗаполнено(ПланируемаяДатаВыплаты) Тогда
		ТекстСообщения = НСтр("ru = 'Дата выплаты обязательна к заполнению при выплате в межрасчет.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПланируемаяДатаВыплаты", ТекстСообщения, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПериодРаботыЗаКоторыйПредоставляетсяОтпуск(КонтейнерОшибок)
	
	Если ПредоставитьОсновнойОтпуск Или ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		Если ЗначениеЗаполнено(НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) И ЗначениеЗаполнено(КонецПериодаЗаКоторыйПредоставляетсяОтпуск) 
			И НачалоПериодаЗаКоторыйПредоставляетсяОтпуск > КонецПериодаЗаКоторыйПредоставляетсяОтпуск Тогда
			ТекстСообщения = НСтр("ru  = 'Начало периода работы за который предоставляется отпуск (компенсация) не может быть больше окончания этого периода.'"); 
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "");
		КонецЕсли;
	КонецЕсли;
	
	Если ПредоставитьДополнительныйОтпуск Тогда 
		ВидыОтпусков = ДополнительныеОтпуска.ВыгрузитьКолонку("ВидОтпуска");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтпусков.Ссылка КАК ВидОтпуска
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	ВидыОтпусков.ОтпускБезОплаты = ЛОЖЬ
		|	И ВидыОтпусков.Ссылка В(&ВидыОтпусков)
		|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным = ИСТИНА";
		Запрос.УстановитьПараметр("ВидыОтпусков", ВидыОтпусков);
		
		ЕжегодныеОтпуска = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОтпуска");
		
		Для каждого ДополнительныйОтпуск Из ДополнительныеОтпуска Цикл
			
			ИндексСтроки = ДополнительныйОтпуск.НомерСтроки - 1;
			
			Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДней) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЕжегодныеОтпуска.Найти(ДополнительныйОтпуск.ВидОтпуска) = Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск) Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 не указан период за который предоставляется отпуск.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И ЗначениеЗаполнено(ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск) Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена дата начала периода за который предоставляется отпуск.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И ЗначениеЗаполнено(ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена дата окончания периода за который предоставляется отпуск.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].КонецПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И ЗначениеЗаполнено(ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск > ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 дата окончания периода за который предоставляется отпуск меньше даты начала.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПересеченияПериодов(ПроверяемыйПериод, Периоды)
	НомераСтрок = "";
	Если ЗначениеЗаполнено(ПроверяемыйПериод.ДатаНачала) Тогда
		
		Для каждого Период Из Периоды Цикл
			Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
				Продолжить;
			КонецЕсли;
			Если ПроверяемыйПериод.НомерСтроки < Период.НомерСтроки Тогда
				Если ПроверяемыйПериод.ДатаНачала <= Период.ДатаНачала И ПроверяемыйПериод.ДатаОкончания >= Период.ДатаНачала Тогда
					НомераСтрок = НомераСтрок + ", " + Период.НомерСтроки; 
					Продолжить;
				КонецЕсли;
				Если ПроверяемыйПериод.ДатаНачала >= Период.ДатаНачала И ПроверяемыйПериод.ДатаНачала <= Период.ДатаОкончания Тогда
					НомераСтрок = НомераСтрок + ", " + Период.НомерСтроки; 
					Продолжить;
				КонецЕсли;
				Если ПроверяемыйПериод.ДатаОкончания >= Период.ДатаНачала И ПроверяемыйПериод.ДатаОкончания <= Период.ДатаОкончания Тогда
					НомераСтрок = НомераСтрок + ", " + Период.НомерСтроки; 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Возврат Прав(НомераСтрок, СтрДлина(НомераСтрок) - 2);
КонецФункции

Функция ПериодыРазрывов()
	
	ПериодыОтпусков = Новый ТаблицаЗначений;
	ПериодыОтпусков.Колонки.Добавить("ДатаНачала"); 
	ПериодыОтпусков.Колонки.Добавить("ДатаОкончания");
	
	ПериодыРазрывов = ПериодыОтпусков.СкопироватьКолонки();
	
	Если ПредоставитьОсновнойОтпуск Тогда
		ПериодОсновногоОтпуска = ПериодыОтпусков.Добавить();
		ПериодОсновногоОтпуска.ДатаНачала 		= ДатаНачалаОсновногоОтпуска;
		ПериодОсновногоОтпуска.ДатаОкончания 	= ДатаОкончанияОсновногоОтпуска;
	КонецЕсли;
	
	Если ПредоставитьДополнительныйОтпуск Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеОтпуска, ПериодыОтпусков);
	КонецЕсли;
	
	Компенсации = ПериодыОтпусков.НайтиСтроки(Новый Структура("ДатаНачала", '00010101'));
	Для каждого СтрокаКомпенсации Из Компенсации Цикл
		ПериодыОтпусков.Удалить(СтрокаКомпенсации);
	КонецЦикла;
	
	ПериодыОтпусков.Сортировать("ДатаНачала, ДатаОкончания");
	
	КоличествоПериодов = ПериодыОтпусков.Количество();
	Индекс = 0;
	Пока Индекс < КоличествоПериодов - 1 Цикл
		ТекущийПериод 	= ПериодыОтпусков[Индекс];
		СледующийПериод = ПериодыОтпусков[Индекс + 1];
		
		Если КонецДня(ТекущийПериод.ДатаОкончания) + 1 < НачалоДня(СледующийПериод.ДатаНачала) Тогда
			ПериодРазрыва = ПериодыРазрывов.Добавить();
			ПериодРазрыва.ДатаНачала = КонецДня(ТекущийПериод.ДатаОкончания) + 1;
			ПериодРазрыва.ДатаОкончания = НачалоДня(СледующийПериод.ДатаНачала) - 1;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат ПериодыРазрывов
КонецФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Начисления", НСтр("ru='Начисления'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Удержания", НСтр("ru='Удержания'"), "Удержание"));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru='Перерасчет прошлого периода'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
КонецПроцедуры

Процедура ПроверитьКоличествоДнейОтгула(КонтейнерОшибок)
	
	Если ПредоставитьОтгул И КоличествоДнейОтгула = 0 Тогда  
		ТекстСообщения = НСтр("ru = 'Не указано количество дней отгула.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.КоличествоДнейОтгула", ТекстСообщения, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПроверенныеРеквизиты(ПроверяемыеРеквизиты)
	
	Если ПроверяемыеРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудник");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск");

КонецПроцедуры

Процедура ПроверитьПересекающиесяБольничные()
	
	ПересекающиесяБольничные = Новый Массив;
	КатегорииБольничного = Новый Массив;
	КатегорииБольничного.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	КатегорииБольничного.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	КатегорииБольничного.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	КатегорииБольничного.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	
	НачисленияЕжегодныхОплачиваемыхОтпусковДокумента = ПериодыНачисленийЕжегодныхОплачиваемыхОтпусков();

	Отборы = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ФизическоеЛицо", "В", ФизическоеЛицо);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ПериодДействия", ">=", 
		НачалоМесяца(ДатаНачалаПериодаОтсутствия));
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ПериодДействия", "<=", 
		НачалоМесяца(ДатаОкончанияПериодаОтсутствия));
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени",
		"В", КатегорииБольничного);
	НачисленияПересекающегосяБольничного = РегистрыРасчета.Начисления.РезультирующийПериодДействия(Отборы);
		
	Для Каждого НачислениеЕжегодногоОплачиваемогоОтпускаДокумента Из НачисленияЕжегодныхОплачиваемыхОтпусковДокумента Цикл
		Для Каждого НачислениеПересекающегосяБольничного Из НачисленияПересекающегосяБольничного Цикл
			Если ОбщегоНазначенияБЗК.ИнтервалыПересекаются(
				НачислениеЕжегодногоОплачиваемогоОтпускаДокумента.ДатаНачала, 
				НачислениеЕжегодногоОплачиваемогоОтпускаДокумента.ДатаОкончания, 
				НачислениеПересекающегосяБольничного.ПериодДействияНачало,
				НачислениеПересекающегосяБольничного.ПериодДействияКонец) Тогда
				ПересекающийсяБольничныйПоНачислению = НачислениеПересекающегосяБольничного.Регистратор;
				ПересекающиесяБольничные.Добавить(ПересекающийсяБольничныйПоНачислению);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	ПересекающиесяБольничные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПересекающиесяБольничные);
	ТекстОтменыПроведенияБольничных = Новый Массив;
	Для Каждого Больничный Из ПересекающиесяБольничные Цикл
		ТекстОтменыПроведенияБольничных.Добавить(СтрШаблон(НСтр("ru = 'Отмените проведение %1'"), Больничный));
	КонецЦикла;
	
	ИнформацияОПересечении = СтрСоединить(ТекстОтменыПроведенияБольничных, Символы.ПС);
	
	Если ПересекающиесяБольничные.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Отмена проведения запрещена. 
			|Есть больничные, пересекающиеся с исправленным документом.'") + Символы.ПС + ИнформацияОПересечении;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьПослеПереноса(ДанныеЗаполнения)
	
	Если ПредоставитьОсновнойОтпуск Тогда
		
		ВидОсновногоОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
		
		СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
		СтруктураПараметров.Сотрудник 			= Сотрудник;
		СтруктураПараметров.ТекущийРегистратор 	= Ссылка;
		СтруктураПараметров.ВидОтпуска 			= ВидОсновногоОтпуска;
		СтруктураПараметров.ДатаНачала 			= ДатаНачалаОсновногоОтпуска;
		СтруктураПараметров.ДатаОкончания 		= ДатаОкончанияОсновногоОтпуска;
		СтруктураПараметров.ДатаКомпенсации 	= ПериодРегистрации;
		СтруктураПараметров.КоличествоДнейКомпенсации = КоличествоДнейКомпенсацииОсновногоОтпуска;
		РабочийПериодОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
		
		НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = РабочийПериодОтпуска.РабочийГодС;
		КонецПериодаЗаКоторыйПредоставляетсяОтпуск  = РабочийПериодОтпуска.РабочийГодПо;
		
	КонецЕсли;
	
	Для каждого СтрокаДополнительногоОтпуска Из ДополнительныеОтпуска Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДополнительногоОтпуска.ВидОтпуска) Тогда
			ПредоставитьДополнительныйОтпуск = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДополнительногоОтпуска.ВидОтпуска, "ОтпускЯвляетсяЕжегодным") Тогда
			
			СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
			СтруктураПараметров.Сотрудник = Сотрудник;
			СтруктураПараметров.ТекущийРегистратор = Ссылка;
			СтруктураПараметров.ВидОтпуска = СтрокаДополнительногоОтпуска.ВидОтпуска;
			СтруктураПараметров.ДатаНачала = СтрокаДополнительногоОтпуска.ДатаНачала;
			СтруктураПараметров.ДатаОкончания = СтрокаДополнительногоОтпуска.ДатаОкончания;
			СтруктураПараметров.ДатаКомпенсации = ПериодРегистрации;
			СтруктураПараметров.КоличествоДнейКомпенсации = 0;
			РабочийПериодОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
			
			СтрокаДополнительногоОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = РабочийПериодОтпуска.РабочийГодС;
			СтрокаДополнительногоОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск  = РабочийПериодОтпуска.РабочийГодПо;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Определим категории начислений.
	ДопПараметры = Документы.Отпуск.ДополнительныеПараметрыВыбораНачислений(ЭтотОбъект, "ВидРасчетаОсновногоОтпуска");
	ПланыВидовРасчета.Начисления.УстановитьНачислениеПоУмолчаниюВОбъекте(ЭтотОбъект, "ВидРасчетаОсновногоОтпуска", ДопПараметры);

	ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(ДатаНачалаСобытия, Сотрудник, ВидРасчетаОсновногоОтпуска);
	ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
	ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Организация");
	ЗапрашиваемыеЗначения.Вставить("Ответственный", "Ответственный");
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
	ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "ГлавныйБухгалтер");
	ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Бухгалтер");
	ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "РаботникКадровойСлужбы");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "ДолжностьРаботникаКадровойСлужбы");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли