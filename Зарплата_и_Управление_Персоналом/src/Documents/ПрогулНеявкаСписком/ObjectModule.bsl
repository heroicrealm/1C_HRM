#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// В качестве данных заполнения может принимать структуру с полями.
//		Ссылка
//		Действие
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Сотрудник") Тогда
			ЗаполнитьЗначенияСвойств(Сотрудники.Добавить(), ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.ПрогулНеявкаСписком.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		Если Не ЗначениеЗаполнено(ВидОтсутствия) 
			И Не ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияПрочихНевыходов") Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
			Документы.ПрогулНеявка.ТекстСообщенияНеЗаполненВидРасчета(Ложь),
			Ссылка,
			,
			,
			Отказ);
		КонецЕсли;
		
		Если ПерерасчетВыполнен Тогда
			
			// Проверка корректности распределения по источникам финансирования
			ИменаТаблицРаспределяемыхПоСтатьямФинансирования = "Начисления,НачисленияПерерасчет";
			
			ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
				ЭтотОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
			
			// Проверка корректности распределения по территориям и условиям труда
			ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет";
			
			РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
				ЭтотОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
			
			ПроверитьПериодДействияНачислений(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПериодыСотрудников = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из Сотрудники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаНачала) Или Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСотрудника.ДатаНачала > СтрокаСотрудника.ДатаОкончания Тогда 
			
			ТекстСообщения = НСтр("ru = 'Сотрудник %1: дата начала не может быть больше даты окончания'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Сотрудники[" + Формат(Сотрудники.Индекс(СтрокаСотрудника), "ЧН=0; ЧГ=0") + "].Сотрудник", "Объект", Отказ);
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеСотрудника = Новый Структура("ДатаНачала, ДатаОкончания, НомерСтроки, ИндексСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, СтрокаСотрудника);
		
		ДанныеСотрудника.ИндексСтроки = Сотрудники.Индекс(СтрокаСотрудника);
		ПериодыСотрудника = ПериодыСотрудников[СтрокаСотрудника.Сотрудник];
		
		Если ПериодыСотрудника = Неопределено Тогда 
			
			ПериодыСотрудника = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСотрудника);
			ПериодыСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ПериодыСотрудника);
			
		Иначе 
			
			Для Каждого ПериодОтсутствия Из ПериодыСотрудника Цикл
				
				Если Не (ДанныеСотрудника.ДатаНачала > ПериодОтсутствия.ДатаОкончания Или ДанныеСотрудника.ДатаОкончания < ПериодОтсутствия.ДатаНачала) Тогда
					
					ТекстСообщения = НСтр("ru = 'Пересекаются периоды отсутствия сотрудника %1 (строки %2 и %3)'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСотрудника.Сотрудник, ПериодОтсутствия.НомерСтроки, ДанныеСотрудника.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Сотрудники[" + Формат(ДанныеСотрудника.ИндексСтроки, "ЧН=0; ЧГ=0") + "].Сотрудник", "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПериодыСотрудника.Добавить(ДанныеСотрудника);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОсвобождатьСтавку Тогда
		
		СотрудникиПериоды = Сотрудники.Выгрузить(, "Сотрудник,ДатаНачала,ДатаОкончания");
		УправлениеШтатнымРасписанием.ПроверитьВозможностьПроведенияВременногоОсвобожденияСтавокПоТаблицеЗначений(
			Ссылка, Проведен, СотрудникиПериоды, Отказ, ИсправленныйДокумент, , "Сотрудники");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОсвобождатьСтавку Тогда
		СотрудникиПериоды = Сотрудники.Выгрузить(, "Сотрудник,ДатаНачала,ДатаОкончания");
		УправлениеШтатнымРасписанием.ПроверитьВозможностьОтменыПроведенияПоТаблицеЗначений(Ссылка, СотрудникиПериоды, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru='Перерасчет прошлого периода'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли