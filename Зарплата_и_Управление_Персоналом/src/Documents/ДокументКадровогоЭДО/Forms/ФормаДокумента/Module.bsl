
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	УстановитьУсловноеОформление();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗапрашиваемыеЗначения = Новый Структура;
		ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
		ЗапрашиваемыеЗначения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения);
		
		Если Не ЗначениеЗаполнено(Объект.СодержимоеДокумента) Тогда
			Объект.СодержимоеДокумента = КадровыйЭДО.МаксимальноДоступноеСодержимоеДокументовПользователя();
		КонецЕсли;
		
		Объект.Внешний = Истина;
		
		ПриПолученииДанныхНаСервере();
		
	Иначе
		ТолькоПросмотр = Не Объект.Внешний;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПолучитьОтпечаткиПодписей Тогда
		ВыполнитьОбработкуПодписейСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		ТекущийОбъектСсылка = Документы.ДокументКадровогоЭДО.ПолучитьСсылку();
		ТекущийОбъект.ОснованиеДокумента = ТекущийОбъектСсылка;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СсылкаНового", ТекущийОбъектСсылка);
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов     = ТекущийОбъектСсылка;
		ПараметрыФайла.ИмяБезРасширения   = СтрЗаменить(ИмяФайлаСРасширением, "." + Расширение, "");
		ПараметрыФайла.РасширениеБезТочки = Расширение;
		
		УстановитьПривилегированныйРежим(Истина);
		ТекущийОбъект.ЭлектронныйДокумент = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла, ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.ВнешниеПодписанты) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбраны ознакомляемые с документом сотрудники.'"),
			Объект.Ссылка, "Ознакомляемые", "", Отказ);
		
	КонецЕсли;
	
	Если Не ДанныеФайлаЗаполнены(ЭтотОбъект) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбраны файл электронного документа.'"),
			Объект.Ссылка, "ИмяФайлаСРасширением", "", Отказ);
		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтображениеЭлементовПоОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаСРасширениемНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
		ПросмотретьНаКлиенте();
	Иначе
		ВыбратьФайлСДиска();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	БизнесПроцессыЗаявокСотрудниковКлиент.ПоказатьОснованиеДокументаКадровогоЭДО(
		Объект.ОснованиеДокумента, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОдногоОзнакомляемогоПриИзменении(Элемент)
	
	ВыборОдногоОзнакомляемогоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомляемоеФизическоеЛицоПриИзменении(Элемент)
	
	ОзнакомляемоеФизическоеЛицоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНесколькихОзнакомляемыхПриИзменении(Элемент)
	
	УстановитьОтображениеОзнакомляемых(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныеПодписиСотрудниковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ОбработатьВыборСотрудников(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Просмотреть(Команда)
	
	ПросмотретьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьПечатныеФормыПоПочте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	КоллекцияПодписей = ЗаполнитьКоллекцииПодписей();
	ПодписиСервиса = Новый Массив;
	Для каждого Идентификатор Из КоллекцияПодписей.ПодписиСервиса Цикл
		ПодписиСервиса.Добавить(ЭлектронныеПодписи.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	ПодписиИБ = Новый Массив;
	Для каждого Идентификатор Из КоллекцияПодписей.ПодписиИБ Цикл
		ПодписиИБ.Добавить(ЭлектронныеПодписи.НайтиПоИдентификатору(Идентификатор));
	КонецЦикла;
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("Ссылка", Объект.ЭлектронныйДокумент);
	ОписаниеОбъекта.Вставить("Зашифрован", ДанныеЭлектронногоДокумента.Зашифрован);
	
	ПараметрыФормы = Новый Структура("Объект", ОписаниеОбъекта);
	ПараметрыФормы.Вставить("ЭлектронныеПодписи", ПодписиИБ);
	
	РаботаСФайламиСлужебныйКлиент.ПроверитьПодписи(
		ПараметрыФормы,
		ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТаблицаПодписей", ПодписиСервиса);
	ДополнительныеПараметры.Вставить("СсылкаНаДвоичныеДанные", ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодписиСервисаПослеСозданияМенеджера", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбработатьПодписиСервиса(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеВАрхив(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СохранитьВАрхивОригиналИПодписиДокумента", ЭтотОбъект);
	Если Не ВыполнитьОбработкуПодписейСервиса(ОповещениеЗавершения) Тогда
		СохранитьВАрхивОригиналИПодписиДокумента(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВ1СКабинетСотрудника(Команда)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед подписанием и передачей документа в ""1С:Кабинет сотрудника"", его необходимо записать.
			|Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ПодписатьИПередатьДокумент", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		ПодписатьИПередатьДокумент(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИПередатьДокумент(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Модифицированность Тогда
			
			Если Не ПроверитьЗаполнение() Тогда
				Возврат;
			КонецЕсли;
			Записать();
			
		КонецЕсли;
		
		Если ТребуетсяПодписьОрганизации Тогда
			
			ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеПодписанияФайла", ЭтотОбъект, Новый Структура);
			
			ПодписываемыеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент);
			КадровыйЭДОКлиент.ПодписатьФайлы(
				КадровыйЭДОВызовСервера.ДанныеФайловНаПодпись(ПодписываемыеФайлы, УникальныйИдентификатор),
				ОповещениеЗавершения,
				ЭтотОбъект,
				ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
			
		Иначе
			ПослеПодписанияФайла(Истина, Новый Структура);
		КонецЕсли;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодписанияФайла(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		ПослеПодписанияФайлаНаСервере();
		Если ТребуетсяПодписьОрганизации Тогда
			КадровыйЭДОКлиент.ПоказатьСостояниеОтправленныхНаПодпись(ДополнительныеПараметры);
			КадровыйЭДОКлиент.ОповеститьОбОбновленииДанныхДолкументовКЭДО();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеПодписанияФайлаНаСервере()
	
	Если ТребуетсяПодписьОрганизации Тогда
		КадровыйЭДОВызовСервера.УдалитьФайлыИзОбработкиПользователя(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент));
	КонецЕсли;
	
	КадровыйЭДОВызовСервера.ЗапланироватьДействияСПечатнымиФормами(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент),
		ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
	
	ПрочитатьЭлектронныеПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудников(Команда)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДату(
		Элементы.ЭлектронныеПодписиСотрудников, Объект.Организация, , Объект.Дата, Истина, АдресСпискаПодобранных());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СохранитьВАрхивОригиналИПодписиДокумента(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		КадровыйЭДОКлиент.СохранитьПечатныеФормыНаДиск(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлСДиска()
	
	ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузкиФайла.ИдентификаторФормы = УникальныйИдентификатор;
	
	ПараметрыЗагрузкиФайла.Диалог.МножественныйВыбор = Ложь;
	ПараметрыЗагрузкиФайла.Диалог.Заголовок = НСтр("ru = 'Выберите документ'");
	
	ФайлыФильтра = Новый Массив;
	ФайлыФильтра.Добавить(СтрШаблон(
		НСтр("ru = 'Электронные документы (%1)|%1'"),
		РасширенияЭлектронныхДокументов()));
	ФайлыФильтра.Добавить(НСтр("ru = 'Все файлы (*.*)|*.*'"));
	
	ПараметрыЗагрузкиФайла.Диалог.Фильтр = СтрСоединить(ФайлыФильтра, "|");
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайлаСДиска", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(Оповещение, ПараметрыЗагрузкиФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаСДиска(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		ПрочитатьДанныеФайлаСДиска(ВыбранныеФайлы[0]);
		УстановитьОтображениеЭлементовФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	Если Параметры.Ключ.Пустая() Тогда
		Заголовок = НСтр("ru = 'Карточка электронного документа (создание)'");
	Иначе
		
		Заголовок = СтрШаблон(
			НСтр("ru = 'Карточка электронного документа. %1'"),
			Объект.КатегорияДокумента);
		
		Если Объект.ВнешниеПодписанты.Количество() = 1 Тогда
			ФизическоеЛицо = Объект.ВнешниеПодписанты[0].ФизическоеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	ПрочитатьДанныеФайла();
	ПрочитатьЭлектронныеПодписи();
	УстановитьОтображениеЭлементовФормы(ЭтотОбъект);
	
	Если Объект.Внешний Тогда
		Если Параметры.Ключ.Пустая() Тогда
			ТребуетсяПодписьОрганизации = ЭлектронныеПодписи.Выгрузить(
				Новый Структура("ПодписьСотрудника", Ложь)).Количество() = 0;
		Иначе
			НаправленияНаПодпись =
				РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.НаправленияНаПодпись(
					Объект.ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(НаправленияНаПодпись) Тогда
				ТребуетсяПодписьОрганизации = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронныеПодписи.Выгрузить(Новый Структура("ПодписьСотрудника", Истина)).Количество() > 1 Тогда
		ВыборОзнакомляемых = 1;
	Иначе
		ВыборОзнакомляемых = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЭлектронныеПодписи(РезультатыПроверки = Неопределено)
	
	ЭлектронныеПодписи.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументКЭДО", Объект.Ссылка);
		Запрос.УстановитьПараметр(
			"ФизическиеЛица", Объект.ВнешниеПодписанты.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
			|	ЕСТЬNULL(ПодписиДокументовКЭДО.Отпечаток, """") КАК Отпечаток,
			|	ПодписиДокументовКЭДО.ДатаПодписи КАК ДатаПодписи,
			|	ФизическиеЛица.ФИО КАК КомуВыданСертификат
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписиДокументовКЭДО КАК ПодписиДокументовКЭДО
			|		ПО ФизическиеЛица.Ссылка = ПодписиДокументовКЭДО.ФизическоеЛицо
			|			И (ПодписиДокументовКЭДО.Объект = &ДокументКЭДО)
			|ГДЕ
			|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПодписиДокументовКЭДО.ФизическоеЛицо,
			|	ПодписиДокументовКЭДО.Отпечаток,
			|	ПодписиДокументовКЭДО.ДатаПодписи,
			|	ПодписиДокументовКЭДО.ФизическоеЛицо.ФИО
			|ИЗ
			|	РегистрСведений.ПодписиДокументовКЭДО КАК ПодписиДокументовКЭДО
			|ГДЕ
			|	ПодписиДокументовКЭДО.Объект = &ДокументКЭДО
			|	И НЕ ПодписиДокументовКЭДО.ФизическоеЛицо В (&ФизическиеЛица)";
		
		УстановитьПривилегированныйРежим(Истина);
		ПодписиФизическихЛицДокумента = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.УстановитьПараметр("ПодписанныйОбъект", Объект.ЭлектронныйДокумент);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
			|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
			|	ЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
			|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
			|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
			|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
			|	ЭлектронныеПодписи.Подпись КАК Подпись,
			|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
			|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
			|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись,
			|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток
			|ИЗ
			|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
			|ГДЕ
			|	ЭлектронныеПодписи.ПодписанныйОбъект = &ПодписанныйОбъект";
		
		ЭлектронныеПодписи.Очистить();
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаПодписи = ЭлектронныеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодписи, Выборка);
			СтрокаПодписи.АдресПодписи = ПоместитьВоВременноеХранилище(Выборка.Подпись.Получить(), УникальныйИдентификатор);
			РаботаСФайламиСлужебныйКлиентСервер.ЗаполнитьСтатусПодписи(СтрокаПодписи);
			Если ЗначениеЗаполнено(СтрокаПодписи.Отпечаток) Тогда
				СотрудникПодписи = ПодписиФизическихЛицДокумента.Найти(СтрокаПодписи.Отпечаток, "Отпечаток");
				Если СотрудникПодписи <> Неопределено Тогда
					СтрокаПодписи.ФизическоеЛицо = СотрудникПодписи.ФизическоеЛицо;
					СтрокаПодписи.ПодписьСотрудника = Истина;
					ПодписиФизическихЛицДокумента.Удалить(СотрудникПодписи);
				КонецЕсли;
			КонецЕсли;
			Если РезультатыПроверки <> Неопределено Тогда
				
				РезультатПроверки = РезультатыПроверки.Получить(СтрокаПодписи.Отпечаток);
				Если РезультатПроверки <> Неопределено Тогда
					СтрокаПодписи.Статус = РезультатПроверки.Статус;
					СтрокаПодписи.ПодписьВерна = РезультатПроверки.ПодписьВерна;
					СтрокаПодписи.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
					СтрокаПодписи.ДатаПроверкиПодписи = РезультатПроверки.ДатаПроверкиПодписи;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПолучитьОтпечаткиПодписей = ПодписиФизическихЛицДокумента.Количество() > 0;
		Для Каждого СотрудникПодписи Из ПодписиФизическихЛицДокумента Цикл
			СтрокаПодписи = ЭлектронныеПодписи.Добавить();
			СтрокаПодписи.ФизическоеЛицо = СотрудникПодписи.ФизическоеЛицо;
			СтрокаПодписи.КомуВыданСертификат = СотрудникПодписи.КомуВыданСертификат;
			СтрокаПодписи.ДатаПодписи = СотрудникПодписи.ДатаПодписи;
			СтрокаПодписи.ПодписьСотрудника = Истина;
		КонецЦикла;
		
		ОбновитьПорядокПодписей();
		
	КонецЕсли;
	
	Элементы.ЭлектронныеПодписиСотрудников.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ПодписьСотрудника", Истина));
	Элементы.ЭлектронныеПодписи.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ПодписьСотрудника", Ложь));
	
	УстановитьПодсказкуСотруднику(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеФайлаСДиска(ВыбранныйФайл)
	
	Модифицированность = Истина;
	
	Файл = Новый Файл(ВыбранныйФайл.ИмяФайла);
	ИмяФайлаСРасширением = Файл.Имя;
	Расширение = СтрЗаменить(Файл.Расширение, ".", "");
	
	ДанныеПрисоединенногоФайла = Новый Структура;
	ДанныеПрисоединенногоФайла.Вставить("Зашифрован", Ложь);
	ДанныеПрисоединенногоФайла.Вставить("СсылкаНаДвоичныеДанные", ВыбранныйФайл.Хранение);
	
	ПрименитьДанныеПрисоединенногоФайла(ЭтотОбъект, ДанныеПрисоединенногоФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФайла()
	
	Если Не ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
		ИмяФайлаСРасширением = НСтр("ru = 'Выбрать'");
		Возврат;
	КонецЕсли;
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Объект.ЭлектронныйДокумент, ПараметрыДанныхФайла);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
			ЭтотОбъект,
			"ИмяФайлаСРасширением",
			КраткоеПредставлениеОшибки(Ошибка));
		ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Объект.ЭлектронныйДокумент, ПараметрыДанныхФайла);
	КонецПопытки;
	
	ИмяФайлаСРасширением = ДанныеФайла.ИмяФайла;
	Расширение = ДанныеФайла.Расширение;
	Если ЗначениеЗаполнено(Расширение)
		И Не СтрЗаканчиваетсяНа(ИмяФайлаСРасширением, Расширение) Тогда
		
		ИмяФайлаСРасширением = СтрШаблон("%1.%2", ИмяФайлаСРасширением, Расширение);
	КонецЕсли;
	
	ДанныеПрисоединенногоФайла = Новый Структура;
	ДанныеПрисоединенногоФайла.Вставить("Зашифрован", ДанныеФайла.Зашифрован);
	ДанныеПрисоединенногоФайла.Вставить("СсылкаНаДвоичныеДанные", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	ПрименитьДанныеПрисоединенногоФайла(ЭтотОбъект, ДанныеПрисоединенногоФайла);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьДанныеПрисоединенногоФайла(УправляемаяФорма, ДанныеПрисоединенногоФайла)
	
	УправляемаяФорма.ДанныеЭлектронногоДокумента = Новый ФиксированнаяСтруктура(ДанныеПрисоединенногоФайла);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ДатаПроверкиПодписи");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ПодписьВерна");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ПодписьСотрудника");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.КомуВыданСертификат");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ЭлектронныеПодписи.ФизическоеЛицо"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЭлектронныеПодписиСотрудниковКомуВыданСертификат");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьНаКлиенте()
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(Расширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьЭлектронныйДокументПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныйДокументПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		ОткрытьЭлектронныйДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныйДокумент()
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(
		Объект.ЭлектронныйДокумент, Неопределено, УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочте()
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый Массив;
	
	ОписанияФайлов = КадровыйЭДОВызовСервера.ФайлыПечатныхФормДляСохраненияНаДиск(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ЭлектронныйДокумент));
	
	Для Каждого ОписанияФайла Из ОписанияФайлов Цикл
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ОписанияФайла.Имя);
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ОписанияФайла.Хранение);
		СписокВложений.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Получатель");
	ПараметрыОтправки.Вставить("Тема", Строка(Объект.ЭлектронныйДокумент));
	ПараметрыОтправки.Вставить("Текст", ПараметрыОтправки.Тема);
	ПараметрыОтправки.Вставить("Вложения", СписокВложений);
	ПараметрыОтправки.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранных()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица",
		Объект.ВнешниеПодписанты.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо В(&ФизическиеЛица)";
	
	УстановитьПривилегированныйРежим(Истина);
	ВыбранныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПоместитьВоВременноеХранилище(ВыбранныеСотрудники, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьВыборСотрудников(ВыбранныеСотрудники)
	
	ОбновитьПредставление = Ложь;
	ОбновитьПорядокПодписей = Ложь;
	Для Каждого Сотрудник Из ВыбранныеСотрудники Цикл
		
		ФизическоеЛицо = КадровыйУчетПовтИсп.ФизическоеЛицоСотрудника(Сотрудник);
		СтруктураПоиска = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		Если Объект.ВнешниеПодписанты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ОбновитьПредставление = Истина;
			НовыйПодписант = Объект.ВнешниеПодписанты.Добавить();
			НовыйПодписант.ФизическоеЛицо = ФизическоеЛицо;
			Если ДобавитьПодпись(ФизическоеЛицо) Тогда
				ОбновитьПорядокПодписей = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбновитьПорядокПодписей Тогда
		ОбновитьПорядокПодписей();
	КонецЕсли;
	
	Если ОбновитьПредставление Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеФайлаЗаполнены(УправляемаяФорма)
	Возврат ЗначениеЗаполнено(УправляемаяФорма.Объект.ЭлектронныйДокумент)
		Или (УправляемаяФорма.ДанныеЭлектронногоДокумента <> Неопределено
			И ЗначениеЗаполнено(УправляемаяФорма.ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные))
КонецФункции

// Работа с подписями

&НаСервере
Функция ЗаполнитьКоллекцииПодписей()

	ПодписиСервиса = Новый Массив;
	ПодписиИБ = Новый Массив;
	
	Для каждого СтрокаПодписи Из ЭлектронныеПодписи Цикл
		Если ЗначениеЗаполнено(СтрокаПодписи.ДатаПодписи) Тогда
			Если ЗначениеЗаполнено(СтрокаПодписи.АдресПодписи) Тогда
				Если КабинетСотрудника.ЭтоПодписанСервиса(СтрокаПодписи.Комментарий) Тогда
					ПодписиСервиса.Добавить(СтрокаПодписи.ПолучитьИдентификатор());
				Иначе
					ПодписиИБ.Добавить(СтрокаПодписи.ПолучитьИдентификатор());
				КонецЕсли;
			Иначе
				СтрокаПодписи.Статус = НСтр("ru = 'Требуется собственноручная подпись'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоллекцияПодписей = Новый Структура();
	КоллекцияПодписей.Вставить("ПодписиСервиса", ПодписиСервиса);
	КоллекцияПодписей.Вставить("ПодписиИБ", ПодписиИБ);
	
	Возврат КоллекцияПодписей;

КонецФункции

&НаКлиенте
Функция ВыполнитьОбработкуПодписейСервиса(ОповещениеЗавершения = Неопределено)
	
	ПодписиСервиса = ПодписиЗагруженныеИзСервиса();
	Если ПодписиСервиса.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТаблицаПодписей", ПодписиСервиса);
	ДополнительныеПараметры.Вставить("СсылкаНаДвоичныеДанные", ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные);
	Если ОповещениеЗавершения <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПодписейСервисаПослеСозданияМенеджера", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбработатьПодписиСервиса(ОписаниеОповещения);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПодписиСервиса(ОписаниеОповещения)
	
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПроверкаПодписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписиСервисаПослеСозданияМенеджера(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	ПеречитатьПодписи = Ложь;
	Для Каждого ДанныеСтроки Из ДополнительныеПараметры.ТаблицаПодписей Цикл
		ОбновитьСтроку = Не ЗначениеЗаполнено(ДанныеСтроки.Отпечаток);
		ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, ДополнительныеПараметры);
		Если ОбновитьСтроку И ЗначениеЗаполнено(ДанныеСтроки.Отпечаток) Тогда
			ОбновитьДанныеСертификатов(Объект.ЭлектронныйДокумент, ДанныеСтроки.ПорядковыйНомер,
				ДанныеСтроки.Отпечаток, ДанныеСтроки.АдресСертификата);
			ПеречитатьПодписи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПеречитатьПодписи Тогда
		ЗапланироватьПеречитатьЭлектронныеПодписи();
	Иначе
		УстановитьПодсказкуСотруднику(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыПодписейСервисаПослеСозданияМенеджера(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	ПеречитатьПодписи = Ложь;
	Для Каждого ДанныеСтроки Из ДополнительныеПараметры.ТаблицаПодписей Цикл
		ЗаполнитьДанныеСертификатаПодписи(МенеджерКриптографии, ДанныеСтроки, Неопределено,
			ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи));
		Если ЗначениеЗаполнено(ДанныеСтроки.Отпечаток) Тогда
			ОбновитьДанныеСертификатов(Объект.ЭлектронныйДокумент, ДанныеСтроки.ПорядковыйНомер,
				ДанныеСтроки.Отпечаток, ДанныеСтроки.АдресСертификата);
			ПеречитатьПодписи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПеречитатьПодписи Тогда
		ЗапланироватьПеречитатьЭлектронныеПодписи();
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьПеречитатьЭлектронныеПодписи()
	
	ПодключитьОбработчикОжидания("ПрочитатьЭлектронныеПодписиНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЭлектронныеПодписиНаКлиенте()
	
	РезультатыПроверки = Новый Соответствие;
	Для Каждого ДанныеПодписи Из ЭлектронныеПодписи Цикл
		Если ЗначениеЗаполнено(ДанныеПодписи.Отпечаток) Тогда
			РезультатыПроверки.Вставить(ДанныеПодписи.Отпечаток,
				Новый Структура("Статус,ПодписьВерна,ОписаниеОшибки,ДатаПроверкиПодписи",
					ДанныеПодписи.Статус,
					ДанныеПодписи.ПодписьВерна,
					ДанныеПодписи.ОписаниеОшибки,
					ДанныеПодписи.ДатаПроверкиПодписи));
		КонецЕсли;
	КонецЦикла;
	ПрочитатьЭлектронныеПодписи(РезультатыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСертификатаПодписи(МенеджерКриптографии, ДанныеСтроки, Сертификат, ДвоичныеДанныеПодписи)
	
	Попытка
		ДанныеСертификата = КадровыйЭДОКлиент.ДанныеСертификатаПодписи(
			МенеджерКриптографии, ДвоичныеДанныеПодписи);
		Если ЗначениеЗаполнено(ДанныеСертификата.Отпечаток) Тогда
			Сертификат = ДанныеСертификата.Сертификат;
			ДанныеСтроки.Отпечаток = ДанныеСертификата.Отпечаток;
			ДанныеСтроки.АдресСертификата = ДанныеСертификата.АдресСертификата;
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, ДополнительныеПараметры)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.СсылкаНаДвоичныеДанные);
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	
	Попытка
		
		Сертификат = Неопределено;
		ЗаполнитьДанныеСертификатаПодписи(МенеджерКриптографии, ДанныеСтроки, Сертификат, ДвоичныеДанныеПодписи);
		
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
		
		МассивРежимовПроверки = Новый Массив;
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьПроверкуВСпискеОтозванныхСертификатов);
		МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.ПодписьВерна = Истина;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Отпечаток) Тогда
			ДанныеСтроки.Отпечаток = Base64Строка(Сертификат.Отпечаток);
			ДанныеСтроки.АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат.Выгрузить(), УникальныйИдентификатор);
			СохранитьСертификатПодписи(
				Объект.ЭлектронныйДокумент,
				ДанныеСтроки.ПорядковыйНомер,
				ДанныеСтроки.Отпечаток,
				ДанныеСтроки.АдресСертификата);
		КонецЕсли;
		
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Не верна'");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + ": " + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.ПодписьВерна = Ложь;
	КонецПопытки;
	
	ДанныеСтроки.ДатаПроверкиПодписи = ТекущаяДата();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСертификатов(ПодписанныйОбъект, ПорядковыйНомер, Отпечаток, АдресСертификата)
	
	КадровыйЭДО.СохранитьСертификатПодписи(Объект.ЭлектронныйДокумент, ПорядковыйНомер, Отпечаток, АдресСертификата);
	ПодписиСотрудников = ЭлектронныеПодписи.Выгрузить(Новый Структура("ПодписьСотрудника,Отпечаток", Истина, ""));
	Если ПодписиСотрудников.Количество() > 0 Тогда
		СтрокиПодписи = ЭлектронныеПодписи.НайтиСтроки(Новый Структура(
			"ПорядковыйНомер,Отпечаток", ПорядковыйНомер, Отпечаток));
		Если СтрокиПодписи.Количество() > 0 Тогда
			СтрокаПодписи = СтрокиПодписи[0];
			Если СтрокаПодписи <> Неопределено Тогда
				Для Каждого СтрокаПодписиСотрудника Из ПодписиСотрудников Цикл
					Если СтрокаПодписиСотрудника.КомуВыданСертификат = СтрокаПодписи.КомуВыданСертификат Тогда
						КадровыйЭДО.СохранитьПодписьДокументаКЭДО(Объект.Ссылка, СтрокаПодписиСотрудника.ФизическоеЛицо,
							СтрокаПодписи.Отпечаток, СтрокаПодписи.ДатаПодписи);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСертификатПодписи(Знач ПодписанныйОбъект, Знач ПорядковыйНомер, Знач Отпечаток, Знач АдресСертификата)
	КадровыйЭДО.СохранитьСертификатПодписи(ПодписанныйОбъект, ПорядковыйНомер, Отпечаток, АдресСертификата);
КонецПроцедуры

// Управление отображением элементов формы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовФормы(УправляемаяФорма)
	
	Объект = УправляемаяФорма.Объект;
	Элементы = УправляемаяФорма.Элементы;
	
	Если Объект.КатегорияДокумента = ПредопределенноеЗначение("Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФизическоеЛицо",
			"Заголовок",
			НСтр("ru = 'Ознакомить'"));
			
	КонецЕсли;
	
	УстановитьПодсказкуСотруднику(УправляемаяФорма);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПередатьВ1СКабинетСотрудника",
		"Видимость",
		Объект.Внешний);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПередатьВ1СКабинетСотрудника",
		"Доступность",
		ДанныеФайлаЗаполнены(УправляемаяФорма));
	
	// Ознакомляемые печатных форм
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФизическоеЛицо",
		"Видимость",
		ЗначениеЗаполнено(УправляемаяФорма.ФизическоеЛицо) И Не Объект.Внешний);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписиСотрудниковГруппа",
		"Видимость",
		Не ЗначениеЗаполнено(УправляемаяФорма.ФизическоеЛицо) Или Объект.Внешний);
	
	// Ознакомляемые внешних документов
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОзнакомляемыеВнешнегоДокументаГруппа",
		"Видимость",
		Объект.Внешний);
	
	УстановитьОтображениеЭлементовПоОрганизации(УправляемаяФорма);
	УстановитьОтображениеОзнакомляемых(УправляемаяФорма);
	УстановитьОтображениеЭлектронногоДокумента(УправляемаяФорма);
	
	// Основание
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОснованиеДокумента",
		"Видимость",
		ЗначениеЗаполнено(Объект.Ссылка)
			И Объект.Ссылка <> Объект.ОснованиеДокумента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИмяФайлаСРасширением",
		"Видимость",
		ЗначениеЗаполнено(УправляемаяФорма.ИмяФайлаСРасширением)
			Или ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПросмотреть",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОтправить",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент)
			И СтрНайти(УправляемаяФорма.Расширение, "PDF") > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЭлектронныеПодписи",
		"Доступность",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СохранитьВсеВАрхив",
		"Доступность",
		ЗначениеЗаполнено(Объект.ЭлектронныйДокумент));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеОзнакомляемых(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ОзнакомляемоеФизическоеЛицо",
		"Доступность",
		УправляемаяФорма.ВыборОзнакомляемых = 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ВыбратьСотрудников",
		"Доступность",
		УправляемаяФорма.ВыборОзнакомляемых = 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ЭлектронныеПодписиСотрудников",
		"Доступность",
		УправляемаяФорма.ВыборОзнакомляемых = 1);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлектронногоДокумента(УправляемаяФорма)
	
	ТекстПодсказки = "";
	Если СтрНайти(РасширенияЭлектронныхДокументов(), "." + НРег(УправляемаяФорма.Расширение)) = 0 Тогда
		ТекстПодсказки = НСтр("ru = 'Просмотр документа может быть недоступен на устройствах сотрудников. Рекомендуем
			|- либо конвертировать документ в pdf-формат, который может быть просмотрен почти на любом устройстве
			|- либо отсканировать документ'");
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		УправляемаяФорма,
		"ИмяФайлаСРасширением",
		ТекстПодсказки);
	
	ДоступностьЭлементов =
		УправляемаяФорма.ДанныеЭлектронногоДокумента <> Неопределено
			И УправляемаяФорма.ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанные <> Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ФормаПросмотреть",
		"Доступность",
		ДоступностьЭлементов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ФормаОтправить",
		"Доступность",
		ДоступностьЭлементов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ЭлектронныеПодписиГруппа",
		"Доступность",
		ДоступностьЭлементов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РасширенияЭлектронныхДокументов()
	
	Возврат "*.pdf;*.jpg;*.jpeg;*.png;*.tiff";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуСотруднику(УправляемаяФорма)
	
	ПодсказкаСотрудника = "";
	Если ЗначениеЗаполнено(УправляемаяФорма.ФизическоеЛицо) Тогда
		
		ПодписиСотрудника = УправляемаяФорма.ЭлектронныеПодписи.НайтиСтроки(
			Новый Структура("ФизическоеЛицо,ПодписьСотрудника", УправляемаяФорма.ФизическоеЛицо, Истина));
		
		Если ПодписиСотрудника.Количество() > 0 Тогда
			
			Для Каждого ПодписьСотрудника Из ПодписиСотрудника Цикл
				
				Если ЗначениеЗаполнено(ПодписьСотрудника.ДатаПодписи) Тогда
					
					ПодсказкаСотрудника = СтрШаблон(
						НСтр("ru = 'Подписан: %1'"),
							Формат(ПодписьСотрудника.ДатаПодписи, "ДЛФ=DT"));
					
					Если ЗначениеЗаполнено(ПодписьСотрудника.Статус) Тогда
						
						ЧастиИнформацииОПроверке = Новый Массив;
						ЧастиИнформацииОПроверке.Добавить(ПодписьСотрудника.Статус);
						
						Если ЗначениеЗаполнено(ПодписьСотрудника.ОписаниеОшибки) Тогда
							ЧастиИнформацииОПроверке.Добавить(ПодписьСотрудника.ОписаниеОшибки);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ПодписьСотрудника.ДатаПроверкиПодписи) Тогда
							ЧастиИнформацииОПроверке.Добавить(Формат(ПодписьСотрудника.ДатаПроверкиПодписи, "ДЛФ=DT"));
						КонецЕсли;
						
						ПодсказкаСотрудника = СтрШаблон(
							"%1 (%2)",
							ПодсказкаСотрудника,
							СтрСоединить(ЧастиИнформацииОПроверке, ", "));
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		УправляемаяФорма, "ФизическоеЛицо", ПодсказкаСотрудника);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовПоОрганизации(УправляемаяФорма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ОзнакомляемыеВнешнегоДокументаГруппа",
		"Доступность",
		ЗначениеЗаполнено(УправляемаяФорма.Объект.Организация));
	
КонецПроцедуры

&НаСервере
Процедура ОзнакомляемоеФизическоеЛицоПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ПрежнееФизическоеЛицо = Неопределено;
		Если Объект.ВнешниеПодписанты.Количество() = 0 Тогда
			СтрокаПодписанта = Объект.ВнешниеПодписанты.Добавить();
		Иначе
			СтрокаПодписанта = Объект.ВнешниеПодписанты[0];
			ПрежнееФизическоеЛицо = СтрокаПодписанта.ФизическоеЛицо;
		КонецЕсли;
		
		СтрокаПодписанта.ФизическоеЛицо = ФизическоеЛицо;
		
		Если ЗначениеЗаполнено(ПрежнееФизическоеЛицо) Тогда
			УдалитьПодпись(ПрежнееФизическоеЛицо);
		КонецЕсли;
		
		Если ДобавитьПодпись(ФизическоеЛицо) Тогда
			ОбновитьПорядокПодписей();
		КонецЕсли;
		
	Иначе
		Если Объект.ВнешниеПодписанты.Количество() > 0 Тогда
			УдалитьПодпись(Объект.ВнешниеПодписанты[0].ФизическоеЛицо);
			Объект.ВнешниеПодписанты.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПодпись(ФизическоеЛицо)
	
	Добавлена = Ложь;
	СтрокиПодписи = ЭлектронныеПодписи.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Если СтрокиПодписи.Количество() = 0 Тогда
		СтрокаПодписи = ЭлектронныеПодписи.Добавить();
		СтрокаПодписи.ФизическоеЛицо = ФизическоеЛицо;
		СтрокаПодписи.ПодписьСотрудника = Истина;
		Добавлена = Истина;
	КонецЕсли;
	
	Возврат Добавлена;
	
КонецФункции

&НаСервере
Процедура УдалитьПодпись(ФизическоеЛицо)
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		СтрокиПодписи = ЭлектронныеПодписи.НайтиСтроки(
			Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		
		Если СтрокиПодписи.Количество() > 0 Тогда
			Если Не ЗначениеЗаполнено(СтрокиПодписи[0].ДатаПодписи) Тогда
				ЭлектронныеПодписи.Удалить(СтрокиПодписи[0]);
			Иначе
				СтрокиПодписи[0].ПодписьСотрудника = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПорядокПодписей()
	
	ЭлектронныеПодписи.Сортировать("ФизическоеЛицо");
	
КонецПроцедуры

&НаСервере
Процедура ВыборОдногоОзнакомляемогоПриИзмененииНаСервере()
	
	Если ВыборОзнакомляемых = 0 Тогда
		Если Объект.ВнешниеПодписанты.Количество() > 0 Тогда
			
			ОставляемоеФизическоеЛицо = Неопределено;
			Если Элементы.ЭлектронныеПодписиСотрудников.ТекущаяСтрока <> Неопределено Тогда
				ТекущиеДанные = ЭлектронныеПодписи.НайтиПоИдентификатору(
					Элементы.ЭлектронныеПодписиСотрудников.ТекущаяСтрока);
				ОставляемоеФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо;
			КонецЕсли;
			
			Если ОставляемоеФизическоеЛицо = Неопределено Тогда
				ОставляемоеФизическоеЛицо = Объект.ВнешниеПодписанты[0].ФизическоеЛицо
			КонецЕсли;
			
			УдаляемыеСтроки = Новый Массив;
			Для Каждого СтрокаОзнакомляемого Из Объект.ВнешниеПодписанты Цикл
				Если СтрокаОзнакомляемого.ФизическоеЛицо <> ОставляемоеФизическоеЛицо Тогда
					УдаляемыеСтроки.Добавить(СтрокаОзнакомляемого);
					УдалитьПодпись(СтрокаОзнакомляемого.ФизическоеЛицо);
				Иначе
					ФизическоеЛицо = ОставляемоеФизическоеЛицо
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаОзнакомляемого Из УдаляемыеСтроки Цикл
				Объект.ВнешниеПодписанты.Удалить(СтрокаОзнакомляемого);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	УстановитьОтображениеОзнакомляемых(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПодписиЗагруженныеИзСервиса()
	
	КоллекцияПодписей = ЗаполнитьКоллекцииПодписей();
	ПодписиСервиса = Новый Массив;
	Для каждого Идентификатор Из КоллекцияПодписей.ПодписиСервиса Цикл
		СтрокаПодписи = ЭлектронныеПодписи.НайтиПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(СтрокаПодписи.Отпечаток) Тогда
			ПодписиСервиса.Добавить(СтрокаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодписиСервиса;
	
КонецФункции

#КонецОбласти
