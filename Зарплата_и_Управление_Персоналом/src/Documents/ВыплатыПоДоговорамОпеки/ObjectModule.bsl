#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаНачала, "Объект.ДатаНачала", Отказ, НСтр("ru='Дата начала'"), , , Ложь);
	ВыплатыПоДоговорамОпеки.ПроверитьДатаОкончанияНеМеньшеДатыНачала(ДатаНачала, ДатаОкончания, ЭтотОбъект, "ДатаОкончания", Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, , Истина)
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВыплатыПоДоговорамОпеки") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Номер,Дата");
		Для Каждого СтрокаДокументаИсточника Из ДанныеЗаполнения.Выплаты Цикл 
			НоваяСтрока = Выплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументаИсточника, , "ИдентификаторВыплаты");
			НоваяСтрока.ИдентификаторВыплаты = Новый УникальныйИдентификатор;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	УсловияДоговора = ДанныеДляПроведения.УсловияДоговора;
	УсловияВыплат = ДанныеДляПроведения.УсловияВыплат;
	
	Движения.УсловияДоговораОпеки.Записывать = Истина;
    НоваяСтрока = Движения.УсловияДоговораОпеки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, УсловияДоговора);
	НоваяСтрока.Период = ДатаНачала;
	
	Для Каждого Строка Из УсловияВыплат Цикл
		
		Движения.УсловияВыплатПоДоговоруОпеки.Записывать = Истина;
	    НоваяСтрока = Движения.УсловияВыплатПоДоговоруОпеки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период = ДатаНачала;
		
	КонецЦикла;
	
	КадровыйУчет.СформироватьДвиженияДоговоровГПХ(Движения, ДанныеДляПроведения.ПериодыДействияДоговоровГражданскоПравовогоХарактера);
	УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляРегистрацииВУчетаСтажаПФР());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает таблицу значений - данные, необходимые для формирования плановых начислений по договорам.
//
Функция ДанныеДляПроведения()
	
	Если ПолучаетСтраховуюПенсию Тогда
		КодДоходаСтраховыеВзносы = ?(ОблагаетсяФСС_НС, 
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДоходовПоСтраховымВзносам.ВыплатыПоДоговорамОпекиПолучающимСтраховыеПенсииОблагаемыеФСС_НС"),
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДоходовПоСтраховымВзносам.ВыплатыПоДоговорамОпекиПолучающимСтраховыеПенсии"));
	Иначе 
		КодДоходаСтраховыеВзносы = УчетСтраховыхВзносов.ВидДоходаДляДоговораНаВыполнениеРабот(ОблагаетсяФСС_НС);
	КонецЕсли;
	НДФЛДоговорыРаботыУслуги = УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	КодДохода = НДФЛДоговорыРаботыУслуги[0];
	ВычетыКДоходам = УчетНДФЛ.ВычетыКДоходам(Год(Дата));
	КодВычета = ВычетыКДоходам[КодДохода][0];
	
	
	УсловияДоговора = Новый Структура;
	УсловияДоговора.Вставить("Организация", Организация);
	УсловияДоговора.Вставить("Сотрудник", Сотрудник);
	УсловияДоговора.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	УсловияДоговора.Вставить("Договор", Ссылка);
	УсловияДоговора.Вставить("КодДохода", КодДохода);
	УсловияДоговора.Вставить("КодВычета", КодВычета);
	УсловияДоговора.Вставить("КодДоходаСтраховыеВзносы", КодДоходаСтраховыеВзносы);
	УсловияДоговора.Вставить("СпособОтраженияЗарплатыВБухучете", СпособОтраженияЗарплатыВБухучете);
	УсловияДоговора.Вставить("СтатьяФинансирования", СтатьяФинансирования);
	УсловияДоговора.Вставить("СтатьяРасходов", СтатьяРасходов);
	УсловияДоговора.Вставить("Подразделение", Подразделение);
	УсловияДоговора.Вставить("СуммаВычета", СуммаВычета);
	УсловияДоговора.Вставить("ДатаНачала", ДатаНачала);
	УсловияДоговора.Вставить("ДатаОкончания", ДатаОкончания);
	УсловияДоговора.Вставить("Территория", Территория);
	УсловияДоговора.Вставить("КатегорияДохода", КатегорияДохода);
	УсловияДоговора.Вставить("ПолучаетСтраховуюПенсию", ПолучаетСтраховуюПенсию);
	
	ДанныеДляПроведения = Новый Структура;
	ДанныеДляПроведения.Вставить("УсловияДоговора", УсловияДоговора);
	
	УсловияВыплат = Новый Массив;
	
	Дети = Новый Массив;
	Для Каждого СтрокаВыплаты Из Выплаты Цикл 
		Если ЗначениеЗаполнено(СтрокаВыплаты.Ребенок) И Дети.Найти(СтрокаВыплаты.Ребенок)=Неопределено Тогда 
			Дети.Добавить(СтрокаВыплаты.Ребенок);
		КонецЕсли;
	КонецЦикла;
	ДатыРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Дети, "ДатаРождения");
	
	Для Каждого СтрокаВыплаты Из Выплаты Цикл 
		
		Если ЗначениеЗаполнено(СтрокаВыплаты.Ребенок) Тогда 
			ДатаРождения = ДатыРождения.Получить(СтрокаВыплаты.Ребенок);
		Иначе 
			ДатаРождения = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаРождения) Тогда 
			Если СтрокаВыплаты.ВыплачиваетсяПриВозрастеОт>0 Тогда 
				ДатаНачалаВыплаты = ДобавитьМесяц(ДатаРождения, СтрокаВыплаты.ВыплачиваетсяПриВозрастеОт);
				Если СтрокаВыплаты.ИсключаяДатуОт Тогда 
					ДатаНачалаВыплаты = ДатаНачалаВыплаты + 24*60*60;
				КонецЕсли;
				Если ДатаНачалаВыплаты < ДатаНачала Тогда 
					ДатаНачалаВыплаты = ДатаНачала;
				КонецЕсли;
			Иначе 
				ДатаНачалаВыплаты = ДатаНачала;
			КонецЕсли;
			
			Если СтрокаВыплаты.ВыплачиваетсяПриВозрастеДо>0 Тогда 
				ДатаОкончанияВыплаты = ДобавитьМесяц(НачалоДня(НачалоДня(ДатаРождения)-1), СтрокаВыплаты.ВыплачиваетсяПриВозрастеДо);
				Если СтрокаВыплаты.ВключаяДатуДо Тогда 
					ДатаОкончанияВыплаты = ДатаОкончанияВыплаты + 24*60*60;
				КонецЕсли;
				Если ДатаОкончанияВыплаты > ДатаОкончания Тогда 
					ДатаОкончанияВыплаты = ДатаОкончания;
				КонецЕсли;
			Иначе 
				ДатаОкончанияВыплаты = ДатаОкончания;
			КонецЕсли;

		Иначе 
			ДатаНачалаВыплаты = ДатаНачала;
			ДатаОкончанияВыплаты = ДатаОкончания;
		КонецЕсли;
		
		
		Если ДатаОкончанияВыплаты<ДатаНачалаВыплаты Тогда 
			Продолжить;
		КонецЕсли;
		
		ПараметрыВыплаты = Новый Структура;
		ПараметрыВыплаты.Вставить("Договор", Ссылка);
		ПараметрыВыплаты.Вставить("ИдентификаторВыплаты", СтрокаВыплаты.ИдентификаторВыплаты);
		ПараметрыВыплаты.Вставить("ДатаНачала", ДатаНачалаВыплаты);
		ПараметрыВыплаты.Вставить("ДатаОкончания", ДатаОкончанияВыплаты);
		ПараметрыВыплаты.Вставить("СпособРасчета", СтрокаВыплаты.СпособРасчета);
		ПараметрыВыплаты.Вставить("ПрожиточныйМинимум", СтрокаВыплаты.ПрожиточныйМинимум);
		ПараметрыВыплаты.Вставить("Размер", СтрокаВыплаты.Размер);
		ПараметрыВыплаты.Вставить("Коэффициент", СтрокаВыплаты.Коэффициент);
		ПараметрыВыплаты.Вставить("Наименование", СтрокаВыплаты.Наименование);
		ПараметрыВыплаты.Вставить("Ребенок", СтрокаВыплаты.Ребенок);
		УсловияВыплат.Добавить(ПараметрыВыплаты);
	КонецЦикла;
	
	ДанныеДляПроведения.Вставить("УсловияВыплат", УсловияВыплат);
	
	ПериодыДействияДоговоровГражданскоПравовогоХарактера = Новый Структура;
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Организация", Организация);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Филиал", Организация);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Сотрудник", Сотрудник);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("ДатаНачала", ДатаНачала);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("ДатаОкончания", ДатаОкончания);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Подразделение", Подразделение);
	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Вставить("Территория", Территория);
	
	ДанныеДляПроведения.Вставить("ПериодыДействияДоговоровГражданскоПравовогоХарактера",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПериодыДействияДоговоровГражданскоПравовогоХарактера));
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР()
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	ДанныеДляРегистрации = Документы.ВыплатыПоДоговорамОпеки.ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок);
	
	Возврат ДанныеДляРегистрации[Ссылка];
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	Для Каждого СтрокаВыплат Из Выплаты Цикл 
		СтрокаВыплат.ИдентификаторВыплаты = Новый УникальныйИдентификатор;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли