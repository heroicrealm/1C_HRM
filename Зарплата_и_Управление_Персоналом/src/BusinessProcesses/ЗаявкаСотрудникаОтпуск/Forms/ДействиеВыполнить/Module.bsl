
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Ссылка = Объект.Ссылка;
	Если Ссылка.Пустая() Тогда
		ИнициализироватьФормуЗадачи();
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
			
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидОтпуска();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		ПараметрыГиперссылки = МодульРаботаСФайлами.ГиперссылкаФайлов();
		ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
		ПараметрыГиперссылки.Владелец = "Объект.БизнесПроцесс";
		МодульРаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БизнесПроцессыИЗадачиКлиент.ОбновитьДоступностьКомандПринятияКИсполнению(ЭтотОбъект);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	БизнесПроцессыЗаявокСотрудниковФормы.ЗаписатьРеквизитыБизнесПроцесса(ЭтотОбъект, ТекущийОбъект);
	
	ВыполнитьЗадачу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ВыполнитьЗадачу", Ложь);
	Если НЕ ВыполнитьЗадачу Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаданиеВыполнено И НЕ ЗначениеЗаполнено(ТекущийОбъект.РезультатВыполнения) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Укажите причину, по которой задача отклоняется.'"),,
			"Объект.РезультатВыполнения",,
			Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БизнесПроцессыИЗадачиКлиент.ФормаЗадачиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	Если ИмяСобытия = "Запись_Задание" Тогда
		Если (Источник = Объект.БизнесПроцесс ИЛИ (ТипЗнч(Источник) = Тип("Массив") 
			И Источник.Найти(Объект.БизнесПроцесс) <> Неопределено)) Тогда
			Прочитать();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаявкиСотрудниковЗаписанДокумент" Тогда
		Если (Источник = ЭтотОбъект) Тогда
			ЗаписанДокументОтпуск(Параметр);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ШаблонОтветаЗаписанСправочник" Тогда
		Если (Источник = ЭтотОбъект) Тогда
			ШаблонОтвета = Параметр;
			Элементы.ШаблонОтвета.Видимость = Истина;
			ШаблонОтветаПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализироватьФормуЗадачи();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеФайлаОтветаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПрисоединенныйФайл(ФайлОтвета);	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлНажатие(Элемент)
	УдалитьПрисоединенныйФайл();	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФайлНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПрисоединенныйФайл(ЭтотОбъект[Элемент.Имя]);	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОтветаПриИзменении(Элемент)
	ШаблонОтветаПриИзмененииНаСервере();	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаданиеОтпуска

&НаКлиенте
Процедура ЗаданиеОтпускаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаданиеОтпускаПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеОтпускаПослеУдаления(Элемент)
	ЗаданиеОтпускаПриОкончанииРедактированияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполненоВыполнить(Команда)
	Если ПодписыватьЗаявкиСотрудника Тогда
		БизнесПроцессыЗаявокСотрудниковКлиент.ПодписатьЗаявкуЭП(ЭтотОбъект, "ВыполненоВыполнитьЗавершение");
	Иначе
		ВыполненоВыполнитьЗавершение(Неопределено, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отказать(Команда)
	
	Отказ = Ложь;
	ОтказатьНаСервере(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ПодписыватьЗаявкиСотрудника Тогда
		БизнесПроцессыЗаявокСотрудниковКлиент.ПодписатьЗаявкуЭП(ЭтотОбъект, "ОтказатьЗавершение");
	Иначе
		ОтказатьЗавершение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	НаименованиеФормы = НаименованиеФормыДокумента();
	Если НаименованиеФормы <> "" Тогда
		Если Задание.УчебныйОтпуск Тогда
			ВыбратьВидОтпуска(ВидыУчебныхОтпусков());
		ИначеЕсли Задание.КоличествоДнейКомпенсации > 0 Тогда
			ВыбратьВидОтпуска(ВидыДополнительныхОтпусков());
		Иначе
			ОткрытьФорму(НаименованиеФормы, ПараметрыЗаполненияДокумента(), ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	БизнесПроцессыИЗадачиКлиент.ОткрытьДопИнформациюОЗадаче(Объект.Ссылка);	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	БизнесПроцессыЗаявокСотрудниковКлиент.ПринятьЗадачуКИсполнению(ЭтотОбъект, ТекущийПользователь);
	УстановитьВидимостьКнопокДействий();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачКИсполнению(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	Прочитать();	
	БизнесПроцессыИЗадачиКлиент.ОбновитьДоступностьКомандПринятияКИсполнению(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗадание(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	ПоказатьЗначение(,Объект.БизнесПроцесс);	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлОтвета(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ВыбратьФайлОтветаПослеПомещенияФайла", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файлы MS Word (*.doc;*.docx)|*.doc;*.docx|Файлы PDF(*.pdf;*.PDF)|*.pdf;*.PDF'");

	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;

	ФайловаяСистемаКлиент.ЗагрузитьФайл(Обработчик, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонОтвета(Команда)
	БизнесПроцессыЗаявокСотрудниковКлиент.СохранитьШаблонОтвета(ЭтотОбъект);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	КонецЕсли;	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СерверныеОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ШаблонОтветаПриИзмененииНаСервере()
	БизнесПроцессыЗаявокСотрудниковФормы.ПослеВыбораШаблона(ЭтотОбъект, ШаблонОтвета, Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиСобытийТаблицыЗаданиеОтпуска

&НаСервере
Процедура ЗаданиеОтпускаПриОкончанииРедактированияНаСервере()
	ЗаданиеОбъект = РеквизитФормыВЗначение("Задание");
	ЗаданиеОбъект.Отпуска.Очистить();
	Для каждого Запись Из Задание.Отпуска Цикл
		Если НЕ ЗначениеЗаполнено(Запись.Отпуск) Тогда
			Продолжить;	
		КонецЕсли;
		НоваяЗапись = ЗаданиеОбъект.Отпуска.Добавить();
		НоваяЗапись.Отпуск= Запись.Отпуск;
	КонецЦикла;
	ЗаданиеОбъект.Записать();
	ЗначениеВРеквизитФормы(ЗаданиеОбъект, "Задание");
	УстановитьВидимостьКнопокДействий();
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиКомандФормы

&НаСервере
Процедура ОтказатьНаСервере(Отказ)
	Если ПустаяСтрока(Задание.ОтветПоЗаявке)
		 И Не КабинетСотрудника.ВерсияПриложенияМеньшеВерсии("3.0.2.19") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнена причина отказа.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещения

&НаКлиенте
Процедура ВыбратьФайлОтветаПослеПомещенияФайла(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыЗаявокСотрудниковКлиент.ВыбратьФайлОтветаПослеПомещенияФайла(ЭтотОбъект,
																			   ПомещенныйФайл,
																			   ДополнительныеПараметры);																		   
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненоВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	БизнесПроцессыЗаявокСотрудниковКлиент.ВыполненоВыполнитьЗавершение(ЭтотОбъект, Результат, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	БизнесПроцессыЗаявокСотрудниковКлиент.ОтказатьЗавершение(ЭтотОбъект, Результат, ДополнительныеПараметры);
КонецПроцедуры	

#КонецОбласти

#Область ОткрытиеФормДокументов

&НаСервере
Функция ПараметрыЗаполненияДокумента(ВидОтпуска = Неопределено)
	
	ПараметрыЗаполнения = Новый Структура;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Ссылка", Неопределено);
	ДанныеЗаполнения.Вставить("Действие", "Заполнить");
	
	СотрудникИОрганизация = СотрудникИОрганизация();
	ДанныеЗаполнения.Вставить("Сотрудник", СотрудникИОрганизация.Сотрудник);
	ДанныеЗаполнения.Вставить("Организация", СотрудникИОрганизация.Организация);
	
	Если Задание.КоличествоДнейКомпенсации > 0 Тогда
		ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеКомпенсацииОтпусков(ВидОтпуска));
		ПараметрыЗаполнения.Вставить("ОсновнойОтпуск", Ложь);
	Иначе
		ЗаполнитьДанныеОтпусков(ПараметрыЗаполнения, ДанныеЗаполнения, ВидОтпуска);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("Основание", ДанныеЗаполнения);
		
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Функция ДанныеОтпусков(ВидОтпуска, Сотрудник)
	
	ВидОтпускаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОтпуска, "СпособРасчетаОтпуска, ОтпускЯвляетсяЕжегодным");
	
	ДанныеОтпуска = НовыйДанныеОтпуска();
	ДанныеОтпуска.ВидОтпуска = ВидОтпуска; 
	ДанныеОтпуска.ДатаНачала = Задание.ДатаНачалаОтпуска;
	ДанныеОтпуска.ДатаОкончания = Задание.ДатаОкончанияОтпуска;
	ПоКалендарнымДням = (ВидОтпускаРеквизиты.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях);
	ДанныеОтпуска.КоличествоДней = 
		УчетРабочегоВремениРасширенный.ДлительностьИнтервала(Сотрудник, Задание.ДатаНачалаОтпуска,
															 Задание.ДатаОкончанияОтпуска, ПоКалендарнымДням, 
															 ВидОтпускаРеквизиты.ОтпускЯвляетсяЕжегодным);
	ДанныеОтпуска.КоличествоДнейКомпенсации = Задание.КоличествоДнейКомпенсации;

	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОтпуска);
	
КонецФункции

&НаКлиенте
Функция НаименованиеФормыДокумента()
	Если Задание.ЗаСвойСчет Тогда
		Возврат "Документ.ОтпускБезСохраненияОплаты.Форма.ФормаДокумента";
	Иначе
		Возврат "Документ.Отпуск.Форма.ФормаДокумента";
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Функция СотрудникИОрганизация()
	
	Результат = Новый Структура("Сотрудник, Организация");
	
	Если ЗначениеЗаполнено(Задание.Организация) Тогда
		
		Результат.Организация = Задание.Организация;
		Если ЗначениеЗаполнено(Задание.Сотрудник) Тогда
			Результат.Сотрудник = Задание.Сотрудник;
		Иначе
			Результат.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(Задание.ФизическоеЛицо,
																				Задание.Организация,
																				Задание.ДатаНачалаОтпуска);
		КонецЕсли;
																			
	Иначе
		
		Если ЗначениеЗаполнено(Задание.Сотрудник) Тогда
			Результат.Сотрудник = Задание.Сотрудник;
		Иначе
			ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Истина, Задание.ФизическоеЛицо, Задание.ДатаНачалаОтпуска);
			ОсновнойСотрудник = ОсновныеСотрудники[Задание.ФизическоеЛицо];
			Результат.Сотрудник = ОсновнойСотрудник;
		КонецЕсли;
		
		КадровыеДанныеОсновногоСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОсновнойСотрудник, "Организация", Задание.ДатаНачалаОтпуска);
		Если КадровыеДанныеОсновногоСотрудника.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Сотрудник не принят на работу.'");	
		КонецЕсли;
		ОрганизацияОсновногоСотрудника = КадровыеДанныеОсновногоСотрудника.Найти(ОсновнойСотрудник).Организация;
		Результат.Организация = ОрганизацияОсновногоСотрудника;

	КонецЕсли;
																						 
	Возврат Результат;
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьДанныеОтпусков(ПараметрыЗаполнения, ДанныеЗаполнения, ВидОтпуска = Неопределено)
	Если Задание.ЗаСвойСчет Тогда
		ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков(ПредопределенноеЗначение("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет"), 
																   ДанныеЗаполнения.Сотрудник));																					 
	ИначеЕсли Задание.УчебныйОтпуск Тогда
		ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков(ВидОтпуска,
																   ДанныеЗаполнения.Сотрудник));
		ПараметрыЗаполнения.Вставить("ОсновнойОтпуск", Ложь);
	Иначе
		ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков(ПредопределенноеЗначение("Справочник.ВидыОтпусков.Основной"),
																   ДанныеЗаполнения.Сотрудник));
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеОтпуска()
		
	СтруктураОтпуска = Новый Структура;
		
	СтруктураОтпуска.Вставить("ВидОтпуска");
	СтруктураОтпуска.Вставить("ДатаНачала", Дата(1, 1, 1, 0, 0, 0));
	СтруктураОтпуска.Вставить("ДатаОкончания", Дата(1, 1, 1, 0, 0, 0));
	СтруктураОтпуска.Вставить("КоличествоДней");
	СтруктураОтпуска.Вставить("КоличествоДнейКомпенсации");
	СтруктураОтпуска.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", '00010101');
	СтруктураОтпуска.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск", '00010101');
	СтруктураОтпуска.Вставить("Основание", "");
	СтруктураОтпуска.Вставить("ВидОтпускаПрежний", Неопределено);
	СтруктураОтпуска.Вставить("ИндексСтрокиДокумента", Неопределено);
	
	Возврат СтруктураОтпуска;
	
КонецФункции

&НаСервере
Функция ДанныеКомпенсацииОтпусков(ВидОтпуска)
	
	ДанныеКомпенсацииОтпуска = НовыйДанныеОтпуска();
	ДанныеКомпенсацииОтпуска.ВидОтпуска = ВидОтпуска;
	ДанныеКомпенсацииОтпуска.КоличествоДнейКомпенсации = Задание.КоличествоДнейКомпенсации;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеКомпенсацииОтпуска);
	
КонецФункции

#КонецОбласти

#Область ВыборВидаОтпуска

&НаСервереБезКонтекста
Функция ВидыУчебныхОтпусков()
	
	ВидыУчебныхОтпусков = Новый Массив;
	ВидыУчебныхОтпусков.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтпусков.ОтпускУчебный"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтпускаБезОплаты") Тогда
		ВидыУчебныхОтпусков.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный"));
	КонецЕсли;
		
	Возврат ВидыУчебныхОтпусков;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьВидОтпуска(ВидыОтпусков)
	Оповещение = Новый ОписаниеОповещения("ВыбратьВидОтпускаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ВидыОтпусков", ВидыОтпусков);
	ОткрытьФорму("БизнесПроцесс.ЗаявкаСотрудникаОтпуск.Форма.ВыбратьВидОтпуска", ПараметрыОткрытия, ЭтотОбъект, , , ,
				 Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидОтпускаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(НаименованиеФормыДокумента(), ПараметрыЗаполненияДокумента(Результат), ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыДополнительныхОтпусков()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОтпусков.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыОтпусков КАК ВидыОтпусков
	               |ГДЕ
	               |	ВидыОтпусков.ОсновнойОтпуск = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗаписанДокументОтпуск(Результат)
	
	Отпуск = Неопределено;
	Если Результат <> Неопределено Тогда
		Отпуск = Результат;
	КонецЕсли;
		
	Если Отпуск = Неопределено ИЛИ Отпуск.Пустая() Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаписанДокументОтпускНаСервере(Отпуск);
	УстановитьВидимостьКнопокДействий();
			
КонецПроцедуры

&НаСервере
Процедура ЗаписанДокументОтпускНаСервере(Отпуск)	
	ЗаданиеОбъект = РеквизитФормыВЗначение("Задание");
	Если ЗаданиеОбъект.Отпуска.Найти(Отпуск) <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	НоваяЗапись = ЗаданиеОбъект.Отпуска.Добавить();
	НоваяЗапись.Отпуск = Отпуск;
	ЗаданиеОбъект.Записать();
	ЗначениеВРеквизитФормы(ЗаданиеОбъект, "Задание");
КонецПроцедуры

&НаСервере
Процедура УстановитьВидОтпуска()
	
	Если Задание.КоличествоДнейКомпенсации > 0 Тогда
		Элементы.ВидОтпуска.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Задание.УчебныйОтпуск Тогда
		ВидОтпуска = НСтр("ru = 'Учебный'");
	ИначеЕсли Задание.ЗаСвойСчет Тогда
		ВидОтпуска = НСтр("ru = 'За свой счет'");
	Иначе
		ВидОтпуска = НСтр("ru = 'Ежегодный'");	
	КонецЕсли;
	
	Элементы.ВидОтпуска.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокДействий()
	
	БизнесПроцессыЗаявокСотрудниковФормы.УстановитьВидимостьКнопокДействий(ЭтотОбъект, Задание.Отпуска);
	
	Если Объект.Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание.ЗаСвойСчет Тогда
		Элементы.СоздатьДокумент.Доступность = Элементы.СоздатьДокумент.Доступность И ПолучитьФункциональнуюОпцию("ИспользоватьОтпускаБезОплаты");
		Элементы.Выполнено.Доступность = (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтпускаБезОплаты")) ИЛИ Элементы.Выполнено.Доступность;	
	Иначе
		Элементы.СоздатьДокумент.Доступность = Элементы.СоздатьДокумент.Доступность И ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчетРасширенная");
		Элементы.Выполнено.Доступность = (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчетРасширенная")) ИЛИ Элементы.Выполнено.Доступность;
		Если Задание.УчебныйОтпуск Тогда
			УчебныйОтпуск = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный");
			Если УчебныйОтпуск <> Неопределено Тогда
				ИспользуютсяУчебныеОтпуска = НЕ УчебныйОтпуск.Недействителен;
				Элементы.СоздатьДокумент.Доступность = (ИспользуютсяУчебныеОтпуска И Элементы.СоздатьДокумент.Доступность);
				Элементы.Выполнено.Доступность = (НЕ ИспользуютсяУчебныеОтпуска ИЛИ Элементы.Выполнено.Доступность);
			Иначе
				Элементы.СоздатьДокумент.Доступность = Ложь;
				Элементы.Выполнено.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныйФайл(ПрисоединенныйФайл)
	БизнесПроцессыЗаявокСотрудниковКлиент.ОткрытьПрисоединенныйФайл(ЭтотОбъект, ПрисоединенныйФайл);	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПрисоединенныйФайл()
	Модифицированность = Истина;
	ФайлОтвета = Неопределено;
	РасширениеФайлаОтветаБезТочки = "";
	ПредставлениеФайлаОтвета = "";
	АдресХранилищаФайлаОтвета = "";
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуЗадачи() 
	БизнесПроцессыЗаявокСотрудниковФормы.ИнициализироватьФормуЗадачи(ЭтотОбъект, Элементы.ЗаданиеОтпуска);
	УстановитьВидимостьКнопокДействий();
КонецПроцедуры

#КонецОбласти

