#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.РежимПодключения Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаОпубликовать", "Видимость", Ложь);
	КонецЕсли;
	
	ПоказыватьНовыеПозиции = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаНастройкаНедоступна", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"КоманднаяПанель", "Доступность", Ложь);
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
	НачатьПолучениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			АктивноеЗадание.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПриЗавершенииПолученияДанных", ЭтотОбъект),
			ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоказыватьНовыеПозицииПриИзменении(Элемент)
	
	Если ПоказыватьНовыеПозиции Тогда
		ДобавитьПозиции(НастройкиПубликации, НеУтвержденныеПозиции);
	Иначе
		УдалитьПозиции(НастройкиПубликации, НеУтвержденныеПозиции, "НеУтверждена");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗакрытыеПозицииПриИзменении(Элемент)
	
	Если ПоказыватьЗакрытыеПозиции Тогда
		ДобавитьПозиции(НастройкиПубликации, ЗакрытыеПозиции);
	Иначе
		УдалитьПозиции(НастройкиПубликации, ЗакрытыеПозиции, "Закрыта");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДеревоНастроекДатаЗакрытия", "Видимость", ИспользоватьШтатноеРасписание И ПоказыватьЗакрытыеПозиции);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастроек

&НаКлиенте
Процедура ДеревоНастроекПубликоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	ПриИзмененииПометки(ТекущиеДанные, "Публиковать");
	
	Если ИспользоватьШтатноеРасписание Тогда
		
		ЕстьЗакрытые = Ложь;
		ЕстьНеУтвержденные = Ложь;
		ИдентификаторСтрокиИсходногоДерева = СоответствиеСтрок[ТекущиеДанные.ИдентификаторСтроки];
		СтрокаИсходногоДерева = ИсходныеНастройкиПубликации.НайтиПоИдентификатору(ИдентификаторСтрокиИсходногоДерева);
		СтрокаИсходногоДерева.Публиковать = ТекущиеДанные.Публиковать;
		ПриИзмененииПометки(СтрокаИсходногоДерева, "Публиковать", ЕстьЗакрытые, ЕстьНеУтвержденные);
		Если ЕстьЗакрытые Тогда
			ОбновитьПометкиПодчиненногоДерева(ЗакрытыеПозиции.ПолучитьЭлементы());
		КонецЕсли;
		Если ЕстьНеУтвержденные Тогда
			ОбновитьПометкиПодчиненногоДерева(НеУтвержденныеПозиции.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьНастройки(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПубликацию(Команда)
	
	Если Модифицированность Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьПубликациюЗавершение", ЭтаФорма);
		ПоказатьВопрос(
			ОповещениеОЗавершении,
			НСтр("ru = 'Для продолжения необходимо сохранить данные. Сохранить и продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьПубликацию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПубликациюЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки(,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКабинетов(Команда)
	
	Если Модифицированность Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СписокКабинетовЗавершение", ЭтаФорма),
			НСтр("ru = 'Для продолжения необходимо сохранить данные. Сохранить и продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСписокКабинетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьВсе(Команда)
	
	УстановитьОтметкиДереваНастроек(НастройкиПубликации.ПолучитьЭлементы(), 1);
	
	Если ИспользоватьШтатноеРасписание Тогда
		УстановитьОтметкиДереваНастроек(ИсходныеНастройкиПубликации.ПолучитьЭлементы(), 1);
		УстановитьОтметкиДереваНастроек(ЗакрытыеПозиции.ПолучитьЭлементы(), 1);
		УстановитьОтметкиДереваНастроек(НеУтвержденныеПозиции.ПолучитьЭлементы(), 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	УстановитьОтметкиДереваНастроек(НастройкиПубликации.ПолучитьЭлементы(), 0);
	
	Если ИспользоватьШтатноеРасписание Тогда
		УстановитьОтметкиДереваНастроек(ИсходныеНастройкиПубликации.ПолучитьЭлементы(), 0);
		УстановитьОтметкиДереваНастроек(ЗакрытыеПозиции.ПолучитьЭлементы(), 0);
		УстановитьОтметкиДереваНастроек(НеУтвержденныеПозиции.ПолучитьЭлементы(), 0);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НачатьПолучениеДанных()

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	
	ИмяМетода = "КабинетСотрудника.ЗаполнитьДеревоНастроекПубликации";
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, Неопределено, ПараметрыВыполненияВФоне);
	
	НовоеЗадание = Новый Структура("ДлительнаяОперация");
	НовоеЗадание.ДлительнаяОперация = РезультатВыполнения;
	АктивноеЗадание = Новый ФиксированнаяСтруктура(НовоеЗадание);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииПолученияДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении фонового задания возникла ошибка:'") + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ПриЗавершенииПолученияДанныхНаСервере(Результат.АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииПолученияДанныхНаСервере(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьШтатноеРасписание = Результат.ИспользоватьШтатноеРасписание;
	РезультатЗапроса = Результат.РезультатЗапроса;
	ДанныеДоступны = Результат.ДанныеДоступны;
	
	Если Не ДанныеДоступны Тогда
		// У пользователя отсутствую права на все организации и/или все подразделения,
		// настройка публикации недоступна.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписатьИЗакрыть", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ФормаЗаписать", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДеревоНастроек", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаНастройкаНедоступна", "Видимость", Истина);
	Иначе
		ЗаполнитьНастройки(РезультатЗапроса);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаНастройкаНедоступна", "Видимость", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаФлажковГоризонтальная", "Видимость", ИспользоватьШтатноеРасписание);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДеревоНастроекДатаУтверждения", "Видимость", ИспользоватьШтатноеРасписание);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ДеревоНастроекДатаЗакрытия", "Видимость", ИспользоватьШтатноеРасписание И ПоказыватьЗакрытыеПозиции);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"КоманднаяПанель", "Доступность", Истина);
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаНастройки;
	
	Если ИспользоватьШтатноеРасписание Тогда
		УстановитьУсловноеОформлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки(РезультатЗапроса)

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытыеПозиции", Новый Массив);
	ДополнительныеПараметры.Вставить("НеУтвержденныеПозиции", Новый Массив);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", 1);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ИсходноеДерево = РеквизитФормыВЗначение("НастройкиПубликации");
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		НомерСтроки = 1;
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			НоваяСтрока = ИсходноеДерево.Строки.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
			ДополнительныеПараметры.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки + 1;
			НоваяСтрока.НомерСтроки = НомерСтроки;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапроса);
			НоваяСтрока.Наименование = Строка(НоваяСтрока.Организация);
			
			ДочерняяВыборка = ВыборкаЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пометка = 0;
			ДочерниеЗакрыты = Истина;
			ДочерниеНеУтверждены = Истина;
			ЗаполнитьСтрокиДерева(НоваяСтрока, ДочерняяВыборка, Пометка, ДочерниеЗакрыты, ДочерниеНеУтверждены, ДополнительныеПараметры);
			НоваяСтрока.Публиковать = Пометка;
			НоваяСтрока.Закрыта = ДочерниеЗакрыты;
			НоваяСтрока.НеУтверждена = ДочерниеНеУтверждены;
			НоваяСтрока.НомерКартинки = 0;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если ИспользоватьШтатноеРасписание Тогда
			
			ЗначениеВРеквизитФормы(ИсходноеДерево, "ИсходныеНастройкиПубликации");
			КоллекцияЭлементов = ИсходныеНастройкиПубликации.ПолучитьЭлементы();
			СтрокиДерева = Новый Соответствие;
			Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
				СтрокиДерева.Вставить(ЭлементКоллекции.ИдентификаторСтроки, ЭлементКоллекции.ПолучитьИдентификатор());
				ЗаполнитьСоответствиеСтрок(СтрокиДерева, ЭлементКоллекции.ПолучитьЭлементы());
			КонецЦикла;
			СоответствиеСтрок = Новый ФиксированноеСоответствие(СтрокиДерева);
			
			ДеревоПозиций = РеквизитФормыВЗначение("ЗакрытыеПозиции");
			ЗаполнитьДеревоПоДетальнымСтрокам(ИсходноеДерево, ДеревоПозиций, ДополнительныеПараметры.ЗакрытыеПозиции);
			ЗначениеВРеквизитФормы(ДеревоПозиций, "ЗакрытыеПозиции");
			
			ДеревоПозиций = РеквизитФормыВЗначение("НеУтвержденныеПозиции");
			ЗаполнитьДеревоПоДетальнымСтрокам(ИсходноеДерево, ДеревоПозиций, ДополнительныеПараметры.НеУтвержденныеПозиции);
			ЗначениеВРеквизитФормы(ДеревоПозиций, "НеУтвержденныеПозиции");
			
			ЗначениеВРеквизитФормы(ИсходноеДерево, "НастройкиПубликации");
			
			УдалитьПозиции(НастройкиПубликации, ЗакрытыеПозиции, "Закрыта");
			
		Иначе
			ЗначениеВРеквизитФормы(ИсходноеДерево, "НастройкиПубликации");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДерева(СтрокаДерева, ИерархическаяВыборка, Пометка, Закрыты, НеУтверждены, ДополнительныеПараметры)
	
	БылиПометки = Ложь;
	БылиПустые = Ложь;
	ВсеЗакрыты = Истина;
	ВсеНеУтверждены = Истина;
	
	НомерСтроки = 1;
	Пока ИерархическаяВыборка.Следующий() Цикл
		
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИерархическаяВыборка);
		НоваяСтрока.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		ДополнительныеПараметры.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки + 1;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		Если ИерархическаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			НоваяСтрока.Наименование = Строка(НоваяСтрока.ПозицияШтатногоРасписания);
			НоваяСтрока.ДетальнаяЗапись = Истина;
			НоваяСтрока.НомерКартинки = 3;
			
			ВсеЗакрыты = ВсеЗакрыты И НоваяСтрока.Закрыта;
			ВсеНеУтверждены = ВсеНеУтверждены И НоваяСтрока.НеУтверждена;
			
			Если НоваяСтрока.Закрыта Тогда
				ДополнительныеПараметры.ЗакрытыеПозиции.Добавить(НоваяСтрока);
			Иначе
				БылиПометки = БылиПометки Или (НоваяСтрока.Публиковать = 1);
				БылиПустые  = БылиПустые Или (НоваяСтрока.Публиковать = 0);
			КонецЕсли;
			
			Если НоваяСтрока.НеУтверждена Тогда
				ДополнительныеПараметры.НеУтвержденныеПозиции.Добавить(НоваяСтрока);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.Наименование = Строка(НоваяСтрока.Подразделение);
			НоваяСтрока.НомерКартинки = 0;
			
			Если ИерархическаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				ДочерняяВыборка = ИерархическаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ИерархическаяВыборка.Группировка());
			Иначе
				ДочерняяВыборка = ИерархическаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			КонецЕсли;
			
			ПометкаДочерних = 0;
			ДочерниеЗакрыты = Истина;
			ДочерниеНеУтверждены = Истина;
			ЗаполнитьСтрокиДерева(НоваяСтрока, ДочерняяВыборка, ПометкаДочерних, ДочерниеЗакрыты, ДочерниеНеУтверждены, ДополнительныеПараметры);
			НоваяСтрока.Публиковать = ПометкаДочерних;
			НоваяСтрока.Закрыта = ДочерниеЗакрыты;
			НоваяСтрока.НеУтверждена = ДочерниеНеУтверждены;
			
			ВсеЗакрыты = ВсеЗакрыты И ДочерниеЗакрыты;
			ВсеНеУтверждены = ВсеНеУтверждены И ДочерниеНеУтверждены;
			
			Если НЕ ДочерниеЗакрыты Тогда
				Если ПометкаДочерних = 2 Тогда
					БылиПометки = Истина;
					БылиПустые  = Истина;
				Иначе
					БылиПометки = БылиПометки Или (ПометкаДочерних = 1);
					БылиПустые  = БылиПустые Или (ПометкаДочерних = 0);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если БылиПометки И БылиПустые Тогда
		Пометка = 2;
	ИначеЕсли БылиПометки Тогда
		Пометка = 1;
	Иначе
		Пометка = 0;
	КонецЕсли;
	
	Закрыты = ВсеЗакрыты;
	НеУтверждены = ВсеНеУтверждены;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоДетальнымСтрокам(ИсходноеДерево, ДеревоПозиций, ДетальныеСтроки)
	
	РодителиСтрок = Новый Соответствие;
	Для каждого СтрокаДерева Из ДетальныеСтроки Цикл
		Родитель = РодителиСтрок[СтрокаДерева.Родитель];
		Если Родитель = Неопределено Тогда
			Родитель = РодительДереваНастроек(ДеревоПозиций.Строки, РодителиСтрок, СтрокаДерева.Родитель);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Родитель.Строки.Добавить(), СтрокаДерева);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РодительДереваНастроек(СтрокиДерева, РодителиСтрок, РодительИсходногоДерева)

	Если РодительИсходногоДерева.Родитель = Неопределено Тогда
		РодительДереваНастроек = РодителиСтрок[РодительИсходногоДерева];
		Если РодительДереваНастроек = Неопределено Тогда
			РодительДереваНастроек = СтрокиДерева.Добавить();
			ЗаполнитьЗначенияСвойств(РодительДереваНастроек, РодительИсходногоДерева);
			РодителиСтрок.Вставить(РодительИсходногоДерева, РодительДереваНастроек);
		КонецЕсли;
		Возврат РодительДереваНастроек;
	Иначе
		Родитель = РодителиСтрок[РодительИсходногоДерева];
		Если Родитель = Неопределено Тогда
			РодительДереваНастроек = РодительДереваНастроек(СтрокиДерева, РодителиСтрок, РодительИсходногоДерева.Родитель);
			Родитель = РодительДереваНастроек.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Родитель, РодительИсходногоДерева);
			РодителиСтрок.Вставить(РодительИсходногоДерева, Родитель);
		КонецЕсли;
		Возврат Родитель;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСоответствиеСтрок(СтрокиДерева, КоллекцияЭлементов)

	Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		СтрокиДерева.Вставить(ЭлементКоллекции.ИдентификаторСтроки, ЭлементКоллекции.ПолучитьИдентификатор());
		ЗаполнитьСоответствиеСтрок(СтрокиДерева, ЭлементКоллекции.ПолучитьЭлементы());
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьПозиции(ДеревоНастройкиПубликации, УдаляемыеПозиции, ИмяПоляУдалить)
	
	ДеревоНастроек = ДеревоНастройкиПубликации.ПолучитьЭлементы();
	
	Для каждого УдаляемаяСтрокаДерева Из УдаляемыеПозиции.ПолучитьЭлементы() Цикл
		
		ИндексУдаляемойСтроки = -1;
		Для каждого СтрокаДереваНастроек Из ДеревоНастроек Цикл
		
			Если СтрокаДереваНастроек.НомерСтроки <> УдаляемаяСтрокаДерева.НомерСтроки Тогда
				Продолжить;
			Иначе
				
				Если УдаляемаяСтрокаДерева[ИмяПоляУдалить] Тогда
					ИндексУдаляемойСтроки = ДеревоНастроек.Индекс(СтрокаДереваНастроек);
				Иначе
					УдалитьПозиции(СтрокаДереваНастроек, УдаляемаяСтрокаДерева, ИмяПоляУдалить);
					Если СтрокаДереваНастроек.ПолучитьЭлементы().Количество() = 0 Тогда
						ИндексУдаляемойСтроки = ДеревоНастроек.Индекс(СтрокаДереваНастроек);
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ИндексУдаляемойСтроки >= 0 Тогда
			ДеревоНастроек.Удалить(ИндексУдаляемойСтроки);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьПозиции(ДеревоНастройкиПубликации, ДобавляемыеПозиции)
	
	ДеревоНастроек = ДеревоНастройкиПубликации.ПолучитьЭлементы();
	
	Для каждого ДобавляемаяСтрокаДерева Из ДобавляемыеПозиции.ПолучитьЭлементы() Цикл
		
		НомерДобавляемойСтроки = ДобавляемаяСтрокаДерева.НомерСтроки;
		ИндексПредыдущейСтроки = -1;
		ДобавлятьСтроку = Истина;
		
		Если ДеревоНастроек.Количество() = 0 Тогда
			
			НоваяСтрока = ДеревоНастроек.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавляемаяСтрокаДерева);
			ДобавитьПозиции(НоваяСтрока, ДобавляемаяСтрокаДерева);
			
		Иначе
			
			Для каждого СтрокаДереваНастроек Из ДеревоНастроек Цикл
				
				Если СтрокаДереваНастроек.НомерСтроки < НомерДобавляемойСтроки Тогда
					ИндексПредыдущейСтроки = ДеревоНастроек.Индекс(СтрокаДереваНастроек);
				ИначеЕсли СтрокаДереваНастроек.НомерСтроки = НомерДобавляемойСтроки Тогда
					ДобавитьПозиции(СтрокаДереваНастроек, ДобавляемаяСтрокаДерева);
					ДобавлятьСтроку = Ложь;
				ИначеЕсли СтрокаДереваНастроек.НомерСтроки > НомерДобавляемойСтроки Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДобавлятьСтроку Тогда
				НоваяСтрока = ДеревоНастроек.Вставить(ИндексПредыдущейСтроки +1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавляемаяСтрокаДерева);
				ДобавитьПозиции(НоваяСтрока, ДобавляемаяСтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиДереваНастроек(СтрокиДерева, ЗначениеОтметки)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаДерева.Публиковать = ЗначениеОтметки;
		УстановитьОтметкиДереваНастроек(СтрокаДерева.ПолучитьЭлементы(), ЗначениеОтметки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПометки(ТекущиеДанные, ИмяПоля, ЕстьЗакрытые = Ложь, ЕстьНеУтвержденные = Ложь)
	
	Если ТекущиеДанные[ИмяПоля] = 2 Тогда
		ТекущиеДанные[ИмяПоля] = 0;
	КонецЕсли;
	Если ИспользоватьШтатноеРасписание И ТекущиеДанные.Закрыта Тогда
		ЕстьЗакрытые = Истина;
		Возврат;
	КонецЕсли;
	ЕстьНеУтвержденные = ТекущиеДанные.НеУтверждена;
	УстановитьПометкуПодчиненных(ТекущиеДанные, ИмяПоля, ЕстьЗакрытые, ЕстьНеУтвержденные);
	УстановитьПометкуРодителя(ТекущиеДанные.ПолучитьРодителя(), ИмяПоля, ЕстьЗакрытые, ЕстьНеУтвержденные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРодителя(Родитель, ИмяПоля, ЕстьЗакрытые, ЕстьНеУтвержденные)
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БылиПометки = Ложь;
	БылиПустые = Ложь;
	ДочерниеЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Для Каждого ДочернийЭлемент Из ДочерниеЭлементыРодителя Цикл
		ЕстьЗакрытые = ЕстьЗакрытые Или ДочернийЭлемент.Закрыта;
		ЕстьНеУтвержденные = ЕстьНеУтвержденные Или ДочернийЭлемент.НеУтверждена;
		Если ИспользоватьШтатноеРасписание И ДочернийЭлемент.Закрыта Тогда
			Продолжить;
		КонецЕсли;
		Если ДочернийЭлемент[ИмяПоля] = 2 Тогда
			БылиПометки = Истина;
			БылиПустые  = Истина;
		Иначе
			БылиПометки = БылиПометки Или ДочернийЭлемент[ИмяПоля];
			БылиПустые  = БылиПустые Или Не ДочернийЭлемент[ИмяПоля];
		КонецЕсли;
	КонецЦикла;
	Если БылиПометки И Не БылиПустые Тогда
		Родитель[ИмяПоля] = 1;
	ИначеЕсли БылиПометки И БылиПустые Тогда
		Родитель[ИмяПоля] = 2;
	Иначе
		Родитель[ИмяПоля] = 0;
	КонецЕсли;
	Прародитель = Родитель.ПолучитьРодителя();
	Если Прародитель <> Неопределено Тогда
		УстановитьПометкуРодителя(Прародитель, ИмяПоля, ЕстьЗакрытые, ЕстьНеУтвержденные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуПодчиненных(Родитель, ИмяПоля, ЕстьЗакрытые, ЕстьНеУтвержденные)
	
	Пометка = Родитель[ИмяПоля];
	
	ДочерниеЭлементы = Родитель.ПолучитьЭлементы();
	Для Каждого ДочернийЭлемент Из ДочерниеЭлементы Цикл
		ЕстьЗакрытые = ЕстьЗакрытые Или ДочернийЭлемент.Закрыта;
		ЕстьНеУтвержденные = ЕстьНеУтвержденные Или ДочернийЭлемент.НеУтверждена;
		Если ИспользоватьШтатноеРасписание И ДочернийЭлемент.Закрыта И Пометка = 1 Тогда
			Продолжить;
		КонецЕсли;
		ДочернийЭлемент[ИмяПоля] = Родитель[ИмяПоля];
		УстановитьПометкуПодчиненных(ДочернийЭлемент, ИмяПоля, ЕстьЗакрытые, ЕстьНеУтвержденные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПометкиПодчиненногоДерева(КоллекцияЭлементов)
	
	Для каждого ЭллементКоллекции Из КоллекцияЭлементов Цикл
		ИдентификаторСтрокиИсходногоДерева = СоответствиеСтрок[ЭллементКоллекции.ИдентификаторСтроки];
		СтрокаИсходногоДерева = ИсходныеНастройкиПубликации.НайтиПоИдентификатору(ИдентификаторСтрокиИсходногоДерева);
		ЗаполнитьЗначенияСвойств(ЭллементКоллекции, СтрокаИсходногоДерева);
		ОбновитьПометкиПодчиненногоДерева(ЭллементКоллекции.ПолучитьЭлементы())
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПубликацию()
	
	Если СервисЗаблокирован() Тогда
		ТекстСообщения = КабинетСотрудникаКлиент.ТекстСообщенияОБлокировкеСервиса();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЕстьАктивныеФоновыеЗадания() Тогда
		ТекстСообщения = НСтр("ru = 'Публикация уже выполняется, повторите попытку позже.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = ДлительнаяОперацияПубликация();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Обновление публикации выполнено.'");
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПубликациюЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьАктивныеФоновыеЗадания()

	Возврат КабинетСотрудника.ЕстьАктивныеФоновыеЗаданияОбменПубликация();

КонецФункции
	
&НаСервереБезКонтекста
Функция СервисЗаблокирован()

	Возврат КабинетСотрудника.СервисЗаблокирован();

КонецФункции

&НаСервере
Функция ДлительнаяОперацияПубликация()

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыПроцедуры = Новый Структура("ПодготовитьДанныеДляТехПоддержки", Ложь);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтрШаблон(НСтр("ru = 'Публикация данных в сервисе 1С:Кабинет сотрудника'")));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"КабинетСотрудника.ОбновлениеПубликацииФоновоеЗадание",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне);
		
	Возврат ДлительнаяОперация;

КонецФункции

&НаКлиенте
Процедура ВыполнитьПубликациюЗавершение(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, ДлительнаяОперация.КраткоеПредставлениеОшибки);
	ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если Результат.БылиОшибки Тогда
			СообщениеОбОшибке = НСтр("ru = 'Обновление публикации в сервисе 1С:Кабинет сотрудника завершено с ошибками.'");
			ПоказатьПредупреждение(, СообщениеОбОшибке);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКабинетовЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки(,,Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокКабинетов()

	ОткрытьФорму("РегистрСведений.ФизическиеЛицаКабинетСотрудника.Форма.ФормаСписка",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(ЗакрытьФорму = Ложь, ОбновитьПубликацию = Ложь, ПоказатьСписок = Ложь)
	
	ДлительнаяОперация = СохранитьНастройкиНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = НСтр("ru = 'Настройки публикации сохранены.'");
	ДополнительныеПараметры = Новый Структура("ЗакрытьФорму,ОбновитьПубликацию,ПоказатьСписок", ЗакрытьФорму, ОбновитьПубликацию, ПоказатьСписок);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СохранитьНастройкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		Модифицированность = Ложь;
		Если ДополнительныеПараметры.ЗакрытьФорму Тогда
			Закрыть();
		ИначеЕсли ДополнительныеПараметры.ОбновитьПубликацию Тогда
			ВыполнитьПубликацию();
		ИначеЕсли ДополнительныеПараметры.ПоказатьСписок Тогда
			ОткрытьСписокКабинетов();
		КонецЕсли;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'При сохранении настроек публикации возникла ошибка:'") + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ИнформированиеПользователяКлиент.Предупредить(ТекстСообщения, Результат.ПодробноеПредставлениеОшибки,);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиНаСервере()
	
	НаборЗаписей = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей();
	Если ИспользоватьШтатноеРасписание Тогда
		ДеревоЗначений = РеквизитФормыВЗначение("ИсходныеНастройкиПубликации");
	Иначе
		ДеревоЗначений = РеквизитФормыВЗначение("НастройкиПубликации");
	КонецЕсли;
	Таблица = НаборЗаписей.Выгрузить();
	ДеревоВТаблицуДляЗаписи(Таблица, ДеревоЗначений);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("НовыеНастройки", Таблица);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтрШаблон(НСтр("ru = 'Сохранение настроек публикации'")));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"КабинетСотрудника.СохранитьНастройкиПубликацииВФоне",
		ПараметрыСохранения,
		ПараметрыВыполненияВФоне);
	
КонецФункции
	
&НаСервере
Функция ДеревоВТаблицуДляЗаписи(Таблица, Дерево)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ПозицияШтатногоРасписания) Тогда
			ОбъектПравила = СтрокаДерева.ПозицияШтатногоРасписания;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Подразделение) Тогда
			ОбъектПравила = СтрокаДерева.Подразделение;
		Иначе
			ОбъектПравила = СтрокаДерева.Организация;
		КонецЕсли;
		НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("ОбъектПравила", ОбъектПравила));
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Публиковать = ТриСостоянияВБулево(СтрокаДерева.Публиковать);
			Если Публиковать Тогда
				Запись = Таблица.Добавить();
				Запись.ОбъектПравила = ОбъектПравила;
			КонецЕсли;
		КонецЕсли;
		ДеревоВТаблицуДляЗаписи(Таблица, СтрокаДерева);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ТриСостоянияВБулево(Значение)
	Возврат ?(Значение = 2, Ложь, Булево(Значение));
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()

	ТекущийШрифт = Элементы["ДеревоНастроек"].Шрифт;
	ЗачеркнутыйШрифт = Новый Шрифт(ТекущийШрифт, , , , , , Истина);
	ПолужирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	// Зарытые позиции
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПубликации.Закрыта");
	ЭлементОтбора.ПравоеЗначение = Истина;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекНаименование");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекДолжность");
	
	// Неутвержденные позиции цвет
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстНеутвержденныеПозиции);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПубликации.НеУтверждена");
	ЭлементОтбора.ПравоеЗначение = Истина;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекНаименование");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекДолжность");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекДатаУтверждения");
	
	// Неутвержденные позиции текст
	ТекстНадписи = НСтр("ru = 'не утверждена'");
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНадписи);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПубликации.НеУтверждена");
	ЭлементОтбора.ПравоеЗначение = Истина;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНастроекДатаУтверждения");
	
КонецПроцедуры

#КонецОбласти



