#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(ГоловнаяОрганизация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не СЭДОФСС.ДоступенОбменЧерезСЭДО()
		Или Не ПравоДоступа("Изменение", Метаданные.Документы.СведенияОЗастрахованномЛицеФСС) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Документы.СведенияОЗастрахованномЛицеФСС.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Требования = ТребованияПоОтправке();
	ФильтрСегодня = Новый Структура("Сегодня", Истина);
	НеобходимоОтправитьВсего   = Требования.Количество();
	НеобходимоОтправитьСегодня = Требования.НайтиСтроки(ФильтрСегодня).Количество();
	
	Для Каждого Раздел Из Разделы Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "СведенияОЗастрахованныхЛицахФСС_ТолькоТребующиеОтправкиСегодня_" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (НеобходимоОтправитьСегодня > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Сегодня отправить сведения о сотрудниках в ФСС'");
		Дело.Количество     = НеобходимоОтправитьСегодня;
		Дело.Подсказка      = НСтр("ru = 'Сведения о сотруднике, полученные организацией, необходимо передать в территориальный орган ФСС в течении 3 рабочих дней.'");
		Дело.ПараметрыФормы = Новый Структура("ТолькоТребующиеОтправкиСегодня", Истина);
		Дело.Форма          = "РегистрСведений.СведенияОЗастрахованныхЛицахФСС.ФормаСписка";
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "СведенияОЗастрахованныхЛицахФСС_ТолькоТребующиеОтправки_" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (НеобходимоОтправитьВсего > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Отправить сведения о сотрудниках в ФСС'");
		Дело.Количество     = НеобходимоОтправитьВсего;
		Дело.Подсказка      = НСтр("ru = 'Сведения о сотруднике, полученные организацией, необходимо передать в территориальный орган ФСС в течении 3 рабочих дней.'");
		Дело.ПараметрыФормы = Новый Структура("ТолькоТребующиеОтправки", Истина);
		Дело.Форма          = "РегистрСведений.СведенияОЗастрахованныхЛицахФСС.ФормаСписка";
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ГоловнаяОрганизация - ОпределяемыйТип.Организация    - Значение отбора по соответствующему измерению.
//   ФизическоеЛицо     - СправочникСсылка.ФизическиеЛица - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.СведенияОЗастрахованныхЛицахФСС - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо) Экспорт
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СведенияОЗастрахованныхЛицахФСС) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".'"),
			Метаданные.РегистрыСведений.СведенияОЗастрахованныхЛицахФСС.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОЗастрахованныхЛицахФСС");
		ЭлементБлокировки.УстановитьЗначение("ГоловнаяОрганизация", ГоловнаяОрганизация);
		ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизическоеЛицо);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить сведения для ФСС %1 о сотруднике %2 по причине: %3'"),
			ГоловнаяОрганизация,
			ФизическоеЛицо,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.СведенияОЗастрахованныхЛицахФСС,
			ФизическоеЛицо,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СведенияОЗастрахованныхЛицахФСС
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СведенияОЗастрахованныхЛицахФСС
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Возвращает строку - имена требуемых реквизитов документа "Сведения о застрахованном лице ФСС".
Функция ТребуемыеРеквизитыСведений() Экспорт
	Возврат "Проведен, РегистрацияСведений, ДатаОтправки";
КонецФункции

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ТекущиеДела

Функция ТребованияПоОтправке()
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	НачалоРабочегоДня = НачалоДня(СЭДОФСС.БлижайшийРабочийДень(НачалоТекущегоДня));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОЗастрахованныхЛицахФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОЗастрахованныхЛицахФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА СведенияОЗастрахованныхЛицахФСС.МаксимальнаяДатаОтправки <= &НачалоРабочегоДня
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сегодня
	|ИЗ
	|	РегистрСведений.СведенияОЗастрахованныхЛицахФСС КАК СведенияОЗастрахованныхЛицахФСС
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахФСС.МаксимальнаяДатаОтправки >= &НачалоТекущегоДня
	|	И НЕ СведенияОЗастрахованныхЛицахФСС.Скрыть";
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоТекущегоДня);
	Запрос.УстановитьПараметр("НачалоРабочегоДня", НачалоРабочегоДня);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Массив = Запрос.ВыполнитьПакет();
	
	Возврат Массив[0].Выгрузить();
КонецФункции

#КонецОбласти

Функция КоличествоОжидаемыхСообщений(ГоловнаяОрганизация, Организации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.СведенияОЗастрахованныхЛицахФСС КАК Сведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Сведения.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	Сведения.СостояниеОтправки = &Отправлен
	|	И Сведения.ДатаОтправки > &ДатаНачалаАктуальности
	|	И Сведения.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И Организации.Ссылка В(&Организации)";
	
	Запрос.УстановитьПараметр("Отправлен", Перечисления.СостоянияДокументаСЭДОФСС.Отправлен);
	Запрос.УстановитьПараметр("ДатаНачалаАктуальности", ДатаНачалаАктуальности());
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Сведения.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Сведения.ГоловнаяОрганизация = Организации.Ссылка", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организации.Ссылка В(&Организации)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
КонецФункции

Функция ДатаНачалаАктуальности() Экспорт
	Возврат НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
КонецФункции

Процедура ПриЗаписиСведений(Документ, ЗначенияРеквизитовДоЗаписи) Экспорт
	Если ЗначенияРеквизитовДоЗаписи.ГоловнаяОрганизация <> Документ.ГоловнаяОрганизация
		Или ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо <> Документ.ФизическоеЛицо Тогда
		ОбновитьСведения(ЗначенияРеквизитовДоЗаписи.ГоловнаяОрганизация, ЗначенияРеквизитовДоЗаписи.ФизическоеЛицо);
	КонецЕсли;
	Если Не ЗначенияРеквизитовДоЗаписи.ЭтоНовый
		И   (ЗначенияРеквизитовДоЗаписи.ПометкаУдаления <> Документ.ПометкаУдаления
			Или ЗначенияРеквизитовДоЗаписи.Проведен     <> Документ.Проведен
			Или ЗначенияРеквизитовДоЗаписи.Дата         <> Документ.Дата
			Или ЗначенияРеквизитовДоЗаписи.ДатаОтправки <> Документ.ДатаОтправки) Тогда
		ОбновитьСведения(Документ.ГоловнаяОрганизация, Документ.ФизическоеЛицо);
		Возврат;
	ИначеЕсли Документ.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(Документ.ГоловнаяОрганизация, Документ.ФизическоеЛицо);
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Запись.ФизическоеЛицо      = Документ.ФизическоеЛицо;
	Запись.ГоловнаяОрганизация = Документ.ГоловнаяОрганизация;
	
	Если ЗначенияРеквизитовДоЗаписи.ЭтоНовый Или Запись.ПоследниеСведения = Документ.Ссылка Тогда
		Запись.ПоследниеСведения         = Документ.Ссылка;
		Запись.Скрыть                    = Ложь; // Факт оформления сведений отменяет кнопку скрытия.
		Запись.ТребуетсяСоздать          = Ложь;
		Запись.ТребуетсяАктуализировать  = Ложь;
		Запись.ПоляТребующиеАктуализации = "";
		Запись.СостояниеСведений         = СостояниеСведений(Запись, Запись.ПоследниеСведения, Документ);
		Если Документ.Проведен И ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			Запись.ОтправленныеСведения = Документ.Ссылка;
			Запись.РегистрацияСведений  = Документ.РегистрацияСведений;
			Запись.ДатаОтправки         = Документ.ДатаОтправки;
			Запись.СостояниеОтправки    = СостояниеОтправленныхСведений(Запись, Документ);
		КонецЕсли;
		ЗавершитьЗаписьНабора(Набор);
	ИначеЕсли Запись.ОтправленныеСведения = Документ.Ссылка Тогда
		Запись.ТребуетсяСоздать     = Ложь;
		Запись.РегистрацияСведений  = Документ.РегистрацияСведений;
		Запись.СостояниеОтправки    = СостояниеОтправленныхСведений(Запись);
		Запись.ДатаОтправки         = Документ.ДатаОтправки;
		ЗавершитьЗаписьНабора(Набор);
	Иначе
		ОтменитьЗаписьНабора(Набор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиРегистрацииСведений(Регистрация, РеквизитыСведений) Экспорт
	Если Не ЗначениеЗаполнено(Регистрация.ДатаОтправки) Тогда
		Возврат; // В регистре индексируется последняя отправленная регистрация.
	КонецЕсли;
	ГоловнаяОрганизация = Регистрация.ГоловнаяОрганизация;
	ФизическоеЛицо      = Регистрация.ФизическоеЛицо;
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат; // Регистрацию не к чему "прицепить" в учете.
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ЗначенияРесурсов = ЗначенияРесурсов(ГоловнаяОрганизация, ФизическоеЛицо);
	Если ЗначенияРесурсов.РегистрацияСведений <> Регистрация.Ссылка
		И ЗначенияРесурсов.ДатаОтправки >= Регистрация.ДатаОтправки Тогда
		Возврат; // Повторная загрузка данных старой (неактуальной) регистрации.
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(Регистрация.ГоловнаяОрганизация, Регистрация.ФизическоеЛицо);
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	
	Если Регистрация.ДатаОтправки > Запись.ДатаОтправки
		И Запись.ДатаОтправки <= Запись.МаксимальнаяДатаОтправки Тогда
		Запись.МаксимальнаяДатаОтправки = '00010101';
	КонецЕсли;
	
	Запись.ФизическоеЛицо       = ФизическоеЛицо;
	Запись.ГоловнаяОрганизация  = ГоловнаяОрганизация;
	Запись.ДатаОтправки         = Регистрация.ДатаОтправки;
	Запись.ОтправленныеСведения = Регистрация.ДокументОснование;
	Запись.РегистрацияСведений  = Регистрация.Ссылка;
	
	Если Запись.ПоследниеСведения = Запись.ОтправленныеСведения Тогда
		Запись.СостояниеСведений = СостояниеСведений(Запись, Запись.ПоследниеСведения, РеквизитыСведений, Регистрация.Состояние);
	КонецЕсли;
	
	Запись.СостояниеОтправки = СостояниеОтправленныхСведений(Запись, РеквизитыСведений, Регистрация.Состояние);
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Функция ЗначенияРесурсов(ГоловнаяОрганизация, ФизическоеЛицо)
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация)
		Или Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ПривилегированныйРежим()
		И Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СведенияОЗастрахованныхЛицахФСС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Фильтр = Новый Структура;
	Фильтр.Вставить("ФизическоеЛицо",      ФизическоеЛицо);
	Фильтр.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Возврат Получить(Фильтр);
КонецФункции

// Обновляет сведения о застрахованном лице организации.
Процедура ОбновитьСведения(ГоловнаяОрганизация, Знач ФизическиеЛица) Экспорт
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	КонецЕсли;
	ОчиститьДатуОтправкиНеотправленныхСведений(ГоловнаяОрганизация, ФизическиеЛица);
	ДобавитьСведенияОНовыхСотрудниках(ГоловнаяОрганизация, ФизическиеЛица);
	ОбновитьСуществующиеСведения(ГоловнаяОрганизация, ФизическиеЛица);
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ЗапланироватьОбновление(ГоловнаяОрганизация, ФизическиеЛица);
КонецПроцедуры

// Добавляет в регистр информацию о новых сотрудниках, которые приняты после даты вступления закона в силу.
Процедура ДобавитьСведенияОНовыхСотрудниках(ГоловнаяОрганизация, ФизическиеЛица)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, &ПустаяДата) КАК ДатаПриема
	|ИЗ
	|	РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
	|		ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = КадроваяИсторияСотрудниковИнтервальный.Сотрудник
	|			И (КадроваяИсторияСотрудниковИнтервальный.ДатаНачала В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Т.ДатаНачала)
	|				ИЗ
	|					РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК Т
	|				ГДЕ
	|					ОсновныеСотрудникиФизическихЛиц.Сотрудник = Т.Сотрудник
	|					И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания МЕЖДУ Т.ДатаНачала И Т.ДатаОкончания))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковИнтервальный
	|		ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = ВидыЗанятостиСотрудниковИнтервальный.Сотрудник
	|			И (ВидыЗанятостиСотрудниковИнтервальный.ДатаНачала В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Т.ДатаНачала)
	|				ИЗ
	|					РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК Т
	|				ГДЕ
	|					ОсновныеСотрудникиФизическихЛиц.Сотрудник = Т.Сотрудник
	|					И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания МЕЖДУ Т.ДатаНачала И Т.ДатаОкончания))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗастрахованныхЛицахФСС КАК Сведения
	|		ПО ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо = Сведения.ФизическоеЛицо
	|			И ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация = Сведения.ГоловнаяОрганизация
	|ГДЕ
	|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И Сведения.ФизическоеЛицо ЕСТЬ NULL
	|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо В(&ФизическиеЛица)
	|	И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания = &МаксимальноеНачалоДня
	|	И ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости <> &ВнутреннееСовместительство
	|	И ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости <> &Подработка
	|	И ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости <> &ПустойВидЗанятости
	|	И ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, &ПустаяДата) >= &ДатаНачалаУчета";
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",        ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическиеЛица",             ФизическиеЛица);
	Запрос.УстановитьПараметр("ПустаяДата",                 '00010101');
	Запрос.УстановитьПараметр("ДатаНачалаУчета",            '20220101');
	Запрос.УстановитьПараметр("МаксимальноеНачалоДня",      '39991231000000');
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятости.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("Подработка",                 Перечисления.ВидыЗанятости.Подработка);
	Запрос.УстановитьПараметр("ПустойВидЗанятости",         Перечисления.ВидыЗанятости.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.ГоловнаяОрганизация, Выборка.ФизическоеЛицо);
		Если НаборЗаписей = Неопределено Или НаборЗаписей.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей.Добавить();
		Запись.ТребуетсяСоздать = Истина;
		Запись.СостояниеСведений = Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяСоздать;
		Запись.ПоляТребующиеАктуализации = НСтр("ru = 'Требуется первичная отправка сведений'");
		Запись.МаксимальнаяДатаОтправки = МаксимальнаяДатаОтправки(Макс(ТекущаяДатаСеанса(), Выборка.ДатаПриема));
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в регистр информацию о новых сотрудниках, которые приняты после даты вступления закона в силу.
Процедура ОчиститьДатуОтправкиНеотправленныхСведений(ГоловнаяОрганизация, ФизическиеЛица)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗастрахованномЛицеФСС.Ссылка КАК Ссылка,
	|	СведенияОЗастрахованномЛицеФСС.РегистрацияСведений КАК РегистрацияСведений,
	|	СведенияОЗастрахованномЛицеФСС.ДатаОтправки КАК ДатаОтправки,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.ДатаОтправки КАК РегистрацияСведенийДатаОтправки
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК РегистрацияСведенийОЗастрахованномЛицеФСС
	|		ПО СведенияОЗастрахованномЛицеФСС.РегистрацияСведений = РегистрацияСведенийОЗастрахованномЛицеФСС.Ссылка
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.ФизическоеЛицо В(&ФизическиеЛица)
	|	И СведенияОЗастрахованномЛицеФСС.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ РегистрацияСведенийОЗастрахованномЛицеФСС.Доставлен
	|	И СведенияОЗастрахованномЛицеФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическиеЛица",      ФизическиеЛица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СведенияОбъект.ДатаОтправки = '00010101';
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СведенияОбъект);
		Если ЗначениеЗаполнено(Выборка.РегистрацияСведенийДатаОтправки) Тогда
			РегистрацияОбъект = Выборка.РегистрацияСведений.ПолучитьОбъект();
			РегистрацияОбъект.ДатаОтправки = '00010101';
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РегистрацияОбъект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Актуализирует информацию о документах СведенияОЗастрахованномЛицеФСС.
Процедура ОбновитьСуществующиеСведения(ГоловнаяОрганизация, ФизическиеЛица, ОтключитьФлажокСкрыть = Ложь)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗастрахованномЛицеФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОЗастрахованномЛицеФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОЗастрахованномЛицеФСС.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СведенияОЗастрахованномЛицеФСС.ДатаСоздания > СведенияОЗастрахованномЛицеФСС.Дата
	|				И СведенияОЗастрахованномЛицеФСС.ДатаСоздания < ДОБАВИТЬКДАТЕ(СведенияОЗастрахованномЛицеФСС.Дата, ДЕНЬ, 1)
	|			ТОГДА СведенияОЗастрахованномЛицеФСС.ДатаСоздания
	|		КОГДА СведенияОЗастрахованномЛицеФСС.ДатаОтправки < СведенияОЗастрахованномЛицеФСС.Дата
	|			ТОГДА СведенияОЗастрахованномЛицеФСС.Дата
	|		ИНАЧЕ СведенияОЗастрахованномЛицеФСС.ДатаОтправки
	|	КОНЕЦ КАК ПолеУпорядочивания,
	|	СведенияОЗастрахованномЛицеФСС.Дата КАК Дата,
	|	СведенияОЗастрахованномЛицеФСС.Проведен КАК Проведен,
	|	СведенияОЗастрахованномЛицеФСС.РегистрацияСведений КАК РегистрацияСведений,
	|	СведенияОЗастрахованномЛицеФСС.ДатаОтправки КАК ДатаОтправки,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.Доставлен КАК Доставлен,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.ДоставкаИдентификатор КАК ДоставкаИдентификатор,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.Зарегистрирован КАК Зарегистрирован,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.РегистрацияИдентификатор КАК РегистрацияИдентификатор,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.ЕстьНесоответствия КАК ЕстьНесоответствия,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.НесоответствиеИдентификатор КАК НесоответствиеИдентификатор,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.ТекстОшибки КАК ТекстОшибки,
	|	РегистрацияСведенийОЗастрахованномЛицеФСС.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТСведения
	|ИЗ
	|	Документ.СведенияОЗастрахованномЛицеФСС КАК СведенияОЗастрахованномЛицеФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСведенийОЗастрахованномЛицеФСС КАК РегистрацияСведенийОЗастрахованномЛицеФСС
	|		ПО СведенияОЗастрахованномЛицеФСС.РегистрацияСведений = РегистрацияСведенийОЗастрахованномЛицеФСС.Ссылка
	|ГДЕ
	|	СведенияОЗастрахованномЛицеФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СведенияОЗастрахованномЛицеФСС.ФизическоеЛицо В(&ФизическиеЛица)
	|	И СведенияОЗастрахованномЛицеФСС.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСведения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТСведения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТСведения.Ссылка КАК Ссылка,
	|	ВТСведения.Дата КАК Дата,
	|	ВТСведения.Проведен КАК Проведен,
	|	ВТСведения.РегистрацияСведений КАК РегистрацияСведений,
	|	ВТСведения.ДатаОтправки КАК ДатаОтправки,
	|	ВТСведения.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТПоследниеСведения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСведения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ВТСведения.ФизическоеЛицо КАК ФизическоеЛицо,
	|		МАКСИМУМ(ВТСведения.ПолеУпорядочивания) КАК ПолеУпорядочивания
	|	ИЗ
	|		ВТСведения КАК ВТСведения
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСведения.ГоловнаяОрганизация,
	|		ВТСведения.ФизическоеЛицо) КАК ПоследниеДатыСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведения КАК ВТСведения
	|		ПО ПоследниеДатыСведений.ГоловнаяОрганизация = ВТСведения.ГоловнаяОрганизация
	|			И ПоследниеДатыСведений.ФизическоеЛицо = ВТСведения.ФизическоеЛицо
	|			И ПоследниеДатыСведений.ПолеУпорядочивания = ВТСведения.ПолеУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСведения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТСведения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТСведения.Ссылка КАК Ссылка,
	|	ВТСведения.Дата КАК Дата,
	|	ВТСведения.РегистрацияСведений КАК РегистрацияСведений,
	|	ВТСведения.ДатаОтправки КАК ДатаОтправки,
	|	ВТСведения.Проведен КАК Проведен,
	|	ВТСведения.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТОтправленныеСведения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСведения.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ВТСведения.ФизическоеЛицо КАК ФизическоеЛицо,
	|		МАКСИМУМ(ВТСведения.ПолеУпорядочивания) КАК ПолеУпорядочивания
	|	ИЗ
	|		ВТСведения КАК ВТСведения
	|	ГДЕ
	|		ВТСведения.Проведен
	|		И ВТСведения.ДатаОтправки > &ПустаяДата
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТСведения.ГоловнаяОрганизация,
	|		ВТСведения.ФизическоеЛицо) КАК ПоследниеДатыСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведения КАК ВТСведения
	|		ПО ПоследниеДатыСведений.ГоловнаяОрганизация = ВТСведения.ГоловнаяОрганизация
	|			И ПоследниеДатыСведений.ФизическоеЛицо = ВТСведения.ФизическоеЛицо
	|			И ПоследниеДатыСведений.ПолеУпорядочивания = ВТСведения.ПолеУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Последние.ГоловнаяОрганизация, Отправленные.ГоловнаяОрганизация) КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(Последние.ФизическоеЛицо, Отправленные.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Последние.Ссылка, ЗНАЧЕНИЕ(Документ.СведенияОЗастрахованномЛицеФСС.ПустаяСсылка)) КАК ПоследниеСведения,
	|	ЕСТЬNULL(Последние.Дата, &ПустаяДата) КАК ПоследниеДата,
	|	ЕСТЬNULL(Последние.Проведен, ЛОЖЬ) КАК ПоследниеПроведен,
	|	ЕСТЬNULL(Последние.РегистрацияСведений, ЗНАЧЕНИЕ(Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.ПустаяСсылка)) КАК ПоследниеРегистрацияСведений,
	|	ЕСТЬNULL(Последние.ДатаОтправки, &ПустаяДата) КАК ПоследниеДатаОтправки,
	|	ЕСТЬNULL(Последние.Состояние, НЕОПРЕДЕЛЕНО) КАК ПоследниеСостояние,
	|	ЕСТЬNULL(Отправленные.Ссылка, ЗНАЧЕНИЕ(Документ.СведенияОЗастрахованномЛицеФСС.ПустаяСсылка)) КАК ОтправленныеСведения,
	|	ЕСТЬNULL(Отправленные.Дата, &ПустаяДата) КАК ОтправленныеДата,
	|	ЕСТЬNULL(Отправленные.Проведен, ЛОЖЬ) КАК ОтправленныеПроведен,
	|	ЕСТЬNULL(Отправленные.РегистрацияСведений, ЗНАЧЕНИЕ(Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.ПустаяСсылка)) КАК ОтправленныеРегистрацияСведений,
	|	ЕСТЬNULL(Отправленные.ДатаОтправки, НЕОПРЕДЕЛЕНО) КАК ОтправленныеДатаОтправки,
	|	ЕСТЬNULL(Отправленные.Состояние, &ПустаяДата) КАК ОтправленныеСостояние
	|ИЗ
	|	ВТПоследниеСведения КАК Последние
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТОтправленныеСведения КАК Отправленные
	|		ПО Последние.ФизическоеЛицо = Отправленные.ФизическоеЛицо
	|			И Последние.ГоловнаяОрганизация = Отправленные.ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	РеквизитыСведений = Новый Структура(ТребуемыеРеквизитыСведений());
	Необработанные    = Новый Массив(Новый ФиксированныйМассив(ФизическиеЛица));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ГоловнаяОрганизация, Выборка.ФизическоеЛицо);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Необработанные, Выборка.ФизическоеЛицо);
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
		Иначе
			Запись = Набор[0];
		КонецЕсли;
		Запись.ФизическоеЛицо       = Выборка.ФизическоеЛицо;
		Запись.ГоловнаяОрганизация  = Выборка.ГоловнаяОрганизация;
		Запись.ПоследниеСведения    = Выборка.ПоследниеСведения;
		Запись.ОтправленныеСведения = Выборка.ОтправленныеСведения;
		Запись.РегистрацияСведений  = Выборка.ОтправленныеРегистрацияСведений;
		Запись.ДатаОтправки         = Выборка.ОтправленныеДатаОтправки;
		
		РеквизитыСведений.Проведен            = Выборка.ПоследниеПроведен;
		РеквизитыСведений.РегистрацияСведений = Выборка.ПоследниеРегистрацияСведений;
		РеквизитыСведений.ДатаОтправки        = Выборка.ПоследниеДатаОтправки;
		СостояниеРегистрации                  = Выборка.ПоследниеСостояние;
		Запись.СостояниеСведений = СостояниеСведений(Запись, Запись.ПоследниеСведения, РеквизитыСведений, СостояниеРегистрации);
		
		РеквизитыСведений.Проведен            = Выборка.ОтправленныеПроведен;
		РеквизитыСведений.РегистрацияСведений = Выборка.ОтправленныеРегистрацияСведений;
		РеквизитыСведений.ДатаОтправки        = Выборка.ОтправленныеДатаОтправки;
		СостояниеРегистрации                  = Выборка.ОтправленныеСостояние;
		Запись.СостояниеОтправки = СостояниеОтправленныхСведений(Запись, РеквизитыСведений, СостояниеРегистрации);
		
		Если ОтключитьФлажокСкрыть Тогда
			Запись.Скрыть = Ложь;
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(Набор);
		
	КонецЦикла;
	
	// Обновление данных необработанных физических лиц (по которым не введены сведения).
	Если Необработанные.Количество() > 0 Тогда
		Для Каждого ФизическоеЛицо Из Необработанные Цикл
			Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо);
			Если Набор = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Набор.Количество() = 0 Тогда
				ОтменитьЗаписьНабора(Набор);
			Иначе
				Набор.Очистить();
				ЗавершитьЗаписьНабора(Набор);
			КонецЕсли;
		КонецЦикла;
		ДобавитьСведенияОНовыхСотрудниках(ГоловнаяОрганизация, Необработанные);
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеСведений(Запись, СсылкаСведений, РеквизитыСведений = Неопределено, СостояниеРегистрации = Неопределено)
	
	Если Запись.Скрыть Тогда
		
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.НеПланируетсяОтправлять;
		
	ИначеЕсли Запись.ТребуетсяСоздать Тогда
		
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяСоздать;
		
	ИначеЕсли Запись.ТребуетсяАктуализировать Тогда
		
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяАктуализировать;
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаСведений) Тогда
		
		Если РеквизитыСведений = Неопределено Тогда
			ИменаПолей = ТребуемыеРеквизитыСведений();
			РеквизитыСведений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаСведений, ИменаПолей);
		КонецЕсли;
		
		Если Не РеквизитыСведений.Проведен Тогда
			Возврат Перечисления.СостоянияДокументаСЭДОФСС.ВПроцессеПодготовки;
		ИначеЕсли Не ЗначениеЗаполнено(РеквизитыСведений.ДатаОтправки)
			Или Не ЗначениеЗаполнено(РеквизитыСведений.РегистрацияСведений) Тогда
			Возврат Перечисления.СостоянияДокументаСЭДОФСС.ПодготовленКОтправке;
		Иначе
			Если СостояниеРегистрации = Неопределено Тогда
				СостояниеРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					РеквизитыСведений.РегистрацияСведений,
					"Состояние");
			КонецЕсли;
			Возврат СостояниеРегистрации;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перечисления.СостоянияДокументаСЭДОФСС.ПустаяСсылка();
КонецФункции

Функция СостояниеОтправленныхСведений(Запись, РеквизитыСведений = Неопределено, СостояниеРегистрации = Неопределено)
	Если Запись.ОтправленныеСведения = Запись.ПоследниеСведения Тогда
		Возврат Запись.СостояниеСведений;
	ИначеЕсли ЗначениеЗаполнено(Запись.ОтправленныеСведения) Тогда
		Возврат СостояниеСведений(Запись, Запись.ОтправленныеСведения, РеквизитыСведений, СостояниеРегистрации);
	Иначе
		Возврат Перечисления.СостоянияДокументаСЭДОФСС.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Процедура ОбновитьПоФизическимЛицам(ФизическиеЛица) Экспорт
	//Если ФизическиеЛица.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СведенияОЗастрахованныхЛицахФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	//|	СведенияОЗастрахованныхЛицахФСС.Сотрудник КАК Сотрудник
	//|ИЗ
	//|	РегистрСведений.СведенияОЗастрахованныхЛицахФСС КАК СведенияОЗастрахованныхЛицахФСС
	//|ГДЕ
	//|	СведенияОЗастрахованныхЛицахФСС.ФизическоеЛицо В(&ФизическиеЛица)
	//|ИТОГИ ПО
	//|	ГоловнаяОрганизация";
	//Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	//
	//Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Для Каждого СтрокаСтрахователь Из Дерево.Строки Цикл
	//	Обновить(СтрокаСтрахователь.ГоловнаяОрганизация, СтрокаСтрахователь.Строки.ВыгрузитьКолонку("Сотрудник"));
	//КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьФлажокТребуетсяАктуализировать(ГоловнаяОрганизация, ФизическоеЛицо, ПоляТребующиеАктуализации, ДатаПоследнегоИзменения) Экспорт
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо);
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Запись.ФизическоеЛицо            = ФизическоеЛицо;
	Запись.ГоловнаяОрганизация       = ГоловнаяОрганизация;
	Запись.ТребуетсяАктуализировать  = Истина;
	Запись.ПоляТребующиеАктуализации = ПоляТребующиеАктуализации;
	Запись.СостояниеСведений         = Перечисления.СостоянияДокументаСЭДОФСС.ТребуетсяАктуализировать;
	МаксимальнаяДатаОтправки         = МаксимальнаяДатаОтправки(ДатаПоследнегоИзменения);
	Запись.МаксимальнаяДатаОтправки  = Макс(Запись.МаксимальнаяДатаОтправки, МаксимальнаяДатаОтправки);
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура ОтключитьФлажокТребуетсяАктуализировать(ГоловнаяОрганизация, ФизическоеЛицо) Экспорт
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо);
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Запись.ФизическоеЛицо            = ФизическоеЛицо;
	Запись.ГоловнаяОрганизация       = ГоловнаяОрганизация;
	Запись.ТребуетсяАктуализировать  = Ложь;
	Запись.ПоляТребующиеАктуализации = "";
	Запись.СостояниеСведений         = СостояниеСведений(Запись, Запись.ПоследниеСведения);
	Если Не Запись.ТребуетсяСоздать Тогда
		Запись.МаксимальнаяДатаОтправки = '00010101';
	КонецЕсли;
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура ОтметитьСведенияКакПринятыеФондом(ГоловнаяОрганизация, ФизическоеЛицо) Экспорт
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо);
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Запись.ФизическоеЛицо            = ФизическоеЛицо;
	Запись.ГоловнаяОрганизация       = ГоловнаяОрганизация;
	Запись.ТребуетсяСоздать          = Ложь;
	Запись.ТребуетсяАктуализировать  = Ложь;
	Запись.ПоляТребующиеАктуализации = "";
	Запись.МаксимальнаяДатаОтправки  = '00010101';
	Запись.СостояниеСведений         = Перечисления.СостоянияДокументаСЭДОФСС.Принят;
	Запись.СостояниеОтправки         = Перечисления.СостоянияДокументаСЭДОФСС.Принят;
	Запись.ОтправленныеСведения      = Запись.ПоследниеСведения;
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура СведенияНеПланируетсяОтправлять(ГоловнаяОрганизация, ФизическоеЛицо) Экспорт
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо);
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Запись.ФизическоеЛицо            = ФизическоеЛицо;
	Запись.ГоловнаяОрганизация       = ГоловнаяОрганизация;
	Запись.ТребуетсяСоздать          = Ложь;
	Запись.ТребуетсяАктуализировать  = Ложь;
	Запись.ПоляТребующиеАктуализации = "";
	Запись.МаксимальнаяДатаОтправки  = '00010101';
	Запись.Скрыть                    = Истина;
	Запись.ДатаСкрытия               = ТекущаяДата(); // АПК:143 Для фильтрации событий в журнале регистрации требуется дата сервера.
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

#Область Регламенты

Функция МаксимальнаяДатаОтправки(ДатаПоследнегоИзменения)
	Возврат СЭДОФСС.БлижайшийРабочийДень(ДатаПоследнегоИзменения, РабочихДнейНаОтправкуНовыхСведений());
КонецФункции

Функция РабочихДнейНаОтправкуНовыхСведений()
	Возврат 3;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли