#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ФизическоеЛицо)
	|	И ЗначениеРазрешено(ГоловнаяОрганизация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// АПК:581-выкл. Методы могут вызываться из расширений.
// АПК:299-выкл. Методы могут вызываться из расширений.
// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ГоловнаяОрганизация - ОпределяемыйТип.Организация    - Значение отбора по соответствующему измерению.
//   ФизическоеЛицо     - СправочникСсылка.ФизическиеЛица - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.ОчередьОбработкиКадровыхДанныхФСС - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".'"),
			Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС");
		ЭлементБлокировки.УстановитьЗначение("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", ФизическоеЛицо);
		КонецЕсли;
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
		Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		КонецЕсли;
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить %1 %2 о сотруднике %3 по причине: %4'"),
			Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.Представление(),
			ГоловнаяОрганизация,
			ФизическоеЛицо,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС,
			ФизическоеЛицо,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьОбработкиКадровыхДанныхФСС
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьОбработкиКадровыхДанныхФСС
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.
// АПК:299-вкл.
// АПК:581-вкл.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапланироватьОбновление(ГоловнаяОрганизация, ФизическиеЛица) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Обновляются все данные.
	
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация);
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Таблица = Набор.Выгрузить();
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		Запись = Таблица.Найти(ФизическоеЛицо, "ФизическоеЛицо");
		Если Запись = Неопределено Тогда
			Запись = Таблица.Добавить();
		КонецЕсли;
		Запись.ФизическоеЛицо       = ФизическоеЛицо;
		Запись.ГоловнаяОрганизация  = ГоловнаяОрганизация;
		Запись.ОбработкаНачата      = Ложь;
		Запись.ДатаНачалаОбработки  = '00010101';
		Если Не ЗначениеЗаполнено(Запись.ДатаПервогоИзменения) Тогда
			Запись.ДатаПервогоИзменения = ТекущаяДатаСеанса;
		КонецЕсли;
		Запись.ДатаПоследнегоИзменения = ТекущаяДатаСеанса;
	КонецЦикла;
	
	Набор.Загрузить(Таблица);
	ЗавершитьЗаписьНабора(Набор);
	
	ДатаОчередногоЗапуска = Константы.ДатаОбработкиКадровыхДанныхФСС.Получить();
	Если ДатаОчередногоЗапуска + 3600*12 < ТекущаяДатаСеанса Тогда
		// Задание отключено или по каким-то причинам не запустилось.
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораДней = 1;
		Расписание.ВремяНачала = ТекущаяДата() + 5*60; // После завершения транзакции.
		Расписание.ПериодПовтораВТечениеДня = 3600;    // Каждый час вплоть до отключения.
		МетаданныеЗадания = Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС;
		ВключитьПредопределенноеЗадание(МетаданныеЗадания, Расписание);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработчикФоновогоЗадания() Экспорт
	УстановитьПривилегированныйРежим(Истина); // Обновляются все данные.
	
	СброситьДатуОбработкиНачалаСтарыхЗаданий();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Очередь.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Очередь.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Очередь.ОбработкаНачата КАК ОбработкаНачата,
	|	Очередь.ДатаПервогоИзменения КАК ДатаПервогоИзменения,
	|	Очередь.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	Очередь.ДатаНачалаОбработки КАК ДатаНачалаОбработки
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1000
	|		Очередь.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Очередь.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		Очередь.ОбработкаНачата КАК ОбработкаНачата,
	|		Очередь.ДатаПервогоИзменения КАК ДатаПервогоИзменения,
	|		Очередь.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|		Очередь.ДатаНачалаОбработки КАК ДатаНачалаОбработки
	|	ИЗ
	|		РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС КАК Очередь
	|	ГДЕ
	|		Очередь.ОбработкаНачата = ЛОЖЬ
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ДатаПоследнегоИзменения) КАК Очередь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация,
	|	ФизическоеЛицо";
	
	// Обработка должна начинаться после завершения транзакции изменения кадровых данных.
	ОжиданиеГотовностиКОбновлению = 60*5;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
		ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
		МассивФизлиц = Новый Массив;
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Пока Выборка.Следующий() Цикл
			ДатаГотовностиКОбновлению = Выборка.ДатаПоследнегоИзменения + ОжиданиеГотовностиКОбновлению;
			Если ДатаГотовностиКОбновлению <= ТекущаяДатаСеанса Тогда
				МассивФизлиц.Добавить(Выборка.ФизическоеЛицо);
			КонецЕсли;
		КонецЦикла;
		ОбновитьДанныеФизическихЛиц(ГоловнаяОрганизация, МассивФизлиц);
	КонецЦикла;
	
	Если Запрос.Выполнить().Пустой() Тогда
		ОтключитьПредопределенноеЗадание(Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС);
		Константы.ДатаОбработкиКадровыхДанныхФСС.Установить('00010101'); // Задание отключено.
	Иначе
		Константы.ДатаОбработкиКадровыхДанныхФСС.Установить(ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьПредопределенноеЗадание(МетаданныеЗадания, Расписание)
	ТребуетсяВключитьЗадание = Истина;
	Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Метаданные", МетаданныеЗадания));
	Для Каждого Задание Из Найденные Цикл
		Если ТребуетсяВключитьЗадание Тогда
			Если Не Задание.Использование Тогда
				Параметры = Новый Структура("Использование, Расписание", Истина, Расписание);
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Параметры);
			КонецЕсли;
		Иначе
			Попытка
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			Исключение
				Подробно = Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Регламентное задание'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение,
					МетаданныеЗадания,
					,
					НСтр("ru = 'Не удалось удалить дублирующее регламентное задание по причине:'") + Подробно);
				Если Задание.Использование Тогда
					РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Новый Структура("Использование", Ложь));
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		ТребуетсяВключитьЗадание = Ложь;
	КонецЦикла;
	Если ТребуетсяВключитьЗадание Тогда
		Параметры = Новый Структура("Использование, Расписание, Метаданные", Истина, Расписание, МетаданныеЗадания);
		РегламентныеЗаданияСервер.ДобавитьЗадание(Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура ОтключитьПредопределенноеЗадание(МетаданныеЗадания)
	Параметры = Новый Структура("Использование", Ложь);
	Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Метаданные", МетаданныеЗадания));
	Для Каждого Задание Из Найденные Цикл
		Если Задание.Использование Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Новый Структура("Использование", Ложь));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СброситьДатуОбработкиНачалаСтарыхЗаданий()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОчередьОбработкиКадровыхДанныхФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОчередьОбработкиКадровыхДанныхФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС КАК ОчередьОбработкиКадровыхДанныхФСС
	|ГДЕ
	|	ОчередьОбработкиКадровыхДанныхФСС.ОбработкаНачата = ИСТИНА
	|	И ОчередьОбработкиКадровыхДанныхФСС.ДатаНачалаОбработки > ДАТАВРЕМЯ(1, 1, 1)
	|	И ОчередьОбработкиКадровыхДанныхФСС.ДатаНачалаОбработки < &ДваЧасаНазад";
	Запрос.УстановитьПараметр("ДваЧасаНазад", ТекущаяДата() - 3600*2);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ГоловнаяОрганизация, Выборка.ФизическоеЛицо);
		Если Набор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
			Продолжить;
		КонецЕсли;
		Запись = Набор[0];
		Запись.ОбработкаНачата     = Ложь;
		Запись.ДатаНачалаОбработки = '00010101';
		ЗавершитьЗаписьНабора(Набор);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДанныеФизическихЛиц(ГоловнаяОрганизация, ФизическиеЛица) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Обновляются все данные.
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ТолькоРазрешенные = Ложь;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация         = ГоловнаяОрганизация;
	ПараметрыПолучения.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолучения.НачалоПериода       = ТекущаяДатаСеанса;
	ПараметрыПолучения.ОкончаниеПериода    = ТекущаяДатаСеанса;
	ПараметрыПолучения.КадровыеДанные      = Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных();
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолучения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляКадровыхДанных КАК ПоляКадровыхДанных,
	|	СведенияОЗастрахованныхЛицахФСС.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОЗастрахованныхЛицахФСС.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОЗастрахованныхЛицахФСС.ПоследниеСведения КАК ПоследниеСведения,
	|	СведенияОЗастрахованныхЛицахФСС.ОтправленныеСведения КАК ОтправленныеСведения
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗастрахованныхЛицахФСС КАК СведенияОЗастрахованныхЛицахФСС
	|		ПО СотрудникиОрганизации.ФизическоеЛицо = СведенияОЗастрахованныхЛицахФСС.ФизическоеЛицо
	|			И (СведенияОЗастрахованныхЛицахФСС.ГоловнаяОрганизация = &ГоловнаяОрганизация)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляКадровыхДанных КАК ПоляКадровыхДанных", "СотрудникиОрганизации.*");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДатаПоследнегоИзменения = ТекущаяДатаСеанса;
		ОтметитьНачалоОбработки(Выборка.ГоловнаяОрганизация, Выборка.ФизическоеЛицо, ДатаПоследнегоИзменения);
		
		ПоляТребующиеАктуализации = СведенияКоторыеТребуетсяАктуализировать(Выборка);
		Если ПустаяСтрока(ПоляТребующиеАктуализации) Тогда
			РегистрыСведений.СведенияОЗастрахованныхЛицахФСС.ОтключитьФлажокТребуетсяАктуализировать(
				Выборка.ГоловнаяОрганизация,
				Выборка.ФизическоеЛицо);
		Иначе
			РегистрыСведений.СведенияОЗастрахованныхЛицахФСС.ВключитьФлажокТребуетсяАктуализировать(
				Выборка.ГоловнаяОрганизация,
				Выборка.ФизическоеЛицо,
				ПоляТребующиеАктуализации,
				ДатаПоследнегоИзменения);
		КонецЕсли;
		
		ОтметитьЗавершениеОбработки(Выборка.ГоловнаяОрганизация, Выборка.ФизическоеЛицо);
		
	КонецЦикла;
	
КонецПроцедуры

// Включает флажок ОбработкаНачата.
Процедура ОтметитьНачалоОбработки(ГоловнаяОрганизация, ФизическоеЛицо, ДатаПоследнегоИзменения)
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо);
	Если Набор <> Неопределено Тогда
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
		Иначе
			Запись = Набор[0];
			Запись.ОбработкаНачата     = Истина;
			Запись.ДатаНачалаОбработки = ТекущаяДата();
			ДатаПоследнегоИзменения = Запись.ДатаПоследнегоИзменения;
			ЗавершитьЗаписьНабора(Набор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Удаляет запись в регистре.
Процедура ОтметитьЗавершениеОбработки(ГоловнаяОрганизация, ФизическоеЛицо)
	Набор = НачатьЗаписьНабора(ГоловнаяОрганизация, ФизическоеЛицо);
	Если Набор <> Неопределено Тогда
		Если Набор.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(Набор);
		Иначе
			Набор.Очистить();
			ЗавершитьЗаписьНабора(Набор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СведенияКоторыеТребуетсяАктуализировать(Выборка)
	Сведения = Выборка.ПоследниеСведения;
	Если Не ЗначениеЗаполнено(Сведения) Тогда
		Сведения = Выборка.ОтправленныеСведения;
		Если Не ЗначениеЗаполнено(Сведения) Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	СведенияОбъект = Сведения.ПолучитьОбъект();
	СведенияОбъект.ДополнительныеСвойства.Вставить("КадровыеДанные", Выборка);
	
	// Очистка реквизитов которые отключают заполнение вторичных данных.
	СведенияОбъект.ДатаОтправки        = Неопределено;
	СведенияОбъект.РегистрацияСведений = Неопределено;
	
	// Отключение заполнения реквизитов которые не относятся к кадровым данным (не влияют на необходимость отправки).
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "СтраховательНаименование");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "СтраховательЭлектроннаяПочта");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "СтраховательТелефон");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставитель");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставительДолжность");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставительОснованиеПодписи");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставительФИО");
	ФиксацияВторичныхДанныхВДокументах.ЗафиксироватьРеквизитШапки(СведенияОбъект, "УполномоченныйПредставительТелефон");
	
	ИсправленияДоОбновления = СведенияОбъект.ФиксацияИзменений.Выгрузить();
	
	ПараметрыФиксации = Документы.СведенияОЗастрахованномЛицеФСС.ПараметрыФиксацииВторичныхДанных();
	ПараметрыФиксации.ФиксироватьОтличия = Истина;
	Модифицирован = СведенияОбъект.ОбновитьВторичныеДанные(ПараметрыФиксации);
	Если Не Модифицирован Тогда
		Возврат "";
	КонецЕсли;
	
	Фильтр = Новый Структура("ИмяРеквизита, Путь, ИдентификаторСтроки");
	НовыеИсправления = СведенияОбъект.ФиксацияИзменений.Выгрузить();
	Для Каждого ИсправлениеДоОбновления Из ИсправленияДоОбновления Цикл
		ЗаполнитьЗначенияСвойств(Фильтр, ИсправлениеДоОбновления);
		Найденные = НовыеИсправления.НайтиСтроки(Фильтр);
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			НовыеИсправления.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	Если НовыеИсправления.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИзмененныеСмысловыеГруппы = Новый Массив;
	ИзмененныеРеквизиты = НовыеИсправления.ВыгрузитьКолонку("ИмяРеквизита");
	Для Каждого ИмяРеквизита Из ИзмененныеРеквизиты Цикл
		Если ИмяРеквизита = "АдресРегистрации" Или ИмяРеквизита = "АдресПроживания" Тогда
			Продолжить; // Значения адресов в формате JSON не контролируются, контролируются только их производные.
		ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "УдостоверениеЛичности")
			Или ИмяРеквизита = "ДатаРождения"
			Или ИмяРеквизита = "Пол" Тогда
			СмысловаяГруппа = НСтр("ru = 'Паспортные данные'");
		ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "АдресРегистрации") Тогда
			СмысловаяГруппа = НСтр("ru = 'Адрес регистрации'");
		ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "РазрешениеНаПроживание") Тогда
			СмысловаяГруппа = НСтр("ru = 'РВП/ВНЖ'");
		ИначеЕсли (СтрНачинаетсяС(ИмяРеквизита, "Банк") Или ИмяРеквизита = "НомерСчета")
			И СведенияОбъект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
			СмысловаяГруппа = НСтр("ru = 'Способ выплаты'");
		ИначеЕсли ИмяРеквизита = "КартаМИР"
			И СведенияОбъект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
			СмысловаяГруппа = НСтр("ru = 'Способ выплаты'");
		ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "АдресПроживания")
			И СведенияОбъект.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
			СмысловаяГруппа = НСтр("ru = 'Адрес проживания'");
		ИначеЕсли ИмяРеквизита = "СНИЛС" Тогда
			СмысловаяГруппа = НСтр("ru = 'СНИЛС'");
		ИначеЕсли ИмяРеквизита = "СотрудникИНН" Тогда
			СмысловаяГруппа = НСтр("ru = 'ИНН'");
		ИначеЕсли ИмяРеквизита = "СотрудникФамилия" Тогда
			СмысловаяГруппа = НСтр("ru = 'Фамилия'");
		ИначеЕсли ИмяРеквизита = "СотрудникИмя" Тогда
			СмысловаяГруппа = НСтр("ru = 'Имя'");
		ИначеЕсли ИмяРеквизита = "СотрудникОтчество" Тогда
			СмысловаяГруппа = НСтр("ru = 'Отчество'");
		ИначеЕсли ИмяРеквизита = "СотрудникТелефон" Тогда
			СмысловаяГруппа = НСтр("ru = 'Телефон'");
		ИначеЕсли ИмяРеквизита = "ВидОсобойЗоны"
			Или ИмяРеквизита = "ОтношениеКОсобойЗоне"
			Или ИмяРеквизита = "ПричинаПредоставленияЛьготы" Тогда
			СмысловаяГруппа = НСтр("ru = 'Льготы'");
		ИначеЕсли СтрНачинаетсяС(ИмяРеквизита, "ТрудовойДоговор") Тогда
			СмысловаяГруппа = НСтр("ru = 'Трудовой договор'");
		Иначе
			Продолжить; // Отслеживаются изменения только тех реквизитов, которые отправляются в электронном виде.
		КонецЕсли;
		ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(ИзмененныеСмысловыеГруппы, СмысловаяГруппа);
	КонецЦикла;
	
	Возврат СтрСоединить(ИзмененныеСмысловыеГруппы, ", ");
КонецФункции

#КонецОбласти

#КонецЕсли