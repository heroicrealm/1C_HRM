#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс


#Область ПриДобавленииИсключенийПоискаСсылок

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.СведенияОбЭЛН);
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Регистрирует обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриРегистрацииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.41";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9d436e83-3e0d-11eb-80e8-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.СведенияОбЭЛН.ЗаполнитьГоловнуюОрганизацию";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение головной организации для ЭЛН.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.141";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("bfc88408-ba22-11eb-80f1-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.СведенияОбЭЛН.ЗаполнитьПричинуИсправления";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение причины исправления для ЭЛН.'");
	
КонецПроцедуры

// Заполняет измерение ГоловнаяОрганизация на основании ресурса Организация.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьГоловнуюОрганизацию(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛН,
	|	СведенияОбЭЛН.Организация КАК Организация,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СведенияОбЭЛН.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	ОбработкаЗавершена = Истина;
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЛокальнаяТранзакция = Не ТранзакцияАктивна();
		Если ЛокальнаяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		// Чтение записи со старыми значениями измерений.
		СтарыйНабор = НачатьЗаписьНабора(Выборка.НомерЛН, ПустаяОрганизация, Ложь);
		Если СтарыйНабор = Неопределено Или СтарыйНабор.Количество() = 0 Тогда
			// Ошибка блокировки или другой процесс изменил запись.
			ОбработкаЗавершена = Ложь;
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтараяЗапись = СтарыйНабор[0];
		ТребуемаяГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(СтараяЗапись.Организация);
		Если СтараяЗапись.ГоловнаяОрганизация = ТребуемаяГоловнаяОрганизация Тогда
			// Ссылки совпадают, обновление не требуется.
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Подготовка набора для записи с новыми значениями измерений.
		НовыйНабор = НачатьЗаписьНабора(Выборка.НомерЛН, ТребуемаяГоловнаяОрганизация, Истина);
		Если НовыйНабор = Неопределено Или НовыйНабор.Количество() > 0 Тогда
			// Ошибка блокировки или запись уже занята.
			Если НовыйНабор = Неопределено Тогда
				ОбработкаЗавершена = Ложь;
			КонецЕсли;
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НовыйНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись);
		НоваяЗапись.ГоловнаяОрганизация = ТребуемаяГоловнаяОрганизация;
		
		СтарыйНабор.Очистить();
		
		ЗавершитьЗаписьНабора(СтарыйНабор);
		ЗавершитьЗаписьНабора(НовыйНабор);
		
		Если ЛокальнаяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

// Заполняет ресурсы Исправление, КодПричиныИсправления, ОписаниеПричиныИсправления и реквизит БольничныйПроведен.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ЗаполнитьПричинуИсправления(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(ДанныеЭЛН.Исправление, ЛОЖЬ) КАК Исправление,
	|	ЕСТЬNULL(ДанныеЭЛН.КодПричиныИсправления, """") КАК КодПричиныИсправления,
	|	ЕСТЬNULL(ДанныеЭЛН.ОписаниеПричиныИсправления, """") КАК ОписаниеПричиныИсправления,
	|	ЕСТЬNULL(БольничныйЛист.Проведен, ЛОЖЬ) КАК БольничныйПроведен
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ДанныеЭЛН
	|		ПО СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = ДанныеЭЛН.Ссылка
	|			И СведенияОбЭЛН.НомерЛисткаНетрудоспособности = ДанныеЭЛН.НомерЛисткаНетрудоспособности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО СведенияОбЭЛН.Больничный = БольничныйЛист.Ссылка
	|ГДЕ
	|	(СведенияОбЭЛН.Больничный <> ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|			ИЛИ СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр <> ЗНАЧЕНИЕ(Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка))";
	ОбработкаЗавершена = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЛокальнаяТранзакция = Не ТранзакцияАктивна();
		Если ЛокальнаяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		// Чтение записи со старыми значениями измерений.
		Набор = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, Выборка.ГоловнаяОрганизация, Ложь);
		Если Набор = Неопределено Или Набор.Количество() = 0 Тогда
			// Ошибка блокировки или другой процесс изменил запись.
			ОбработкаЗавершена = Ложь;
			Если ЛокальнаяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Запись = Набор[0];
		
		Если ЗначениеЗаполнено(Запись.ПодготовленныйКОтправкеРеестр) Тогда
			Запись.Исправление = Выборка.Исправление;
			Запись.КодПричиныИсправления = Выборка.КодПричиныИсправления;
			Запись.ОписаниеПричиныИсправления = Выборка.ОписаниеПричиныИсправления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Больничный) Тогда
			Запись.БольничныйПроведен = Выборка.БольничныйПроведен;
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(Набор);
		
		Если ЛокальнаяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ПолучениеСведений

Функция ЭтоЭЛН(НомерЛН) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
	|	И (СведенияОбЭЛН.ДоступенИсходныйXML
	|			ИЛИ СведенияОбЭЛН.Хеш <> """")";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Функция ДоступенИсходныйXML(НомерЛН, ГоловнаяОрганизация) Экспорт
	ЗначенияРесурсов = ЗначенияРесурсов(НомерЛН, ГоловнаяОрганизация);
	Возврат ?(ЗначенияРесурсов = Неопределено, Ложь, ЗначенияРесурсов.ДоступенИсходныйXML);
КонецФункции

Функция ЗначенияРесурсов(НомерЛН, ГоловнаяОрганизация) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СведенияОбЭЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Фильтр = Новый Структура;
	Фильтр.Вставить("НомерЛисткаНетрудоспособности", НомерЛН);
	Фильтр.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Возврат Получить(Фильтр);
КонецФункции

Функция ИсходныйXML(НомерЛН, ГоловнаяОрганизация) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.ИсходныйXML КАК ИсходныйXML
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН
	|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИсходныйXML.Получить();
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ПрочитатьХеш(НомерЛН, ГоловнаяОрганизация) Экспорт
	Фильтр = Новый Структура;
	Фильтр.Вставить("НомерЛисткаНетрудоспособности", НомерЛН);
	Фильтр.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Возврат Получить(Фильтр).Хеш;
КонецФункции

Процедура ЗаписатьПервичныеСведения(НомерЛН, Хеш, СостояниеЭЛНВФСС, Организация, ФизическоеЛицо, ИсходныйXML = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН)
		Или (Не ЗначениеЗаполнено(Хеш) И Не ЗначениеЗаполнено(СостояниеЭЛНВФСС)) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	НаборЗаписей = НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, Ложь);
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.НомерЛисткаНетрудоспособности = НомерЛН;
		Запись.ГоловнаяОрганизация = ГоловнаяОрганизация;
		Запись.Организация = Организация;
		Запись.ФизическоеЛицо = ФизическоеЛицо;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Хеш) Тогда
		Запись.Хеш = Хеш;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходныйXML) Тогда
		Запись.ИсходныйXML = Новый ХранилищеЗначения(ИсходныйXML, Новый СжатиеДанных(9));
		Запись.ДоступенИсходныйXML = Истина;
	КонецЕсли;
	
	Если СостояниеЭЛНВФСС <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Запись.СостояниеФСС) Тогда
			Запись.СостояниеФСС = СостояниеЭЛНВФСС;
		Иначе
			ПриоритетыСостояний = Перечисления.СостоянияЭЛНВФСС.Приоритеты();
			ТекущийПриоритет = ПриоритетыСостояний[Запись.СостояниеФСС];
			НовыйПриоритет = ПриоритетыСостояний[СостояниеЭЛНВФСС];
			Если ТекущийПриоритет < НовыйПриоритет Тогда
				Запись.СостояниеФСС = СостояниеЭЛНВФСС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(НаборЗаписей);
КонецПроцедуры

#КонецОбласти


#Область ЗаполнениеРеестров

Функция ТаблицаОснованийДляРеестраЭЛН(Организация, ИгнорируемыйПодготовленныйКОтправкеРеестр, ВключаемыеЭЛН, ИсключаемыеЭЛН, КоличествоПервых) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяСсылкаРеестра", Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИгнорируемыйПодготовленныйКОтправкеРеестр", ИгнорируемыйПодготовленныйКОтправкеРеестр);
	Запрос.УстановитьПараметр("ВключаемыеЭЛН", ВключаемыеЭЛН);
	Запрос.УстановитьПараметр("ИсключаемыеЭЛН", ИсключаемыеЭЛН);
	Запрос.УстановитьПараметр("ПустаяПричина", Перечисления.ПричиныНетрудоспособности.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
	|	СведенияОбЭЛН.Больничный КАК Больничный,
	|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр КАК ПодготовленныйКОтправкеРеестр
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	НЕ СведенияОбЭЛН.ИзмененияПринятыФСС
	|	И СведенияОбЭЛН.Организация = &Организация
	|	И СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр В (&ПустаяСсылкаРеестра, &ИгнорируемыйПодготовленныйКОтправкеРеестр)
	|	И СведенияОбЭЛН.НомерЛисткаНетрудоспособности В(&ВключаемыеЭЛН)
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИсключаемыеЭЛН)
	|	И СведенияОбЭЛН.ПричинаНетрудоспособности <> &ПустаяПричина
	|	И СведенияОбЭЛН.БольничныйПроведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	СведенияОбЭЛН.ДатаБольничного";
	Если ВключаемыеЭЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОбЭЛН.НомерЛисткаНетрудоспособности В(&ВключаемыеЭЛН)", "");
	КонецЕсли;
	Если ИсключаемыеЭЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИсключаемыеЭЛН)", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОбЭЛН.Организация = &Организация", "");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", ?(КоличествоПервых = 0, "", "ПЕРВЫЕ " + Формат(КоличествоПервых, "ЧГ=")));
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция НомераЭЛНТребующихПервичнуюОтправку(ГоловнаяОрганизация, НомераЭЛН) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НомераЭЛН", НомераЭЛН);
	Запрос.УстановитьПараметр("ПустаяСсылкаРеестра", Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПричина", Перечисления.ПричиныНетрудоспособности.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности В(&НомераЭЛН)
	|	И СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = &ПустаяСсылкаРеестра
	|	И НЕ СведенияОбЭЛН.ИзмененияПринятыФСС
	|	И СведенияОбЭЛН.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СведенияОбЭЛН.ПричинаНетрудоспособности <> &ПустаяПричина";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерЛисткаНетрудоспособности");
КонецФункции

#КонецОбласти


#Область СобытияБольничных

Процедура ПриЗаписиБольничного(БольничныйОбъект) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Кэш = Новый Соответствие;
	
	ГоловнаяОрганизация        = БольничныйОбъект.ГоловнаяОрганизация;
	ЗначенияРеквизитовДоЗаписи = БольничныйОбъект.ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	ПодобратьДругойБольничный = Не БольничныйОбъект.Проведен
		Или Не ЗначениеЗаполнено(БольничныйОбъект.НомерЛисткаНетрудоспособности)
		Или (ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаписи.НомерЛисткаНетрудоспособности)
			И БольничныйОбъект.НомерЛисткаНетрудоспособности <> ЗначенияРеквизитовДоЗаписи.НомерЛисткаНетрудоспособности);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаБольничного", БольничныйОбъект.Ссылка);
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", БольничныйОбъект.НомерЛисткаНетрудоспособности);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	(СведенияОбЭЛН.Больничный = &СсылкаБольничного
	|			ИЛИ СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		Если ПодобратьДругойБольничный Тогда
			ЗначенияРеквизитов = БолееПодходящийБольничный(БольничныйОбъект, Запись, Кэш);
		Иначе
			ЗначенияРеквизитов = БольничныйОбъект;
		КонецЕсли;
		
		ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов);
		
		Если ПодобратьДругойБольничный Тогда
			ЗаполнитьФлажокИзмененияПринятыИПричинуИсправленияИзПоследнегоРеестра(Запись);
		ИначеЕсли БольничныйОбъект.ДополнительныеСвойства.Свойство("ЭтоПоследнийБольничныйЭЛН")
			И БольничныйОбъект.ДополнительныеСвойства.ЭтоПоследнийБольничныйЭЛН Тогда
			Запись.ИзмененияПринятыФСС        = Не БольничныйОбъект.ДополнительныеСвойства.ОтправитьЭЛН;
			Запись.Исправление                = БольничныйОбъект.ДополнительныеСвойства.ИсправлениеЭЛН;
			Запись.КодПричиныИсправления      = БольничныйОбъект.ДополнительныеСвойства.КодПричиныИсправленияЭЛН;
			Запись.ОписаниеПричиныИсправления = БольничныйОбъект.ДополнительныеСвойства.ОписаниеПричиныИсправленияЭЛН;
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

Процедура ПередУдалениемБольничного(БольничныйОбъект) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Кэш = Новый Соответствие;
	
	// Обновление поля "Больничный" и связанных с ним полей.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаБольничного", БольничныйОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.Больничный = &СсылкаБольничного";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(БольничныйОбъект.Организация);
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		ЗначенияРеквизитов = БолееПодходящийБольничный(БольничныйОбъект, Запись, Кэш);
		
		Если ЗначенияРеквизитов.Ссылка = БольничныйОбъект.Ссылка Тогда
			// Если удаляется последний больничный в цепочке,
			// то сведения об ЭЛН удаляются вместе с ним.
			НаборЗаписей.Очистить();
		Иначе
			ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов);
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СобытияРеестров

Процедура ПриЗагрузкеОтветаФССПоРеестру(НомерЛН, РеестрОбъект, СтрокаТаблицыЭЛН, Хеш) Экспорт
	
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеестрОбъект.Организация);
	
	НаборЗаписей = НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, Ложь);
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.НомерЛисткаНетрудоспособности = НомерЛН;
		Запись.ГоловнаяОрганизация = ГоловнаяОрганизация;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Хеш) Тогда
		Запись.Хеш = Хеш;
	КонецЕсли;
	
	Если СтрокаТаблицыЭЛН <> Неопределено Тогда
		ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицыЭЛН);
	КонецЕсли;
	
	ЗавершитьЗаписьНабора(НаборЗаписей);
	
КонецПроцедуры

Процедура ПередЗаписьюРеестра(РеестрОбъект, РежимЗаписи, РежимПроведения) Экспорт
	// Очистка поля "ПодготовленныйКОтправкеРеестр" в случае, если реестр был распроведен.
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеестрОбъект.Организация);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаРеестра", РеестрОбъект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
		|ИЗ
		|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
		|ГДЕ
		|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = &СсылкаРеестра";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			ИначеЕсли НаборЗаписей.Количество() > 0
				И НаборЗаписей[0].ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка Тогда
				НаборЗаписей[0].ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
				ЗавершитьЗаписьНабора(НаборЗаписей);
			Иначе
				ОтменитьЗаписьНабора(НаборЗаписей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписиРеестра(РеестрОбъект) Экспорт
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РеестрОбъект.Проведен Или РеестрОбъект.ПометкаУдаления Тогда
		ОчиститьСсылкиНаРеестр(РеестрОбъект);
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = РеестрОбъект.ГоловнаяОрганизация;
	
	Для Каждого СтрокаТаблицы Из РеестрОбъект.ДанныеЭЛН Цикл
		НаборЗаписей = НачатьЗаписьНабора(СтрокаТаблицы.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
		
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			// Нештатная ситуация (ошибка учета) - к отправке зарегистрирован ЭЛН, по которому не загружен хеш.
			Запись = НаборЗаписей.Добавить();
			Запись.НомерЛисткаНетрудоспособности = СтрокаТаблицы.НомерЛисткаНетрудоспособности;
			Запись.ГоловнаяОрганизация = ГоловнаяОрганизация;
		Иначе
			Запись = НаборЗаписей[0];
		КонецЕсли;
		
		ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицы);
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
	
	ОчиститьСсылкиНаРеестр(РеестрОбъект, Истина);
	
КонецПроцедуры

Процедура ПередУдалениемРеестра(РеестрОбъект) Экспорт
	
	// Обновление вторичных данных в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьСсылкиНаРеестр(РеестрОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область НаборЗаписей

Функция НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, ПодниматьИсключениеПриОшибке = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(НомерЛН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	// При переходе на ЭЛН 2.0 добавлен обязательный параметр ГоловнаяОрганизация.
	// В случае несоответствия типа должно возникнуть исключение.
	// В целях обратной совместимости для для расширения 65+
	// реализована возможность "мягкого" выхода без поднятия исключения,
	// для чего 3й параметр сделан необязательным.
	Если ТипЗнч(ПодниматьИсключениеПриОшибке) <> Тип("Булево") Тогда
		Если ТипЗнч(ГоловнаяОрганизация) = Тип("Булево") Тогда
			ПодниматьИсключениеПриОшибке = ГоловнаяОрганизация;
			ГоловнаяОрганизация = Неопределено;
		Иначе
			ПодниматьИсключениеПриОшибке = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(НомерЛН) <> Тип("Строка")
		Или ТипЗнч(ГоловнаяОрганизация) <> Тип("СправочникСсылка.Организации") Тогда
		Попытка
			// Формирование текста ошибки.
			ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
				"РегистрыСведений.СведенияОбЭЛН.НачатьЗаписьНабора",
				"НомерЛН",
				НомерЛН,
				Тип("Строка"));
			ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
				"РегистрыСведений.СведенияОбЭЛН.НачатьЗаписьНабора",
				"ГоловнаяОрганизация",
				ГоловнаяОрганизация,
				Тип("СправочникСсылка.Организации"));
		Исключение
			// Поднятие исключение или сообщение об ошибке.
			Если ПодниматьИсключениеПриОшибке Тогда
				ВызватьИсключение;
			КонецЕсли;
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			УчетПособийСоциальногоСтрахования.ЗаписатьОшибкуВЖурнал(ТекстОшибки, , Метаданные.РегистрыСведений.СведенияОбЭЛН);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СведенияОбЭЛН) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".'"),
			Метаданные.РегистрыСведений.СведенияОбЭЛН.Представление());
	КонецЕсли;
	ЕстьОграниченияДоступа = Не ПолныеПраваИлиПривилегированныйРежим И УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей();
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОбЭЛН");
		ЭлементБлокировки.УстановитьЗначение("НомерЛисткаНетрудоспособности", НомерЛН);
		ЭлементБлокировки.УстановитьЗначение("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЛисткаНетрудоспособности.Установить(НомерЛН);
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
		Если ЕстьОграниченияДоступа Тогда // Чтение в привилегированном режиме.
			УстановитьОтключениеБезопасногоРежима(Истина);
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Прочитать();
			УстановитьПривилегированныйРежим(Ложь);
			УстановитьОтключениеБезопасногоРежима(Ложь);
		Иначе
			НаборЗаписей.Прочитать();
		КонецЕсли;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить сведения об ЭЛН %1 %2 по причине: %3'"),
			НомерЛН,
			ГоловнаяОрганизация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.СведенияОбЭЛН,
			НомерЛН,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		Если ПодниматьИсключениеПриОшибке Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура ОтменитьЗаписьНабора(НаборЗаписей) Экспорт
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеВторичныхДанных

Процедура ОбновитьСведенияОЛисткеНетрудоспособности(Запись, ЗначенияРеквизитов) Экспорт
	
	// Больничный, Организация и ФизическоеЛицо заполняются из больничного вне зависимости от его проведенности:
	//   - Больничный - используется для удаления записей вместе с больничными и другими механизмами (например, СЭДО ФСС);
	//   - Организация и ФизическоеЛицо - используется в RLS.
	Если ЗначенияРеквизитов.НомерЛисткаНетрудоспособности = Запись.НомерЛисткаНетрудоспособности Тогда
		Запись.Больничный         = ЗначенияРеквизитов.Ссылка;
		Запись.Организация        = ЗначенияРеквизитов.Организация;
		Запись.ФизическоеЛицо     = ЗначенияРеквизитов.ФизическоеЛицо;
		Запись.БольничныйПроведен = ЗначенияРеквизитов.Проведен;
	Иначе
		Запись.БольничныйПроведен = Ложь;
	КонецЕсли;
	
	Если Запись.БольничныйПроведен Тогда
		Запись.ПричинаНетрудоспособности         = ЗначенияРеквизитов.ПричинаНетрудоспособности;
		Запись.ДатаБольничного                   = ЗначенияРеквизитов.Дата;
		Запись.ПериодНетрудоспособностиНачало    = ЗначенияРеквизитов.ДатаНачала;
		Запись.ПериодНетрудоспособностиОкончание = ЗначенияРеквизитов.ДатаОкончания;
		Запись.Сотрудник                         = ЗначенияРеквизитов.Сотрудник;
	Иначе
		// В эту ветку код попадает в следующих случаях:
		//   1. Больничный не проведен или отмечен к удалению (исправления также отсутствуют);
		//   2. В больничном изменен номер листка нетрудоспособности (введены сведения другого больничного).
		// В обоих случаях запись в регистре остается до тех пор,
		//   пока больничный не будет окончательно удален из программы,
		//   либо пока в программе не появится другой больничный с этим номером ЭЛН.
		// Поэтому поля Больничный, Организация и ФизическоеЛицо остаются заполненными,
		//   а прочие поля очищаются. В частности, очищается поле ПричинаНетрудоспособности,
		//   исключая возможность автоматического подбора этого ЭЛН в реестр ЭЛН.
		Запись.ПричинаНетрудоспособности         = Неопределено;
		Запись.ДатаБольничного                   = Неопределено;
		Запись.ПериодНетрудоспособностиНачало    = Неопределено;
		Запись.ПериодНетрудоспособностиОкончание = Неопределено;
		Запись.Сотрудник                         = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСведенияОРеестре(Запись, РеестрОбъект, СтрокаТаблицыЭЛН) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЭЛН.Состояние) Тогда
		Запись.ОтправленныйРеестр     = РеестрОбъект.Ссылка;
		Запись.ДатаОтправки           = РеестрОбъект.ДатаПолученияОтветаФСС;
		Запись.СостояниеОтправки      = СтрокаТаблицыЭЛН.Состояние;
		Запись.КомментарийКСостоянию  = СтрокаТаблицыЭЛН.КомментарийКСостоянию;
		Если Запись.СостояниеОтправки = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС Тогда
			Запись.ПринятыйРеестр      = РеестрОбъект.Ссылка;
			Запись.ИзмененияПринятыФСС = Истина;
			Запись.Исправление         = Ложь;
		КонецЕсли;
		Запись.ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
	Иначе
		Запись.ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет флажок отправки и причину исправления из последнего реестра.
Процедура ЗаполнитьФлажокИзмененияПринятыИПричинуИсправленияИзПоследнегоРеестра(Запись)
	
	Если ЗначениеЗаполнено(Запись.ПодготовленныйКОтправкеРеестр) Тогда
		// Последний изменный пользователем реестр еще не отправлен в ФСС.
		Запись.ИзмененияПринятыФСС = Ложь;
		РеквизитыСтрокиРеестра = РеквизитыСтрокиРеестра(
			Запись.ПодготовленныйКОтправкеРеестр,
			Запись.НомерЛисткаНетрудоспособности);
	ИначеЕсли ЗначениеЗаполнено(Запись.ПринятыйРеестр) Тогда
		// Последний изменный пользователем реестр был принят ФСС.
		Запись.ИзмененияПринятыФСС = Истина;
		РеквизитыСтрокиРеестра = РеквизитыСтрокиРеестра(
			Запись.ПринятыйРеестр,
			Запись.НомерЛисткаНетрудоспособности);
	Иначе
		// Последний изменный пользователем реестр был отвергнут ФСС.
		Запись.ИзмененияПринятыФСС = Ложь;
		РеквизитыСтрокиРеестра = ПоследнийПроведенныйРеестр(
			Запись.НомерЛисткаНетрудоспособности,
			Запись.ГоловнаяОрганизация,
			Перечисления.СостоянияРеестровФСС.Подготовлен);
	КонецЕсли;
	
	Если РеквизитыСтрокиРеестра <> Неопределено Тогда
		Запись.Исправление                = РеквизитыСтрокиРеестра.Исправление;
		Запись.КодПричиныИсправления      = РеквизитыСтрокиРеестра.КодПричиныИсправления;
		Запись.ОписаниеПричиныИсправления = РеквизитыСтрокиРеестра.ОписаниеПричиныИсправления;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыСтрокиРеестра(СсылкаРеестра, НомерЛисткаНетрудоспособности)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.Дата КАК Дата,
	|	Шапка.ДатаПолученияОтветаФСС КАК ДатаПолученияОтветаФСС,
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Состояние КАК Состояние,
	|	ТабличнаяЧасть.КомментарийКСостоянию КАК КомментарийКСостоянию,
	|	ТабличнаяЧасть.Исправление КАК Исправление,
	|	ТабличнаяЧасть.КодПричиныИсправления КАК КодПричиныИсправления,
	|	ТабличнаяЧасть.ОписаниеПричиныИсправления КАК ОписаниеПричиныИсправления
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК Шапка
	|		ПО (ТабличнаяЧасть.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности)
	|			И (ТабличнаяЧасть.Ссылка = &Ссылка)
	|			И (Шапка.Ссылка = &Ссылка)";
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", НомерЛисткаНетрудоспособности);
	Запрос.УстановитьПараметр("Ссылка", СсылкаРеестра);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПоследнийПроведенныйРеестр(НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, СостояниеРеестра = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Шапка.Дата КАК Дата,
	|	Шапка.ДатаПолученияОтветаФСС КАК ДатаПолученияОтветаФСС,
	|	ТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ТабличнаяЧасть.Состояние КАК Состояние,
	|	ТабличнаяЧасть.КомментарийКСостоянию КАК КомментарийКСостоянию,
	|	ТабличнаяЧасть.Исправление КАК Исправление,
	|	ТабличнаяЧасть.КодПричиныИсправления КАК КодПричиныИсправления,
	|	ТабличнаяЧасть.ОписаниеПричиныИсправления КАК ОписаниеПричиныИсправления
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК Шапка
	|		ПО (ТабличнаяЧасть.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности)
	|			И ТабличнаяЧасть.Ссылка = Шапка.Ссылка
	|			И (Шапка.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|			И (Шапка.Проведен)
	|			И (Шапка.СостояниеРеестра = &СостояниеРеестра)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", НомерЛисткаНетрудоспособности);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Если СостояниеРеестра = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (Шапка.СостояниеРеестра = &СостояниеРеестра)", "");
	Иначе
		Запрос.УстановитьПараметр("СостояниеРеестра", СостояниеРеестра);
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ОчиститьСсылкиНаРеестр(РеестрОбъект, ТолькоАктуализироватьИспользуемыеНомераЭЛН = Ложь) Экспорт
	// Очистка полей "ПодготовленныйКОтправкеРеестр", "ОтправленныйРеестр" и "ПринятыйРеестр".
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ПодготовленныйКОтправкеРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ОтправленныйРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|ИЗ
	|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|ГДЕ
	|	СведенияОбЭЛН.ПринятыйРеестр = &СсылкаРеестра
	|	И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)";
	
	Запрос.УстановитьПараметр("СсылкаРеестра", РеестрОбъект.Ссылка);
	Если ТолькоАктуализироватьИспользуемыеНомераЭЛН Тогда
		// Очистка ссылок только на те номера ЭЛН, которые ранее использовались в этом реестре, а сейчас не используются.
		Запрос.УстановитьПараметр("ИспользуемыеНомераЛН", РеестрОбъект.ДанныеЭЛН.ВыгрузитьКолонку("НомерЛисткаНетрудоспособности"));
	Иначе
		// Очистка любых ссылок на этот реестр.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ СведенияОбЭЛН.НомерЛисткаНетрудоспособности В (&ИспользуемыеНомераЛН)", "");
	КонецЕсли;
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(РеестрОбъект.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = НачатьЗаписьНабора(Выборка.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация, Истина);
		Если НаборЗаписей = Неопределено Тогда
			Продолжить;
		ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
			ОтменитьЗаписьНабора(НаборЗаписей);
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей[0];
		
		// Очистка полей заполняемых из реестра.
		Если Запись.ПодготовленныйКОтправкеРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ПодготовленныйКОтправкеРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		КонецЕсли;
		Если Запись.ОтправленныйРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ОтправленныйРеестр    = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
			Запись.ДатаОтправки          = '00010101';
			Запись.СостояниеОтправки     = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПустаяСсылка();
			Запись.КомментарийКСостоянию = "";
		КонецЕсли;
		Если Запись.ПринятыйРеестр = РеестрОбъект.Ссылка Тогда
			Запись.ПринятыйРеестр = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПустаяСсылка();
		КонецЕсли;
		
		// Перезаполнение полей на основании предшествующих реестров.
		РеестрИСтрока = Неопределено;
		Если ЗначениеЗаполнено(Запись.ПринятыйРеестр) Тогда
			РеестрИСтрока = РеквизитыСтрокиРеестра(Запись.ПринятыйРеестр, Запись.НомерЛисткаНетрудоспособности);
		КонецЕсли;
		Если РеестрИСтрока = Неопределено И ЗначениеЗаполнено(Запись.ОтправленныйРеестр) Тогда
			РеестрИСтрока = РеквизитыСтрокиРеестра(Запись.ОтправленныйРеестр, Запись.НомерЛисткаНетрудоспособности);
		КонецЕсли;
		Если РеестрИСтрока = Неопределено И ЗначениеЗаполнено(Запись.ПодготовленныйКОтправкеРеестр) Тогда
			РеестрИСтрока = РеквизитыСтрокиРеестра(Запись.ПодготовленныйКОтправкеРеестр, Запись.НомерЛисткаНетрудоспособности);
		КонецЕсли;
		Если РеестрИСтрока = Неопределено Тогда
			РеестрИСтрока = ПоследнийПроведенныйРеестр(Запись.НомерЛисткаНетрудоспособности, Запись.ГоловнаяОрганизация);
		КонецЕсли;
		Если РеестрИСтрока <> Неопределено Тогда
			ОбновитьСведенияОРеестре(Запись, РеестрИСтрока, РеестрИСтрока);
		КонецЕсли;
		
		ЗавершитьЗаписьНабора(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция БолееПодходящийБольничный(БольничныйОбъект, Запись, Кэш)
	ЗначениеИзКэша = Кэш[Запись.НомерЛисткаНетрудоспособности];
	Если ЗначениеИзКэша <> Неопределено Тогда
		Возврат ЗначениеИзКэша;
	КонецЕсли;
	
	ИменаПолей = "Ссылка, НомерЛисткаНетрудоспособности, Дата, ДатаНачала, ДатаОкончания, Организация, ФизическоеЛицо,
		|Сотрудник, ПричинаНетрудоспособности, Проведен, ПометкаУдаления";
	
	ЗначенияРеквизитов = Документы.БольничныйЛист.ПредыдущийПроведенныйДокументИзЦепочкиИсправлений(
		БольничныйОбъект,
		Запись.НомерЛисткаНетрудоспособности,
		Запись.ГоловнаяОрганизация,
		ИменаПолей);
	
	Если ЗначенияРеквизитов = Неопределено
		Или ЗначенияРеквизитов.НомерЛисткаНетрудоспособности <> Запись.НомерЛисткаНетрудоспособности
		Или ЗначенияРеквизитов.ПометкаУдаления Тогда
		// Не найден подходящий больничный.
		ОтборКД = Новый ОтборКомпоновкиДанных;
		ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "Ссылка", "<>", БольничныйОбъект.Ссылка);
		ОтборПроведен = ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "Проведен", "=", Истина);
		ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
			Запись.НомерЛисткаНетрудоспособности,
			Запись.ГоловнаяОрганизация,
			ОтборКД,
			ИменаПолей);
		Если ЗначенияРеквизитов = Неопределено Тогда
			ОтборКД.Элементы.Удалить(ОтборПроведен);
			ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
				Запись.НомерЛисткаНетрудоспособности,
				Запись.ГоловнаяОрганизация,
				ОтборКД,
				ИменаПолей);
		КонецЕсли;
		Если ЗначенияРеквизитов = Неопределено Тогда
			// Более подходящий больничный так и не найден.
			ЗначенияРеквизитов = БольничныйОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить(Запись.НомерЛисткаНетрудоспособности, ЗначенияРеквизитов);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

#КонецОбласти


#КонецЕсли