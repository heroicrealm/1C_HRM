#Область СлужебныйПрограммныйИнтерфейс

// Процедура предназначена для формирования движений регистрам подсистемы.
//
// Параметры:
//	Движения - Коллекция движений документа. 
//	Отказ - Булево - признак отказа от проведения документа.
//	Организация - СправочникСсылка.Организация - организация.
//	МесяцНачисления - Дата - месяц, зарплата которого отражается в бухучете.
//	ДанныеДляОтражения - Структура - Таблицы значений с данными, которые 
//						использоваться для формирования движений.
//
Процедура СформироватьДвижения(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляОтражения) Экспорт
	
	Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда
		Для каждого СтрокаТЗ Из ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы Цикл
			НоваяСтрока = Движения.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = МесяцНачисления;
			Движения.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы.Записывать = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("НачисленныйНДФЛ") Тогда
		Для каждого СтрокаТЗ Из ДанныеДляОтражения.НачисленныйНДФЛ Цикл
			НоваяСтрока = Движения.ОтражениеВБухучетеНачисленныйНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = МесяцНачисления;
			Движения.ОтражениеВБухучетеНачисленныйНДФЛ.Записывать = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("УдержаннаяЗарплата") Тогда
		Для каждого СтрокаТЗ Из ДанныеДляОтражения.УдержаннаяЗарплата Цикл
			НоваяСтрока = Движения.ОтражениеВБухучетеУдержаннаяЗарплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = МесяцНачисления;
			Движения.ОтражениеВБухучетеУдержаннаяЗарплата.Записывать = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("ВыплатаОтпусковЗаСчетРезерва") Тогда
		
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеДляОтражения.ВыплатаОтпусковЗаСчетРезерва, "Сотрудник", Истина);
		СотрудникФизическиеЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники,"ФизическоеЛицо");
		Для каждого СтрокаТЗ Из ДанныеДляОтражения.ВыплатаОтпусковЗаСчетРезерва Цикл
			НоваяСтрока = Движения.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Период = МесяцНачисления;
			НоваяСтрока.ФизическоеЛицо = СотрудникФизическиеЛица[НоваяСтрока.Сотрудник];
			Движения.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва.Записывать = Истина;
		КонецЦикла;
		
	КонецЕсли;

	
КонецПроцедуры

// Удаляет из результатов заполнения строки, которые не относятся к выбранным параметрам заполнения,
// и данные, которые уже отражены в бухучете.
//
//	Параметры
//		РезультатЗаполнения - Структура - описание см. ОтражениеЗарплатыВБухучете.НоваяСтруктураДанныеДляОтраженияЗарплатыВБухучете.
//		ПараметрыДляЗаполнения - Структура - описание см. ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляЗаполненияТаблицДокумента.
//
Процедура ОтобратьРезультатыЗаполненияТаблицДокумента(РезультатЗаполнения, ПараметрыДляЗаполнения) Экспорт
	
	Организация 	 		= ПараметрыДляЗаполнения.Организация;
	ПериодРегистрации 		= ПараметрыДляЗаполнения.ПериодРегистрации;
	ИсключаемыйРегистратор 	= ПараметрыДляЗаполнения.ДокументСсылка;
	Подразделение 			= ПараметрыДляЗаполнения.Подразделение;
	СтатьиФинансирования 	= ПараметрыДляЗаполнения.СтатьиФинансирования;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Таблица.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	#ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.Организация = &Организация
	|	И Таблица.Период = &ПериодРегистрации
	|	И Таблица.Регистратор <> &ИсключаемыйРегистратор";
	
	Первый = Истина;
	Для каждого ЭлементКоллекции Из РезультатЗаполнения Цикл
		ИмяТаблицы = ЭлементКоллекции.Ключ;
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,"#ИмяТаблицы","РегистрНакопления.ОтражениеВБухучете"+ИмяТаблицы);
		Если Первый Тогда
			Запрос.Текст = ТекстЗапроса;
			Первый = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РАЗРЕШЕННЫЕ", "");
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстЗапроса;
		КонецЕсли;
	КонецЦикла;
	РезультатЗапроса = Запрос.Выполнить();
	
	ВычестьУжеЗарегистрированныеДанные = Не РезультатЗапроса.Пустой();
	
	Если Не ВычестьУжеЗарегистрированныеДанные И Не ЗначениеЗаполнено(Подразделение) И Не ЗначениеЗаполнено(СтатьиФинансирования) Тогда
		ОтражениеЗарплатыВБухучете.СвернутьДанныеДляОтраженияЗарплатыВБухучете(РезультатЗаполнения, "");
		Возврат;
	КонецЕсли;
	
	Если ВычестьУжеЗарегистрированныеДанные Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.ИмяПоля КАК ИмяПоля
		|ИЗ
		|	#БухучетТаблица КАК Таблица
		|ГДЕ
		|	Таблица.Организация = &Организация
		|	И Таблица.Период = &ПериодРегистрации
		|	И Таблица.Регистратор <> &ИсключаемыйРегистратор";
		
		Для каждого ЭлементКоллекции Из РезультатЗаполнения Цикл
		
			ИмяТаблицы 	= ЭлементКоллекции.Ключ;
			Таблица 	= ЭлементКоллекции.Значение;
			
			ПоляЗапроса = Новый Массив;
			Для каждого КолонкаТЗ Из Таблица.Колонки Цикл
				ИмяПоля = КолонкаТЗ.Имя;
				Если КолонкаТЗ.ТипЗначения.СодержитТип(Тип("Число")) Тогда
					ПоляЗапроса.Добавить("-Таблица." + ИмяПоля + " КАК " + ИмяПоля);
				Иначе
					ПоляЗапроса.Добавить("Таблица." + ИмяПоля + " КАК " + ИмяПоля);
				КонецЕсли;
			КонецЦикла;
			ПоляЗапроса = СтрСоединить(ПоляЗапроса, "," + Символы.ПС);
			
			ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,"Таблица.ИмяПоля КАК ИмяПоля",ПоляЗапроса);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#БухучетТаблица","РегистрНакопления.ОтражениеВБухучете"+ИмяТаблицы);
			
			Запрос.Текст = ТекстЗапроса;
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Выборка);
				КонецЦикла;
				ОтражениеЗарплатыВУчете.СвернутьТаблицу(Таблица);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьиФинансирования) Тогда
		
		Отбор = Новый Структура("СтатьяФинансирования");
		Для каждого ЭлементКоллекции Из РезультатЗаполнения Цикл
			Таблица = ЭлементКоллекции.Значение;
			НоваяТаблица = Таблица.СкопироватьКолонки();
			Таблица.Индексы.Добавить("СтатьяФинансирования");
			Для каждого СтатьяФинансирования Из СтатьиФинансирования Цикл
				Отбор.СтатьяФинансирования = СтатьяФинансирования;
				НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
				Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(НоваяТаблица.Добавить(), СтрокаТЗ);
				КонецЦикла;
			КонецЦикла;
			РезультатЗаполнения[ЭлементКоллекции.Ключ] = НоваяТаблица;
		КонецЦикла;
		
	КонецЕсли;
	
	Подразделения = Неопределено;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Владелец = &Организация
		|	И ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&Подразделение)";
		Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Отбор = Новый Структура("Подразделение");
		
		НачисленнаяЗарплатаИВзносы = РезультатЗаполнения.НачисленнаяЗарплатаИВзносы;
		НачисленнаяЗарплатаИВзносы.Индексы.Добавить("Подразделение");
		НоваяТаблицаНачисленнаяЗарплатаИВзносы = НачисленнаяЗарплатаИВзносы.СкопироватьКолонки();
		
		УдержаннаяЗарплата = РезультатЗаполнения.УдержаннаяЗарплата;
		УдержаннаяЗарплата.Индексы.Добавить("Подразделение");
		НоваяТаблицаУдержаннаяЗарплата = УдержаннаяЗарплата.СкопироватьКолонки();
		
		Для каждого ПодразделениеОтбора Из Подразделения Цикл
		
			Отбор.Подразделение = ПодразделениеОтбора;
			
			НайденныеСтроки = НачисленнаяЗарплатаИВзносы.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НоваяТаблицаНачисленнаяЗарплатаИВзносы.Добавить(), СтрокаТЗ);
			КонецЦикла;
			
			НайденныеСтроки = УдержаннаяЗарплата.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НоваяТаблицаУдержаннаяЗарплата.Добавить(), СтрокаТЗ);
			КонецЦикла;
		
		КонецЦикла;
		
		РезультатЗаполнения.НачисленнаяЗарплатаИВзносы = НоваяТаблицаНачисленнаяЗарплатаИВзносы;
		РезультатЗаполнения.УдержаннаяЗарплата = НоваяТаблицаУдержаннаяЗарплата;
		
		ОтборФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(НоваяТаблицаНачисленнаяЗарплатаИВзносы, "ФизическоеЛицо", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборФизическиеЛица, ОбщегоНазначения.ВыгрузитьКолонку(НоваяТаблицаУдержаннаяЗарплата, "ФизическоеЛицо", Истина), Истина);
		
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТЗ Из РезультатЗаполнения.НачисленныйНДФЛ Цикл
			Если ОтборФизическиеЛица.Найти(СтрокаТЗ.ФизическоеЛицо) = Неопределено Тогда
				СтрокиКУдалению.Добавить(СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РезультатЗаполнения.НачисленныйНДФЛ.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Если РезультатЗаполнения.ВыплатаОтпусковЗаСчетРезерва.Количество() > 0 Тогда
			
			Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(РезультатЗаполнения.ВыплатаОтпусковЗаСчетРезерва, "Сотрудник", Истина);
			СотрудникФизическиеЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники,"ФизическоеЛицо");
			
			СтрокиКУдалению = Новый Массив;
			Для каждого СтрокаТЗ Из РезультатЗаполнения.ВыплатаОтпусковЗаСчетРезерва Цикл
				ФизическоеЛицо = СотрудникФизическиеЛица[СтрокаТЗ.Сотрудник];
				Если ОтборФизическиеЛица.Найти(ФизическоеЛицо) = Неопределено Тогда
					СтрокиКУдалению.Добавить(СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				РезультатЗаполнения.ВыплатаОтпусковЗаСчетРезерва.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыНакопления.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ОтражениеВБухучетеНачисленныйНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ОтражениеВБухучетеУдержаннаяЗарплата, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
		|РегистрНакопления.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы.Чтение.Организации
		|РегистрНакопления.ОтражениеВБухучетеНачисленныйНДФЛ.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.ОтражениеВБухучетеНачисленныйНДФЛ.Чтение.Организации
		|РегистрНакопления.ОтражениеВБухучетеУдержаннаяЗарплата.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.ОтражениеВБухучетеУдержаннаяЗарплата.Чтение.Организации
		|РегистрНакопления.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы", 		"Период", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ОтражениеВБухучетеНачисленныйНДФЛ", 				"Период", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ОтражениеВБухучетеУдержаннаяЗарплата", 				"Период", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва", 	"Период", "БухгалтерскийУчетЗарплаты", "Организация");
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДанныеДляОтраженияРасчетовЗарплатыВБухучете);
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("РаботаВБюджетномУчреждении");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ДанныеДляОтраженияРасчетовЗарплатыВБухучете, "ОтражениеВБухучетеПоИсточникам");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("РаботаВХозрасчетнойОрганизации");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ДанныеДляОтраженияРасчетовЗарплатыВБухучете, "ОтражениеВБухучете");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
КонецПроцедуры

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.100";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОтражениеРасчетовЗарплатыВБухучете.ЗаполнитьДвиженияОтражениеВБухучете";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b1dffa6e-5ab2-4136-bd63-287d441ad249");
	Обработчик.Комментарий = НСтр("ru = 'Обновление движений документов ""Отражение зарплаты в бухучете.""'");
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияОтражениеВБухучете(ПараметрыОбновления = Неопределено) Экспорт
	
	ИмяДокумента = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций")
		И ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		ИмяДокумента = "ОтражениеЗарплатыВБухучете";
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений")
		И ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		ИмяДокумента = "ОтражениеЗарплатыВБухучетеБюджетныхУчреждений";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДокумента) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "Документ."+ИмяДокумента;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.ПериодРегистрации КАК ПериодРегистрации
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	#ИмяТаблицы КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ТаблицаДокументов.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Документы.Ссылка КАК Ссылка,
	|		Документы.ПериодРегистрации КАК ПериодРегистрации
	|	ИЗ
	|		ВТДокументы КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТабличнойЧастиНачисленнаяЗарплатаИВзносы КАК Таблица
	|			ПО Документы.Ссылка = Таблица.Ссылка) КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы КАК ТаблицаРегистра
	|		ПО ТаблицаДокументов.Ссылка = ТаблицаРегистра.Регистратор
	|ГДЕ
	|	ТаблицаРегистра.НомерСтроки ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.ПериодРегистрации
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Документы.Ссылка КАК Ссылка,
	|		Документы.ПериодРегистрации КАК ПериодРегистрации
	|	ИЗ
	|		ВТДокументы КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТабличнойЧастиНачисленныйНДФЛ КАК Таблица
	|			ПО Документы.Ссылка = Таблица.Ссылка) КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтражениеВБухучетеНачисленныйНДФЛ КАК ТаблицаРегистра
	|		ПО ТаблицаДокументов.Ссылка = ТаблицаРегистра.Регистратор
	|ГДЕ
	|	ТаблицаРегистра.НомерСтроки ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.ПериодРегистрации
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Документы.Ссылка КАК Ссылка,
	|		Документы.ПериодРегистрации КАК ПериодРегистрации
	|	ИЗ
	|		ВТДокументы КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТабличнойЧастиУдержаннаяЗарплата КАК Таблица
	|			ПО Документы.Ссылка = Таблица.Ссылка) КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтражениеВБухучетеУдержаннаяЗарплата КАК ТаблицаРегистра
	|		ПО ТаблицаДокументов.Ссылка = ТаблицаРегистра.Регистратор
	|ГДЕ
	|	ТаблицаРегистра.НомерСтроки ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Ссылка,
	|	ТаблицаДокументов.ПериодРегистрации
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Документы.Ссылка КАК Ссылка,
	|		Документы.ПериодРегистрации КАК ПериодРегистрации
	|	ИЗ
	|		ВТДокументы КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТабличнойЧастиВыплатаОтпусковЗаСчетРезерва КАК Таблица
	|			ПО Документы.Ссылка = Таблица.Ссылка) КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва КАК ТаблицаРегистра
	|		ПО ТаблицаДокументов.Ссылка = ТаблицаРегистра.Регистратор
	|ГДЕ
	|	ТаблицаРегистра.НомерСтроки ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРегистрации УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТабличнойЧасти", ИмяТаблицы+".");
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Ссылка;
		ДокументОбъект = Регистратор.ПолучитьОбъект();
		
		Если ДокументОбъект.НачисленнаяЗарплатаИВзносы.Количество() > 0 Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления,
								"РегистрНакопления.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы.НаборЗаписей",
								"Регистратор", Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыНакопления.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			Для каждого СтрокаТЧ Из ДокументОбъект.НачисленнаяЗарплатаИВзносы Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЧ);
				НоваяЗапись.Организация = ДокументОбъект.Организация;
				НоваяЗапись.Период = ДокументОбъект.ПериодРегистрации;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
		Если ДокументОбъект.НачисленныйНДФЛ.Количество() > 0 Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления,
								"РегистрНакопления.ОтражениеВБухучетеНачисленныйНДФЛ.НаборЗаписей",
								"Регистратор", Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыНакопления.ОтражениеВБухучетеНачисленныйНДФЛ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			Для каждого СтрокаТЧ Из ДокументОбъект.НачисленныйНДФЛ Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЧ);
				НоваяЗапись.Организация = ДокументОбъект.Организация;
				НоваяЗапись.Период = ДокументОбъект.ПериодРегистрации;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
		Если ДокументОбъект.УдержаннаяЗарплата.Количество() > 0 Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления,
								"РегистрНакопления.ОтражениеВБухучетеУдержаннаяЗарплата.НаборЗаписей",
								"Регистратор", Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыНакопления.ОтражениеВБухучетеУдержаннаяЗарплата.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			Для каждого СтрокаТЧ Из ДокументОбъект.УдержаннаяЗарплата Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЧ);
				НоваяЗапись.Организация = ДокументОбъект.Организация;
				НоваяЗапись.Период = ДокументОбъект.ПериодРегистрации;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
		Если ДокументОбъект.ВыплатаОтпусковЗаСчетРезерва.Количество() > 0 Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления,
								"РегистрНакопления.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва.НаборЗаписей",
								"Регистратор", Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.ВыплатаОтпусковЗаСчетРезерва, "Сотрудник", Истина);
			СотрудникФизическиеЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники,"ФизическоеЛицо");
			
			НаборЗаписей = РегистрыНакопления.ОтражениеВБухучетеВыплатаОтпусковЗаСчетРезерва.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			Для каждого СтрокаТЧ Из ДокументОбъект.ВыплатаОтпусковЗаСчетРезерва Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЧ);
				НоваяЗапись.Организация = ДокументОбъект.Организация;
				НоваяЗапись.Период = ДокументОбъект.ПериодРегистрации;
				НоваяЗапись.ФизическоеЛицо = СотрудникФизическиеЛица[НоваяЗапись.Сотрудник];
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает информацию о последнем периоде отражения зарплаты.
//
// Возвращаемое значение:
//  - Период - Дата - дата последнего периода отражения зарплаты.
//
Функция ПоследнийПериодОтраженияЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы.Период КАК Период
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	РегистрНакопления.ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы КАК ОтражениеВБухучетеНачисленнаяЗарплатаИВзносы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТПериоды.Период) КАК Период
		|ИЗ
		|	ВТПериоды КАК ВТПериоды";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Период;		
	
КонецФункции

#КонецОбласти
