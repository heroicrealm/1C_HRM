////////////////////////////////////////////////////////////////////////////////
// Менеджер обмена через универсальный формат (БЗКР 3.1.18 от 13.10.2021 18:40:34)
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,"ВариантНастройки,ДанныеДляФормированияПроводокОтправлятьСводно,ОтправлятьВедомостиКакЗаявки");
	КонецЕсли;
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		
		// ЗагруженныеДопРеквизитыИСведения
		// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
		ДопРеквизитыИСведения = Новый ТаблицаЗначений;
		ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
		ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
		
		ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
		
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Строка - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплатыВБанк(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплатыВКассу(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплатыПеречислением(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьПрочихДоходовВБанк(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьПрочихДоходовВКассу(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВедомостьПрочихДоходовПеречислением(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ДепонированиеЗарплаты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтражениеСтатистикиПерсоналаВБухучете_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение(ПравилаОбработкиДанных);
		ДобавитьПОД_НастройкиРасчетаРезервовОтпусков_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_НачислениеОценочныхОбязательствПоОтпускам_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегламентированныйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыРаботСотрудников_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЗППроекты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторБанков_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПодразделенияОрганизаций_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктураПредприятия_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ДепонированиеЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_НачислениеОценочныхОбязательствПоОтпускам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_РегламентированныйОтчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыРаботСотрудников_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыРаботСотрудниковГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПодразделенияОрганизаций_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктураПредприятия_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыВБанк(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыПеречислением(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуРаздатчиком_Заявка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПДПеречислением_Заявка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПДПеречислением_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПеречислением_Заявка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПеречислением_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПрочихДоходовВБанк(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПрочихДоходовВКассу(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПрочихДоходовВКассу_Заявка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПрочихДоходовВКассу_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВедомостьПрочихДоходовПеречислением(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДепонированиеЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеСтатистикиПерсоналаВБухучете(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_НДФЛ(ПравилаКонвертации);
		ДобавитьПКО_Документ_РезервыОтпусков_Отправка(ПравилаКонвертации);
		ДобавитьПКО_НастройкиРасчетаРезервовОтпусков_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РегламентированныйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЗППроекты_КакБанковскиеСчета(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЗППроекты_КакКонтрагенты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПодразделенияОрганизаций_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктураПредприятия_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктураПредприятия_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_ВыдачаЗаймаСотрудникуБанк_Получение(ПравилаКонвертации);
		ДобавитьПКО_ВыдачаЗаймаСотрудникуКасса_Получение(ПравилаКонвертации);
		ДобавитьПКО_ВыплатаДепонированнойЗарплатыБанк_Получение(ПравилаКонвертации);
		ДобавитьПКО_ВыплатаДепонированнойЗарплатыКасса_Получение(ПравилаКонвертации);
		ДобавитьПКО_ДанныеДляРасчетаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДепонированиеЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_Свод(ПравилаКонвертации);
		ДобавитьПКО_Документ_РезервыОтпусков_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РезервыОтпусков_Получение_Свод(ПравилаКонвертации);
		ДобавитьПКО_ПогашениеЗаймаСотрудникуБанк_Получение(ПравилаКонвертации);
		ДобавитьПКО_ПогашениеЗаймаСотрудникуКасса_Получение(ПравилаКонвертации);
		ДобавитьПКО_РегламентированныйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПодразделенияОрганизаций_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтруктураПредприятия_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_КлассификаторБанков(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыРаботСотрудников(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыРаботСотрудниковГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыДоходовИсполнительногоПроизводства.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыДоходовИсполнительногоПроизводства";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоходовИсполнительногоПроизводства;
		ПравилоКонвертации.ТипXDTO   = "ВидыДоходовИсполнительногоПроизводства";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ДоходыБезОграниченияВзысканий, "ДоходыБезОграниченияВзысканий");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения, "ЗарплатаВознаграждения");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые, "КомпенсацииНеоблагаемые");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые, "КомпенсацииОблагаемые");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыКИ_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;

	// ВидыОтчетности.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОтчетности";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОтчетности;
	ПравилоКонвертации.ТипXDTO   = "ВидыРегламентированнойОтчетности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОтчетности.ОтчетностьПоМСФО, "ОтчетностьПоМСФО");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОтчетности.РегламентированнаяОтчетность, "РегламентированнаяОтчетность");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ОтчетностьПоМСФО", Перечисления.ВидыОтчетности.ОтчетностьПоМСФО);
	ЗначенияДляПолучения.Вставить("РегламентированнаяОтчетность", Перечисления.ВидыОтчетности.РегламентированнаяОтчетность);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПериодичностьРО.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПериодичностьРО";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.Периодичность;
	ПравилоКонвертации.ТипXDTO   = "ТипыПериодов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Год, "Год");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Декада, "Декада");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.День, "День");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Квартал, "Квартал");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Месяц, "Месяц");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Неделя, "Неделя");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Полугодие, "Полугодье");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Год", Перечисления.Периодичность.Год);
	ЗначенияДляПолучения.Вставить("Декада", Перечисления.Периодичность.Декада);
	ЗначенияДляПолучения.Вставить("День", Перечисления.Периодичность.День);
	ЗначенияДляПолучения.Вставить("Квартал", Перечисления.Периодичность.Квартал);
	ЗначенияДляПолучения.Вставить("Месяц", Перечисления.Периодичность.Месяц);
	ЗначенияДляПолучения.Вставить("Неделя", Перечисления.Периодичность.Неделя);
	ЗначенияДляПолучения.Вставить("Полугодье", Перечисления.Периодичность.Полугодие);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПорядкиОкругленияОтчетности.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПорядкиОкругленияОтчетности";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядкиОкругленияОтчетности;
	ПравилоКонвертации.ТипXDTO   = "ПорядокОкругленияОтчетности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, "НеОкгруглять");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, "ОкруглятьДо1000");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "ОкруглятьДо1000000");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеОкгруглять", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ЗначенияДляПолучения.Вставить("ОкруглятьДо1000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ЗначенияДляПолучения.Вставить("ОкруглятьДо1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ДанныеДляФормированияПроводокОтправлятьСводно");
	ПараметрыКонвертации.Вставить("ВариантНастройки");
	ПараметрыКонвертации.Вставить("ОтправлятьВедомостиКакЗаявки");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ПБДСРасчетыССотрудниками_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПБДСРасчетыССотрудниками_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОРасчетыССотрудниками_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОРасчетыССотрудниками_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОРасчетыССотрудниками_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОРасчетыССотрудниками_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСРасчетыССотрудниками_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСРасчетыССотрудниками_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьНаВыплатуЗарплатыВБанк_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьНаВыплатуЗарплатыВБанк_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьНаВыплатуЗарплатыВКассу_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьНаВыплатуЗарплатыВКассу_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьНаВыплатуЗарплатыПеречислением_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьНаВыплатуЗарплатыПеречислением_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьПрочихДоходовВБанк_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьПрочихДоходовВБанк_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьПрочихДоходовВКассу_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьПрочихДоходовВКассу_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВедомостьПрочихДоходовПеречислением_ПриОбработке" Тогда 
		ПОД_Документ_ВедомостьПрочихДоходовПеречислением_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ДепонированиеЗарплаты_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ДепонированиеЗарплаты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатежноеПоручение_ПриОбработке" Тогда 
		ПОД_Документ_ПлатежноеПоручение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_НачислениеОценочныхОбязательствПоОтпускам_Отправка_ПриОбработке" Тогда 
		ПОД_НачислениеОценочныхОбязательствПоОтпускам_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_НачислениеОценочныхОбязательствПоОтпускам_Получение_ПриОбработке" Тогда 
		ПОД_НачислениеОценочныхОбязательствПоОтпускам_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтражениеСтатистикиПерсоналаВБухучете_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтражениеСтатистикиПерсоналаВБухучете_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РегламентированныйОтчет_Получение_ПриОбработке" Тогда 
		ПОД_РегламентированныйОтчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыРаботСотрудников_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыРаботСотрудников_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВыдачаЗаймаСотрудникуБанк_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВыдачаЗаймаСотрудникуБанк_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВыдачаЗаймаСотрудникуКасса_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВыдачаЗаймаСотрудникуКасса_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВыплатаДепонированнойЗарплатыБанк_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВыплатаДепонированнойЗарплатыБанк_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВыплатаДепонированнойЗарплатыКасса_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВыплатаДепонированнойЗарплатыКасса_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПогашениеЗаймаСотрудникуБанк_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПогашениеЗаймаСотрудникуБанк_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПогашениеЗаймаСотрудникуКасса_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПогашениеЗаймаСотрудникуКасса_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыВБанк_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗарплатыВБанк_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыПеречислением_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗарплатыПеречислением_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуРаздатчиком_Заявка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуРаздатчиком_Заявка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПДПеречислением_Заявка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПДПеречислением_Заявка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПДПеречислением_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПДПеречислением_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПеречислением_Заявка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПеречислением_Заявка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПеречислением_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПеречислением_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПрочихДоходовВБанк_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПрочихДоходовВБанк_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПрочихДоходовВКассу_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПрочихДоходовВКассу_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПрочихДоходовВКассу_Заявка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПрочихДоходовВКассу_Заявка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПрочихДоходовВКассу_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПрочихДоходовВКассу_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВедомостьПрочихДоходовПеречислением_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВедомостьПрочихДоходовПеречислением_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ДепонированиеЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ДепонированиеЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ДепонированиеЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ДепонированиеЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_НДФЛ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_НДФЛ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ДанныеДляРасчетаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ДанныеДляРасчетаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РезервыОтпусков_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РезервыОтпусков_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегламентированныйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РегламентированныйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РегламентированныйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_РегламентированныйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_НастройкиРасчетаРезервовОтпусков_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_НастройкиРасчетаРезервовОтпусков_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_КлассификаторБанков_ПриОтправкеДанных" Тогда 
		ПКО_КлассификаторБанков_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_КлассификаторБанков_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_КлассификаторБанков_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_КлассификаторБанков_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_КлассификаторБанков_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗППроекты_КакБанковскиеСчета_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗППроекты_КакБанковскиеСчета_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗППроекты_КакКонтрагенты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗППроекты_КакКонтрагенты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДанныеДляРасчетаЗарплаты" Тогда 
		ОтложеннаяОбработка_ДанныеДляРасчетаЗарплаты(
			Параметры.КомпонентыОбмена, Параметры.Объект);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
#Область Документы_Банк_Касса
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДСРасчетыССотрудниками_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПогашениеЗаймаСотрудникуБанк_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКОРасчетыССотрудниками_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПогашениеЗаймаСотрудникуКасса_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКОРасчетыССотрудниками_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВыдачаЗаймаСотрудникуКасса_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВыплатаДепонированнойЗарплатыКасса_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСРасчетыССотрудниками_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВыдачаЗаймаСотрудникуБанк_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВыплатаДепонированнойЗарплатыБанк_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_ВыдачаЗаймаСотрудникуБанк_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ВыдачаЗаймаСотрудникуБанк_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыдачаЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ВыдачаЗаймаСотрудникуБанк_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Сумма",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ФормаРасчетов",  "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_ВыдачаЗаймаСотрудникуКасса_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ВыдачаЗаймаСотрудникуКасса_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыдачаЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ВыдачаЗаймаСотрудникуКасса_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Сумма",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ФормаРасчетов",  "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_ВыплатаДепонированнойЗарплатыБанк_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ВыплатаДепонированнойЗарплатыБанк_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыплатаДепонированнойЗарплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ВыплатаДепонированнойЗарплатыБанк_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежногоДокумента", "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо",           "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ФормаРасчетов",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Депоненты", "");
	ДобавитьПКС(СвойстваТЧ, "Ведомость", "");
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "");

КонецПроцедуры

Процедура ДобавитьПКО_ВыплатаДепонированнойЗарплатыКасса_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ВыплатаДепонированнойЗарплатыКасса_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыплатаДепонированнойЗарплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ВыплатаДепонированнойЗарплатыКасса_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежногоДокумента", "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",            "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо",           "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ФормаРасчетов",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Депоненты", "");
	ДобавитьПКС(СвойстваТЧ, "Ведомость", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "");

КонецПроцедуры

Процедура ДобавитьПКО_ПогашениеЗаймаСотрудникуБанк_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПогашениеЗаймаСотрудникуБанк_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПогашениеЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПогашениеЗаймаСотрудникуБанк_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Сумма",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ФормаРасчетов",  "", 1);

КонецПроцедуры

Процедура ДобавитьПКО_ПогашениеЗаймаСотрудникуКасса_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПогашениеЗаймаСотрудникуКасса_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПогашениеЗаймаСотруднику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПогашениеЗаймаСотрудникуКасса_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Сумма",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "Сотрудник", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ФормаРасчетов",  "", 1);

КонецПроцедуры


#КонецОбласти
#Область Документы_Ведомости
Процедура ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплатыВБанк(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьНаВыплатуЗарплатыВБанк";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьНаВыплатуЗарплатыВБанк_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗарплатыВБанк");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплатыВКассу(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьНаВыплатуЗарплатыВКассу";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьНаВыплатуЗарплатыВКассу_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗарплатыВКассу");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплатыПеречислением(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьНаВыплатуЗарплатыПеречислением";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьНаВыплатуЗарплатыПеречислением_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗарплатыПеречислением");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПеречислением_Заявка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПеречислением_НДФЛ");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуРаздатчиком_Заявка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВедомостьПрочихДоходовВБанк(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьПрочихДоходовВБанк";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьПрочихДоходовВБанк;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьПрочихДоходовВБанк_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПрочихДоходовВБанк");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВедомостьПрочихДоходовВКассу(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьПрочихДоходовВКассу";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьПрочихДоходовВКассу;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьПрочихДоходовВКассу_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПрочихДоходовВКассу");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПрочихДоходовВКассу_Заявка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПрочихДоходовВКассу_НДФЛ");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВедомостьПрочихДоходовПеречислением(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВедомостьПрочихДоходовПеречислением";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВедомостьПрочихДоходовПеречислением;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВедомостьПрочихДоходовПеречислением_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПДПеречислением_Заявка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПДПеречислением_НДФЛ");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВедомостьПрочихДоходовПеречислением");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ДепонированиеЗарплаты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ДепонированиеЗарплаты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ДепонированиеЗарплаты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ДепонированиеЗарплаты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДепонированиеЗарплаты_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ДепонированиеЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ДепонированиеЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ДепонированиеЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДепонированиеЗарплаты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПлатежноеПоручение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатежноеПоручение_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_НДФЛ");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыВБанк(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗарплатыВБанк";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыВБанк_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                     "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "СпособВыплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "ВидДоходаИсполнительногоПроизводства", "ВидДоходаИсполнительногоПроизводства", , "ВидыДоходовИсполнительногоПроизводства");
	ДобавитьПКС(СвойстваШапки, "Дата",                                 "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Номер",                                "НомерВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",                          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",                    "ПериодВыплаты");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                        "ПодразделениеРегламентированногоУчета", , "Справочник_ПодразделенияОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу",                     "СуммаДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Зарплата");
	ДобавитьПКС(СвойстваТЧ, "", "ВзысканнаяСумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерЛицевогоСчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗарплатыВКассу";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                  "СпособВыплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",              "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Номер",             "НомерВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации", "ПериодВыплаты");
	ДобавитьПКС(СвойстваШапки, "Подразделение",     "ПодразделениеРегламентированногоУчета", , "Справочник_ПодразделенияОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу",  "СуммаДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Зарплата");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                 "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "УтвержденнаяФормаОплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",             "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыПеречислением(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗарплатыПеречислением";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыПеречислением_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                     "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "СпособВыплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "ВидДоходаИсполнительногоПроизводства", "ВидДоходаИсполнительногоПроизводства", , "ВидыДоходовИсполнительногоПроизводства");
	ДобавитьПКС(СвойстваШапки, "Дата",                                 "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Номер",                                "НомерВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",                          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",                    "ПериодВыплаты");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                        "ПодразделениеРегламентированногоУчета", , "Справочник_ПодразделенияОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу",                     "СуммаДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Зарплата");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ВзысканнаяСумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                  "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "СпособВыплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",              "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Номер",             "НомерВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации", "ПериодВыплаты");
	ДобавитьПКС(СвойстваШапки, "Подразделение",     "ПодразделениеРегламентированногоУчета", , "Справочник_ПодразделенияОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу",  "СуммаДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Зарплата");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуРаздатчиком_Заявка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуРаздатчиком_Заявка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуРаздатчиком_Заявка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                 "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "УтвержденнаяФормаОплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",             "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПДПеречислением_Заявка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПДПеречислением_Заявка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьПрочихДоходовПеречислением;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПДПеречислением_Заявка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                 "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "УтвержденнаяФормаОплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",             "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПДПеречислением_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПДПеречислением_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьПрочихДоходовПеречислением;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПДПеречислением_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПеречислением_Заявка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПеречислением_Заявка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПеречислением_Заявка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                 "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "УтвержденнаяФормаОплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",             "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПеречислением_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПеречислением_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПеречислением_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПрочихДоходовВБанк(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПрочихДоходовВБанк";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьПрочихДоходовВБанк;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПрочихДоходовВБанк_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                     "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "СпособВыплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "ВидДоходаИсполнительногоПроизводства", "ВидДоходаИсполнительногоПроизводства", , "ВидыДоходовИсполнительногоПроизводства");
	ДобавитьПКС(СвойстваШапки, "Дата",                                 "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Номер",                                "НомерВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",                          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",                    "ПериодВыплаты");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу",                     "СуммаДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Зарплата");
	ДобавитьПКС(СвойстваТЧ, "", "ВзысканнаяСумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерЛицевогоСчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПрочихДоходовВКассу(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПрочихДоходовВКассу";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьПрочихДоходовВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПрочихДоходовВКассу_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                  "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "СпособВыплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                  "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",              "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Номер",             "НомерВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации", "ПериодВыплаты");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу",  "СуммаДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Зарплата");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПрочихДоходовВКассу_Заявка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПрочихДоходовВКассу_Заявка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьПрочихДоходовВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПрочихДоходовВКассу_Заявка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                 "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                 "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "УтвержденнаяФормаОплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",             "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",             "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "КтоЗаявил", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу", "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПрочихДоходовВКассу_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПрочихДоходовВКассу_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьПрочихДоходовВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПрочихДоходовВКассу_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВедомостьПрочихДоходовПеречислением(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВедомостьПрочихДоходовПеречислением";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВедомостьПрочихДоходовПеречислением;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВедомостьНаВыплатуЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВедомостьПрочихДоходовПеречислением_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                     "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "СпособВыплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "ВидДоходаИсполнительногоПроизводства", "ВидДоходаИсполнительногоПроизводства", , "ВидыДоходовИсполнительногоПроизводства");
	ДобавитьПКС(СвойстваШапки, "Дата",                                 "ДатаВедомости");
	ДобавитьПКС(СвойстваШапки, "Номер",                                "НомерВедомости");
	ДобавитьПКС(СвойстваШапки, "Организация",                          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",                    "ПериодВыплаты");
	ДобавитьПКС(СвойстваШапки, "СуммаПоДокументу",                     "СуммаДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Зарплата");
	ДобавитьПКС(СвойстваТЧ, "", "БанковскийСчет", 1,"Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ВзысканнаяСумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ДепонированиеЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ДепонированиеЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ДепонированиеЗарплаты;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ДепонированиеЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ДепонированиеЗарплаты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Ведомость",     "ВедомостьНаВыплату", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Депоненты", "ФизическиеЛица");
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо", "ФизическоеЛицо", ,"Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ДепонированиеЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ДепонированиеЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ДепонированиеЗарплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ДепонированиеЗарплаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ДепонированиеЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Ведомость",     "ВедомостьНаВыплату", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Депоненты", "ФизическиеЛица");
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо", "ФизическоеЛицо", ,"Справочник_ФизическиеЛица_Получение");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПлатежноеПоручение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаРасходДСВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ЖелательнаяФормаОплатыНаличные", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ЖелательнаяФормаОплатыБезналичные", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ЖелательнаяФормаОплатыПлатежнаяКарта", 1);
	ДобавитьПКС(СвойстваШапки, "",              "УтвержденнаяФормаОплаты", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "БанковскийСчет", 1, "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_НДФЛ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение_НДФЛ";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаявкаНаПереводДСВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_НДФЛ_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",              "Статус", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Подразделение", 1, "Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",          "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",          "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Автор", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "КтоЗаявил", , "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры


#КонецОбласти
#Область Документы_Зарплата
Процедура ДобавитьПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ДанныеДляРасчетаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыработкаСотрудников";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ДанныеДляРасчетаЗарплаты_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтражениеЗарплатыВБухучете_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеЗарплатыВБухучете_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтражениеЗарплатыВБухучете_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтражениеЗарплатыВБухучете_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеЗарплатыВБухучете_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеЗарплатыВБухучете_Получение_Свод");
КонецПроцедуры

Процедура ДобавитьПОД_НачислениеОценочныхОбязательствПоОтпускам_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НачислениеОценочныхОбязательствПоОтпускам_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоОбработки.ПриОбработке            = "ПОД_НачислениеОценочныхОбязательствПоОтпускам_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РезервыОтпусков_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_НачислениеОценочныхОбязательствПоОтпускам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НачислениеОценочныхОбязательствПоОтпускам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоОбработки.ПриОбработке            = "ПОД_НачислениеОценочныхОбязательствПоОтпускам_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РезервыОтпусков_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РезервыОтпусков_Получение_Свод");
КонецПроцедуры

Процедура ДобавитьПКО_ДанныеДляРасчетаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ДанныеДляРасчетаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ДанныеДляРасчетаЗарплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыработкаСотрудников";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ДанныеДляРасчетаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДанныеДляРасчетаЗарплаты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Период",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВыполненныеРаботы", "ВыполненныеРаботы");
	ДобавитьПКС(СвойстваТЧ, "ВидРабот",              "ВидРабот", ,"Справочник_ВидыРаботСотрудников");
	ДобавитьПКС(СвойстваТЧ, "ОбъемВыполненныхРабот", "Количество");
	ДобавитьПКС(СвойстваТЧ, "Период",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "Расценка",              "Расценка");
	ДобавитьПКС(СвойстваТЧ, "Сотрудник",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "Сумма");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтражениеЗарплатыВБухучете_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",              "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации", "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленнаяЗарплатаИВзносы", "НачисленнаяЗарплатаИВзносы");
	ДобавитьПКС(СвойстваТЧ, "", "ВидНачисленияОплатыТрудаДляНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОблагаетсяЕНВД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПериодПринятияРасходов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеРегламентированногоУчета", 1,"Справочник_ПодразделенияОрганизаций_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПФРДоПредельнойВеличины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНаДоплатуЛетчикам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНаДоплатуШахтерам", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРНакопительная", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРПоСуммарномуТарифу", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРСПревышения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПФРСтраховая", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособОтраженияЗарплатыВФинансовомУчете", 1,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "", "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТФОМС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ФСС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФССНесчастныеСлучаи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФФОМС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленныйНДФЛ",            "НачисленныйНДФЛ");
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КПП", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НалоговыйОрган", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОКАТО", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОКТМО", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РегистрацияВНалоговомОргане", 1,"Справочник_РегистрацииВНалоговомОргане");
	ДобавитьПКС(СвойстваТЧ, "", "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "УдержаннаяЗарплата",         "УдержаннаяЗарплата");
	ДобавитьПКС(СвойстваТЧ, "", "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1,"Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ОписаниеУдержанияДляЧека", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеРегламентированногоУчета", 1,"Справочник_ПодразделенияОрганизаций_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЯвляетсяОснованиемОформленияКассовогоЧека", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтражениеЗарплатыВБухучете_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Бухгалтер",                 "Бухгалтер", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ЗарплатаОтраженаВБухучете", "ЗарплатаОтраженаВРегламентированномУчете");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",         "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленнаяЗарплатаИВзносы", "НачисленнаяЗарплатаИВзносы");
	ДобавитьПКС(СвойстваТЧ, "ВидНачисленияОплатыТрудаДляНУ",                       "ВидНачисленияОплатыТрудаДляНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "ВидОперации",                                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "ОблагаетсяЕНВД",                                      "ОблагаетсяЕНВД", 1);
	ДобавитьПКС(СвойстваТЧ, "ПериодПринятияРасходов",                              "ПериодПринятияРасходов", 1);
	ДобавитьПКС(СвойстваТЧ, "Подразделение",                                       "ПодразделениеРегламентированногоУчета", 1,"Справочник_ПодразделенияОрганизаций_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПФРДоПредельнойВеличины",                             "ПФРДоПредельнойВеличины", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах",              "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка",    "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка",    "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах",                 "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки",    "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРНаДоплатуЛетчикам",                                "ПФРНаДоплатуЛетчикам", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРНаДоплатуШахтерам",                                "ПФРНаДоплатуШахтерам", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРНакопительная",                                    "ПФРНакопительная", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРПоСуммарномуТарифу",                               "ПФРПоСуммарномуТарифу", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРСПревышения",                                      "ПФРСПревышения", 1);
	ДобавитьПКС(СвойстваТЧ, "ПФРСтраховая",                                        "ПФРСтраховая", 1);
	ДобавитьПКС(СвойстваТЧ, "СпособОтраженияЗарплатыВБухучете",                    "СпособОтраженияЗарплатыВФинансовомУчете", 1,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",                                      "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                                               "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "ТФОМС",                                               "ТФОМС", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",                                      "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваТЧ, "ФСС",                                                 "ФСС", 1);
	ДобавитьПКС(СвойстваТЧ, "ФССНесчастныеСлучаи",                                 "ФССНесчастныеСлучаи", 1);
	ДобавитьПКС(СвойстваТЧ, "ФФОМС",                                               "ФФОМС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленныйНДФЛ",            "НачисленныйНДФЛ");
	ДобавитьПКС(СвойстваТЧ, "ВидОперации",         "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "КодНалоговогоОргана", "НалоговыйОрган", 1);
	ДобавитьПКС(СвойстваТЧ, "КодПоОКАТО",          "ОКАТО", 1);
	ДобавитьПКС(СвойстваТЧ, "КодПоОКТМО",          "ОКТМО", 1);
	ДобавитьПКС(СвойстваТЧ, "КПП",                 "КПП", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",      "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",      "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "УдержаннаяЗарплата",         "УдержаннаяЗарплата");
	ДобавитьПКС(СвойстваТЧ, "ВидОперации",                               "ВидОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "Контрагент",                                "Контрагент", 1,"Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ОписаниеУдержанияДляЧека",                  "ОписаниеУдержанияДляЧека", 1);
	ДобавитьПКС(СвойстваТЧ, "Подразделение",                             "ПодразделениеРегламентированногоУчета", 1,"Справочник_ПодразделенияОрганизаций_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходов",                            "СпособРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                                     "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "ФизическоеЛицо",                            "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваТЧ, "ЯвляетсяОснованиемОформленияКассовогоЧека", "ЯвляетсяОснованиемОформленияКассовогоЧека", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_Свод(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтражениеЗарплатыВБухучете_Получение_Свод";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтражениеЗарплатыВБухучете;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтражениеЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Бухгалтер",                 "Бухгалтер", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ЗарплатаОтраженаВБухучете", "ЗарплатаОтраженаВРегламентированномУчете");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",         "ПериодРегистрации");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РезервыОтпусков_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РезервыОтпусков_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоКонвертации.ОбъектФормата     = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РезервыОтпусков_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоляРасходов",              "ДоляРасходов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КорректировкаОбязательств", "КорректировкаОбязательств");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",         "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОценочныеОбязательства", "ОценочныеОбязательства");
	ДобавитьПКС(СвойстваТЧ, "", "ОблагаетсяЕНВД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Подразделение", 1,"Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеРегламентированногоУчета", 1,"Справочник_ПодразделенияОрганизаций_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпособОтраженияЗарплатыВФинансовомУчете", 1,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерва", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваСтраховыхВзносов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваСтраховыхВзносовНУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваФССНесчастныеСлучаи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРезерваФССНесчастныеСлучаиНУ", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РезервыОтпусков_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РезервыОтпусков_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоКонвертации.ОбъектФормата                = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Бухгалтер",                      "Бухгалтер", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоляРасходов",                   "ДоляРасходов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КорректировкаОбязательств",      "КорректировкаОбязательств");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "ОбязательстваОтраженыВБухучете", "ОбязательстваОтраженыВБухучете");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",              "ПериодРегистрации");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОценочныеОбязательства", "ОценочныеОбязательства");
	ДобавитьПКС(СвойстваТЧ, "МестоВСтруктуреПредприятия",        "Подразделение", ,"Справочник_СтруктураПредприятия_Получение");
	ДобавитьПКС(СвойстваТЧ, "ОблагаетсяЕНВД",                    "ОблагаетсяЕНВД");
	ДобавитьПКС(СвойстваТЧ, "Подразделение",                     "ПодразделениеРегламентированногоУчета", ,"Справочник_ПодразделенияОрганизаций_Получение");
	ДобавитьПКС(СвойстваТЧ, "СпособОтраженияЗарплатыВБухучете",  "СпособОтраженияЗарплатыВФинансовомУчете", ,"Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерва",                      "СуммаРезерва");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваНУ",                    "СуммаРезерваНУ");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваСтраховыхВзносов",      "СуммаРезерваСтраховыхВзносов");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваСтраховыхВзносовНУ",    "СуммаРезерваСтраховыхВзносовНУ");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваФССНесчастныеСлучаи",   "СуммаРезерваФССНесчастныеСлучаи");
	ДобавитьПКС(СвойстваТЧ, "СуммаРезерваФССНесчастныеСлучаиНУ", "СуммаРезерваФССНесчастныеСлучаиНУ");

КонецПроцедуры

Процедура ДобавитьПКО_Документ_РезервыОтпусков_Получение_Свод(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РезервыОтпусков_Получение_Свод";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам;
	ПравилоКонвертации.ОбъектФормата                = "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Бухгалтер",                      "Бухгалтер", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоляРасходов",                   "ДоляРасходов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КорректировкаОбязательств",      "КорректировкаОбязательств");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "ОбязательстваОтраженыВБухучете", "ОбязательстваОтраженыВБухучете");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации",              "ПериодРегистрации");

КонецПроцедуры


#КонецОбласти
#Область Документы_Регл__отчеты
Процедура ДобавитьПОД_Документ_ОтражениеСтатистикиПерсоналаВБухучете_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтражениеСтатистикиПерсоналаВБухучете_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтражениеСтатистикиПерсоналаВБухучете;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтражениеСтатистикиПерсоналаВБухучете_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтражениеСтатистикиПерсоналаВБухучете");
КонецПроцедуры

Процедура ДобавитьПОД_РегламентированныйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегламентированныйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РегламентированныйОтчет;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегламентированныйОтчет_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_РегламентированныйОтчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегламентированныйОтчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РегламентированныйОтчет";
	ПравилоОбработки.ПриОбработке            = "ПОД_РегламентированныйОтчет_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РегламентированныйОтчет_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтражениеСтатистикиПерсоналаВБухучете(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтражениеСтатистикиПерсоналаВБухучете";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтражениеСтатистикиПерсоналаВБухучете;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СтатистикаПерсонала";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",              "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",       "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",     "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПериодРегистрации", "ПериодРегистрацииСтатистики");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Показатели", "Показатели");
	ДобавитьПКС(СвойстваТЧ, "МестоВСтруктуреПредприятия",                     "Подразделение", ,"Справочник_СтруктураПредприятия_Отправка");
	ДобавитьПКС(СвойстваТЧ, "Подразделение",                                  "ПодразделениеРегламентированногоУчета", ,"Справочник_ПодразделенияОрганизаций_Отправка");
	ДобавитьПКС(СвойстваТЧ, "СреднесписочнаяЧисленностьВнешнихСовместителей", "СреднесписочнаяЧисленностьВнешнихСовместителей");
	ДобавитьПКС(СвойстваТЧ, "СреднесписочнаяЧисленностьСотрудников",          "СреднесписочнаяЧисленностьСотрудников");
	ДобавитьПКС(СвойстваТЧ, "СредняяЧисленностьДоговорников",                 "СредняяЧисленностьДоговорников");

КонецПроцедуры

Процедура ДобавитьПКО_РегламентированныйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РегламентированныйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РегламентированныйОтчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РегламентированныйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РегламентированныйОтчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вид",                           "ВидОтчета", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОтчетности",                 "ВидОтчетности", , "ВидыОтчетности");
	ДобавитьПКС(СвойстваШапки, "ВыбраннаяФорма",                "ВыбраннаяФорма");
	ДобавитьПКС(СвойстваШапки, "ДанныеОтчета",                  "ДанныеОтчета", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                 "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "ДатаОтправки",                  "ДатаОтправки");
	ДобавитьПКС(СвойстваШапки, "ДатаПодписи",                   "ДатаПодписи");
	ДобавитьПКС(СвойстваШапки, "ДеревоНастройкиСтраниц",        "ДеревоНастройкиСтраниц", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",              "ПорядокОкругленияОтчета", , "ПорядкиОкругленияОтчетности");
	ДобавитьПКС(СвойстваШапки, "Идентификатор",                 "ИдентификаторОтчета");
	ДобавитьПКС(СвойстваШапки, "ИсточникОтчета",                "ИсточникОтчета");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",           "НалоговыйОрган");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОрганаПосредника", "НалоговыйОрганПосредник");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОтчета",            "НаименованиеОтчета");
	ДобавитьПКС(СвойстваШапки, "НомерПачки",                    "НомерПачки", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Период",                        "ПериодСтрокой");
	ДобавитьПКС(СвойстваШапки, "Периодичность",                 "Период", , "ПериодичностьРО");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеВида",             "ПредставлениеВида");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеПериода",          "ПредставлениеПериода");
	ДобавитьПКС(СвойстваШапки, "СтатусОтчета",                  "СтатусОтчета");
	ДобавитьПКС(СвойстваШапки, "ТочностьЕдиницыИзмерения",      "ТочностьЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ФорматВыгрузки",                "ФорматВыгрузки");

КонецПроцедуры

Процедура ДобавитьПКО_РегламентированныйОтчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "РегламентированныйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РегламентированныйОтчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РегламентированныйОтчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_РегламентированныйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вид",                           "ВидОтчета", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОтчетности",                 "ВидОтчетности", , "ВидыОтчетности");
	ДобавитьПКС(СвойстваШапки, "ВыбраннаяФорма",                "ВыбраннаяФорма");
	ДобавитьПКС(СвойстваШапки, "ДанныеОтчета",                  "ДанныеОтчета", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                 "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "ДатаОтправки",                  "ДатаОтправки");
	ДобавитьПКС(СвойстваШапки, "ДатаПодписи",                   "ДатаПодписи");
	ДобавитьПКС(СвойстваШапки, "ДеревоНастройкиСтраниц",        "ДеревоНастройкиСтраниц", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",              "ПорядокОкругленияОтчета", , "ПорядкиОкругленияОтчетности");
	ДобавитьПКС(СвойстваШапки, "Идентификатор",                 "ИдентификаторОтчета");
	ДобавитьПКС(СвойстваШапки, "ИсточникОтчета",                "ИсточникОтчета");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",           "НалоговыйОрган");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОрганаПосредника", "НалоговыйОрганПосредник");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                           "КПП");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОтчета",            "НаименованиеОтчета");
	ДобавитьПКС(СвойстваШапки, "НомерПачки",                    "НомерПачки", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Период",                        "ПериодСтрокой");
	ДобавитьПКС(СвойстваШапки, "Периодичность",                 "Период", , "ПериодичностьРО");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеВида",             "ПредставлениеВида");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеПериода",          "ПредставлениеПериода");
	ДобавитьПКС(СвойстваШапки, "СтатусОтчета",                  "СтатусОтчета");
	ДобавитьПКС(СвойстваШапки, "ТочностьЕдиницыИзмерения",      "ТочностьЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ФорматВыгрузки",                "ФорматВыгрузки");

КонецПроцедуры


#КонецОбласти
#Область НастройкиОрганизаций
Процедура ДобавитьПОД_НастройкиРасчетаРезервовОтпусков_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НастройкиРасчетаРезервовОтпусков_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.НастройкиРасчетаРезервовОтпусков;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("НастройкиРасчетаРезервовОтпусков_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_НастройкиРасчетаРезервовОтпусков_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "НастройкиРасчетаРезервовОтпусков_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.НастройкиРасчетаРезервовОтпусков;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НастройкиРасчетаРезервовОтпусков";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_НастройкиРасчетаРезервовОтпусков_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Период", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "НастройкиРасчета");
	ДобавитьПКС(СвойстваТЧ, "", "Организация", 1,"Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФормироватьРезервОтпусковБУ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФормироватьРезервОтпусковНУ", 1);

КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Контрагенты
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторБанков_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторБанков_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("КлассификаторБанков");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
КонецПроцедуры

Процедура ДобавитьПКО_КлассификаторБанков(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "КлассификаторБанков";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_КлассификаторБанков_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_КлассификаторБанков_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_КлассификаторБанков_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "СВИФТБИК",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Страна",       "Страна", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаДенежныхСредств", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Банк",            "Банк", , "КлассификаторБанков");
	ДобавитьПКС(СвойстваШапки, "Владелец",        "Владелец", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",      "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения", "ТекстНазначения");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИНН", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЮридическоеФизическоеЛицо", 1, "Перечисление_ЮридическоеФизическоеЛицо");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                 "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Прочая_справочная_информация
Процедура ДобавитьПОД_Справочник_ВидыРаботСотрудников_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыРаботСотрудников_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыРаботСотрудников;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыРаботСотрудников_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРаботСотрудников");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРаботСотрудниковГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыРаботСотрудников_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыРаботСотрудников_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыРаботСотрудников";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРаботСотрудников");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыРаботСотрудниковГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыРаботСотрудниковГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыРаботСотрудниковГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыРаботСотрудниковГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДокументыФизическихЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЗППроекты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЗППроекты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗарплатныеПроекты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗППроекты_КакБанковскиеСчета");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗППроекты_КакКонтрагенты");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчете");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчете_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчете");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "ВидДокументаИзКлассификатора", 1);
	ДобавитьПКС(СвойстваШапки, "КодМВД",       "КодМВД");
	ДобавитьПКС(СвойстваШапки, "КодПФР",       "КодПФР");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыРаботСотрудников(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыРаботСотрудников";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыРаботСотрудников;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыРаботСотрудников";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ВидыРаботСотрудников";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ВидыРаботСотрудниковГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыРаботСотрудниковГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыРаботСотрудниковГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыРаботСотрудников;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыРаботСотрудниковГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ВидыРаботСотрудниковГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1,"Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыдачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КемВыдан", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПодразделения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокДействия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЯвляетсяУдостоверяющимЛичность", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидДокумента,Физлицо");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЗППроекты_КакБанковскиеСчета(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЗППроекты_КакБанковскиеСчета";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЗарплатныеПроекты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЗППроекты_КакБанковскиеСчета_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Банк", 1, "КлассификаторБанков");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НомерСчета", 1);
	ДобавитьПКС(СвойстваШапки, "", "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВалютаДенежныхСредств", 1, "Справочник_Валюты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЗППроекты_КакКонтрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЗППроекты_КакКонтрагенты";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЗарплатныеПроекты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЗППроекты_КакКонтрагенты_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИНН", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЮридическоеФизическоеЛицо", 1, "Перечисление_ЮридическоеФизическоеЛицо");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",               "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "", 1, "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ФизическоеЛицо");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчете(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпособыОтраженияЗарплатыВБухУчете";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчете";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпособыОтраженияЗарплатыВБухУчете;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпособыОтраженияЗарплатыВФинансовомУчетеГруппа";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРегистрации",       "ДатаРегистрации");
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",          "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "Имя",                   "Имя");
	ДобавитьПКС(СвойстваШапки, "ИНН",                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "Код",                   "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "МестоРождения",         "МестоРождения");
	ДобавитьПКС(СвойстваШапки, "Отчество",              "Отчество");
	ДобавитьПКС(СвойстваШапки, "Пол",                   "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",              "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР",     "СтраховойНомерПФР");
	ДобавитьПКС(СвойстваШапки, "УточнениеНаименования", "УточнениеНаименования");
	ДобавитьПКС(СвойстваШапки, "Фамилия",               "Фамилия");
	ДобавитьПКС(СвойстваШапки, "ФИО",                   "ФИО");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Гражданство");
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Страна", 1,"Справочник_СтраныМира");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРегистрации",   "ДатаРегистрации");
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",      "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",               "ИНН");
	ДобавитьПКС(СвойстваШапки, "Код",               "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",               "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",          "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР", "СтраховойНомерПФР");
	ДобавитьПКС(СвойстваШапки, "ФИО",               "ФИО");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("СтраховойНомерПФР,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,ФИО,ЭтоГруппа");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Структура_предприятия
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПодразделенияОрганизаций_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПодразделенияОрганизаций_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПодразделенияОрганизаций_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПодразделенияОрганизаций_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПодразделенияОрганизаций_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПодразделениеРегламентированногоУчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПодразделенияОрганизаций_Получение");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_РегистрацииВНалоговомОргане_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегистрацииВНалоговомОргане");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_РегистрацииВНалоговомОргане_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_РегистрацииВНалоговомОргане_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегистрацииВНалоговомОргане");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтруктураПредприятия_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктураПредприятия_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтруктураПредприятия_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтруктураПредприятия_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктураПредприятия_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтруктураПредприятия_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДополнительныйКодФСС",                  "ДополнительныйКодФСС");
	ДобавитьПКС(СвойстваШапки, "ИНН",                                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД",                              "ОКВЭД");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД2",                             "ОКВЭД2");
	ДобавитьПКС(СвойстваШапки, "КодОКОПФ",                              "ОКОПФ");
	ДобавитьПКС(СвойстваШапки, "КодОКФС",                               "ОКФС");
	ДобавитьПКС(СвойстваШапки, "КодОрганаПФР",                          "ОрганПФР");
	ДобавитьПКС(СвойстваШапки, "КодПодчиненностиФСС",                   "КодПодчиненностиФСС");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                             "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Наименование",                          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКВЭД",                     "НаименованиеОКВЭД");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКВЭД2",                    "НаименованиеОКВЭД2");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКОПФ",                     "НаименованиеОКОПФ");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКФС",                      "НаименованиеОКФС");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                    "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",               "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеТерриториальногоОрганаПФР", "НаименованиеТерриториальногоОрганаПФР");
	ДобавитьПКС(СвойстваШапки, "НаименованиеТерриториальногоОрганаФСС", "НаименованиеТерриториальногоОрганаФСС");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерПФР",               "РегистрационныйНомерПФР");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерФСС",               "РегистрационныйНомерФСС");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",             "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДополнительныйКодФСС",                  "ДополнительныйКодФСС");
	ДобавитьПКС(СвойстваШапки, "ИНН",                                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД",                              "ОКВЭД");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД2",                             "ОКВЭД2");
	ДобавитьПКС(СвойстваШапки, "КодОКОПФ",                              "ОКОПФ");
	ДобавитьПКС(СвойстваШапки, "КодОрганаПФР",                          "ОрганПФР");
	ДобавитьПКС(СвойстваШапки, "КодПодчиненностиФСС",                   "КодПодчиненностиФСС");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                             "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Наименование",                          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКВЭД",                     "НаименованиеОКВЭД");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКВЭД2",                    "НаименованиеОКВЭД2");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКОПФ",                     "НаименованиеОКОПФ");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОКФС",                      "НаименованиеОКФС");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                    "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",               "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеТерриториальногоОрганаПФР", "НаименованиеТерриториальногоОрганаПФР");
	ДобавитьПКС(СвойстваШапки, "НаименованиеТерриториальногоОрганаФСС", "НаименованиеТерриториальногоОрганаФСС");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                                  "ОГРН");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерПФР",               "РегистрационныйНомерПФР");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерФСС",               "РегистрационныйНомерФСС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПодразделенияОрганизаций_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПодразделенияОрганизаций_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПодразделениеРегламентированногоУчета";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_ПодразделенияОрганизаций_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПодразделенияОрганизаций_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ПодразделенияОрганизаций_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ПодразделениеРегламентированногоУчета";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_ПодразделенияОрганизаций_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                               "Организация", 1);
	ДобавитьПКС(СвойстваШапки, "Доверенность",                           "Доверенность");
	ДобавитьПКС(СвойстваШапки, "ДокументПредставителя",                  "ДокументПредставителя");
	ДобавитьПКС(СвойстваШапки, "Код",                                    "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                             "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКТМО",                             "ОКТМО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "КраткоеНаименованиеНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "НаименованиеИФНС",                       "НаименованиеИФНС");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОбособленногоПодразделения", "НаименованиеОбособленногоПодразделения", 1);
	ДобавитьПКС(СвойстваШапки, "Представитель",                          "Представитель");
	ДобавитьПКС(СвойстваШапки, "УполномоченноеЛицоПредставителя",        "УполномоченноеЛицоПредставителя");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Код,КодПоОКАТО,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Код,КодПоОКАТО");
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктураПредприятия_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтруктураПредприятия_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктураПредприятия_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СтруктураПредприятия_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_СтруктураПредприятия_Отправка");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтруктураПредприятия_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтруктураПредприятия_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_СтруктураПредприятия_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры


#КонецОбласти
#Область Справочная_информация_Базовые_классификаторы
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Валюты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",   "ПараметрыПрописи");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры


#КонецОбласти


Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область ОбработчикиКонвертации
#Область Документы_Банк_Касса
Процедура ПОД_Документ_ПБДСРасчетыССотрудниками_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДанныеДляФормированияПроводокОтправлятьСводно Тогда
		ИспользованиеПКО.ПогашениеЗаймаСотрудникуБанк_Получение = Ложь;
	Иначе
		ИспользованиеПКО.ПогашениеЗаймаСотрудникуБанк_Получение = ДанныеXDTO.ВидРасчетов.Значение = "Займы";
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПКОРасчетыССотрудниками_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДанныеДляФормированияПроводокОтправлятьСводно Тогда
		ИспользованиеПКО.ПогашениеЗаймаСотрудникуКасса_Получение = Ложь;
	Иначе
		ИспользованиеПКО.ПогашениеЗаймаСотрудникуКасса_Получение = ДанныеXDTO.ВидРасчетов.Значение = "Займы";
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_РКОРасчетыССотрудниками_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДанныеДляФормированияПроводокОтправлятьСводно Тогда
		ИспользованиеПКО.ВыплатаДепонированнойЗарплатыКасса_Получение = Ложь;
		ИспользованиеПКО.ВыдачаЗаймаСотрудникуКасса_Получение = Ложь;
	Иначе
		ИспользованиеПКО.ВыплатаДепонированнойЗарплатыКасса_Получение = ДанныеXDTO.ВидРасчетов.Значение = "Депоненты";
		ИспользованиеПКО.ВыдачаЗаймаСотрудникуКасса_Получение = ДанныеXDTO.ВидРасчетов.Значение = "Займы";
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СБДСРасчетыССотрудниками_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДанныеДляФормированияПроводокОтправлятьСводно Тогда
		ИспользованиеПКО.ВыплатаДепонированнойЗарплатыБанк_Получение = Ложь;
		ИспользованиеПКО.ВыдачаЗаймаСотрудникуБанк_Получение = Ложь;
	Иначе
		ИспользованиеПКО.ВыплатаДепонированнойЗарплатыБанк_Получение = ДанныеXDTO.ВидРасчетов.Значение = "Депоненты";
		ИспользованиеПКО.ВыдачаЗаймаСотрудникуБанк_Получение = ДанныеXDTO.ВидРасчетов.Значение = "Займы";
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_ВыдачаЗаймаСотрудникуБанк_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ФормаРасчетов = Перечисления.ФормыОплаты.Безналичная;
КонецПроцедуры
Процедура ПКО_ВыдачаЗаймаСотрудникуКасса_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ФормаРасчетов = Перечисления.ФормыОплаты.Наличная;
КонецПроцедуры
Процедура ПКО_ВыплатаДепонированнойЗарплатыБанк_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ФормаРасчетов = Перечисления.ФормыОплаты.Безналичная;
	Для каждого СтрокаТЗ Из ДанныеXDTO.ДепонированиеЗарплаты Цикл
		СсылкаЗначение = СтрокаТЗ.ВедомостьНаВыплату.Ссылка.Значение;
		Ссылка = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаЗначение));
		Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			НоваяСтрока = ПолученныеДанные.Депоненты.Добавить();
			НоваяСтрока.Ведомость = Ссылка;
			НоваяСтрока.Сумма = СтрокаТЗ.Сумма;
		Иначе
			Ссылка = Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаЗначение));
			Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
				НоваяСтрока = ПолученныеДанные.Депоненты.Добавить();
				НоваяСтрока.Ведомость = Ссылка;
				НоваяСтрока.Сумма = СтрокаТЗ.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_ВыплатаДепонированнойЗарплатыКасса_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ФормаРасчетов = Перечисления.ФормыОплаты.Наличная;
	Для каждого СтрокаТЗ Из ДанныеXDTO.ДепонированиеЗарплаты Цикл
		СсылкаЗначение = СтрокаТЗ.ВедомостьНаВыплату.Ссылка.Значение;
		Ссылка = Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаЗначение));
		Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			НоваяСтрока = ПолученныеДанные.Депоненты.Добавить();
			НоваяСтрока.Ведомость = Ссылка;
			НоваяСтрока.Сумма = СтрокаТЗ.Сумма;
		Иначе
			Ссылка = Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаЗначение));
			Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
				НоваяСтрока = ПолученныеДанные.Депоненты.Добавить();
				НоваяСтрока.Ведомость = Ссылка;
				НоваяСтрока.Сумма = СтрокаТЗ.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_ПогашениеЗаймаСотрудникуБанк_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ФормаРасчетов = Перечисления.ФормыОплаты.Безналичная;
КонецПроцедуры
Процедура ПКО_ПогашениеЗаймаСотрудникуКасса_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ФормаРасчетов = Перечисления.ФормыОплаты.Наличная;
КонецПроцедуры

#КонецОбласти
#Область Документы_Ведомости
Процедура ПОД_Документ_ВедомостьНаВыплатуЗарплатыВБанк_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ.Проведен Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыВБанк = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ВедомостьНаВыплатуЗарплатыВКассу_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыВКассу = Ложь;
	ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка = Ложь;
	ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ = Ложь;
	
	Если ДанныеИБ.Проведен И Не КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыВКассу = Истина;
	ИначеЕсли ДанныеИБ.Проведен И КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка = Истина;
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ = Истина;
		
		ДанныеВедомостиПоНДФЛ = Новый Структура;
		ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеВедомостиПоНДФЛ);
	
		РасшифровкаНДФЛ = ДанныеВедомостиПоНДФЛ.РасшифровкаПлатежа;
		Если РасшифровкаНДФЛ.Количество() = 0
			Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
			ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ВедомостьНаВыплатуЗарплатыПеречислением_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыПеречислением = Ложь;
	ИспользованиеПКО.Документ_ВедомостьПеречислением_Заявка = Ложь;
	ИспользованиеПКО.Документ_ВедомостьПеречислением_НДФЛ = Ложь;
	
	Если ДанныеИБ.Проведен И Не КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыПеречислением = Истина;
	ИначеЕсли ДанныеИБ.Проведен И КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьПеречислением_Заявка = Истина;
		ИспользованиеПКО.Документ_ВедомостьПеречислением_НДФЛ = Истина;
		
		ДанныеВедомостиПоНДФЛ = Новый Структура;
		ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеВедомостиПоНДФЛ);
	
		РасшифровкаНДФЛ = ДанныеВедомостиПоНДФЛ.РасшифровкаПлатежа;
		Если РасшифровкаНДФЛ.Количество() = 0
			Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
			ИспользованиеПКО.Документ_ВедомостьПеречислением_НДФЛ = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком = Ложь;
	ИспользованиеПКО.Документ_ВедомостьНаВыплатуРаздатчиком_Заявка = Ложь;
	ИспользованиеПКО.Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ = Ложь;
	
	Если ДанныеИБ.Проведен И Не КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком = Истина;
	ИначеЕсли ДанныеИБ.Проведен И КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуРаздатчиком_Заявка = Истина;
		ИспользованиеПКО.Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ = Истина;
		
		ДанныеВедомостиПоНДФЛ = Новый Структура;
		ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеВедомостиПоНДФЛ);
	
		РасшифровкаНДФЛ = ДанныеВедомостиПоНДФЛ.РасшифровкаПлатежа;
		Если РасшифровкаНДФЛ.Количество() = 0
			Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
			ИспользованиеПКО.Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ВедомостьПрочихДоходовВБанк_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ.Проведен Тогда
		ИспользованиеПКО.Документ_ВедомостьПрочихДоходовВБанк = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ВедомостьПрочихДоходовВКассу_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВедомостьПрочихДоходовВКассу = Ложь;
	ИспользованиеПКО.Документ_ВедомостьПрочихДоходовВКассу_Заявка = Ложь;
	ИспользованиеПКО.Документ_ВедомостьПрочихДоходовВКассу_НДФЛ = Ложь;
	
	Если ДанныеИБ.Проведен И Не КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьПрочихДоходовВКассу = Истина;
	ИначеЕсли ДанныеИБ.Проведен И КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьПрочихДоходовВКассу_Заявка = Истина;
		ИспользованиеПКО.Документ_ВедомостьПрочихДоходовВКассу_НДФЛ = Истина;
		
		ДанныеВедомостиПоНДФЛ = Новый Структура;
		ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеВедомостиПоНДФЛ);
	
		РасшифровкаНДФЛ = ДанныеВедомостиПоНДФЛ.РасшифровкаПлатежа;
		Если РасшифровкаНДФЛ.Количество() = 0
			Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
			ИспользованиеПКО.Документ_ВедомостьПрочихДоходовВКассу_НДФЛ = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ВедомостьПрочихДоходовПеречислением_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВедомостьПрочихДоходовПеречислением = Ложь;
	ИспользованиеПКО.Документ_ВедомостьПДПеречислением_Заявка = Ложь;
	ИспользованиеПКО.Документ_ВедомостьПДПеречислением_НДФЛ = Ложь;
	
	Если ДанныеИБ.Проведен И Не КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьПрочихДоходовПеречислением = Истина;
	ИначеЕсли ДанныеИБ.Проведен И КомпонентыОбмена.ПараметрыКонвертации.ОтправлятьВедомостиКакЗаявки Тогда
		ИспользованиеПКО.Документ_ВедомостьПДПеречислением_Заявка = Истина;
		ИспользованиеПКО.Документ_ВедомостьПДПеречислением_НДФЛ = Истина;
		
		ДанныеВедомостиПоНДФЛ = Новый Структура;
		ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеВедомостиПоНДФЛ);
	
		РасшифровкаНДФЛ = ДанныеВедомостиПоНДФЛ.РасшифровкаПлатежа;
		Если РасшифровкаНДФЛ.Количество() = 0
			Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
			ИспользованиеПКО.Документ_ВедомостьПДПеречислением_НДФЛ = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ДепонированиеЗарплаты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ.Проведен Тогда
		ИспользованиеПКО.Документ_ДепонированиеЗарплаты_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПлатежноеПоручение_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДанныеПоНДФЛ = Новый Структура;
	ЗаполнитьРасшифровкуПлатежа_НДФЛ(ДанныеИБ, ДанныеПоНДФЛ);
	
	РасшифровкаНДФЛ = ДанныеПоНДФЛ.РасшифровкаПлатежа;
	Если РасшифровкаНДФЛ.Количество() = 0
		Или РасшифровкаНДФЛ.Итог("Сумма") = 0 Тогда
		ИспользованиеПКО.Документ_ПлатежноеПоручение_НДФЛ = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуЗарплатыВБанк_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВедомостьНаВыплатуЗарплаты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВедомостьНаВыплатуЗарплаты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_Заявка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//ЖелательнаяФормаОплатыНаличные, ЖелательнаяФормаОплатыБезналичные, ЖелательнаяФормаОплатыПлатежнаяКарта, УтвержденнаяФормаОплаты
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные", Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные", Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты", "Наличная");
	
	//РасшифровкаПлатежа: Сумма, НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуЗарплатыВКассу_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта.
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	// РасшифровкаПлатежа: Сумма.
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуЗарплатыПеречислением_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВедомостьНаВыплатуЗарплаты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВедомостьНаВыплатуЗарплаты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуРаздатчиком_Заявка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//ЖелательнаяФормаОплатыНаличные, ЖелательнаяФормаОплатыБезналичные, ЖелательнаяФормаОплатыПлатежнаяКарта, УтвержденнаяФормаОплаты
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные", Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные", Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты", "Наличная");
	
	//РасшифровкаПлатежа: Сумма, НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьНаВыплатуРаздатчиком_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//Сумма
	//РасшифровкаПлатежа: Сумма
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПДПеречислением_Заявка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ,,Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//ЖелательнаяФормаОплатыНаличные, ЖелательнаяФормаОплатыБезналичные, ЖелательнаяФормаОплатыПлатежнаяКарта, УтвержденнаяФормаОплаты
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные", Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные", Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты", "Безналичная");
	
	//РасшифровкаПлатежа: Сотрудник, БанковскийСчет, Сумма, НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПДПеречислением_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, Истина, Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//Сумма
	//РасшифровкаПлатежа: Сумма
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПеречислением_Заявка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//ЖелательнаяФормаОплатыНаличные, ЖелательнаяФормаОплатыБезналичные, ЖелательнаяФормаОплатыПлатежнаяКарта, УтвержденнаяФормаОплаты
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные", Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные", Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты", "Безналичная");
	
	//РасшифровкаПлатежа: Сотрудник, БанковскийСчет, Сумма, НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПеречислением_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//Сумма
	//РасшифровкаПлатежа: Сумма
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПрочихДоходовВБанк_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВедомостьПрочихДоходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПрочихДоходовВКассу_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВедомостьПрочихДоходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПрочихДоходовВКассу_Заявка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ,,Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	//ЖелательнаяФормаОплатыНаличные, ЖелательнаяФормаОплатыБезналичные, ЖелательнаяФормаОплатыПлатежнаяКарта, УтвержденнаяФормаОплаты
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные", Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные", Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты", "Наличная");
	
	//РасшифровкаПлатежа: Сумма, НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПрочихДоходовВКассу_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта.
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	Подразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, Истина, Истина);
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	// РасшифровкаПлатежа: Сумма.
	ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры
Процедура ПКО_Документ_ВедомостьПрочихДоходовПеречислением_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВедомостьПрочихДоходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ДепонированиеЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
		Инструкция = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Ведомость, "Документ_ВедомостьНаВыплатуЗарплатыВКассу");
	ИначеЕсли ТипЗнч(ДанныеИБ.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком") Тогда
		Инструкция = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Ведомость, "Документ_ВедомостьНаВыплатуЗарплатыРаздатчиком");
	КонецЕсли;
	ДанныеXDTO.Вставить("ВедомостьНаВыплату", Инструкция);
КонецПроцедуры
Процедура ПКО_Документ_ДепонированиеЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	Если ЗначениеЗаполнено(ДанныеXDTO.ВедомостьНаВыплату.Ссылка.Значение) Тогда
		Ссылка = Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеXDTO.ВедомостьНаВыплату.Ссылка.Значение));
		Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			ПолученныеДанные.Ведомость = Ссылка;
		Иначе
			Ссылка = Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеXDTO.ВедомостьНаВыплату.Ссылка.Значение));
			Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
				ПолученныеДанные.Ведомость = Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПлатежноеПоручение_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Статус, Валюта.
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	Подразделение = Неопределено;
	Для Каждого СтрокаВедомости Из ДанныеИБ.Ведомости Цикл
		ВедомостьОбъект = СтрокаВедомости.Ведомость.ПолучитьОбъект();
		МД = ВедомостьОбъект.Метаданные();
		ЭтоВедомостьПрочихДоходов = МД.ТабличныеЧасти.Найти("Зарплата") = Неопределено;
		ТекПодразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ВедомостьОбъект,, ЭтоВедомостьПрочихДоходов);
		
		Если Не Подразделение = Неопределено
			И Не Подразделение = ТекПодразделение Тогда
			Подразделение = Неопределено;
			Прервать;
		Иначе
			Подразделение = ТекПодразделение;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	Сведения = ОбменСБанкамиПоЗарплатнымПроектам.СведенияОПлатежномДокументе(ДанныеИБ.Ведомости.ВыгрузитьКолонку("Ведомость"), Неопределено);
	ДанныеXDTO.Вставить("Контрагент",     Новый Структура("Значение, ИмяПКО", Сведения.ЗарплатныйПроект, "Справочник_ЗППроекты_КакКонтрагенты"));
	ДанныеXDTO.Вставить("БанковскийСчет", Новый Структура("Значение, ИмяПКО", Сведения.ЗарплатныйПроект, "Справочник_ЗППроекты_КакБанковскиеСчета"));
	
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыНаличные",       Ложь);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыБезналичные",    Истина);
	ДанныеXDTO.Вставить("ЖелательнаяФормаОплатыПлатежнаяКарта", Ложь);
	ДанныеXDTO.Вставить("УтвержденнаяФормаОплаты",              "Безналичная");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВедомостьПрочихДоходовВБанк.Номер ЕСТЬ NULL
	|				ТОГДА ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу
	|			ИНАЧЕ ВедомостьПрочихДоходовВБанк.СуммаПоДокументу
	|		КОНЕЦ) КАК Сумма,
	|	ПлатежноеПоручение.НомерРеестра КАК НомерВедомостиНаВыплатуЗарплаты,
	|	ПлатежноеПоручение.Дата КАК ДатаВедомостиНаВыплатуЗарплаты
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.Ведомости КАК ПлатежноеПоручениеВедомости
	|		ПО (ПлатежноеПоручениеВедомости.Ссылка = ПлатежноеПоручение.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО (ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ПлатежноеПоручениеВедомости.Ведомость)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходовВБанк КАК ВедомостьПрочихДоходовВБанк
	|		ПО (ВедомостьПрочихДоходовВБанк.Ссылка = ПлатежноеПоручениеВедомости.Ведомость)
	|ГДЕ
	|	ПлатежноеПоручениеВедомости.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежноеПоручение.НомерРеестра,
	|	ПлатежноеПоручение.Дата");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаРасшифровка = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблицаРасшифровка);
	
	ДанныеXDTO.Вставить("Сумма", ТаблицаРасшифровка.Итог("Сумма"));
КонецПроцедуры
Процедура ПКО_Документ_ПлатежноеПоручение_НДФЛ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Статус, Валюта
	ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO);
	
	//Подразделение
	Подразделение = Неопределено;
	Для Каждого СтрокаВедомости Из ДанныеИБ.Ведомости Цикл
		ВедомостьОбъект = СтрокаВедомости.Ведомость.ПолучитьОбъект();
		МД = ВедомостьОбъект.Метаданные();
		ЭтоВедомостьПрочихДоходов = МД.ТабличныеЧасти.Найти("Зарплата") = Неопределено;
		ТекПодразделение = УправленческоеПодразделениеВедомостиНаВыплатуЗП(ВедомостьОбъект, Истина, ЭтоВедомостьПрочихДоходов);
		
		Если Не Подразделение = Неопределено
			И Не Подразделение = ТекПодразделение Тогда
			Подразделение = Неопределено;
			Прервать;
		Иначе
			Подразделение = ТекПодразделение;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Подразделение", ЗначениеВИнструкциюПКО(КомпонентыОбмена, Подразделение));
	
	// РасшифровкаПлатежа: Сумма.
	ЗаполнитьРасшифровкуПлатежа_НДФЛ(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.РасшифровкаПлатежа.Итог("Сумма"));
КонецПроцедуры

#КонецОбласти
#Область Документы_Зарплата
Процедура ПОД_Документ_ДанныеДляРасчетаЗарплаты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ВидДокумента = ВидДокументаСдельныеРаботы(КомпонентыОбмена, Справочники.Организации.ПустаяСсылка());
	Если ВидДокумента.Пустая() Тогда
		// Не введено ни одного шаблона для ввода данных по сдельным работам.
		ИспользованиеПКО.ДанныеДляРасчетаЗарплаты_Получение = Ложь;
		
		ТекстПредупреждения = НСтр("ru = 'Данные для расчета зарплаты (выработка сотрудников) не могут быть загружены,
		|т.к. в справочнике ""Шаблоны ввода исходных данных"" нет ни одного элемента, соответствующего сдельным работам.'");
		
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями; 
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ТекстПредупреждения, , Ложь, , , );
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ.Проведен Тогда
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДанныеДляФормированияПроводокОтправлятьСводно
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Получение = Ложь;
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Получение_Свод = Истина;
	Иначе	
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Получение = Истина;
		ИспользованиеПКО.Документ_ОтражениеЗарплатыВБухучете_Получение_Свод = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_НачислениеОценочныхОбязательствПоОтпускам_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ.Проведен Тогда
		ИспользованиеПКО.НачислениеОценочныхОбязательствПоОтпускам_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_НачислениеОценочныхОбязательствПоОтпускам_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ИспользованиеПКО.Документ_РезервыОтпусков_Получение = Ложь;
		ИспользованиеПКО.Документ_РезервыОтпусков_Получение_Свод = Истина;
	Иначе	
		ИспользованиеПКО.Документ_РезервыОтпусков_Получение = Истина;
		ИспользованиеПКО.Документ_РезервыОтпусков_Получение_Свод = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_ДанныеДляРасчетаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Период   = КонецМесяца(ПолученныеДанные.Дата);
	
	ПравилоКонвертацииФизЛица_Получение = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_ФизическиеЛица_Получение", "ИмяПКО");
	
	ВыполненныеРаботыXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("ВыполненныеРаботы", ВыполненныеРаботыXDTO)
		И ЗначениеЗаполнено(ВыполненныеРаботыXDTO)
		И Не ПравилоКонвертацииФизЛица_Получение = Неопределено Тогда
		
		ВыполненныеРаботыXDTO.Колонки.Добавить("ФизическоеЛицоСсылка", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		
		Для Каждого СтрокаВыполненныеРаботыXDTO Из ВыполненныеРаботыXDTO Цикл
			СтрокаВыполненныеРаботыXDTO.ФизическоеЛицоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена,
											СтрокаВыполненныеРаботыXDTO.ФизическоеЛицо, ПравилоКонвертацииФизЛица_Получение, "ПолучитьСсылку");
		КонецЦикла;
		
		ТаблицаСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ВыполненныеРаботыXDTO.ВыгрузитьКолонку("ФизическоеЛицоСсылка"), Ложь, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
		
		ВыполненныеРаботы = Новый Массив;
		ФизическиеЛица    = Новый Массив;
		
		Для Каждого СтрокаВыполненныеРаботыXDTO Из ВыполненныеРаботыXDTO Цикл
			
			СтрокаВыполненныеРаботы = Новый Структура;
			
			СтрокаСотрудники = ТаблицаСотрудники.Найти(СтрокаВыполненныеРаботыXDTO.ФизическоеЛицоСсылка, "ФизическоеЛицо");
			Если Не СтрокаСотрудники = Неопределено Тогда
				СтрокаВыполненныеРаботы.Вставить("Сотрудник", СтрокаСотрудники.Сотрудник);
			КонецЕсли;
			
			СтрокаВыполненныеРаботы.Вставить("Период", ПолученныеДанные.Дата);
			СтрокаВыполненныеРаботы.Вставить("ВидРабот", Новый Структура("ИмяПКО, Значение", "Справочник_ВидыРаботСотрудников", СтрокаВыполненныеРаботыXDTO.ВидРабот));
			СтрокаВыполненныеРаботы.Вставить("ОбъемВыполненныхРабот", СтрокаВыполненныеРаботыXDTO.Количество);
			СтрокаВыполненныеРаботы.Вставить("Расценка", СтрокаВыполненныеРаботыXDTO.Расценка);
			СтрокаВыполненныеРаботы.Вставить("Сумма", СтрокаВыполненныеРаботыXDTO.Сумма);
			
			СтрокаФизическиеЛица = Новый Структура;
			СтрокаФизическиеЛица.Вставить("ФизическоеЛицо", СтрокаВыполненныеРаботыXDTO.ФизическоеЛицоСсылка);
			
			ВыполненныеРаботы.Добавить(СтрокаВыполненныеРаботы);
			ФизическиеЛица.Добавить(СтрокаФизическиеЛица);
		КонецЦикла;
		
		Если ВыполненныеРаботы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыполненныеРаботы", ВыполненныеРаботы);
		КонецЕсли;
		
		Если ФизическиеЛица.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическиеЛица", ФизическиеЛица);
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ОтражениеЗарплатыВБухучете_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
Процедура ПКО_Документ_ОтражениеЗарплатыВБухучете_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ДанныеДляФормированияПроводокОтправлятьСводно Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("НачисленнаяЗарплатаИВзносы") Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("ВидОперации", "ВидОперации");
		ПравилаЗаполнения.Вставить("ПодразделениеРегламентированногоУчета", "Подразделение");
		ПравилаЗаполнения.Вставить("СпособОтраженияЗарплатыВФинансовомУчете", "СпособОтраженияЗарплатыВБухучете");
		ПравилаЗаполнения.Вставить("ОблагаетсяЕНВД", "ОблагаетсяЕНВД");
		ПравилаЗаполнения.Вставить("СпособРасчетов", "СтатьяРасходов");
		ПравилаЗаполнения.Вставить("ВидНачисленияОплатыТрудаДляНУ", "ВидНачисленияОплатыТрудаДляНУ");
		ПравилаЗаполнения.Вставить("ПериодПринятияРасходов", "ПериодПринятияРасходов");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("ПФРДоПредельнойВеличины", "ПФРДоПредельнойВеличины");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки");
		ПравилаЗаполнения.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка");
		ПравилаЗаполнения.Вставить("ПФРНаДоплатуЛетчикам", "ПФРНаДоплатуЛетчикам");
		ПравилаЗаполнения.Вставить("ПФРНаДоплатуШахтерам", "ПФРНаДоплатуШахтерам");
		ПравилаЗаполнения.Вставить("ПФРНакопительная", "ПФРНакопительная");
		ПравилаЗаполнения.Вставить("ПФРПоСуммарномуТарифу", "ПФРПоСуммарномуТарифу");
		ПравилаЗаполнения.Вставить("ПФРСПревышения", "ПФРСПревышения");
		ПравилаЗаполнения.Вставить("ПФРСтраховая", "ПФРСтраховая");
		ПравилаЗаполнения.Вставить("ТФОМС", "ТФОМС");
		ПравилаЗаполнения.Вставить("ФФОМС", "ФФОМС");
		ПравилаЗаполнения.Вставить("ФСС", "ФСС");
		ПравилаЗаполнения.Вставить("ФССНесчастныеСлучаи", "ФССНесчастныеСлучаи");
		
		НачисленнаяЗарплатаИВзносы = Новый Массив;
		
		Для Каждого Строка Из ДанныеXDTO.НачисленнаяЗарплатаИВзносы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если СтруктураДанныхСтроки.Свойство("ВидОперации") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ВидОперации) Тогда
				СтруктураДанныхСтроки.Вставить("ВидОперации", Перечисления.ВидыОперацийПоЗарплате[СтруктураДанныхСтроки.ВидОперации]);
			КонецЕсли;
			Если СтруктураДанныхСтроки.Свойство("ВидНачисленияОплатыТрудаДляНУ") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ВидНачисленияОплатыТрудаДляНУ) Тогда
				СтруктураДанныхСтроки.Вставить("ВидНачисленияОплатыТрудаДляНУ", Перечисления.ВидыНачисленийОплатыТрудаДляНУ[СтруктураДанныхСтроки.ВидНачисленияОплатыТрудаДляНУ]);
			КонецЕсли;
			Если СтруктураДанныхСтроки.Свойство("СтатьяРасходов") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.СтатьяРасходов) Тогда
				СтруктураДанныхСтроки.Вставить("СтатьяРасходов", Справочники.СтатьиРасходовЗарплата.НайтиПоРеквизиту("СпособРасчетовСФизическимиЛицами", Перечисления.СпособыРасчетовСФизическимиЛицами[СтруктураДанныхСтроки.СтатьяРасходов]));
			КонецЕсли;
			НачисленнаяЗарплатаИВзносы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НачисленнаяЗарплатаИВзносы", НачисленнаяЗарплатаИВзносы);
		
	КонецЕсли;
	
	//********************************************************************************
	Если ДанныеXDTO.Свойство("НачисленныйНДФЛ") Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("ВидОперации", "ВидОперации");
		ПравилаЗаполнения.Вставить("СпособРасчетов", "СтатьяРасходов");
		ПравилаЗаполнения.Вставить("ОКАТО", "КодПоОКАТО");
		ПравилаЗаполнения.Вставить("ОКТМО", "КодПоОКТМО");
		ПравилаЗаполнения.Вставить("КПП", "КПП");
		ПравилаЗаполнения.Вставить("НалоговыйОрган", "КодНалоговогоОргана");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		НачисленныйНДФЛ = Новый Массив;
		
		Для Каждого Строка Из ДанныеXDTO.НачисленныйНДФЛ Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если СтруктураДанныхСтроки.Свойство("ВидОперации") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ВидОперации) Тогда
				СтруктураДанныхСтроки.Вставить("ВидОперации", Перечисления.ВидыОперацийПоЗарплате[СтруктураДанныхСтроки.ВидОперации]);
			КонецЕсли;
			Если СтруктураДанныхСтроки.Свойство("СтатьяРасходов") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.СтатьяРасходов) Тогда
				СтруктураДанныхСтроки.Вставить("СтатьяРасходов", Справочники.СтатьиРасходовЗарплата.НайтиПоРеквизиту("СпособРасчетовСФизическимиЛицами", Перечисления.СпособыРасчетовСФизическимиЛицами[СтруктураДанныхСтроки.СтатьяРасходов]));
			КонецЕсли;
			НачисленныйНДФЛ.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НачисленныйНДФЛ", НачисленныйНДФЛ);
		
	КонецЕсли;
	
	//********************************************************************************
	Если ДанныеXDTO.Свойство("УдержаннаяЗарплата") Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
		ПравилаЗаполнения.Вставить("ПодразделениеРегламентированногоУчета", "Подразделение");
		ПравилаЗаполнения.Вставить("ВидОперации", "ВидОперации");
		ПравилаЗаполнения.Вставить("СпособРасчетов", "СтатьяРасходов");
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("ЯвляетсяОснованиемОформленияКассовогоЧека", "ЯвляетсяОснованиемОформленияКассовогоЧека");
		ПравилаЗаполнения.Вставить("ОписаниеУдержанияДляЧека", "ОписаниеУдержанияДляЧека");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		УдержаннаяЗарплата = Новый Массив;
		
		Для Каждого Строка Из ДанныеXDTO.УдержаннаяЗарплата Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если СтруктураДанныхСтроки.Свойство("ВидОперации") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ВидОперации) Тогда
				СтруктураДанныхСтроки.Вставить("ВидОперации", Перечисления.ВидыОперацийПоЗарплате[СтруктураДанныхСтроки.ВидОперации]);
			КонецЕсли;
			Если СтруктураДанныхСтроки.Свойство("СтатьяРасходов") И НЕ ПустаяСтрока(СтруктураДанныхСтроки.СтатьяРасходов) Тогда
				СтруктураДанныхСтроки.Вставить("СтатьяРасходов", Справочники.СтатьиРасходовЗарплата.НайтиПоРеквизиту("СпособРасчетовСФизическимиЛицами", Перечисления.СпособыРасчетовСФизическимиЛицами[СтруктураДанныхСтроки.СтатьяРасходов]));
			КонецЕсли;
			УдержаннаяЗарплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УдержаннаяЗарплата", УдержаннаяЗарплата);
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РезервыОтпусков_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НачислениеОценочныхОбязательств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры

#КонецОбласти
#Область Документы_Регл__отчеты
Процедура ПОД_Документ_ОтражениеСтатистикиПерсоналаВБухучете_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ.Проведен Тогда
		ИспользованиеПКО.ДокументСсылка_СтатистикаПерсонала_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_РегламентированныйОтчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИсточникиОтчета = Новый Массив;
	ИсточникиОтчета.Добавить("РегламентированныйОтчетРасчетПоСтраховымВзносам");
	ИсточникиОтчета.Добавить("РегламентированныйОтчет6НДФЛ");
	ИсточникиОтчета.Добавить("РегламентированныйОтчет6_НДФЛ");
	ИсточникиОтчета.Добавить("РегламентированныйОтчет4ФСС");
	ИсточникиОтчета.Добавить("РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников");
	ИспользоватьПравило = ИсточникиОтчета.Найти(ДанныеXDTO.ИсточникОтчета) <> Неопределено;
	
	ИспользованиеПКО.РегламентированныйОтчет_Получение = ИспользоватьПравило;
КонецПроцедуры
Процедура ПКО_РегламентированныйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	РегламентированныйОтчет_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
КонецПроцедуры
Процедура ПКО_РегламентированныйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	РегламентированныйОтчет_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Контрагенты
Процедура ПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ.Владелец) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_КлассификаторБанков_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("СВИФТБИК", ДанныеИБ.СВИФТБИК);
КонецПроцедуры
Процедура ПКО_КлассификаторБанков_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("СВИФТБИК") Тогда
		ПолученныеДанные.СВИФТБИК = ДанныеXDTO.КлючевыеСвойства.СВИФТБИК;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_КлассификаторБанков_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено
		И (НЕ ЗначениеЗаполнено(ПолученныеДанные.Код)
		ИЛИ (ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных())) Тогда
		
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВалютаДенежныхСредств", ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты());
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Прочая_справочная_информация
Процедура ПОД_Справочник_ВидыРаботСотрудников_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ВидыРаботСотрудников       = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ВидыРаботСотрудниковГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПОД_Справочник_СпособыОтраженияЗарплатыВБухУчете_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СпособыОтраженияЗарплатыВБухУчете		= Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СпособыОтраженияЗарплатыВБухУчетеГруппа	= ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
Процедура ПКО_Справочник_ВидыДокументовФизическихЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВидДокументаИзКлассификатора = "";
	
	Если ДанныеИБ.Предопределенный
		И ЗначениеЗаполнено(ДанныеИБ.ИмяПредопределенныхДанных) Тогда
		ВидДокументаИзКлассификатора = ДанныеИБ.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДокументаИзКлассификатора", ВидДокументаИзКлассификатора);
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ПериодОтбор",         ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	ДанныеXDTO.Вставить("ВидДокументаОтбор",   ДанныеИБ.Отбор.ВидДокумента.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ТаблицаЗаписи.Колонки.Добавить("ФизическоеЛицо");
	
	Для Каждого СтрокаЗаписи Из ТаблицаЗаписи Цикл
		СтрокаЗаписи.ФизическоеЛицо = СтрокаЗаписи.Физлицо;
	КонецЦикла;
	
	ВерсияНиже110 = (СравнитьВерсии(КомпонентыОбмена.ВерсияФорматаОбмена, "1.10") < 0);
	Если Не ВерсияНиже110 Тогда
		ТаблицаЗаписи.Колонки.ЯвляетсяДокументомУдостоверяющимЛичность.Имя = "ЯвляетсяУдостоверяющимЛичность";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидДокументаОтбор", ДанныеXDTO.ВидДокументаОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПериодОтбор", ДанныеXDTO.ПериодОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицоОтбор", ДанныеXDTO.ФизическоеЛицоОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_ФизЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ФизическиеЛица_Получение");
	ПКО_ВидовДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ВидыДокументовФизическихЛиц");
	
	ФизЛицоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ФизическоеЛицоОтбор, 
				ПКО_ФизЛица, 
				"ПолучитьСсылку").Ссылка;
				
	ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ВидДокументаОтбор, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
		
	ПолученныеДанные.Отбор.Физлицо.Значение = ФизЛицоСсылка;
	ПолученныеДанные.Отбор.Физлицо.Использование = Истина;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ПолученныеДанные.Отбор.ВидДокумента.Значение = ВидДокумента;
		ПолученныеДанные.Отбор.ВидДокумента.Использование = Истина;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор) Тогда
		ПолученныеДанные.Отбор.Период.Значение = ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор;
		ПолученныеДанные.Отбор.Период.Использование = Истина;		
	КонецЕсли;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Физлицо = ФизЛицоСсылка;
			СтрокаЗаписи.ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.ВидДокумента, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
			СтрокаЗаписи.Период        = Строка.Период;
			СтрокаЗаписи.Серия         = Строка.Серия;
			СтрокаЗаписи.Номер         = Строка.Номер;
			СтрокаЗаписи.Представление = Строка.Представление;
			СтрокаЗаписи.ДатаВыдачи    = Строка.ДатаВыдачи;
			СтрокаЗаписи.СрокДействия  = Строка.СрокДействия;
			СтрокаЗаписи.КемВыдан      = Строка.КемВыдан;
			СтрокаЗаписи.КодПодразделения = Строка.КодПодразделения;
			Если СтрокаЗаписи.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
				СтрокаЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЗППроекты_КакБанковскиеСчета_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураСвойств = Неопределено;
	Если СтекВыгрузки.Количество() > 1 Тогда
		СтруктураСвойств = ДанныеXDTO;
	Иначе
		СтруктураСвойств = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗарплатныеПроекты.Банк КАК Банк,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК РасчетныйСчет,
	|	ЕСТЬNULL(ЗарплатныеПроекты.Банк.Код, """") КАК БИКБанка,
	|	ЕСТЬNULL(ЗарплатныеПроекты.Банк.ИНН, """") КАК ИННБанка,
	|	ЕСТЬNULL(ЗарплатныеПроекты.Банк.Наименование, """") КАК НаименованиеБанка
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВалютаСчета = ДанныеИБ.Валюта;
	Если Не ЗначениеЗаполнено(ВалютаСчета) Тогда
		ВалютаСчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	КонецЕсли;
	
	СтрокаНаименования = "";
	Если Выборка.Следующий() Тогда
		СтруктураСвойств.Вставить("Банк", Выборка.Банк);
		СтруктураСвойств.Вставить("НомерСчета", Выборка.РасчетныйСчет);
		
		СтруктураКонтрагент = Новый Структура;
		СтруктураКонтрагент.Вставить("Ссылка", Выборка.Банк);
		СтруктураКонтрагент.Вставить("ИНН", Выборка.ИННБанка);
		СтруктураКонтрагент.Вставить("Наименование", Выборка.НаименованиеБанка);
		СтруктураКонтрагент.Вставить("НаименованиеПолное", Выборка.НаименованиеБанка);
		СтруктураКонтрагент.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
		СтруктураСвойств.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", СтруктураКонтрагент, "Справочник_Контрагенты_ИзСтруктуры"));
		
		СтрокаНаименования = Прав(СокрЛП(Выборка.РасчетныйСчет), 4) 
			+ ?(Не ПустаяСтрока(Выборка.НаименованиеБанка), " в " + Выборка.НаименованиеБанка, "")
			+ " (" + Строка(ВалютаСчета) + ")";
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВалютаДенежныхСредств", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ВалютаСчета));
	ДанныеXDTO.Вставить("Наименование", СтрокаНаименования);
КонецПроцедуры
Процедура ПКО_Справочник_ЗППроекты_КакКонтрагенты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураСвойств = Неопределено;
	Если СтекВыгрузки.Количество() > 1 Тогда
		СтруктураСвойств = ДанныеXDTO;
	Иначе
		СтруктураСвойств = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	СтруктураСвойств.Вставить("Ссылка", ДанныеИБ.Банк);
	СтруктураСвойств.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторБанков.ИНН КАК ИНН,
	|	КлассификаторБанков.Наименование КАК Наименование,
	|	КлассификаторБанков.Наименование КАК НаименованиеПолное
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Банк);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураСвойств.Вставить("ИНН", Выборка.ИНН);
		СтруктураСвойств.Вставить("Наименование", Выборка.Наименование);
		СтруктураСвойств.Вставить("НаименованиеПолное", Выборка.НаименованиеПолное);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("ФизическоеЛицо", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФизическоеЛицо,"Справочник_ФизическиеЛица_Отправка"));
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФизическоеЛицо", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФизическоеЛицо,"Справочник_ФизическиеЛица_Отправка"));
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьФИОФизическихЛиц(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьГражданствоФизическихЛиц(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьКонтактнуюИнформациюОбъекта(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	ВыгрузитьДокументыФизическихЛиц(КомпонентыОбмена, ДанныеИБ);
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьКонтактнуюИнформацию(ПолученныеДанные, ДанныеXDTO, Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	
	Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДанныеФИО", ДанныеXDTO.ДанныеФИО);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьФИОФизическихЛиц(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры

#КонецОбласти
#Область Справочная_информация_Структура_предприятия
Процедура ПОД_Справочник_РегистрацииВНалоговомОргане_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ДанныеИБ.Владелец)
		Или Не ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.Владелец)
		Или Не ЗначениеЗаполнено(ДанныеИБ.Код)
		Или (Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеОбособленногоПодразделения)
		И Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеИФНС)) Тогда
		
		ИспользованиеПКО.Справочник_РегистрацииВНалоговомОргане = Ложь;
		
		ШаблонПредупреждения = НСтр("ru = 'Регистрация в налоговом органе %1 не может быть выгружена,
		|т.к. в ней имеются незаполненные обязательные реквизиты.'");
		ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ДанныеИБ.Ссылка);
		
		ПредупреждениеПриСинхронизации(КомпонентыОбмена, ДанныеИБ.Ссылка, ТекстПредупреждения);
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьКонтактнуюИнформациюОбъекта(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьКонтактнуюИнформацию(ПолученныеДанные, ДанныеXDTO, Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
КонецПроцедуры
Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Организации_Отправка"));
	Если Не ЗначениеЗаполнено(ДанныеИБ.НаименованиеОбособленногоПодразделения) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеОбособленногоПодразделения", ДанныеИБ.НаименованиеИФНС);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеОбособленногоПодразделения", ДанныеИБ.НаименованиеОбособленногоПодразделения);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.Организация, "Справочник_Организации_Получение"));
КонецПроцедуры

#КонецОбласти
#Область НастройкиОрганизаций
Процедура ПКО_НастройкиРасчетаРезервовОтпусков_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Период",      ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ДанныеИБ.Отбор.Организация.Значение);
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	ДанныеXDTO.Вставить("НастройкиРасчета", ТаблицаЗаписи);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область Алгоритмы


Процедура ВедомостьНаВыплатуЗарплаты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияНиже110 = (СравнитьВерсии(КомпонентыОбмена.ВерсияФорматаОбмена, "1.10") < 0);
	
	Если ВерсияНиже110 Тогда
		ВзысканныеСуммы = Новый ТаблицаЗначений;
		ВзысканныеСуммы.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
		ВзысканныеСуммы.Колонки.Добавить("ВзысканнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Иначе
		ДанныеXDTO.Вставить("Комментарий", ДанныеИБ.Комментарий);
	КонецЕсли;
	
	Зарплата = ДанныеИБ.Состав.Выгрузить();
	Зарплата.Колонки.ИдентификаторСтроки.Имя = "ИдентификаторСтрокиУИ";
	Зарплата.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	Зарплата.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	КВыплате = ДанныеИБ.Зарплата.Выгрузить();
	Отбор = Новый Структура("ИдентификаторСтроки");
	КВыплате.Индексы.Добавить("ИдентификаторСтроки");
	
	Для каждого СтрокаТЗ Из Зарплата Цикл
		Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиУИ;
		СтрокаТЗ.ИдентификаторСтроки = Строка(СтрокаТЗ.ИдентификаторСтрокиУИ);
		НайденныеСтроки = КВыплате.НайтиСтроки(Отбор);
		Для каждого СтрокаКВыплате Из НайденныеСтроки Цикл
			СтрокаТЗ.Сумма = СтрокаТЗ.Сумма + СтрокаКВыплате.КВыплате;
		КонецЦикла;
		Если ВерсияНиже110 Тогда
			ЗаполнитьЗначенияСвойств(ВзысканныеСуммы.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Зарплата", Зарплата);
	
	ПередаватьВзысканныеСуммы = Ложь;
	Если ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением") Тогда
		ДанныеXDTO.Вставить("СпособВыплаты", "ПеречислениемНаСчета");
		ПередаватьВзысканныеСуммы = Истина;
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ДанныеXDTO.Вставить("СпособВыплаты", "ЧерезБанк");
		ПередаватьВзысканныеСуммы = Истина;
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком") Тогда
		ДанныеXDTO.Вставить("СпособВыплаты", "ЧерезРаздатчика");
	Иначе
		ДанныеXDTO.Вставить("СпособВыплаты", "ЧерезКассу");
	КонецЕсли;
	
	Если ВерсияНиже110 И ПередаватьВзысканныеСуммы Тогда
		Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда
			ДополнительныеДанные = ДанныеXDTO.AdditionalInfo;
		Иначе
			ДополнительныеДанные = Новый Структура;
		КонецЕсли;
		ДополнительныеДанные.Вставить("ВзысканныеСуммы", ВзысканныеСуммы); 
		ДанныеXDTO.Вставить("AdditionalInfo", ДополнительныеДанные);
	КонецЕсли;
	
	НДФЛ = ДанныеИБ.НДФЛ.Выгрузить();
	Для каждого СтрокаТЗ Из НДФЛ Цикл
		СтрокаТЗ.Сумма = СтрокаТЗ.Сумма + СтрокаТЗ.СуммаСПревышения;
	КонецЦикла;
	НДФЛ.Свернуть("ФизическоеЛицо","Сумма");
	ДанныеXDTO.Вставить("НДФЛ", НДФЛ);
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтатьяРасходов) Тогда
		СпособРасчетовСФизическимиЛицами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СтатьяРасходов, "СпособРасчетовСФизическимиЛицами");
		Если ЗначениеЗаполнено(СпособРасчетовСФизическимиЛицами) Тогда
			СпособРасчетов = ОбщегоНазначения.ИмяЗначенияПеречисления(СпособРасчетовСФизическимиЛицами);
		Иначе
			СпособРасчетов = "";
		КонецЕсли;
	Иначе
		СпособРасчетов = "";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СпособРасчетов", СпособРасчетов);
КонецПроцедуры
Процедура ВедомостьПрочихДоходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияНиже110 = (СравнитьВерсии(КомпонентыОбмена.ВерсияФорматаОбмена, "1.10") < 0);
	
	Если ВерсияНиже110 Тогда
		ВзысканныеСуммы = Новый ТаблицаЗначений;
		ВзысканныеСуммы.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
		ВзысканныеСуммы.Колонки.Добавить("ВзысканнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Иначе
		ДанныеXDTO.Вставить("Комментарий", ДанныеИБ.Комментарий);
	КонецЕсли;
	
	Зарплата = ДанныеИБ.Состав.Выгрузить();
	Зарплата.Колонки.ИдентификаторСтроки.Имя = "ИдентификаторСтрокиУИ";
	Зарплата.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	Зарплата.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	КВыплате = ДанныеИБ.Выплаты.Выгрузить();
	Отбор = Новый Структура("ИдентификаторСтроки");
	КВыплате.Индексы.Добавить("ИдентификаторСтроки");
	
	Для каждого СтрокаТЗ Из Зарплата Цикл
		Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтрокиУИ;
		СтрокаТЗ.ИдентификаторСтроки = Строка(СтрокаТЗ.ИдентификаторСтрокиУИ);
		НайденныеСтроки = КВыплате.НайтиСтроки(Отбор);
		Для каждого СтрокаКВыплате Из НайденныеСтроки Цикл
			СтрокаТЗ.Сумма = СтрокаТЗ.Сумма + СтрокаКВыплате.КВыплате;
		КонецЦикла;
		Если ВерсияНиже110 Тогда
			ЗаполнитьЗначенияСвойств(ВзысканныеСуммы.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Зарплата", Зарплата);
	
	ПередаватьВзысканныеСуммы = Ложь;
	Если ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ВедомостьПрочихДоходовПеречислением") Тогда
		ПередаватьВзысканныеСуммы = Истина;
		ДанныеXDTO.Вставить("СпособВыплаты", "ПеречислениемНаСчета");
	ИначеЕсли ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ВедомостьПрочихДоходовВБанк") Тогда
		ПередаватьВзысканныеСуммы = Истина;
		ДанныеXDTO.Вставить("СпособВыплаты", "ЧерезБанк");
	Иначе
		ДанныеXDTO.Вставить("СпособВыплаты", "ЧерезКассу");
	КонецЕсли;
	
	Если ВерсияНиже110 И ПередаватьВзысканныеСуммы Тогда
		Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда
			ДополнительныеДанные = ДанныеXDTO.AdditionalInfo;
		Иначе
			ДополнительныеДанные = Новый Структура;
		КонецЕсли;
		ДополнительныеДанные.Вставить("ВзысканныеСуммы", ВзысканныеСуммы); 
		ДанныеXDTO.Вставить("AdditionalInfo", ДополнительныеДанные);
	КонецЕсли;
	
	НДФЛ = ДанныеИБ.НДФЛ.Выгрузить();
	Для каждого СтрокаТЗ Из НДФЛ Цикл
		СтрокаТЗ.Сумма = СтрокаТЗ.Сумма + СтрокаТЗ.СуммаСПревышения;
	КонецЦикла;
	НДФЛ.Свернуть("ФизическоеЛицо","Сумма");
	ДанныеXDTO.Вставить("НДФЛ", НДФЛ);
	
	СпособРасчетов = "";
	Если ДанныеИБ.СпособВыплаты = Перечисления.СпособыВыплатыПрочихДоходов.ВыплатаПрочихДоходов
		Или ДанныеИБ.СпособВыплаты = Перечисления.СпособыВыплатыПрочихДоходов.ВыплатыБывшимСотрудникам Тогда
		СпособРасчетов = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами);
	ИначеЕсли ДанныеИБ.СпособВыплаты = Перечисления.СпособыВыплатыПрочихДоходов.ДивидендыСотрудникам Тогда
		СпособРасчетов = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда);
	ИначеЕсли ДанныеИБ.СпособВыплаты = Перечисления.СпособыВыплатыПрочихДоходов.Дивиденды Тогда
		СпособРасчетов = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СпособРасчетов", СпособРасчетов);
КонецПроцедуры
Функция ВидДокументаСдельныеРаботы(КомпонентыОбмена, ОрганизацияСсылка)
	Результат = Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты.ПустаяСсылка();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.Ссылка КАК ВидДокумента,
	|	ВЫБОР
	|		КОГДА ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = &Организация
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ШаблоныВводаИсходныхДанных КАК Таблица_ШаблоныВводаИсходныхДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументовВводДанныхДляРасчетаЗарплаты
	|		ПО (Таблица_ШаблоныВводаИсходныхДанных.Шаблон = ВидыДокументовВводДанныхДляРасчетаЗарплаты.Ссылка)
	|ГДЕ
	|	Таблица_ШаблоныВводаИсходныхДанных.Ссылка = &УзелОбмена
	|	И (ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = &Организация
	|			ИЛИ ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = &Организация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументовВводДанныхДляРасчетаЗарплаты
	|ГДЕ
	|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВидыРаботЗаполняютсяВДокументе
	|	И НЕ ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВыполненныеРаботыРаспределяютсяПоСотрудникам
	|	И НЕ ВидыДокументовВводДанныхДляРасчетаЗарплаты.ВыполненныеРаботыВводятсяСводно
	|	И НЕ ВидыДокументовВводДанныхДляРасчетаЗарплаты.ПометкаУдаления
	|	И (ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = &Организация
	|			ИЛИ ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ");
	Запрос.УстановитьПараметр("УзелОбмена", КомпонентыОбмена.УзелКорреспондента);
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ВидДокумента;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ)
	ТекВидКИ = Неопределено;
		
	ПрефиксПользовательскойКИ = "ПользовательскаяКИ";
			
	Если СтрНачинаетсяС(ВидКИСтрокой, ПрефиксПользовательскойКИ) Тогда
	
		ИмяТипаКИ = СтрЗаменить(ВидКИСтрокой, ПрефиксПользовательскойКИ, "");
	
		ТекВидКИ  = ВидПользовательскойКонтактнойИнформации(НаименованиеКИ,
			ГруппаВидовКИ,
			Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ]);
		
	Иначе
	
		СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
		
		Если ГруппаВидовКИ = СправочникВидыКИ.СправочникОрганизации Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = СправочникВидыКИ.EmailОрганизации;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ПочтовыйАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ФактАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.ЮрАдресОрганизации;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонОрганизации;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = СправочникВидыКИ.ФаксОрганизации;
			КонецЕсли;
		ИначеЕсли ГруппаВидовКИ = СправочникВидыКИ.СправочникФизическиеЛица Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = СправочникВидыКИ.EMailФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.АдресДляИнформированияФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.АдресМестаПроживанияФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = СправочникВидыКИ.АдресПоПропискеФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонМобильныйФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонДомашнийФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				ТекВидКИ = СправочникВидыКИ.ТелефонРабочийФизическиеЛица;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекВидКИ;
КонецФункции
Функция ВидПользовательскойКонтактнойИнформации(НаименованиеКИ, ГруппаВидовКИ, ТипКИ)
	ТекВидКИ = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В ИЕРАРХИИ(&ГруппаВидовКИ)
	|	И ВидыКонтактнойИнформации.Наименование = &Наименование
	|	И ВидыКонтактнойИнформации.Тип = &ТипКИ
	|	И ВидыКонтактнойИнформации.Используется = ИСТИНА
	|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ");
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Наименование",  НаименованиеКИ);
	Запрос.УстановитьПараметр("ТипКИ",         ТипКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекВидКИ = Выборка.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекВидКИ) Тогда
		ТекВидКИ = НовыйВидКонтактнойИнформации(НаименованиеКИ, ГруппаВидовКИ, ТипКИ);
	КонецЕсли;
	
	Возврат ТекВидКИ;
КонецФункции
Процедура ВыгрузитьГражданствоФизическихЛиц(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГражданствоФизическихЛиц.Период КАК НачалоПериода,
	|	ГражданствоФизическихЛиц.Страна КАК Страна,
	|	ГражданствоФизическихЛиц.ИНН КАК ИНН
	|ИЗ
	|	РегистрСведений.ГражданствоФизическихЛиц КАК ГражданствоФизическихЛиц
	|ГДЕ
	|	ГражданствоФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДанныеXDTO.Вставить("Гражданство", РезультатЗапроса.Выгрузить());
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьДокументыФизическихЛиц(КомпонентыОбмена, ДанныеИБ)
	НаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Физлицо.Установить(ДанныеИБ.Ссылка);
	НаборЗаписей.Прочитать();
	ВременнаяТаблица = НаборЗаписей.Выгрузить();
	Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
		Если СтрокаТЗ.ЯвляетсяДокументомУдостоверяющимЛичность Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Физлицо.Установить(СтрокаТЗ.Физлицо);
			НаборЗаписей.Отбор.ВидДокумента.Установить(СтрокаТЗ.ВидДокумента);
			НаборЗаписей.Отбор.Период.Установить(СтрокаТЗ.Период);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТЗ);
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ВыгрузитьКонтактнуюИнформациюОбъекта(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ Из ДанныеИБ.КонтактнаяИнформация Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование, Предопределенный, ХранитьИсториюИзменений");
		Если СвойстваВидаКИ.ХранитьИсториюИзменений = Истина Тогда
			НайденныеСтроки = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИ.Вид));
			Если НайденныеСтроки.Количество() > 1 Тогда
				АктуальнаяВерсия = Истина;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока <> СтрокаКИ И НайденнаяСтрока.ДействуетС > СтрокаКИ.ДействуетС Тогда
						АктуальнаяВерсия = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не АктуальнаяВерсия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначенияПолей) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
		СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
	
		// Проверим возможность конвертации значения с помощью ПКПД.
		ВидКИСтрокой = Неопределено;
		ПравилаКонвертацииПредопределенныхДанных = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных;
		ПравилоКонвертации = ПравилаКонвертацииПредопределенныхДанных.Найти("ВидыКИ_Отправка", "ИмяПКПД");
		Если НЕ ПравилоКонвертации = Неопределено Тогда
			ВидКИСтрокой = ПравилоКонвертации.КонвертацииЗначенийПриОтправке.Получить(СтрокаКИ.Вид);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВидКИСтрокой) Тогда
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
	
			ВидКИСтрокой = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		КонецЕсли;
		
		СтрокаТЗКИ.ВидКонтактнойИнформации = ВидКИСтрокой;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Процедура ВыгрузитьФИОФизическихЛиц(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизическихЛиц.Период КАК НачалоПериода,
	|	ФИОФизическихЛиц.Фамилия КАК Фамилия,
	|	ФИОФизическихЛиц.Имя КАК Имя,
	|	ФИОФизическихЛиц.Отчество КАК Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|ГДЕ
	|	ФИОФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
	КонецЕсли;
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Процедура ЗагрузитьКонтактнуюИнформацию(ПолученныеДанные, ДанныеXDTO, ГруппаВидовКИ)
	Если Не (ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация)) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		ВидКИСтрокой   = СокрЛП(СтрокаXDTO.ВидКонтактнойИнформации.Значение);
		НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
		
		ТекВидКИ = ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ);
		
		Если Не ЗначениеЗаполнено(ТекВидКИ) Тогда
			Продолжить;
		КонецЕсли;
	
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузитьФИОФизическихЛиц(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ)
	Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицо = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	
	НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ДанныеФИО Цикл
		НоваяЗапись = НаборЗаписейФИО.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаФИО);
		НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
		НоваяЗапись.Период = СтрокаФИО.НачалоПериода;
	КонецЦикла;
	НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
	НаборЗаписейФИО.Записать();
КонецПроцедуры
Процедура ЗаполнитьОбщиеДанныеЗаявкиНаРасходДС(КомпонентыОбмена, ДанныеXDTO)
	ДанныеXDTO.Вставить("Валюта", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты()));
	ДанныеXDTO.Вставить("Статус", "НеСогласована");
КонецПроцедуры
Процедура ЗаполнитьРасшифровкуПлатежа_НДФЛ(ДанныеИБ, ДанныеXDTO)
	// РасшифровкаПлатежа: Сумма
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	Для Каждого СтрокаТЧ Из ДанныеИБ.Ведомости Цикл
		Ведомость = СтрокаТЧ.Ведомость.ПолучитьОбъект();
		НДФЛ = Ведомость.НДФЛ.Выгрузить();
		НоваяСтрока.Сумма = НоваяСтрока.Сумма + НДФЛ.Итог("Сумма") + НДФЛ.Итог("СуммаСПревышения");
	КонецЦикла;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ЗаполнитьРасшифровкуПлатежаПоВедомости(ДанныеИБ, ДанныеXDTO)
	ВидВедомости = ДанныеИБ.Метаданные().ПолноеИмя();
	
	Если ВидВедомости = "Документ.ВедомостьНаВыплатуЗарплатыПеречислением" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.ФизическоеЛицо КАК Сотрудник,
		|	ВедомостьЗарплата.БанковскийСчет КАК БанковскийСчет,
		|	Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты,
		|	Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК Сумма
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК Ведомость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК ВедомостьЗарплата
		|		ПО (ВедомостьЗарплата.Ссылка = Ведомость.Ссылка)
		|ГДЕ
		|	Ведомость.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.ФизическоеЛицо,
		|	ВедомостьЗарплата.БанковскийСчет,
		|	Ведомость.Номер,
		|	Ведомость.Дата";
	ИначеЕсли ВидВедомости = "Документ.ВедомостьПрочихДоходовПеречислением" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.ФизическоеЛицо КАК Сотрудник,
		|	ВедомостьЗарплата.БанковскийСчет КАК БанковскийСчет,
		|	Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты,
		|	Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК Сумма
		|ИЗ
		|	Документ.ВедомостьПрочихДоходовПеречислением КАК Ведомость
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходовПеречислением.Выплаты КАК ВедомостьЗарплата
		|		ПО (ВедомостьЗарплата.Ссылка = Ведомость.Ссылка)
		|ГДЕ
		|	Ведомость.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.ФизическоеЛицо,
		|	ВедомостьЗарплата.БанковскийСчет,
		|	Ведомость.Номер,
		|	Ведомость.Дата";	
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Ведомость.СуммаПоДокументу КАК Сумма,
		|	Ведомость.Номер КАК НомерВедомостиНаВыплатуЗарплаты,
		|	Ведомость.Дата КАК ДатаВедомостиНаВыплатуЗарплаты
		|ИЗ
		|	&ДокументВедомостьНаВыплатуЗарплаты КАК Ведомость
		|ГДЕ
		|	Ведомость.Ссылка = &Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументВедомостьНаВыплатуЗарплаты", ВидВедомости);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
Процедура ЗаполнитьРасшифровкуПлатежаПоВедомости_НДФЛ(ДанныеИБ, ДанныеXDTO)
	ВидВедомости = ДанныеИБ.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(Ведомость_НДФЛ.Сумма + Ведомость_НДФЛ.СуммаСПревышения) КАК Сумма
	|ИЗ
	|	&ДокументВедомостьНаВыплатуЗарплаты_НДФЛ КАК Ведомость_НДФЛ
	|ГДЕ
	|	Ведомость_НДФЛ.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументВедомостьНаВыплатуЗарплаты_НДФЛ", ВидВедомости + ".НДФЛ");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
Функция ЗначениеВИнструкциюПКО(КомпонентыОбмена, Значение, ЭтоПростойТип = Ложь, ПравилоНайдено = Ложь)
	// Параметры:
	// КомпонентыОбмена - структура компонентов обмена в рамках текущего сеанса;
	// Значение - значение, которое необходимо поместить в свойство объекта XDTO;
	// ЭтоПростойТип - исходящий параметр. Указывает, является ли тип переданного значения примитивным (Число, Строка, Булево, Дата);
	// ПравилоНайдено - определяет, было ли найдено правило конвертации. Если правило найдено, но Результат = Неопределено, значит, было найдено более одного ПКО для значения.
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоОтправка		= (КомпонентыОбмена.НаправлениеОбмена = "Отправка");
	ЭтоПолучение	= (КомпонентыОбмена.НаправлениеОбмена = "Получение");
	
	ТипЗначенияСвойства = ТипЗнч(Значение);
	
	Если ЭтоПолучение
		И ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Ссылка") Тогда
		
		ТипЗначенияСвойства = Значение.Ссылка.ТипЗначенияXDTO;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("ИмяПКО") Тогда
		
		Возврат Новый Структура("Значение, ИмяПКО", Значение, Значение.ИмяПКО);
	КонецЕсли;
	
	Если ТипЗначенияСвойства = Тип("Число") 
		Или ТипЗначенияСвойства = Тип("Строка")
		Или ТипЗначенияСвойства = Тип("Булево")
		Или ТипЗначенияСвойства = Тип("Дата") Тогда
		
		Результат = Значение;
		ЭтоПростойТип = Истина;
	Иначе
		СтрокиПКО = Новый Массив;
		
		Если ЭтоОтправка Тогда	
			СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипДанных", ТипЗначенияСвойства));
		КонецЕсли;
		
		Если ЭтоПолучение Тогда
			СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
		КонецЕсли;
	
		// Ищем только однозначное соответствие.
		// Если правил будет найдено больше одного, считаем, что конвертация не выполнена.
		ЭтоГруппа = Неопределено;
				
		Для Каждого СтрокаПКО Из СтрокиПКО Цикл
			Если ЭтоОтправка Тогда
				Если СтрокаПКО.ЭтоСправочник Тогда
					Если ЭтоГруппа = Неопределено
						И СтрокаПКО.ОбъектДанных.Иерархический
						И СтрокаПКО.ОбъектДанных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
						ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "ЭтоГруппа");
					Иначе
						ЭтоГруппа = Ложь;
					КонецЕсли;
					
					Если ЭтоГруппа
							И Не СтрокаПКО.ПравилоДляГруппыСправочника
						Или Не ЭтоГруппа
							И СтрокаПКО.ПравилоДляГруппыСправочника Тогда
						
						Продолжить;					
					КонецЕсли;			
				Иначе
					// Прочие варианты проверок						
				КонецЕсли;
			КонецЕсли;
			
			Если ПравилоНайдено Тогда
				Результат = Неопределено;
				Прервать;
			Иначе
				Результат = Новый Структура("Значение, ИмяПКО", Значение, СтрокаПКО.ИмяПКО);
				ПравилоНайдено = Истина;
			КонецЕсли;		
		КонецЦикла;			
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция МестоВСтруктуреПредприятия(Подразделение)
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Подразделение;
	Иначе
		ПодразделениеПоУмолчанию = Новый Структура("Наименование", "Подразделение по умолчанию");
		Возврат Новый Структура("Значение, ИмяПКО",
			ПодразделениеПоУмолчанию, "Справочник_СтруктураПредприятия_ИзСтруктуры");
	КонецЕсли;
КонецФункции
Процедура НачислениеОценочныхОбязательств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОценочныеОбязательства = ДанныеИБ.ОценочныеОбязательства.Выгрузить();
	ОценочныеОбязательства.Колонки.Подразделение.Имя = "ПодразделениеРегламентированногоУчета";
	ОценочныеОбязательства.Колонки.Добавить("Подразделение");
	ОценочныеОбязательства.Колонки.СпособОтраженияЗарплатыВБухучете.Имя = "СпособОтраженияЗарплатыВФинансовомУчете";
	Для каждого СтрокаТЗ Из ОценочныеОбязательства Цикл
		СтрокаТЗ.Подразделение = МестоВСтруктуреПредприятия(СтрокаТЗ.МестоВСтруктуреПредприятия);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ОценочныеОбязательства", ОценочныеОбязательства);
КонецПроцедуры
Функция НовыйВидКонтактнойИнформации(Наименование, Родитель, ТипКИ)
	ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
	ВидКИОбъект.Родитель     = Родитель;
	ВидКИОбъект.Наименование = Наименование;
	ВидКИОбъект.Тип          = ТипКИ;
	ВидКИОбъект.Используется = Истина;
	ВидКИОбъект.Записать();
	
	Возврат ВидКИОбъект.Ссылка;
КонецФункции
Процедура ОтложеннаяОбработка_ДанныеДляРасчетаЗарплаты(КомпонентыОбмена, Объект)
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Объект.ВидДокумента = ВидДокументаСдельныеРаботы(КомпонентыОбмена, Объект.Организация);
	КонецЕсли;
	
	Расценки = Объект.ВыполненныеРаботы.Выгрузить();
	Расценки.Свернуть("ВидРабот, Расценка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Расценки.ВидРабот,
	|	Расценки.Расценка
	|ПОМЕСТИТЬ РасценкиВДокументе
	|ИЗ
	|	&Расценки КАК Расценки
	|ГДЕ
	|	Расценки.Расценка > 0
	|;
	|ВЫБРАТЬ
	|	&Дата КАК Период,
	|	РасценкиВДокументе.ВидРабот КАК ВидРабот,
	|	РасценкиВДокументе.Расценка КАК Расценка
	|ИЗ
	|	РасценкиВДокументе КАК РасценкиВДокументе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасценкиРаботСотрудников.СрезПоследних(&Дата, ) КАК РасценкиРаботСотрудниковСрезПоследних
	|		ПО РасценкиРаботСотрудниковСрезПоследних.ВидРабот = РасценкиВДокументе.ВидРабот
	|ГДЕ
	|	РасценкиВДокументе.Расценка <> ЕСТЬNULL(РасценкиРаботСотрудниковСрезПоследних.Расценка, 0)");
	Запрос.УстановитьПараметр("Расценки", Расценки);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.РасценкиРаботСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидРабот.Установить(Выборка.ВидРабот);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
КонецПроцедуры
Процедура ОтражениеЗарплатыВБухучете_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСтатьяРасходовСпособРасчетов = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиРасходовЗарплата.Ссылка КАК Ссылка,
	|	СтатьиРасходовЗарплата.СпособРасчетовСФизическимиЛицами КАК СпособРасчетовСФизическимиЛицами
	|ИЗ
	|	Справочник.СтатьиРасходовЗарплата КАК СтатьиРасходовЗарплата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.СпособРасчетовСФизическимиЛицами) Тогда
			СпособРасчетов = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.СпособРасчетовСФизическимиЛицами)
		Иначе
			СпособРасчетов = "";
		КонецЕсли;
		СоответствиеСтатьяРасходовСпособРасчетов.Вставить(Выборка.Ссылка, СпособРасчетов);
	КонецЦикла;
	СоответствиеСтатьяРасходовСпособРасчетов.Вставить(Справочники.СтатьиРасходовЗарплата.ПустаяСсылка(), "");
	
	НачисленияВзносы = Новый ТаблицаЗначений;
	НачисленияВзносы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияВзносы.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	НачисленияВзносы.Колонки.Добавить("ПодразделениеРегламентированногоУчета", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НачисленияВзносы.Колонки.Добавить("Подразделение");
	НачисленияВзносы.Колонки.Добавить("СпособОтраженияЗарплатыВФинансовомУчете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	НачисленияВзносы.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	НачисленияВзносы.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("Строка"));
	НачисленияВзносы.Колонки.Добавить("ВидНачисленияОплатыТрудаДляНУ", Новый ОписаниеТипов("Строка"));
	НачисленияВзносы.Колонки.Добавить("ПериодПринятияРасходов", Новый ОписаниеТипов("Дата"));
	НачисленияВзносы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРДоПредельнойВеличины", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРНаДоплатуЛетчикам", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРНаДоплатуШахтерам", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРНакопительная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРПоСуммарномуТарифу", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРСПревышения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ПФРСтраховая", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ТФОМС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ФСС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	НачисленияВзносы.Колонки.Добавить("ФФОМС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ТаблицаНДФЛ = Новый ТаблицаЗначений;
	ТаблицаНДФЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаНДФЛ.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("ОКТМО", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("ОКАТО", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("НалоговыйОрган", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаНДФЛ.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Удержания.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	Удержания.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("Строка"));
	Удержания.Колонки.Добавить("ПодразделениеРегламентированногоУчета", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Удержания.Колонки.Добавить("Подразделение");
	Удержания.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Удержания.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Удержания.Колонки.Добавить("ОписаниеУдержанияДляЧека", Новый ОписаниеТипов("Строка"));
	Удержания.Колонки.Добавить("ЯвляетсяОснованиемОформленияКассовогоЧека", Новый ОписаниеТипов("Булево"));
	
	ЭтоОбменБП3 = КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменЗУПБП";
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ДанныеДляФормированияПроводокОтправлятьСводно Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ВидыОперацийИсключения = Новый Массив;
		ВидыОперацийИсключения.Добавить(Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам);
		ВидыОперацийИсключения.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов);
		ВидыОперацийИсключения.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом);
		Запрос.УстановитьПараметр("ВидыОперацийИсключения", ВидыОперацийИсключения);
		
		ВидыОперацийИсключенияНДФЛ = Новый Массив;
		ВидыОперацийИсключенияНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками);
		ВидыОперацийИсключенияНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов);
		ВидыОперацийИсключенияНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом);
		Запрос.УстановитьПараметр("ВидыОперацийИсключенияНДФЛ", ВидыОперацийИсключенияНДФЛ);
		
		ВидыОперацийИсключенияУдержания = Новый Массив;
		ВидыОперацийИсключенияУдержания.Добавить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты);
		ВидыОперацийИсключенияУдержания.Добавить(Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты);
		ВидыОперацийИсключенияУдержания.Добавить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм);
		ВидыОперацийИсключенияУдержания.Добавить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками);
		ВидыОперацийИсключенияУдержания.Добавить(Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба);
		ВидыОперацийИсключенияУдержания.Добавить(Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму);
		ВидыОперацийИсключенияУдержания.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов);
		ВидыОперацийИсключенияУдержания.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму);
		Запрос.УстановитьПараметр("ВидыОперацийИсключенияУдержания", ВидыОперацийИсключенияУдержания);
		
		Запрос.УстановитьПараметр("СтатьяОплатаТруда", ОтражениеЗарплатыВБухучетеРасширенный.СтатьяОплатаТруда()); 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НачисленнаяЗарплатаИВзносы.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НачисленнаяЗарплатаИВзносы.ВидОперации В (&ВидыОперацийИсключения)
		|						ТОГДА НачисленнаяЗарплатаИВзносы.ФизическоеЛицо
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|				КОНЕЦ
		|		КОГДА НачисленнаяЗарплатаИВзносы.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ НачисленнаяЗарплатаИВзносы.ФизическоеЛицо
		|	КОНЕЦ КАК ФизическоеЛицо,
		|	НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
		|	НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
		|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	НачисленнаяЗарплатаИВзносы.СтатьяРасходов КАК СтатьяРасходов,
		|	НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
		|	НачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
		|	СУММА(НачисленнаяЗарплатаИВзносы.Сумма) КАК Сумма,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины) КАК ПФРДоПредельнойВеличины,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРСПревышения) КАК ПФРСПревышения,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРСтраховая) КАК ПФРСтраховая,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРНакопительная) КАК ПФРНакопительная,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ФСС) КАК ФСС,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ФФОМС) КАК ФФОМС,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ТФОМС) КАК ТФОМС,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
		|	СУММА(НачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка,
		|	ВЫБОР
		|		КОГДА НачисленнаяЗарплатаИВзносы.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НачисленнаяЗарплатаИВзносы.ВидОперации В (&ВидыОперацийИсключения)
		|						ТОГДА ФизическиеЛица.Наименование
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		КОГДА НачисленнаяЗарплатаИВзносы.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА """"
		|		ИНАЧЕ ФизическиеЛица.Наименование
		|	КОНЕЦ КАК ФизическоеЛицоНаименование,
		|	ЕСТЬNULL(ПодразделенияОрганизаций.Наименование, """") КАК ПодразделениеНаименование,
		|	НачисленнаяЗарплатаИВзносы.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО НачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО НачисленнаяЗарплатаИВзносы.Подразделение = ПодразделенияОрганизаций.Ссылка
		|ГДЕ
		|	НачисленнаяЗарплатаИВзносы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленнаяЗарплатаИВзносы.Подразделение,
		|	НачисленнаяЗарплатаИВзносы.ВидОперации,
		|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете,
		|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД,
		|	НачисленнаяЗарплатаИВзносы.СтатьяРасходов,
		|	НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ,
		|	НачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов,
		|	ВЫБОР
		|		КОГДА НачисленнаяЗарплатаИВзносы.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НачисленнаяЗарплатаИВзносы.ВидОперации В (&ВидыОперацийИсключения)
		|						ТОГДА НачисленнаяЗарплатаИВзносы.ФизическоеЛицо
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|				КОНЕЦ
		|		КОГДА НачисленнаяЗарплатаИВзносы.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ НачисленнаяЗарплатаИВзносы.ФизическоеЛицо
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НачисленнаяЗарплатаИВзносы.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НачисленнаяЗарплатаИВзносы.ВидОперации В (&ВидыОперацийИсключения)
		|						ТОГДА ФизическиеЛица.Наименование
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		КОГДА НачисленнаяЗарплатаИВзносы.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА """"
		|		ИНАЧЕ ФизическиеЛица.Наименование
		|	КОНЕЦ,
		|	НачисленнаяЗарплатаИВзносы.МестоВСтруктуреПредприятия,
		|	ЕСТЬNULL(ПодразделенияОрганизаций.Наименование, """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицоНаименование,
		|	ПодразделениеНаименование,
		|	ВидОперации,
		|	СтатьяРасходов,
		|	СпособОтраженияЗарплатыВБухучете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НДФЛ.ВидОперации В (&ВидыОперацийИсключенияНДФЛ)
		|						ТОГДА НДФЛ.ФизическоеЛицо
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|				КОНЕЦ
		|		КОГДА НДФЛ.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ НДФЛ.ФизическоеЛицо
		|	КОНЕЦ КАК ФизическоеЛицо,
		|	НДФЛ.ВидОперации КАК ВидОперации,
		|	НДФЛ.СтатьяРасходов КАК СтатьяРасходов,
		|	НДФЛ.КодПоОКАТО КАК КодПоОКАТО,
		|	НДФЛ.КодПоОКТМО КАК КодПоОКТМО,
		|	НДФЛ.КПП КАК КПП,
		|	НДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	СУММА(НДФЛ.Сумма) КАК Сумма,
		|	ВЫБОР
		|		КОГДА НДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НДФЛ.ВидОперации В (&ВидыОперацийИсключенияНДФЛ)
		|						ТОГДА ФизическиеЛица.Наименование
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		КОГДА НДФЛ.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА """"
		|		ИНАЧЕ ФизическиеЛица.Наименование
		|	КОНЕЦ КАК ФизическоеЛицоНаименование
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК НДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО НДФЛ.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	НДФЛ.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛ.СтатьяРасходов,
		|	НДФЛ.КПП,
		|	НДФЛ.ВидОперации,
		|	НДФЛ.КодПоОКАТО,
		|	НДФЛ.КодПоОКТМО,
		|	НДФЛ.КодНалоговогоОргана,
		|	ВЫБОР
		|		КОГДА НДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НДФЛ.ВидОперации В (&ВидыОперацийИсключенияНДФЛ)
		|						ТОГДА НДФЛ.ФизическоеЛицо
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|				КОНЕЦ
		|		КОГДА НДФЛ.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ НДФЛ.ФизическоеЛицо
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НДФЛ.ВидОперации В (&ВидыОперацийИсключенияНДФЛ)
		|						ТОГДА ФизическиеЛица.Наименование
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		КОГДА НДФЛ.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА """"
		|		ИНАЧЕ ФизическиеЛица.Наименование
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицоНаименование,
		|	ВидОперации,
		|	СтатьяРасходов,
		|	КодПоОКТМО,
		|	КПП,
		|	КодНалоговогоОргана
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА УдержаннаяЗарплата.ВидОперации В (&ВидыОперацийИсключенияУдержания)
		|				ИЛИ УдержаннаяЗарплата.ЯвляетсяОснованиемОформленияКассовогоЧека
		|			ТОГДА УдержаннаяЗарплата.ФизическоеЛицо
		|		КОГДА УдержаннаяЗарплата.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|				ИЛИ УдержаннаяЗарплата.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ УдержаннаяЗарплата.ФизическоеЛицо
		|	КОНЕЦ КАК ФизическоеЛицо,
		|	УдержаннаяЗарплата.Подразделение КАК Подразделение,
		|	УдержаннаяЗарплата.ВидОперации КАК ВидОперации,
		|	УдержаннаяЗарплата.СтатьяРасходов КАК СтатьяРасходов,
		|	УдержаннаяЗарплата.Контрагент КАК Контрагент,
		|	СУММА(УдержаннаяЗарплата.Сумма) КАК Сумма,
		|	УдержаннаяЗарплата.ЯвляетсяОснованиемОформленияКассовогоЧека КАК ЯвляетсяОснованиемОформленияКассовогоЧека,
		|	УдержаннаяЗарплата.ОписаниеУдержанияДляЧека КАК ОписаниеУдержанияДляЧека,
		|	ВЫБОР
		|		КОГДА УдержаннаяЗарплата.ВидОперации В (&ВидыОперацийИсключенияУдержания)
		|				ИЛИ УдержаннаяЗарплата.ЯвляетсяОснованиемОформленияКассовогоЧека
		|			ТОГДА ФизическиеЛица.Наименование
		|		КОГДА УдержаннаяЗарплата.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|				ИЛИ УдержаннаяЗарплата.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА """"
		|		ИНАЧЕ ФизическиеЛица.Наименование
		|	КОНЕЦ КАК ФизическоеЛицоНаименование,
		|	ЕСТЬNULL(ПодразделенияОрганизаций.Наименование, """") КАК ПодразделениеНаименование,
		|	УдержаннаяЗарплата.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.УдержаннаяЗарплата КАК УдержаннаяЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО УдержаннаяЗарплата.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО УдержаннаяЗарплата.Подразделение = ПодразделенияОрганизаций.Ссылка
		|ГДЕ
		|	УдержаннаяЗарплата.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержаннаяЗарплата.Подразделение,
		|	УдержаннаяЗарплата.Контрагент,
		|	УдержаннаяЗарплата.ВидОперации,
		|	УдержаннаяЗарплата.СтатьяРасходов,
		|	УдержаннаяЗарплата.ЯвляетсяОснованиемОформленияКассовогоЧека,
		|	ВЫБОР
		|		КОГДА УдержаннаяЗарплата.ВидОперации В (&ВидыОперацийИсключенияУдержания)
		|				ИЛИ УдержаннаяЗарплата.ЯвляетсяОснованиемОформленияКассовогоЧека
		|			ТОГДА УдержаннаяЗарплата.ФизическоеЛицо
		|		КОГДА УдержаннаяЗарплата.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|				ИЛИ УдержаннаяЗарплата.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		ИНАЧЕ УдержаннаяЗарплата.ФизическоеЛицо
		|	КОНЕЦ,
		|	УдержаннаяЗарплата.ОписаниеУдержанияДляЧека,
		|	ВЫБОР
		|		КОГДА УдержаннаяЗарплата.ВидОперации В (&ВидыОперацийИсключенияУдержания)
		|				ИЛИ УдержаннаяЗарплата.ЯвляетсяОснованиемОформленияКассовогоЧека
		|			ТОГДА ФизическиеЛица.Наименование
		|		КОГДА УдержаннаяЗарплата.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|				ИЛИ УдержаннаяЗарплата.СтатьяРасходов = &СтатьяОплатаТруда
		|			ТОГДА """"
		|		ИНАЧЕ ФизическиеЛица.Наименование
		|	КОНЕЦ,
		|	УдержаннаяЗарплата.МестоВСтруктуреПредприятия,
		|	ЕСТЬNULL(ПодразделенияОрганизаций.Наименование, """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицоНаименование,
		|	ПодразделениеНаименование,
		|	ВидОперации,
		|	СтатьяРасходов,
		|	ЯвляетсяОснованиемОформленияКассовогоЧека,
		|	ОписаниеУдержанияДляЧека,
		|	Контрагент";
		
		Результаты = Запрос.ВыполнитьПакет();
		
		НачисленнаяЗарплатаИВзносы 	= Результаты[0].Выгрузить();
		НачисленныйНДФЛ 			= Результаты[1].Выгрузить();
		УдержаннаяЗарплата 			= Результаты[2].Выгрузить();
		
	Иначе
		
		НачисленнаяЗарплатаИВзносы 	= ДанныеИБ.НачисленнаяЗарплатаИВзносы.Выгрузить();
		НачисленныйНДФЛ 			= ДанныеИБ.НачисленныйНДФЛ.Выгрузить();
		УдержаннаяЗарплата 			= ДанныеИБ.УдержаннаяЗарплата.Выгрузить();
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из НачисленнаяЗарплатаИВзносы Цикл
		
		НоваяСтрока =  НачисленияВзносы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "ВидОперации,Подразделение,ВидНачисленияОплатыТрудаДляНУ");
		
		НоваяСтрока.ВидОперации 					= XMLСтрока(СтрокаТЧ.ВидОперации);
		НоваяСтрока.СпособРасчетов 					= СоответствиеСтатьяРасходовСпособРасчетов[СтрокаТЧ.СтатьяРасходов];
		НоваяСтрока.ВидНачисленияОплатыТрудаДляНУ 	= XMLСтрока(СтрокаТЧ.ВидНачисленияОплатыТрудаДляНУ);
		
		НоваяСтрока.ПодразделениеРегламентированногоУчета   = СтрокаТЧ.Подразделение;
		НоваяСтрока.СпособОтраженияЗарплатыВФинансовомУчете = СтрокаТЧ.СпособОтраженияЗарплатыВБухучете;
		
		НоваяСтрока.Подразделение = МестоВСтруктуреПредприятия(СтрокаТЧ.МестоВСтруктуреПредприятия);
		
	КонецЦикла;
	
	Если Не ЭтоОбменБП3 Тогда
		ОтражениеЗарплатыВБухучете.ЗаполнитьРегистрациюВНалоговомОрганеВКоллекцииСтрок(ДанныеИБ.Организация, ДанныеИБ.ПериодРегистрации, НачисленныйНДФЛ);
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из НачисленныйНДФЛ Цикл
		
		НоваяСтрока =  ТаблицаНДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "ВидОперации");
		
		НоваяСтрока.ВидОперации 	= XMLСтрока(СтрокаТЧ.ВидОперации);
		НоваяСтрока.СпособРасчетов 	= СоответствиеСтатьяРасходовСпособРасчетов[СтрокаТЧ.СтатьяРасходов];
		НоваяСтрока.НалоговыйОрган  = СтрокаТЧ.КодНалоговогоОргана;
		НоваяСтрока.ОКАТО = СтрокаТЧ.КодПоОКАТО;
		НоваяСтрока.ОКТМО = СтрокаТЧ.КодПоОКТМО;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из УдержаннаяЗарплата Цикл
		
		НоваяСтрока =  Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "ВидОперации,Подразделение");
		
		НоваяСтрока.ВидОперации 	= XMLСтрока(СтрокаТЧ.ВидОперации);
		НоваяСтрока.СпособРасчетов 	= СоответствиеСтатьяРасходовСпособРасчетов[СтрокаТЧ.СтатьяРасходов];
		НоваяСтрока.ПодразделениеРегламентированногоУчета   = СтрокаТЧ.Подразделение;
		
		НоваяСтрока.Подразделение = МестоВСтруктуреПредприятия(СтрокаТЧ.МестоВСтруктуреПредприятия);
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("НачисленнаяЗарплатаИВзносы", НачисленияВзносы);
	ДанныеXDTO.Вставить("НачисленныйНДФЛ", ТаблицаНДФЛ);
	ДанныеXDTO.Вставить("УдержаннаяЗарплата", Удержания);
КонецПроцедуры
Процедура ПредупреждениеПриСинхронизации(КомпонентыОбмена, ОбрабатываемыйОбъект, ТекстПредупреждения)
	УзелКорреспондента = Неопределено;
	ОбъектМетаданных   = Неопределено;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
	КонецЕсли;
	
	Если УзелКорреспондента <> Неопределено
		И Не УзелКорреспондента.Пустая() Тогда
		ОбъектМетаданных = УзелКорреспондента.Метаданные();
	КонецЕсли;
		
	КлючСообщенияЖурналаРегистрации = КомпонентыОбмена.КлючСообщенияЖурналаРегистрации;
	
	ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации,
		УровеньЖурналаРегистрации.Предупреждение,
		ОбъектМетаданных,
		ОбрабатываемыйОбъект,
		ТекстПредупреждения);
КонецПроцедуры
Процедура РегламентированныйОтчет_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Вид = Число(ДанныеXDTO.КлючевыеСвойства.ВидОтчета);
	ПолученныеДанные.НомерПачки = ДанныеXDTO.КлючевыеСвойства.НомерПачки - 1;
	
	БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Base64Значение(ПолучитьBase64СтрокуИзДвоичныхДанных(ДанныеXDTO.ДанныеОтчета)));
	ПотокВПамяти = Новый ПотокВПамяти(БуферДвоичныхДанных);
	ЧтениеТекста = Новый ЧтениеТекста(ПотокВПамяти);
	ПолученныеДанные.ДанныеОтчета = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеТекста.Прочитать());
	
	БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Base64Значение(ПолучитьBase64СтрокуИзДвоичныхДанных(ДанныеXDTO.ДеревоНастройкиСтраниц)));
	ПотокВПамяти = Новый ПотокВПамяти(БуферДвоичныхДанных);
	ЧтениеТекста = Новый ЧтениеТекста(ПотокВПамяти);
	ПолученныеДанные.ДеревоНастройкиСтраниц = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеТекста.Прочитать());
КонецПроцедуры
Процедура РегламентированныйОтчет_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерПачки", ДанныеИБ.НомерПачки+1);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидОтчета", XMLСтрока(ДанныеИБ.Вид));
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти);
	Текст.Записать(XMLСтрока(ДанныеИБ.ДанныеОтчета));
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	ДанныеXDTO.Вставить("ДанныеОтчета", СтрокаФорматBase64);
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти);
	Текст.Записать(XMLСтрока(ДанныеИБ.ДеревоНастройкиСтраниц));
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	ДанныеXDTO.Вставить("ДеревоНастройкиСтраниц", СтрокаФорматBase64);
КонецПроцедуры
Функция СравнитьВерсии(СтрокаВерсии1,СтрокаВерсии2)
	// Сравнить две строки версий.
	//
	// Параметры:
	//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.
	//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
	//
	// Возвращаемое значение:
	//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
	//
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Функция УправленческоеПодразделениеВедомостиНаВыплатуЗП(ДанныеИБ, ЭтоНДФЛ = Ложь, ЭтоВедомостьПрочихДоходов = Ложь)
	Подразделение = Неопределено;
	
	ВидВедомости = ДанныеИБ.Метаданные().ПолноеИмя();
	
	Если ЭтоНДФЛ И Не ЭтоВедомостьПрочихДоходов Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
		|ИЗ
		|	&ДокументВедомостьНаВыплату_НДФЛ КАК НДФЛ	
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = НДФЛ.Подразделение)
		|ГДЕ
		|	НДФЛ.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументВедомостьНаВыплату_НДФЛ", ВидВедомости + ".НДФЛ");
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Если Не Выборка.Подразделение.Пустая() Тогда
				Подразделение = Выборка.Подразделение;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не ЭтоВедомостьПрочихДоходов Тогда
		КадровыеДанныеТЧ = КадровыйУчет.КадровыеДанныеСотрудников(
			Ложь,
			ДанныеИБ.Зарплата.ВыгрузитьКолонку("Сотрудник"),
			"МестоВСтруктуреПредприятия",
			КонецМесяца(ДанныеИБ.ПериодРегистрации));
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.ФизическоеЛицо,
		|	Т.Сотрудник,
		|	Т.МестоВСтруктуреПредприятия
		|ПОМЕСТИТЬ КадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадровыеДанные.МестоВСтруктуреПредприятия, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		ИНАЧЕ КадровыеДанные.МестоВСтруктуреПредприятия
		|	КОНЕЦ КАК Подразделение
		|ИЗ
		|	&ДокументВедомостьНаВыплату_Зарплата КАК Зарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ КадровыеДанные КАК КадровыеДанные
		|		ПО (КадровыеДанные.Сотрудник = Зарплата.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = Зарплата.Подразделение)
		|ГДЕ
		|	Зарплата.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадровыеДанные.МестоВСтруктуреПредприятия, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		ИНАЧЕ КадровыеДанные.МестоВСтруктуреПредприятия
		|	КОНЕЦ";
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументВедомостьНаВыплату_Зарплата", ВидВедомости + ".Зарплата");
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанныеТЧ);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Если Не Выборка.Подразделение.Пустая() Тогда
				Подразделение = Выборка.Подразделение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Подразделение = Неопределено Тогда
		// Подразделение бухгалтера или расчетчика
		ФизЛицоДляПодразделения = Неопределено;
		
		Если Не ДанныеИБ.Бухгалтер.Пустая() Тогда
			ФизЛицоДляПодразделения = ДанныеИБ.Бухгалтер;
		Иначе
			ФизЛицоДляПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ответственный, "ФизическоеЛицо");
		КонецЕсли;
		
		СписокФизЛиц = Новый Массив;
		СписокФизЛиц.Добавить(ФизЛицоДляПодразделения);
		ТаблицаСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизЛиц, Ложь, ДанныеИБ.Организация, КонецМесяца(ДанныеИБ.ПериодРегистрации));
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
			Ложь,
			ТаблицаСотрудники.ВыгрузитьКолонку("Сотрудник"),
			"МестоВСтруктуреПредприятия, Подразделение",
			КонецМесяца(ДанныеИБ.ПериодРегистрации));
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ФизическоеЛицо,
		|	Т.Сотрудник,
		|	Т.Подразделение,
		|	Т.МестоВСтруктуреПредприятия
		|ПОМЕСТИТЬ КадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадровыеДанные.МестоВСтруктуреПредприятия, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		ИНАЧЕ КадровыеДанные.МестоВСтруктуреПредприятия
		|	КОНЕЦ КАК Подразделение
		|ИЗ
		|	КадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО (СтруктураПредприятия.Источник = КадровыеДанные.Подразделение)");
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()
			И Не Выборка.Подразделение.Пустая() Тогда
			Подразделение = Выборка.Подразделение;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Подразделение;
КонецФункции

#КонецОбласти
#КонецОбласти
