////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотКлиентСервер: клиент, сервер
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает представление типа объекта XDTO Документооборота по имени типа.
//
// Параметры:
//   ТипXDTO - Строка - имя типа объекта XDTO.
//
// Возвращаемое значение:
//   Строка - представление типа объекта XDTO Документооборота по имени типа.
//
Функция ПредставлениеТипаОбъектаXDTO(ТипXDTO) Экспорт
	
	ПредставленияТипов = Новый Соответствие;
	
	// Справочники.
	ПредставленияТипов.Вставить("DMParty", НСтр("ru='Контрагенты, Организации, Пользователи'"));
	ПредставленияТипов.Вставить("DMProject", НСтр("ru='Проекты'"));
	ПредставленияТипов.Вставить("DMProjectTask", НСтр("ru='Проектные задачи'"));
	ПредставленияТипов.Вставить("DMActivity", НСтр("ru='Мероприятия'"));
	ПредставленияТипов.Вставить("DMDiscussionTopic", НСтр("ru='Темы обсуждений'"));
	ПредставленияТипов.Вставить("DMDiscussionMessage", НСтр("ru='Сообщения обсуждений'"));
	ПредставленияТипов.Вставить("DMFile", НСтр("ru='Файлы'"));
	ПредставленияТипов.Вставить("DMFileFolder", НСтр("ru='Папки файлов'"));
	ПредставленияТипов.Вставить("DMUser", НСтр("ru='Пользователи'"));
	ПредставленияТипов.Вставить("DMUserGroup",  НСтр("ru='Группы пользователей'"));
	ПредставленияТипов.Вставить("DMActivityMatter", НСтр("ru='Вопросы деятельности'"));
	ПредставленияТипов.Вставить("DMCurrency",НСтр("ru='Валюты'"));
	ПредставленияТипов.Вставить("DMInternalDocument", НСтр("ru='Внутренние документы'"));
	ПредставленияТипов.Вставить("DMIncomingDocument", НСтр("ru='Входящие документы'"));
	ПредставленияТипов.Вставить("DMOutgoingDocument", НСтр("ru='Исходящие документы'"));
	ПредставленияТипов.Вставить("DMOrganization", НСтр("ru='Организации'"));
	ПредставленияТипов.Вставить("DMCorrespondent", НСтр("ru='Контрагенты'"));
	ПредставленияТипов.Вставить("DMContactPerson", НСтр("ru='Контактные лица'"));
	ПредставленияТипов.Вставить("DMAccessLevel", НСтр("ru='Грифы доступа'"));
	ПредставленияТипов.Вставить("DMDeliveryMethod", НСтр("ru='Способы доставки'"));
	ПредставленияТипов.Вставить("DMSubdivision", НСтр("ru='Структура предприятия'"));
	ПредставленияТипов.Вставить("DMInternalDocumentType", НСтр("ru='Виды внутренних документов'"));
	ПредставленияТипов.Вставить("DMIncomingDocumentType", НСтр("ru='Виды входящих документов'"));
	ПредставленияТипов.Вставить("DMOutgoingDocumentType", НСтр("ru='Виды исходящих документов'"));
	ПредставленияТипов.Вставить("DMWorkType", НСтр("ru='Виды работ'"));
	ПредставленияТипов.Вставить("DMInternalDocumentFolder", НСтр("ru='Папки внутренних документов'"));
	ПредставленияТипов.Вставить("DMRelationType", НСтр("ru='Типы связей'"));
	ПредставленияТипов.Вставить("DMObjectPropertyValue", НСтр("ru='Значения свойств объектов'"));
	ПредставленияТипов.Вставить("DMPrivatePerson", НСтр("ru='Физические лица'"));
	ПредставленияТипов.Вставить("DMRoutingCondition", НСтр("ru='Условия маршрутизации'"));
	ПредставленияТипов.Вставить("DMPersonalRecipient", НСтр("ru='Личные адресаты'"));
	ПредставленияТипов.Вставить("DMPersonalRecipientGroup", НСтр("ru='Группы личных адресатов'"));
	ПредставленияТипов.Вставить("DMBusinessProcessExecutorRole", НСтр("ru='Роли исполнителей'"));
	ПредставленияТипов.Вставить("DMCashFlowItem", НСтр("ru='Статьи движения денежных средств'"));
	ПредставленияТипов.Вставить("DMMeasurementUnit", НСтр("ru='Единицы измерения'"));
	ПредставленияТипов.Вставить("DMProduct", НСтр("ru='Товары и услуги'"));
	
	// Письма электронной почты.
	ПредставленияТипов.Вставить("DMIncomingEMail", НСтр("ru='Входящее письмо'"));
	ПредставленияТипов.Вставить("DMOutgoingEMail", НСтр("ru='Исходящее письмо'"));
	
	// Рабочие отчеты.
	ПредставленияТипов.Вставить("DMDailyReport", НСтр("ru='Ежедневный отчет'"));
	
	// Фактические трудозатраты.
	ПредставленияТипов.Вставить("DMActualWork", НСтр("ru='Фактические трудозатраты'"));
	
	// Используемые перечисления.
	ПредставленияТипов.Вставить("DMEMailAnswerType", НСтр("ru='Типы ответа'"));
	ПредставленияТипов.Вставить("DMIssueType", НСтр("ru='Виды вопросов выполнения задач'"));
	ПредставленияТипов.Вставить("DMProlongationProcedure", НСтр("ru='Порядок продления'"));
	ПредставленияТипов.Вставить("DMDocumentStatus", НСтр("ru='Состояния документов'"));
	ПредставленияТипов.Вставить("DMLegalPrivatePerson", НСтр("ru='Юридическое\физическое лицо'"));
	ПредставленияТипов.Вставить("DMApprovalType", НСтр("ru='Варианты маршрутизации задач'"));
	ПредставленияТипов.Вставить("DMTaskExecutionOrder", НСтр("ru='Порядок выполнения задач'"));
	ПредставленияТипов.Вставить("DMApprovalOrder", НСтр("ru='Порядок выполнения задач'"));
	ПредставленияТипов.Вставить("DMApprovalResult", НСтр("ru='Результаты согласования'"));
	ПредставленияТипов.Вставить("DMConfirmationResult", НСтр("ru='Результаты утверждения'"));
	ПредставленияТипов.Вставить("DMRegistrationResult", НСтр("ru='Результаты регистрации'"));
	ПредставленияТипов.Вставить("DMInvitationResult", НСтр("ru='Результаты приглашения'"));
	ПредставленияТипов.Вставить("DMGeneralInvitationResult", НСтр("ru='Общие результаты приглашения'"));
	ПредставленияТипов.Вставить("DMBusinessProcessState", НСтр("ru='Состояния бизнес процессов'"));
	ПредставленияТипов.Вставить("DMEMailImportance", НСтр("ru='Важность писем'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRoutingType", НСтр("ru='Варианты маршрутизации задач'"));
	ПредставленияТипов.Вставить("DMPredecessorsStageConsiderationCondition", НСтр("ru='Условия рассмотрения предшественников этапа'"));
	ПредставленияТипов.Вставить("DMBusinessProcessTaskImportance", НСтр("ru='Варианты важности задачи'"));
	ПредставленияТипов.Вставить("DMBusinessProcessImportance", НСтр("ru='Варианты важности задачи'"));
	ПредставленияТипов.Вставить("DMTimeInputMethod", НСтр("ru='Способы указания времени'"));
	ПредставленияТипов.Вставить("DMVATRate", НСтр("ru = 'Ставки НДС'"));
	
	ПредставленияТипов.Вставить("DMAdditionalProperty", НСтр("ru='Дополнительные реквизиты и сведения'"));
	
	// Шаблоны бизнес-процессов.
	ПредставленияТипов.Вставить("DMBusinessProcessOrderTemplate", НСтр("ru='Шаблоны поручения'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConsiderationTemplate", НСтр("ru='Шаблоны рассмотрения'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRegistrationTemplate", НСтр("ru='Шаблоны регистрации'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApprovalTemplate", НСтр("ru='Шаблоны согласования'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConfirmationTemplate", НСтр("ru='Шаблоны утверждения'"));
	ПредставленияТипов.Вставить("DMBusinessProcessPerformanceTemplate", НСтр("ru='Шаблоны исполнения'"));
	ПредставленияТипов.Вставить("DMBusinessProcessAcquaintanceTemplate", НСтр("ru='Шаблоны ознакомления'"));
	ПредставленияТипов.Вставить("DMCompoundBusinessProcessTemplate", НСтр("ru='Шаблоны составных бизнес процессов'"));
	
	// Бизнес-процессы.
	ПредставленияТипов.Вставить("DMBusinessProcessOrder", НСтр("ru='Поручение'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConsideration", НСтр("ru='Рассмотрение'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRegistration", НСтр("ru='Регистрация'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApproval", НСтр("ru='Согласование'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApproval_1.2.1.11", НСтр("ru='Согласование'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConfirmation", НСтр("ru='Утверждение'"));
	ПредставленияТипов.Вставить("DMBusinessProcessPerformance", НСтр("ru='Исполнение'"));
	ПредставленияТипов.Вставить("DMBusinessProcessPerformance_1.2.1.11", НСтр("ru='Исполнение'"));
	ПредставленияТипов.Вставить("DMBusinessProcessAcquaintance", НСтр("ru='Ознакомление'"));
	ПредставленияТипов.Вставить("DMBusinessProcessIssuesSolution", НСтр("ru='Решение вопросов выполнения задач'"));
	ПредставленияТипов.Вставить("DMBusinessProcessIncomingDocumentProcessing", НСтр("ru='Обработка входящего документа'"));
	ПредставленияТипов.Вставить("DMBusinessProcessInternalDocumentProcessing", НСтр("ru='Обработка внутреннего документа'"));
	ПредставленияТипов.Вставить("DMBusinessProcessOutgoingDocumentProcessing", НСтр("ru='Обработка исходящего документа'"));
	
	// Типизированные задачи.
	ПредставленияТипов.Вставить("DMBusinessProcessTask", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessOrderTaskCheckup", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApprovalTaskApproval", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessApprovalTaskCheckup", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConfirmationTaskConfirmation", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConfirmationTaskCheckup", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRegistrationTaskRegistration", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessRegistrationTaskCheckup", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessPerfomanceTaskCheckup", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessConsiderationTaskAcquaint", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessIssuesSolutionTaskQuestion", НСтр("ru='Задача исполнителя'"));
	ПредставленияТипов.Вставить("DMBusinessProcessIssuesSolutionTaskAnswer", НСтр("ru='Задача исполнителя'"));
	
	ПредставлениеТипа = ПредставленияТипов.Получить(ТипXDTO);
	
	Если ЗначениеЗаполнено(ПредставлениеТипа) Тогда
		Возврат ПредставлениеТипа;
	Иначе
		Возврат ТипXDTO;
	КонецЕсли;
	
КонецФункции

// Преобразует длительность интервала времени в строку вида час:мин.
//
// Параметры:
//   Длительность - Число - длительность интервала времени в секундах.
//   ПредставлениеНуля - Строка - представление интервала нулевой длительности.
//
// Возвращаемое значение:
//   Строка - представление интервала в виде час:мин.
//
Функция ЧислоВСтроку(Длительность, ПредставлениеНуля = "'") Экспорт
	
	Если Длительность = 0 Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;
	
	Час = Цел(Длительность / 3600);
	Мин = (Длительность - Час*3600) / 60;
	
	Возврат Формат(Час, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ":" + Формат(Мин, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
	
КонецФункции

// Преобразует строку вида час:мин в длительность интервала времени.
//
// Параметры:
//   ДлительностьСтр - Строка - представление интервала времени в виде строки час:мин.
//
// Возвращаемое значение:
//   Число - длительность интервала времени в секундах.
//
Функция ЧислоИзСтроки(ДлительностьСтр) Экспорт
	
	Если Не ЗначениеЗаполнено(ДлительностьСтр) Тогда
		Возврат 0;
	КонецЕсли;
	
	Поз = Найти(ДлительностьСтр, ":");
	Если Поз = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Час = Лев(ДлительностьСтр, Поз-1);
	Мин = Сред(ДлительностьСтр, Поз+1);
	
	Возврат Число(Час) * 3600 + Число(Мин) * 60;
	
КонецФункции

// Выполняет проверку строки на соответствие представлению интервала времени в виде час:мин.
//
// Параметры:
//   ДлительностьСтр - Строка - проверяемая строка. 
//
// Возвращаемое значение:
//   Булево - Истина, если переданная строка соответствует виду час:мин, и Ложь в противном случае.
//
Функция ПроверитьФормат(ДлительностьСтр) Экспорт
	
	Поз = Найти(ДлительностьСтр, ":");
	Если Поз = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЧасСтр = Лев(ДлительностьСтр, Поз-1);
	МинСтр = Сред(ДлительностьСтр, Поз+1);
	
	Если Не ЗначениеЗаполнено(ЧасСтр) Тогда
		ЧасСтр = "00";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(МинСтр) Тогда
		МинСтр = "00";
	КонецЕсли;
	
	Час = Число(ЧасСтр);
	Мин = Число(МинСтр);
	Если (Час >= 24) Или (Мин >= 60) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Час < 10 Тогда 
		ЧасСтр = "0" + Час;
	КонецЕсли;
	Если Мин < 10 Тогда 
		МинСтр = "0" + Мин;
	КонецЕсли;
	
	ДлительностьСтр = ЧасСтр + ":" + МинСтр;
	
	Возврат Истина;
	
КонецФункции

// Возвращает строку представления проекта и проектной задачи для одного поля.
//
// Параметры:
//   Проект - ЛюбаяСсылка, Строка - ссылка или строка представления проекта.
//   ПроектнаяЗадача - ЛюбаяСсылка, Строка - ссылка или строка представления проектной задачи.
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеПроектаЗадачи(Проект, ПроектнаяЗадача) Экспорт
	
	ПредставлениеПроектаЗадачи = "";
	
	Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
		
		ПредставлениеПроектаЗадачи = Строка(Проект) + " (" + Строка(ПроектнаяЗадача) + ")";
		
	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
		
		ПредставлениеПроектаЗадачи = Строка(Проект);
		
	КонецЕсли;
	
	Возврат ПредставлениеПроектаЗадачи;
	
КонецФункции

// Добавляет к Строке Разделитель и ДобавляемоеЗначение в случае, если Строка и
// ДобавляемоеЗначение не пустые. Если Строка пустая или ДобавляемоеЗначение
// не заполнено - то добавляет к Строке ДобавляемоеЗначение.
//
// Параметры:
//   ИсходнаяСтрока - Строка - Модифицируется в процедуре.
//   Разделитель - Строка - Разделитель.
//   ДобавляемоеЗначение - Строка - Добавляемое значение.
//
Процедура ДобавитьЗначениеКСтрокеЧерезРазделитель(ИсходнаяСтрока, Разделитель, ДобавляемоеЗначение) Экспорт
	
	Если ПустаяСтрока(ИсходнаяСтрока) Тогда
		ИсходнаяСтрока = Строка(ДобавляемоеЗначение);
	ИначеЕсли Не ПустаяСтрока(ДобавляемоеЗначение) Тогда
		ИсходнаяСтрока = Строка(ИсходнаяСтрока) + Разделитель + ДобавляемоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Разделяет пароль на две независимые части для последующего восстановления функцией СобратьПароль.
//
// Параметры:
//   Пароль - Строка - разделяемый пароль.
//
// Возвращаемое значение:
//   Массив из Строка - массив из двух строк, содержащих шестнадцатиричное представление пароля.
//
Функция РазделитьПароль(Пароль) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("");
	Результат.Добавить("");
	Генератор = Неопределено;
	
	// Разложим пароль в массив чисел попарно.
	МассивЧисел = Новый Массив;
	Индекс = 1;
	Пока Индекс <= СтрДлина(Пароль) Цикл
		Число = КодСимвола(Пароль, Индекс);
		Индекс = Индекс + 1;
		Если Индекс <= СтрДлина(Пароль) Тогда
			Число = Число * 65536 + КодСимвола(Пароль, Индекс);
			Индекс = Индекс + 1;
		КонецЕсли;
		МассивЧисел.Добавить(Число);
	КонецЦикла;
	
	// Разделим каждое из полученных чисел.
	Для Каждого Число Из МассивЧисел Цикл
		РазделенноеЧисло = РазделитьЧисло(Число, Генератор); // ((1, NNN), (2, MMM))
		Результат[0] = Результат[0] + ШестнадцатиричноеПредставлениеЧисла(РазделенноеЧисло[0][1], 8);
		Результат[1] = Результат[1] + ШестнадцатиричноеПредставлениеЧисла(РазделенноеЧисло[1][1], 8);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Собирает пароль из двух частей, ранее разделенных функцией РазделитьПароль.
// В случае повреждения строк возвращает Неопределено.
//
// Параметры:
//   РазделенныйПароль - Массив - две строки, содержащие разделенный пароль.
//
// Возвращаемое значение:
//   Строка - собранный пароль или
//   Неопределено - если строки повреждены.
//
Функция СобратьПароль(Знач РазделенныйПароль) Экспорт
	
	Если РазделенныйПароль.Количество() <> 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	РазделенныйПароль[0] = СокрЛП(РазделенныйПароль[0]);
	РазделенныйПароль[1] = СокрЛП(РазделенныйПароль[1]);
	Если СтрДлина(РазделенныйПароль[0]) <> СтрДлина(РазделенныйПароль[1]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если СтрДлина(РазделенныйПароль[0]) % 8 <> 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Результат = "";
	Чисел = Цел(СтрДлина(РазделенныйПароль[0])) / 8;
	Для НЧисла = 1 По Чисел Цикл
		РазделенноеЧисло = Новый Массив;
		Для НЧасти = 0 По 1 Цикл
			Пара = Новый Массив;
			Пара.Добавить(НЧасти + 1);
			Представление = Сред(РазделенныйПароль[НЧасти], 1 + (НЧисла - 1) * 8, 8);
			Пара.Добавить(ЧислоИзШестнадцатеричногоПредставления(Представление));
			РазделенноеЧисло.Добавить(Пара);
		КонецЦикла;
		СобранноеЧисло = СобратьЧисло(РазделенноеЧисло);
		Если СобранноеЧисло >= 65536 Тогда
			Результат = Результат + Символ(Цел(СобранноеЧисло / 65536));
		КонецЕсли;
		Результат = Результат + Символ(СобранноеЧисло % 65536);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку с размером файла в удобном для чтения формате с указанием количества байт.
//
// Параметры:
//   Размер - Число - размер файла в байтах.
//
// Возвращаемое значение:
//   Строка - размер файла в виде 123.4 Кб (123 456 байт)
//
Функция ПодробноеПредставлениеРазмера(Знач Размер) Экспорт
	
	Если Размер = 0 Тогда
		Возврат "-";
	КонецЕсли;
	
	ПредставлениеБайт = Формат(Размер, "ЧДЦ=; ЧРГ=' '; ЧГ=3,0") + " " + НСтр("ru = 'байт'");
	Возврат КраткоеПредставлениеРазмера(Размер) + " (" + ПредставлениеБайт + ")";

КонецФункции

// Возвращает строку с размером файла в кратком и удобном для чтения формате.
//
// Параметры:
//   Размер - Число - размер файла в байтах.
//
// Возвращаемое значение:
//   Строка - размер файла в виде 123.4 Кб
//
Функция КраткоеПредставлениеРазмера(Знач Размер) Экспорт
	
	Если Размер = 0 Тогда
		Возврат "-";
	ИначеЕсли Размер < 1024 * 10 Тогда // < 10 Кб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Кб'"),
			Формат(Макс(1, Окр(Размер / 1024, 1, 1)), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 Тогда // < 1 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Кб'"),
			Формат(Цел(Размер / 1024), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 * 10 Тогда // < 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Мб'"),
			Формат(Окр(Размер / 1024 / 1024, 1, 1), "ЧГ=0"));
	Иначе // >= 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Мб'"),
			Формат(Цел(Размер / 1024 / 1024), "ЧГ=0"));
	КонецЕсли;
	
КонецФункции

// Получает имя с расширением (если расширение пусто - только имя).
//
// Параметры:
//   ПолноеНаименование - Строка - полное наименование файла
//	 Расширение - Строка - расширение файла
//
// Возвращаемое значение:
//   Строка - Имя с расширением. Если расширение пусто - только имя.
//
Функция ИмяСРасширением(ПолноеНаименование, Расширение) Экспорт
	
	ИмяСРасширением = ПолноеНаименование;
	
	Если Расширение <> "" Тогда
		ИмяСРасширением = ИмяСРасширением + "." + Расширение;
	КонецЕсли;
	
	Возврат ИмяСРасширением;
	
КонецФункции

// Получает картинку предмета из библиотеки согласно его роли.
//
// Параметры:
//   РольПредмета - Строка - роль предмета.
//
// Возвращаемое значение:
//   Картинка - картинка из библиотеки.
//
Функция КартинкаПоРолиПредмета(РольПредмета) Экспорт
	
	Если РольПредмета = "Заполняемый" Тогда //@NON-NLS-1
		Возврат БиблиотекаКартинок.ПредметЗаполняемый16;
	ИначеЕсли РольПредмета = "Вспомогательный" Тогда //@NON-NLS-1
		Возврат БиблиотекаКартинок.ПредметВспомогательный16;
	Иначе
		Возврат БиблиотекаКартинок.ПредметОсновной16;
	КонецЕсли;
	
КонецФункции

// Получает номер картинки предмета в коллекции согласно его роли.
//
// Параметры:
//   РольПредмета - Строка - роль предмета.
//
// Возвращаемое значение:
//   Число - номер картинки из КоллекцияРолиПредметов
//
Функция НомерКартинкиПоРолиПредмета(РольПредмета) Экспорт
	
	Если РольПредмета = "Заполняемый" Тогда //@NON-NLS-1
		Возврат 5;
	ИначеЕсли РольПредмета = "Вспомогательный" Тогда //@NON-NLS-1
		Возврат 3;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

// Проверяет, является ли справочником тип объекта ДО.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - истина, если тип соответствует справочнику ДО.
//
Функция ЭтоСправочник(Тип) Экспорт
	
	Возврат Тип = "DMCorrespondent"
		Или Тип = "DMCurrency"
		Или Тип = "DMOrganization"
		Или Тип = "DMFile"
		Или Тип = "DMProject"
		Или Тип = "DMSubdivision";
	
КонецФункции

// Проверяет, является ли документом в прикладном смысле тип объекта ДО.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - истина, если тип соответствует документу ДО (в прикладном смысле).
//
Функция ЭтоДокумент(Тип) Экспорт
	
	Возврат Тип = "DMInternalDocument" 
		Или Тип = "DMIncomingDocument"
		Или Тип = "DMOutgoingDocument";
	
КонецФункции

// Проверяет, является ли тип объекта ДО бизнес-процессом.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - истина, если тип соответствует бизнес-процессу ДО.
//
Функция ЭтоБизнесПроцесс(Тип) Экспорт
	
	// Проверка родительского типа средствами фабрики слишком медленна.
	Возврат Тип = "DMBusinessProcess"
		Или Тип = "DMBusinessProcessAcquaintance"
		Или Тип = "DMBusinessProcessApproval"
		Или Тип = "DMBusinessProcessApproval_1.2.1.11"
		Или Тип = "DMBusinessProcessConfirmation"
		Или Тип = "DMBusinessProcessConsideration"
		Или Тип = "DMBusinessProcessInvitation"
		Или Тип = "DMBusinessProcessIssuesSolution"
		Или Тип = "DMBusinessProcessOrder"
		Или Тип = "DMBusinessProcessPerformance"
		Или Тип = "DMBusinessProcessPerformance_1.2.1.11"
		Или Тип = "DMBusinessProcessRegistration"
		Или Тип = "DMBusinessProcessIncomingDocumentProcessing"
		Или Тип = "DMBusinessProcessInternalDocumentProcessing"
		Или Тип = "DMBusinessProcessOutgoingDocumentProcessing"
		Или Тип = "DMComplexBusinessProcess";
	
КонецФункции

// Проверяет, является ли тип объекта ДО задачей бизнес-процесса.
//
// Параметры:
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - истина, если тип соответствует задаче ДО.
//
Функция ЭтоЗадачаБизнесПроцесса(Тип) Экспорт
	
	// Проверка родительского типа средствами фабрики слишком медленна.
	Возврат Тип = "DMBusinessProcessTask"
		Или Тип = "DMBusinessProcessApprovalTaskApproval"
		Или Тип = "DMBusinessProcessApprovalTaskCheckup"
		Или Тип = "DMBusinessProcessConfirmationTaskCheckup"
		Или Тип = "DMBusinessProcessConfirmationTaskConfirmation"
		Или Тип = "DMBusinessProcessConsiderationTaskAcquaint"
		Или Тип = "DMBusinessProcessInvitationTaskAcquaint"
		Или Тип = "DMBusinessProcessInvitationTaskInvitation"
		Или Тип = "DMBusinessProcessInvitationTaskNotify"
		Или Тип = "DMBusinessProcessIssuesSolutionTaskAnswer"
		Или Тип = "DMBusinessProcessIssuesSolutionTaskQuestion"
		Или Тип = "DMBusinessProcessOrderTaskCheckup"
		Или Тип = "DMBusinessProcessPerfomanceTaskCheckup"
		Или Тип = "DMBusinessProcessRegistrationTaskCheckup"
		Или Тип = "DMBusinessProcessRegistrationTaskRegistration";
	
КонецФункции

// Получает строковое представление срока действия по значениям реквизитов формы.
//
// Параметры:
//   ДатаНачала - Дата - дата начала действия.
//   Бессрочный - Булево - Истина, если документ бессрочный.
//   ДатаОкончания - Дата - дата окончания действия.
//   ПорядокПродленияID - Строка - порядок продления.
//   ПорядокПродления - Строка - описание порядка продления.
//
// Возвращаемое значение:
//   Строка - представление срока действия.
//
Функция ПредставлениеСрокаДействияДокумента(ДатаНачала, Бессрочный, ДатаОкончания,  ПорядокПродленияID,
		ПорядокПродления) Экспорт
	
	Результат = "";
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1'"),
			Формат(ДатаНачала, "ДЛФ=D")); 
	КонецЕсли;
	
	Если Бессрочный = Истина Тогда
		Результат = СтрШаблон(НСтр("ru = '%1, бессрочный'"),
			Результат);
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		Результат = СтрШаблон(НСтр("ru = '%1 по %2'"),
			Результат,
			Формат(ДатаОкончания, "ДЛФ=D"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПорядокПродленияID) Тогда
		Если ПорядокПродленияID = "НеПродлевается" Тогда //@NON-NLS-1
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
					НСтр("ru = 'Не продлевается'"));
		ИначеЕсли ПорядокПродленияID = "ДопускаетПродление" Тогда //@NON-NLS-1
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
					НСтр("ru = 'Допускает продление'"));
		Иначе		
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Продлевается %1'"),
					НРег(ПорядокПродления)));
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает HTML-представление документа для показа в карточке по объекту XDTO.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения -  форма обработки ИнтеграцияС1СДокументооборот с данными документа.
//
// Возвращаемое значение:
//   Строка - HTML-представление документа.
//
Функция ПолучитьОбзорДокумента(Форма) Экспорт
	
	HTMLЗаголовок =
		"<html>
		|<head>
		|<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  6px;
		|		margin-left: 10px;
		|		margin-bottom: 0px;
		|		font-family: Arial, sans-serif;
		|		font-size:   10pt;}
		|	table {
		|		width:       100%;
		|		font-family: Arial, sans-serif;
		|		font-size:   10pt;}
		|	td {vertical-align: top;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 7px;}
		|</style>
		|<body>";
	
	HTMLЗавершение = "</body></html>";
	HTMLТекст = HTMLЗаголовок;
	
	HTMLТекст = HTMLТекст + "<table>";
	HTMLТекст = HTMLТекст + "<tr>";
	
	Если Форма.Тип = "DMIncomingDocument" Тогда
		
		HTMLТекст = HTMLТекст + "<td width=""40%"" align=center >";
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'От кого:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Отправитель,
			Форма.ОтправительID, Форма.ОтправительТип);
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + ВРег(Форма.ВидДокумента);
		HTMLТекст = HTMLТекст + "<p>";
		
		Если ЗначениеЗаполнено(Форма.НомерОтправителя) И ЗначениеЗаполнено(Форма.ДатаОтправителя) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", 
				Формат(Форма.ДатаОтправителя, "ДЛФ=D") + " № " + Форма.НомерОтправителя);
		Иначе
			ДобавитьРеквизитКHTML(HTMLТекст, "__________ №__________", "");
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td>";
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td width=""40%"">";
		
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Кому:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Организация);
		Если ЗначениеЗаполнено(Форма.Адресат) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Адресат);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Подразделение) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подразделение:'"), Форма.Подразделение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ДатаРегистрации) И ЗначениеЗаполнено(Форма.РегистрационныйНомер) Тогда
			
			HTMLТекст = HTMLТекст + "<p>";
			ДобавитьРеквизитКHTML(HTMLТекст, "",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Рег. № %1 от %2'"),
					Форма.РегистрационныйНомер, Формат(Форма.ДатаРегистрации, "ДЛФ=D")));
			
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "</tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""3"">";
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<B>%1</B>",
			Форма.Наименование);
		
		Если ЗначениеЗаполнено(Форма.Описание) Или ЗначениеЗаполнено(Форма.СрокИсполнения) Или Форма.Сумма <> 0 Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Описание) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", СтрЗаменить(Форма.Описание, Символы.ПС, "<br>"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Или Форма.Сумма <> 0 Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Срок исполнения:'"),
				Формат(Форма.СрокИсполнения, "ДЛФ=D"),,,
				?(Форма.СостояниеИсполнениеID <> "Исполнен" И Форма.СрокИсполнения < НачалоДня(ТекущаяДата()), //@NON-NLS-1
					"B22222",
					""));
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Форма.Сумма <> 0 Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Сумма:'"),
				Формат(Форма.Сумма, "ЧДЦ=2; ЧН=0") + " " + Форма.Валюта);
		КонецЕсли;
		
		ДобавитьДополнительныеСвойства(HTMLТекст, Форма);
		
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		Если ЗначениеЗаполнено(Форма.Подписал) Тогда
			
			HTMLТекст = HTMLТекст + "<tr>";
			HTMLТекст = HTMLТекст + "<td colspan=""3"">";
			
			HTMLТекст = HTMLТекст + "<p>";
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подписал:'"), Форма.Подписал);
			
			HTMLТекст = HTMLТекст + "</td></tr>";
			
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"">";
		Если ЗначениеЗаполнено(Форма.Ответственный)
			Или ЗначениеЗаполнено(Форма.Подразделение) Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Ответственный) Тогда 
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Ответственный:'"), Форма.Ответственный);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</tr>";
		
	ИначеЕсли Форма.Тип = "DMInternalDocument" Тогда
		
		HTMLТекст = HTMLТекст + "<td colspan=""2"" align=""center"">";
		
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 № %2 от %3'"),
			ВРег(Форма.ВидДокумента),
			?(ЗначениеЗаполнено(Форма.РегистрационныйНомер), Форма.РегистрационныйНомер, "_____"),
			?(ЗначениеЗаполнено(Форма.ДатаРегистрации), Формат(Форма.ДатаРегистрации, "ДЛФ=D"), "_____"));
		
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"" align=""center"" >";
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<B>%1</B>",
			Форма.Наименование);
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"" >";
		
		Если ЗначениеЗаполнено(Форма.Описание) Или ЗначениеЗаполнено(Форма.СрокИсполнения) Или Форма.Сумма <> 0 Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Описание) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", СтрЗаменить(Форма.Описание, Символы.ПС, "<br>"));
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Или Форма.Сумма <> 0 Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Тогда
			ДобавитьРеквизитКHTML(
				HTMLТекст,
				НСтр("ru = 'Срок исполнения:'"),
				Формат(Форма.СрокИсполнения, "ДЛФ=D"),,,
				?(Форма.СостояниеИсполнениеID <> "Исполнен" И Форма.СрокИсполнения < НачалоДня(ТекущаяДата()), //@NON-NLS-1
					"B22222",
					""));
		КонецЕсли;
		
		Если Форма.Сумма <> 0 Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Сумма:'"),
				Формат(Форма.Сумма, "ЧДЦ=2; ЧН=0") + " " + Форма.Валюта);
			
			Если Форма.ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент"
					И Форма.УчитыватьНДС Тогда
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Сумма НДС:'"),
					Формат(Форма.СуммаНДС, "ЧДЦ=2; ЧН=0") + " " + Форма.Валюта);
			КонецЕсли;
			
			Если Форма.ВестиУчетТоваровИУслуг И Форма.Товары.Количество() > 0 Тогда
				КоличествоПозиций = Форма.Товары.Количество();
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Товары и услуги:'"),
					Формат(КоличествоПозиций, "ЧГ=") + " "
						+ ПользователиСлужебныйКлиентСервер.ПредметЦелогоЧисла(
							КоличествоПозиций,
							"Л = ru_RU",
							НСтр("ru = 'позиция,позиции,позиций,,,,,,0'")));
			КонецЕсли;
			
			Если Форма.ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент"
					И Форма.ВестиУчетПоСтатьямДДС Тогда
				СтатьиДДС = Форма.СтатьиДДС;
				КоличествоСтатей = СтатьиДДС.Количество();
				Если КоличествоСтатей = 1 Тогда
					ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Статья ДДС:'"),
						СтатьиДДС[0].СтатьяДДС);
				ИначеЕсли КоличествоСтатей > 1 Тогда
					ДобавитьПодписьКHTML(HTMLТекст, НСтр("ru = 'Статьи ДДС:'"));
					Разделитель = "";
					Для Каждого Строка Из СтатьиДДС Цикл
						HTMLТекст = HTMLТекст + Разделитель;
						ДобавитьЗначениеКHTML(HTMLТекст, Строка.СтатьяДДС, "");
						Разделитель = "; ";
					КонецЦикла;
					HTMLТекст = HTMLТекст + "<br>";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПредставлениеСрокаДействия(HTMLТекст, Форма);
		ДобавитьДополнительныеСвойства(HTMLТекст, Форма);
		
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		Если Форма.ВестиУчетПоКонтрагентам
				И (ЗначениеЗаполнено(Форма.Контрагент)
					Или Форма.Контрагенты.Количество()
					Или Форма.ЯвляетсяЗаявкойНаОплату) Тогда
			HTMLТекст = HTMLТекст + "<tr>";
			
			HTMLТекст = HTMLТекст + "<td width=""70%"">";
			HTMLТекст = HTMLТекст + "<p>";
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Наша организация:'"), "");
			HTMLТекст = HTMLТекст + "<p>";
			ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Организация);
			
			Если ЗначениеЗаполнено(Форма.Подписал) Тогда
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подписал:'"), Форма.Подписал);
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</td>";
			
			ИспользоватьТерминКорреспонденты = Ложь;
			
			Если Не Форма.НесколькоКонтрагентов Тогда
				Если ЗначениеЗаполнено(Форма.Контрагент) Тогда
					HTMLТекст = HTMLТекст + "<td>";
					HTMLТекст = HTMLТекст + "<p>";
					
					Если ИспользоватьТерминКорреспонденты Тогда
						ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Корреспондент:'"), "");
					Иначе
						ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Контрагент:'"), "");
					КонецЕсли;
					
					HTMLТекст = HTMLТекст + "<p>";
					
					ДобавитьРеквизитКHTML(HTMLТекст, "",
						Форма.Контрагент,
						Форма.КонтрагентID,
						Форма.КонтрагентТип);
					
					Если ЗначениеЗаполнено(Форма.ПодписалОтКонтрагента) Тогда
						ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подписал:'"), Форма.ПодписалОтКонтрагента);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Форма.КонтактноеЛицо) Тогда
						ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Контакт:'"), Форма.КонтактноеЛицо);
					КонецЕсли;
					
					HTMLТекст = HTMLТекст + "</td></tr>";
				КонецЕсли;
			Иначе
				HTMLТекст = HTMLТекст + "<td>";
				HTMLТекст = HTMLТекст + "<p>";
				
				Количество = 0;
				Для Каждого СтрокаКонтрагент Из Форма.Контрагенты Цикл
					Если ЗначениеЗаполнено(СтрокаКонтрагент.КонтрагентID) Тогда
						Количество = Количество + 1;
					КонецЕсли;
				КонецЦикла;
				
				Если Количество = 1 Тогда 
					ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Контрагент:'"), "");
				Иначе 
					ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Контрагенты:'"), "");
				КонецЕсли;
				
				HTMLТекст = HTMLТекст + "<p>";
				
				Для Каждого СтрокаКонтрагент Из Форма.Контрагенты Цикл
					Если ЗначениеЗаполнено(СтрокаКонтрагент.КонтрагентID) Тогда
						ДобавитьРеквизитКHTML(HTMLТекст, "",
							СтрокаКонтрагент.Контрагент,
							СтрокаКонтрагент.КонтрагентID,
							СтрокаКонтрагент.КонтрагентТип);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаКонтрагент.ПодписалОтКонтрагента) Тогда
						ДобавитьРеквизитКHTML(HTMLТекст,
							НСтр("ru = 'Подписал:'"),
							СтрокаКонтрагент.ПодписалОтКонтрагента);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаКонтрагент.КонтактноеЛицо) Тогда
						ДобавитьРеквизитКHTML(HTMLТекст,
							НСтр("ru = 'Контакт:'"),
							СтрокаКонтрагент.КонтактноеЛицо);
					КонецЕсли;
					
					HTMLТекст = HTMLТекст + "<p>";
				КонецЦикла;
				
				// Удаление лишнего отступа
				HTMLТекст = Лев(HTMLТекст, СтрДлина(HTMLТекст) - 3);
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</tr>";
		Иначе
			ДобавитьСтороны(HTMLТекст, Форма);
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"">";
		
		Если ЗначениеЗаполнено(Форма.Ответственный)
				Или ЗначениеЗаполнено(Форма.Подразделение)
				Или ЗначениеЗаполнено(Форма.Подготовил) Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Подготовил) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подготовил:'"), Форма.Подготовил);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Подразделение) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подразделение:'"), Форма.Подразделение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Ответственный) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Ответственный:'"), Форма.Ответственный);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</tr>";
		
	ИначеЕсли Форма.Тип = "DMOutgoingDocument" Тогда
		
		HTMLТекст = HTMLТекст + "<td width=""40%"" align=center >";
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'От кого:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Организация);
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + ВРег(Форма.ВидДокумента);
		HTMLТекст = HTMLТекст + "<p>";
		
		Если ЗначениеЗаполнено(Форма.ДатаРегистрации) И ЗначениеЗаполнено(Форма.РегистрационныйНомер) Тогда
			
			ДобавитьРеквизитКHTML(HTMLТекст, "",
				Формат(Форма.ДатаРегистрации, "ДЛФ=D") + " № " +  Форма.РегистрационныйНомер);
			
		Иначе
			
			ДобавитьРеквизитКHTML(HTMLТекст, "__________ №__________", "");
			
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td>";
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "<td width=""40%"">";
		
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Кому:'"), "");
		HTMLТекст = HTMLТекст + "<p>";
		ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Получатель,
			Форма.ПолучательID, Форма.ПолучательТип);
		Если ЗначениеЗаполнено(Форма.Адресат) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "", Форма.Адресат);
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</td>";
		HTMLТекст = HTMLТекст + "</tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""3"">";
		
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<B>%1</B>",
			Форма.Наименование);
		
		Если ЗначениеЗаполнено(Форма.Описание) Или ЗначениеЗаполнено(Форма.СрокИсполнения) Или Форма.Сумма <> 0 Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Описание) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, "",
				СтрЗаменить(Форма.Описание, Символы.ПС, "<br>"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Или Форма.Сумма <> 0 Тогда 
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокИсполнения) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Срок ответа:'"),
				Формат(Форма.СрокИсполнения, "ДЛФ=D"));
		КонецЕсли;
		
		Если Форма.Сумма <> 0 Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Сумма:'"),
				Формат(Форма.Сумма, "ЧДЦ=2; ЧН=0") + " " + Форма.Валюта);
		КонецЕсли;
		
		ДобавитьДополнительныеСвойства(HTMLТекст, Форма);
		
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""3"">";
		Если ЗначениеЗаполнено(Форма.Подписал) Или ЗначениеЗаполнено(Форма.Подготовил)
				Или ЗначениеЗаполнено(Форма.Подразделение) Тогда
			
			Если ЗначениеЗаполнено(Форма.СрокИсполнения) Или Форма.Сумма <> 0 Тогда
				HTMLТекст = HTMLТекст + "<p>";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.Подписал) Тогда
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подписал:'"), Форма.Подписал);
			КонецЕсли;
			Если ЗначениеЗаполнено(Форма.Подготовил) Тогда
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подготовил:'"), Форма.Подготовил);
			КонецЕсли;
			Если ЗначениеЗаполнено(Форма.Подразделение) Тогда
				ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подразделение:'"), Форма.Подразделение);
			КонецЕсли;
			
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</td></tr>";
		
		HTMLТекст = HTMLТекст + "<tr>";
		HTMLТекст = HTMLТекст + "<td colspan=""2"">";
		Если ЗначениеЗаполнено(Форма.Ответственный) Тогда
			HTMLТекст = HTMLТекст + "<p>";
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Ответственный) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Ответственный:'"), Форма.Ответственный);
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</tr>";
		
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<br>";
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td colspan=""3"">";
	
	HTMLТекст = HTMLТекст + "<p>";
	
	Если Форма.Тип = "DMInternalDocument" И ЗначениеЗаполнено(Форма.Папка) Тогда
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Папка:'"), Форма.Папка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ГрифДоступа) Тогда
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Гриф:'"), Форма.ГрифДоступа);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ВопросДеятельности) Тогда
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Вопрос:'"), Форма.ВопросДеятельности);
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Проект) Тогда
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Проект:'"), Форма.Проект);
	КонецЕсли;
	
	ДобавитьПредставлениеСостояний(HTMLТекст, Форма);
	
	Если ЗначениеЗаполнено(Форма.Комментарий) Тогда
		ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Комментарий:'"), Форма.Комментарий);
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "</td></tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + HTMLЗавершение;
	
	Возврат HTMLТекст;
	
КонецФункции

// Формирует текстовое представление состава документа.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения -  форма обработки ИнтеграцияС1СДокументооборот с данными документа.
//
// Возвращаемое значение:
//   Строка - текстовое представление состава документа.
//
Функция ПолучитьСтрокуСоставДокумента(Форма) Экспорт
	
	СтрокаСостав = ?(Форма.КоличествоЛистов > 0, СтрШаблон(
		НСтр("ru = 'листов %1,'") + " ", Форма.КоличествоЛистов), "");
			
	СтрокаСостав = СтрокаСостав + ?(Форма.КоличествоПриложений > 0, СтрШаблон(
		НСтр("ru = 'приложений %1,'") + " ", Форма.КоличествоПриложений), "");
			
	СтрокаСостав = СтрокаСостав + ?(Форма.ЛистовВПриложениях > 0, СтрШаблон(
		НСтр("ru = 'листов в приложениях %1,'") + " ", Форма.ЛистовВПриложениях), "");
			
	СтрокаСостав = СтрокаСостав + ?(Форма.КоличествоЭкземпляров > 0, СтрШаблон(
		НСтр("ru = 'экземпляров %1,'") + " ", Форма.КоличествоЭкземпляров), "");
			
	СтрокаСостав = ВРег(Лев(СтрокаСостав,1)) + Прав(СтрокаСостав, СтрДлина(СтрокаСостав) - 1);
	
	Если Прав(СтрокаСостав, 2) = ", " Тогда
		СтрокаСостав = Лев(СтрокаСостав, СтрДлина(СтрокаСостав) - 2);
	КонецЕсли;
	
	Возврат СтрокаСостав;
	
КонецФункции

// Строковое описание разности дат в днях с учетом склонений
//
// Параметры:
//   Дата1 - Дата - первая дата.
//   Дата2 - Дата - вторая дата.
//   ИспользоватьДатуИВремяВСрокахЗадач - Булево - признак использования даты в сроках задач.
//
// Возвращаемое значение:
//   Строка - текстовое представление разности дат.
//
Функция РазностьДатВДнях(Дата1, Дата2, ИспользоватьДатуИВремяВСрокахЗадач = Истина) Экспорт
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ЧислоЧасов = Окр((Дата1 - Дата2) / (60*60));
		ЧислоДней = Окр(ЧислоЧасов / 24);
		ЧислоЧасов = ЧислоЧасов - ЧислоДней * 24;
	Иначе
		ЧислоЧасов = 0;
		ЧислоДней = (НачалоДня(Дата1) - НачалоДня(Дата2)) / (60*60*24);
	КонецЕсли;
		
	Если ЧислоЧасов < 0 Тогда
		ЧислоДней = ЧислоДней - 1;
		ЧислоЧасов = ЧислоЧасов + 24;
	КонецЕсли;
	ПодписьДней = ПолучитьПодписьДней(ЧислоДней);
	ПодписьЧасов = ПолучитьПодписьЧасов(ЧислоЧасов);
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Если ЧислоДней > 0 И ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 и %3 %4'"),
				Строка(ЧислоДней),
				ПодписьДней,
				Строка(ЧислоЧасов),
				ПодписьЧасов);
		ИначеЕсли ЧислоДней > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоДней),
				ПодписьДней);
		ИначеЕсли ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоЧасов),
				ПодписьЧасов);
		Иначе
			Возврат НСтр("ru = 'Менее 1 часа'");
		КонецЕсли;
	Иначе
		Если ЧислоДней > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоДней),
				ПодписьДней);
		Иначе
			Возврат НСтр("ru = 'Менее 1 дня'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Получить строку с представлением размера файла - например для отображения в Состояние при передаче файла.
//
// Параметры:
//   РазмерВМб - Число - Размер в Мб.
//
// Возвращаемое значение:
//   Строка - размера файла.
//
Функция ПолучитьСтрокуСРазмеромФайла(Знач РазмерВМб) Экспорт
	
	Если РазмерВМб < 0.1 Тогда
		РазмерВМб = 0.1;
	КонецЕсли;
	
	СтрокаРазмера = ?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0"));
	
	Возврат СтрокаРазмера;
	
КонецФункции

// Возвращает Истина, если файл с таким расширением находится в списке расширений.
//
// Параметры:
//   СписокРасширений - Строка - Список расширений.
//   РасширениеФайла - Строка - Расширение файла.
//
// Возвращаемое значение:
//   Булево
//
Функция РасширениеФайлаВСписке(СписокРасширений, РасширениеФайла) Экспорт
	
	РасширениеФайлаБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	МассивРасширений = СтрРазделить(
		НРег(СписокРасширений), " ", Ложь);
	
	Если МассивРасширений.Найти(РасширениеФайлаБезТочки) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Строку сообщения о недопустимости подписания занятого файла.
//
// Параметры:
//   ФайлСсылка - ЛюбаяСсылка - Ссылка на файл.
//
// Возвращаемое значение:
//   Строка
//
Функция СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ФайлСсылка = Неопределено) Экспорт
	
	Если ФайлСсылка = Неопределено Тогда
		Возврат НСтр("ru = 'Нельзя подписать занятый файл.'");
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя подписать занятый файл: %1.'"),
			Строка(ФайлСсылка) );
	КонецЕсли;
	
КонецФункции

// Возвращает Строку сообщения о недопустимости подписания зашифрованного файла.
//
// Параметры:
//   ФайлСсылка - ЛюбаяСсылка - Ссылка на файл.
//
// Возвращаемое значение:
//   Строка
//
Функция СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ФайлСсылка = Неопределено) Экспорт
	
	Если ФайлСсылка = Неопределено Тогда
		Возврат НСтр("ru = 'Нельзя подписать зашифрованный файл.'");
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Нельзя подписать зашифрованный файл: %1.'"),
						Строка(ФайлСсылка) );
	КонецЕсли;
	
КонецФункции

// Извлекает текст в соответствии с кодировкой.
// Если кодировка не задана - сама вычисляет кодировку.
//
// Параметры:
//   ПолноеИмяФайла - Строка - Полное имя файла.
//   Кодировка - Строка - Кодировка.
//   Отказ - Булево - Отказ.
//
// Возвращаемое значение:
//   Строка - Извлеченный текст.
//
Функция ИзвлечьТекстИзТекстовогоФайла(ПолноеИмяФайла, Кодировка, Отказ) Экспорт
	
	ИзвлеченныйТекст = "";
	
#Если Не ВебКлиент Тогда
	
	// Определение кодировки.
	Если Не ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = Неопределено;
	КонецЕсли;
	
	Попытка
		КодировкаДляЧтения = ?(Кодировка = "utf-8_WithoutBOM", "utf-8", Кодировка);
		ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, КодировкаДляЧтения);
		ИзвлеченныйТекст = ЧтениеТекста.Прочитать();
	Исключение
		Отказ = Истина;
		ИзвлеченныйТекст = "";
	КонецПопытки;
	
#КонецЕсли
	
	Возврат ИзвлеченныйТекст;
	
КонецФункции

// Извлечь текст из файла OpenDocument и возвратить его в виде строки.
//
// Параметры:
//   ПутьКФайлу - Строка - Полное имя файла.
//   Отказ - Булево - Отказ.
//
// Возвращаемое значение:
//   Строка - Извлеченный текст.
//
Функция ИзвлечьТекстOpenDocument(ПутьКФайлу, Отказ) Экспорт
	
	ИзвлеченныйТекст = "";
	
#Если Не ВебКлиент И НЕ МобильныйКлиент Тогда
	
	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip");
	
	КопироватьФайл(ПутьКФайлу, ВременныйZIPФайл);
	Файл = Новый Файл(ВременныйZIPФайл);
	Файл.УстановитьТолькоЧтение(Ложь);

	Попытка
		Архив = Новый ЧтениеZipФайла();
		Архив.Открыть(ВременныйZIPФайл);
		Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
		Архив.Закрыть();
		ЧтениеXML = Новый ЧтениеXML();
		
		ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/content.xml");
		ИзвлеченныйТекст = ИзвлечьТекстИзContentXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		// Не считаем ошибкой, т.к. например расширение OTF может быть как OpenDocument, так и шрифт OpenType.
		Архив     = Неопределено;
		ЧтениеXML = Неопределено;
		Отказ = Истина;
		ИзвлеченныйТекст = "";
	КонецПопытки;
	
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);
	УдалитьФайлы(ВременныйZIPФайл);
	
#КонецЕсли
	
	Возврат ИзвлеченныйТекст;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает шестнадцатиричное представление числа.
//
// Параметры:
//   Число - Число - целое число.
//   Разрядов - Число - минимальная ширина результата.
//            - Неопределено - не дополнять нулями.
//
// Возвращаемое значение:
//   Строка - шестнадцатиричное представление числа, возможно,
//   дополненное нулями до указанного количества разрядов.
//
Функция ШестнадцатиричноеПредставлениеЧисла(Знач Число, Разрядов = Неопределено)
	
	Если Число = 0 И Разрядов = Неопределено Тогда
		Возврат "0";
	КонецЕсли;
	
	Результат = "";
	НРазряда = 0;
	Пока Истина Цикл
		НРазряда = НРазряда + 1;
		Если Число = 0 Тогда // возможно, следует дополнить до указанного числа разрядов
			Если Разрядов = Неопределено Тогда
				Прервать;
			ИначеЕсли НРазряда > Разрядов Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		ПравыйРазряд = Число % 16;
		Число = Цел(Число / 16);
		Если ПравыйРазряд > 9 Тогда
			Результат = Символ(КодСимвола("A") + ПравыйРазряд - 10) + Результат;
		Иначе
			Результат = Символ(КодСимвола("0") + ПравыйРазряд) + Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает число из его шестнадцатеричного представления. Может вызывать исключение.
//
// Параметры:
//   Представление - Строка - шестнадцатеричное число.
//
// Возвращаемое значение:
//   Число - преобразованное число.
//
Функция ЧислоИзШестнадцатеричногоПредставления(Знач Представление)
	
	Если Представление = "" Тогда
		Возврат 0;
	КонецЕсли;
	Представление = ВРег(Представление);
	
	Результат = 0;
	Пока Представление <> "" Цикл
		Разряд = Лев(Представление, 1);
		Представление = Сред(Представление, 2);
		Если Разряд >= "0" И Разряд <= "9" Тогда
			Результат = Результат * 16 + КодСимвола(Разряд, 1) - КодСимвола("0");
		ИначеЕсли Разряд >= "A" И Разряд <= "F" Тогда
			Результат = Результат * 16 + 10 + КодСимвола(Разряд, 1) - КодСимвола("A");
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибочный символ в шестнадцатеричной строке.'");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает большое простое число, используемое как модуль кольца классов вычетов.
// Должно быть больше любого из кодируемых чисел.
//
// Возвращаемое значение:
//   Число
//
Функция МодульКольцаВычетов()
	
	Возврат 4294967291; // больше любого из вероятных сочетаний двух символов пароля.
	
КонецФункции

// Разделяет число-секрет на указанное количество частей по алгоритму Шамира.
//
// Параметры:
//   Число - Число - разделяемое число, от 0 до 2^32 - 1.
//   Генератор - ГенераторСлучайныхЧисел - генератор случайных чисел, желательно сохранять его между вызовами.
//   Частей - Число - количество частей, на которые разделяется число.
//   Обязательных - Число - количество частей, требуемых для восстановления.
//
// Возвращаемое значение:
//   Массив из Массив - Массив пар чисел вида (1, 123), (2, 234), (3, 345), необходимых для восстановления.
//
Функция РазделитьЧисло(Число, Генератор = Неопределено, Частей = 2, Обязательных = 2)
	
#Если Не ВебКлиент Тогда
	
	Если Генератор = Неопределено Тогда
		Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяДата() - Дата(1, 1, 1)); // Использование оправдано: ГСЧ.
	КонецЕсли;
	Модуль = МодульКольцаВычетов();
	
	Пока Истина Цикл
		Результат = Новый Массив;
		Коэффициенты = Новый Массив;
		Коэффициенты.Добавить(Число);
		Коэффициенты.Добавить(Цел(Генератор.СлучайноеЧисло(0, Модуль - 1)));
		Коэффициенты.Добавить(Цел(Генератор.СлучайноеЧисло(0, Модуль - 1)));
		Для Часть = 1 По Частей Цикл
			Значение = Число;
			Для Степень = 1 По Обязательных - 1 Цикл
				Значение = (Значение + (Коэффициенты[Степень] * (Pow(Часть, Степень) % Модуль)) % Модуль) % Модуль;
			КонецЦикла;
			Пара = Новый Массив;
			Пара.Добавить(Часть);
			Пара.Добавить(Значение);
			Результат.Добавить(Пара);
		КонецЦикла;
		Если СобратьЧисло(Результат) = Число Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
#Иначе
	
	ВызватьИсключение НСтр("ru = 'Функция не поддерживается в веб-клиенте.'");
	
#КонецЕсли
	
КонецФункции

// Выполняет разложение наибольшего общего делителя пары чисел A и B.
//
// Параметры:
//   ЧислоA - Число.
//   ЧислоB - Число.
//
// Возвращаемое значение:
//   Массив из Число - массив (X, Y, Z), такой, что:
//     X - наибольший общий делитель ЧислоA и ЧислоB,
//     X = ЧислоA * Y + ЧислоB * Z.
//
Функция РазложитьНОД(Знач ЧислоA, Знач ЧислоB)
	
	Результат = Новый Массив;
	
	Если ЧислоB = 0 Тогда
		Результат.Добавить(ЧислоA);
		Результат.Добавить(1);
		Результат.Добавить(0);
	Иначе
		Частное = Цел(ЧислоA / ЧислоB);
		Модуль = ЧислоA % ЧислоB;
		Разложение = РазложитьНОД(ЧислоB, Модуль);
		Результат.Добавить(Разложение[0]);
		Результат.Добавить(Разложение[2]);
		Результат.Добавить(Разложение[1] - Разложение[2] * Частное);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает обратный модуль.
//
// Параметры:
//   ЧислоK - Число.
//
// Возвращаемое значение:
//   Число - такое, что (ЧислоK * ОбратныйМодуль(ЧислоK)) % Модуль = 1 для всех
//     положительных ЧислоK < Модуль.
//
Функция ОбратныйМодуль(Знач ЧислоK)
	
	Модуль = МодульКольцаВычетов();
	ЧислоK = ЧислоK % Модуль;
	
	Если ЧислоK < 0 Тогда
		Разложение = РазложитьНОД(Модуль, -ЧислоK);
		МножительРазложения = -Разложение[2];
	Иначе
		Разложение = РазложитьНОД(Модуль, ЧислоK);
		МножительРазложения = Разложение[2];
	КонецЕсли;
	
	Возврат (Модуль + МножительРазложения) % Модуль;
	
КонецФункции

// Собирает число, разделенное по алгоритму Шамира на части функцией РазделитьЧисло.
//
// Параметры:
//   РазделенноеЧисло - Массив из Массив - массив пар чисел вида (1, 123), (2, 234), ...
//
// Возвращаемое значение:
//   Число - исходное число.
//
Функция СобратьЧисло(РазделенноеЧисло)
	
	Результат = 0;
	Модуль = МодульКольцаВычетов();
	Для Строка = 0 По РазделенноеЧисло.Количество() - 1 Цикл
		Нумератор = 1; 
		Делитель = 1;
		Для Колонка = 0 По РазделенноеЧисло.Количество() - 1 Цикл
			Если Строка = Колонка Тогда
				Продолжить;
			КонецЕсли;
			От = РазделенноеЧисло[Строка][0];
			До = РазделенноеЧисло[Колонка][0];
			Нумератор = (Нумератор * -До) % Модуль;
			Делитель = (Делитель * (От - До)) % Модуль;
		КонецЦикла;
		Значение = РазделенноеЧисло[Строка][1];
		Результат = (Модуль + Результат + (Значение * Нумератор * ОбратныйМодуль(Делитель))) % Модуль;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Добавляет подпись к HTML-представлению объекта.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Подпись - Строка - текст подписи.
//
Процедура ДобавитьПодписьКHTML(HTMLТекст, Подпись)
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<FONT color=#413003>";
		HTMLТекст = HTMLТекст + Подпись + " ";
		HTMLТекст = HTMLТекст + "</FONT>";
	КонецЕсли;
	
КонецПроцедуры

// Добавляет значение к HTML-представлению, оформляя его как ссылку при необходимости.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Представление - Строка - добавляемое значение.
//   Идентификатор - Строка - идентификатор добавляемого значения.
//   Тип - Строка - тип добавляемого значения.
//
Процедура ДобавитьЗначениеКHTML(HTMLТекст, Представление, Идентификатор = Неопределено, Тип = Неопределено, Цвет = "")
	
	Если ЗначениеЗаполнено(Идентификатор) И ЗначениеЗаполнено(Тип) Тогда
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=dmil:%1>%2</A>",
			Тип + ":" + Идентификатор,
			Представление);
	Иначе
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + Представление;
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет реквизит (подпись и значение) к HTML-представлению объекта
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Подпись - Строка - подпись реквизита.
//   Представление - Строка - добавляемое значение.
//   Идентификатор - Строка - идентификатор добавляемого значения.
//   Тип - Строка - тип добавляемого значения.
//
Процедура ДобавитьРеквизитКHTML(HTMLТекст, Подпись, Представление, Идентификатор = Неопределено, Тип = Неопределено,
		Цвет = "")
	
	ДобавитьПодписьКHTML(HTMLТекст, Подпись);
	ДобавитьЗначениеКHTML(HTMLТекст, Представление, Идентификатор, Тип, Цвет);
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

// Добавляет представление состояний документа к его HTML-представлению.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ДобавитьПредставлениеСостояний(HTMLТекст, Форма)
	
	ПредставлениеМассив = Новый Массив;
	Последовательность = Новый Структура;
	Последовательность.Вставить("СостояниеСогласование");
	Последовательность.Вставить("СостояниеУтверждение");
	Последовательность.Вставить("СостояниеРегистрация");
	Последовательность.Вставить("СостояниеРассмотрение");
	Если Форма.Тип = "DMInternalDocument" Тогда
		Последовательность.Вставить("СостояниеПодписание");
	КонецЕсли;
	Последовательность.Вставить("СостояниеИсполнение");
	Для Каждого ТипСостояния Из Последовательность Цикл
		Состояние = Форма[ТипСостояния.Ключ];
		Если ЗначениеЗаполнено(Состояние) Тогда
			ПредставлениеМассив.Добавить(Состояние);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСостояний = ПредставлениеМассив.Количество();
	Если КоличествоСостояний > 1 Тогда
		Для Индекс = 0 По КоличествоСостояний - 1 Цикл
			Если ПредставлениеМассив[Индекс] = "Проект" Тогда
				ПредставлениеМассив.Удалить(Индекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Представление = СтрСоединить(ПредставлениеМассив, ", ");
	
	// Старые версии сервиса дают только одно состояние.
	Представление = ?(Представление = "", Форма.Состояние, Представление);
	Если Представление = "" Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодписьКHTML(HTMLТекст, НСтр("ru = 'Состояние:'"));
	HTMLТекст = HTMLТекст
		+ ?(Форма.ДоступенФункционалКОРП,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<A href=dmil:%1:%2:%3>%4</A>",
				Форма.Тип, Форма.ID, "status",
				Представление),
			Представление)
		+ "<br>";
	
КонецПроцедуры

// Добавляет представление срока действия документа к его HTML-представлению.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ДобавитьПредставлениеСрокаДействия(HTMLТекст, Форма)
	
	Представление = ПредставлениеСрокаДействияДокумента(
		Форма.ДатаНачалаДействия, Форма.Бессрочный, Форма.ДатаОкончанияДействия,
		Форма.ПорядокПродленияID, Форма.ПорядокПродления);
	Если Представление = "" Тогда
		Возврат;
	КонецЕсли;
		
	ДобавитьПодписьКHTML(HTMLТекст, НСтр("ru = 'Срок действия:'"));
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=dmil:%1:%2:%3>%4</A>",
		Форма.Тип, Форма.ID, "term",
		Представление)
		+ "<br>";
		
КонецПроцедуры

// Добавляет дополнительные свойства документа к его HTML-представлению.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ДобавитьДополнительныеСвойства(HTMLТекст, Форма)
	
	Для Каждого СтрокаСвойства Из Форма.Свойства Цикл
		Если ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, 
				СтрокаСвойства.Свойство + ":",
				СтрокаСвойства.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет стороны документа к его HTML-представлению.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ДобавитьСтороны(HTMLТекст, Форма)
	
	Если Не Форма.ВестиУчетСторон И Форма.Стороны.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОрганизации = Новый Массив;
	СтрокиКонтрагенты = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Форма.Стороны Цикл
		Если СтрокаТаблицы.СторонаТип = "DMOrganization"
				Или ИнтеграцияС1СДокументооборотВызовСервера.ИмяТипаXDTO
					(СтрокаТаблицы.СторонаТип) = "DMOrganization" Тогда
			СтрокиОрганизации.Добавить(СтрокаТаблицы);
		Иначе
			СтрокиКонтрагенты.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиКонтрагенты.Количество() Тогда
		ИндексПоследнего = СтрокиОрганизации.ВГраница();
		Для Счетчик = 1 По ИндексПоследнего Цикл
			СтрокиКонтрагенты.Добавить(СтрокиОрганизации[Счетчик]);
		КонецЦикла;
		Для Счетчик = 0 По ИндексПоследнего - 1 Цикл
			СтрокиОрганизации.Удалить(ИндексПоследнего - Счетчик);
		КонецЦикла;
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td colspan=""2"" align=""center"">";
	HTMLТекст = HTMLТекст + "<p>";
	ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'СТОРОНЫ'"), "");
	HTMLТекст = HTMLТекст + "</td></tr>";

	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td width=""70%"">";
	
	ДобавитьОписаниеСтороны(HTMLТекст, СтрокиОрганизации);
	ДобавитьОписаниеСтороны(HTMLТекст, СтрокиКонтрагенты);
	
	HTMLТекст = HTMLТекст + "</td></tr>";
	
КонецПроцедуры

// Добавляет стороны документа к его HTML-представлению.
//
// Параметры:
//   HTMLТекст - Строка - обрабатываемый текст.
//   Сторона - Массив из СтрокаТаблицыЗначений - строки таблицы "Стороны" с формы внутреннего документа.
//
Процедура ДобавитьОписаниеСтороны(HTMLТекст, Сторона)
	
	Для Каждого ОписаниеСтороны Из Сторона Цикл
		
		Если ЗначениеЗаполнено(ОписаниеСтороны.Наименование) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, СокрЛП(ОписаниеСтороны.Наименование) + ":", "");
		КонецЕсли;
		ДобавитьРеквизитКHTML(HTMLТекст, "", ОписаниеСтороны.Сторона);
		
		Если ОписаниеСтороны.Подписан Тогда
			Подписант = ОписаниеСтороны.Подписал;
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Подписал:'"), Подписант);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеСтороны.КонтактноеЛицо) Тогда
			ДобавитьРеквизитКHTML(HTMLТекст, НСтр("ru = 'Контакт:'"), ОписаниеСтороны.КонтактноеЛицо);
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<p>";
	КонецЦикла;
	
	HTMLТекст = HTMLТекст + "</td><td>";
	
КонецПроцедуры

// Подпись к количеству дней по склонениям
//
Функция ПолучитьПодписьДней(ЧислоДней)
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = НСтр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = НСтр("ru = 'день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня'");
			Иначе
				Подпись = НСтр("ru = 'дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству часов по склонениям
//
Функция ПолучитьПодписьЧасов(ЧислоЧасов)
	
	Если ЧислоЧасов > 10 И ЧислоЧасов < 20 Тогда
		Подпись = НСтр("ru = 'часов'");
	Иначе
		Срок = ЧислоЧасов - Цел(ЧислоЧасов / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'часов'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'час'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'часа'");
		Иначе
			Подпись = НСтр("ru = 'часов'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Извлечь текст из объекта ЧтениеXML (прочитанного из файла OpenDocument).
Функция ИзвлечьТекстИзContentXML(ЧтениеXML)
	
	ИзвлеченныйТекст = "";
	ПоследнееИмяТега = "";
	
#Если Не ВебКлиент Тогда
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ПоследнееИмяТега = ЧтениеXML.Имя;
			
			Если ЧтениеXML.Имя = "text:p" Тогда
				Если НЕ ПустаяСтрока(ИзвлеченныйТекст) Тогда
					ИзвлеченныйТекст = ИзвлеченныйТекст + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "text:line-break" Тогда
				Если НЕ ПустаяСтрока(ИзвлеченныйТекст) Тогда
					ИзвлеченныйТекст = ИзвлеченныйТекст + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "text:tab" Тогда
				Если НЕ ПустаяСтрока(ИзвлеченныйТекст) Тогда
					ИзвлеченныйТекст = ИзвлеченныйТекст + Символы.Таб;
				КонецЕсли;
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "text:s" Тогда
				
				СтрокаДобавки = " "; // пробел
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.Имя = "text:c"  Тогда
							ЧислоПробелов = Число(ЧтениеXML.Значение);
							СтрокаДобавки = "";
							Для Индекс = 0 По ЧислоПробелов - 1 Цикл
								СтрокаДобавки = СтрокаДобавки + " "; // пробел
							КонецЦикла;
						КонецЕсли;
					КонецЦикла
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ИзвлеченныйТекст) Тогда
					ИзвлеченныйТекст = ИзвлеченныйТекст + СтрокаДобавки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если СтрНайти(ПоследнееИмяТега, "text:") <> 0 Тогда
				ИзвлеченныйТекст = ИзвлеченныйТекст + ЧтениеXML.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
#КонецЕсли

	Возврат ИзвлеченныйТекст;
	
КонецФункции

#КонецОбласти