#Область СлужебныйПрограммныйИнтерфейс

// Функция определяет массив узлов-получателей для объекта при заданном плане обмена.
//
// Параметры:
//  Объект					- Произвольный - СправочникОбъект, ДокументОбъект, НаборЗаписей,
//								для которого выполняется заполнение Получателей по владельцу
//  ВладелецСсылка			- Произвольный - СправочникСсылка, ДокументСсылка, по которому необходимо выполнить
//								правила регистрации, и определить список узлов-получателей.
//  ИмяПланаОбмена			- Строка - имя плана обмена как оно задано в конфигураторе.
//  Отказ					- Булево - Если Истина, то будет отменено выполнение обработчика, по умолчанию Ложь
//  Выгрузка				- Булево - Если Истина, то производится выгрузка в другой узел, иначе производится запись объекта
// 
// Возвращаемое значение:
//  МассивУзловРезультат	- Массив - массив узлов-получателей для Объекта.
//
Функция ОпределитьПолучателейПоВладельцу(ВладелецСсылка, ИмяПланаОбмена, Отказ, Загрузка, Выгрузка, Отправитель) Экспорт
	
	Если Не ЗначениеЗаполнено(ВладелецСсылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(ВладелецСсылка) Тогда
		
		Отказ = Истина;
		Возврат Новый Массив;
		
	КонецЕсли;
	
	ВладелецОбъект = ВладелецСсылка.ПолучитьОбъект();
	ВладелецОбъект.ДополнительныеСвойства.Вставить("ОпределениеПолучателейПриЗаписи");
	ВладелецОбъект.ДополнительныеСвойства.Вставить("Выгрузка", Выгрузка);
	ВладелецОбъект.ОбменДанными.Загрузка = Загрузка;
	ВладелецОбъект.ОбменДанными.Отправитель = Отправитель;
	
	Возврат ОбменДаннымиСобытия.ОпределитьПолучателей(ВладелецОбъект, ИмяПланаОбмена);
	
КонецФункции

// Возвращает массив с присоединенными файлами
//
// Параметры:
//		СсылкаНаОбъект - Произвольный - СправочникСсылка, ДокументСсылка и т.п.
//										Ссылка на объект, для которого требуется получить присоединенные файлы.
//
// Возвращаемое значение:
//		МассивФайлов - Массив - массив с присоединенными файлами
//
Функция ПрисоединенныеФайлыКОбъекту(СсылкаНаОбъект) Экспорт
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СсылкаНаОбъект, МассивФайлов);
	
	Возврат МассивФайлов;
	
КонецФункции

Функция УзлыФизическихЛицПоГоловнойОрганизации() Экспорт
	
	УзлыФизическихЛиц = Новый ТаблицаЗначений;
	УзлыФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УзлыФизическихЛиц.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	УзлыФизическихЛиц.Колонки.Добавить("Узлы", Неопределено);
	
	УзлыФизическихЛиц.Индексы.Добавить("ФизическоеЛицо, ГоловнаяОрганизация");
	
	Возврат УзлыФизическихЛиц;
	
КонецФункции

Функция УзлыБезОтбораПоОрганизации(ИмяПланаОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПланаОбменаЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
		|ИЗ
		|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
		|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
		|ГДЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
		|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланОбменаОсновнаяТаблица.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПланОбменаОрганизации.Организация) = 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаОрганизации", "ПланОбмена." + ИмяПланаОбмена + ".Организации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция УзлыБезОтбораПоПодразделениям(ИмяПланаОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПланаОбменаЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
		|ИЗ
		|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
		|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
		|ГДЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
		|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланОбменаОсновнаяТаблица.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПланОбменаПодразделения.Подразделение) = 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаПодразделения", "ПланОбмена." + ИмяПланаОбмена + ".Подразделения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ИспользуютсяУзлыРИБСОтбором() Экспорт
	
	Возврат ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Или ИспользуютсяУзлыРИБСОтборомПоПодразделениям();
	
КонецФункции

Функция ИспользуютсяУзлыРИБСОтборомПоОрганизациям(ИсключаемыйУзел = Неопределено) Экспорт
	
	ОтборыВПланахОбмена = Ложь;
	
	ПланыОбменаПодсистемы = Новый Массив;
	ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена(ПланыОбменаПодсистемы);
	
	Для Каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл
		Если Не ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			Продолжить;
		КонецЕсли;
		ЭтотУзел = ПланыОбмена[ПланОбмена.Имя].ЭтотУзел();
		Если Не ОбменДаннымиСлужебный.ОбменДаннымиВключен(ПланОбмена.Имя, ЭтотУзел) Тогда // АПК:БЗК.278
			Продолжить;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсключаемыйУзел", ИсключаемыйУзел);
		Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПланОбмена.Ссылка КАК Ссылка
			|ИЗ
			|	ПланОбмена.ОбменВРаспределеннойИнформационнойБазе КАК ПланОбмена
			|ГДЕ
			|	ПланОбмена.ИспользоватьОтборПоОрганизациям
			|	И ПланОбмена.СинхронизироватьДанныеПоОрганизациям
			|	И НЕ ПланОбмена.ПометкаУдаления
			|	И ПланОбмена.Ссылка <> &ИсключаемыйУзел
			|	И ПланОбмена.Ссылка <> &ЭтотУзел";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОбменВРаспределеннойИнформационнойБазе", ПланОбмена.Имя);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ОтборыВПланахОбмена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборыВПланахОбмена;
	
КонецФункции

Функция ИспользуютсяУзлыРИБСОтборомПоПодразделениям(ИсключаемыйУзел = Неопределено) Экспорт
	
	ОтборыВПланахОбмена = Ложь;
	
	ПланыОбменаПодсистемы = Новый Массив;
	ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена(ПланыОбменаПодсистемы);
	
	Для Каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл
		Если Не ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			Продолжить;
		КонецЕсли;
		ЭтотУзел = ПланыОбмена[ПланОбмена.Имя].ЭтотУзел();
		Если Не ОбменДаннымиСлужебный.ОбменДаннымиВключен(ПланОбмена.Имя, ЭтотУзел) Тогда // АПК:БЗК.278
			Продолжить;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсключаемыйУзел", ИсключаемыйУзел);
		Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПланОбмена.Ссылка КАК Ссылка
			|ИЗ
			|	ПланОбмена.ОбменВРаспределеннойИнформационнойБазе КАК ПланОбмена
			|ГДЕ
			|	ПланОбмена.ИспользоватьОтборПоПодразделениям
			|	И ПланОбмена.СинхронизироватьДанныеПоПодразделениям
			|	И НЕ ПланОбмена.ПометкаУдаления
			|	И ПланОбмена.Ссылка <> &ИсключаемыйУзел
			|	И ПланОбмена.Ссылка <> &ЭтотУзел";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОбменВРаспределеннойИнформационнойБазе", ПланОбмена.Имя);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ОтборыВПланахОбмена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборыВПланахОбмена;
	
КонецФункции

#КонецОбласти
