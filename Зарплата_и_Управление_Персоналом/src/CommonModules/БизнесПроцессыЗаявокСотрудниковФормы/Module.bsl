
#Область СлужебныйПрограммныйИнтерфейс

#Область ФормаБизнесПроцесса

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Если Форма.Объект.Ссылка.Пустая() Тогда
		ИнициализироватьФорму(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ИнициализироватьФорму(Форма);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект) Экспорт
	ПроверитьДатуЗавершенияОтложенногоПроцесса(ТекущийОбъект, Отказ);
КонецПроцедуры

Процедура ПриЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	Если Форма.НачальныйПризнакСтарта И ИзменятьЗаданияЗаднимЧислом Тогда
		УстановитьПривилегированныйРежим(Истина); 
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФормыЗадачБизнесПроцесса

// Устанавливает свойства бизнес процесса в случае выполнения заявки.
//	Параметры:
//		Форма - УправляемаяФорма - форма БП на которой выполняем заявку.
Процедура ВыполнитьБизнесПроцессЗаявки(СостояниеЗапроса, Исполнитель) Экспорт
	СостояниеЗапроса = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокКабинетСотрудника.Выполнена");
	Исполнитель = Пользователи.АвторизованныйПользователь();
КонецПроцедуры

// Устанавливает свойства бизнес процесса в случае отказа по заявке.
//	Параметры:
//		Форма - УправляемаяФорма - форма БП на которой отказываем по заявке.
Процедура ОтказатьБизнесПроцессЗаявки(СостояниеЗапроса, Исполнитель) Экспорт
	СостояниеЗапроса = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокКабинетСотрудника.Отказ");
	Исполнитель = Пользователи.АвторизованныйПользователь();
КонецПроцедуры

Процедура ИнициализироватьФормуЗадачи(Форма, ПолеРезультат = Неопределено) Экспорт
	
	Форма.НачальныйПризнакВыполнения = Форма.Объект.Выполнена;
	Форма.ПодписыватьЗаявкиСотрудника = Константы.ПодписыватьЗаявкиСотрудника.Получить();
	ПрочитатьРеквизитыБизнесПроцесса(Форма);
		
	ИспользоватьДатуИВремяВСрокахЗадач(Форма);
	
	УстановитьДоступностьИВидимостьЭлементов(Форма, ПолеРезультат);
	ЗагрузитьИсториюЗаявки(Форма);
	
	ОтразитьФайлыЗаявки(Форма);
	
КонецПроцедуры

Процедура ЗаписатьРеквизитыБизнесПроцесса(Форма, ЗадачаОбъект) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ТипЗаявкиКабинетСотрудника = Форма.Задание.ТипЗаявкиКабинетСотрудника;
		ТипыЗаявокКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника;
		НеСправкаНДФЛ = (ТипЗаявкиКабинетСотрудника <> ТипыЗаявокКабинетСотрудника.СправкаНДФЛ); 
		
		УстановитьПривилегированныйРежим(Истина);
		БизнесПроцессыИЗадачиСервер.ЗаблокироватьБизнесПроцессы(ЗадачаОбъект.БизнесПроцесс);
		БизнесПроцессОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
		БизнесПроцессОбъект.Подтверждено = Форма.ЗаданиеВыполнено;
		БизнесПроцессОбъект.СостояниеЗаявки = Форма.СостояниеЗапроса;
		БизнесПроцессОбъект.Комментарий = Форма.Задание.Комментарий;
		БизнесПроцессОбъект.Исполнитель = Форма.Исполнитель;
		Если ТипЗаявкиКабинетСотрудника = ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск
			И Форма.Задание.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
			БизнесПроцессОбъект.ОтпускСогласован = Истина;
		КонецЕсли;
		БизнесПроцессОбъект.ОтветПоЗаявке = Форма.Задание.ОтветПоЗаявке;
		Если Форма.Задание.Свойство("СозданиеБольничногоЛиста") Тогда
			БизнесПроцессОбъект.СозданиеБольничногоЛиста = Форма.Задание.СозданиеБольничногоЛиста;
		КонецЕсли;
		БизнесПроцессОбъект.Записать(); // АПК:1327 Блокировка установлена в БизнесПроцессыИЗадачиСервер.ЗаблокироватьБизнесПроцессы
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьВидимостьКнопокДействий(Форма, Предмет, ФормаБезДокумента = Ложь) Экспорт
	
	ЗаданиеСсылка = Форма.Задание.Ссылка;
	ПредметТаблица = (ТипЗнч(Предмет) = Тип("ДанныеФормыКоллекция"));
	ПредметЗаполнен = Ложь;
	Если ПредметТаблица Тогда
		ПредметЗаполнен = (Предмет.Количество() > 0);
		ВыгрузкаПредмет = Предмет.Выгрузить(); 
		Для Каждого Документ Из ВыгрузкаПредмет Цикл
			ПредметЗаполнен = ПредметЗаполнен И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ[1], "Проведен");
			УстановитьСтатусДокумента(Форма, Документ);
		КонецЦикла;
		Предмет.Загрузить(ВыгрузкаПредмет);
	Иначе
		ПредметЗаполнен = ?(Предмет <> Неопределено, 
							Не Предмет.Пустая() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Проведен"),
							Ложь);
		Если Предмет <> Неопределено Тогда											 
			УстановитьДекорациюПроведен(Форма, Предмет);
		КонецЕсли;
	КонецЕсли;
	
	КнопкаОтказать = Форма.Элементы.Найти("Отказать");
	
	Если Форма.Объект.Выполнена Тогда
		Если НЕ ФормаБезДокумента Тогда
			Форма.Элементы.СоздатьДокумент.Видимость = Ложь;
		КонецЕсли;
		Форма.Элементы.Отказать.Доступность = Ложь;
		Форма.Элементы.Выполнено.Доступность = Ложь;
		Форма.Элементы.СохранитьШаблон.Доступность = Ложь;
		Форма.Элементы.ШаблонОтвета.Доступность = Ложь;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Задание, "СтараяВерсия") И Форма.Задание.СтараяВерсия Тогда
		СтараяВерсия = Форма.Задание.СтараяВерсия;
		Если НЕ ФормаБезДокумента Тогда
			Форма.Элементы.СоздатьДокумент.Видимость = НЕ СтараяВерсия;
		КонецЕсли;
		Форма.Элементы.Отказать.Доступность = СтараяВерсия;
		Форма.Элементы.Выполнено.Доступность = СтараяВерсия;
	ИначеЕсли ПредметТаблица Тогда
		Форма.Элементы.СоздатьДокумент.Видимость = Истина;
		Форма.Элементы.Отказать.Доступность = НЕ ПредметЗаполнен;
		Форма.Элементы.Выполнено.Доступность = ПредметЗаполнен;
	ИначеЕсли ФормаБезДокумента Тогда
		Форма.Элементы.Отказать.Доступность = Истина;
		Форма.Элементы.Выполнено.Доступность = Истина;
	ИначеЕсли ПредметЗаполнен Тогда
		Форма.Элементы.СоздатьДокумент.Видимость = Ложь;
		Форма.Элементы.Отказать.Доступность = Ложь;
		Форма.Элементы.Выполнено.Доступность = Истина;	
	Иначе
		Форма.Элементы.СоздатьДокумент.Видимость = Истина;
		Форма.Элементы.Отказать.Доступность = Истина;
		Форма.Элементы.Выполнено.Доступность = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораШаблона(Форма, Результат, Параметры) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	Форма.Задание.ОтветПоЗаявке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "ТекстОтвета");
КонецПроцедуры

Процедура УстановитьДекорациюПроведен(Форма, Предмет) Экспорт
	
	РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Проведен, ПометкаУдаления");
	ПредметНеПустаяСсылка = Не Предмет.Пустая();
	
	ПредметЗаполнен = ?(Предмет <> Неопределено, ПредметНеПустаяСсылка И РеквизитыПредмета.Проведен,
	Ложь);
	
	Форма.Элементы.СтатусДокумента.Видимость = ПредметНеПустаяСсылка;
	Если ПредметНеПустаяСсылка Тогда
		Если РеквизитыПредмета.Проведен Тогда
			Форма.СтатусДокумента = 1;
		ИначеЕсли РеквизитыПредмета.ПометкаУдаления Тогда
			Форма.СтатусДокумента = 3;
		Иначе
			Форма.СтатусДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ФайлыОтвета

Процедура ДобавитьЭлементыФайлаОтвета(Форма, ИмяГруппы, СтруктураРеквизита, ДобавляемыеРеквизиты) Экспорт
	
	Элементы = Форма.Элементы;
	
	ГруппаФайлОтвета = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаПрисоединитьФайл);
	ГруппаФайлОтвета.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФайлОтвета.ОтображатьЗаголовок = Ложь;
	
	ИмяРеквизита = СтруктураРеквизита.ИмяРеквизита;
	ИмяКоманды = "Выбрать" + ИмяРеквизита;
		
	НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды );
	НоваяКоманда.Действие = "Подключаемый_ВыбратьФайлОтвета";
	НоваяКоманда.Заголовок = НСтр("ru = 'Выберите файл...'");
		
	НоваяКнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаФайлОтвета);
	НоваяКнопка.ИмяКоманды = ИмяКоманды ;
	
	НоваяДекорацияВидДокумента = Элементы.Добавить("ВидДокумента" + ИмяРеквизита,
											   		 Тип("ДекорацияФормы"),
											   		 ГруппаФайлОтвета);
	НоваяДекорацияВидДокумента.Вид = ВидДекорацииФормы.Картинка;
	НоваяДекорацияВидДокумента.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаФайлОтвета);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	
	НоваяДекорацияУдаления = Элементы.Добавить("Удалить" + ИмяРеквизита,
											   Тип("ДекорацияФормы"),
											   ГруппаФайлОтвета);
	НоваяДекорацияУдаления.Вид = ВидДекорацииФормы.Картинка;
	НоваяДекорацияУдаления.Картинка = БиблиотекаКартинок.Закрыть;
	НоваяДекорацияУдаления.Гиперссылка = Не Форма.Объект.Выполнена;
	НоваяДекорацияУдаления.УстановитьДействие("Нажатие", "Подключаемый_УдалитьФайлНажатие");
	
	Реквизит = Новый РеквизитФормы(ИмяРеквизита,
								   Новый ОписаниеТипов("СправочникСсылка." + СтруктураРеквизита.ИмяТаблицыПрисоединенногоФайла));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	ФайлПодписан = Форма.Элементы.Добавить(ИмяРеквизита + "Подписан", Тип("ДекорацияФормы"), ГруппаФайлОтвета);
	ФайлПодписан.Вид = ВидДекорацииФормы.Надпись;
	
	ГруппаФайлОтвета.Видимость = Истина;
		
КонецПроцедуры

Процедура ЗаполнитьЭлементыФайлаОтвета(Форма, ФайлОтветаЭлемент, ФайлОтвета, ИмяРеквизита, ЗначенияРеквизитов) Экспорт
	
	ФайлПустой = ФайлОтвета.Пустая();
	Элементы = Форма.Элементы;
	
	Если ФайлПустой Тогда
		ФайлОтветаЭлемент.Гиперссылка = Ложь;
		ФайлОтветаЭлемент.Заголовок = НСтр("ru = '<Файл не выбран>'");
		
	Иначе
		ФайлОтветаЭлемент.Гиперссылка = Истина;
		РеквизитыФайлаЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлОтвета,
																		  "Наименование,Расширение,Размер");
		ФайлОтветаЭлемент.Заголовок = СтрШаблон("%1.%2 (%3)",
										  		РеквизитыФайлаЗаявки.Наименование,
										   		РеквизитыФайлаЗаявки.Расширение,
										   		БизнесПроцессыЗаявокСотрудниковКлиентСервер.РазмерФайлаСтрокой(
										   			РеквизитыФайлаЗаявки.Размер));
		ФайлОтветаЭлемент.УстановитьДействие("Нажатие", "Подключаемый_ФайлНажатие");
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ФайлОтвета);
		Элементы[ИмяРеквизита + "Подписан"].Заголовок = ?(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлОтвета,
																								    "ПодписанЭП"),
														  НСтр("ru = 'Файл подписан'"),
														  НСтр("ru = 'Файл не подписан'"));
		Элементы["ВидДокумента" + ИмяРеквизита].Картинка = КартинкаПоРасширениюФайла(ФайлОтвета.Расширение);			
	КонецЕсли;
	
	Элементы["ВидДокумента" + ИмяРеквизита].Видимость = Не ФайлПустой;
	Элементы["Выбрать" + ИмяРеквизита].Доступность = ФайлПустой;
	Элементы["Удалить" + ИмяРеквизита].Видимость = Не (ФайлПустой Или Форма.Объект.Выполнена);
	
	ФайлСЭП = (Форма.Задание.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
	Элементы[ИмяРеквизита + "Подписан"].Видимость = Не ФайлПустой 
													И (ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника")
	                                                   Или ФайлСЭП); 
													   		
КонецПроцедуры

Функция КартинкаПоРасширениюФайла(Расширение) Экспорт
	Если Расширение = "docx" Или Расширение = "doc" Или Расширение = "DOCX" Или Расширение = "DOC" Тогда
		Возврат БиблиотекаКартинок.ФорматWord;
	ИначеЕсли Расширение = "pdf" Или Расширение = "PDF" Тогда
		Возврат БиблиотекаКартинок.ФорматPDF;
	Иначе
		Возврат БиблиотекаКартинок.ФорматПустой;
	КонецЕсли;
КонецФункции

Функция НовыйСтруктураРеквизитаФайлаОтвета() Экспорт
	
	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("ИмяРеквизита",						"");
	СтруктураРеквизита.Вставить("ИмяТаблицыПрисоединенногоФайла",	"");
	
	Возврат СтруктураРеквизита;
	
КонецФункции

Функция СтруктураИмениФайла(ИмяФайла) Экспорт
	
	МассивПути = СтрРазделить(ИмяФайла, "\");
	ИмяФайла = МассивПути[МассивПути.Количество()-1];
	
	МассивИмениФайла = СтрРазделить(ИмяФайла, ".");
	МассивИмениФайлаКоличество = МассивИмениФайла.Количество();
	ИмяФайлаОтветаБезРасширения = "";
	РасширениеФайлаОтветаБезТочки = "";
	
	Если МассивИмениФайлаКоличество = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Индекс = 0 По МассивИмениФайлаКоличество-1 Цикл
		Если МассивИмениФайлаКоличество > 1 И Индекс = МассивИмениФайлаКоличество-1 Тогда
			Прервать;
		КонецЕсли;
		ИмяФайлаОтветаБезРасширения = ИмяФайлаОтветаБезРасширения + МассивИмениФайла[Индекс] + ".";
	КонецЦикла;
	ИмяФайлаОтветаБезРасширения = Лев(ИмяФайлаОтветаБезРасширения, СтрДлина(ИмяФайлаОтветаБезРасширения) - 1);
	
	Если МассивИмениФайлаКоличество > 1 Тогда
		РасширениеФайлаОтветаБезТочки = МассивИмениФайла[МассивИмениФайлаКоличество-1];
	КонецЕсли;
	
	СтруктураИмениФайла = Новый Структура;
	СтруктураИмениФайла.Вставить("ИмяФайлаОтветаБезРасширения", ИмяФайлаОтветаБезРасширения);
	СтруктураИмениФайла.Вставить("РасширениеФайлаОтветаБезТочки", РасширениеФайлаОтветаБезТочки);
	
	Возврат СтруктураИмениФайла;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормаБизнесПроцесса

Процедура ИнициализироватьФорму(Форма)
	
	Форма.НачальныйПризнакСтарта = Форма.Объект.Стартован;
	
	УстановитьРеквизитыОтложенногоСтарта(Форма);
	
	Форма.ИспользоватьДатуИВремяВСрокахЗадач    = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Форма.ИзменятьЗаданияЗаднимЧислом           = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	Форма.ИспользоватьПодчиненныеБизнесПроцессы = ПолучитьФункциональнуюОпцию("ИспользоватьПодчиненныеБизнесПроцессы");
	
	Форма.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Форма.Объект.Предмет);
	
	БизнесПроцессыЗаявокСотрудниковКлиентСервер.УстановитьСвойстваЭлементовФормы(Форма);
	
КонецПроцедуры

Процедура ПроверитьДатуЗавершенияОтложенногоПроцесса(ПроверяемыйОбъект, Отказ)

	Если Не ЗначениеЗаполнено(ПроверяемыйОбъект.СрокИсполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтложенногоСтарта = БизнесПроцессыИЗадачиСервер.ДатаОтложенногоСтартаПроцесса(ПроверяемыйОбъект.Ссылка);
	
	Если ПроверяемыйОбъект.СрокИсполнения < ДатаОтложенногоСтарта Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Срок исполнения задания не может быть меньше даты отложенного старта.'"),,
			"СрокИсполнения", "Объект.СрокИсполнения");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРеквизитыОтложенногоСтарта(Форма)

	ДатаОтложенногоСтарта = БизнесПроцессыИЗадачиСервер.ДатаОтложенногоСтартаПроцесса(Форма.Объект.Ссылка);
	Форма.Отложен = (ДатаОтложенногоСтарта <> '00010101');
	
КонецПроцедуры

#КонецОбласти

#Область ФормыЗадачБизнесПроцесса

#Область ИсторияЗаявки

Процедура ЗагрузитьИсториюЗаявки(Форма)
	
	Если Форма.Элементы.Найти("ГруппаИсторияЗаявки") = Неопределено 
		 ИЛИ Форма.Элементы.Найти("ИсторияЗаявки") <> Неопределено Тогда
		Возврат;	 
	КонецЕсли;
	
	ТаблицаИсторияЗаявки = ТаблицаИсторияЗаявок(Форма.Задание.Ссылка, Форма.Объект.Ссылка);
	Если ТаблицаИсторияЗаявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит_ИсторияЗаявки = Новый РеквизитФормы("ИсторияЗаявки", Новый ОписаниеТипов("ДинамическийСписок"), , НСтр("ru = 'История заявки'"));
	ДобавляемыеРеквизиты.Добавить(Реквизит_ИсторияЗаявки);
		
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.ИсторияЗаявки.ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Задача,
	               |	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	               |	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаЗавершения
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |	И ЗадачаИсполнителя.Ссылка <> &Ссылка";
	Форма.ИсторияЗаявки.ОсновнаяТаблица = "Задача.ЗадачаИсполнителя";
	Форма.ИсторияЗаявки.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Форма.Задание.Ссылка);
	Форма.ИсторияЗаявки.Параметры.УстановитьЗначениеПараметра("Ссылка", Форма.Объект.Ссылка);
	
	Элемент_ИсторияЗаявки = Форма.Элементы.Добавить("ИсторияЗаявки", Тип("ТаблицаФормы"), Форма.Элементы.ГруппаИсторияЗаявки);
	Элемент_ИсторияЗаявки.ПутьКДанным = "ИсторияЗаявки";
	Элемент_ИсторияЗаявки.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элемент_ИсторияЗаявки.ТолькоПросмотр = Истина;
	
	Для каждого Колонка Из ТаблицаИсторияЗаявки.Колонки Цикл
		Элемент_СтрокаИсторияЗаявки = Форма.Элементы.Добавить("ИсторияЗаявки" + Колонка.Имя, Тип("ПолеФормы"), Элемент_ИсторияЗаявки);       
		Элемент_СтрокаИсторияЗаявки.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент_СтрокаИсторияЗаявки.ПутьКДанным = "ИсторияЗаявки." + Колонка.Имя;	
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаИсторияЗаявок(Заявка, Задача)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Задача,
	               |	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	               |	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаЗавершения
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |	И ЗадачаИсполнителя.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Заявка);
	Запрос.УстановитьПараметр("Ссылка", Задача);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

Процедура ПрочитатьРеквизитыБизнесПроцесса(Форма)
	
	ЗадачаОбъект = ДанныеФормыВЗначение(Форма.Объект, Тип("ЗадачаОбъект.ЗадачаИсполнителя"));
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	ЗначениеВДанныеФормы(ЗаданиеОбъект, Форма.Задание);
	Форма.ЗаданиеВыполнено 			= Форма.Задание.Выполнено;
	Форма.ЗаданиеСодержание 		= Форма.Задание.Содержание;
	Форма.Элементы.Содержание.Заголовок = Форма.ЗаданиеСодержание;
	Если Форма.Элементы.Найти("КомментарийСотрудника") <> Неопределено Тогда
		Форма.Элементы.КомментарийСотрудника.Заголовок = Форма.Задание.КомментарийСотрудника;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспользоватьДатуИВремяВСрокахЗадач(Форма)
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Форма.Элементы.СрокИсполнения);
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Форма.Элементы.Дата);	
КонецПроцедуры

Процедура УстановитьДоступностьИВидимостьЭлементов(Форма, ПолеРезультат)
	
	БизнесПроцессыИЗадачиСервер.ФормаЗадачиПриСозданииНаСервере(Форма, Форма.Объект,
		Форма.Элементы.ГруппаСостояние, Неопределено);
		
	Форма.Элементы.ИзменитьЗадание.Видимость = (Форма.Объект.Автор = Пользователи.ТекущийПользователь());
	
	Если Форма.Объект.Выполнена Тогда
		Форма.Элементы.ГруппаВыполненоДата.Доступность = Ложь;
		Форма.Элементы.Комментарий.Доступность = Ложь;
		Форма.Элементы.ШаблонОтвета.Видимость = Ложь;
		Если ПолеРезультат <> Неопределено Тогда
			ПолеРезультат.Доступность = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Форма.Исполнитель = ?(ЗначениеЗаполнено(Форма.Объект.Исполнитель), Форма.Объект.Исполнитель, Форма.Объект.РольИсполнителя);
	
	Если ПравоДоступа("Изменение", Метаданные.БизнесПроцессы.Задание) Тогда
		Форма.Элементы.Выполнено.Доступность = Истина;
		Форма.Элементы.Отказать.Доступность = Истина;
		Если Форма.Элементы.Найти("СоздатьДокумент") <> Неопределено Тогда
			Форма.Элементы.СоздатьДокумент.Доступность = Истина;
			ПолеРезультат.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Иначе
		Форма.Элементы.Выполнено.Доступность = Ложь;
		Форма.Элементы.Отказать.Доступность = Ложь;
		Если Форма.Элементы.Найти("СоздатьДокумент") <> Неопределено Тогда
			Форма.Элементы.СоздатьДокумент.Доступность = Ложь;
			ПолеРезультат.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Задание, "СтараяВерсия") Тогда
		СтараяВерсия = Форма.Задание.СтараяВерсия;
		Форма.Элементы.ГруппаПолейСодержания.Видимость = НЕ СтараяВерсия;
		
		Форма.Элементы.Содержание.Видимость = СтараяВерсия;
		Если ПолеРезультат <> Неопределено Тогда
			ПолеРезультат.Видимость = НЕ СтараяВерсия;
		КонецЕсли;
	КонецЕсли;
	СкрытьПустыеПоляГруппы(Форма, Форма.Элементы.ГруппаПолейСодержания);	
	
	Форма.Элементы.Содержание.Видимость = Форма.Элементы.Содержание.Видимость И НЕ (Форма.ЗаданиеСодержание = "");
	ДоступныеШаблоныОтветов = Справочники.ШаблоныОтветовНаЗаявкиКабинетСотрудника.ШаблоныОтветовПоТипуЗаявки(Форма.Задание.ТипЗаявкиКабинетСотрудника);
	Форма.Элементы.ШаблонОтвета.Видимость = (ДоступныеШаблоныОтветов.Количество() > 0);
	
КонецПроцедуры

Процедура СкрытьПустыеПоляГруппы(Форма, Группа)
	Для каждого ПодчиненныйЭлемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			СкрытьПустыеПоляГруппы(Форма, ПодчиненныйЭлемент);
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ДекорацияФормы") Тогда
			ПодчиненныйЭлемент.Видимость = Не ПустаяСтрока(ПодчиненныйЭлемент.Заголовок);
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
			ПутьКДанным = ПодчиненныйЭлемент.ПутьКДанным;
			Если СтрНайти(ПутьКДанным, ".") Тогда
				ПолеЗадания = СтрРазделить(ПутьКДанным, ".")[1];
				Реквизит = Форма.Задание[ПолеЗадания];
			Иначе
				Реквизит = Форма[ПутьКДанным]; 
			КонецЕсли;
			
			Если ТипЗнч(Реквизит) = Тип("Булево") Тогда
				ПодчиненныйЭлемент.Видимость = Реквизит;
			Иначе
				ПодчиненныйЭлемент.Видимость = ЗначениеЗаполнено(Реквизит);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьСтатусДокумента(Форма, Документ)
	
	Предмет = Документ[1];
	РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Проведен, ПометкаУдаления");
	
	Если Предмет.Пустая() Тогда
		Документ.СтатусДокумента = 0;	
	ИначеЕсли РеквизитыПредмета.Проведен Тогда
		Документ.СтатусДокумента = 1;
	ИначеЕсли РеквизитыПредмета.ПометкаУдаления Тогда
		Документ.СтатусДокумента = 3;
	Иначе
		Документ.СтатусДокумента = 0;
	КонецЕсли;
	
КонецПроцедуры

#Область ФайлыЗаявки

Процедура ОтразитьФайлыЗаявки(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ЗначенияРеквизитов = Новый Структура;
	Счетчик = 1;
	
	ВложенияЗаявкиСотрудника = БизнесПроцессыЗаявокСотрудников.ВложенияЗаявкиСотрудника(Форма.Задание.Ссылка);
	Для Каждого СтрокаВложения Из ВложенияЗаявкиСотрудника Цикл
		ИмяРеквизита = "ПрисоединенныйФайл" + Счетчик;
		Если Форма.Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
			НовыйЭлемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), Форма.Элементы.ГруппаФайлы);
			НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.Заголовок = СтрШаблон("%1.%2 (%3)",
											   СтрокаВложения.Наименование,
											   СтрокаВложения.Расширение,
											   БизнесПроцессыЗаявокСотрудниковКлиентСервер.РазмерФайлаСтрокой(СтрокаВложения.Размер));
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_ФайлНажатие");
			ИмяСправочника = СтрокаВложения.Ссылка.Метаданные().Имя;
			Реквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			ЗначенияРеквизитов.Вставить(ИмяРеквизита, СтрокаВложения.Ссылка);
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ЗаполнитьЗначенияСвойств(Форма, ЗначенияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

