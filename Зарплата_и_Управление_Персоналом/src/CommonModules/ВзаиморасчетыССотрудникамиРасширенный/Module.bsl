
#Область ПрограммныйИнтерфейс

// См. ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс
Процедура ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf75-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfc5-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf59-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НачальнаяЗадолженностьПоЗарплате);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	ВзаиморасчетыССотрудникамиБазовый.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	Списки.Вставить(Метаданные.Справочники.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением, Истина);
	Списки.Вставить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком, Истина);
	Списки.Вставить(Метаданные.Документы.НачальнаяЗадолженностьПоЗарплате, Истина);
	Списки.Вставить(Метаданные.Справочники.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ВедомостиНаВыплатуЗарплаты, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт

	ВзаиморасчетыССотрудникамиБазовый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
	Описание = Описание + "
	|Справочник.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВедомостьНаВыплатуЗарплатыПеречислениемПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВедомостьНаВыплатуЗарплатыРаздатчикомПрисоединенныеФайлы.Изменение.Организации
	|Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Чтение.ГруппыФизическихЛиц
	|Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Чтение.Организации
	|Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Изменение.ГруппыФизическихЛиц
	|Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Изменение.Организации
	|Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Чтение.ГруппыФизическихЛиц
	|Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Чтение.Организации
	|Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Изменение.ГруппыФизическихЛиц
	|Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Изменение.Организации
	|Документ.НачальнаяЗадолженностьПоЗарплате.Чтение.ГруппыФизическихЛиц
	|Документ.НачальнаяЗадолженностьПоЗарплате.Чтение.Организации
	|Документ.НачальнаяЗадолженностьПоЗарплате.Изменение.ГруппыФизическихЛиц
	|Документ.НачальнаяЗадолженностьПоЗарплате.Изменение.Организации
	|Справочник.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.НачальнаяЗадолженностьПоЗарплатеПрисоединенныеФайлы.Изменение.Организации
	|ЖурналДокументов.ВедомостиНаВыплатуЗарплаты.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ВедомостиНаВыплатуЗарплаты.Чтение.Организации
	|РегистрСведений.МестаВыплатыЗарплатыОрганизаций.Чтение.Организации
	|РегистрСведений.МестаВыплатыЗарплатыОрганизаций.Изменение.Организации
	|РегистрСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты.Чтение.Организации
	|РегистрСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Обслуживание обработки ПлатежиПоРезультатамРасчетаЗарплаты.

// Возвращает не включенные в ведомости остатки зарплаты к выплате.
//
// Параметры:
//		Организации - Массив - содержит ссылки на организации(СправочникСсылка.Организации),
//								по которым рассчитываются остатки.
//		ДатаАктуальности - Дата - определяет максимальный период взаиморасчетов.
//
// Возвращаемое значение:
//		ТаблицаЗначений:
//			* Организация 			- СправочникСсылка.Организации
//			* ПериодВзаиморасчетов 	- Дата 
//			* СтатьяФинансирования 	- СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов 		- СправочникСсылка.СтатьиРасходовЗарплата
//			* ДокументОснование 	- ОпределяемыйТип.ДокументОснованиеЗарплатыКВыплате
//			* Сумма 				- Число.
//
Функция ЗарплатаКВыплатеДляПлатежейПоРезультатамРасчета(Организации, ДатаАктуальности) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", КонецМесяца(ДатаАктуальности));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Организация КАК Организация,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|			,
	|			ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|				И Организация В (&Организации)) КАК ЗарплатаКВыплатеОстатки";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.113";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.УстановитьМежрасчетныйПорядокВыплатыПриОкончательномРасчетеПоОснованиям";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("864bb43d-5566-4ba6-a410-9fcaca1d9398"); 
	Обработчик.Комментарий = НСтр("ru = 'Установка порядка выплаты в межрасчет способов выплаты зарплаты с окончательным расчетом на основании межрасчетных документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.49";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26aa3b14-3050-421e-8544-0cca3c515b45");
	Обработчик.Процедура = "СпособыВыплатыЗарплатыРасширенный.ДобавитьВыплатуНачисленияЗарплаты";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способа выплаты зарплаты ""Начисление зарплаты"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.129";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5f553cc2-e865-4bc2-832d-7ec250c939eb"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства выплат прошлых периодов ведомостей на счета.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.129";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("46b5f8d2-cced-430c-8ae3-afbc84121c19"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства выплат прошлых периодов ведомостей через раздатчика.'");
	
КонецПроцедуры

// Для методов служебного API использование не контролируем          
// АПК:581-выкл 
// АПК:299-выкл

////////////////////////////////////////////////////////////////////////////////
// Настройки взаиморасчетов с сотрудниками

Функция НастройкиВзаиморасчетовССотрудниками() Экспорт
	
	НастройкиВзаиморасчетов = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(РегистрыСведений.НастройкиВзаиморасчетовССотрудниками.СоздатьМенеджерЗаписи(), Метаданные.РегистрыСведений.НастройкиВзаиморасчетовССотрудниками);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиВзаиморасчетов.ПроверятьЗаполнениеФинансированияВВедомостях КАК ПроверятьЗаполнениеФинансированияВВедомостях,
		|	НастройкиВзаиморасчетов.ПроверятьЗаполнениеСпособаРасчетовВВедомостях КАК ПроверятьЗаполнениеСпособаРасчетовВВедомостях,
		|	НастройкиВзаиморасчетов.ПроверятьСоответствиеНачисленийИВыплат КАК ПроверятьСоответствиеНачисленийИВыплат
		|ИЗ
		|	РегистрСведений.НастройкиВзаиморасчетовССотрудниками КАК НастройкиВзаиморасчетов";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(НастройкиВзаиморасчетов, Выборка);
		
	КонецЕсли; 
	
	Возврат НастройкиВзаиморасчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сторнирование и перерасчеты

// Сторнирует зарплату, зарегистрированную указанным документом в учете взаиморасчетов с сотрудниками.
//
// Параметры:
//	Движения             - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент - ДокументСсылка                - Документ, записи которого необходимо сторнировать.
//	ПериодРегистрации    - Дата                          - Период, которым будут зарегистрированы сторно-записи (первое число месяца периода регистрации)
//                                                         Если не указан, будут сохранены периоды регистрации
//                                                         сторнируемых движений
//  Записывать           - Булево                        - Если Истина, то наборы будут записаны сразу, если Ложь, то
//                                                         наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьНачисленнуюЗарплату(Движения, ИсправленныйДокумент, ПериодРегистрации = Неопределено, Записывать = Ложь) Экспорт
	
	ИмяУчета = "ВзаиморасчетыССотрудникамиРасширенный";
	НаборыЗаписей = ОбщегоНазначенияБЗК.ДвиженияВСтруктуру(Движения);
	
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	
	НаборЗаписей = Неопределено;
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		Если Не(НаборыЗаписей.Свойство(МетаданныеРегистра.Имя, НаборЗаписей)
			И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(НаборЗаписей, ИмяУчета)) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(
			НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра, Ложь);
			
		Если ПериодРегистрации <> Неопределено Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Период = ПериодРегистрации
			КонецЦикла;
		КонецЕсли;
		
		Если Записывать Тогда
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		Иначе
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МетаданныеРегистровПодсистемы() Экспорт
	
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.ВзаиморасчетыССотрудниками);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ЗарплатаКВыплате);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ЗарплатаКВыплатеАвансом);
	Регистры.Добавить(Метаданные.РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками);
	
	Возврат Регистры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка наличия начислений и выплат

// Проверяет, регистрировалась ли во взаиморасчетах выплата зарплаты по указанному документу-основанию или за указанный период.
//
// Параметры:
//		Организация 			- СправочникСсылка.Организация - организация, в которой проверяется наличие выплат.
//		ДокументОснование 		- Ссылка - Документ, по которому требуется проверить выплату зарплаты.
//		ПериодВзаиморасчетов 	- Дата - Период, за который требуется проверить выплату зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если по документу или за период взаиморасчетов выплачивалась зарплата, иначе Ложь.
//
Функция ВыплатаПроизводилась(Организация, ДокументОснование, ПериодВзаиморасчетов) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование) И ЗарегистрированаНачисленнаяЗарплатаДокументом(ДокументОснование) Тогда
		// Движения по документу были, значит определим была ли по этому документу выплата
		Возврат ЗарегистрированаВыплаченнаяЗарплатаПоДокументу(ДокументОснование);
	Иначе
		// Движений по документу не было, значит определим была ли выплата по периоду
		Возврат ЗарегистрированаВыплаченнаяЗарплатаЗаПериод(Организация, ПериодВзаиморасчетов);
	КонецЕсли;
	
КонецФункции

// Возвращает информацию о последнем периоде взаиморасчетов с сотрудниками.
//
// Возвращаемое значение:
//  - Период - Дата - дата последнего периода взаиморасчетов.
//
Функция ПоследнийПериодВзаиморасчетовССотрудниками() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаиморасчетыССотрудниками.ПериодВзаиморасчетов КАК Период
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТПериоды.Период) КАК Период
		|ИЗ
		|	ВТПериоды КАК ВТПериоды";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Период;		
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Места выплаты зарплаты

Функция ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() Экспорт
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыОрганизаций() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
КонецФункции	

Функция ДоступноЧтениеМестВыплатыЗарплатыПодразделений() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыПодразделений);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыПодразделений() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() 
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыПодразделений);
КонецФункции	

Функция ДоступноЧтениеМестВыплатыЗарплатыСотрудников() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыПодразделений() 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыСотрудников() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыПодразделений() 
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников);
КонецФункции	

// Возвращает информацию о настройке места выплаты для организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций
//
Функция МестоВыплатыЗарплатыОрганизации(Организация) Экспорт
	
	МестоВыплатыЗарплатыОрганизации = РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыОрганизации.Организация = Организация;
	МестоВыплатыЗарплатыОрганизации.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыОрганизации.Выбран() Тогда
		МестоВыплатыЗарплатыОрганизации.Организация = Организация;
		МестоВыплатыЗарплатыОрганизации.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса
	КонецЕсли;	
	
	Возврат МестоВыплатыЗарплатыОрганизации
	
КонецФункции

// Возвращает информацию о настройке места выплаты для подразделения.
//
// Параметры:
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений
//
Функция МестоВыплатыЗарплатыПодразделения(Подразделение, Знач Организация = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Владелец");
	КонецЕсли;	
	
	МестоВыплатыЗарплатыПодразделения = РегистрыСведений.МестаВыплатыЗарплатыПодразделений.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыПодразделения.Подразделение	= Подразделение;
	МестоВыплатыЗарплатыПодразделения.Организация	= Организация;
	
	МестоВыплатыЗарплатыПодразделения.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыПодразделения.Выбран() Тогда
		МестоВыплатыЗарплатыПодразделения.Подразделение = Подразделение;
		МестоВыплатыЗарплатыПодразделения.Организация	= Организация;
	КонецЕсли;	
		
	Возврат МестоВыплатыЗарплатыПодразделения
	
КонецФункции

// Возвращает информацию о месте выплаты подразделения с учетом организации.
//
// Параметры:
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//	Иерархически  - булево, учитывать ли место выплаты организации.
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций.
//	или Неопределено
//
Функция МестоВыплатыЗарплатыПодразделенияОрганизации(Подразделение) Экспорт
	
	МестоВыплаты = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ МестаВыплатыЗарплатыПодразделений.Вид ЕСТЬ NULL 
	|			ТОГДА МестаВыплатыЗарплатыПодразделений.Подразделение
	|		КОГДА НЕ МестаВыплатыЗарплатыОрганизаций.Вид ЕСТЬ NULL 
	|			ТОГДА МестаВыплатыЗарплатыОрганизаций.Организация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Источник,
	|	ЕСТЬNULL(МестаВыплатыЗарплатыПодразделений.Вид, МестаВыплатыЗарплатыОрганизаций.Вид) КАК Вид,
	|	ЕСТЬNULL(МестаВыплатыЗарплатыПодразделений.МестоВыплаты, МестаВыплатыЗарплатыОрганизаций.МестоВыплаты) КАК МестоВыплаты,
	|	ПодразделенияОрганизаций.Владелец КАК Организация
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
	|		ПО (МестаВыплатыЗарплатыПодразделений.Подразделение = ПодразделенияОрганизаций.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
	|		ПО (МестаВыплатыЗарплатыОрганизаций.Организация = ПодразделенияОрганизаций.Владелец)
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Подразделение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыПодразделений.СоздатьМенеджерЗаписи();
			МестоВыплаты.Подразделение	= Выборка.Источник;
			МестоВыплаты.Организация	= Выборка.Организация;
			МестоВыплаты.Вид			= Выборка.Вид;
			МестоВыплаты.МестоВыплаты = Выборка.МестоВыплаты;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.Организации") Тогда
			МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
			МестоВыплаты.Организация	= Выборка.Организация;
			МестоВыплаты.Вид			= Выборка.Вид;
			МестоВыплаты.МестоВыплаты	= Выборка.МестоВыплаты;
		Иначе	
			МестоВыплаты = Неопределено
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат МестоВыплаты
	
КонецФункции

// Возвращает информацию о настройке места выплаты зарплаты сотрудника.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыСотрудников
//
Функция МестоВыплатыЗарплатыСотрудника(Сотрудник, Знач ФизическоеЛицо = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;	
	
	МестоВыплатыЗарплатыСотрудника = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыСотрудника.Сотрудник		= Сотрудник;
	МестоВыплатыЗарплатыСотрудника.ФизическоеЛицо	= ФизическоеЛицо;
	МестоВыплатыЗарплатыСотрудника.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыСотрудника.Выбран() Тогда
		МестоВыплатыЗарплатыСотрудника.Сотрудник		= Сотрудник;
		МестоВыплатыЗарплатыСотрудника.ФизическоеЛицо	= ФизическоеЛицо
	КонецЕсли;	
	
	Возврат МестоВыплатыЗарплатыСотрудника
	
КонецФункции

// Возвращает информацию о настройке места выплаты зарплаты сотрудника с учетом подразделения.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение
//	РегистрСведенийМенеджер.МестаВыплатыЗарплатыСотрудников,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций.
//	или Неопределено
//
Функция МестоВыплатыЗарплатыСотрудникаПодразделения(Сотрудник, Знач ФизическоеЛицо, Подразделение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;	
	
	МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МестоВыплаты.Сотрудник		= Сотрудник;
	МестоВыплаты.ФизическоеЛицо	= ФизическоеЛицо;
	МестоВыплаты.Прочитать();
	
	Если НЕ МестоВыплаты.Выбран() Тогда
		МестоВыплаты = МестоВыплатыЗарплатыПодразделенияОрганизации(Подразделение);
	КонецЕсли;	
	
	Возврат МестоВыплаты
	
КонецФункции

// Возвращает информацию о местах выплаты зарплаты сотрудников.
//
// Параметры:
//	Сотрудники - массив СправочникСсылка.Сотрудники.
//	ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение
//		Таблица значений с колонками:
//			- Сотрудник (СправочникСсылка.Сотрудники)
//			- Вид (ПеречислениеСсылка.ВидыМестВыплатыЗарплаты)
//			- МестоВыплаты.
//
Функция МестаВыплатыЗарплатыСотрудников(Сотрудники, ВидыМестВыплаты = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники",		Сотрудники);
	Запрос.УстановитьПараметр("ВидыМестВыплаты",?(ВидыМестВыплаты = Неопределено, Перечисления.ВидыМестВыплатыЗарплаты.ВсеЗначения(), ВидыМестВыплаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестаВыплатыЗарплатыСотрудников.Сотрудник КАК Сотрудник,
	|	МестаВыплатыЗарплатыСотрудников.МестоВыплаты КАК МестоВыплаты
	|ИЗ
	|	РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|ГДЕ
	|	МестаВыплатыЗарплатыСотрудников.Сотрудник В(&Сотрудники)
	|	И МестаВыплатыЗарплатыСотрудников.Вид В(&ВидыМестВыплаты)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает представление места выплаты зарплаты в виде строки.
//
// Параметры:
//	МестоВыплатыЗарплаты - РегистрСведенийМенеджер регистра МестоВыплатыЗарплаты (Организаций, Подразделений,
//	                       Сотрудников).
//	ПредставлениеНеуказанного - необязательная строка с текстом представления незаданного места выплаты.
//
// Возвращаемое значение
//	строка
//
Функция ПредставлениеМестаВыплатыЗарплаты(МестоВыплатыЗарплаты, ПредставлениеНеуказанного = "") Экспорт
	
	МестаВыплатыЗарплаты = Новый Массив;
	МестаВыплатыЗарплаты.Добавить(МестоВыплатыЗарплаты);
	
	ПредставленияНазначенийМестВыплаты = Новый Соответствие;
	ПредставленияНазначенийМестВыплаты.Вставить(
		Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций"), 
		НСтр("ru = 'Как всему подразделению:'"));
	ПредставленияНазначенийМестВыплаты.Вставить(
		Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений"), 
		НСтр("ru = 'Как всему подразделению:'"));

	ПредставленияМестВыплатыЗарплаты = ПредставленияМестВыплатыЗарплаты(МестаВыплатыЗарплаты, ПредставленияНазначенийМестВыплаты);
	
	ПредставлениеМестаВыплатыЗарплаты = ПредставленияМестВыплатыЗарплаты[МестоВыплатыЗарплаты];
	ПредставлениеМестаВыплатыЗарплаты = ?(ЗначениеЗаполнено(ПредставлениеМестаВыплатыЗарплаты), ПредставлениеМестаВыплатыЗарплаты, ПредставлениеНеуказанного); 
	
	Возврат ПредставлениеМестаВыплатыЗарплаты
	
КонецФункции	

// Возвращает представление мест выплаты зарплаты в виде соответствия место - представление.
//
// Параметры:
//	МестаВыплатыЗарплаты - массив элементов РегистрСведенийМенеджер одного из регистров МестоВыплатыЗарплаты
//	                       (Организаций, Подразделений, Сотрудников).
//	ПредставленияНазначенийМестВыплаты - соответствие (тип менеджера регистра сведений) - представление назначения.
//		Например Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений") - "Как всему подразделению:".
//
// Возвращаемое значение
//	соответствие
//
Функция ПредставленияМестВыплатыЗарплаты(МестаВыплатыЗарплаты, ПредставленияНазначенийМестВыплаты) Экспорт
	
	ПредставленияМестВыплатыЗарплаты = Новый Соответствие;
	
	МестаВыплаты = Новый ТаблицаЗначений;
	МестаВыплаты.Колонки.Добавить("Ссылка", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников.Ресурсы.МестоВыплаты.Тип);
	Для Каждого МестоВыплатыЗарплаты Из МестаВыплатыЗарплаты Цикл
		Если МестоВыплатыЗарплаты <> Неопределено Тогда
			МестоВыплаты = МестаВыплаты.Добавить();
			МестоВыплаты.Ссылка = МестоВыплатыЗарплаты.МестоВыплаты;
		КонецЕсли	
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МестаВыплаты", МестаВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВыплаты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТМестаВыплаты
	|ИЗ
	|	&МестаВыплаты КАК МестаВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВыплаты.Ссылка КАК МестоВыплаты,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(МестаВыплаты.Ссылка) КАК Представление
	|ИЗ
	|	ВТМестаВыплаты КАК МестаВыплаты";
	
	ВыборкаПредставлений = Запрос.Выполнить().Выбрать();
	
	СтрокаПодстановкиМестоЕсть	= НСтр("ru = '%1 %2 «%3»'");
	СтрокаПодстановкиМестоПустое= НСтр("ru = '%1 %2'");
	
	Для Каждого МестоВыплатыЗарплаты Из МестаВыплатыЗарплаты Цикл
		
		Представление = "";
		
		ВыборкаПредставлений.Сбросить();
		Если МестоВыплатыЗарплаты <> Неопределено И ВыборкаПредставлений.НайтиСледующий(МестоВыплатыЗарплаты.МестоВыплаты, "МестоВыплаты") Тогда
			Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
				
				СтрокаПодстановки = ?(ЗначениеЗаполнено(ВыборкаПредставлений.Представление), СтрокаПодстановкиМестоЕсть, СтрокаПодстановкиМестоПустое);
				
				ПредставлениеНазначенияМестаВыплаты = ПредставленияНазначенийМестВыплаты[ТипЗнч(МестоВыплатыЗарплаты)];
				ПредставлениеНазначенияМестаВыплаты = ?(ЗначениеЗаполнено(ПредставлениеНазначенияМестаВыплаты), ПредставлениеНазначенияМестаВыплаты, "");

				Представление = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						СтрокаПодстановки, 
						ПредставлениеНазначенияМестаВыплаты, 
						МестоВыплатыЗарплаты.Вид, 
						ВыборкаПредставлений.Представление)
			КонецЕсли;              
		КонецЕсли;              
					
		ПредставленияМестВыплатыЗарплаты.Вставить(МестоВыплатыЗарплаты, СокрЛП(Представление))
		
	КонецЦикла;	
	
	Возврат ПредставленияМестВыплатыЗарплаты;
	
КонецФункции	

// Проверяет информацию о настройке мест выплаты для организации.
//
// Параметры:
//	МестоВыплатыЗарплатыОрганизации 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыОрганизации(МестоВыплатыЗарплатыОрганизации, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыОрганизации, 
		РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Проверяет информацию о настройке мест выплаты для подразделения.
//
// Параметры:
//	МестоВыплатыЗарплатыПодразделения 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыПодразделения(МестоВыплатыЗарплатыПодразделения, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыПодразделения, 
		РегистрыСведений.МестаВыплатыЗарплатыПодразделений.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Проверяет информацию о настройке мест выплаты для подразделения.
//
// Параметры:
//	МестоВыплатыЗарплатыСотрудника 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыСотрудников
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыСотрудника(МестоВыплатыЗарплатыСотрудника, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыСотрудника, 
		РегистрыСведений.МестаВыплатыЗарплатыСотрудников.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Сохраняет информацию о настройке места выплаты.
//
// Параметры:
//	МестоВыплатыЗарплаты - РегистрСведенийМенеджерЗаписи регистра МестоВыплатыЗарплаты (Организаций, Подразделений,
//	                       Сотрудников).
//
Процедура ЗаписатьМестоВыплатыЗарплаты(МестоВыплатыЗарплаты) Экспорт
	
	Если МестоВыплатыЗарплаты.Модифицированность() Тогда
		Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
			МестоВыплатыЗарплаты.МестоВыплаты = ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты);
			МестоВыплатыЗарплаты.Записать();
		Иначе	
			МестоВыплатыЗарплаты.Удалить();
		КонецЕсли	
	КонецЕсли	
	
КонецПроцедуры

// Обработчик события ПередЗаписью модулей наборов записей регистров мест выплаты
//
// Параметры:
//	НаборЗаписей - РегистрСведенийНаборЗаписей
//	Отказ - Булево - Признак отказа от записи 
//	Замещение - Булево - Режим записи набора.
//	
Процедура МестаВыплатыЗарплатыПередЗаписью(НаборЗаписей, Отказ, Замещение) Экспорт
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаборЗаписей.Метаданные().ПолноеИмя());
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если МенеджерРегистра.ДопустимыеВидыМестВыплаты().Найти(Запись.Вид) = Неопределено Тогда
			ТекстСообщения = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недопустимый вид выплаты (%1)'"),
					Запись.Вид);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
		КонецЕсли;	
		
		ОписаниеТипов = ОписаниеТипаМестаВыплатыПоВиду(Запись.Вид); 
		
		Если ОписаниеТипов = Неопределено Тогда
			Запись.МестоВыплаты = Неопределено
		Иначе
			Если ЗначениеЗаполнено(Запись.МестоВыплаты) И НЕ ОписаниеТипов.СодержитТип(ТипЗнч(Запись.МестоВыплаты)) Тогда
				ТекстСообщения = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место выплаты (%2) не соответствует виду выплаты (%1)'"),
						Запись.Вид, Запись.МестоВыплаты);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
			КонецЕсли;
			Запись.МестоВыплаты = ОписаниеТипов.ПривестиЗначение(Запись.МестоВыплаты);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Возвращает описание типов, соответствующее виду места выплаты.
//
// Параметры:
//	ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение
//	ОписаниеТипов
//
Функция ОписаниеТипаМестаВыплатыПоВиду(ВидМестаВыплаты) Экспорт
	
	ОписаниеТипов = Неопределено;

	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ЗарплатныеПроекты");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	КонецЕсли;	
	
	Возврат ОписаниеТипов
	
КонецФункции	

// АПК:299-вкл
// АПК:581-вкл

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////
/// Учет начисленной и выплаченной зарплаты.

Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Начисления, Удержания);
	
	/// Регистрация порядка выплаты документа
	ЕстьДвижениеПорядокВыплатыДокументов = Ложь;
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		ЕстьДвижениеПорядокВыплатыДокументов = Движения.Свойство("ПорядокВыплатыДокументов");
	Иначе
		ЕстьДвижениеПорядокВыплатыДокументов = Движения.Найти("ПорядокВыплатыДокументов") <> Неопределено;
	КонецЕсли;
	
	Если ЕстьДвижениеПорядокВыплатыДокументов Тогда
		Если Движения.ПорядокВыплатыДокументов.Количество() = 0 Тогда 
			ПорядокВыплатыДокумента = Движения.ПорядокВыплатыДокументов.Добавить();
			ПорядокВыплатыДокумента.ДокументОснование = Движения.ЗарплатаКВыплате.Отбор.Регистратор.Значение;
			ПорядокВыплатыДокумента.ПорядокВыплаты    = ПорядокВыплаты;
			Движения.ПорядокВыплатыДокументов.Записывать = Истина;
		Иначе
			ПорядокВыплатыДокумента = Движения.ПорядокВыплатыДокументов[0];
			Если ПорядокВыплатыДокумента.ПорядокВыплаты <> ПорядокВыплаты Тогда
				 ВызватьИсключение НСтр("ru = 'Все выплаты по документу должны иметь одинаковый порядок выплаты'")
			КонецЕсли	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Зарплата) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Зарплата)
КонецПроцедуры

Процедура ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки)
КонецПроцедуры

Процедура ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ПорядокВыплаты) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ПорядокВыплаты)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции создания ведомостей на выплату зарплаты.

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда
		ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод
	Иначе	
		ВидВзаиморасчетов = ВзаиморасчетыССотрудникамиБазовый.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты)
	КонецЕсли;
	
	Возврат ВидВзаиморасчетов
	
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) Экспорт
	
	Если Параметры.СпособПолучения = Перечисления.СпособыПолученияЗарплатыКВыплате.Аванс Тогда 
		СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники);
	ИначеЕсли Параметры.СпособПолучения = Перечисления.СпособыПолученияЗарплатыКВыплате.ОтдельныйРасчет Тогда 
		СоздатьВТЗарплатаКВыплатеМежрасчет(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	Иначе	
		ВзаиморасчетыССотрудникамиБазовый.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	КонецЕсли;
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) 
	
	// аванс при наличии окончательного расчета по сотруднику не выплачивается
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиБезОкончательногоРасчета
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник
	|				ИЗ
	|					РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|				ГДЕ
	|					ВзаиморасчетыССотрудниками.Период = &ПериодРегистрации
	|					И ВзаиморасчетыССотрудниками.Организация = &Организация
	|					И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты)
	|					И НЕ ВзаиморасчетыССотрудниками.Регистратор В (&ИгнорируемыеРегистраторы)
	|					И ВзаиморасчетыССотрудниками.Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ВзаиморасчетыССотрудникамиБазовый.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, "ВТСотрудникиБезОкончательногоРасчета");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТСотрудникиБезОкончательногоРасчета");
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Основания", Параметры.ДокументыОснования);	
	
	Запрос.Текст =
	// Как указанные документы-основания, так и сторнированные ими документы.
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.ДокументОснование КАК Документ
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И (ЗарплатаКВыплате.ДокументОснование = ЗарплатаКВыплате.Регистратор
	|			ИЛИ ЗарплатаКВыплате.Сторно)
	|	И ЗарплатаКВыплате.ДокументОснование <> НЕОПРЕДЕЛЕНО"
	
	+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + //АПК:102
	
	// Документы-основания, зарегистрированные в старых релизах 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И ЗарплатаКВыплате.ДокументОснование = НЕОПРЕДЕЛЕНО
	|	И ЗарплатаКВыплате.УдалитьДокументОснование <> НЕОПРЕДЕЛЕНО";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	// Остатки сумм к выплате по указанным сотрудникам и документам
	СоздатьВТЗарплатаКВыплатеМежрасчет3022(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, РезультатыЗапросов[0].Выгрузить().ВыгрузитьКолонку("Документ"));
	СоздатьВТЗарплатаКВыплатеМежрасчет3021(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, РезультатыЗапросов[1].Выгрузить().ВыгрузитьКолонку("Документ"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеМежрасчет.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеМежрасчет.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеМежрасчет.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеМежрасчет.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеМежрасчет.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ЗарплатаКВыплатеМежрасчет.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплатеМежрасчет.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеМежрасчет3022 КАК ЗарплатаКВыплатеМежрасчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеМежрасчет.Сотрудник,
	|	ЗарплатаКВыплатеМежрасчет.ФизическоеЛицо,
	|	ЗарплатаКВыплатеМежрасчет.Подразделение,
	|	ЗарплатаКВыплатеМежрасчет.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяФинансирования,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяРасходов,
	|	ЗарплатаКВыплатеМежрасчет.ВидДоходаИсполнительногоПроизводства,
	|	ЗарплатаКВыплатеМежрасчет.ДокументОснование,
	|	ЗарплатаКВыплатеМежрасчет.КВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеМежрасчет3021 КАК ЗарплатаКВыплатеМежрасчет";

  	Запрос.Выполнить();
	
	УдаляемыеВТ = Новый Массив;
	УдаляемыеВТ.Добавить("ВТЗарплатаКВыплатеМежрасчет3021");
	УдаляемыеВТ.Добавить("ВТЗарплатаКВыплатеМежрасчет3022");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдаляемыеВТ);
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет3022(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, ДокументыОснования)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",              Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",     КонецМесяца(Параметры.ПериодРегистрации));
	Запрос.УстановитьПараметр("СтатьяФинансирования",     Параметры.СтатьяФинансирования);
	Запрос.УстановитьПараметр("СтатьяРасходов",           Параметры.СтатьяРасходов);
	Запрос.УстановитьПараметр("ВидыДоходов",              Параметры.ВидыДоходов);	
	Запрос.УстановитьПараметр("Основания",                ДокументыОснования);	
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", Параметры.ИгнорируемыеРегистраторы);	
	
	// Остатки сумм к выплате по указанным сотрудникам и документам
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеМежрасчет3022
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|		ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				,
	|				ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|					И Организация = &Организация
	|					И &ОтборПоСтатьям
	|					И ВидДоходаИсполнительногоПроизводства В (&ВидыДоходов)
	|					И Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники)
	|					И ДокументОснование В (&Основания)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|		И ЗарплатаКВыплате.Организация = &Организация
	|		И &ОтборПоСтатьям
	|		И ВидДоходаИсполнительногоПроизводства В (&ВидыДоходов)
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)
	|		И ЗарплатаКВыплате.ДокументОснование В(&Основания)) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ВидДоходаИсполнительногоПроизводства,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование";
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ОтборПоСтатьям", 
		ВзаиморасчетыССотрудниками.ОтборПоСтатьямЗарплатыКВыплате(Параметры));
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"#ВТСотрудники", 
		ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет3021(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, ДокументыОснования)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",          Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",    Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("СтатьяФинансирования", Параметры.СтатьяФинансирования);
	Запрос.УстановитьПараметр("СтатьяРасходов",       Параметры.СтатьяРасходов);
	Запрос.УстановитьПараметр("ВидыДоходов",          Параметры.ВидыДоходов);	
	Запрос.УстановитьПараметр("Основания",            ДокументыОснования);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ЗарплатаКВыплате.Регистратор КАК ДокументОснование,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеМежрасчет3021
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ЗарплатаКВыплате.Организация = &Организация
	|	И &ОтборПоСтатьям
	|	И ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства В(&ВидыДоходов)
	|	И ЗарплатаКВыплате.Сотрудник В
	|			(ВЫБРАТЬ
	|				Сотрудники.Сотрудник
	|			ИЗ
	|				#ВТСотрудники КАК Сотрудники)
	|	И ЗарплатаКВыплате.Регистратор В(&Основания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства,
	|	ЗарплатаКВыплате.Регистратор";
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ОтборПоСтатьям", 
		ВзаиморасчетыССотрудниками.ОтборПоСтатьямЗарплатыКВыплате(Параметры));
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"#ВТСотрудники", 
		ИмяВТСотрудники);
	
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные) Экспорт
	
	// Получаем плановые авансы по настройкам
	
	Если Не ПустаяСтрока(КадровыеДанные) Тогда
		КадровыеДанные = КадровыеДанные + ",";
	КонецЕсли;
	КадровыеДанные = КадровыеДанные + "ТерриторияВыполненияРаботВОрганизации";
	
	ВзаиморасчетыССотрудникамиБазовый.СоздатьВТПлановыйАванс(
		МенеджерВременныхТаблиц, 
		ТолькоРазрешенные, 
		Параметры, 
		ИмяВТСотрудники, 
		КадровыеДанные);
	
	// Перемещаем полученные авансы в служебную таблицу
	// Готовим фильтры для обращения к подсистемам.

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыйАванс.Сотрудник КАК Сотрудник,
	|	ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыйАванс.Подразделение КАК Подразделение,
	|	ПлановыйАванс.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ПлановыйАванс.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ПлановыйАванс.СтатьяРасходов КАК СтатьяРасходов,
	|	ПлановыйАванс.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ПлановыйАванс.СуммаКВыплате КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАвансБазовый
	|ИЗ
	|	ВТПлановыйАванс КАК ПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлановыйАванс.Сотрудник КАК Сотрудник,
	|	ПлановыйАванс.Подразделение КАК Подразделение,
	|	ПлановыйАванс.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	&Дата КАК Период,
	|	&Организация КАК Организация
	|ПОМЕСТИТЬ ВТСотрудникиПодразделенияПериоды
	|ИЗ
	|	ВТПлановыйАвансБазовый КАК ПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиПодразделенияПериоды.Сотрудник КАК Сотрудник,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТСотрудникиПодразделенияПериоды КАК СотрудникиПодразделенияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАванс";
	
	Запрос.Выполнить();
	
	// Определяем сотрудников в состоянии, исключающем получение аванса.
	СоздатьВТСотрудникиНеПолучающиеАванс(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", Параметры);	
	
	// Получаем применение плановых начислений сотрудников.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеПлановыхНачислений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"));
	
	// Определяем источники финансирования зарплаты сотрудников.
	ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(
		МенеджерВременныхТаблиц,
		"ВТСотрудникиПодразделенияПериоды");
		
	// Заполняем источники финансирования
	// Обнуляем суммы отсутствующим.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансБазовый.Сотрудник КАК Сотрудник,
	|	АвансБазовый.ФизическоеЛицо КАК ФизическоеЛицо,
	|	АвансБазовый.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(Бухучет.СтатьяФинансирования, АвансБазовый.СтатьяФинансирования) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(Бухучет.СтатьяРасходов, АвансБазовый.СтатьяРасходов) КАК СтатьяРасходов,
	|	АвансБазовый.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ВЫБОР
	|		КОГДА СотрудникиНеПолучающиеАванс.Сотрудник ЕСТЬ NULL
	|				И ЕСТЬNULL(ПрименениеПлановыхНачислений.Применение, ИСТИНА)
	|			ТОГДА АвансБазовый.СуммаКВыплате
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАванс
	|ИЗ
	|	ВТПлановыйАвансБазовый КАК АвансБазовый
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК Бухучет
	|		ПО АвансБазовый.Сотрудник = Бухучет.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиНеПолучающиеАванс КАК СотрудникиНеПолучающиеАванс
	|		ПО АвансБазовый.Сотрудник = СотрудникиНеПолучающиеАванс.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
	|		ПО АвансБазовый.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник";
	
 	Запрос.Выполнить();
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТПлановыйАвансБазовый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСведенияОБухучетеЗарплатыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиНеПолучающиеАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачисленийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПодразделенияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПериоды";

 	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиНеПолучающиеАванс(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, Параметры)
	
	Сутки = 86400;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	НачалоПериода	= Параметры.Дата - (15-1)*Сутки;
	КонецПериода	= Параметры.Дата;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВременнойТаблицы);
	
	
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	СостоянияИсключающиеАванс = Новый Массив;
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.БолезньБезОплаты);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам);
	
	СостоянияСотрудников.СоздатьВТСостоянияСотрудников(
		МенеджерВременныхТаблиц,
		Сотрудники,
		СостоянияИсключающиеАванс,
		НачалоПериода, КонецПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);		
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);		
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияСотрудников.Сотрудник,
	|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
	|				КОГДА СостоянияСотрудников.Начало < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ СостоянияСотрудников.Начало
	|			КОНЕЦ, ВЫБОР
	|				КОГДА СостоянияСотрудников.Окончание > &КонецПериода
	|						ИЛИ СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ СостоянияСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) КАК Продолжительность
	|ПОМЕСТИТЬ ВТСотрудникиНеПолучающиеАванс
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияСотрудников.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
	|				КОГДА СостоянияСотрудников.Начало < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ СостоянияСотрудников.Начало
	|			КОНЕЦ, ВЫБОР
	|				КОГДА СостоянияСотрудников.Окончание > &КонецПериода
	|						ИЛИ СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ СостоянияСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) >= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ) + 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСостоянияСотрудников";
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Места выплаты зарплаты

Процедура ПроверитьМестоВыплатыЗарплаты(МестоВыплатыЗарплаты, ДопустимыеВидыМестВыплаты, Отказ)
	
	Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
		
		ТекстСообщения = "";
		
		Если ДопустимыеВидыМестВыплаты.Найти(МестоВыплатыЗарплаты.Вид) = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Недопустимый вид места выплаты зарплаты'");
		ИначеЕсли МестоВыплатыЗарплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
			Если НЕ ЗначениеЗаполнено(ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан банковский счет'");
			КонецЕсли	
		ИначеЕсли МестоВыплатыЗарплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда	
			Если НЕ ЗначениеЗаполнено(ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан раздатчик'");
			КонецЕсли	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
		КонецЕсли;	
		
	КонецЕсли	
	
КонецПроцедуры

Функция ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)
	
	ОписаниеТипов = ОписаниеТипаМестаВыплатыПоВиду(МестоВыплатыЗарплаты.Вид);
	
	Если ОписаниеТипов <> Неопределено Тогда
		ПриведенноеЗначениеМестаВыплаты = ОписаниеТипов.ПривестиЗначение(МестоВыплатыЗарплаты.МестоВыплаты);
	Иначе
		ПриведенноеЗначениеМестаВыплаты = Неопределено
	КонецЕсли;	
	
	Возврат ПриведенноеЗначениеМестаВыплаты;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Проверка наличия начислений и выплат

// Проверяет, регистрировалось ли во взаиморасчетах начисление зарплаты указанным документом.
//
// Параметры:
//		ДокументОснование - Ссылка - Документ, по которому требуется проверить регистрацию начисленной зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если документом регистрировалась зарплата к выплате, иначе Ложь.
//
Функция ЗарегистрированаНачисленнаяЗарплатаДокументом(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗарегистрированаНачисленнаяЗарплатаДокументом
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ЗарплатаКВыплате.Регистратор = &ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет, регистрировалась ли во взаиморасчетах выплата зарплаты по указанному документу-основанию.
//
// Параметры:
//		ДокументОснование - Ссылка - Документ, по которому требуется проверить выплату зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если по документу выплачивалась зарплата, иначе Ложь.
//
Функция ЗарегистрированаВыплаченнаяЗарплатаПоДокументу(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗарегистрированаВыплаченнаяЗарплатаПоДокументу
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаКВыплате.ДокументОснование = &ДокументОснование
	|	И ЗарплатаКВыплате.Регистратор <> &ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет, регистрировалась ли во взаиморасчетах выплата зарплаты за указанный период.
//
// Параметры:
//		Организация          - СправочникСсылка.Организация - организация, в которой проверяется наличие выплат.
//		ПериодВзаиморасчетов - Дата                         - Период, за который требуется проверить выплату зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если за период взаиморасчетов выплачивалась зарплата, иначе Ложь.
//
Функция ЗарегистрированаВыплаченнаяЗарплатаЗаПериод(Организация, ПериодВзаиморасчетов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", НачалоМесяца(ПериодВзаиморасчетов));
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗарегистрированаВыплаченнаяЗарплатаЗаПериод
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
		|ГДЕ
		|	ВзаиморасчетыССотрудниками.Организация = &Организация
		|	И ВзаиморасчетыССотрудниками.ПериодВзаиморасчетов = &ПериодВзаиморасчетов
		|	И ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты)";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти