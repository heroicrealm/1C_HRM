////////////////////////////////////////////////////////////////////////////////
// Подсистема "Статистика персонала".
// Процедуры и функции, предназначенные для форм статистической отчетности.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Должности

Процедура ГруппаКатегорииДополнитьФорму(Форма, ТолькоПросмотр = Ложь) Экспорт
	
	НастройкиСтатистики = НастройкиСтатистикиПерсонала();
	Если НастройкиСтатистики.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы 
		И ЗначениеЗаполнено(НастройкиСтатистики.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"Заголовок",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка отчетности %1'"), 
				НастройкиСтатистики.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"Подсказка",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сведения по численности и оплате труда работников этой должности будут включены в указанную строку отчета по статистическому наблюдению по форме %1'"), 
				НастройкиСтатистики.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы));
				
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"ТолькоПросмотр",
			Форма.ТолькоПросмотр ИЛИ ТолькоПросмотр);
				
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"Видимость",
			Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ГруппаКатегорииДополнитьФорму(Форма, ТолькоПросмотр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжности(Форма, Должность, ЗначениеКопирования = Неопределено) Экспорт	
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Должность = Должность;
		МенеджерЗаписи.Прочитать();
		
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			Выборка = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Выбрать(Новый Структура("Должность", ЗначениеКопирования));
			Если Выборка.Следующий() Тогда 
				МенеджерЗаписи.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = Выборка.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПрочитатьДополнительныеДанныеДолжностиСтатистика(Форма, Должность, ЗначениеКопирования);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеДолжности(Форма, Ссылка) Экспорт
	
	Если  ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы")
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы);
		МенеджерЗаписи.Должность = Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ЗаписатьДополнительныеДанныеДолжностиСтатистика(Форма, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтатноеРасписание

Процедура ПриПолученииВнешнихДанныхПозицииШтатногоРасписания(Форма, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Должность = ДанныеПозиции.ПозицияШтатногоРасписания; 
	МенеджерЗаписи.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = ДанныеПозиции.КатегорияПерсонала; 

	ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы);
	
КонецПроцедуры

Процедура ПоместитьКатегориюПерсоналаВОписаниеПозиции(Форма, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПозиции.Вставить("КатегорияПерсонала", Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы);
		
КонецПроцедуры

Функция ТекстЗапросаВТКатегорииПерсоналаПоПозициям(ИмяВТ = "ВТВсеПозицииНаДатуАктуальности", ИмяПоляПозиция = "ПозицияШтатногоРасписания") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Позиция,
		|	NULL КАК КатегорияПерсонала
		|ПОМЕСТИТЬ ВТКатегорииПерсоналаПоПозициям";
		
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КатегорииПерсоналаПоПозициям.Должность КАК Позиция,
			|	КатегорииПерсоналаПоПозициям.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы КАК КатегорияПерсонала
			|ПОМЕСТИТЬ ВТКатегорииПерсоналаПоПозициям
			|ИЗ
			|	РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК КатегорииПерсоналаПоПозициям
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеПозицииНаДатуАктуальности КАК ВсеПозицииНаДатуАктуальности
			|		ПО (КатегорииПерсоналаПоПозициям.Должность = &ИмяПоляПозиция)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляПозиция", "ВсеПозицииНаДатуАктуальности." + ИмяПоляПозиция);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТВсеПозицииНаДатуАктуальности", ИмяВТ);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьКатегориюПерсоналаПоДолжности(Форма, Должность) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Должность = Должность;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Должность = Форма.Объект.Ссылка;
		ЗаполнитьЗначенияСвойств(Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы, МенеджерЗаписи, "СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы");
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписьюДокументовИзмененияШтатногоРасписания(СтрокиСозданныхПозиций) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПозиции Из СтрокиСозданныхПозиций Цикл
		
		МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Должность = СтрокаПозиции.Должность;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписиПозиции = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиПозиции, МенеджерЗаписи);
			
			МенеджерЗаписиПозиции.Должность = СтрокаПозиции.Позиция;
			МенеджерЗаписиПозиции.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

// См. УправлениеШтатнымРасписанием.ОписаниеИсточниковСведенийОШтатномРасписании.
Процедура ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников) Экспорт
	
	// Добавление описания сведений категории персонала.
	
	ИдентификаторИсточника = "РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы";
	ОписаниеИсточника = УправлениеШтатнымРасписанием.ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "КатегорияПерсонала";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		
		УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
			"РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы");
		
		Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			
			ОписаниеИсточника.ТекстСоединений = "
				|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
				|		ПО РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Должность}";
			
		Иначе
			
			ОписаниеИсточника.ТекстСоединений = "
				|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
				|		ПО СправочникШтатноеРасписание.Ссылка = РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Должность}";
			
		КонецЕсли;
		
	Иначе
		УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника, "NULL");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета.
Процедура ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета) Экспорт
	
	Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПЗдрав" Тогда
		
		ДобавитьПоказателиФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПЗдрав_2013");
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПКультура" Тогда
		
		ДобавитьПоказателиФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПКультура_2013");
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПНаука" Тогда
		
		ДобавитьПоказателиФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПНаука_2013");
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПОбразование" Тогда
		
		ДобавитьПоказателиФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПОбразование_2013");
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПСоц" Тогда
		
		ДобавитьПоказателиФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПСоц_2013");
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПФизическаяКультураИСпорт" Тогда
		ДобавитьПоказателиФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019");
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТГМС" Тогда
		
		Если ИДРедакцииОтчета >= "ФормаОтчета2020Кв1" Тогда
			ДобавитьПоказателиФормы1ТГМС_2019(ПоказателиОтчета);
		Иначе
			ДобавитьПоказателиФормы1ТГМС_2015(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТМС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДобавитьПоказателиФормы1ТМС_2020(ПоказателиОтчета);
		КонецЕсли;
	
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТГС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДобавитьПоказателиФормы1ТГС_2020(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ГС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДобавитьПоказателиФормы1ГС_2013(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1МС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДобавитьПоказателиФормы1МС_2013(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма57Т" Тогда
		
		ДобавитьПоказателиФормы57Т_2017(ПоказателиОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2016Кв1" Тогда
			ДобавитьПоказателиФормы1_2016(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			ДобавитьПоказателиФормы1_2019(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			ДобавитьПоказателиФормы1_2021(ПоказателиОтчета);
		КонецЕсли;
		
	ИначеЕсли ИдОтчета = "РегламентированныйОтчетСтатистикаФорма1Тпроф" Тогда
		
		ДобавитьПоказателиФормы1Тпроф_2018(ПоказателиОтчета);
		
	ИначеЕсли ИдОтчета = "РегламентированныйОтчетСтатистикаФорма1Тчзп" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			ДобавитьПоказателиФормы1Тчзп_2019(ПоказателиОтчета);
		Иначе
			ДобавитьПоказателиФормы1Тчзп_2020(ПоказателиОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет.
Процедура ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПЗдрав" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2013Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПЗдрав_2013", 2013);
		Иначе
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПЗдрав_2013", 2015);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПКультура" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2013Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПКультура_2013", 2013);
		Иначе
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПКультура_2013", 2015);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПНаука" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2013Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПНаука_2013", 2013);
		Иначе
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПНаука_2013", 2015);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПОбразование" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2013Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПОбразование_2013", 2013);
		Иначе
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПОбразование_2013", 2015);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПСоц" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2013Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПСоц_2013", 2013);
		Иначе
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПСоц_2013", 2015);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПФизическаяКультураИСпорт" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019", 2015);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТГМС" Тогда
		
		Если ИДРедакцииОтчета >= "ФормаОтчета2020Кв1" Тогда
			ЗаполнитьПоказателиФормы1ТГМС_2019(ПараметрыОтчета, Контейнер);
		Иначе
			ЗаполнитьПоказателиФормы1ТГМС_2015(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТГС" Тогда
				
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ЗаполнитьПоказателиФормы1ТГС_2020(ПараметрыОтчета, Контейнер, ИДОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТМС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ЗаполнитьПоказателиФормы1ТМС_2020(ПараметрыОтчета, Контейнер, ИДОтчета);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ГС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ЗаполнитьПоказателиФормы1ГСМС_2016(ПараметрыОтчета, Контейнер, ИДОтчета);
		КонецЕсли;
				
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1МС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ЗаполнитьПоказателиФормы1ГСМС_2016(ПараметрыОтчета, Контейнер, ИДОтчета);
		КонецЕсли;
				
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма57Т" Тогда
		
		Если ИДРедакцииОтчета >= "ФормаОтчета2021Кв1" Тогда
			ЗаполнитьПоказателиФормы57Т_2021(ПараметрыОтчета, Контейнер);
		Иначе
			ЗаполнитьПоказателиФормы57Т_2017(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2016Кв1" Тогда
			ЗаполнитьПоказателиФормы1_2016(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			ЗаполнитьПоказателиФормы1_2019(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			ЗаполнитьПоказателиФормы1_2021(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1Тпроф" Тогда
			
		ЗаполнитьПоказателиФормы1Тпроф_2018(ПараметрыОтчета, Контейнер);
			
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1Тчзп" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
			ЗаполнитьПоказателиФормы1Тчзп_2019(ПараметрыОтчета, Контейнер);
		Иначе
			ЗаполнитьПоказателиФормы1Тчзп_2020(ПараметрыОтчета, Контейнер);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит расшифровку в табличный документ на основе параметров формы, либо включает флажок Отказ.
Процедура ПриФормированииРасшифровкиРегламентированногоОтчета(Форма, ТабличныйДокумент, Отказ) Экспорт
	ПараметрыОтчета = Форма.Параметры.ПараметрыОтчета;
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ИДИменПоказателей) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИДОтчета          = ПараметрыОтчета.ИДОтчета;
	ИДРедакцииОтчета  = ПараметрыОтчета.ИДРедакцииОтчета;
	ИмяПоказателя     = ПараметрыОтчета.ИДИменПоказателей[0];
	
	ПараметрыОтчета.Вставить("ВидОтчета");
	ПараметрыОтчета.Вставить("ИмяСКД", "Расшифровка");
	
	Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП4" Тогда
		ЧасыИВыплатыСоциальногоХарактераСНачалаГода = Истина;
		Если ИДРедакцииОтчета < "ФормаОтчета2013Кв1" Тогда
			Отказ = Истина;
			Возврат; // 2011.
		ИначеЕсли ИДРедакцииОтчета <= "ФормаОтчета2014Кв1" Тогда // 2013 и 2014.
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетП4_2013";
		ИначеЕсли ИДРедакцииОтчета > "ФормаОтчета2014Кв1" 
			И ИДРедакцииОтчета < "ФормаОтчета2022Кв1" Тогда // > 2014.
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетП4_2017";
		Иначе
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетП4_2022";
			ЧасыИВыплатыСоциальногоХарактераСНачалаГода = Ложь;
		КонецЕсли;
		
		Показатель = РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя, "П----СССКК");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Показатель, Истина);
		Если Не ЗначениеЗаполнено(ПараметрыОтчета.НомерСтроки)
			Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерКолонки)
			Или ПараметрыОтчета.НомерСтроки = "001"
			Или ПараметрыОтчета.НомерКолонки = "А1"
			Или ПараметрыОтчета.НомерКолонки = "Б1"
			Или ПараметрыОтчета.НомерКолонки = "В1"
			Или ПараметрыОтчета.НомерКолонки = "01"
			Или ПараметрыОтчета.НомерКолонки = "07" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Строка %1, графа %2'"),
			Формат(Число(ПараметрыОтчета.НомерСтроки), "ЧГ="),
			Формат(Число(ПараметрыОтчета.НомерКолонки), "ЧГ="));
		
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
		Если ЧасыИВыплатыСоциальногоХарактераСНачалаГода 
			И (ПараметрыОтчета.НомерКолонки = "05" 
			Или ПараметрыОтчета.НомерКолонки = "06" 
			Или ПараметрыОтчета.НомерКолонки = "11") Тогда
			ПараметрыОтчета.Вставить("ДатаНачалаПериодаВыборки", НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
		КонецЕсли;
		Если НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) <> ПараметрыОтчета.ДатаНачалаПериодаОтчета Тогда
			ПараметрыОтчета.Вставить("СНачалаГода", Истина);
		КонецЕсли;
		
		СформироватьОтчетРасшифровку(ПараметрыОтчета, ТабличныйДокумент);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП4НЗ" Тогда
		
		Если ИДРедакцииОтчета < "ФормаОтчета2015Кв1" Тогда
			Отказ = Истина;
			Возврат; // 2013 и 2014.
		КонецЕсли;

		Если ИДРедакцииОтчета < "ФормаОтчета2022Кв1" Тогда
			Показатель = РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя, "П------ССКК");
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Показатель, Истина);
			Если Не ЗначениеЗаполнено(ПараметрыОтчета.НомерСтроки)
				Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерКолонки)
				Или ПараметрыОтчета.НомерСтроки = "01"
				Или ПараметрыОтчета.НомерСтроки = "04"
				Или ПараметрыОтчета.НомерСтроки = "11"
				Или ПараметрыОтчета.НомерСтроки = "14"
				Или ПараметрыОтчета.НомерСтроки = "15"
				Или ПараметрыОтчета.НомерСтроки = "18"
				Или ПараметрыОтчета.НомерСтроки = "19"
				Или ПараметрыОтчета.НомерСтроки = "21"
				Или ПараметрыОтчета.НомерСтроки = "22" Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			ПараметрыОтчета.Вставить("ВидОтчета", "РегламентированныйОтчетП4НЗ_2015");
		Иначе
			Показатель = РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя, "П------ССКК");
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Показатель, Истина);
			Если Не ЗначениеЗаполнено(ПараметрыОтчета.НомерСтроки)
				Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерКолонки)
				Или ПараметрыОтчета.НомерСтроки = "01"
				Или ПараметрыОтчета.НомерСтроки = "12"
				Или ПараметрыОтчета.НомерСтроки = "13" Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			ПараметрыОтчета.Вставить("ВидОтчета", "РегламентированныйОтчетП4НЗ_2022");
		КонецЕсли;
		
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Строка %1, графа %2'"),
			Формат(Число(ПараметрыОтчета.НомерСтроки), "ЧГ="),
			Формат(Число(ПараметрыОтчета.НомерКолонки), "ЧГ="));
		
		ПараметрыОтчета.Вставить("ТолькоОсновноеМестоРаботы", Истина);
		
		СформироватьОтчетРасшифровку(ПараметрыОтчета, ТабличныйДокумент);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТГМС" Тогда
		
		Показатель = РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя, "П--------ССКК");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Показатель, Истина);
		Если Не ЗначениеЗаполнено(ПараметрыОтчета.НомерСтроки)
			Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерКолонки)
			Или ПараметрыОтчета.НомерСтроки = "05" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Строка %1, графа %2'"),
			Формат(Число(ПараметрыОтчета.НомерСтроки), "ЧГ="),
			Формат(Число(ПараметрыОтчета.НомерКолонки), "ЧГ="));
		
		Если ИДРедакцииОтчета >= "ФормаОтчета2020Кв1" Тогда
			ПараметрыОтчета.ВидОтчета = "1ТГМС2019";
		Иначе
			ПараметрыОтчета.ВидОтчета = "1ТГМС2015";
		КонецЕсли;
		ПараметрыОтчета.Вставить("ДатаАктуальности", ПараметрыОтчета.ДатаКонцаПериодаОтчета);
		ПараметрыОтчета.Вставить("СНачалаГода", Истина);
		
		Если ПараметрыОтчета.НомерКолонки = "03" Тогда // Показатели из штатного расписания
			СформироватьОтчетРасшифровкуСтатистика(ПараметрыОтчета, ТабличныйДокумент);
		Иначе
			СформироватьОтчетРасшифровку(ПараметрыОтчета, ТабличныйДокумент);
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТГС"
		ИЛИ ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТМС" Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДополнитьПараметрыОтчета1ТГСМС(ПараметрыОтчета, ИмяПоказателя);
		КонецЕсли;
		Если Не ПараметрыОтчета.Свойство("ИмяСКД") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ПараметрыОтчета.ВидОтчета = "1ТГМС2019"
			И ПараметрыОтчета.НомерКолонки <> "03" Тогда // Показатели из штатного расписания
			СформироватьОтчетРасшифровку(ПараметрыОтчета, ТабличныйДокумент);
		Иначе
			СформироватьОтчетРасшифровкуСтатистика(ПараметрыОтчета, ТабличныйДокумент);			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ГС"
		ИЛИ ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1МС" Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДополнитьПараметрыОтчета1ГСМС(ПараметрыОтчета, ИмяПоказателя, ИДОтчета);
		КонецЕсли;
		Если Не ПараметрыОтчета.Свойство("НомерСтроки")
			Или Не ПараметрыОтчета.Свойство("НомерКолонки") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СформироватьОтчетРасшифровкуСтатистика(ПараметрыОтчета, ТабличныйДокумент);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПЗдрав"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПКультура"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПНаука"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПОбразование"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПСоц" 
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПФизическаяКультураИСпорт" Тогда
		
		Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПЗдрав" Тогда
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013";
		ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПКультура" Тогда
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетЗПКультура_2013";
		ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПНаука" Тогда
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетЗПНаука_2013";
		ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПОбразование" Тогда
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013";
		ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПСоц" Тогда
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетЗПСоц_2013";
		ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПФизическаяКультураИСпорт" Тогда
			ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019";
		КонецЕсли;
		
		Показатель = РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Показатель, Истина);
		Если Не ЗначениеЗаполнено(ПараметрыОтчета.НомерСтроки)
			Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерКолонки)
			Или Не ЯчейкаОтчетаФинмониторингаРасшифровывается(ПараметрыОтчета.ВидОтчета, 
				ПараметрыОтчета.НомерСтроки, ПараметрыОтчета.НомерКолонки) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Строка %1, графа %2'"),
			Формат(Число(ПараметрыОтчета.НомерСтроки), "ЧГ="),
			Формат(Число(ПараметрыОтчета.НомерКолонки), "ЧГ="));
		
		Если ИДРедакцииОтчета < "ФормаОтчета2015Кв1" Тогда
			ПараметрыОтчета.Вставить("ВариантРасчетаПоказателей", 2013);
		Иначе
			ПараметрыОтчета.Вставить("ВариантРасчетаПоказателей", 2015);
		КонецЕсли;
		ПараметрыОтчета.Вставить("СНачалаГода", Истина);
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
		
		СформироватьОтчетРасшифровку(ПараметрыОтчета, ТабличныйДокумент);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1Тпроф" Тогда
		ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетФорма1Тпроф_2018";
		ПараметрыОтчета.ДатаНачалаПериодаОтчета = Дата(Год(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 10, 31);
		ПараметрыОтчета.ДатаКонцаПериодаОтчета = Дата(Год(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 10, 31);
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
		Показатель = РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя, "П-СССКК");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Показатель, Истина);
		Если Не ЗначениеЗаполнено(ПараметрыОтчета.НомерСтроки)
			Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерКолонки)
			Или Не ПараметрыОтчета.НомерКолонки = "03" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СформироватьОтчетРасшифровку(ПараметрыОтчета, ТабличныйДокумент);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1Тчзп" Тогда
		Если ИДРедакцииОтчета < "ФормаОтчета2020Кв1" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетФорма1Тчпз_2020";
		Показатель = РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя, "П-------СССКК");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Показатель, Истина); 
		Если Не ЗначениеЗаполнено(ПараметрыОтчета.НомерСтроки)
			Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерКолонки)
			Или ПараметрыОтчета.НомерСтроки = "001"
			Или ПараметрыОтчета.НомерКолонки = "01"
			Или ПараметрыОтчета.НомерКолонки = "02"
			Или ПараметрыОтчета.НомерКолонки = "03"
			Или ПараметрыОтчета.НомерКолонки = "07" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Строка %1, графа %2'"),
			Формат(Число(ПараметрыОтчета.НомерСтроки), "ЧГ="),
			Формат(Число(ПараметрыОтчета.НомерКолонки)-2, "ЧГ="));
		
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
		Если НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) <> ПараметрыОтчета.ДатаНачалаПериодаОтчета Тогда
			ПараметрыОтчета.Вставить("СНачалаГода", Истина);
		КонецЕсли;
		
		СформироватьОтчетРасшифровку(ПараметрыОтчета, ТабличныйДокумент);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма57Т" Тогда
		ПараметрыОтчета.ВидОтчета = "РегламентированныйОтчетСтатистикаФорма57Т_2021";
		Показатель = РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя, "ПРРССКК");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Показатель, Истина); 
		Если Не ЗначениеЗаполнено(ПараметрыОтчета.НомерРаздела)
			Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерСтроки)
			Или Не ЗначениеЗаполнено(ПараметрыОтчета.НомерКолонки)
			Или ПараметрыОтчета.НомерРаздела = "01" И ПараметрыОтчета.НомерСтроки = "01"
			Или ПараметрыОтчета.НомерРаздела = "02" И ПараметрыОтчета.НомерКолонки <> "09"
			И ПараметрыОтчета.НомерКолонки <> "10" И ПараметрыОтчета.НомерКолонки <> "11"
			И ПараметрыОтчета.НомерКолонки <> "12" 
			Или ПараметрыОтчета.НомерРаздела = "03" И ПараметрыОтчета.НомерСтроки = "04" Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Раздел %1, Строка %2, графа %3'"),
			Формат(Число(ПараметрыОтчета.НомерРаздела), "ЧГ="),
			Формат(Число(ПараметрыОтчета.НомерСтроки), "ЧГ="),
			Формат(ПараметрыОтчета.НомерКолонки));
		
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
		Если НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) <> ПараметрыОтчета.ДатаНачалаПериодаОтчета Тогда
			ПараметрыОтчета.Вставить("СНачалаГода", Истина);
		КонецЕсли;
		
		СформироватьОтчетРасшифровку(ПараметрыОтчета, ТабличныйДокумент);

	Иначе
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Для ЗарплатаКадры.ПолучитьНастройкиВидимостиЭлементовФормы возвращает характеристику показываемой формы регламентированного отчета.
//  
// Возвращаемое значение:
//  Булево, истина - если рассматриваемую форму заполнять автоматически мы еще не умеем.
//
Функция НоваяФормаРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета) Экспорт

	Возврат ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПФизическаяКультураИСпорт" И ИДРедакцииОтчета > "ФормаОтчета2019Кв1"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1" И ИДРедакцииОтчета > "ФормаОтчета2021Кв1";	

КонецФункции

Процедура ВключитьВычисляемоеПоле(ВыбранныеПоля, ИмяПоля) Экспорт
	
	Если Лев(ИмяПоля, 20) = "ПользовательскиеПоля" Тогда
		ИмяПоля = СтрЗаменить(ИмяПоля, "ПользовательскиеПоля", "ПользовательскиеПоля.");
	КонецЕсли;
	
	ИскомоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для Каждого НастройкаПоля Из ВыбранныеПоля.Элементы Цикл
		Если НастройкаПоля.Поле = ИскомоеПоле Тогда
			НастройкаПоля.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область БазовыйКонтракт

// П-4

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ДобавитьПоказателиФормыП4_2013Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	ИндексТекущейСтроки = 2;
	
	Пока ИндексТекущейСтроки < 12 Цикл
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "А1", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "В1", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "02", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "03", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "06", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "08", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "09", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "10", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "11", Истина, Истина);
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		
	КонецЦикла;

КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормыП4_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт

	// Сведения для отчета берутся за последний месяц.
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаВыборки", НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчета);
	
	// Получение зарплатных данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияЗарплата.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		ВыводитьКвартальныеПоказатели = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) = КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Если ПараметрыОтчетаДляЗаполненияЗарплата.Свойство("СНачалаГода") И ПараметрыОтчетаДляЗаполненияЗарплата.СНачалаГода Тогда
			Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
				
				ЗаполнитьПоказателиЗарплата_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭД, ВыводитьКвартальныеПоказатели);
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				
				Если ИндексТекущейСтроки = 12 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
				Для Каждого СтрокаОКВЭДПериод Из СтрокаОКВЭД.Строки Цикл
					
					Если СтрокаОКВЭДПериод.МесяцНачисления <> ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьПоказателиЗарплата_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭДПериод, ВыводитьКвартальныеПоказатели);
					
					ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
					
					Если ИндексТекущейСтроки > КоличествоСтрок Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ПустаяСтруктура = Новый Структура();
		ПустаяСтруктура.Вставить("ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава", 0);
		ПустаяСтруктура.Вставить("ОтработаноЧасовСНачалаГодаВнешнимиСовместителями", 0);
		ПустаяСтруктура.Вставить("НаименованиеОКВЭД", "");
		ПустаяСтруктура.Вставить("КодОКВЭД", "");
		ПустаяСтруктура.Вставить("НачисленоРаботникамСписочногоСостава", 0);
		ПустаяСтруктура.Вставить("НачисленоВнешнимСовместителям", 0);
		ПустаяСтруктура.Вставить("НачисленоРаботникамПоДоговорамГПХ", 0);
		ПустаяСтруктура.Вставить("НачисленияСоциальногоХарактера", 0);
		Пока ИндексТекущейСтроки <= КоличествоСтрок Цикл
			ЗаполнитьПоказателиЗарплата_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, ПустаяСтруктура, ПустаяСтруктура, Ложь);
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияКадры.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Если ПараметрыОтчетаДляЗаполненияКадры.Свойство("СНачалаГода") И ПараметрыОтчетаДляЗаполненияКадры.СНачалаГода Тогда
			Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
				
				ЗаполнитьПоказателиКадры_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭД, ВыводитьКвартальныеПоказатели);
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				
				Если ИндексТекущейСтроки = 12 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
				Для Каждого СтрокаОКВЭДПериод Из СтрокаОКВЭД.Строки Цикл
					
					Если СтрокаОКВЭДПериод.Месяц <> ПараметрыОтчетаДляЗаполненияКадры.ДатаНачалаПериодаОтчета Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьПоказателиКадры_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭДПериод, ВыводитьКвартальныеПоказатели);
					
					ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
					
					Если ИндексТекущейСтроки > КоличествоСтрок Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ПустаяСтруктура = Новый Структура();
		ПустаяСтруктура.Вставить("СредняяЧисленностьЗаПериодСписочногоСостава", 0);
		ПустаяСтруктура.Вставить("СредняяЧисленностьЗаПериодВнешнихСовместителей", 0);
		ПустаяСтруктура.Вставить("СредняяЧисленностьЗаПериодДоговорников", 0);
		ПустаяСтруктура.Вставить("НаименованиеОКВЭД", "");
		ПустаяСтруктура.Вставить("КодОКВЭД", "");
		Пока ИндексТекущейСтроки <= КоличествоСтрок Цикл
			ЗаполнитьПоказателиКадры_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, ПустаяСтруктура, ПустаяСтруктура, Ложь);
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормыП4_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Подготовка настроек вывода данных отчета.
	ОписаниеПоказателейОтчета = ОписаниеПоказателейОтчета_СтатистикаФормаП4_2017Кв1();
	
	// Получение данных отчета.
	ДанныеОтчета = ДанныеОтчета_СтатистикаФормаП4_2017Кв1(ОписаниеПоказателейОтчета, ПараметрыОтчета);
	
	// Вывод данных отчета.
	Попытка
	
		СтруктураПоказателей = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		Количество = ДанныеОтчета.Количество();
		Для Номер = 1 По 10 Цикл // Выводится 10 строк.
			Если Номер > Количество Тогда
				СтрокаТаблицы = ДанныеОтчета.Добавить(); // Если данных нет, то заполняются пустые значения.
			Иначе
				СтрокаТаблицы = ДанныеОтчета[Номер-1];
			КонецЕсли;
			ПредставлениеНомера = Формат(Номер+1, "ЧЦ=2; ЧВН="); // Нумерация начинается с "02".
			
			Для Каждого ОписаниеПоказателя Из ОписаниеПоказателейОтчета Цикл
				Значение = СтрокаТаблицы[ОписаниеПоказателя.ИмяКолонки];
				ПутьКДанным  = СтрЗаменить(ОписаниеПоказателя.ПутьКДанным,  "##", ПредставлениеНомера);
				ПутьКФормату = СтрЗаменить(ОписаниеПоказателя.ПутьКФормату, "##", ПредставлениеНомера);
				СтруктураПоказателей[ПутьКДанным] = Значение;
				Если ЗначениеЗаполнено(ПутьКФормату) И Значение = 0 И СтруктураПоказателей.Свойство(ПутьКФормату) Тогда
					СтруктураПоказателей[ПутьКФормату] = "ЧН=-";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормыП4_2022Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Подготовка настроек вывода данных отчета.
	ОписаниеПоказателейОтчета = ОписаниеПоказателейОтчета_СтатистикаФормаП4_2022Кв1();
	
	// Получение данных отчета.
	ДанныеОтчета = ДанныеОтчета_СтатистикаФормаП4_2022Кв1(ОписаниеПоказателейОтчета, ПараметрыОтчета);
	
	// Вывод данных отчета.
	Попытка
	
		СтруктураПоказателей = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		Количество = ДанныеОтчета.Количество();
		Для Номер = 1 По 10 Цикл // Выводится 10 строк.
			Если Номер > Количество Тогда
				СтрокаТаблицы = ДанныеОтчета.Добавить(); // Если данных нет, то заполняются пустые значения.
			Иначе
				СтрокаТаблицы = ДанныеОтчета[Номер-1];
			КонецЕсли;
			ПредставлениеНомера = Формат(Номер+1, "ЧЦ=2; ЧВН="); // Нумерация начинается с "02".
			
			Для Каждого ОписаниеПоказателя Из ОписаниеПоказателейОтчета Цикл
				Значение = СтрокаТаблицы[ОписаниеПоказателя.ИмяКолонки];
				ПутьКДанным  = СтрЗаменить(ОписаниеПоказателя.ПутьКДанным,  "##", ПредставлениеНомера);
				ПутьКФормату = СтрЗаменить(ОписаниеПоказателя.ПутьКФормату, "##", ПредставлениеНомера);
				СтруктураПоказателей[ПутьКДанным] = Значение;
				Если ЗначениеЗаполнено(ПутьКФормату) И Значение = 0 И СтруктураПоказателей.Свойство(ПутьКФормату) Тогда
					СтруктураПоказателей[ПутьКФормату] = "ЧН=-";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

КонецПроцедуры

// П-4 (НЗ)

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ДобавитьПоказателиФормыП4НЗ_2015Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод4", Истина, Ложь);
	
	Для ИндексТекущейСтроки = 1 По 22 Цикл
		Если СтрНайти("4,11,18,19", Строка(ИндексТекущейСтроки)) > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти("1,14,21,22", Строка(ИндексТекущейСтроки)) > 0 Тогда
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01", Истина, Ложь);
		Иначе
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01", Истина, Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормыП4НЗ_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Очистим ячейки
	Попытка
		Для ИндексТекущейСтроки = 1 По 22 Цикл
			Если ИндексТекущейСтроки = 4 Или ИндексТекущейСтроки = 11 Или ИндексТекущейСтроки = 18 Или ИндексТекущейСтроки = 19 Тогда
				Продолжить;
			КонецЕсли;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01"] = 0;
		КонецЦикла;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ПараметрыОтчетаДляЗаполнения = СкопироватьКоллекцию(ПараметрыОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ("РегламентированныйОтчетСтатистикаФормаП4НЗ", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	КоличествоСтавокНаКонецПериода = 0;
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000201"] = СтрокаОрганизации.ЧисленностьРаботавшихНеполноеРабочееВремя;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000301"] = СтрокаОрганизации.ЧисленностьСотрудниковВПростое;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000501"] = СтрокаОрганизации.ЧисленностьСотрудниковВОтпускеБезОплаты;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000701"] = СтрокаОрганизации.ЧисленностьПринятыхВПериодеНаНовуюПозицию;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000901"] = СтрокаОрганизации.ЧисленностьУволенныхПоСоглашениюСторон;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001001"] = СтрокаОрганизации.ЧисленностьУволенныхВСвязиССокращением;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001201"] = СтрокаОрганизации.ЧисленностьУволенныхПоСобственномуЖеланию;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001601"] = СтрокаОрганизации.ЧисленностьЖенщинВОтпускеДоПолутораЛет;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001701"] = СтрокаОрганизации.ЧисленностьЖенщинВОтпускеДоТрехЛет;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001002001"] = СтрокаОрганизации.ЧисленностьРаботавшихВахтовымМетодом;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001401"] = СтрокаОрганизации.Вакансии;
		КонецЕсли;
	КонецЕсли;
	
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ПараметрыОтчета.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчета, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000601"] = СтрокаОрганизации.ПринятоСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000801"] = СтрокаОрганизации.УволеноСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001301"] = СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ДобавитьПоказателиФормыП4НЗ_2021Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод4", Истина, Ложь);
	
	Для ИндексТекущейСтроки = 1 По 20 Цикл
		Если СтрНайти("4,11,18,19", Строка(ИндексТекущейСтроки)) > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти("1,14", Строка(ИндексТекущейСтроки)) > 0 Тогда
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01", Истина, Ложь);
		Иначе
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01", Истина, Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормыП4НЗ_2021Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Очистим ячейки
	Попытка
		Для ИндексТекущейСтроки = 1 По 20 Цикл
			Если ИндексТекущейСтроки = 4 Или ИндексТекущейСтроки = 11 Или ИндексТекущейСтроки = 18 Или ИндексТекущейСтроки = 19 Тогда
				Продолжить;
			КонецЕсли;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01"] = 0;
		КонецЦикла;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ПараметрыОтчетаДляЗаполнения = СкопироватьКоллекцию(ПараметрыОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ("РегламентированныйОтчетСтатистикаФормаП4НЗ", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	КоличествоСтавокНаКонецПериода = 0;
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000201"] = СтрокаОрганизации.ЧисленностьРаботавшихНеполноеРабочееВремя;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000301"] = СтрокаОрганизации.ЧисленностьСотрудниковВПростое;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000501"] = СтрокаОрганизации.ЧисленностьСотрудниковВОтпускеБезОплаты;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000701"] = СтрокаОрганизации.ЧисленностьПринятыхВПериодеНаНовуюПозицию;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000901"] = СтрокаОрганизации.ЧисленностьУволенныхПоСоглашениюСторон;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001001"] = СтрокаОрганизации.ЧисленностьУволенныхВСвязиССокращением;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001201"] = СтрокаОрганизации.ЧисленностьУволенныхПоСобственномуЖеланию;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001601"] = СтрокаОрганизации.ЧисленностьЖенщинВОтпускеДоПолутораЛет;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001701"] = СтрокаОрганизации.ЧисленностьЖенщинВОтпускеДоТрехЛет;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001002001"] = СтрокаОрганизации.ЧисленностьРаботавшихВахтовымМетодом;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001401"] = СтрокаОрганизации.Вакансии;
		КонецЕсли;
	КонецЕсли;
	
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ПараметрыОтчета.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчета, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000601"] = СтрокаОрганизации.ПринятоСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000801"] = СтрокаОрганизации.УволеноСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001301"] = СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ДобавитьПоказателиФормыП4НЗ_2022Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод4", Истина, Ложь);
	
	Для ИндексТекущейСтроки = 1 По 16 Цикл
		Если СтрНайти("1,12", Строка(ИндексТекущейСтроки)) > 0 Тогда
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01", Истина, Ложь);
		Иначе
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01", Истина, Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормыП4НЗ_2022Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Очистим ячейки
	Попытка
		Для ИндексТекущейСтроки = 1 По 16 Цикл
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01"] = 0;
		КонецЦикла;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ПараметрыОтчетаДляЗаполнения = СкопироватьКоллекцию(ПараметрыОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ("РегламентированныйОтчетСтатистикаФормаП4НЗ", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	КоличествоСтавокНаКонецПериода = 0;
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000201"] = СтрокаОрганизации.ЧисленностьРаботавшихНеполноеРабочееВремя;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000301"] = СтрокаОрганизации.ЧисленностьСотрудниковВПростое;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000401"] = СтрокаОрганизации.ЧисленностьСотрудниковВОтпускеБезОплаты;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000601"] = СтрокаОрганизации.ЧисленностьПринятыхВПериодеНаНовуюПозицию;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000801"] = СтрокаОрганизации.ЧисленностьУволенныхПоСоглашениюСторон;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000901"] = СтрокаОрганизации.ЧисленностьУволенныхВСвязиССокращением;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001001"] = СтрокаОрганизации.ЧисленностьУволенныхПоСобственномуЖеланию;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001401"] = СтрокаОрганизации.ЧисленностьЖенщинВОтпускеДоПолутораЛет;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001501"] = СтрокаОрганизации.ЧисленностьЖенщинВОтпускеДоТрехЛет;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001601"] = СтрокаОрганизации.ЧисленностьРаботавшихВахтовымМетодом;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001201"] = СтрокаОрганизации.Вакансии;
		КонецЕсли;
	КонецЕсли;
	
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ПараметрыОтчета.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчета, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000501"] = СтрокаОрганизации.ПринятоСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000701"] = СтрокаОрганизации.УволеноСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001101"] = СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Форма14

// Возвращает сведения о должностях и численности.
Функция СведенияОДолжностяхИЧисленностиРегламентированнойОтчетности(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	СтруктураРезультат = Новый Структура("ДанныеШтатногоРасписания,ДанныеСреднесписочнойЧисленности");
	
	Вариант = "РегламентированныйОтчетСтатистикаФорма14";
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("СНачалаГода", Истина);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета", ДатаОкончания);
	
	ДанныеШтатногоРасписания = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиШР1ТГМС(Вариант, ПараметрыОтчета, ДанныеШтатногоРасписания);
	СтруктураРезультат.ДанныеШтатногоРасписания = ДанныеШтатногоРасписания;
	
	ДанныеСреднесписочнойЧисленности = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(Вариант, ПараметрыОтчета, ДанныеСреднесписочнойЧисленности);
	СтруктураРезультат.ДанныеСреднесписочнойЧисленности = ДанныеСреднесписочнойЧисленности;	
	
	Возврат СтруктураРезультат;
		
КонецФункции

#КонецОбласти

Функция СкопироватьКоллекцию(Коллекция) Экспорт
	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(ОбщегоНазначения.ЗначениеВСтрокуXML(Коллекция));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыЧисленностиИВыплат

// См. СтатистикаПерсонала.ЗаполнитьСведенияОЧисленности.
Процедура ЗаполнитьСведенияОЧисленности(СведенияОЧисленности, Знач ПараметрыДляСведенийОЧисленности) Экспорт
	
	РезультатЧисленности = ДанныеЧисленности(ПараметрыДляСведенийОЧисленности);
	
	КолонкиГруппировки =  СписокКолонокГруппировки(ПараметрыДляСведенийОЧисленности);
	КолонкиСуммирования = СписокКолонокДляСуммированияПоказателей(СведенияОЧисленности.Колонки);

	Если РезультатЧисленности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДляСведенийОЧисленности.ПоМестамВСтруктуреПредприятия Тогда
		ТаблицаРезультата = СведенияОЧисленности(10);
		ЗаполнитьСведенияОЧисленностиВРазрезеСотрудников(ТаблицаРезультата, РезультатЧисленности);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			КолонкаПериода = ТаблицаРезультата.Колонки.Найти("Месяц");
			Если КолонкаПериода <> Неопределено Тогда
				КолонкаПериода.Имя = "Период";
				МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
				МодульОрганизационнаяСтруктура.ДополнитьТаблицуЗначенийМестомВСтруктуреПредприятия(ТаблицаРезультата);
			КонецЕсли
		КонецЕсли;
		ТаблицаРезультата.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
		Для Каждого СтрокаТаблицыРезультата Из ТаблицаРезультата Цикл
			НоваяСтрока = СведенияОЧисленности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыРезультата);
		КонецЦикла;
	Иначе	
		Если ПараметрыДляСведенийОЧисленности.ПоГоловнойОрганизации Тогда
			Для Каждого СтрокаОрганизации Из РезультатЧисленности.Строки Цикл
				ЗаполнитьСтрокиСведенийОЧисленностиПоОрганизации(
					СведенияОЧисленности,
					СтрокаОрганизации,
					ПараметрыДляСведенийОЧисленности.ПоПодразделениям);
			КонецЦикла;
		Иначе
			ЗаполнитьСтрокиСведенийОЧисленностиПоОрганизации(
				СведенияОЧисленности,
				РезультатЧисленности, 
				ПараметрыДляСведенийОЧисленности.ПоПодразделениям);
		КонецЕсли;
	КонецЕсли;
	
	// Если группировка по подразделениям или местам в структуре предприятия не требуется, 
	// то ТЗ будет свернута по организации, числовые показатели суммируются.
	СведенияОЧисленности.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
		
КонецПроцедуры

Процедура ЗаполнитьСведенияОЧисленностиВРазрезеСотрудников(СведенияОЧисленности, РезультатЧисленности)
	
	СведенияОЧисленности.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СведенияОЧисленности.Колонки.Добавить("Месяц",     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ЗаполнитьСведенияОЧисленностиПоСотрудникам(СведенияОЧисленности, РезультатЧисленности);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОЧисленностиПоСотрудникам(СведенияОЧисленности, РезультатЧисленности)
	
	Для Каждого СтрокаДереваЧисленности Из РезультатЧисленности.Строки Цикл
		
		Если СтрокаДереваЧисленности.Строки.Количество() > 0 Тогда
			ЗаполнитьСведенияОЧисленностиПоСотрудникам(СведенияОЧисленности, СтрокаДереваЧисленности);
		Иначе
			ЗаполнитьСтрокуСведенийОЧисленности(СведенияОЧисленности, СтрокаДереваЧисленности);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Функция СписокКолонокГруппировки(ПараметрыДляСведенийОЧисленности)
	
	СписокКолонокГруппировки = "Организация";
	
	Если ПараметрыДляСведенийОЧисленности.ПоПодразделениям Тогда
		СписокКолонокГруппировки = СписокКолонокГруппировки + ",Подразделение";
	КонецЕсли;
	Если ПараметрыДляСведенийОЧисленности.ПоМестамВСтруктуреПредприятия Тогда
		СписокКолонокГруппировки = СписокКолонокГруппировки + ",МестоВСтруктуреПредприятия";
	КонецЕсли;
	
	Возврат СписокКолонокГруппировки;
	
КонецФункции

Функция СписокКолонокДляСуммированияПоказателей(КолонкиТаблицыЗначений)
	
	КолонкиСуммирования = Новый Массив;
	Для ИндексКолонки = 0 По КолонкиТаблицыЗначений.Количество()-1 Цикл
		Если КолонкиТаблицыЗначений[ИндексКолонки].Имя <> "Организация" 
			И КолонкиТаблицыЗначений[ИндексКолонки].Имя <> "Подразделение" 
			И КолонкиТаблицыЗначений[ИндексКолонки].Имя <> "МестоВСтруктуреПредприятия"
			И КолонкиТаблицыЗначений[ИндексКолонки].Имя <> "Сотрудник"
			И КолонкиТаблицыЗначений[ИндексКолонки].Имя <> "Период" Тогда
			КолонкиСуммирования.Добавить(КолонкиТаблицыЗначений[ИндексКолонки].Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(КолонкиСуммирования,",");
	
КонецФункции

Процедура ЗаполнитьСтрокиСведенийОЧисленностиПоОрганизации(ТаблицаСведений, ДанныеПоЧисленности, ПоПодразделениям)
	
	Если ПоПодразделениям Тогда
		Для Каждого СтрокаЧисленности Из ДанныеПоЧисленности.Строки Цикл
			ЗаполнитьСтрокуСведенийОЧисленности(
				ТаблицаСведений, 
				СтрокаЧисленности);
		КонецЦикла;
	Иначе
		ЗаполнитьСтрокуСведенийОЧисленности(
			ТаблицаСведений, 
			ДанныеПоЧисленности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуСведенийОЧисленности(ТаблицаСведений, ДанныеПоЧисленности)
	
		НоваяСтрока = ТаблицаСведений.Добавить();
		НоваяСтрока.ЧисленностьСотрудников                         = ДанныеПоЧисленности.ЧисленностьНаКонецПериодаСписочногоСостава;
		НоваяСтрока.ЧисленностьЖенщин                              = ДанныеПоЧисленности.ЧисленностьНаКонецПериодаЖенщинСписочногоСостава;
		НоваяСтрока.ЧисленностьИнвалидов                           = ДанныеПоЧисленности.ЧисленностьНаКонецПериодаИнвалидовСписочногоСостава;
		НоваяСтрока.ЧисленностьВнешнихСовместителей                = ДанныеПоЧисленности.ЧисленностьНаКонецПериодаВнешнихСовместителей;
		НоваяСтрока.ЧисленностьДоговорников                        = ДанныеПоЧисленности.ЧисленностьНаКонецПериодаДоговорников;
		НоваяСтрока.СреднесписочнаяЧисленностьСотрудников          = ДанныеПоЧисленности.СредняяЧисленностьЗаПериодСписочногоСостава;
		НоваяСтрока.СреднесписочнаяЧисленностьЖенщин               = ДанныеПоЧисленности.СредняяЧисленностьЗаПериодЖенщинСписочногоСостава;
		НоваяСтрока.СреднесписочнаяЧисленностьИнвалидов            = ДанныеПоЧисленности.СредняяЧисленностьЗаПериодИнвалидовСписочногоСостава;
		НоваяСтрока.СредняяЧисленностьДоговорников                 = ДанныеПоЧисленности.СредняяЧисленностьЗаПериодДоговорников;
		НоваяСтрока.СреднесписочнаяЧисленностьВнешнихСовместителей = ДанныеПоЧисленности.СредняяЧисленностьЗаПериодВнешнихСовместителей;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоЧисленности);
		
	КонецПроцедуры

// Возвращает структуру параметров для СведенияОЧисленности
// 
// Возвращаемое значение:
//   Структура - Содержит ключи:
//      * Организация                                - СправочникСсылка.Организации - организация для получения сведений.
//      * ДатаНачала                                 - Дата - дата начала отчетного периода.
//      * ДатаКонца                                  - Дата - дата окончания отчетного периода.
//      * ОтбиратьПоГоловнойОрганизации              - Булево - если Истина, то отбор по головной организации.
//      * ПоПодразделениям                           - Булево - если Истина, то данные вернутся сгруппированными по подразделениям, 
//                                                     если Ложь, то будут свернуты по организации.
//      * ПоМестамВСтруктуреПредприятия              - Булево - если Истина, то данные вернутся сгруппированными по местам в структуре предприятия, 
//                                                     если Ложь, то будут свернуты по организации.
//
Функция ПараметрыДляСведенийОЧисленности() Экспорт
	
	ПараметрыДляПолученияЧисленности = Новый Структура("Организация, ДатаНачала, ДатаОкончания");
	ПараметрыДляПолученияЧисленности.Вставить("ПоГоловнойОрганизации",         Ложь);
	ПараметрыДляПолученияЧисленности.Вставить("ПоПодразделениям",              Ложь);
	ПараметрыДляПолученияЧисленности.Вставить("ПоМестамВСтруктуреПредприятия", Ложь);
	
	Возврат ПараметрыДляПолученияЧисленности;
	
КонецФункции

// Возвращает таблицу значений для хранения сведений о численности
//
// Параметры:
//  РазрядностьПоказателей                - Число - Точность числовых показателей численности, по-умолчанию равно двум
//
// Возвращаемое значение:
//   ТаблицаЗначений с колонками:
//    * Организация                                     - СправочникСсылка.Организации
//    * Подразделение                                   - СправочникСсылка.Подразделения
//    * МестоВСтруктуреПредприятия                      - ОпределяемыйТип.МестоВСтруктуреПредприятия
//    * СреднесписочнаяЧисленностьСотрудников           - Число
//    * СреднесписочнаяЧисленностьВнешнихСовместителей  - Число
//    * СредняяЧисленностьДоговорников                  - Число
//    * СреднесписочнаяЧисленностьЖенщин                - Число
//    * СреднесписочнаяЧисленностьИнвалидов             - Число
//    * ЧисленностьСотрудников                          - Число
//    * ЧисленностьВнешнихСовместителей                 - Число
//    * ЧисленностьСотрудниковПоДоговоруГПХ             - Число
//    * ЧисленностьЖенщин                               - Число
//    * ЧисленностьИнвалидов                            - Число
//    * ЧисленностьДоговорников                         - Число
//
Функция СведенияОЧисленности(РазрядностьПоказателей = 2) Экспорт
	
	ТаблицаСведений = Новый ТаблицаЗначений;

	ТаблицаСведений.Колонки.Добавить(
		"Организация",                                    Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСведений.Колонки.Добавить(
		"Подразделение",                                  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСведений.Колонки.Добавить(
		"МестоВСтруктуреПредприятия",                     Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаСведений.Колонки.Добавить(
		"СреднесписочнаяЧисленностьСотрудников",          ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"СреднесписочнаяЧисленностьВнешнихСовместителей", ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"СреднесписочнаяЧисленностьЖенщин",               ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"СреднесписочнаяЧисленностьИнвалидов",            ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"СредняяЧисленностьДоговорников",                 ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьСотрудников",                         ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьВнешнихСовместителей",                ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьЖенщин",                              ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьИнвалидов",                           ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	ТаблицаСведений.Колонки.Добавить(
		"ЧисленностьДоговорников",                        ОбщегоНазначения.ОписаниеТипаЧисло(25,РазрядностьПоказателей));
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ДанныеЧисленности(Знач ПараметрыСведений)
	
	ПараметрыОтчета = Новый Структура;
	Если ПараметрыСведений.ПоГоловнойОрганизации Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыСведений.Организация);
		ПараметрыОтчета.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
		ПараметрыОтчета.Вставить("Организация", ГоловнаяОрганизация);
		ПараметрыОтчета.Вставить("ОтбиратьПоГоловнойОрганизации", Истина);
		ВариантОтчета = "СреднесписочнаяЧисленностьПоГоловнойОрганизации";
		ОрганизацияДляПоиска = ГоловнаяОрганизация;
		КолонкаДляПоиска = "ОрганизацияГоловнаяОрганизация";
	Иначе
		ПараметрыОтчета.Вставить("Организация", ПараметрыСведений.Организация);
		ВариантОтчета = "СреднесписочнаяЧисленностьПоОрганизации";
		ОрганизацияДляПоиска = ПараметрыСведений.Организация;
		КолонкаДляПоиска = "Организация";
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыСведений.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета", ПараметрыСведений.ДатаОкончания);
	
	// Получение данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(ВариантОтчета, ПараметрыОтчета, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ОрганизацияДляПоиска, КолонкаДляПоиска);
	
	Возврат СтрокаОрганизации;

КонецФункции

#КонецОбласти

#Область НастройкиПодсистемы

// Чтение настроек подсистемы статистики персонала.
// Если формирование отчетных форм статистики отключено, функция возвращает
// структуру с единственным реквизитом ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы,
// установленным в значение ЛОЖЬ.
//
// ВозвращаемоеЗначение:
//  Структура настроек
//
Функция НастройкиСтатистикиПерсонала() Экспорт

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы", Ложь);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы,
		|	НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы
		|ИЗ
		|	РегистрСведений.НастройкиСтатистикиПерсонала КАК НастройкиСтатистикиПерсонала";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Если РезультатЗапроса.Количество() > 0 Тогда
		СтруктураНастроек = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0]);
	КонецЕсли;
	
	Возврат СтруктураНастроек;

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ОбновлениеПояснений";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.7.13";
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПодключаемыеХарактеристики") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.8.31";
		Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("4a426be8-6557-48db-8bb0-0cc20e8eab29");
		Обработчик.Процедура = "СтатистикаПерсоналаРасширенный.ЗаполнитьПодключаемыеХарактеристики";
		Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик'");
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.14.76";
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ДобавитьСтрокиПоЗПФизическаяКультураИСпорт";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПодключаемыеХарактеристики(ПараметрыОбновления = Неопределено) Экспорт
	
	Настройки = РегистрыСведений.НастройкиСтатистикиПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ОбновитьПодключаемыеХарактеристики(
		Настройки.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы, ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область Форма1ТГМС

Процедура ДобавитьПоказателиФормы1ТГМС_2015(ПоказателиОтчета)
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	
	Для Номер = 1 По 4 Цикл
		НомерСтроки = Формат(Номер, "ЧЦ=2; ЧВН=");
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "03", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "04", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "05", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "06", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "07", Истина, Истина);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоказателиФормы1ТГМС_2015(ПараметрыОтчета, Контейнер)
	
	ТаблицаДанныхОтчета = ДанныеОтчета1ТГМС_2015(ПараметрыОтчета);
	
	Попытка
		Документ = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхОтчета Цикл
			НомерСтроки = Формат(СтрокаТаблицы.НомерСтроки1ТГМС2015, "ЧЦ=2; ЧВН=");
			// Утверждено штатных единиц на конец отчетного периода
			Документ["П00000100" + НомерСтроки + "03"] = СтрокаТаблицы.КоличествоСтавок;
			// Численность работников (без внешних совместителей), человек фактически на конец отчетного периода.
			Документ["П00000100" + НомерСтроки + "04"] = СтрокаТаблицы.ЧисленностьНаКонецПериодаСписочногоСостава;
			// Численность работников (без внешних совместителей), средне-списочная за отчетный период.
			Документ["П00000100" + НомерСтроки + "05"] = Окр(СтрокаТаблицы.СредняяЧисленностьЗаПериодСписочногоСостава, 1);
			// Начислено средств на оплату труда работников в отчетном периоде, тыс руб (нарастающим итогом с начала года).
			Документ["П00000100" + НомерСтроки + "06"] = Окр(СтрокаТаблицы.НачисленоРаботникамСписочногоСостава / 1000, 1);
			// Сумма выплат социального характера, начисленных в отчетном периоде, тыс руб (нарастающим итогом с начала года).
			Документ["П00000100" + НомерСтроки + "07"] = Окр(СтрокаТаблицы.НачисленияСоциальногоХарактера / 1000, 1);
		КонецЦикла;
	Исключение
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуется обновить конфигурацию.
				|Подробности: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьПоказателиФормы1ТГМС_2019(ПоказателиОтчета)
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	
	Для Номер = 1 По 3 Цикл
		НомерСтроки = Формат(Номер, "ЧЦ=2; ЧВН=");
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "03", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "04", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "05", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "06", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + НомерСтроки + "07", Истина, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормы1ТГМС_2019(ПараметрыОтчета, Контейнер)
	
	ТаблицаДанныхОтчета = ДанныеОтчета1ТГМС_2019(ПараметрыОтчета);
	
	Попытка
		Документ = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхОтчета Цикл
			НомерСтроки = Формат(СтрокаТаблицы.НомерСтроки1ТГМС2019, "ЧЦ=2; ЧВН=");
			// Утверждено штатных единиц на конец отчетного периода
			Документ["П00000100" + НомерСтроки + "03"] = Окр(СтрокаТаблицы.КоличествоСтавок, 1);
			// Численность работников (без внешних совместителей), человек фактически на конец отчетного периода.
			Документ["П00000100" + НомерСтроки + "04"] = СтрокаТаблицы.ЧисленностьНаКонецПериодаСписочногоСостава;
			// Численность работников (без внешних совместителей), средне-списочная за отчетный период.
			Документ["П00000100" + НомерСтроки + "05"] = Окр(СтрокаТаблицы.СредняяЧисленностьЗаПериодСписочногоСостава, 1);
			// Начислено средств на оплату труда работников в отчетном периоде, тыс руб (нарастающим итогом с начала года).
			Документ["П00000100" + НомерСтроки + "06"] = Окр(СтрокаТаблицы.НачисленоРаботникамСписочногоСостава / 1000, 1);
			// Сумма выплат социального характера, начисленных в отчетном периоде, тыс руб (нарастающим итогом с начала года).
			Документ["П00000100" + НомерСтроки + "07"] = Окр(СтрокаТаблицы.НачисленияСоциальногоХарактера / 1000, 1);
		КонецЦикла;
	Исключение
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуется обновить конфигурацию.
				|Подробности: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция ДанныеОтчета1ТГМС_2015(ПараметрыОтчета)
	ИмяКолонкиНомерСтроки1ТГМС = "НомерСтроки1ТГМС2015";
	ТаблицаДанныхОтчета = ДанныеОтчета1ТГМС(ПараметрыОтчета, ИмяКолонкиНомерСтроки1ТГМС);
	
	// Наполнение таблицы пустыми строками чтобы очистить данные предыдущего заполнения.
	Для НомерСтроки = 1 По 4 Цикл
		СтрокаТаблицы = ТаблицаДанныхОтчета.Найти(НомерСтроки, ИмяКолонкиНомерСтроки1ТГМС);
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = ТаблицаДанныхОтчета.Добавить();
			СтрокаТаблицы[ИмяКолонкиНомерСтроки1ТГМС] = НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанныхОтчета;
КонецФункции

Функция ДанныеОтчета1ТГМС_2019(ПараметрыОтчета) Экспорт
	ИмяКолонкиНомерСтроки1ТГМС = "НомерСтроки1ТГМС2019";
	ТаблицаДанныхОтчета = ДанныеОтчета1ТГМС(ПараметрыОтчета, ИмяКолонкиНомерСтроки1ТГМС);
	
	// Наполнение таблицы пустыми строками чтобы очистить данные предыдущего заполнения.
	Для НомерСтроки = 1 По 4 Цикл
		СтрокаТаблицы = ТаблицаДанныхОтчета.Найти(НомерСтроки, ИмяКолонкиНомерСтроки1ТГМС);
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = ТаблицаДанныхОтчета.Добавить();
			СтрокаТаблицы[ИмяКолонкиНомерСтроки1ТГМС] = НомерСтроки;
		КонецЕсли;
		// Получение итоговых данных в строке № 1.
		Если НомерСтроки = 1 Тогда
			СтрокаТаблицы.КоличествоСтавок                            = ТаблицаДанныхОтчета.Итог("КоличествоСтавок");
			СтрокаТаблицы.ЧисленностьНаКонецПериодаСписочногоСостава  = ТаблицаДанныхОтчета.Итог("ЧисленностьНаКонецПериодаСписочногоСостава");
			СтрокаТаблицы.СредняяЧисленностьЗаПериодСписочногоСостава = ТаблицаДанныхОтчета.Итог("СредняяЧисленностьЗаПериодСписочногоСостава");
			СтрокаТаблицы.НачисленияСоциальногоХарактера              = ТаблицаДанныхОтчета.Итог("НачисленияСоциальногоХарактера");
			СтрокаТаблицы.НачисленоРаботникамСписочногоСостава        = ТаблицаДанныхОтчета.Итог("НачисленоРаботникамСписочногоСостава");
		КонецЕсли;
	КонецЦикла;
	
	// Удаление строк, данные которых вошли только в итог.
	СтрокаТаблицы = ТаблицаДанныхОтчета.Найти(0, ИмяКолонкиНомерСтроки1ТГМС);
	Если СтрокаТаблицы <> Неопределено Тогда
		ТаблицаДанныхОтчета.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
	Возврат ТаблицаДанныхОтчета;
КонецФункции

Функция ДанныеОтчета1ТГМС(ПараметрыОтчета, ИмяКолонкиНомерСтроки1ТГМС)
	// Сведения для отчета берутся за последний месяц.
	ПараметрыОтчетаДляЗаполнения = СкопироватьКоллекцию(ПараметрыОтчета);
	
	ТаблицаДанныхОтчета = Новый ТаблицаЗначений;
	ТаблицаДанныхОтчета.Колонки.Добавить("ПользовательскиеПоля" + ИмяКолонкиНомерСтроки1ТГМС, Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ЧисленностьНаКонецПериодаСписочногоСостава", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("СредняяЧисленностьЗаПериодСписочногоСостава", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("НачисленияСоциальногоХарактера", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("НачисленоРаботникамСписочногоСостава", Новый ОписаниеТипов("Число"));
	
	Фильтр = Новый Структура("Организация", ПараметрыОтчетаДляЗаполнения.Организация);
	
	// Получение зарплатных данных отчета.
	ДанныеОтчета = Новый ТаблицаЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
		"РегламентированныйОтчетСтатистикаФорма1ТГМС",
		ПараметрыОтчетаДляЗаполнения,
		ДанныеОтчета);
	Найденные = ДанныеОтчета.НайтиСтроки(Фильтр);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанныхОтчета.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	// Получение кадровых данных отчета.
	ДанныеОтчета = Новый ТаблицаЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
		"РегламентированныйОтчетСтатистикаФорма1ТГМС",
		ПараметрыОтчетаДляЗаполнения,
		ДанныеОтчета);
	Найденные = ДанныеОтчета.НайтиСтроки(Фильтр);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанныхОтчета.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	// Получение данных штатного расписания.
	ДанныеОтчета = Новый ТаблицаЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиШР1ТГМС(
		"РегламентированныйОтчетСтатистикаФорма1ТГМС",
		ПараметрыОтчетаДляЗаполнения,
		ДанныеОтчета);
	Найденные = ДанныеОтчета.НайтиСтроки(Фильтр);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанныхОтчета.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	// Номер строки 1Т (ГМС) вычисляется в пользовательских полях СКД, его требуется привести к проектному.
	ТаблицаДанныхОтчета.Колонки["ПользовательскиеПоля" + ИмяКолонкиНомерСтроки1ТГМС].Имя = ИмяКолонкиНомерСтроки1ТГМС;
	
	// Вычисление итогов.
	СвернутьТаблицу(ТаблицаДанныхОтчета, ИмяКолонкиНомерСтроки1ТГМС, Ложь);
	
	Возврат ТаблицаДанныхОтчета;
КонецФункции

#КонецОбласти

#Область Форма57Т

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ДобавитьПоказателиФормы57Т_2017(ПоказателиОтчета)
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010203", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010303", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010204", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010304", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П030503", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П030603", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П030703", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П030803", Истина, Ложь);
	
	Для НомерСтрокиОтчета = 1 По 64 Цикл
		
		Для НомерКолонки = 2 По 13 Цикл
			
			Если НомерКолонки = 8 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П02"
				 + Формат(НомерКолонки, "ЧЦ=2; ЧВН=")
				 + "_" + Формат(НомерСтрокиОтчета, "ЧЦ=2"), Истина, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормы57Т_2017(ПараметрыОтчета, Контейнер)
	
	ПараметрыОтчета.ДатаНачалаПериодаОтчета = Дата(Год(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 10, 1);
	ПараметрыОтчета.ДатаКонцаПериодаОтчета = КонецМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	
	// Получение Кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияКадры,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОрганизации = ДанныеОтчета.Строки[0];
	
	// Раздел I. Численность и начисленная заработная плата работников списочного состава.
	// Таблица 1.
	// Среднесписочная численность работников.
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П010203"] = СтрокаОрганизации.СредняяЧисленностьМужчинСписочногоСостава;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П010303"] = СтрокаОрганизации.СредняяЧисленностьЖенщинСписочногоСостава;
	
	// Раздел I. Численность и начисленная заработная плата работников списочного состава.
	// Таблица 2.
	// Численность работников списочного состава, полностью отработавших октябрь (без внешних совместителей).
	
	ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела1Формы57Т(ПараметрыОтчета.Организация, НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета), СтрокаОрганизации);
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П030503"] = ВсеСотрудникиПоКатегориям.НайтиСтроки(Новый Структура("Колонка13", "1")).Количество();
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П030603"] = ВсеСотрудникиПоКатегориям.НайтиСтроки(Новый Структура("Колонка13", "2")).Количество();
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П030703"] = ВсеСотрудникиПоКатегориям.НайтиСтроки(Новый Структура("Колонка13", "3")).Количество();
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П030803"] = ВсеСотрудникиПоКатегориям.НайтиСтроки(Новый Структура("Колонка13", "4")).Количество();
	
	// Раздел I. Численность и начисленная заработная плата работников списочного состава.
	// Таблица 1.
	// Начислено сумм заработной платы за октябрь, тыс. руб.
	//
	// Получение зарплатных данных по аналогии с П-4.
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияЗарплата,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		СтрокаОрганизации = ДанныеОтчета.Строки[0];
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П010204"] = Окр(СтрокаОрганизации.НачисленоМужчинамСписочногоСостава / 1000, 1);
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П010304"] = Окр(СтрокаОрганизации.НачисленоЖенщинамСписочногоСостава / 1000, 1);
	КонецЕсли;
	
	// Раздел II. Данные по отдельным работникам, полностью отработавшим.
	//
	// Получение зарплатных данных с отбором по периоду действия.
	
	Форма57ТРаздел2Сотрудники = СотрудникиДляЗаполненияРаздела2Формы57Т(ПараметрыОтчета.Организация, НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета), ВсеСотрудникиПоКатегориям);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключаяПерерасчеты", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияЗарплата,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		УчтенаКвартальнаяПремия = Ложь;
		ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях(Форма57ТРаздел2Сотрудники, СтрокаОрганизации, УчтенаКвартальнаяПремия);
		
		Если Не УчтенаКвартальнаяПремия Тогда
		
			ДанныеОтчета = Новый ДеревоЗначений;
			
			ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
			ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета = ДобавитьМесяц(ПараметрыОтчета.ДатаНачалаПериодаОтчета, -3);
			ПараметрыОтчетаДляЗаполненияЗарплата.ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(ПараметрыОтчета.ДатаНачалаПериодаОтчета, -1));
			ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ТолькоОсновноеМестоРаботы", Истина);
			ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключаяПерерасчеты", Истина);
			ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
				"РегламентированныйОтчетСтатистикаФорма57Т",
				ПараметрыОтчетаДляЗаполненияЗарплата,
				ДанныеОтчета);
			
			Если ДанныеОтчета.Строки.Количество() > 0 Тогда
				
				СтрокаОрганизации = ДанныеОтчета.Строки[0];
				ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях(Форма57ТРаздел2Сотрудники, СтрокаОрганизации, УчтенаКвартальнаяПремия, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняются колонки со 2 до 13, при этом 8 заполняется самим отчетом.
	НомераКолонок = СтрРазделить("02,03,04,05,06,07,09,10,11,12,13", ",", Ложь);
	
	// Строки, по которым не удалось получить данные, очищаются.
	ДоступноСтрок = Форма57ТРаздел2Сотрудники.Количество();
	
	// Колонки, по которым не удалось получить данные, очищаются.
	ДоступныеИменаКолонок = Новый Соответствие;
	Для Каждого Колонка Из Форма57ТРаздел2Сотрудники.Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		Если СтрНачинаетсяС(ИмяКолонки, "Колонка") Тогда
			НомерКолонкиСтрокой = Сред(ИмяКолонки, СтрДлина("Колонка") + 1);
			Если СтрДлина(НомерКолонкиСтрокой) = 1 Тогда
				НомерКолонкиСтрокой = "0" + НомерКолонкиСтрокой;
			КонецЕсли;
			ДоступныеИменаКолонок.Вставить(НомерКолонкиСтрокой, ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки = 1 По 64 Цикл
		СтрокаФормы = ?(НомерСтроки > ДоступноСтрок, Неопределено, Форма57ТРаздел2Сотрудники[НомерСтроки-1]);
		Для Каждого НомерКолонкиСтрокой Из НомераКолонок Цикл
			Если СтрокаФормы = Неопределено Тогда
				ЗначениеЯчейки = Неопределено;
			Иначе
				ИмяКолонки = ДоступныеИменаКолонок[НомерКолонкиСтрокой];
				Если ИмяКолонки = Неопределено Тогда
					ЗначениеЯчейки = Неопределено;
				Иначе
					ЗначениеЯчейки = СтрокаФормы[ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			ИмяЯчейки = "П02" + НомерКолонкиСтрокой + "_" + Формат(НомерСтроки, "ЧЦ=2");
			Контейнер.ПолеТабличногоДокументаФормаОтчета[ИмяЯчейки] = ЗначениеЯчейки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормы57Т_2021(ПараметрыОтчета, Контейнер)
	
	ПараметрыОтчета.ДатаНачалаПериодаОтчета = Дата(Год(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 10, 1);
	ПараметрыОтчета.ДатаКонцаПериодаОтчета = КонецМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	
	// Получение Кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияКадры,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОрганизации = ДанныеОтчета.Строки[0];
	
	// Раздел I. Численность и начисленная заработная плата работников списочного состава.
	// Таблица 1.
	// Среднесписочная численность работников.
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П010203"] = СтрокаОрганизации.СредняяЧисленностьМужчинСписочногоСостава;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П010303"] = СтрокаОрганизации.СредняяЧисленностьЖенщинСписочногоСостава;
	
	
	// Раздел I. Численность и начисленная заработная плата работников списочного состава.
	// Таблица 1.
	// Начислено сумм заработной платы за октябрь, тыс. руб.
	//
	// Получение зарплатных данных по аналогии с П-4.
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияЗарплата,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		СтрокаОрганизации = ДанныеОтчета.Строки[0];
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П010204"] = Окр(СтрокаОрганизации.НачисленоМужчинамСписочногоСостава / 1000, 1);
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П010304"] = Окр(СтрокаОрганизации.НачисленоЖенщинамСписочногоСостава / 1000, 1);
	КонецЕсли;
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполнения = СкопироватьКоллекцию(ПараметрыОтчета);
	
	ДанныеДляЗаполненияРегламентированнойОтчетности57Т("РегламентированныйОтчетСтатистикаФорма57Т", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	// Раздел I. Численность и начисленная заработная плата работников списочного состава.
	// Таблица 2.
	// Численность работников списочного состава, полностью отработавших октябрь (без внешних совместителей).
	
	СтрокаОрганизации = ДанныеОтчета.Строки[0];
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П030503"] = СтрокаОрганизации.Строки.НайтиСтроки(Новый Структура("КодКатегории", "1")).Количество();
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П030603"] = СтрокаОрганизации.Строки.НайтиСтроки(Новый Структура("КодКатегории", "2")).Количество();
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П030703"] = СтрокаОрганизации.Строки.НайтиСтроки(Новый Структура("КодКатегории", "3")).Количество();
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П030803"] = СтрокаОрганизации.Строки.НайтиСтроки(Новый Структура("КодКатегории", "4")).Количество();
	
	
	// Раздел II. Данные по отдельным работникам, полностью отработавшим.
	//
	// Получение зарплатных данных с отбором по периоду действия.
	
	ОтобранныеСотрудники = СтрокаОрганизации.Строки.НайтиСтроки(Новый Структура("Отобран", Истина), Ложь);
	
	// Строки, по которым не удалось получить данные, очищаются.
	ДоступноСтрок = ОтобранныеСотрудники.Количество();
	
	// Колонки, по которым не удалось получить данные, очищаются.
	Для НомерСтроки = 1 По 64 Цикл
		СтрокаФормы = ?(НомерСтроки > ДоступноСтрок, Неопределено, ОтобранныеСотрудники[НомерСтроки-1]);
		Если СтрокаФормы = Неопределено Тогда
			Для НомерСтолбца = 2 По 13 Цикл
				Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") 
					+ Формат(НомерСтолбца,"ЧЦ=2; ЧВН=")] = Неопределено;
			КонецЦикла;
		Иначе
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "02"] = СтрокаФормы.Должность;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "03"] = СтрокаФормы.КодПоОКПДТР;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "04"] = СтрокаФормы.Пол;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "05"] = СтрокаФормы.ГодРождения;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "06"] = СтрокаФормы.Образование;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "07"] = СтрокаФормы.Стаж;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "09"] = СтрокаФормы.ТарифныйЗаработок;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "10"] = СтрокаФормы.ВыплатыПоРайонномуРегулированию;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "11"] = СтрокаФормы.ДругиеВыплаты;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "12"] = СтрокаФормы.ОтработаноЧасов;
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П02" + Формат(НомерСтроки,"ЧЦ=2; ЧВН=") + "13"] = СтрокаФормы.КодКатегории;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция СотрудникиДляЗаполненияРаздела1Формы57Т(Организация, ПериодОтчета, ДанныеОрганизации = Неопределено, ТолькоДолжностиСОКПДТРКатегорией = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеОрганизации = Неопределено Тогда
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		ПараметрыОтчетаДляЗаполненияКадры = Новый Структура;
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("Организация", Организация);
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаВыборки", НачалоМесяца(ПериодОтчета));
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", КонецМесяца(ПериодОтчета));
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("НомерСтроки", 0);
		
		ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
			"РегламентированныйОтчетСтатистикаФорма57Т",
			ПараметрыОтчетаДляЗаполненияКадры,
			ДанныеОтчета);
		
		Если ДанныеОтчета.Строки.Количество() = 0 Тогда
			ДанныеОрганизации = ДанныеОтчета; // Пустое дерево значений.
		Иначе
			ДанныеОрганизации = ДанныеОтчета.Строки[0];
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСотрудников = ДанныеОрганизации.Строки.ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("НачалоПериодаОтчета", НачалоМесяца(ПериодОтчета));
	Запрос.УстановитьПараметр("КонецПериодаОтчета", КонецМесяца(ПериодОтчета));
	
	// Отбор полностью отработавших сотрудников
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&НачалоПериодаОтчета КАК ДатаНачала,
		|	&КонецПериодаОтчета КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)";
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремени";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Истина;
	ПараметрыЗаполнения.ДатаАктуальности  = КонецМесяца(ПериодОтчета);
	ПараметрыЗаполнения.ДатаНачала = НачалоМесяца(ПериодОтчета);
	ПараметрыЗаполнения.ДатаОкончания = КонецМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.МесяцДатаОкончания = КонецМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
		|	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
		|	СУММА(ДанныеУчетаВремени.Дни) КАК Дни
		|ПОМЕСТИТЬ ВТСотрудникиСОтклонениями
		|ИЗ
		|	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
		|ГДЕ
		|	ДанныеУчетаВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|	И ДанныеУчетаВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни)
		|	И НЕ ДанныеУчетаВремени.ВидУчетаВремени.РабочееВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУчетаВремени.Сотрудник,
		|	ДанныеУчетаВремени.ВидУчетаВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(Сотрудники.ДатаОкончания, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСОтклонениями КАК СотрудникиСОтклонениями
		|		ПО Сотрудники.Сотрудник = СотрудникиСОтклонениями.Сотрудник
		|ГДЕ
		|	СотрудникиСОтклонениями.Сотрудник ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	// Получение кадровых данных полностью отработавших сотрудников
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВТ,
		Ложь,
		"Пол,
		|ДатаРождения,
		|ДолжностьПоШтатномуРасписанию,
		|Должность,
		|Образование1ВидОбразования,
		|СтажРаботыНаПредприятииЛет,
		|СтажРаботыНаПредприятииМесяцев,
		|ДоляНеполногоРабочегоВремени,
		|ДатаПриема,
		|ДатаУвольнения");
		
	Запрос.УстановитьПараметр("ИспользоватьШтатноеРасписание", ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Сотрудник.Наименование КАК Наименование,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.ДатаРождения КАК ДатаРождения,
		|	КадровыеДанныеСотрудников.Образование1ВидОбразования КАК Образование1ВидОбразования,
		|	КадровыеДанныеСотрудников.СтажРаботыНаПредприятииЛет КАК СтажРаботыНаПредприятииЛет,
		|	КадровыеДанныеСотрудников.СтажРаботыНаПредприятииМесяцев КАК СтажРаботыНаПредприятииМесяцев,
		|	ВЫБОР
		|		КОГДА &ИспользоватьШтатноеРасписание
		|				И НЕ КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию.ТрудоваяФункция = ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ПустаяСсылка)
		|			ТОГДА КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию.ТрудоваяФункция
		|		ИНАЧЕ КадровыеДанныеСотрудников.Должность.ТрудоваяФункция
		|	КОНЕЦ КАК ТрудоваяФункция
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудниковСТрудовойФункцией
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени >= 1
		|	И КадровыеДанныеСотрудников.ДатаПриема > ДАТАВРЕМЯ(1, 1, 1)
		|	И КадровыеДанныеСотрудников.ДатаПриема <= &НачалоПериодаОтчета
		|	И (КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) >= &КонецПериодаОтчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Наименование КАК Наименование,
		|	КадровыеДанныеСотрудников.Должность КАК Колонка2,
		|	ТрудовыеФункции.ОКПДТРКод КАК Колонка3,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Колонка4,
		|	ГОД(КадровыеДанныеСотрудников.ДатаРождения) КАК Колонка5,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура))
		|			ТОГДА 1
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование))
		|			ТОГДА 2
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование))
		|			ТОГДА 3
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование))
		|			ТОГДА 4
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование))
		|			ТОГДА 5
		|		ИНАЧЕ 6
		|	КОНЕЦ КАК Колонка6,
		|	КадровыеДанныеСотрудников.СтажРаботыНаПредприятииЛет + КадровыеДанныеСотрудников.СтажРаботыНаПредприятииМесяцев / 12 КАК Колонка7,
		|	ТрудовыеФункции.ОКПДТРКатегория КАК Колонка13
		|ИЗ
		|	ВТКадровыеДанныеСотрудниковСТрудовойФункцией КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТрудовыеФункции КАК ТрудовыеФункции
		|		ПО КадровыеДанныеСотрудников.ТрудоваяФункция = ТрудовыеФункции.Ссылка
		|ГДЕ
		|	ТрудовыеФункции.ОКПДТРКатегория <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	КадровыеДанныеСотрудников.Наименование";
	
	Если Не ТолькоДолжностиСОКПДТРКатегорией Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТрудовыеФункции.ОКПДТРКатегория <> """"", "");
	КонецЕсли;
	
	ВсеСотрудникиОрганизации = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВсеСотрудникиОрганизации;
	
КонецФункции

Функция СотрудникиДляЗаполненияРаздела2Формы57Т(Организация, ПериодОтчета, ВсеСотрудникиПоКатегориям)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение ранее отобранных сотрудников
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Форма57ТРаздел2Сотрудники.Сотрудник КАК Сотрудник,
		|	Форма57ТРаздел2Сотрудники.НомерСтрокиОтчета КАК НомерСтрокиОтчета
		|ИЗ
		|	РегистрСведений.Форма57ТРаздел2Сотрудники КАК Форма57ТРаздел2Сотрудники
		|ГДЕ
		|	Форма57ТРаздел2Сотрудники.Организация = &Организация
		|	И Форма57ТРаздел2Сотрудники.ПериодОтчета = &ПериодОтчета";
	
	ОтобранныеСотрудникиРегистра = Запрос.Выполнить().Выгрузить();
	ОтобранныеСотрудникиРегистра.Индексы.Добавить("Сотрудник");
	
	ОбщееЧислоРаботников = ВсеСотрудникиПоКатегориям.Количество();
	
	Если ОбщееЧислоРаботников < 50 Тогда
		ЧислоОбследуемых = 8;
	ИначеЕсли ОбщееЧислоРаботников < 100 Тогда
		ЧислоОбследуемых = 12;
	ИначеЕсли ОбщееЧислоРаботников < 250 Тогда
		ЧислоОбследуемых = 16;
	ИначеЕсли ОбщееЧислоРаботников < 500 Тогда
		ЧислоОбследуемых = 20;
	ИначеЕсли ОбщееЧислоРаботников < 700 Тогда
		ЧислоОбследуемых = 24;
	ИначеЕсли ОбщееЧислоРаботников < 1000 Тогда
		ЧислоОбследуемых = 32;
	ИначеЕсли ОбщееЧислоРаботников < 1500 Тогда
		ЧислоОбследуемых = 40;
	ИначеЕсли ОбщееЧислоРаботников < 2000 Тогда
		ЧислоОбследуемых = 48;
	ИначеЕсли ОбщееЧислоРаботников < 4000 Тогда
		ЧислоОбследуемых = 56;
	Иначе
		ЧислоОбследуемых = 64;
	КонецЕсли;
	
	ИнтервалОтбора = ОбщееЧислоРаботников / ЧислоОбследуемых;
	
	ВсеСотрудникиПоКатегориям1Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("Колонка13", "1"));
	ВсеСотрудникиПоКатегориям2Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("Колонка13", "2"));
	ВсеСотрудникиПоКатегориям3Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("Колонка13", "3"));
	ВсеСотрудникиПоКатегориям4Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("Колонка13", "4"));
	
	Форма57ТРаздел2Сотрудники = ВсеСотрудникиПоКатегориям.СкопироватьКолонки();
	ВсеОтобранныеСотрудникиРегистраНайдены = Не ОтобранныеСотрудникиРегистра.Количество() > 0;
	
	Генератор = Новый ГенераторСлучайныхЧисел();
	НачалоОтбора = Генератор.СлучайноеЧисло(1, ИнтервалОтбора);
	
	Для НомерСтрокиОтчета = 1 По ЧислоОбследуемых Цикл
		
		НомерСтрокиОтбора = НачалоОтбора + ИнтервалОтбора * (НомерСтрокиОтчета - 1);
		
		Если Не ВсеОтобранныеСотрудникиРегистраНайдены Тогда
			
			СотрудникНайден = Ложь;
			Для Каждого СтрокаОтобранныеСотрудникиРегистра Из ОтобранныеСотрудникиРегистра Цикл
				
				НайденнаяСтрока = ВсеСотрудникиПоКатегориям.Найти(СтрокаОтобранныеСотрудникиРегистра.Сотрудник, "Сотрудник");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					СотрудникНайден = Истина;
					ЗаполнитьЗначенияСвойств(Форма57ТРаздел2Сотрудники.Добавить(), НайденнаяСтрока);
					
					ОтобранныеСотрудникиРегистра.Удалить(СтрокаОтобранныеСотрудникиРегистра);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СотрудникНайден Тогда
				Продолжить;
			Иначе
				ВсеОтобранныеСотрудникиРегистраНайдены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтрокиДляПоиска = Цел(НомерСтрокиОтбора);
		НайденнаяСтрокаСотрудника = Неопределено;
		ПоискСНачалаКоллекции = Ложь;
		
		Пока НайденнаяСтрокаСотрудника = Неопределено Цикл
			
			СтрокаСотрудника = Неопределено;
			Если НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям1Категории[НомерСтрокиДляПоиска - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям2Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() + ВсеСотрудникиПоКатегориям3Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям3Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - ВсеСотрудникиПоКатегориям2Категории.Количество() - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() + ВсеСотрудникиПоКатегориям3Категории.Количество() +  + ВсеСотрудникиПоКатегориям4Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям4Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - ВсеСотрудникиПоКатегориям2Категории.Количество() -  + ВсеСотрудникиПоКатегориям3Категории.Количество() - 1];
			КонецЕсли;
			
			Если СтрокаСотрудника <> Неопределено
				И Форма57ТРаздел2Сотрудники.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник") = Неопределено Тогда
				
				НайденнаяСтрокаСотрудника = СтрокаСотрудника;
				
			Иначе
				
				НомерСтрокиДляПоиска = НомерСтрокиДляПоиска + 1;
				Если НомерСтрокиДляПоиска > ВсеСотрудникиПоКатегориям.Количество() Тогда
					
					Если ПоискСНачалаКоллекции Тогда
						Прервать;
					Иначе
						
						НомерСтрокиДляПоиска = 1;
						ПоискСНачалаКоллекции = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденнаяСтрокаСотрудника = Неопределено Тогда
			Прервать;
		Иначе
			ЗаполнитьЗначенияСвойств(Форма57ТРаздел2Сотрудники.Добавить(), НайденнаяСтрокаСотрудника);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям1Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям2Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям3Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям4Категории);
	
	Если Форма57ТРаздел2Сотрудники.Количество() > 0 Тогда
		
		Форма57ТРаздел2Сотрудники.Сортировать("Колонка13,Наименование");
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("НомерСтрокиОтчета");
		
		НаборЗаписей = РегистрыСведений.Форма57ТРаздел2Сотрудники.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.ПериодОтчета.Установить(ПериодОтчета);
		
		Для НомерСтрокиОтчета = 1 По Форма57ТРаздел2Сотрудники.Количество() Цикл
			
			СтрокаФормы57ТРаздел2Сотрудники = Форма57ТРаздел2Сотрудники[НомерСтрокиОтчета - 1];
			
			Запись = НаборЗаписей.Добавить();
			Запись.Организация = Организация;
			Запись.ПериодОтчета = ПериодОтчета;
			Запись.Сотрудник = СтрокаФормы57ТРаздел2Сотрудники.Сотрудник;
			Запись.НомерСтрокиОтчета = НомерСтрокиОтчета;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Форма57ТРаздел2Сотрудники;
	
КонецФункции

Функция СотрудникиДляЗаполненияРаздела1Формы57Т_2021(Организация, ПериодОтчета, ДанныеОрганизации = Неопределено, ТолькоДолжностиСОКПДТРКатегорией = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеОрганизации = Неопределено Тогда
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		ПараметрыОтчетаДляЗаполненияКадры = Новый Структура;
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("Организация", Организация);
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаВыборки", НачалоМесяца(ПериодОтчета));
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", КонецМесяца(ПериодОтчета));
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("НомерСтроки", 0);
		
		ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
			"РегламентированныйОтчетСтатистикаФорма57Т",
			ПараметрыОтчетаДляЗаполненияКадры,
			ДанныеОтчета);
		
		Если ДанныеОтчета.Строки.Количество() = 0 Тогда
			ДанныеОрганизации = ДанныеОтчета; // Пустое дерево значений.
		Иначе
			ДанныеОрганизации = ДанныеОтчета.Строки[0];
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСотрудников = ДанныеОрганизации.Строки.ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("НачалоПериодаОтчета", НачалоМесяца(ПериодОтчета));
	Запрос.УстановитьПараметр("КонецПериодаОтчета", КонецМесяца(ПериодОтчета));
	
	// Отбор полностью отработавших сотрудников
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&НачалоПериодаОтчета КАК ДатаНачала,
		|	&КонецПериодаОтчета КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)";
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремени";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Истина;
	ПараметрыЗаполнения.ДатаАктуальности  = КонецМесяца(ПериодОтчета);
	ПараметрыЗаполнения.ДатаНачала = НачалоМесяца(ПериодОтчета);
	ПараметрыЗаполнения.ДатаОкончания = КонецМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.МесяцДатаОкончания = КонецМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыЗаполнения);
	Запрос.УстановитьПараметр("ОплачиваемыеНерабочиеДни", ОбщегоНазначения.ПредопределенныйЭлемент(
		"Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
		|	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
		|	СУММА(ДанныеУчетаВремени.Дни) КАК Дни
		|ПОМЕСТИТЬ ВТСотрудникиСОтклонениями
		|ИЗ
		|	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
		|ГДЕ
		|	ДанныеУчетаВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|	И ДанныеУчетаВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни)
		|	И НЕ ДанныеУчетаВремени.ВидУчетаВремени.РабочееВремя
		|	И ДанныеУчетаВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Командировка)
		|	И ДанныеУчетаВремени.ВидУчетаВремени <> &ОплачиваемыеНерабочиеДни
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУчетаВремени.Сотрудник,
		|	ДанныеУчетаВремени.ВидУчетаВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(Сотрудники.ДатаОкончания, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСОтклонениями КАК СотрудникиСОтклонениями
		|		ПО Сотрудники.Сотрудник = СотрудникиСОтклонениями.Сотрудник
		|ГДЕ
		|	СотрудникиСОтклонениями.Сотрудник ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	// Получение кадровых данных полностью отработавших сотрудников
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВТ,
		Ложь,
		"Пол,
		|ДатаРождения,
		|Организация,
		|Подразделение,
		|ДолжностьПоШтатномуРасписанию,
		|Должность,
		|Образование1ВидОбразования,
		|СтажРаботыНаПредприятииЛет,
		|СтажРаботыНаПредприятииМесяцев,
		|ДоляНеполногоРабочегоВремени,
		|ГрафикРаботы,
		|ДатаПриема,
		|ДатаУвольнения");
		
	Запрос.УстановитьПараметр("ИспользоватьШтатноеРасписание", ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Сотрудник.Наименование КАК Наименование,
		|	КадровыеДанныеСотрудников.Организация КАК Организация,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.ДатаРождения КАК ДатаРождения,
		|	КадровыеДанныеСотрудников.Образование1ВидОбразования КАК Образование1ВидОбразования,
		|	КадровыеДанныеСотрудников.СтажРаботыНаПредприятииЛет КАК СтажРаботыНаПредприятииЛет,
		|	КадровыеДанныеСотрудников.СтажРаботыНаПредприятииМесяцев КАК СтажРаботыНаПредприятииМесяцев,
		|	ВЫБОР
		|		КОГДА &ИспользоватьШтатноеРасписание
		|				И НЕ КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию.ТрудоваяФункция = ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ПустаяСсылка)
		|			ТОГДА КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию.ТрудоваяФункция
		|		ИНАЧЕ КадровыеДанныеСотрудников.Должность.ТрудоваяФункция
		|	КОНЕЦ КАК ТрудоваяФункция
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудниковСТрудовойФункцией
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени >= 1
		|	И КадровыеДанныеСотрудников.ДатаПриема > ДАТАВРЕМЯ(1, 1, 1)
		|	И КадровыеДанныеСотрудников.ДатаПриема <= &НачалоПериодаОтчета
		|	И (КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) >= &КонецПериодаОтчета)
		|	И КадровыеДанныеСотрудников.ГрафикРаботы.НеполноеРабочееВремя = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Наименование КАК Наименование,
		|	КадровыеДанныеСотрудников.Организация КАК Организация,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	ТрудовыеФункции.ОКПДТРКод КАК КодПоОКПДТР,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Пол,
		|	ГОД(КадровыеДанныеСотрудников.ДатаРождения) КАК ГодРождения,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура))
		|			ТОГДА 1
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование))
		|			ТОГДА 2
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование))
		|			ТОГДА 3
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование))
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Образование,
		|	КадровыеДанныеСотрудников.СтажРаботыНаПредприятииЛет + КадровыеДанныеСотрудников.СтажРаботыНаПредприятииМесяцев / 12 КАК Стаж,
		|	ТрудовыеФункции.ОКПДТРКатегория КАК КодКатегории
		|ИЗ
		|	ВТКадровыеДанныеСотрудниковСТрудовойФункцией КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТрудовыеФункции КАК ТрудовыеФункции
		|		ПО КадровыеДанныеСотрудников.ТрудоваяФункция = ТрудовыеФункции.Ссылка
		|ГДЕ
		|	ТрудовыеФункции.ОКПДТРКатегория <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	КадровыеДанныеСотрудников.Наименование";
	
	Если Не ТолькоДолжностиСОКПДТРКатегорией Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТрудовыеФункции.ОКПДТРКатегория <> """"", "");
	КонецЕсли;
	
	ВсеСотрудникиОрганизации = Запрос.Выполнить().Выгрузить();
	ВсеСотрудникиОрганизации.Колонки.Добавить("Отобран", Новый ОписаниеТипов("Булево"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВсеСотрудникиОрганизации;
	
КонецФункции

Функция СотрудникиДляЗаполненияРаздела2Формы57Т_2021(Организация, ПериодОтчета, ВсеСотрудникиПоКатегориям)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение ранее отобранных сотрудников
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Форма57ТРаздел2Сотрудники.Сотрудник КАК Сотрудник,
		|	Форма57ТРаздел2Сотрудники.НомерСтрокиОтчета КАК НомерСтрокиОтчета,
		|	Форма57ТРаздел2Сотрудники.Организация
		|ИЗ
		|	РегистрСведений.Форма57ТРаздел2Сотрудники КАК Форма57ТРаздел2Сотрудники
		|ГДЕ
		|	Форма57ТРаздел2Сотрудники.Организация = &Организация
		|	И Форма57ТРаздел2Сотрудники.ПериодОтчета = &ПериодОтчета";
	
	ОтобранныеСотрудникиРегистра = Запрос.Выполнить().Выгрузить();
	ОтобранныеСотрудникиРегистра.Индексы.Добавить("Сотрудник");
	
	ОбщееЧислоРаботников = ВсеСотрудникиПоКатегориям.Количество();
	
	Если ОбщееЧислоРаботников < 50 Тогда
		ЧислоОбследуемых = 8;
	ИначеЕсли ОбщееЧислоРаботников < 100 Тогда
		ЧислоОбследуемых = 12;
	ИначеЕсли ОбщееЧислоРаботников < 250 Тогда
		ЧислоОбследуемых = 16;
	ИначеЕсли ОбщееЧислоРаботников < 500 Тогда
		ЧислоОбследуемых = 20;
	ИначеЕсли ОбщееЧислоРаботников < 700 Тогда
		ЧислоОбследуемых = 24;
	ИначеЕсли ОбщееЧислоРаботников < 1000 Тогда
		ЧислоОбследуемых = 32;
	ИначеЕсли ОбщееЧислоРаботников < 1500 Тогда
		ЧислоОбследуемых = 40;
	ИначеЕсли ОбщееЧислоРаботников < 2000 Тогда
		ЧислоОбследуемых = 48;
	ИначеЕсли ОбщееЧислоРаботников < 4000 Тогда
		ЧислоОбследуемых = 56;
	Иначе
		ЧислоОбследуемых = 64;
	КонецЕсли;
	
	ИнтервалОтбора = ОбщееЧислоРаботников / ЧислоОбследуемых;
	
	ВсеСотрудникиПоКатегориям1Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("КодКатегории", "1"));
	ВсеСотрудникиПоКатегориям2Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("КодКатегории", "2"));
	ВсеСотрудникиПоКатегориям3Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("КодКатегории", "3"));
	ВсеСотрудникиПоКатегориям4Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("КодКатегории", "4"));
	
	Форма57ТРаздел2Сотрудники = ОбщегоНазначения.СкопироватьРекурсивно(ВсеСотрудникиПоКатегориям);
	ВсеОтобранныеСотрудникиРегистраНайдены = Не ОтобранныеСотрудникиРегистра.Количество() > 0;
	
	Генератор = Новый ГенераторСлучайныхЧисел();
	НачалоОтбора = Генератор.СлучайноеЧисло(1, ИнтервалОтбора);
	
	Для НомерСтрокиОтчета = 1 По ЧислоОбследуемых Цикл
		
		НомерСтрокиОтбора = НачалоОтбора + ИнтервалОтбора * (НомерСтрокиОтчета - 1);
		
		Если Не ВсеОтобранныеСотрудникиРегистраНайдены Тогда
			
			СотрудникНайден = Ложь;
			Для Каждого СтрокаОтобранныеСотрудникиРегистра Из ОтобранныеСотрудникиРегистра Цикл
				
				НайденнаяСтрока = Форма57ТРаздел2Сотрудники.Найти(СтрокаОтобранныеСотрудникиРегистра.Сотрудник, "Сотрудник");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					СотрудникНайден = Истина;
					НайденнаяСтрока.Отобран = Истина;
					
					ОтобранныеСотрудникиРегистра.Удалить(СтрокаОтобранныеСотрудникиРегистра);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СотрудникНайден Тогда
				Продолжить;
			Иначе
				ВсеОтобранныеСотрудникиРегистраНайдены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтрокиДляПоиска = Цел(НомерСтрокиОтбора);
		СотрудникНайден = Ложь;
		ПоискСНачалаКоллекции = Ложь;
		
		Пока СотрудникНайден = Ложь Цикл
			
			СтрокаСотрудника = Неопределено;
			Если НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям1Категории[НомерСтрокиДляПоиска - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям2Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() + ВсеСотрудникиПоКатегориям3Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям3Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - ВсеСотрудникиПоКатегориям2Категории.Количество() - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() + ВсеСотрудникиПоКатегориям3Категории.Количество() +  + ВсеСотрудникиПоКатегориям4Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям4Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - ВсеСотрудникиПоКатегориям2Категории.Количество() -  + ВсеСотрудникиПоКатегориям3Категории.Количество() - 1];
			КонецЕсли;
			
			Если СтрокаСотрудника <> Неопределено Тогда
				СтрокаРаздела2 = Форма57ТРаздел2Сотрудники.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
				СтрокаРаздела2.Отобран = Истина;
				СотрудникНайден = Истина;
			Иначе
				
				НомерСтрокиДляПоиска = НомерСтрокиДляПоиска + 1;
				Если НомерСтрокиДляПоиска > ВсеСотрудникиПоКатегориям.Количество() Тогда
					
					Если ПоискСНачалаКоллекции Тогда
						Прервать;
					Иначе
						
						НомерСтрокиДляПоиска = 1;
						ПоискСНачалаКоллекции = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДобавитьСотрудниковКатегорииВФорме57Т_2021(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям1Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т_2021(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям2Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т_2021(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям3Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т_2021(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям4Категории);
	
	Если Форма57ТРаздел2Сотрудники.Количество() > 0 Тогда
		
		Форма57ТРаздел2Сотрудники.Сортировать("КодКатегории,Наименование");
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("НомерСтрокиОтчета");
		
		НаборЗаписей = РегистрыСведений.Форма57ТРаздел2Сотрудники.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.ПериодОтчета.Установить(ПериодОтчета);
		НомерСтрокиОтчета = 1;
		Для НомерСтроки = 1 По Форма57ТРаздел2Сотрудники.Количество() Цикл
			
			СтрокаФормы57ТРаздел2Сотрудники = Форма57ТРаздел2Сотрудники[НомерСтроки - 1];
			
			Если СтрокаФормы57ТРаздел2Сотрудники.Отобран Тогда
				СтрокаФормы57ТРаздел2Сотрудники.НомерСтрокиОтчета = НомерСтрокиОтчета;
			
				Запись = НаборЗаписей.Добавить();
				Запись.Организация = Организация;
				Запись.ПериодОтчета = ПериодОтчета;
				Запись.Сотрудник = СтрокаФормы57ТРаздел2Сотрудники.Сотрудник;
				Запись.НомерСтрокиОтчета = НомерСтрокиОтчета;
				
				НомерСтрокиОтчета = НомерСтрокиОтчета +1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма57ТРаздел2Сотрудники.Колонки.Добавить("ТарифныйЗаработок", Новый ОписаниеТипов("Число"));
	Форма57ТРаздел2Сотрудники.Колонки.Добавить("ВыплатыПоРайонномуРегулированию", Новый ОписаниеТипов("Число"));
	Форма57ТРаздел2Сотрудники.Колонки.Добавить("ДругиеВыплаты", Новый ОписаниеТипов("Число"));
	Форма57ТРаздел2Сотрудники.Колонки.Добавить("ОтработаноЧасов", Новый ОписаниеТипов("Число"));
	Форма57ТРаздел2Сотрудники.Колонки.Добавить("ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени");
	
	Возврат Форма57ТРаздел2Сотрудники;
	
КонецФункции

Процедура ЗаполнитьСотрудниковРаздела2Формы57Т(Организация, ПериодОтчета) Экспорт
	
	Если Год(ПериодОтчета) < 2021 Тогда
		
		ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела1Формы57Т(Организация, ПериодОтчета);
		СотрудникиДляЗаполненияРаздела2Формы57Т(Организация, ПериодОтчета, ВсеСотрудникиПоКатегориям);
	Иначе
		
		ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела1Формы57Т_2021(Организация, ПериодОтчета);
		СотрудникиДляЗаполненияРаздела2Формы57Т_2021(Организация, ПериодОтчета, ВсеСотрудникиПоКатегориям);

	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, СотрудникиКатегории)
	
	Если СотрудникиКатегории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма57ТРаздел2Сотрудники.НайтиСтроки(Новый Структура("Колонка13", СотрудникиКатегории[0].Колонка13)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДобавленных = 0;
	Для Каждого СтрокаСотрудника Из СотрудникиКатегории Цикл
		
		Если Форма57ТРаздел2Сотрудники.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма57ТРаздел2Сотрудники.Добавить(), СтрокаСотрудника);
		
		КоличествоДобавленных = КоличествоДобавленных + 1;
		Если КоличествоДобавленных > 1 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях(Форма57ТРаздел2Сотрудники, ДанныеОрганизации, УчтенаКвартальнаяПремия, УчестьТолькоКвартальнуюПремию = Ложь)
	
	Если Форма57ТРаздел2Сотрудники.Колонки.Найти("Колонка9") = Неопределено Тогда
		
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("Колонка9", Новый ОписаниеТипов("Число"));
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("Колонка10", Новый ОписаниеТипов("Число"));
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("Колонка11", Новый ОписаниеТипов("Число"));
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("Колонка12", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из Форма57ТРаздел2Сотрудники Цикл
		
		СтрокиНачислений = ДанныеОрганизации.Строки.НайтиСтроки(Новый Структура("Сотрудник", СтрокаФормы.Сотрудник));
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			
			НачисленоРаботникам = СтрокаНачислений.НачисленоРаботникамСписочногоСостава;
			
			Если СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия Тогда
				
				УчтенаКвартальнаяПремия = Истина;
				НачисленоРаботникам = НачисленоРаботникам / 3;
				
			ИначеЕсли УчестьТолькоКвартальнуюПремию Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаНачислений.ВидРасчетаКатегорияСтатистическогоНаблюдения57Т = Перечисления.КатегорииСтатистическогоНаблюдения57Т.ТарифныйЗаработок Тогда
				
				СтрокаФормы.Колонка9 = СтрокаФормы.Колонка9 + НачисленоРаботникам;
				СтрокаФормы.Колонка12 = СтрокаФормы.Колонка12 + СтрокаНачислений.ОтработаноЧасов;
				
			ИначеЕсли СтрокаНачислений.ВидРасчетаКатегорияСтатистическогоНаблюдения57Т = Перечисления.КатегорииСтатистическогоНаблюдения57Т.ВыплатыПоРайонномуРегулированию Тогда
				
				СтрокаФормы.Колонка10 = СтрокаФормы.Колонка10 + НачисленоРаботникам;
				
			ИначеЕсли СтрокаНачислений.ВидРасчетаКатегорияСтатистическогоНаблюдения57Т = Перечисления.КатегорииСтатистическогоНаблюдения57Т.ДругиеВыплаты Тогда
				
				СтрокаФормы.Колонка11 = СтрокаФормы.Колонка11 + НачисленоРаботникам;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСотрудниковКатегорииВФорме57Т_2021(Форма57ТРаздел2Сотрудники, СотрудникиКатегории)
	
	Если СотрудникиКатегории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма57ТРаздел2Сотрудники.НайтиСтроки(Новый Структура("КодКатегории", СотрудникиКатегории[0].КодКатегории)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДобавленных = 0;
	Для Каждого СтрокаСотрудника Из СотрудникиКатегории Цикл
		
		Если Форма57ТРаздел2Сотрудники.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСотрудника.Отобран = Истина;
		КоличествоДобавленных = КоличествоДобавленных + 1;
		Если КоличествоДобавленных > 1 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях_2021(Форма57ТРаздел2Сотрудники, ДанныеОрганизации, УчтенаКвартальнаяПремия, УчестьТолькоКвартальнуюПремию = Ложь)
	
	ИсходнаяТаблицаСотрудников = ОбщегоНазначения.СкопироватьРекурсивно(Форма57ТРаздел2Сотрудники);
	ИсходнаяТаблицаСотрудников.Свернуть("Сотрудник,Должность,Пол,ГодРождения,Образование,КодКатегории,КодПоОКПДТР,Стаж,
		|Наименование,Организация,Подразделение,Отобран,НомерСтрокиОтчета");

	Для Каждого СтрокаФормы Из ИсходнаяТаблицаСотрудников Цикл
		
		Если Не СтрокаФормы.Отобран Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиНачислений = ДанныеОрганизации.Строки.НайтиСтроки(Новый Структура("Сотрудник", СтрокаФормы.Сотрудник));
		ПерваяСтрока = Истина;
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			
			НачисленоРаботникам = СтрокаНачислений.НачисленоРаботникамСписочногоСостава;
			
			Если СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия Тогда
				
				УчтенаКвартальнаяПремия = Истина;
				НачисленоРаботникам = НачисленоРаботникам / 3;
				
			ИначеЕсли УчестьТолькоКвартальнуюПремию Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНачислений.ВидРасчетаКатегорияСтатистическогоНаблюдения57Т) Тогда
				Если Не ПерваяСтрока Или УчестьТолькоКвартальнуюПремию Тогда
					СтрокаСотрудника = Форма57ТРаздел2Сотрудники.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаФормы);
				Иначе
					СтрокаСотрудника = Форма57ТРаздел2Сотрудники.Найти(СтрокаФормы.Сотрудник, "Сотрудник");
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаНачислений);
				ИндексКатегории = Перечисления.КатегорииСтатистическогоНаблюдения57Т.Индекс(
					СтрокаНачислений.ВидРасчетаКатегорияСтатистическогоНаблюдения57Т);
				СтрокаСотрудника[Метаданные.Перечисления.КатегорииСтатистическогоНаблюдения57Т.ЗначенияПеречисления[
					ИндексКатегории].Имя] = НачисленоРаботникам;
				ПерваяСтрока = Ложь;
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Форма1

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ДобавитьПоказателиФормы1_2016(ПоказателиОтчета)
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	Для НомерСтрокиОтчета = 1 По 21 Цикл
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П01"
			 + Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03", Истина, Ложь);
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П01"
			 + Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04", Истина, Ложь);
		
	КонецЦикла;
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П012303", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П012403", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П012503", Истина, Ложь);
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормы1_2016(ПараметрыОтчета, Контейнер)
	
	// Получение Кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаОтчета", ПараметрыОтчетаДляЗаполненияКадры.мДатаНачалаПериодаОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", ПараметрыОтчетаДляЗаполненияКадры.мДатаКонцаПериодаОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияКадры,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		
		СтрокаОрганизации = ДанныеОтчета.Строки[0];
		ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела1Формы57Т(
			ПараметрыОтчета.Организация, НачалоМесяца(ПараметрыОтчетаДляЗаполненияКадры.ДатаКонцаПериодаОтчета), СтрокаОрганизации, Ложь);
		
		// Получение зарплатных данных
		ДанныеОтчета = Новый ДеревоЗначений;
		
		ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаОтчета", ПараметрыОтчетаДляЗаполненияЗарплата.мДатаНачалаПериодаОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаКонцаПериодаОтчета", ПараметрыОтчетаДляЗаполненияЗарплата.мДатаКонцаПериодаОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ТолькоОсновноеМестоРаботы", Истина);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ОтборСотрудников", ОбщегоНазначения.ВыгрузитьКолонку(ВсеСотрудникиПоКатегориям, "Сотрудник"));
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключатьГодовыеПремии", Истина);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключаяПерерасчеты", Истина);
		ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
			"РегламентированныйОтчетСтатистикаФорма57Т",
			ПараметрыОтчетаДляЗаполненияЗарплата,
			ДанныеОтчета);
		
		Если ДанныеОтчета.Строки.Количество() > 0 Тогда
			
			ТаблицаСотрудников = Новый ТаблицаЗначений;
			ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаСотрудников.Колонки.Добавить("Начислено", Новый ОписаниеТипов("Число"));
			
			СтрокаОрганизации = ДанныеОтчета.Строки[0];
			
			УчтенаКвартальнаяПремия = Ложь;
			СкорректироватьНачисленияТаблицыСотрудниковФорма1(ТаблицаСотрудников, СтрокаОрганизации, ПараметрыОтчета.мДатаКонцаПериодаОтчета, УчтенаКвартальнаяПремия);
			
			Если Не УчтенаКвартальнаяПремия Тогда
				
				ДанныеОтчета = Новый ДеревоЗначений;
				
				ПараметрыОтчетаДляЗаполненияЗарплата.ДатаКонцаПериодаОтчета = ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета - 1;
				ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета = ДобавитьМесяц(ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета, -3);
				ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключаяПерерасчеты", Истина);
				ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
					"РегламентированныйОтчетСтатистикаФорма57Т",
					ПараметрыОтчетаДляЗаполненияЗарплата,
					ДанныеОтчета);
				
				Если ДанныеОтчета.Строки.Количество() > 0 Тогда
					
					СтрокаОрганизации = ДанныеОтчета.Строки[0];
					СкорректироватьНачисленияТаблицыСотрудниковФорма1(ТаблицаСотрудников, СтрокаОрганизации, ПараметрыОтчета.мДатаКонцаПериодаОтчета, УчтенаКвартальнаяПремия, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТаблицаСотрудников.Количество() > 0 Тогда
				
				ТаблицаСотрудников.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
				ТаблицаСотрудников.Колонки.Добавить("НомерСтрокиОтчета", Новый ОписаниеТипов("Число"));
				
				П012303 = 0;
				
				ВесаСтрок = Новый Массив;
				ВесаСтрок.Добавить(7500);
				ВесаСтрок.Добавить(9000);
				ВесаСтрок.Добавить(10600);
				ВесаСтрок.Добавить(12200);
				ВесаСтрок.Добавить(13800);
				ВесаСтрок.Добавить(15400);
				ВесаСтрок.Добавить(17000);
				ВесаСтрок.Добавить(18600);
				ВесаСтрок.Добавить(21800);
				ВесаСтрок.Добавить(25000);
				ВесаСтрок.Добавить(30000);
				ВесаСтрок.Добавить(35000);
				ВесаСтрок.Добавить(40000);
				ВесаСтрок.Добавить(50000);
				ВесаСтрок.Добавить(60000);
				ВесаСтрок.Добавить(75000);
				ВесаСтрок.Добавить(100000);
				ВесаСтрок.Добавить(250000);
				ВесаСтрок.Добавить(500000);
				ВесаСтрок.Добавить(1000000);
				
				Для Каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
					
					СтрокаСотрудника.Счетчик = 1;
					Начислено = Цел(СтрокаСотрудника.Начислено);
					
					Для НомерСтроки = 1 По ВесаСтрок.Количество() Цикл
						
						Если Начислено <= ВесаСтрок[НомерСтроки - 1] Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаСотрудника.НомерСтрокиОтчета = НомерСтроки;
					
					Если Начислено = 7500 Тогда
						П012303 = П012303 + 1;
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаСотрудников.Свернуть("НомерСтрокиОтчета","Счетчик,Начислено");
				Для НомерСтрокиОтчета = 1 По 21 Цикл
					
					СтрокаОтчета = ТаблицаСотрудников.Найти(НомерСтрокиОтчета, "НомерСтрокиОтчета");
					Если СтрокаОтчета = Неопределено Тогда
						Счетчик = 0;
						Начислено = 0;
					Иначе
						Счетчик = СтрокаОтчета.Счетчик;
						Начислено = СтрокаОтчета.Начислено;
					КонецЕсли;
					
					Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
						+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03"] = Счетчик;
					
					Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
						+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04"] = Начислено;
					
				КонецЦикла;
				
				Контейнер.ПолеТабличногоДокументаФормаОтчета["П012303"] = П012303;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	П012403 = 0;
	П012503 = 0;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаОтчета", '20170401000000');
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаКонцаПериодаОтчета", '20170430235959');
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчетаДляЗаполненияЗарплата);
	
	// Получение зарплатных данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияЗарплата.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаОКВЭДПериод Из СтрокаОКВЭД.Строки Цикл
				
				Если СтрокаОКВЭДПериод.МесяцНачисления <> ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета Тогда
					Продолжить;
				КонецЕсли;
				
				П012503 = П012503 + СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава;
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				Если ИндексТекущейСтроки > КоличествоСтрок Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияКадры.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
			
			П012403 = П012403 + СтрокаОКВЭД.СредняяЧисленностьЗаПериодСписочногоСостава;
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			Если ИндексТекущейСтроки > КоличествоСтрок Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П012403"] = П012403;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П012503"] = П012503;
	
КонецПроцедуры

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ДобавитьПоказателиФормы1_2019(ПоказателиОтчета)
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	Для НомерСтрокиОтчета = 1 По 28 Цикл
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П01"
			 + Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03", Истина, Ложь);
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П01"
			 + Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04", Истина, Ложь);
		
	КонецЦикла;
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013103", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013203", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013303", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013403", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013503", Истина, Ложь);
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормы1_2019(ПараметрыОтчета, Контейнер)
	
	ДатаНачалаПериодаОтчета = '20190401000000';
	ДатаКонцаПериодаОтчета = '20190430235959';
	
	// Получение Кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияКадры,
		ДанныеОтчета);
	
	СотрудникиСМинимальнойЗарплатой = Новый Массив;
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		
		СтрокаОрганизации = ДанныеОтчета.Строки[0];
		ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияФормы1(ПараметрыОтчета.Организация, СтрокаОрганизации.Строки.ВыгрузитьКолонку("Сотрудник"), ДатаНачалаПериодаОтчета);
		
		// Получение зарплатных данных
		ДанныеОтчета = Новый ДеревоЗначений;
		
		ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ОтборСотрудников", ОбщегоНазначения.ВыгрузитьКолонку(ВсеСотрудникиПоКатегориям, "Сотрудник"));
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключатьГодовыеПремии", Истина);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключаяПерерасчеты", Истина);
		ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
			"РегламентированныйОтчетСтатистикаФорма57Т",
			ПараметрыОтчетаДляЗаполненияЗарплата,
			ДанныеОтчета);
		
		Если ДанныеОтчета.Строки.Количество() > 0 Тогда
			
			ТаблицаСотрудников = Новый ТаблицаЗначений;
			ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаСотрудников.Колонки.Добавить("Начислено", Новый ОписаниеТипов("Число"));
			
			СтрокаОрганизации = ДанныеОтчета.Строки[0];
			
			УчтенаКвартальнаяПремия = Ложь;
			СкорректироватьНачисленияТаблицыСотрудниковФорма1(ТаблицаСотрудников, СтрокаОрганизации, ПараметрыОтчета.мДатаКонцаПериодаОтчета, УчтенаКвартальнаяПремия);
			
			Если Не УчтенаКвартальнаяПремия Тогда
				
				ДанныеОтчета = Новый ДеревоЗначений;
				
				ПараметрыОтчетаДляЗаполненияЗарплата.ДатаКонцаПериодаОтчета = ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета - 1;
				ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета = ДобавитьМесяц(ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета, -3);
				ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
					"РегламентированныйОтчетСтатистикаФорма57Т",
					ПараметрыОтчетаДляЗаполненияЗарплата,
					ДанныеОтчета);
				
				Если ДанныеОтчета.Строки.Количество() > 0 Тогда
					
					СтрокаОрганизации = ДанныеОтчета.Строки[0];
					СкорректироватьНачисленияТаблицыСотрудниковФорма1(ТаблицаСотрудников, СтрокаОрганизации, ДатаНачалаПериодаОтчета, УчтенаКвартальнаяПремия, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТаблицаСотрудников.Количество() > 0 Тогда
				
				// Сворачиваем до Физических лиц
				ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеСотрудникиПоКатегориям.ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
				ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
				Для Каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
					СтрокаСотрудника.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаСотрудника.Сотрудник];
				КонецЦикла;
				ТаблицаСотрудников.Свернуть("ФизическоеЛицо", "Начислено");
				ТаблицаСотрудников.Колонки.ФизическоеЛицо.Имя = "Сотрудник";
				
				ТаблицаСотрудников.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
				ТаблицаСотрудников.Колонки.Добавить("НомерСтрокиОтчета", Новый ОписаниеТипов("Число"));
				
				П012303 = 0;
				
				ВесаСтрок = Новый Массив;
				ВесаСтрок.Добавить(11280);
				ВесаСтрок.Добавить(12140);
				ВесаСтрок.Добавить(13000);
				ВесаСтрок.Добавить(13850);
				ВесаСтрок.Добавить(14700);
				ВесаСтрок.Добавить(15850);
				ВесаСтрок.Добавить(17000);
				ВесаСтрок.Добавить(18050);
				ВесаСтрок.Добавить(19200);
				ВесаСтрок.Добавить(20350);
				ВесаСтрок.Добавить(21450);
				ВесаСтрок.Добавить(22560);
				ВесаСтрок.Добавить(23690);
				ВесаСтрок.Добавить(24820);
				ВесаСтрок.Добавить(27100);
				ВесаСтрок.Добавить(29300);
				ВесаСтрок.Добавить(31600);
				ВесаСтрок.Добавить(33900);
				ВесаСтрок.Добавить(40000);
				ВесаСтрок.Добавить(45000);
				ВесаСтрок.Добавить(50000);
				ВесаСтрок.Добавить(60000);
				ВесаСтрок.Добавить(75000);
				ВесаСтрок.Добавить(100000);
				ВесаСтрок.Добавить(250000);
				ВесаСтрок.Добавить(500000);
				ВесаСтрок.Добавить(1000000);
				
				П013003 = 0;
				Для Каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
					
					СтрокаСотрудника.Счетчик = 1;
					Начислено = Цел(СтрокаСотрудника.Начислено);
					
					Для НомерСтроки = 1 По ВесаСтрок.Количество() Цикл
						
						Если Начислено <= ВесаСтрок[НомерСтроки - 1] Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаСотрудника.НомерСтрокиОтчета = НомерСтроки;
					
					Если Начислено = 11280 Тогда
						П013003 = П013003 + 1;
					КонецЕсли;
					
					Если Начислено <= 11280 Тогда
						СотрудникиСМинимальнойЗарплатой.Добавить(СтрокаСотрудника.Сотрудник);
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаСотрудников.Свернуть("НомерСтрокиОтчета","Счетчик,Начислено");
				Для НомерСтрокиОтчета = 1 По 28 Цикл
					
					СтрокаОтчета = ТаблицаСотрудников.Найти(НомерСтрокиОтчета, "НомерСтрокиОтчета");
					Если СтрокаОтчета = Неопределено Тогда
						Счетчик = 0;
						Начислено = 0;
					Иначе
						Счетчик = СтрокаОтчета.Счетчик;
						Начислено = СтрокаОтчета.Начислено;
					КонецЕсли;
					
					Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
						+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03"] = Счетчик;
					
					Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
						+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04"] = Начислено;
					
				КонецЦикла;
				
				Контейнер.ПолеТабличногоДокументаФормаОтчета["П013003"] = П013003;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	П013103 = 0;
	П013203 = 0;
	П013303 = 0;
	П013403 = 0;
	П013503 = 0;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаОтчета", '20190401000000');
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаКонцаПериодаОтчета", '20190430235959');
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчетаДляЗаполненияЗарплата);
	
	// Получение зарплатных данных отчета (строки 34 и 35)
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета);
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияЗарплата.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаОКВЭДПериод Из СтрокаОКВЭД.Строки Цикл
				Если СтрокаОКВЭДПериод.МесяцНачисления <> ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета Тогда
					Продолжить;
				КонецЕсли;
				
				П013503 = П013503 + СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава;
				П013403 = П013403 + СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава 
					+ СтрокаОКВЭДПериод.НачисленоВнешнимСовместителям
					+ СтрокаОКВЭДПериод.НачисленоРаботникамПоДоговорамГПХ;
					
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				Если ИндексТекущейСтроки > КоличествоСтрок Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета П-4 (строка 33)
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияКадры.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
			П013303 = П013303 + СтрокаОКВЭД.СредняяЧисленностьЗаПериодСписочногоСостава;
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			Если ИндексТекущейСтроки > КоличествоСтрок Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета П-4(НЗ) (строка 32)
	ДанныеОтчета = Новый ДеревоЗначений;
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаОтчета", '20190301000000');
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", '20190331235959');
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		П013203 = СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава;
	КонецЕсли;
	
	// Получение кадровых данных отчета П-4(НЗ) (строка 31)
	Если СотрудникиСМинимальнойЗарплатой.Количество() Тогда
		ДанныеОтчета = Новый ДеревоЗначений;
		ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчетаДляЗаполненияЗарплата);
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("ОтборСотрудников", СотрудникиСМинимальнойЗарплатой);
		ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ("РегламентированныйОтчетСтатистикаФормаП4НЗ", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
		СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
		Если СтрокаОрганизации <> Неопределено Тогда
			П013103 = СтрокаОрганизации.ЧисленностьРаботавшихНеполноеРабочееВремя;
		КонецЕсли;
	КонецЕсли;
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013103"] = П013103;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013203"] = П013203;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013303"] = П013303;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013403"] = П013403;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013503"] = П013503;
	
КонецПроцедуры

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ДобавитьПоказателиФормы1_2021(ПоказателиОтчета)
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	Для НомерСтрокиОтчета = 1 По 29 Цикл
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П01"
			 + Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03", Истина, Ложь);
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П01"
			 + Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04", Истина, Ложь);
		
	КонецЦикла;
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013003", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013103", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013203", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013303", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013403", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П013503", Истина, Ложь);
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗаполнитьПоказателиФормы1_2021(ПараметрыОтчета, Контейнер)
	
	ДатаНачалаПериодаОтчета = '20210401000000';
	ДатаКонцаПериодаОтчета = '20210430235959';
	
	// Получение Кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ИсключитьДанныеОбособленныхПодразделений", Ложь);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияКадры,
		ДанныеОтчета);
		
	СотрудникиСМинимальнойЗарплатой = Новый Массив;
	КоличествоСотрудниковСЗарплатойМРОТ = 0;
	Для НомерСтрокиОтчета = 1 По 29 Цикл
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
			+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03"] = 0;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
			+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04"] = 0;
	КонецЦикла;

	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		
		СтрокаОрганизации = ДанныеОтчета.Строки[0];
		ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияФормы1(ПараметрыОтчета.Организация, СтрокаОрганизации.Строки.ВыгрузитьКолонку("Сотрудник"), ДатаНачалаПериодаОтчета);
		
		// Получение зарплатных данных
		ДанныеОтчета = Новый ДеревоЗначений;
		
		ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ОтборСотрудников", ОбщегоНазначения.ВыгрузитьКолонку(ВсеСотрудникиПоКатегориям, "Сотрудник"));
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключатьГодовыеПремии", Истина);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключаяПерерасчеты", Истина);
		
		ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
			"РегламентированныйОтчетСтатистикаФорма1",
			ПараметрыОтчетаДляЗаполненияЗарплата,
			ДанныеОтчета);
		
		Если ДанныеОтчета.Строки.Количество() > 0 Тогда
			
			ТаблицаСотрудников = Новый ТаблицаЗначений;
			ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаСотрудников.Колонки.Добавить("Начислено", Новый ОписаниеТипов("Число"));
			
			СтрокаОрганизации = ДанныеОтчета.Строки[0];
			
			УчтенаКвартальнаяПремия = Ложь;
			СкорректироватьНачисленияТаблицыСотрудниковФорма1(ТаблицаСотрудников, СтрокаОрганизации, ДатаНачалаПериодаОтчета, УчтенаКвартальнаяПремия);
			
			ДанныеОтчета = Новый ДеревоЗначений;
			ПараметрыОтчетаДляЗаполненияЗарплата.Удалить("ИсключаяПерерасчеты");
			ПараметрыОтчетаДляЗаполненияЗарплата.ДатаКонцаПериодаОтчета = ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета - 1;
			ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета = ДобавитьМесяц(ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета, -3);
			ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
				"РегламентированныйОтчетСтатистикаФорма1",
				ПараметрыОтчетаДляЗаполненияЗарплата,
				ДанныеОтчета);
				
			Если ДанныеОтчета.Строки.Количество() > 0 Тогда
				СтрокаОрганизации = ДанныеОтчета.Строки[0];
				СкорректироватьНачисленияТаблицыСотрудниковФорма1(ТаблицаСотрудников, СтрокаОрганизации, ДатаНачалаПериодаОтчета, УчтенаКвартальнаяПремия, Истина);
			КонецЕсли;
				
			Если ТаблицаСотрудников.Количество() > 0 Тогда
				
				// Сворачиваем до Физических лиц
				ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеСотрудникиПоКатегориям.ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
				ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
				Для Каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
					СтрокаСотрудника.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаСотрудника.Сотрудник];
				КонецЦикла;
				ТаблицаСотрудников.Свернуть("ФизическоеЛицо", "Начислено");
				ТаблицаСотрудников.Колонки.ФизическоеЛицо.Имя = "Сотрудник";
				
				ТаблицаСотрудников.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
				ТаблицаСотрудников.Колонки.Добавить("НомерСтрокиОтчета", Новый ОписаниеТипов("Число"));
				
				ВесаСтрок = Новый Массив;
				ВесаСтрок.Добавить(12792);
				ВесаСтрок.Добавить(13770);
				ВесаСтрок.Добавить(14750);
				ВесаСтрок.Добавить(15990);
				ВесаСтрок.Добавить(16650);
				ВесаСтрок.Добавить(17950);
				ВесаСтрок.Добавить(19250);
				ВесаСтрок.Добавить(20470);
				ВесаСтрок.Добавить(21780);
				ВесаСтрок.Добавить(23080);
				ВесаСтрок.Добавить(24330);
				ВесаСтрок.Добавить(25590);
				ВесаСтрок.Добавить(26870);
				ВесаСтрок.Добавить(28150);
				ВесаСтрок.Добавить(30740);
				ВесаСтрок.Добавить(33230);
				ВесаСтрок.Добавить(35800);
				ВесаСтрок.Добавить(38850);
				ВесаСтрок.Добавить(45000);
				ВесаСтрок.Добавить(55000);
				ВесаСтрок.Добавить(65000);
				ВесаСтрок.Добавить(75000);
				ВесаСтрок.Добавить(100000);
				ВесаСтрок.Добавить(200000);
				ВесаСтрок.Добавить(400000);
				ВесаСтрок.Добавить(1000000);
				ВесаСтрок.Добавить(1500000);
				ВесаСтрок.Добавить(3000000);
				
				П013003 = 0;
				
				Для Каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
					
					СтрокаСотрудника.Счетчик = 1;
					Начислено = Цел(СтрокаСотрудника.Начислено);
					
					Для НомерСтроки = 1 По ВесаСтрок.Количество() Цикл
						
						Если Начислено <= ВесаСтрок[НомерСтроки - 1] Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаСотрудника.НомерСтрокиОтчета = НомерСтроки;
					
					МРОТ = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(ДатаКонцаПериодаОтчета);
					
					Если Начислено = МРОТ Тогда
						П013003 = П013003 + 1;
					КонецЕсли;
					Если Начислено <= МРОТ Тогда
						СотрудникиСМинимальнойЗарплатой.Добавить(СтрокаСотрудника.Сотрудник);
						Если Начислено = МРОТ Тогда
							КоличествоСотрудниковСЗарплатойМРОТ = КоличествоСотрудниковСЗарплатойМРОТ +1;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаСотрудников.Свернуть("НомерСтрокиОтчета","Счетчик,Начислено");
				Для НомерСтрокиОтчета = 1 По 29 Цикл
					
					СтрокаОтчета = ТаблицаСотрудников.Найти(НомерСтрокиОтчета, "НомерСтрокиОтчета");
					Если СтрокаОтчета = Неопределено Тогда
						Счетчик = 0;
						Начислено = 0;
					Иначе
						Счетчик = СтрокаОтчета.Счетчик;
						Начислено = СтрокаОтчета.Начислено;
					КонецЕсли;
					
					Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
						+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03"] = Счетчик;
					
					Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
						+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04"] = Начислено;
					
				КонецЦикла;
				
				Контейнер.ПолеТабличногоДокументаФормаОтчета["П013003"] = П013003;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	П013103 = 0;
	П013203 = 0;
	П013303 = 0;
	П013403 = 0;
	П013503 = 0;
	П013603 = 0;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаОтчета", '20210401000000');
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаКонцаПериодаОтчета", '20210430235959');
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчетаДляЗаполненияЗарплата);
	
	// Получение зарплатных данных отчета (строки 35 и 36)
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета);
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияЗарплата.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаОКВЭДПериод Из СтрокаОКВЭД.Строки Цикл
				Если СтрокаОКВЭДПериод.МесяцНачисления <> ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета Тогда
					Продолжить;
				КонецЕсли;
				
				П013603 = П013603 + СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава;
				П013503 = П013503 + СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава 
					+ СтрокаОКВЭДПериод.НачисленоВнешнимСовместителям
					+ СтрокаОКВЭДПериод.НачисленоРаботникамПоДоговорамГПХ;
					
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				Если ИндексТекущейСтроки > КоличествоСтрок Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета П-4 (строка 34)
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияКадры.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
			П013403 = П013403 + СтрокаОКВЭД.СредняяЧисленностьЗаПериодСписочногоСостава;
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			Если ИндексТекущейСтроки > КоличествоСтрок Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета П-4(НЗ) (строка 33)
	ДанныеОтчета = Новый ДеревоЗначений;
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаОтчета", '20210301000000');
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", '20210331235959');
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		П013303 = СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава;
	КонецЕсли;
	
	// Строка 31
	П013103 = КоличествоСотрудниковСЗарплатойМРОТ;
	
	// Получение кадровых данных отчета П-4(НЗ) (строка 32)
	Если СотрудникиСМинимальнойЗарплатой.Количество() Тогда
		ДанныеОтчета = Новый ДеревоЗначений;
		ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчетаДляЗаполненияЗарплата);
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("СотрудникиДляОтбора", СотрудникиСМинимальнойЗарплатой);
		ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ("РегламентированныйОтчетСтатистикаФормаП4НЗ", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
		СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
		Если СтрокаОрганизации <> Неопределено Тогда
			П013203 = СтрокаОрганизации.ЧисленностьРаботавшихНеполноеРабочееВремя;
		КонецЕсли;
	КонецЕсли;
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013103"] = П013103;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013203"] = П013203;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013303"] = П013303;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013403"] = П013403;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013503"] = П013503;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П013603"] = П013603;
	
КонецПроцедуры

Функция СотрудникиДляЗаполненияФормы1(Организация, СписокСотрудников, ПериодОтчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("НачалоПериодаОтчета", НачалоМесяца(ПериодОтчета));
	Запрос.УстановитьПараметр("КонецПериодаОтчета", КонецМесяца(ПериодОтчета));
	
	// Отбор полностью отработавших сотрудников
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&НачалоПериодаОтчета КАК ДатаНачала,
		|	&КонецПериодаОтчета КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)";
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремени";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Истина;
	ПараметрыЗаполнения.ДатаАктуальности  = КонецМесяца(ПериодОтчета);
	ПараметрыЗаполнения.ДатаНачала = НачалоМесяца(ПериодОтчета);
	ПараметрыЗаполнения.ДатаОкончания = КонецМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.МесяцДатаОкончания = КонецМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыЗаполнения);
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Справочник.ВидыИспользованияРабочегоВремени.ВынужденныйПрогул");
	ИменаЭлементов.Добавить("Справочник.ВидыИспользованияРабочегоВремени.Простой");
	ИменаЭлементов.Добавить("Справочник.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботодателя");
	ИменаЭлементов.Добавить("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	ОтсутствияДо5Дней = Новый Массив;
	Для Каждого ИмяВидаВремени Из ИменаЭлементов Цикл
		ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент(ИмяВидаВремени);
		Если ВидВремени <> Неопределено Тогда
			ОтсутствияДо5Дней.Добавить(ВидВремени);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ОтсутствияДо5Дней", ОтсутствияДо5Дней);
	
	ИменаЭлементов.Очистить();
	ИменаЭлементов.Добавить("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	ИменаЭлементов.Добавить("Справочник.ВидыИспользованияРабочегоВремени.БолезньБезОплаты");
	ИменаЭлементов.Добавить("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	ИменаЭлементов.Добавить("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	Отсутствия = Новый Массив;
	Для Каждого ИмяВидаВремени Из ИменаЭлементов Цикл
		ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент(ИмяВидаВремени);
		Если ВидВремени <> Неопределено Тогда
			Отсутствия.Добавить(ВидВремени);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отсутствия, ОтсутствияДо5Дней);
	Запрос.УстановитьПараметр("Отсутствия", Отсутствия);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	СУММА(ДанныеУчетаВремени.Дни) КАК Дни
	|ПОМЕСТИТЬ ВТСотрудникиСОтклонениями
	|ИЗ
	|	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
	|ГДЕ
	|	ДанныеУчетаВремени.ВидУчетаВремени В (&Отсутствия)
	|	И НЕ ДанныеУчетаВремени.ВидУчетаВремени.РабочееВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремени.Сотрудник,
	|	ДанныеУчетаВремени.ВидУчетаВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	|	СУММА(ДанныеУчетаВремени.Дни) КАК Дни
	|ПОМЕСТИТЬ ВТСотрудникиСОтклонениямиДо5Дней
	|ИЗ
	|	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
	|ГДЕ
	|	ДанныеУчетаВремени.ВидУчетаВремени В(&ОтсутствияДо5Дней)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремени.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеУчетаВремени.Дни) <= 5
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(Сотрудники.ДатаОкончания, ДЕНЬ) КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСОтклонениями КАК СотрудникиСОтклонениями
	|		ПО Сотрудники.Сотрудник = СотрудникиСОтклонениями.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСОтклонениямиДо5Дней КАК ОтклонениямиДо5Дней
	|		ПО Сотрудники.Сотрудник = ОтклонениямиДо5Дней.Сотрудник
	|ГДЕ
	|	(СотрудникиСОтклонениями.Сотрудник ЕСТЬ NULL
	|			ИЛИ ОтклонениямиДо5Дней.Сотрудник ЕСТЬ НЕ NULL )";
	Запрос.Выполнить();
	
	// Получение кадровых данных полностью отработавших сотрудников
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВТ,
		Ложь,
		"ВидЗанятости,
		|ДатаПриема,
		|ДатаУвольнения");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
	|	И КадровыеДанныеСотрудников.ДатаПриема > ДАТАВРЕМЯ(1, 1, 1)
	|	И КадровыеДанныеСотрудников.ДатаПриема <= &НачалоПериодаОтчета
	|	И (КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) >= &КонецПериодаОтчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КадровыеДанныеСотрудников.Сотрудник.Наименование";
	
	ВсеСотрудникиОрганизации = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВсеСотрудникиОрганизации;
	
КонецФункции

Процедура СкорректироватьНачисленияТаблицыСотрудниковФорма1(ТаблицаСотрудников, СтрокаОрганизации, ПериодОтчета, УчтенаКвартальнаяПремия, УчестьТолькоКвартальнуюПремию = Ложь)
	
	Для Каждого СтрокаНачислений Из СтрокаОрганизации.Строки Цикл
		
		НачисленоРаботникам = СтрокаНачислений.НачисленоРаботникамСписочногоСостава;
		
		Если Не УчтенаКвартальнаяПремия И СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия Тогда
			
			УчтенаКвартальнаяПремия = Истина;
			НачисленоРаботникам = НачисленоРаботникам / 3;
			
		ИначеЕсли (УчестьТолькоКвартальнуюПремию
			Или СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске
			Или СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего)
			И Не((СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска
			Или СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
			И (СтрокаНачислений.ПериодДействия >= НачалоМесяца(ПериодОтчета) И (СтрокаНачислений.ПериодДействия <= КонецМесяца(ПериодОтчета)))) Тогда
			
			Продолжить;
		КонецЕсли;
		
		СтрокаСотрудника = ТаблицаСотрудников.Найти(СтрокаНачислений.Сотрудник, "Сотрудник");
		Если СтрокаСотрудника = Неопределено Тогда
			СтрокаСотрудника = ТаблицаСотрудников.Добавить();
			СтрокаСотрудника.Сотрудник = СтрокаНачислений.Сотрудник;
		КонецЕсли;
		
		СтрокаСотрудника.Начислено = СтрокаСотрудника.Начислено + НачисленоРаботникам;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаП4

Процедура ЗаполнитьПоказателиЗарплата_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭДПериод, ВыводитьКвартальныеПоказатели)
	
	Если Не ВыводитьКвартальныеПоказатели Тогда
		СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава = 0;
		СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями = 0;
		СтрокаОКВЭД.НачисленияСоциальногоХарактера = 0;
	КонецЕсли;
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "А1"] = СтрокаОКВЭДПериод.НаименованиеОКВЭД;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "В1"] = СтрокаОКВЭДПериод.КодОКВЭД;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05"] = СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "06"] = СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "08"] = Окр(СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава / 1000, 1);
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "09"] = Окр(СтрокаОКВЭДПериод.НачисленоВнешнимСовместителям / 1000, 1);
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "10"] = Окр(СтрокаОКВЭДПериод.НачисленоРаботникамПоДоговорамГПХ / 1000, 1);
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "11"] = Окр(СтрокаОКВЭД.НачисленияСоциальногоХарактера / 1000, 1);
	
	УстановитьПустоеЗначение(СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05", Контейнер);
	УстановитьПустоеЗначение(СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "06", Контейнер);
	
	УстановитьПустоеЗначение(СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "08", Контейнер);
	УстановитьПустоеЗначение(СтрокаОКВЭДПериод.НачисленоВнешнимСовместителям, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "09", Контейнер);
	УстановитьПустоеЗначение(СтрокаОКВЭДПериод.НачисленоРаботникамПоДоговорамГПХ, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "10", Контейнер);
	УстановитьПустоеЗначение(СтрокаОКВЭД.НачисленияСоциальногоХарактера, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "11", Контейнер);
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиКадры_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭДПериод, ВыводитьКвартальныеПоказатели)
	
	СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодСписочногоСостава = Окр(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодСписочногоСостава);
	СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодВнешнихСовместителей = Окр(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодВнешнихСовместителей, 1);
	СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодДоговорников = Окр(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодДоговорников);
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "А1"] = СтрокаОКВЭДПериод.НаименованиеОКВЭД;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "В1"] = СтрокаОКВЭДПериод.КодОКВЭД;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "02"] = СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодСписочногоСостава;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "03"] = СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодВнешнихСовместителей;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04"] = СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодДоговорников;
	
	УстановитьПустоеЗначениеЧисленности(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодСписочногоСостава, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "02", Контейнер);
	УстановитьПустоеЗначениеЧисленности(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодВнешнихСовместителей, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "03", Контейнер);
	УстановитьПустоеЗначениеЧисленности(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодДоговорников, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04", Контейнер);
	
КонецПроцедуры

Функция ОписаниеПоказателейОтчета_СтатистикаФормаП4_2017Кв1()
	ОписаниеПоказателейОтчета = Новый ТаблицаЗначений;
	ОписаниеПоказателейОтчета.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ТипКолонки", Новый ОписаниеТипов("ОписаниеТипов"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ПутьКФормату", Новый ОписаниеТипов("Строка"));
	
	ОписаниеПоказателейОтчета.Индексы.Добавить("ИмяКолонки");
	
	// Колонки для общих данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки = "НаименованиеОКВЭД2";
	ОписаниеПоказателя.ТипКолонки = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П00010##А1";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки = "КодОКВЭД2";
	ОписаниеПоказателя.ТипКолонки = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П00010##В1";
	
	// Колонки для кадровых данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "СредняяЧисленностьЗаПериодСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##02";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##02";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##03";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##03";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "СредняяЧисленностьЗаПериодДоговорников";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##04";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##04";
	
	// Колонки для зарплатных данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##05";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##05";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "ОтработаноЧасовСНачалаГодаВнешнимиСовместителями";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##06";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##06";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НачисленияСоциальногоХарактера";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##11";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##11";
	
	// Колонки для зарплатных данных за месяц начисления.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НачисленоРаботникамСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##08";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##08";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НачисленоВнешнимСовместителям";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##09";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##09";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НачисленоРаботникамПоДоговорамГПХ";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##10";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##10";
	
	Возврат ОписаниеПоказателейОтчета;
КонецФункции

Функция ОписаниеПоказателейОтчета_СтатистикаФормаП4_2022Кв1()
	ОписаниеПоказателейОтчета = Новый ТаблицаЗначений;
	ОписаниеПоказателейОтчета.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ТипКолонки", Новый ОписаниеТипов("ОписаниеТипов"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ПутьКФормату", Новый ОписаниеТипов("Строка"));
	
	ОписаниеПоказателейОтчета.Индексы.Добавить("ИмяКолонки");
	
	// Колонки для общих данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки = "НаименованиеОКВЭД2";
	ОписаниеПоказателя.ТипКолонки = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П00010##А1";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки = "КодОКВЭД2";
	ОписаниеПоказателя.ТипКолонки = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П00010##В1";
	
	// Колонки для кадровых данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "СредняяЧисленностьЗаПериодСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##02";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##02";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##03";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##03";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "СредняяЧисленностьЗаПериодДоговорников";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##04";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##04";
	
	// Колонки для зарплатных данных за месяц начисления.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НачисленоРаботникамСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##08";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##08";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НачисленоВнешнимСовместителям";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##09";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##09";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НачисленоРаботникамПоДоговорамГПХ";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##10";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##10";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "ОтработаноЧасовРаботникамиСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##05";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##05";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "ОтработаноЧасовВнешнимиСовместителями";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##06";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##06";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НачисленияСоциальногоХарактера";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##11";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##11";

	Возврат ОписаниеПоказателейОтчета;
КонецФункции

Функция ДанныеОтчета_СтатистикаФормаП4_2017Кв1(ОписаниеПоказателейОтчета, ПараметрыОтчета)
	ДанныеОтчета = Новый ТаблицаЗначений;
	Для Каждого ОписаниеПоказателя Из ОписаниеПоказателейОтчета Цикл
		ДанныеОтчета.Колонки.Добавить(ОписаниеПоказателя.ИмяКолонки, ОписаниеПоказателя.ТипКолонки);
	КонецЦикла;
	
	// Получение зарплатных данных отчета.
	ДеревоЗначений = Новый ДеревоЗначений;
	ПараметрыПолученияЗарплатныхДанных = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыПолученияЗарплатныхДанных.Вставить("ДатаНачалаПериодаВыборки", НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыПолученияЗарплатныхДанных, ДеревоЗначений);
	
	СНачалаГода = ПараметрыПолученияЗарплатныхДанных.Свойство("СНачалаГода") И ПараметрыПолученияЗарплатныхДанных.СНачалаГода;
	ВыводитьКвартальныеПоказатели = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) = КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	ДелительСумм = 1;
	
	СтрокаОрганизации = ДеревоЗначений.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Для Каждого СтрокаЗарплаты_ОКВЭД Из СтрокаОрганизации.Строки Цикл
			Если СНачалаГода Тогда
				СтрокаЗарплаты_МесяцНачисления = СтрокаЗарплаты_ОКВЭД;
			Иначе
				СтрокаЗарплаты_МесяцНачисления = СтрокаЗарплаты_ОКВЭД.Строки.Найти(ПараметрыПолученияЗарплатныхДанных.ДатаНачалаПериодаОтчета, "МесяцНачисления", Ложь);
			КонецЕсли;
			
			СтрокаОтчета = ДанныеОтчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтчета, СтрокаЗарплаты_ОКВЭД, "КодОКВЭД2, НаименованиеОКВЭД2");
			
			Если СтрокаЗарплаты_МесяцНачисления <> Неопределено Тогда
				СтрокаОтчета.НачисленоРаботникамСписочногоСостава = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоРаботникамСписочногоСостава / ДелительСумм, 1);
				СтрокаОтчета.НачисленоВнешнимСовместителям        = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоВнешнимСовместителям / ДелительСумм, 1);
				СтрокаОтчета.НачисленоРаботникамПоДоговорамГПХ    = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоРаботникамПоДоговорамГПХ / ДелительСумм, 1);
			КонецЕсли;
			
			Если ВыводитьКвартальныеПоказатели Тогда
				Если ДанныеОтчета.Колонки.Найти("ОтработаноЧасовСНачалаГодаВнешнимиСовместителями") <> Неопределено Тогда
					СтрокаОтчета.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями = СтрокаЗарплаты_ОКВЭД.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями;
				КонецЕсли;
				Если ДанныеОтчета.Колонки.Найти("ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава") <> Неопределено Тогда
					СтрокаОтчета.ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава = СтрокаЗарплаты_ОКВЭД.ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава;
				КонецЕсли;
				СтрокаОтчета.НачисленияСоциальногоХарактера = Окр(СтрокаЗарплаты_ОКВЭД.НачисленияСоциальногоХарактера / ДелительСумм, 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета и объединение с зарплатными данными по кодам ОКВЭД.
	ДанныеОтчета.Колонки.Добавить("КадровыеДанныеЗаполнены", Новый ОписаниеТипов("Булево"));
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ПараметрыПолученияКадровыхДанных = СкопироватьКоллекцию(ПараметрыОтчета);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыПолученияКадровыхДанных, ДеревоЗначений);
	
	СтрокаОрганизации = ДеревоЗначений.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Для Каждого СтрокаКадров Из СтрокаОрганизации.Строки Цикл
			Найденные = ДанныеОтчета.НайтиСтроки(Новый Структура("КодОКВЭД2, КадровыеДанныеЗаполнены", СтрокаКадров.КодОКВЭД2, Ложь));
			Если Найденные.Количество() > 0 Тогда
				СтрокаОтчета = Найденные[0];
			Иначе
				СтрокаОтчета = ДанныеОтчета.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, СтрокаКадров, "КодОКВЭД2, НаименованиеОКВЭД2");
			КонецЕсли;
			СтрокаОтчета.КадровыеДанныеЗаполнены = Истина;
			СтрокаОтчета.СредняяЧисленностьЗаПериодСписочногоСостава = Окр(Окр(СтрокаКадров.СредняяЧисленностьЗаПериодСписочногоСостава, 2),1);
			Если ДанныеОтчета.Колонки.Найти("СредняяЧисленностьЗаПериодВнешнихСовместителей") <> Неопределено Тогда
				СтрокаОтчета.СредняяЧисленностьЗаПериодВнешнихСовместителей = Окр(Окр(СтрокаКадров.СредняяЧисленностьЗаПериодВнешнихСовместителей, 2),1);
			КонецЕсли;
			Если ДанныеОтчета.Колонки.Найти("СредняяЧисленностьЗаПериодДоговорников") <> Неопределено Тогда
				СтрокаОтчета.СредняяЧисленностьЗаПериодДоговорников = Окр(Окр(СтрокаКадров.СредняяЧисленностьЗаПериодДоговорников, 2),1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеОтчета.Колонки.Удалить("КадровыеДанныеЗаполнены");
	
	Возврат ДанныеОтчета;
КонецФункции

Функция ДанныеОтчета_СтатистикаФормаП4_2022Кв1(ОписаниеПоказателейОтчета, ПараметрыОтчета)
	ДанныеОтчета = Новый ТаблицаЗначений;
	Для Каждого ОписаниеПоказателя Из ОписаниеПоказателейОтчета Цикл
		ДанныеОтчета.Колонки.Добавить(ОписаниеПоказателя.ИмяКолонки, ОписаниеПоказателя.ТипКолонки);
	КонецЦикла;
	
	// Получение зарплатных данных отчета.
	ДеревоЗначений = Новый ДеревоЗначений;
	ПараметрыПолученияЗарплатныхДанных = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыПолученияЗарплатныхДанных.Вставить("ДатаНачалаПериодаВыборки", НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыПолученияЗарплатныхДанных, ДеревоЗначений);
	
	СНачалаГода = ПараметрыПолученияЗарплатныхДанных.Свойство("СНачалаГода") И ПараметрыПолученияЗарплатныхДанных.СНачалаГода;
	ДелительСумм = 1;
	
	СтрокаОрганизации = ДеревоЗначений.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Для Каждого СтрокаЗарплаты_ОКВЭД Из СтрокаОрганизации.Строки Цикл
			Если СНачалаГода Тогда
				СтрокаЗарплаты_МесяцНачисления = СтрокаЗарплаты_ОКВЭД;
			Иначе
				СтрокаЗарплаты_МесяцНачисления = СтрокаЗарплаты_ОКВЭД.Строки.Найти(ПараметрыПолученияЗарплатныхДанных.ДатаНачалаПериодаОтчета, "МесяцНачисления", Ложь);
			КонецЕсли;
			
			СтрокаОтчета = ДанныеОтчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтчета, СтрокаЗарплаты_ОКВЭД, "КодОКВЭД2, НаименованиеОКВЭД2");
			
			Если СтрокаЗарплаты_МесяцНачисления <> Неопределено Тогда
				СтрокаОтчета.НачисленоРаботникамСписочногоСостава = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоРаботникамСписочногоСостава / ДелительСумм, 1);
				СтрокаОтчета.НачисленоВнешнимСовместителям        = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоВнешнимСовместителям / ДелительСумм, 1);
				СтрокаОтчета.НачисленоРаботникамПоДоговорамГПХ    = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоРаботникамПоДоговорамГПХ / ДелительСумм, 1);
				СтрокаОтчета.НачисленияСоциальногоХарактера       = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленияСоциальногоХарактера / ДелительСумм, 1);
				
				СтрокаОтчета.ОтработаноЧасовВнешнимиСовместителями       = СтрокаЗарплаты_МесяцНачисления.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями;
				СтрокаОтчета.ОтработаноЧасовРаботникамиСписочногоСостава = СтрокаЗарплаты_МесяцНачисления.ОтработаноЧасовРаботникамиСписочногоСостава;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета и объединение с зарплатными данными по кодам ОКВЭД.
	ДанныеОтчета.Колонки.Добавить("КадровыеДанныеЗаполнены", Новый ОписаниеТипов("Булево"));
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ПараметрыПолученияКадровыхДанных = СкопироватьКоллекцию(ПараметрыОтчета);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыПолученияКадровыхДанных, ДеревоЗначений);
	
	СтрокаОрганизации = ДеревоЗначений.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Для Каждого СтрокаКадров Из СтрокаОрганизации.Строки Цикл
			Найденные = ДанныеОтчета.НайтиСтроки(Новый Структура("КодОКВЭД2, КадровыеДанныеЗаполнены", СтрокаКадров.КодОКВЭД2, Ложь));
			Если Найденные.Количество() > 0 Тогда
				СтрокаОтчета = Найденные[0];
			Иначе
				СтрокаОтчета = ДанныеОтчета.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, СтрокаКадров, "КодОКВЭД2, НаименованиеОКВЭД2");
			КонецЕсли;
			СтрокаОтчета.КадровыеДанныеЗаполнены = Истина;
			СтрокаОтчета.СредняяЧисленностьЗаПериодСписочногоСостава = Окр(Окр(СтрокаКадров.СредняяЧисленностьЗаПериодСписочногоСостава, 2),1);
			Если ДанныеОтчета.Колонки.Найти("СредняяЧисленностьЗаПериодВнешнихСовместителей") <> Неопределено Тогда
				СтрокаОтчета.СредняяЧисленностьЗаПериодВнешнихСовместителей = Окр(Окр(СтрокаКадров.СредняяЧисленностьЗаПериодВнешнихСовместителей, 2),1);
			КонецЕсли;
			Если ДанныеОтчета.Колонки.Найти("СредняяЧисленностьЗаПериодДоговорников") <> Неопределено Тогда
				СтрокаОтчета.СредняяЧисленностьЗаПериодДоговорников = Окр(Окр(СтрокаКадров.СредняяЧисленностьЗаПериодДоговорников, 2),1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеОтчета.Колонки.Удалить("КадровыеДанныеЗаполнены");
	
	Возврат ДанныеОтчета;
КонецФункции

Процедура УстановитьПустоеЗначение(Значение, ИмяЯчейки, Контейнер)
	Если Контейнер.ПолеТабличногоДокументаФормаОтчета.Свойство(ИмяЯчейки) И (Значение = 0 Или Значение = Null) Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета[ИмяЯчейки] = "ЧН=-";
	КонецЕсли;		
КонецПроцедуры

Процедура УстановитьПустоеЗначениеЧисленности(Значение, ИмяЯчейки, Контейнер)
	Если Контейнер.ПолеТабличногоДокументаФормаОтчета.Свойство(ИмяЯчейки) И (Значение = Null Или Значение < 0.1) Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета[ИмяЯчейки] = "ЧН=-";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФормаФинмониторинга

Процедура ДобавитьПоказателиФормыФинмониторинга(ПоказателиОтчета, ВидОтчета)

	ВсегоСтрок = КоличествоЗаполняемыхСтрокФормыФинмониторинга(ВидОтчета);
	ДанныеПоСтрокам = ДанныеПоСтрокамФормыФинмониторинга(ВидОтчета);
	ПрефиксСтроки = ПрефиксСтрокиФормыФинМониторинга(ВидОтчета);
	Для Сч = 2 По ВсегоСтрок Цикл
		ТекстСтроки = Формат(Сч,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		Для Каждого Строка Из ДанныеПоСтрокам Цикл
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, ПрефиксСтроки + ТекстСтроки + Строка.Ключ, Истина, Истина);
		КонецЦикла;
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиФормыФинмониторинга(ПараметрыОтчета, Контейнер, ВидОтчета, ВариантРасчетаПоказателей)
	
	ТаблицаДанныхОтчета = ДанныеДляЗаполнениеОтчетовМониторинга(ПараметрыОтчета, ВариантРасчетаПоказателей);
	
	МассивКатегорий = МассивКатегорийОтчета(ВидОтчета);
	ВсегоСтрок = КоличествоЗаполняемыхСтрокФормыФинмониторинга(ВидОтчета);
	ПрефиксСтроки = ПрефиксСтрокиФормыФинмониторинга(ВидОтчета);
	ДанныеПоСтрокам = ДанныеПоСтрокамФормыФинмониторинга(ВидОтчета);
	КоличествоКолонок = КоличествоКолонокФормыФинмониторинга(ВидОтчета);
	СтрокиИсключения = МассивСтрокИсключений(ВидОтчета);
	СтруктураДанных = Новый Структура;
	
	ЗаполнитьСтруктуруДанныхФормыФинмониторинга(СтруктураДанных, ТаблицаДанныхОтчета, ПрефиксСтроки, ВсегоСтрок, МассивКатегорий, СтрокиИсключения, ДанныеПоСтрокам);
	
	СоответствиеВключаемыхСтрок = СоответствиеВключаемыхСтрок(ВидОтчета);
	
	Для Каждого СтрокаСоответствия Из СоответствиеВключаемыхСтрок Цикл
		ПрефиксПодСтрока = ПрефиксСтроки + СтрокаСоответствия.ПодСтрока;
		ПрефиксРодительскаяСтрока = ПрефиксСтроки + СтрокаСоответствия.РодительскаяСтрока;
		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			Если (НомерКолонки = 3 Или НомерКолонки = 5) 
				И ВидОтчета <> "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
				Продолжить;
			КонецЕсли;
			ТекстКолонки = Формат(НомерКолонки,"ЧЦ=2; ЧДЦ=0; ЧВН=");
			СтруктураДанных[ПрефиксРодительскаяСтрока + ТекстКолонки] 
				= СтруктураДанных[ПрефиксРодительскаяСтрока + ТекстКолонки] 
				+ СтруктураДанных[ПрефиксПодСтрока + ТекстКолонки];
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Контейнер.ПолеТабличногоДокументаФормаОтчета, СтруктураДанных);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхФормыФинмониторинга(СтруктураДанных, ТаблицаДанныхОтчета, ПрефиксСтроки, ВсегоСтрок, МассивКатегорий, СтрокиИсключения, ДанныеПоСтрокам)
	Для Сч = 2 По ВсегоСтрок Цикл
		ТекстСтроки = ПрефиксСтроки + Формат(Сч,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		КатегорияПерсонала = МассивКатегорий[Сч - 2];
		СтрокаДанных = ?(СтрокиИсключения.Найти(Сч) <> Неопределено, Неопределено, ТаблицаДанныхОтчета.Найти(КатегорияПерсонала, "КатегорияПерсонала"));
		Для Каждого Строка Из ДанныеПоСтрокам Цикл
			КодПоказателя = ТекстСтроки + Строка.Ключ;
			Если СтрокаДанных <> Неопределено Тогда
				СтруктураДанных.Вставить(КодПоказателя, СтрокаДанных[Строка.Значение]);
			Иначе
				СтруктураДанных.Вставить(КодПоказателя, 0);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Формирование таблицы с данными для заполнения статистически отчетов:
// 		ЗП-Здрав (Сфера здравоохранения).
// 		ЗП-Культура (Сфера культуры).
// 		ЗП-Наука (Научные исследования и разработки).
// 		ЗП-Образование (Сфера образования).
// 		ЗП-Соц (Сфера социального обслуживания).
// 		ЗП-физическая культура и спорт (Область физической культуры и спорта).
//
// Параметры:
//  ПараметрыОтчета - структура с полями.
//		Организация
//		ДатаНачалаПериодаОтчета
//		ДатаКонцаПериодаОтчета
//		ИсключитьПодразделения, необязательный, содержит массив подразделений для исключения из отчета
//		ВключитьПодразделения, необязательный, содержит массив подразделений для включения в отчет.
//
//	Возвращаемое значение - таблица значений с данными для заполнения отчетов. Таблица содержит сведения:
//		КатегорияПерсонала
//		СредняяЧисленностьЗаПериодСписочногоСостава (без внешних совместителей)
//		СредняяЧисленностьЗаПериодВнешнихСовместителей
//		ФОТВнутреннихСовместителей
//		ФОТСписочногоСоставаБюджет (за счет средств бюджета без внешних совместителей)
//		ФОТСписочногоСоставаОМС (за счет средств ОМС без внешних совместителей)
//		ФОТСписочногоСоставаДоход (за счет средств от приносящей доход деятельности без внешних совместителей)
//		ФОТВнешнихСовместителейБюджет (за счет средств бюджета)
//		ФОТВнешнихСовместителейОМС (за счет средств ОМС)
//		ФОТВнешнихСовместителейДоход (за счет средств от приносящей доход деятельности)
//		ФОТВнешнихСовместителей
//		ФОТСписочногоСостава
//	
Функция ДанныеДляЗаполнениеОтчетовМониторинга(ПараметрыОтчета, ВариантРасчетаПоказателей)
	
	ТаблицаДанныхОтчета = Новый ТаблицаЗначений;
	ТаблицаДанныхОтчета.Колонки.Добавить("КатегорияПерсонала", Новый ОписаниеТипов("СправочникСсылка.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы"));
	ТаблицаДанныхОтчета.Колонки.Добавить("СредняяЧисленностьЗаПериодСписочногоСостава", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("СредняяЧисленностьЗаПериодВнешнихСовместителей", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнутреннихСовместителей", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТСписочногоСоставаБюджет", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТСписочногоСоставаОМС", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТСписочногоСоставаДоход", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнешнихСовместителейБюджет", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнешнихСовместителейОМС", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнешнихСовместителейДоход", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТСписочногоСостава", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнешнихСовместителей", Новый ОписаниеТипов("Число"));
	
	// Расширение структуры настроек.
	ПараметрыОтчетаДляЗаполнения = СкопироватьКоллекцию(ПараметрыОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаЗП", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат ТаблицаДанныхОтчета;
	КонецЕсли;
	
	// Заполнение таблицы данных отчета.
	Для Каждого СтрокаОтчета Из СтрокаОрганизации.Строки Цикл
		
		НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
		
		НоваяСтрока.КатегорияПерсонала = СтрокаОтчета.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы;
		
		Если ВариантРасчетаПоказателей = 2015 Тогда
			НоваяСтрока.ФОТВнутреннихСовместителей = Окр((СтрокаОтчета.НачисленоВнутреннимСовместителям + СтрокаОтчета.НачисленоРаботникамСписочногоСоставаПоСовмещению) / 1000, 1);
		Иначе
			НоваяСтрока.ФОТВнутреннихСовместителей = Окр(СтрокаОтчета.НачисленоВнутреннимСовместителям / 1000, 1);
		КонецЕсли;
		
		НоваяСтрока.ФОТСписочногоСоставаБюджет = Окр(СтрокаОтчета.ФОТСписочногоСоставаБюджет / 1000, 1);
		НоваяСтрока.ФОТСписочногоСоставаОМС = Окр(СтрокаОтчета.ФОТСписочногоСоставаОМС / 1000, 1);
		НоваяСтрока.ФОТСписочногоСоставаДоход = Окр(СтрокаОтчета.ФОТСписочногоСоставаДоход / 1000, 1);
		НоваяСтрока.ФОТВнешнихСовместителейБюджет = Окр(СтрокаОтчета.ФОТВнешнихСовместителейБюджет / 1000, 1);
		НоваяСтрока.ФОТВнешнихСовместителейОМС = Окр(СтрокаОтчета.ФОТВнешнихСовместителейОМС / 1000, 1);
		НоваяСтрока.ФОТВнешнихСовместителейДоход = Окр(СтрокаОтчета.ФОТВнешнихСовместителейДоход / 1000, 1);
		НоваяСтрока.ФОТСписочногоСостава = Окр(СтрокаОтчета.ФОТСписочногоСостава / 1000, 1);
		НоваяСтрока.ФОТВнешнихСовместителей = Окр(СтрокаОтчета.ФОТВнешнихСовместителей / 1000, 1);
		
	КонецЦикла;
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаЗП", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат ТаблицаДанныхОтчета;
	КонецЕсли;
	
	// Заполнение таблицы данных отчета.
	Для Каждого СтрокаОтчета Из СтрокаОрганизации.Строки Цикл
		
		НоваяСтрока = ТаблицаДанныхОтчета.Найти(СтрокаОтчета.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы, "КатегорияПерсонала");
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
		КонецЕсли;
		НоваяСтрока.КатегорияПерсонала = СтрокаОтчета.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы;
		НоваяСтрока.СредняяЧисленностьЗаПериодСписочногоСостава = Окр(СтрокаОтчета.СредняяЧисленностьЗаПериодСписочногоСостава, 1);
		НоваяСтрока.СредняяЧисленностьЗаПериодВнешнихСовместителей = Окр(СтрокаОтчета.СредняяЧисленностьЗаПериодВнешнихСовместителей, 1);
		
	КонецЦикла;
	
	Возврат ТаблицаДанныхОтчета;
	
КонецФункции

Функция МассивКатегорийОтчета(ВидОтчета)

	ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ПустаяСсылка();
	Если ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПЗдрав	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПКультура_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПКультура	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПОбразование	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПСоц	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПФизическаяКультураИСпорт	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|ГДЕ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга = &ФормаМониторинга
	|	И НЕ(СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга = ЗНАЧЕНИЕ(Перечисление.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука)
	|				И СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.КодКатегорииПерсонала = ""311"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код";
	Запрос.УстановитьПараметр("ФормаМониторинга", ФормаМониторинга);
	
	КатегорииОтчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		КатегорииОтчета.Вставить(0, Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПустаяСсылка());
		КатегорииОтчета.Вставить(3, Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПустаяСсылка());
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		КатегорииОтчета.Вставить(6, Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПустаяСсылка());
	КонецЕсли;
	
	Возврат КатегорииОтчета;
	
КонецФункции 

Функция ПрефиксСтрокиФормыФинмониторинга(ВидОтчета)
	Если ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		Возврат "П00001000";
	Иначе 
		Возврат "П00000000";
	КонецЕсли;
КонецФункции

Функция КоличествоКолонокФормыФинмониторинга(ВидОтчета)
	Если ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		Возврат 5;
	Иначе 
		Возврат 11;
	КонецЕсли;
КонецФункции

Функция ДанныеПоСтрокамФормыФинмониторинга(ВидОтчета)
	ДанныеПоСтрокам = Новый Соответствие;
	Если ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		ДанныеПоСтрокам.Вставить("01", "СредняяЧисленностьЗаПериодСписочногоСостава");
		ДанныеПоСтрокам.Вставить("02", "СредняяЧисленностьЗаПериодВнешнихСовместителей");
		ДанныеПоСтрокам.Вставить("03", "ФОТСписочногоСостава");
		ДанныеПоСтрокам.Вставить("04", "ФОТВнутреннихСовместителей");
		ДанныеПоСтрокам.Вставить("05", "ФОТВнешнихСовместителей");
	Иначе
		ДанныеПоСтрокам.Вставить("01", "СредняяЧисленностьЗаПериодСписочногоСостава");
		ДанныеПоСтрокам.Вставить("02", "СредняяЧисленностьЗаПериодВнешнихСовместителей");
		ДанныеПоСтрокам.Вставить("04", "ФОТВнутреннихСовместителей");
		ДанныеПоСтрокам.Вставить("06", "ФОТСписочногоСоставаБюджет");
		ДанныеПоСтрокам.Вставить("07", "ФОТСписочногоСоставаОМС");
		ДанныеПоСтрокам.Вставить("08", "ФОТСписочногоСоставаДоход");
		ДанныеПоСтрокам.Вставить("09", "ФОТВнешнихСовместителейБюджет");
		ДанныеПоСтрокам.Вставить("10", "ФОТВнешнихСовместителейОМС");
		ДанныеПоСтрокам.Вставить("11", "ФОТВнешнихСовместителейДоход");
	КонецЕсли;
	Возврат ДанныеПоСтрокам;
КонецФункции

Функция КоличествоЗаполняемыхСтрокФормыФинмониторинга(ВидОтчета)
	
	Если ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013" Или ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" Тогда
		Возврат 13;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПКультура_2013" Тогда
		Возврат 13;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		Возврат 14;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013" Тогда
		Возврат 28;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 

Функция СоответствиеВключаемыхСтрок(ВидОтчета)

	СоответствиеВключаемыхСтрок = Новый ТаблицаЗначений;
	СоответствиеВключаемыхСтрок.Колонки.Добавить("ПодСтрока", Новый ОписаниеТипов("Строка"));
	СоответствиеВключаемыхСтрок.Колонки.Добавить("РодительскаяСтрока", Новый ОписаниеТипов("Строка"));

	Если ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013" Или ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "05","04");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "09","08");
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПКультура_2013" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "08","07");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "07","06");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "09","06");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "10","06");
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "06","05");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "07","05");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "03","02");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "04","02");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "05","02");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "08","02");
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "06","05");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "09","08");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "10","08");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "12","11");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "13","11");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "15","14");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "16","14");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "20","19");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "22","21");
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "03","02");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "05","04");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "07","06");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "09","08");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "12","08");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "13","08");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "14","08");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "10","09");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "11","09");
	КонецЕсли;
	
	Возврат СоответствиеВключаемыхСтрок
	
КонецФункции 

Процедура ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, ПодСтрока,РодительскаяСтрока)

	НоваяСтрока = СоответствиеВключаемыхСтрок.Добавить();
	НоваяСтрока.ПодСтрока = ПодСтрока;
	НоваяСтрока.РодительскаяСтрока = РодительскаяСтрока;

КонецПроцедуры

Функция МассивСтрокИсключений(ВидОтчета)

	МассивСтрок = Новый Массив();
	
	Если ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		МассивСтрок.Добавить(2);
		МассивСтрок.Добавить(5);
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		МассивСтрок.Добавить(8);
	КонецЕсли;
	
	Возврат МассивСтрок
	
КонецФункции 

Функция ЯчейкаОтчетаФинмониторингаРасшифровывается(ВидОтчета, НомерСтроки, НомерКолонки)
	
	Если ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		Если НомерСтроки = "001"
			Или НомерСтроки = "008" Тогда
			Возврат Ложь;
		КонецЕсли;	
	Иначе
		Если НомерСтроки = "001"
			Или НомерКолонки = "03"
			Или НомерКолонки = "05" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Функция СКДОтчетаСтатистикаПерсонала(ВидСКД)
	
	СхемаКомпоновки = Отчеты.СтатистикаПерсонала.ПолучитьМакет(ВидСКД);
	
	Если ВидСКД <> "СхемаКомпоновкиДанныхФормаП4НЗ" Тогда
		
		Отчеты.СтатистикаПерсонала.ПередЗаполнениемОбщихИсточниковДанныхОтчета(СхемаКомпоновки.НаборыДанных);
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки), , Ложь);
		УдалитьКлючевоеСловоРазрешенные(СхемаКомпоновки);
	
	КонецЕсли;
	
	Возврат СхемаКомпоновки;
	
КонецФункции

// Формирование расшифровки отчетов статистики.
//
Процедура СформироватьОтчетРасшифровку(Параметры, ДокументРезультат)
	
	ВидСКД = "";
	ВнешниеНаборыДанных = Неопределено;
	ОпределитьВидСКД(Параметры, , ВидСКД, Ложь, ВнешниеНаборыДанных);
	
	СхемаКомпоновки = СКДОтчетаСтатистикаПерсонала(ВидСКД);
	
	Если ВидСКД = "СхемаКомпоновкиДанныхЗарплата" Тогда
		НерабочиеПериоды = КалендарныеГрафики.ПериодыНерабочихДней(КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(),
			Новый СтандартныйПериод (НачалоГода(Параметры.ДатаНачалаПериодаОтчета), Параметры.ДатаКонцаПериодаОтчета));
		ЕстьНерабочиеПериоды = НерабочиеПериоды.Количество() <> 0;
		Если ЕстьНерабочиеПериоды Тогда
			Параметры.Вставить("ОплачиваемыеНерабочиеДни", ОбщегоНазначения.ПредопределенныйЭлемент(
				"Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни"));
		КонецЕсли;
		Параметры.Вставить("ЕстьНерабочиеПериоды", ЕстьНерабочиеПериоды);
	КонецЕсли;
	
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Параметры.ИмяСКД, Параметры, СхемаКомпоновки);
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанных(СхемаКомпоновки, НастройкиОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных <> Неопределено Тогда
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
	Иначе
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
КонецПроцедуры

// Формирование расшифровки отчетов статистики.
//
Процедура СформироватьОтчетРасшифровкуСтатистика(Параметры, ДокументРезультат) Экспорт
	
	ВидСКД = "";
	ВнешниеНаборыДанных = Неопределено;
	ОпределитьВидСКД(Параметры, , ВидСКД, Ложь, ВнешниеНаборыДанных);
	
	ИмяОтчетаРасшифровки = "";
	Если НЕ Параметры.Свойство("ИмяОтчетаРасшифровки",ИмяОтчетаРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетИсточник =  Отчеты[ИмяОтчетаРасшифровки].Создать();

	ОтчетИсточник.ИнициализироватьОтчет();
	СхемаКомпоновки = ОтчетИсточник.СхемаКомпоновкиДанных;
	
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Параметры.ИмяСКД, Параметры, СхемаКомпоновки);
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанных(СхемаКомпоновки, НастройкиОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных <> Неопределено Тогда
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
	Иначе
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
КонецПроцедуры

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(Вариант, ПараметрыОтчета, ДанныеОтчета, СоответствиеПользовательскихПолей = Неопределено)
	
	СхемаКомпоновки = СКДОтчетаСтатистикаПерсонала("СхемаКомпоновкиДанныхЗарплата");
	
	ПараметрыОтчета.Вставить("Вариант", Вариант);
	ПараметрыОтчета.Вставить("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыОтчета.Организация));
	Если Вариант = "РегламентированныйОтчетСтатистикаФормаП4" Тогда
		Если НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) <> ПараметрыОтчета.ДатаНачалаПериодаОтчета Тогда
			ПараметрыОтчета.Вставить("СНачалаГода", Истина);
		КонецЕсли;
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
	ИначеЕсли Вариант = "РегламентированныйОтчетСтатистикаФормаЗП" Тогда
		ПараметрыОтчета.Вставить("СНачалаГода", Истина);
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
	ИначеЕсли Вариант = "СхемаКомпоновкиДанныхЗарплата1ТГМС" Тогда
		ПараметрыОтчета.Вставить("СНачалаГода", Истина)
	ИначеЕсли Вариант = "РегламентированныйОтчетСтатистикаФорма57Т" Тогда
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
	КонецЕсли;
	
	НерабочиеПериоды = КалендарныеГрафики.ПериодыНерабочихДней(КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(),
		Новый СтандартныйПериод (НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета), ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ЕстьНерабочиеПериоды =  НерабочиеПериоды.Количество() <> 0;
	Если ЕстьНерабочиеПериоды Тогда
		ПараметрыОтчета.Вставить("ОплачиваемыеНерабочиеДни", ОбщегоНазначения.ПредопределенныйЭлемент(
			"Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни"));
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ЕстьНерабочиеПериоды", ЕстьНерабочиеПериоды);
	
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновки, НастройкиОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ(Вариант, ПараметрыОтчета, ДанныеОтчета)
	
	СхемаКомпоновки = СКДОтчетаСтатистикаПерсонала("СхемаКомпоновкиДанныхФормаП4НЗ");
	
	Если ПараметрыОтчета.Свойство("ОплачиваемыеНерабочиеДни") Тогда
		ПараметрыОтчета.Удалить("ОплачиваемыеНерабочиеДни");
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ЕстьНерабочиеПериоды") Тогда
		ПараметрыОтчета.Удалить("ЕстьНерабочиеПериоды");
	КонецЕсли;

	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновки, НастройкиОтчета);
	
	ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормыП4НЗ(ПараметрыОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Процедура ДанныеДляЗаполненияРегламентированнойОтчетности57Т(Вариант, ПараметрыОтчета, ДанныеОтчета)
	
	СхемаКомпоновки = СКДОтчетаСтатистикаПерсонала("СхемаКомпоновкиДанныхФорма57Т");
	
	Если ПараметрыОтчета.Свойство("ОплачиваемыеНерабочиеДни") Тогда
		ПараметрыОтчета.Удалить("ОплачиваемыеНерабочиеДни");
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ЕстьНерабочиеПериоды") Тогда
		ПараметрыОтчета.Удалить("ЕстьНерабочиеПериоды");
	КонецЕсли;

	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновки, НастройкиОтчета);
	
	ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормы57Т(ПараметрыОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Функция ВнешнийИсточникСтатистикиФормыП4НЗ(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	ИсключитьДанныеОбособленныхПодразделений = Ложь;
	Если Не ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений) Тогда
		ИсключитьДанныеОбособленныхПодразделений = Ложь
	КонецЕсли;
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если Не ПараметрыОтчета.Свойство("ОбособленноеПодразделение", Подразделение) Тогда
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
	КонецЕсли;
	
	МассивПодразделений = ПодразделенияИсключения(ПараметрыОтчета.Организация, Подразделение, ИсключитьДанныеОбособленныхПодразделений);
	
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	// Сотрудники по организации
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = ПараметрыОтчета.Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Если МассивПодразделений.Количество() > 0 Тогда
		Отборы = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Подразделение", ?(ИсключитьДанныеОбособленныхПодразделений, "НЕ В", "В"), МассивПодразделений);
		ПараметрыПолученияСотрудников.Отборы = Отборы;
	КонецЕсли;
	
	СотрудникиДляОтбора = Новый Массив;
	Если ПараметрыОтчета.Свойство("СотрудникиДляОтбора", СотрудникиДляОтбора) Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = СотрудникиДляОтбора;
	КонецЕсли;
	
	ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизацииДляСтатистикиФормыП4НЗ";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников, ИмяВТСотрудникиОрганизации);
	
	// Рабочие места сотрудников
	// Уволенные в последний день периода должны включаться в отчет, поэтому увеличим период на 1 день.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	&НачалоПериода КАК НачалоПериода,
	|	ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1) КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТСотрудникиРабочиеМеста
	|ИЗ
	|	#СотрудникиОрганизации КАК СотрудникиОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
	Запрос.Выполнить();
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице("ВТСотрудникиРабочиеМеста", "Сотрудник", "НачалоПериода", "ОкончаниеПериода");
	ПараметрыПолученияРабочихМест.Организация = ПараметрыОтчета.Организация;
	Если МассивПодразделений.Количество() > 0 Тогда
		Отборы = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Подразделение", ?(ИсключитьДанныеОбособленныхПодразделений, "НЕ В", "В"), МассивПодразделений);
		ПараметрыПолученияРабочихМест.Отборы = Отборы;
	КонецЕсли;
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияРабочихМест);
	
	// Из увеличенного периода нужно оставить только уволенных, также нужно убрать уволенных на первый день периода,
	// т.к. они должны войти в предыдущий период.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеМестаСотрудников.Сотрудник,
	|	РабочиеМестаСотрудников.Период
	|ПОМЕСТИТЬ ВТСотрудникиКадровыеДанные
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	|ГДЕ
	|	(РабочиеМестаСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|				И РабочиеМестаСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|			ИЛИ РабочиеМестаСотрудников.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, 1) И ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
	|				И РабочиеМестаСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))";
	
	Запрос.Выполнить();
	
	// Кадровые данные по рабочим местам сотрудников
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКадровыеДанные");
	КадровыеДанные = "Организация, ВидСобытия, ВидЗанятости, ПриказОбУвольненииСтатьяТКРФ, ГрафикРаботы, КоличествоСтавок, ДолжностьПоШтатномуРасписанию, Пол, ДатаПриема, ДатаУвольнения";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, КадровыеДанные);
	
	Если ИспользоватьШтатноеРасписание Тогда
		
		// Сведения по позициям штатного расписания
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТКадровыеДанныеСотрудников");
		ПараметрыПостроения.ИмяПоляПозицияШтатногоРасписания = "ДолжностьПоШтатномуРасписанию";
		
		УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(
			Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения, "КоличествоСтавок", "ВТПозицииШтатногоРасписания");
		
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(
			ПараметрыОтчета.ДатаКонцаПериодаОтчета, ПараметрыОтчета.Организация);
			
		Если МассивПодразделений.Количество() > 0 Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.Отборы, "Подразделение", ?(ИсключитьДанныеОбособленныхПодразделений, "НЕ В", "В"), МассивПодразделений);
			
			КонецЕсли;
			
		УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(
			Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения, "Должность,ТрудоваяФункция,КоличествоСтавок,Занято", "ВТПозицииШтатногоРасписанияНаКонецПериода");
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК ПозицияШтатногоРасписания,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата
		|ПОМЕСТИТЬ ВТПозицииШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК ПозицияШтатногоРасписания,
		|	ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка) КАК Должность,
		|	ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ПустаяСсылка) КАК ТрудоваяФункция,
		|	0 КАК КоличествоСтавок,
		|	0 КАК Занято
		|ПОМЕСТИТЬ ВТПозицииШтатногоРасписанияНаКонецПериода";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Состояния сотрудников
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	&НачалоПериода КАК ДатаНачала,
	|	&КонецПериода КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериодыСостояний
	|ИЗ
	|	#СотрудникиОрганизации КАК СотрудникиОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
	Запрос.Выполнить();
	
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериодыСостояний");
	
	// Сотрудники, работавшие не полное рабочее время
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета, "День");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.Период КАК ДатаНачала,
	|	ЕСТЬNULL(МИНИМУМ(КадровыеДанныеСотрудниковВспомогательные.Период), &КонецПериода) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиРаботавшиеНеполноеРабочееВремяВременно
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковВспомогательные
	|		ПО КадровыеДанныеСотрудников.Сотрудник = КадровыеДанныеСотрудниковВспомогательные.Сотрудник
	|			И КадровыеДанныеСотрудников.Период < КадровыеДанныеСотрудниковВспомогательные.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО КадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|ГДЕ
	|	(КадровыеДанныеСотрудников.КоличествоСтавок < 1
	|			ИЛИ ГрафикиРаботыСотрудников.НеполноеРабочееВремя)
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыеДанныеСотрудников.Сотрудник,
	|	КадровыеДанныеСотрудников.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыСостоянийСотрудников.Сотрудник КАК Сотрудник,
	|	ПериодыСостоянийСотрудников.Начало КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПериодыСостоянийСотрудников.ОкончаниеПредположительно
	|		ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиВОтпускеПоУходу
	|ИЗ
	|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|ГДЕ
	|	ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком)
	|	И (ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ПериодыСостоянийСотрудников.Окончание >= &КонецПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник КАК Сотрудник,
	|	Периоды.Период КАК Дата
	|ПОМЕСТИТЬ ВТДниНеполногоРабочегоВремени
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиРаботавшиеНеполноеРабочееВремяВременно КАК СотрудникиРаботавшиеНеполноеРабочееВремя
	|		ПО (Периоды.Период МЕЖДУ СотрудникиРаботавшиеНеполноеРабочееВремя.ДатаНачала И СотрудникиРаботавшиеНеполноеРабочееВремя.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|		ПО (СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник = ПериодыСостоянийСотрудников.Сотрудник)
	|			И (ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
	|				ИЛИ ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком))
	|			И (Периоды.Период МЕЖДУ ПериодыСостоянийСотрудников.Начало И ВЫБОР
	|				КОГДА ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
	|			КОНЕЦ)
	|ГДЕ
	|	СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник ЕСТЬ НЕ NULL 
	|	И ПериодыСостоянийСотрудников.Сотрудник ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник,
	|	Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниНеполногоРабочегоВремени.Сотрудник КАК Сотрудник,
	|	КОЛИЧЕСТВО(ДниНеполногоРабочегоВремени.Дата) КАК КоличествоДней
	|ПОМЕСТИТЬ ВТСотрудникиРаботавшиеНеполноеРабочееВремяПредварительно
	|ИЗ
	|	ВТДниНеполногоРабочегоВремени КАК ДниНеполногоРабочегоВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДниНеполногоРабочегоВремени.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериоды";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&КонецПериода КАК Период,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТОтбораСотрудников
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиВОтпускеПоУходу КАК СотрудникиВОтпускеПоУходу
	|		ПО КадровыеДанныеСотрудников.Сотрудник = СотрудникиВОтпускеПоУходу.Сотрудник
	|			И (КадровыеДанныеСотрудников.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский))
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыеДанныеСотрудников.Сотрудник";
	
	Запрос.Выполнить();
	
	// Отпуска по уходу за ребенком
	Отборы = Новый Массив;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)";
	
	Отборы.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			"Начисление", "В", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Начисление")));
	ОтборыНачислений = Новый Структура("ПлановыеНачисления", ОбщегоНазначения.СкопироватьРекурсивно(Отборы));
	
	ЗапросВТПлановыеНачисления = КадровыйУчетРасширенный.ЗапросВТПлановыеНачисленияСотрудников(
		Истина, "ВТПлановыеНачисленияСотрудниковДоПолутораЛетПредварительно", "ВТОтбораСотрудников", "Сотрудник,Период", ОтборыНачислений);
	
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковДоПолутораЛет
	|ИЗ
	|	ВТПлановыеНачисленияСотрудниковДоПолутораЛетПредварительно КАК ПлановыеНачисленияСотрудниковДоПолутораЛет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТПлановыеНачисленияСотрудниковДоПолутораЛет КАК ПлановыеНачисленияСотрудниковДоПолутораЛет";
	
	ПлановыеНачисленияСотрудниковДоПолутораЛет = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСотрудникиВОтпускеПоУходу.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТСотрудникиВОтпускеПоУходу КАК ВТСотрудникиВОтпускеПоУходу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудниковДоПолутораЛет КАК ПлановыеНачисленияСотрудниковДоПолутораЛет
	|		ПО ВТСотрудникиВОтпускеПоУходу.Сотрудник = ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ВТСотрудникиВОтпускеПоУходу.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И (КадровыеДанныеСотрудников.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский))
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник ЕСТЬ NULL
	|	И ВТСотрудникиВОтпускеПоУходу.ДатаОкончания >= &КонецПериода
	|	И ВТСотрудникиВОтпускеПоУходу.ДатаНачала <= &КонецПериода";
	
	СотрудникиВОтпускеДоТрехЛет = Запрос.Выполнить().Выгрузить();
	
	// Сотрудники, находившиеся в простое
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыСостоянийСотрудников.Сотрудник
	|ИЗ
	|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ПериодыСостоянийСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И (ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|			ИЛИ ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботодателя))";
	
	СотрудникиВПростое = Запрос.Выполнить().Выгрузить();
	
	// Сотрудники, находившиеся в отпуске без оплаты
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыСостоянийСотрудников.Сотрудник,
	|	СУММА(РАЗНОСТЬДАТ(ПериодыСостоянийСотрудников.Начало, ВЫБОР
	|				КОГДА ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ПериодыСостоянийСотрудников.ОкончаниеПредположительно
	|				ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) КАК КоличествоДней
	|ПОМЕСТИТЬ ВТСотрудникиВОтпускеБезОплатыПредварительно
	|ИЗ
	|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|ГДЕ
	|	(ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя)
	|			ИЛИ ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыСостоянийСотрудников.Сотрудник";
	
	Запрос.Выполнить();
	
	// Сотрудник показывается один раз по строке 02 или 05, исходя из причины его работы неполное рабочее время
	// или нахождения в отпуске без сохранения заработной платы большую часть времени в квартале.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник
	|ИЗ
	|	ВТСотрудникиРаботавшиеНеполноеРабочееВремяПредварительно КАК СотрудникиРаботавшиеНеполноеРабочееВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиВОтпускеБезОплатыПредварительно КАК СотрудникиВОтпускеБезОплаты
	|		ПО СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник = СотрудникиВОтпускеБезОплаты.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И (СотрудникиРаботавшиеНеполноеРабочееВремя.КоличествоДней >= СотрудникиВОтпускеБезОплаты.КоличествоДней
	|			ИЛИ СотрудникиВОтпускеБезОплаты.Сотрудник ЕСТЬ NULL )";
	
	СотрудникиРаботавшиеНеполноеРабочееВремя = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиВОтпускеБезОплаты.Сотрудник
	|ИЗ
	|	ВТСотрудникиВОтпускеБезОплатыПредварительно КАК СотрудникиВОтпускеБезОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО СотрудникиВОтпускеБезОплаты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиРаботавшиеНеполноеРабочееВремяПредварительно КАК СотрудникиРаботавшиеНеполноеРабочееВремя
	|		ПО СотрудникиВОтпускеБезОплаты.Сотрудник = СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И (СотрудникиВОтпускеБезОплаты.КоличествоДней > СотрудникиРаботавшиеНеполноеРабочееВремя.КоличествоДней
	|			ИЛИ СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник ЕСТЬ NULL )";
	
	СотрудникиВОтпускеБезОплаты = Запрос.Выполнить().Выгрузить();
	
	// Сотрудники, работавшие вахтовым методом
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета, "Месяц");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиПериоды.Сотрудник,
	|	&КонецПериода КАК ДатаАктуальности,
	|	Периоды.Период КАК Месяц,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиДляРасчетаВремени
	|ИЗ
	|	ВТСотрудникиПериодыСостояний КАК СотрудникиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (Периоды.Период МЕЖДУ СотрудникиПериоды.ДатаНачала И СотрудникиПериоды.ДатаОкончания)";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанныхОВремени = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников();
	ПараметрыПолученияДанныхОВремени.ИмяВТСотрудники = "ВТСотрудникиДляРасчетаВремени";
	ПараметрыПолученияДанныхОВремени.ДатаНачала = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
	ПараметрыПолученияДанныхОВремени.ДатаОкончания = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаРабочегоВремениСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанныхОВремени);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеУчетаРабочегоВремениСотрудников.Сотрудник
	|ИЗ
	|	ВТДанныеУчетаРабочегоВремениСотрудников КАК ДанныеУчетаРабочегоВремениСотрудников
	|ГДЕ
	|	ДанныеУчетаРабочегоВремениСотрудников.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Вахта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаРабочегоВремениСотрудников.Сотрудник";
	
	СотрудникиВахта = Запрос.Выполнить().Выгрузить();
	
	// Данные сотрудников
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Организация КАК Организация,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
	|				И (КадровыеДанныеСотрудников.ДатаПриема МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьПринятыхВПериоде,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
	|				И (КадровыеДанныеСотрудников.ДатаПриема МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И (ШтатноеРасписание.ДатаУтверждения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьПринятыхВПериодеНаНовуюПозицию,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И (КадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьУволенныхВПериоде,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И КадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяТКРФ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.Статья77п1)
	|				И (КадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьУволенныхПоСоглашениюСторон,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И КадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяТКРФ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.Статья81п2)
	|				И (КадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьУволенныхВСвязиССокращением,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И КадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяТКРФ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.Статья77п3)
	|				И (КадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьУволенныхПоСобственномуЖеланию,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	КадровыеДанныеСотрудников.ВидСобытия КАК ВидСобытия,
	|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	КадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяТКРФ КАК ПриказОбУвольненииСтатьяТКРФ,
	|	&НачалоПериода КАК НачалоПериода,
	|	&КонецПериода КАК КонецПериода
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка";
	
	ДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПозицииШтатногоРасписанияНаКонецПериода.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПозицииШтатногоРасписанияНаКонецПериода.КоличествоСтавок, 0) - ЕСТЬNULL(ПозицииШтатногоРасписанияНаКонецПериода.Занято, 0) > 0
	|			ТОГДА ЕСТЬNULL(ПозицииШтатногоРасписанияНаКонецПериода.КоличествоСтавок, 0) - ЕСТЬNULL(ПозицииШтатногоРасписанияНаКонецПериода.Занято, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Вакансии,
	|	ВЫБОР
	|		КОГДА ПозицииШтатногоРасписанияНаКонецПериода.ТрудоваяФункция = ЗНАЧЕНИЕ(Справочник.ТрудовыеФункции.ПустаяСсылка)
	|			ТОГДА ПозицииШтатногоРасписанияНаКонецПериода.Должность.ТрудоваяФункция.КодПоОКЗ.Код
	|		ИНАЧЕ ПозицииШтатногоРасписанияНаКонецПериода.ТрудоваяФункция.КодПоОКЗ.Код
	|	КОНЕЦ КАК ДолжностьОКЗКод
	|ИЗ
	|	ВТПозицииШтатногоРасписанияНаКонецПериода КАК ПозицииШтатногоРасписанияНаКонецПериода";
	
	ПозицииШтатногоРасписанияНаКонецПериода = Запрос.Выполнить().Выгрузить();
	
	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеСотрудников", ДанныеСотрудников);
	ВнешниеНаборыДанных.Вставить("ПозицииШтатногоРасписанияНаКонецПериода",		ПозицииШтатногоРасписанияНаКонецПериода);
	ВнешниеНаборыДанных.Вставить("СотрудникиРаботавшиеНеполноеРабочееВремя",	СотрудникиРаботавшиеНеполноеРабочееВремя);
	ВнешниеНаборыДанных.Вставить("СотрудникиВОтпускеБезОплаты",					СотрудникиВОтпускеБезОплаты);
	ВнешниеНаборыДанных.Вставить("СотрудникиВПростое",							СотрудникиВПростое);
	ВнешниеНаборыДанных.Вставить("СотрудникиВахта",								СотрудникиВахта);
	ВнешниеНаборыДанных.Вставить("СотрудникиВОтпускеДоПолутораЛет",				ПлановыеНачисленияСотрудниковДоПолутораЛет);
	ВнешниеНаборыДанных.Вставить("СотрудникиВОтпускеДоТрехЛет",					СотрудникиВОтпускеДоТрехЛет);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Функция ВнешнийИсточникСтатистикиФормы57Т(ПараметрыОтчета)
	
	СотрудникиПоКатегориям = Новый ТаблицаЗначений;
	СотрудникиПоКатегориям.Колонки.Добавить("Сотрудник");
	СотрудникиПоКатегориям.Колонки.Добавить("Должность");
	СотрудникиПоКатегориям.Колонки.Добавить("Пол");
	СотрудникиПоКатегориям.Колонки.Добавить("ГодРождения");
	СотрудникиПоКатегориям.Колонки.Добавить("Образование");
	СотрудникиПоКатегориям.Колонки.Добавить("ТарифныйЗаработок");
	СотрудникиПоКатегориям.Колонки.Добавить("ВыплатыПоРайонномуРегулированию");
	СотрудникиПоКатегориям.Колонки.Добавить("ДругиеВыплаты");
	СотрудникиПоКатегориям.Колонки.Добавить("КодКатегории");
	СотрудникиПоКатегориям.Колонки.Добавить("КодПоОКПДТР");
	СотрудникиПоКатегориям.Колонки.Добавить("Стаж");
	СотрудникиПоКатегориям.Колонки.Добавить("Отработано");
	СотрудникиПоКатегориям.Колонки.Добавить("Наименование");
	СотрудникиПоКатегориям.Колонки.Добавить("Организация");
	СотрудникиПоКатегориям.Колонки.Добавить("ВидРасчета");
	СотрудникиПоКатегориям.Колонки.Добавить("НомерСтрокиОтчета");
	СотрудникиПоКатегориям.Колонки.Добавить("Отобран");
	СотрудникиПоКатегориям.Колонки.Добавить("Подразделение");
	СотрудникиПоКатегориям.Колонки.Добавить("ОтработаноЧасов");
	СотрудникиПоКатегориям.Колонки.Добавить("ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени");
	
	
	ВнешнийНаборДанных = Новый Структура("СотрудникиПоКатегориям", СотрудникиПоКатегориям);
	
	ПараметрыОтчета.ДатаНачалаПериодаОтчета = Дата(Год(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 10, 1);
	ПараметрыОтчета.ДатаКонцаПериодаОтчета = КонецМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияКадры = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияКадры,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() = 0 Тогда
		Возврат ВнешнийНаборДанных;
	КонецЕсли;
	
	СтрокаОрганизации = ДанныеОтчета.Строки[0];
	
	ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела1Формы57Т_2021(ПараметрыОтчета.Организация, НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета), СтрокаОрганизации);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияЗарплата,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		СтрокаОрганизации = ДанныеОтчета.Строки[0];
	КонецЕсли;
	
	СотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела2Формы57Т_2021(ПараметрыОтчета.Организация, НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета), ВсеСотрудникиПоКатегориям);
	
	Если СотрудникиПоКатегориям.Количество() = 0 Тогда
		Возврат ВнешнийНаборДанных;
	КонецЕсли;
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключаяПерерасчеты", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
		"РегламентированныйОтчетСтатистикаФорма57Т",
		ПараметрыОтчетаДляЗаполненияЗарплата,
		ДанныеОтчета);
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		УчтенаКвартальнаяПремия = Ложь;
		ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях_2021(СотрудникиПоКатегориям, СтрокаОрганизации, УчтенаКвартальнаяПремия);
		
		Если Не УчтенаКвартальнаяПремия Тогда
		
			ДанныеОтчета = Новый ДеревоЗначений;
			
			ПараметрыОтчетаДляЗаполненияЗарплата = СкопироватьКоллекцию(ПараметрыОтчета);
			ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета = ДобавитьМесяц(ПараметрыОтчета.ДатаНачалаПериодаОтчета, -3);
			ПараметрыОтчетаДляЗаполненияЗарплата.ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(ПараметрыОтчета.ДатаНачалаПериодаОтчета, -1));
			ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ТолькоОсновноеМестоРаботы", Истина);
			ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключаяПерерасчеты", Истина);
			ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(
				"РегламентированныйОтчетСтатистикаФорма57Т",
				ПараметрыОтчетаДляЗаполненияЗарплата,
				ДанныеОтчета);
			
			Если ДанныеОтчета.Строки.Количество() > 0 Тогда
				
				СтрокаОрганизации = ДанныеОтчета.Строки[0];
				ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях_2021(СотрудникиПоКатегориям, СтрокаОрганизации, УчтенаКвартальнаяПремия, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВнешнийНаборДанных.Вставить("СотрудникиПоКатегориям", СотрудникиПоКатегориям);
	
	Возврат ВнешнийНаборДанных;
	
КонецФункции

Процедура ОпределитьВидСКД(ПараметрыОтчета, Настройки = Неопределено, ВидСКД = "", ДополнитьКомпоновщикНастроек = Истина, 
	ВнешниеНаборыДанных = Неопределено)
	
	ВидОтчета = ПараметрыОтчета.ВидОтчета;
	НомерСтроки = ПараметрыОтчета.НомерСтроки;
	НомерКолонки = ПараметрыОтчета.НомерКолонки;
	ВариантРасчетаПоказателей = ?(ПараметрыОтчета.Свойство("ВариантРасчетаПоказателей"), ПараметрыОтчета.ВариантРасчетаПоказателей, 0);
	
	НомерРаздела = Неопределено;
	Если ПараметрыОтчета.Свойство("НомерРаздела") Тогда
		НомерРаздела = ПараметрыОтчета.НомерРаздела;
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Настройки = КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Отбор = Настройки.Отбор;
	Если ВидОтчета = "РегламентированныйОтчетП4_2013" Или ВидОтчета = "РегламентированныйОтчетП4_2017" Тогда
		
		// Отключение группировки по виду расчета для расшифровки численности.
		Если НомерКолонки = "02"
			Или НомерКолонки = "03"
			Или НомерКолонки = "04"
			Или НомерКолонки = "05"
			Или НомерКолонки = "06" Тогда
			Если ДополнитьКомпоновщикНастроек Тогда
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерКолонки = "02" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "03" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "04" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодДоговорников";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "05" Тогда
			ПолеРесурса = "ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "06" Тогда
			ПолеРесурса = "ОтработаноЧасовСНачалаГодаВнешнимиСовместителями";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "08" Тогда
			ПолеРесурса = "НачисленоРаботникамСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "09" Тогда
			ПолеРесурса = "НачисленоВнешнимСовместителям";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "10" Тогда
			ПолеРесурса = "НачисленоРаботникамПоДоговорамГПХ";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "11" Тогда
			ПолеРесурса = "НачисленияСоциальногоХарактера";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		КонецЕсли;
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетП4_2022" Тогда
		
		// Отключение группировки по виду расчета для расшифровки численности.
		Если НомерКолонки = "02"
			Или НомерКолонки = "03"
			Или НомерКолонки = "04"
			Или НомерКолонки = "05"
			Или НомерКолонки = "06" Тогда
			Если ДополнитьКомпоновщикНастроек Тогда
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерКолонки = "02" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "03" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "04" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодДоговорников";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "05" Тогда
			ПолеРесурса = "ОтработаноЧасовРаботникамиСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "06" Тогда
			ПолеРесурса = "ОтработаноЧасовВнешнимиСовместителями";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "08" Тогда
			ПолеРесурса = "НачисленоРаботникамСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "09" Тогда
			ПолеРесурса = "НачисленоВнешнимСовместителям";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "10" Тогда
			ПолеРесурса = "НачисленоРаботникамПоДоговорамГПХ";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "11" Тогда
			ПолеРесурса = "НачисленияСоциальногоХарактера";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		КонецЕсли;
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
		КонецЕсли; 
		
	ИначеЕсли ВидОтчета = "1ТГМС2015" Или ВидОтчета = "1ТГМС2019" Тогда
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерКолонки = "03" Тогда
			ПолеРесурса = "КоличествоСтавок";
			ВидСКД = "ОсновнаяСхемаКомпоновкиДанных";
		ИначеЕсли НомерКолонки = "04" Тогда
			ПолеРесурса = "ЧисленностьНаКонецПериодаСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "05" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "06" Тогда
			ПолеРесурса = "НачисленоРаботникамСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "07" Тогда
			ПолеРесурса = "НачисленияСоциальногоХарактера";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		КонецЕсли;
		
		Если ДополнитьКомпоновщикНастроек Тогда
			Если ВидОтчета = "1ТГМС2015" Тогда
				ПутьКДаннымНомераСтроки = "ПользовательскиеПоля.НомерСтроки1ТГМС2015";
			ИначеЕсли ВидОтчета = "1ТГМС2019" Тогда
				ПутьКДаннымНомераСтроки = "ПользовательскиеПоля.НомерСтроки1ТГМС2019";
			КонецЕсли;
			
			// Отключение группировки по виду расчета для расшифровки численности.
			Если НомерКолонки = "04"
				Или НомерКолонки = "05" Тогда
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
			
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
			
			// Отбор по номеру строки 1-Т(ГМС)
			НомерСтрокиЧислом = Число(НомерСтроки);
			Если ВидОтчета = "1ТГМС2015"
				Или (ВидОтчета = "1ТГМС2019" И НомерСтрокиЧислом <> 1) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПутьКДаннымНомераСтроки, ВидСравненияКомпоновкиДанных.Равно, НомерСтрокиЧислом);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчет1ТГСМС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ОпределитьВидСКД1ГСМС(Настройки,ПараметрыОтчета,ДополнитьКомпоновщикНастроек,НомерКолонки,НомерСтроки);
		КонецЕсли;		
			
	ИначеЕсли ВидОтчета = "РегламентированныйОтчет1ГСМС" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ОпределитьВидСКД1ГСМС(Настройки,ПараметрыОтчета,ДополнитьКомпоновщикНастроек,НомерКолонки,НомерСтроки);
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетП4НЗ_2015" Тогда
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерСтроки = "02" Тогда
			ПолеРесурса = "ЧисленностьРаботавшихНеполноеРабочееВремя";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "03" Тогда
			ПолеРесурса = "ЧисленностьСотрудниковВПростое";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "05" Тогда
			ПолеРесурса = "ЧисленностьСотрудниковВОтпускеБезОплаты";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "06" Тогда
			ПолеРесурса = "ПринятоСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерСтроки = "07" Тогда
			ПолеРесурса = "ЧисленностьПринятыхВПериодеНаНовуюПозицию";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "08" Тогда
			ПолеРесурса = "УволеноСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерСтроки = "09" Тогда
			ПолеРесурса = "ЧисленностьУволенныхПоСоглашениюСторон";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "10" Тогда
			ПолеРесурса = "ЧисленностьУволенныхВСвязиССокращением";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "12" Тогда
			ПолеРесурса = "ЧисленностьУволенныхПоСобственномуЖеланию";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "16" Тогда
			ПолеРесурса = "ЧисленностьЖенщинВОтпускеДоПолутораЛет";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "17" Тогда
			ПолеРесурса = "ЧисленностьЖенщинВОтпускеДоТрехЛет";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "20" Тогда
			ПолеРесурса = "ЧисленностьРаботавшихВахтовымМетодом";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "13" Тогда
			ПолеРесурса = "ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		КонецЕсли;
		ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормыП4НЗ(ПараметрыОтчета);
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
		КонецЕсли;
	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетП4НЗ_2022" Тогда
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерСтроки = "02" Тогда
			ПолеРесурса = "ЧисленностьРаботавшихНеполноеРабочееВремя";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "03" Тогда
			ПолеРесурса = "ЧисленностьСотрудниковВПростое";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "04" Тогда
			ПолеРесурса = "ЧисленностьСотрудниковВОтпускеБезОплаты";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "05" Тогда
			ПолеРесурса = "ПринятоСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерСтроки = "06" Тогда
			ПолеРесурса = "ЧисленностьПринятыхВПериодеНаНовуюПозицию";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "07" Тогда
			ПолеРесурса = "УволеноСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерСтроки = "08" Тогда
			ПолеРесурса = "ЧисленностьУволенныхПоСоглашениюСторон";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "09" Тогда
			ПолеРесурса = "ЧисленностьУволенныхВСвязиССокращением";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "10" Тогда
			ПолеРесурса = "ЧисленностьУволенныхПоСобственномуЖеланию";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "14" Тогда
			ПолеРесурса = "ЧисленностьЖенщинВОтпускеДоПолутораЛет";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "15" Тогда
			ПолеРесурса = "ЧисленностьЖенщинВОтпускеДоТрехЛет";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "16" Тогда
			ПолеРесурса = "ЧисленностьРаботавшихВахтовымМетодом";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "11" Тогда
			ПолеРесурса = "ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		КонецЕсли;
		ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормыП4НЗ(ПараметрыОтчета);
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПКультура_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		
		// Отключение группировки по виду расчета для расшифровки численности.
		Если НомерКолонки = "01" Или НомерКолонки = "02" Тогда
			Если ДополнитьКомпоновщикНастроек Тогда
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Включение полей отчета, по которым выводится расшифровка.
		Если НомерКолонки = "04" И ВариантРасчетаПоказателей = 2015 Тогда
			
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			Если ДополнитьКомпоновщикНастроек Тогда
				ВключитьВычисляемоеПоле(Настройки.Выбор, "НачисленоВнутреннимСовместителям");
				ВключитьВычисляемоеПоле(Настройки.Выбор, "НачисленоРаботникамСписочногоСоставаПоСовмещению");
				
				ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы, "ГруппаИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИЛИ, "НачисленоВнутреннимСовместителям", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИЛИ, "НачисленоРаботникамСписочногоСоставаПоСовмещению", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
			
		Иначе
			
			ПолеРесурса = "";
			Если НомерКолонки = "01" Тогда
				ПолеРесурса = "СредняяЧисленностьЗаПериодСписочногоСостава";
				ВидСКД = "СхемаКомпоновкиДанныхКадры";
			ИначеЕсли НомерКолонки = "02" Тогда
				ПолеРесурса = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
				ВидСКД = "СхемаКомпоновкиДанныхКадры";
			ИначеЕсли НомерКолонки = "03" Тогда
				ПолеРесурса = "ФОТСписочногоСостава";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "04" Тогда
				ПолеРесурса = "НачисленоВнутреннимСовместителям";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "05" Тогда
				ПолеРесурса = "ФОТВнешнихСовместителей";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "06" Тогда
				ПолеРесурса = "ФОТСписочногоСоставаБюджет";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "07" Тогда
				ПолеРесурса = "ФОТСписочногоСоставаОМС";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "08" Тогда
				ПолеРесурса = "ФОТСписочногоСоставаДоход";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "09" Тогда
				ПолеРесурса = "ФОТВнешнихСовместителейБюджет";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "10" Тогда
				ПолеРесурса = "ФОТВнешнихСовместителейОМС";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "11" Тогда
				ПолеРесурса = "ФОТВнешнихСовместителейДоход";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			КонецЕсли;
			
			Если ДополнитьКомпоновщикНастроек Тогда
				ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
				
				// Отбор на пустые строки
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетФорма1Тпроф_2018" Тогда
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерКолонки = "03" Тогда
			ПолеРесурса = "ЧисленностьСписочногоСоставаБезДекрета";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		КонецЕсли;
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
		КонецЕсли;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетФорма1Тчпз_2020" Тогда
		
		// Отключение группировки по виду расчета для расшифровки численности.
		Если НомерКолонки = "04"
			Или НомерКолонки = "05"
			Или НомерКолонки = "06" Тогда
			Если ДополнитьКомпоновщикНастроек Тогда
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерКолонки = "04" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "05" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "06" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодДоговорников";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "08" Тогда
			ПолеРесурса = "НачисленоРаботникамСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "09" Тогда
			ПолеРесурса = "НачисленоВнешнимСовместителям";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "10" Тогда
			ПолеРесурса = "НачисленоРаботникамПоДоговорамГПХ";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "11" Тогда
			ПолеРесурса = "НачисленияСоциальногоХарактера";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		КонецЕсли;
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетСтатистикаФорма57Т_2021" Тогда
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерРаздела = "01" И НомерКолонки = "03" И НомерСтроки = "02" Тогда
			ПолеРесурса = "СредняяЧисленностьМужчинСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерРаздела = "01" И НомерКолонки = "03" И НомерСтроки = "03" Тогда
			ПолеРесурса = "СредняяЧисленностьЖенщинСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерРаздела = "01" И НомерКолонки = "04" И НомерСтроки = "02" Тогда
			ПолеРесурса = "НачисленоМужчинамСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерРаздела = "01" И НомерКолонки = "04" И НомерСтроки = "03" Тогда
			ПолеРесурса = "НачисленоЖенщинамСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерРаздела = "03" Тогда
			ВидСКД = "СхемаКомпоновкиДанныхФорма57Т";
			ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормы57Т(ПараметрыОтчета);
		ИначеЕсли НомерРаздела = "02" И НомерКолонки = "09" Тогда
			ПолеРесурса = "ТарифныйЗаработок";
			ВидСКД = "СхемаКомпоновкиДанныхФорма57Т";
			ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормы57Т(ПараметрыОтчета);
		ИначеЕсли НомерРаздела = "02" И НомерКолонки = "10" Тогда
			ПолеРесурса = "ВыплатыПоРайонномуРегулированию";
			ВидСКД = "СхемаКомпоновкиДанныхФорма57Т";
			ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормы57Т(ПараметрыОтчета);
		ИначеЕсли НомерРаздела = "02" И НомерКолонки = "11" Тогда
			ПолеРесурса = "ДругиеВыплаты";
			ВидСКД = "СхемаКомпоновкиДанныхФорма57Т";
			ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормы57Т(ПараметрыОтчета);
		ИначеЕсли НомерРаздела = "02" И НомерКолонки = "12" Тогда
			ПолеРесурса = "ОтработаноЧасов";
			ВидСКД = "СхемаКомпоновкиДанныхФорма57Т";
			ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормы57Т(ПараметрыОтчета);
		КонецЕсли;
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			Если ВидСКД <> "СхемаКомпоновкиДанныхФорма57Т" <> НомерРаздела = "02" Тогда
				// Отбор на пустые строки
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
			КонецЕсли;
			Если ВидСКД = "СхемаКомпоновкиДанныхФорма57Т" И НомерРаздела = "02" Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Отобран", ВидСравненияКомпоновкиДанных.Равно, Истина);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "НомерСтрокиОтчета", ВидСравненияКомпоновкиДанных.Равно, Число(НомерСтроки));
			ИначеЕсли ВидСКД = "СхемаКомпоновкиДанныхФорма57Т" И НомерРаздела = "03" Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "КодКатегории", ВидСравненияКомпоновкиДанных.Равно, Строка(Число(НомерСтроки)-4));
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Заполнение отбора компоновщика настроек СКД в зависимости от формы отчета.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных
//  ПараметрыОтчета - Структура
//  ИмяСтроки - Строка.
//
Процедура ЗаполнитьОтборДляОтчетаРасшифровки(Отбор, ПараметрыОтчета, ИмяСтроки)
	
	ВидОтчета = ПараметрыОтчета.ВидОтчета;
	
	Если ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПКультура_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПНаука_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПФизическаяКультураИСпорт_2019" Тогда
		
		// Отбор по категориям
		КатегорииОтчета = МассивКатегорийОтчета(ВидОтчета);
		СоответствиеВключаемыхСтрок = СоответствиеВключаемыхСтрок(ВидОтчета);
		
		ЗначениеОтбора = Новый Массив;
		Категория = КатегорииОтчета[Число(ИмяСтроки) - 2];
		Если ЗначениеЗаполнено(Категория) Тогда
			ЗначениеОтбора.Добавить(Категория);
		КонецЕсли;
		
		ВключенныеКатегории = СоответствиеВключаемыхСтрок.НайтиСтроки(Новый Структура("РодительскаяСтрока", Прав(ИмяСтроки, 2)));
		Для Каждого СтрокаКатегории Из ВключенныеКатегории Цикл
			Категория = КатегорииОтчета[Число(СтрокаКатегории.ПодСтрока) - 2];
			Если ЗначениеЗаполнено(Категория) Тогда
				ЗначениеОтбора.Добавить(Категория);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы", ВидСравненияКомпоновкиДанных.ВСписке, ЗначениеОтбора);
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетП4_2013" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
			"КодОКВЭД", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.КодПоОКВЭД);
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетП4_2017" Или ВидОтчета = "РегламентированныйОтчетП4_2022" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
			"КодОКВЭД2", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.КодПоОКВЭД);
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетФорма1Тпроф_2018" Тогда
		
		// Отбор по категориям
		КатегорииОтчета = МассивСтрокСкодамиОКЗ();
			
		ЗначениеОтбора = "";
		Категория = КатегорииОтчета[Число(ИмяСтроки)-1];
		Если  Лев(Категория, 1) = "1"
			Или Лев(Категория, 1) = "6"
			Или Лев(Категория, 1) = "7"
			Или Лев(Категория, 2) = "81"
			Или Лев(Категория, 2) = "83" Тогда 
			Категория = Лев(Категория, 3);
		ИначеЕсли Лев(Категория, 1) = "9" 
			Или Лев(Категория, 2) = "52" 
			Или Лев(Категория, 2) = "82" Тогда
			Категория = Лев(Категория, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Категория) Тогда
			ЗначениеОтбора = Категория;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Категория) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
				"ДолжностьОКЗКод", ВидСравненияКомпоновкиДанных.НачинаетсяС, ЗначениеОтбора);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
				"ДолжностьОКЗКод", ВидСравненияКомпоновкиДанных.Заполнено);
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетФорма1Тчпз_2020" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
			"КодОКВЭД2", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.КодПоОКВЭД);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодразделенияИсключения(Организация, Подразделение, ИсключитьДанныеОбособленныхПодразделений)
	
	// Пока подразделения с точки зрения статистики не выделяются.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ИсключитьДанныеОбособленныхПодразделений  Тогда
		
		// Отбираем подразделения с непустым кодом для статистики, эти подразделения не войдут в отчет.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ПОМЕСТИТЬ ВТПодразделенияВерхнегоУровня
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.НомерТерриториальногоОрганаРосстата В (&ПустыеКоды)
		|	И ПодразделенияОрганизаций.Владелец = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ПодразделенияВерхнегоУровня.Ссылка
		|			ИЗ
		|				ВТПодразделенияВерхнегоУровня КАК ПодразделенияВерхнегоУровня)
		|	И ПодразделенияОрганизаций.Владелец = &Организация";
		ПустыеКоды = Новый Массив;
		ПустыеКоды.Добавить("");
		ПустыеКоды.Добавить("              ");
		Запрос.УстановитьПараметр("ПустыеКоды", ПустыеКоды);
		
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&Подразделение)
		|	И ПодразделенияОрганизаций.Владелец = &Организация";
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
	Иначе
		
		Возврат Новый Массив
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции 

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(Вариант, ПараметрыОтчета, ДанныеОтчета, СоответствиеПользовательскихПолей = Неопределено)
	
	СхемаКомпоновки = СКДОтчетаСтатистикаПерсонала("СхемаКомпоновкиДанныхКадры");
	
	ПараметрыОтчета.Вставить("Вариант", Вариант);
	Если Вариант = "РегламентированныйОтчетСтатистикаФормаП4"
		Или Вариант = "РегламентированныйОтчетСтатистикаФорма1ТПроф"
		Или Вариант = "РегламентированныйОтчетСтатистикаФормаЗП"
		Или Вариант = "СреднесписочнаяЧисленностьПоГоловнойОрганизации"
		Или Вариант = "СреднесписочнаяЧисленностьПоОрганизации" 
		Или Вариант = "РегламентированныйОтчетСтатистикаФорма57Т" Тогда
		ПараметрыОтчета.Вставить("ИсключатьВоенных", Истина);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ОплачиваемыеНерабочиеДни") Тогда
		ПараметрыОтчета.Удалить("ОплачиваемыеНерабочиеДни");
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ЕстьНерабочиеПериоды") Тогда
		ПараметрыОтчета.Удалить("ЕстьНерабочиеПериоды");
	КонецЕсли;

	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	
	// Запрос данных
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновки, НастройкиОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиШР1ТГМС(Вариант, ПараметрыОтчета, ДанныеОтчета, СоответствиеПользовательскихПолей = Неопределено) 
	
	СхемаКомпоновки = Отчеты.ШтатноеРасписание.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ПараметрыОтчета.Вставить("Вариант", Вариант);
	ПараметрыОтчета.Вставить("ДатаАктуальности", ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки));
	УдалитьКлючевоеСловоРазрешенные(СхемаКомпоновки);
	
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	
	// Запрос данных
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанныхДляКоллекцииЗначений(СхемаКомпоновки, НастройкиОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
КонецПроцедуры

Функция ЗаполнитьКомпоновщикНастроек(КлючВарианта, ПараметрыОтчета, СхемаКД) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	Если ПараметрыОтчета.Свойство("ДатаНачалаПериодаВыборки") Тогда
		ДатаНачалаПериодаОтчета = ПараметрыОтчета.ДатаНачалаПериодаВыборки;
	Иначе
		ДатаНачалаПериодаОтчета = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
	КонецЕсли;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	
	// Настройка отборов
	ИсключитьДанныеОбособленныхПодразделений = Ложь;
	Если Не ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений) Тогда
		ИсключитьДанныеОбособленныхПодразделений = Ложь
	КонецЕсли;
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если Не ПараметрыОтчета.Свойство("ОбособленноеПодразделение", Подразделение) Тогда
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
	КонецЕсли;
	
	МассивПодразделений = ПодразделенияИсключения(Организация, Подразделение, ИсключитьДанныеОбособленныхПодразделений);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКД.ВариантыНастроек[КлючВарианта].Настройки);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	
	ПараметрПериод = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "Период");
	Если ПараметрПериод = Неопределено Тогда
		ПараметрПериод = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "ПериодОтчета");
	КонецЕсли;
	Если ПараметрПериод <> Неопределено Тогда
		Если ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартныйПериод") Тогда
			ПараметрПериод.Значение.ДатаНачала = ДатаНачалаПериодаОтчета;
			ПараметрПериод.Значение.ДатаОкончания = ДатаКонцаПериодаОтчета;
		Иначе
			ПараметрПериод.Значение = ПараметрыОтчета.Период;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("СНачалаГода") Тогда
		ПараметрСНачалаГода = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "СНачалаГода");
		Если ПараметрСНачалаГода <> Неопределено Тогда
			ПараметрСНачалаГода.Значение = ПараметрыОтчета.СНачалаГода;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ДатаАктуальности") Тогда
		ПараметрДатаАктуальности = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "ДатаАктуальности");
		Если ПараметрДатаАктуальности <> Неопределено Тогда
			ПараметрДатаАктуальности.Значение = ДатаКонцаПериодаОтчета;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрИспользоватьШтатноеРасписание = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "ИспользоватьШтатноеРасписание");
	Если ПараметрИспользоватьШтатноеРасписание <> Неопределено Тогда
		ПараметрИспользоватьШтатноеРасписание.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ОплачиваемыеНерабочиеДни") Тогда
		ПараметрОплачиваемыеНерабочиеДни = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "ОплачиваемыеНерабочиеДни");
		ПараметрОплачиваемыеНерабочиеДни.Значение = ПараметрыОтчета.ОплачиваемыеНерабочиеДни;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ЕстьНерабочиеПериоды") Тогда
		ПараметрЕстьНерабочиеПериоды = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "ЕстьНерабочиеПериоды");
		ПараметрЕстьНерабочиеПериоды.Значение = ПараметрыОтчета.ЕстьНерабочиеПериоды;
	КонецЕсли;
	
	ПараметрКД = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроек, "ВидыВыплатНаПериодТрудоустройства");
	Если ПараметрКД <> Неопределено Тогда
		ПараметрКД.Значение = МассивВСписокЗначений(Справочники.ВидыВыплатБывшимСотрудникам.ВидыВыплатНаПериодТрудоустройства());
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	ОчищатьОтборы = Ложь;
	Если НЕ ПараметрыОтчета.Свойство("ОчищатьОтборы",ОчищатьОтборы) Тогда	
		ОчищатьОтборы = Истина;
	КонецЕсли;
	
	ИмяПоляОрганизация = "Организация";
	Если НЕ ПараметрыОтчета.Свойство("ИмяПоляОрганизация",ИмяПоляОрганизация) Тогда	
		ИмяПоляОрганизация = "Организация";	
	КонецЕсли;	
	
	ИмяПоляПодразделение = "Подразделение";
	Если НЕ ПараметрыОтчета.Свойство("ИмяПоляПодразделение",ИмяПоляПодразделение) Тогда	
		ИмяПоляПодразделение = "Подразделение";	
	КонецЕсли;	
	
	Отбор = Настройки.Отбор;
	Если ОчищатьОтборы Тогда 
		Отбор.Элементы.Очистить();
	КонецЕсли;
	
	Если НЕ ПараметрыОтчета.Свойство("ОтбиратьПоГоловнойОрганизации", Истина) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ИмяПоляОрганизация, ВидСравненияКомпоновкиДанных.Равно, Организация);
	КонецЕсли;
	
	Если Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ГоловнаяОрганизация")) <> Неопределено Тогда
		ГоловнаяОрганизация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ГоловнаяОрганизация");
		Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
			ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ГоловнаяОрганизация", ВидСравненияКомпоновкиДанных.Равно, ГоловнаяОрганизация);
	КонецЕсли;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УстановитьОтборПоИсключениюВоенныхДолжностей(ПараметрыОтчета,Отбор);
	КонецЕсли;
	
	ТолькоОсновноеМестоРаботы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ТолькоОсновноеМестоРаботы");
	Если ТолькоОсновноеМестоРаботы = Истина
		И Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидЗанятости")) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "ВидЗанятости", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	КонецЕсли;
	
	ИсключатьГодовыеПремии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ИсключатьГодовыеПремии");
	Если ИсключатьГодовыеПремии = Истина
		И Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидРасчета")) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "ВидРасчета", ПланыВидовРасчета.Начисления.ГодовыеПремии(), ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;
	
	ОтборСотрудников = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ОтборСотрудников");
	Если ОтборСотрудников <> Неопределено
		И Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Сотрудник")) <> Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Сотрудник", ОтборСотрудников, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ИмяПоляПодразделение, ВидСравненияКомпоновкиДанных.ВСписке, МассивПодразделений);
	КонецЕсли;
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ИмяПоляПодразделение, ВидСравненияКомпоновкиДанных.НеВСписке, МассивПодразделений);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ИсключаяПерерасчеты") Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ПериодДействия", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("МесяцНачисления"));
	КонецЕсли;
	
	// Далее следует настройка варианта расшифровки.
	Если КлючВарианта <> "Расшифровка" Тогда
		Возврат КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	// Включение полей отчета, по которым выводится расшифровка.
	ВключитьВычисляемоеПоле(Настройки.Выбор, "Сотрудник");
	
	ОпределитьВидСКД(ПараметрыОтчета, Настройки);
	
	// Добавление отборов
	ЗаполнитьОтборДляОтчетаРасшифровки(Отбор, ПараметрыОтчета, ПараметрыОтчета.НомерСтроки);
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

#КонецОбласти

#Область РегламентированнаяОтчетность

Функция РазобратьИмяПоказателяРегламентированногоОтчета(ИмяПоказателя, Шаблон = "П---РР--СССКК") Экспорт
	Результат = Новый Структура("НомерРаздела, НомерСтроки, НомерКолонки", "", "", "");
	
	КоличествоСимволов = СтрДлина(ИмяПоказателя);
	Если КоличествоСимволов <> СтрДлина(Шаблон) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		
		СимволПоказателя = Сред(ИмяПоказателя, НомерСимвола, 1);
		СимволШаблона = Сред(Шаблон, НомерСимвола, 1);
		
		Если СимволШаблона = "Р" Тогда
			Результат.НомерРаздела = Результат.НомерРаздела + СимволПоказателя;
		ИначеЕсли СимволШаблона = "С" Тогда
			Результат.НомерСтроки = Результат.НомерСтроки + СимволПоказателя;
		ИначеЕсли СимволШаблона = "К" Тогда
			Результат.НомерКолонки = Результат.НомерКолонки + СимволПоказателя;
		ИначеЕсли СимволШаблона = " " Или СимволШаблона = "_" Или СимволШаблона = "-" Тогда
			// Пропуск.
		ИначеЕсли СимволШаблона <> СимволПоказателя Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция МассивВСписокЗначений(Массив) Экспорт
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Массив);
	Возврат Результат;
КонецФункции

Функция СвернутьТаблицу(Знач ТаблицаЗначений, ИменаКолонокГруппировки, Копировать = Истина) Экспорт
	МассивКолонокГруппировки = СтрРазделить(ИменаКолонокГруппировки, ", ", Ложь);
	МассивКолонокСуммирования = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если МассивКолонокГруппировки.Найти(Колонка.Имя) = Неопределено Тогда
			МассивКолонокСуммирования.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	Если Копировать Тогда
		ТаблицаЗначений = ТаблицаЗначений.Скопировать();
	КонецЕсли;
	ТаблицаЗначений.Свернуть(ИменаКолонокГруппировки, СтрСоединить(МассивКолонокСуммирования, ", "));
	Возврат ТаблицаЗначений;
КонецФункции

#КонецОбласти

#Область СистемаКомпоновкиДанных

Процедура УдалитьКлючевоеСловоРазрешенные(СхемаКомпоновки) Экспорт
	
	// Заполнение регламентированного отчета бессмысленно по разрешенным данным
	Для Каждого НаборДанных Из СхемаКомпоновки.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "РАЗРЕШЕННЫЕ", "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Форма1ТПроф

Процедура ДобавитьПоказателиФормы1Тпроф_2018(ПоказателиОтчета)

	ДанныеПоСтрокам = ДанныеПоСтрокамФормы1Тпроф();
	Для Сч = 1 По 301 Цикл
		ТекстСтроки = Формат(Сч,"ЧЦ=3; ЧДЦ=0; ЧВН=");
		Для Каждого Строка Из ДанныеПоСтрокам Цикл
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П0" + ТекстСтроки + Строка.Ключ, Истина, Истина);
		КонецЦикла;
	КонецЦикла
	
КонецПроцедуры

Функция ДанныеПоСтрокамФормы1Тпроф()
	ДанныеПоСтрокам = Новый Соответствие;
	ДанныеПоСтрокам.Вставить("03", "ЧисленностьСписочногоСоставаБезДекрета");
	ДанныеПоСтрокам.Вставить("04", "Вакансии");
	Возврат ДанныеПоСтрокам;
КонецФункции

Функция МассивСтрокИсключенийФормы1ТПроф()

	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(1);
	МассивСтрок.Добавить(2);
	МассивСтрок.Добавить(13);
	МассивСтрок.Добавить(14);
	МассивСтрок.Добавить(40);
	МассивСтрок.Добавить(55);
	МассивСтрок.Добавить(70);
	МассивСтрок.Добавить(83);
	МассивСтрок.Добавить(93);
	МассивСтрок.Добавить(115);
	МассивСтрок.Добавить(116);
	МассивСтрок.Добавить(143);
	МассивСтрок.Добавить(160);
	МассивСтрок.Добавить(174);
	МассивСтрок.Добавить(185);
	МассивСтрок.Добавить(196);
	МассивСтрок.Добавить(193);
	МассивСтрок.Добавить(198);
	МассивСтрок.Добавить(210);
	МассивСтрок.Добавить(217);
	МассивСтрок.Добавить(224);
	МассивСтрок.Добавить(225);
	МассивСтрок.Добавить(242);
	МассивСтрок.Добавить(248);
	МассивСтрок.Добавить(252);
	МассивСтрок.Добавить(258);
	МассивСтрок.Добавить(259);
	МассивСтрок.Добавить(263);
	МассивСтрок.Добавить(267);
	МассивСтрок.Добавить(270);
	МассивСтрок.Добавить(273);
	МассивСтрок.Добавить(278);
	МассивСтрок.Добавить(279);
	МассивСтрок.Добавить(289);
	МассивСтрок.Добавить(295);

	Возврат МассивСтрок
	
КонецФункции 

Процедура ЗаполнитьПоказателиФормы1Тпроф_2018(ПараметрыОтчета, Контейнер)
	
	ПараметрыОтчета.ДатаНачалаПериодаОтчета = Дата(Год(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 10, 31);
	ПараметрыОтчета.ДатаКонцаПериодаОтчета = Дата(Год(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 10, 31);
	
	ТаблицаДанныхОтчета = ДанныеДляЗаполнениеФормы1Тпроф(ПараметрыОтчета);
	
	ДанныеПоСтрокам = ДанныеПоСтрокамФормы1Тпроф();
	СтрокиИсключения = МассивСтрокИсключенийФормы1ТПроф();
	СтруктураДанных = Новый Структура;
	ЗаполнитьСтруктуруДанныхФормы1Тпроф(СтруктураДанных, ТаблицаДанныхОтчета, "П0", 301, МассивСтрокСКодамиОКЗ(), СтрокиИсключения, ДанныеПоСтрокам);
	
	ЗаполнитьЗначенияСвойств(Контейнер.ПолеТабличногоДокументаФормаОтчета, СтруктураДанных);
	
	Контейнер.Вставить("Контейнер", ОбщегоНазначения.СкопироватьРекурсивно(Контейнер));
	Контейнер.Вставить("ТаблицаРасшифровки", Новый ТаблицаЗначений);
	
КонецПроцедуры

Функция МассивСтрокСКодамиОКЗ()
		
	МассивСтрокСКодамОКЗ = Новый Массив;
	МассивСтрокСКодамОКЗ.Добавить("");
	МассивСтрокСКодамОКЗ.Добавить("1");
	МассивСтрокСКодамОКЗ.Добавить("112");
	МассивСтрокСКодамОКЗ.Добавить("121");
	МассивСтрокСКодамОКЗ.Добавить("122");
	МассивСтрокСКодамОКЗ.Добавить("131");
	МассивСтрокСКодамОКЗ.Добавить("132");
	МассивСтрокСКодамОКЗ.Добавить("133");
	МассивСтрокСКодамОКЗ.Добавить("134");
	МассивСтрокСКодамОКЗ.Добавить("141");
	МассивСтрокСКодамОКЗ.Добавить("142");
	МассивСтрокСКодамОКЗ.Добавить("143");
	МассивСтрокСКодамОКЗ.Добавить("2");
	МассивСтрокСКодамОКЗ.Добавить("21");
	МассивСтрокСКодамОКЗ.Добавить("2111");
	МассивСтрокСКодамОКЗ.Добавить("2112");
	МассивСтрокСКодамОКЗ.Добавить("2113");
	МассивСтрокСКодамОКЗ.Добавить("2114");
	МассивСтрокСКодамОКЗ.Добавить("2121");
	МассивСтрокСКодамОКЗ.Добавить("2122");
	МассивСтрокСКодамОКЗ.Добавить("2131");
	МассивСтрокСКодамОКЗ.Добавить("2132");
	МассивСтрокСКодамОКЗ.Добавить("2133");
	МассивСтрокСКодамОКЗ.Добавить("2141");
	МассивСтрокСКодамОКЗ.Добавить("2142");
	МассивСтрокСКодамОКЗ.Добавить("2143");
	МассивСтрокСКодамОКЗ.Добавить("2144");
	МассивСтрокСКодамОКЗ.Добавить("2145");
	МассивСтрокСКодамОКЗ.Добавить("2146");
	МассивСтрокСКодамОКЗ.Добавить("2149");
	МассивСтрокСКодамОКЗ.Добавить("2151");
	МассивСтрокСКодамОКЗ.Добавить("2152");
	МассивСтрокСКодамОКЗ.Добавить("2153");
	МассивСтрокСКодамОКЗ.Добавить("2161");
	МассивСтрокСКодамОКЗ.Добавить("2162");
	МассивСтрокСКодамОКЗ.Добавить("2163");
	МассивСтрокСКодамОКЗ.Добавить("2164");
	МассивСтрокСКодамОКЗ.Добавить("2165");
	МассивСтрокСКодамОКЗ.Добавить("2166");
	МассивСтрокСКодамОКЗ.Добавить("22");
	МассивСтрокСКодамОКЗ.Добавить("2211");
	МассивСтрокСКодамОКЗ.Добавить("2212");
	МассивСтрокСКодамОКЗ.Добавить("2221");
	МассивСтрокСКодамОКЗ.Добавить("2222");
	МассивСтрокСКодамОКЗ.Добавить("2240");
	МассивСтрокСКодамОКЗ.Добавить("2250");
	МассивСтрокСКодамОКЗ.Добавить("2261");
	МассивСтрокСКодамОКЗ.Добавить("2262");
	МассивСтрокСКодамОКЗ.Добавить("2263");
	МассивСтрокСКодамОКЗ.Добавить("2264");
	МассивСтрокСКодамОКЗ.Добавить("2265");
	МассивСтрокСКодамОКЗ.Добавить("2266");
	МассивСтрокСКодамОКЗ.Добавить("2267");
	МассивСтрокСКодамОКЗ.Добавить("2269");
	МассивСтрокСКодамОКЗ.Добавить("23");
	МассивСтрокСКодамОКЗ.Добавить("2310");
	МассивСтрокСКодамОКЗ.Добавить("2320");
	МассивСтрокСКодамОКЗ.Добавить("2330");
	МассивСтрокСКодамОКЗ.Добавить("2341");
	МассивСтрокСКодамОКЗ.Добавить("2342");
	МассивСтрокСКодамОКЗ.Добавить("2351");
	МассивСтрокСКодамОКЗ.Добавить("2352");
	МассивСтрокСКодамОКЗ.Добавить("2353");
	МассивСтрокСКодамОКЗ.Добавить("2354");
	МассивСтрокСКодамОКЗ.Добавить("2355");
	МассивСтрокСКодамОКЗ.Добавить("2356");
	МассивСтрокСКодамОКЗ.Добавить("2357");
	МассивСтрокСКодамОКЗ.Добавить("2358");
	МассивСтрокСКодамОКЗ.Добавить("2359");
	МассивСтрокСКодамОКЗ.Добавить("24");
	МассивСтрокСКодамОКЗ.Добавить("2411");
	МассивСтрокСКодамОКЗ.Добавить("2412");
	МассивСтрокСКодамОКЗ.Добавить("2413");
	МассивСтрокСКодамОКЗ.Добавить("2414");
	МассивСтрокСКодамОКЗ.Добавить("2421");
	МассивСтрокСКодамОКЗ.Добавить("2422");
	МассивСтрокСКодамОКЗ.Добавить("2423");
	МассивСтрокСКодамОКЗ.Добавить("2424");
	МассивСтрокСКодамОКЗ.Добавить("2431");
	МассивСтрокСКодамОКЗ.Добавить("2432");
	МассивСтрокСКодамОКЗ.Добавить("2433");
	МассивСтрокСКодамОКЗ.Добавить("2434");
	МассивСтрокСКодамОКЗ.Добавить("25");
	МассивСтрокСКодамОКЗ.Добавить("2511");
	МассивСтрокСКодамОКЗ.Добавить("2512");
	МассивСтрокСКодамОКЗ.Добавить("2513");
	МассивСтрокСКодамОКЗ.Добавить("2514");
	МассивСтрокСКодамОКЗ.Добавить("2519");
	МассивСтрокСКодамОКЗ.Добавить("2521");
	МассивСтрокСКодамОКЗ.Добавить("2522");
	МассивСтрокСКодамОКЗ.Добавить("2523");
	МассивСтрокСКодамОКЗ.Добавить("2529");
	МассивСтрокСКодамОКЗ.Добавить("26");
	МассивСтрокСКодамОКЗ.Добавить("2611");
	МассивСтрокСКодамОКЗ.Добавить("2612");
	МассивСтрокСКодамОКЗ.Добавить("2613");
	МассивСтрокСКодамОКЗ.Добавить("2619");
	МассивСтрокСКодамОКЗ.Добавить("2621");
	МассивСтрокСКодамОКЗ.Добавить("2622");
	МассивСтрокСКодамОКЗ.Добавить("2631");
	МассивСтрокСКодамОКЗ.Добавить("2632");
	МассивСтрокСКодамОКЗ.Добавить("2633");
	МассивСтрокСКодамОКЗ.Добавить("2634");
	МассивСтрокСКодамОКЗ.Добавить("2635");
	МассивСтрокСКодамОКЗ.Добавить("2641");
	МассивСтрокСКодамОКЗ.Добавить("2642");
	МассивСтрокСКодамОКЗ.Добавить("2643");
	МассивСтрокСКодамОКЗ.Добавить("2651");
	МассивСтрокСКодамОКЗ.Добавить("2652");
	МассивСтрокСКодамОКЗ.Добавить("2653");
	МассивСтрокСКодамОКЗ.Добавить("2654");
	МассивСтрокСКодамОКЗ.Добавить("2655");
	МассивСтрокСКодамОКЗ.Добавить("2656");
	МассивСтрокСКодамОКЗ.Добавить("2659");
	МассивСтрокСКодамОКЗ.Добавить("3");
	МассивСтрокСКодамОКЗ.Добавить("31");
	МассивСтрокСКодамОКЗ.Добавить("3111");
	МассивСтрокСКодамОКЗ.Добавить("3112");
	МассивСтрокСКодамОКЗ.Добавить("3113");
	МассивСтрокСКодамОКЗ.Добавить("3114");
	МассивСтрокСКодамОКЗ.Добавить("3115");
	МассивСтрокСКодамОКЗ.Добавить("3116");
	МассивСтрокСКодамОКЗ.Добавить("3117");
	МассивСтрокСКодамОКЗ.Добавить("3118");
	МассивСтрокСКодамОКЗ.Добавить("3119");
	МассивСтрокСКодамОКЗ.Добавить("3121");
	МассивСтрокСКодамОКЗ.Добавить("3122");
	МассивСтрокСКодамОКЗ.Добавить("3123");
	МассивСтрокСКодамОКЗ.Добавить("3131");
	МассивСтрокСКодамОКЗ.Добавить("3132");
	МассивСтрокСКодамОКЗ.Добавить("3133");
	МассивСтрокСКодамОКЗ.Добавить("3134");
	МассивСтрокСКодамОКЗ.Добавить("3135");
	МассивСтрокСКодамОКЗ.Добавить("3139");
	МассивСтрокСКодамОКЗ.Добавить("3141");
	МассивСтрокСКодамОКЗ.Добавить("3142");
	МассивСтрокСКодамОКЗ.Добавить("3143");
	МассивСтрокСКодамОКЗ.Добавить("3151");
	МассивСтрокСКодамОКЗ.Добавить("3152");
	МассивСтрокСКодамОКЗ.Добавить("3153");
	МассивСтрокСКодамОКЗ.Добавить("3154");
	МассивСтрокСКодамОКЗ.Добавить("3155");
	МассивСтрокСКодамОКЗ.Добавить("32");
	МассивСтрокСКодамОКЗ.Добавить("3211");
	МассивСтрокСКодамОКЗ.Добавить("3212");
	МассивСтрокСКодамОКЗ.Добавить("3213");
	МассивСтрокСКодамОКЗ.Добавить("3214");
	МассивСтрокСКодамОКЗ.Добавить("3221");
	МассивСтрокСКодамОКЗ.Добавить("3222");
	МассивСтрокСКодамОКЗ.Добавить("3240");
	МассивСтрокСКодамОКЗ.Добавить("3251");
	МассивСтрокСКодамОКЗ.Добавить("3252");
	МассивСтрокСКодамОКЗ.Добавить("3253");
	МассивСтрокСКодамОКЗ.Добавить("3254");
	МассивСтрокСКодамОКЗ.Добавить("3255");
	МассивСтрокСКодамОКЗ.Добавить("3256");
	МассивСтрокСКодамОКЗ.Добавить("3257");
	МассивСтрокСКодамОКЗ.Добавить("3258");
	МассивСтрокСКодамОКЗ.Добавить("3259");
	МассивСтрокСКодамОКЗ.Добавить("33");
	МассивСтрокСКодамОКЗ.Добавить("3311");
	МассивСтрокСКодамОКЗ.Добавить("3314");
	МассивСтрокСКодамОКЗ.Добавить("3322");
	МассивСтрокСКодамОКЗ.Добавить("3323");
	МассивСтрокСКодамОКЗ.Добавить("3331");
	МассивСтрокСКодамОКЗ.Добавить("3332");
	МассивСтрокСКодамОКЗ.Добавить("3333");
	МассивСтрокСКодамОКЗ.Добавить("3334");
	МассивСтрокСКодамОКЗ.Добавить("3339");
	МассивСтрокСКодамОКЗ.Добавить("3341");
	МассивСтрокСКодамОКЗ.Добавить("3342");
	МассивСтрокСКодамОКЗ.Добавить("3343");
	МассивСтрокСКодамОКЗ.Добавить("3344");
	МассивСтрокСКодамОКЗ.Добавить("34");
	МассивСтрокСКодамОКЗ.Добавить("3411");
	МассивСтрокСКодамОКЗ.Добавить("3412");
	МассивСтрокСКодамОКЗ.Добавить("3421");
	МассивСтрокСКодамОКЗ.Добавить("3422");
	МассивСтрокСКодамОКЗ.Добавить("3423");
	МассивСтрокСКодамОКЗ.Добавить("3431");
	МассивСтрокСКодамОКЗ.Добавить("3432");
	МассивСтрокСКодамОКЗ.Добавить("3433");
	МассивСтрокСКодамОКЗ.Добавить("3434");
	МассивСтрокСКодамОКЗ.Добавить("3439");
	МассивСтрокСКодамОКЗ.Добавить("35");
	МассивСтрокСКодамОКЗ.Добавить("3511");
	МассивСтрокСКодамОКЗ.Добавить("3512");
	МассивСтрокСКодамОКЗ.Добавить("3513");
	МассивСтрокСКодамОКЗ.Добавить("3514");
	МассивСтрокСКодамОКЗ.Добавить("3521");
	МассивСтрокСКодамОКЗ.Добавить("3522");
	МассивСтрокСКодамОКЗ.Добавить("4");
	МассивСтрокСКодамОКЗ.Добавить("41");
	МассивСтрокСКодамОКЗ.Добавить("4111");
	МассивСтрокСКодамОКЗ.Добавить("4120");
	МассивСтрокСКодамОКЗ.Добавить("4131");
	МассивСтрокСКодамОКЗ.Добавить("4132");
	МассивСтрокСКодамОКЗ.Добавить("42");
	МассивСтрокСКодамОКЗ.Добавить("4211");
	МассивСтрокСКодамОКЗ.Добавить("4212");
	МассивСтрокСКодамОКЗ.Добавить("4214");
	МассивСтрокСКодамОКЗ.Добавить("4221");
	МассивСтрокСКодамОКЗ.Добавить("4222");
	МассивСтрокСКодамОКЗ.Добавить("4223");
	МассивСтрокСКодамОКЗ.Добавить("4224");
	МассивСтрокСКодамОКЗ.Добавить("4225");
	МассивСтрокСКодамОКЗ.Добавить("4226");
	МассивСтрокСКодамОКЗ.Добавить("4227");
	МассивСтрокСКодамОКЗ.Добавить("4229");
	МассивСтрокСКодамОКЗ.Добавить("43");
	МассивСтрокСКодамОКЗ.Добавить("4311");
	МассивСтрокСКодамОКЗ.Добавить("4312");
	МассивСтрокСКодамОКЗ.Добавить("4313");
	МассивСтрокСКодамОКЗ.Добавить("4321");
	МассивСтрокСКодамОКЗ.Добавить("4322");
	МассивСтрокСКодамОКЗ.Добавить("4323");
	МассивСтрокСКодамОКЗ.Добавить("44");
	МассивСтрокСКодамОКЗ.Добавить("4411");
	МассивСтрокСКодамОКЗ.Добавить("4412");
	МассивСтрокСКодамОКЗ.Добавить("4413");
	МассивСтрокСКодамОКЗ.Добавить("4415");
	МассивСтрокСКодамОКЗ.Добавить("4416");
	МассивСтрокСКодамОКЗ.Добавить("4419");
	МассивСтрокСКодамОКЗ.Добавить("5");
	МассивСтрокСКодамОКЗ.Добавить("51");
	МассивСтрокСКодамОКЗ.Добавить("5111");
	МассивСтрокСКодамОКЗ.Добавить("5112");
	МассивСтрокСКодамОКЗ.Добавить("5120");
	МассивСтрокСКодамОКЗ.Добавить("5131");
	МассивСтрокСКодамОКЗ.Добавить("5132");
	МассивСтрокСКодамОКЗ.Добавить("5141");
	МассивСтрокСКодамОКЗ.Добавить("5142");
	МассивСтрокСКодамОКЗ.Добавить("5151");
	МассивСтрокСКодамОКЗ.Добавить("5152");
	МассивСтрокСКодамОКЗ.Добавить("5153");
	МассивСтрокСКодамОКЗ.Добавить("5162");
	МассивСтрокСКодамОКЗ.Добавить("5163");
	МассивСтрокСКодамОКЗ.Добавить("5164");
	МассивСтрокСКодамОКЗ.Добавить("5165");
	МассивСтрокСКодамОКЗ.Добавить("5169");
	МассивСтрокСКодамОКЗ.Добавить("52");
	МассивСтрокСКодамОКЗ.Добавить("53");
	МассивСтрокСКодамОКЗ.Добавить("5311");
	МассивСтрокСКодамОКЗ.Добавить("5312");
	МассивСтрокСКодамОКЗ.Добавить("5321");
	МассивСтрокСКодамОКЗ.Добавить("5322");
	МассивСтрокСКодамОКЗ.Добавить("5329");
	МассивСтрокСКодамОКЗ.Добавить("54");
	МассивСтрокСКодамОКЗ.Добавить("5411");
	МассивСтрокСКодамОКЗ.Добавить("5414");
	МассивСтрокСКодамОКЗ.Добавить("5419");
	МассивСтрокСКодамОКЗ.Добавить("6");
	МассивСтрокСКодамОКЗ.Добавить("611");
	МассивСтрокСКодамОКЗ.Добавить("612");
	МассивСтрокСКодамОКЗ.Добавить("613");
	МассивСтрокСКодамОКЗ.Добавить("621");
	МассивСтрокСКодамОКЗ.Добавить("622");
	МассивСтрокСКодамОКЗ.Добавить("7");
	МассивСтрокСКодамОКЗ.Добавить("71");
	МассивСтрокСКодамОКЗ.Добавить("711");
	МассивСтрокСКодамОКЗ.Добавить("712");
	МассивСтрокСКодамОКЗ.Добавить("713");
	МассивСтрокСКодамОКЗ.Добавить("72");
	МассивСтрокСКодамОКЗ.Добавить("721");
	МассивСтрокСКодамОКЗ.Добавить("722");
	МассивСтрокСКодамОКЗ.Добавить("723");
	МассивСтрокСКодамОКЗ.Добавить("73");
	МассивСтрокСКодамОКЗ.Добавить("731");
	МассивСтрокСКодамОКЗ.Добавить("732");
	МассивСтрокСКодамОКЗ.Добавить("74");
	МассивСтрокСКодамОКЗ.Добавить("741");
	МассивСтрокСКодамОКЗ.Добавить("742");
	МассивСтрокСКодамОКЗ.Добавить("75");
	МассивСтрокСКодамОКЗ.Добавить("751");
	МассивСтрокСКодамОКЗ.Добавить("752");
	МассивСтрокСКодамОКЗ.Добавить("753");
	МассивСтрокСКодамОКЗ.Добавить("754");
	МассивСтрокСКодамОКЗ.Добавить("8");
	МассивСтрокСКодамОКЗ.Добавить("81");
	МассивСтрокСКодамОКЗ.Добавить("811");
	МассивСтрокСКодамОКЗ.Добавить("812");
	МассивСтрокСКодамОКЗ.Добавить("813");
	МассивСтрокСКодамОКЗ.Добавить("814");
	МассивСтрокСКодамОКЗ.Добавить("815");
	МассивСтрокСКодамОКЗ.Добавить("816");
	МассивСтрокСКодамОКЗ.Добавить("817");
	МассивСтрокСКодамОКЗ.Добавить("818");
	МассивСтрокСКодамОКЗ.Добавить("82");
	МассивСтрокСКодамОКЗ.Добавить("83");
	МассивСтрокСКодамОКЗ.Добавить("831");
	МассивСтрокСКодамОКЗ.Добавить("832");
	МассивСтрокСКодамОКЗ.Добавить("833");
	МассивСтрокСКодамОКЗ.Добавить("834");
	МассивСтрокСКодамОКЗ.Добавить("835");
	МассивСтрокСКодамОКЗ.Добавить("9");
	МассивСтрокСКодамОКЗ.Добавить("91");
	МассивСтрокСКодамОКЗ.Добавить("92");
	МассивСтрокСКодамОКЗ.Добавить("93");
	МассивСтрокСКодамОКЗ.Добавить("94");
	МассивСтрокСКодамОКЗ.Добавить("95");
	МассивСтрокСКодамОКЗ.Добавить("96");

	Возврат МассивСтрокСКодамОКЗ;
	
КонецФункции

Функция ДанныеДляЗаполнениеФормы1Тпроф(ПараметрыОтчета)
	
	ТаблицаДанныхОтчета = Новый ТаблицаЗначений;
	ТаблицаДанныхОтчета.Колонки.Добавить("ДолжностьОКЗКод", Новый ОписаниеТипов("Строка"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ЧисленностьСписочногоСоставаБезДекрета", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("Вакансии", Новый ОписаниеТипов("Число"));
	
	// Расширение структуры настроек.
	ПараметрыОтчетаДляЗаполнения = СкопироватьКоллекцию(ПараметрыОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФорма1ТПроф", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат ТаблицаДанныхОтчета;
	КонецЕсли;
	ДолжностьОКЗКодГруппа = "";
	ЧисленностьСписочногоСоставаБезДекрета = 0;

	// Заполнение таблицы данных отчета.
	Для Каждого СтрокаОтчета Из СтрокаОрганизации.Строки Цикл
		Если Лев(СтрокаОтчета.ДолжностьОКЗКод, 1) = "1" 
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 1) = "6" 
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 1) = "7"
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 2) = "81"
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 2) = "83" Тогда
			КоличествоСимволовГруппировки = 3; 
		ИначеЕсли Лев(СтрокаОтчета.ДолжностьОКЗКод, 1) = "9" 
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 2) = "52" 
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 2) = "82" Тогда
			КоличествоСимволовГруппировки = 2;
		Иначе
			КоличествоСимволовГруппировки = 4;
		КонецЕсли;
		Если КоличествоСимволовГруппировки = 4 Тогда
			НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
			НоваяСтрока.ДолжностьОКЗКод = СтрокаОтчета.ДолжностьОКЗКод;
			НоваяСтрока.ЧисленностьСписочногоСоставаБезДекрета = Окр(СтрокаОтчета.ЧисленностьСписочногоСоставаБезДекрета, 1);
		Иначе
			Если ДолжностьОКЗКодГруппа= "" Тогда 
				ДолжностьОКЗКодГруппа = Лев(СтрокаОтчета.ДолжностьОКЗКод, КоличествоСимволовГруппировки);
			КонецЕсли;
			Если Лев(СтрокаОтчета.ДолжностьОКЗКод, КоличествоСимволовГруппировки) = ДолжностьОКЗКодГруппа Тогда
				ЧисленностьСписочногоСоставаБезДекрета = ЧисленностьСписочногоСоставаБезДекрета + СтрокаОтчета.ЧисленностьСписочногоСоставаБезДекрета;
			Иначе
				НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
				НоваяСтрока.ДолжностьОКЗКод = ДолжностьОКЗКодГруппа;
				НоваяСтрока.ЧисленностьСписочногоСоставаБезДекрета = Окр(ЧисленностьСписочногоСоставаБезДекрета, 1);
				ДолжностьОКЗКодГруппа = Лев(СтрокаОтчета.ДолжностьОКЗКод, КоличествоСимволовГруппировки);
				ЧисленностьСписочногоСоставаБезДекрета = СтрокаОтчета.ЧисленностьСписочногоСоставаБезДекрета;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ДолжностьОКЗКодГруппа <> "" Тогда
		НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
		НоваяСтрока.ДолжностьОКЗКод = ДолжностьОКЗКодГруппа;
		НоваяСтрока.ЧисленностьСписочногоСоставаБезДекрета = Окр(ЧисленностьСписочногоСоставаБезДекрета, 1);
	КонецЕсли;
	
	ДанныеОтчета = Новый ДеревоЗначений;

	ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ("РегламентированныйОтчетСтатистикаФорма1ТПроф", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);

	Вакансии = 0;
	ДолжностьОКЗКодГруппа = "";

	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат ТаблицаДанныхОтчета;
	КонецЕсли;

	// Заполнение таблицы данных отчета.
	Для Каждого СтрокаОтчета Из СтрокаОрганизации.Строки Цикл
		Если Лев(СтрокаОтчета.ДолжностьОКЗКод, 1) = "1" 
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 1) = "6" 
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 1) = "7"
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 2) = "81"
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 2) = "83" Тогда
			КоличествоСимволовГруппировки = 3; 
		ИначеЕсли Лев(СтрокаОтчета.ДолжностьОКЗКод, 1) = "9" 
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 2) = "52" 
			Или Лев(СтрокаОтчета.ДолжностьОКЗКод, 2) = "82" Тогда
			КоличествоСимволовГруппировки = 2;
		Иначе
			КоличествоСимволовГруппировки = 4;
		КонецЕсли;
		Если КоличествоСимволовГруппировки = 4 Тогда
			НоваяСтрока = ТаблицаДанныхОтчета.Найти(СтрокаОтчета.ДолжностьОКЗКод, "ДолжностьОКЗКод");
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
				НоваяСтрока.ДолжностьОКЗКод = СтрокаОтчета.ДолжностьОКЗКод;
			КонецЕсли;
			НоваяСтрока.Вакансии = Окр(СтрокаОтчета.Вакансии, 1);
		Иначе
			Если ДолжностьОКЗКодГруппа= "" Тогда 
				ДолжностьОКЗКодГруппа = Лев(СтрокаОтчета.ДолжностьОКЗКод, КоличествоСимволовГруппировки);
			КонецЕсли;
			Если Лев(СтрокаОтчета.ДолжностьОКЗКод, КоличествоСимволовГруппировки) = ДолжностьОКЗКодГруппа Тогда
				Вакансии = Вакансии + СтрокаОтчета.Вакансии;
			Иначе
				НоваяСтрока = ТаблицаДанныхОтчета.Найти(ДолжностьОКЗКодГруппа, "ДолжностьОКЗКод");
				Если НоваяСтрока = Неопределено Тогда
					НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
					НоваяСтрока.ДолжностьОКЗКод = ДолжностьОКЗКодГруппа;
				КонецЕсли;
				НоваяСтрока.Вакансии = Окр(Вакансии, 1);
				ДолжностьОКЗКодГруппа = Лев(СтрокаОтчета.ДолжностьОКЗКод, КоличествоСимволовГруппировки);
				Вакансии = СтрокаОтчета.Вакансии;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ДолжностьОКЗКодГруппа <> "" Тогда
		НоваяСтрока = ТаблицаДанныхОтчета.Найти(ДолжностьОКЗКодГруппа, "ДолжностьОКЗКод");
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
			НоваяСтрока.ДолжностьОКЗКод = ДолжностьОКЗКодГруппа;
		КонецЕсли;
		НоваяСтрока.Вакансии = Окр(Вакансии, 1);
	КонецЕсли;
	
	Возврат ТаблицаДанныхОтчета;
	
КонецФункции

Процедура ЗаполнитьСтруктуруДанныхФормы1Тпроф(СтруктураДанных, ТаблицаДанныхОтчета, ПрефиксСтроки, ВсегоСтрок, МассивСтрокСКодамОКЗ, СтрокиИсключения, ДанныеПоСтрокам)
	Для Сч = 2 По ВсегоСтрок Цикл
		ТекстСтроки = ПрефиксСтроки + Формат(Сч,"ЧЦ=3; ЧДЦ=0; ЧВН=");
		ДолжностьОКЗКод = МассивСтрокСКодамОКЗ[Сч-1];
		СтрокаДанных = ?(СтрокиИсключения.Найти(Сч) <> Неопределено, Неопределено, ТаблицаДанныхОтчета.Найти(ДолжностьОКЗКод, "ДолжностьОКЗКод"));
		Для Каждого Строка Из ДанныеПоСтрокам Цикл
			КодПоказателя = ТекстСтроки + Строка.Ключ;
			Если СтрокаДанных <> Неопределено Тогда
				СтруктураДанных.Вставить(КодПоказателя, СтрокаДанных[Строка.Значение]);
			Иначе
				СтруктураДанных.Вставить(КодПоказателя, 0);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Форма1Тчзп

Процедура ДобавитьПоказателиФормы1Тчзп_2019(ПоказателиОтчета)
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКВЭД", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКФС", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	ИндексТекущейСтроки = 2;
	
	Пока ИндексТекущейСтроки < 10 Цикл
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "02", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "07", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "08", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "09", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "10", Истина, Истина);
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПоказателиФормы1Тчзп_2020(ПоказателиОтчета)
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКВЭД", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКФС", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	ИндексТекущейСтроки = 2;
	
	Пока ИндексТекущейСтроки < 10 Цикл
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000010100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "02", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000010100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000010100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000010100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "07", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000010100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "08", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000010100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "09", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000010100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "10", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000010100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "11", Истина, Истина);
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		
	КонецЦикла;

КонецПроцедуры

Функция ОписаниеПоказателейОтчета_СтатистикаФорма1Тчзп_2019()
	ОписаниеПоказателейОтчета = Новый ТаблицаЗначений;
	ОписаниеПоказателейОтчета.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ТипКолонки", Новый ОписаниеТипов("ОписаниеТипов"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	
	ОписаниеПоказателейОтчета.Индексы.Добавить("ИмяКолонки");
	
	// Колонки для общих данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НаименованиеОКВЭД2";
	ОписаниеПоказателя.ТипКолонки  = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П01##02";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "КодОКВЭД2";
	ОписаниеПоказателя.ТипКолонки  = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П01##04";
	
	// Колонки для кадровых данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "СредняяЧисленностьЗаПериодСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01##05";
		
	// Колонки для зарплатных данных за месяц начисления.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "НачисленоРаботникамСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01##07";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "НачисленоВнешнимСовместителям";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01##08";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "НачисленоРаботникамПоДоговорамГПХ";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01##09";
	
	// Колонки для зарплатных данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "НачисленияСоциальногоХарактера";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01##10";
	
	Возврат ОписаниеПоказателейОтчета;
КонецФункции

Функция ОписаниеПоказателейОтчета_СтатистикаФорма1Тчзп_2020()
	ОписаниеПоказателейОтчета = Новый ТаблицаЗначений;
	ОписаниеПоказателейОтчета.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ТипКолонки", Новый ОписаниеТипов("ОписаниеТипов"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	
	ОписаниеПоказателейОтчета.Индексы.Добавить("ИмяКолонки");
	
	// Колонки для общих данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "НаименованиеОКВЭД2";
	ОписаниеПоказателя.ТипКолонки  = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П00001010##01";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки  = "КодОКВЭД2";
	ОписаниеПоказателя.ТипКолонки  = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П00001010##02";
	
	// Колонки для кадровых данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "СредняяЧисленностьЗаПериодСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П00001010##04";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П00001010##05";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "СредняяЧисленностьЗаПериодДоговорников";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П00001010##06";
	
	// Колонки для зарплатных данных за месяц начисления.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "НачисленоРаботникамСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П00001010##08";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "НачисленоВнешнимСовместителям";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П00001010##09";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "НачисленоРаботникамПоДоговорамГПХ";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П00001010##10";
	
	// Колонки для зарплатных данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолонки   = "НачисленияСоциальногоХарактера";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П00001010##11";
	
	Возврат ОписаниеПоказателейОтчета;
КонецФункции

Процедура ЗаполнитьПоказателиФормы1Тчзп_2019(ПараметрыОтчета, Контейнер)
	
	// Подготовка настроек вывода данных отчета.
	ОписаниеПоказателейОтчета = ОписаниеПоказателейОтчета_СтатистикаФорма1Тчзп_2019();
	
	// Получение данных отчета.
	ДанныеОтчета = ДанныеОтчета_СтатистикаФормаП4_2017Кв1(ОписаниеПоказателейОтчета, ПараметрыОтчета);
	
	// Вывод данных отчета.
	Попытка
	
		СтруктураПоказателей = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		КодыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация,"КодОКВЭД2,КодОКФС", Истина);
		СтруктураПоказателей.ОргКодОКВЭД = КодыОрганизации.КодОКВЭД2;
		СтруктураПоказателей.ОргКодОКФС = КодыОрганизации.КодОКФС;
		Количество = ДанныеОтчета.Количество();
		Для Номер = 1 По 9 Цикл // Выводится 9 строк.
			Если Номер > Количество Тогда
				СтрокаТаблицы = ДанныеОтчета.Добавить(); // Если данных нет, то заполняются пустые значения.
			Иначе
				СтрокаТаблицы = ДанныеОтчета[Номер-1];
			КонецЕсли;
			ПредставлениеНомера = Формат(Номер+1, "ЧЦ=2; ЧВН="); // Нумерация начинается с "02".
			
			Для Каждого ОписаниеПоказателя Из ОписаниеПоказателейОтчета Цикл
				Значение = СтрокаТаблицы[ОписаниеПоказателя.ИмяКолонки];
				ПутьКДанным = СтрЗаменить(ОписаниеПоказателя.ПутьКДанным, "##", ПредставлениеНомера);
				СтруктураПоказателей[ПутьКДанным] = Значение;
			КонецЦикла;
		КонецЦикла;
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

КонецПроцедуры

Процедура ЗаполнитьПоказателиФормы1Тчзп_2020(ПараметрыОтчета, Контейнер)
	
	// Подготовка настроек вывода данных отчета.
	ОписаниеПоказателейОтчета = ОписаниеПоказателейОтчета_СтатистикаФорма1Тчзп_2020();
	
	// Получение данных отчета.
	ДанныеОтчета = ДанныеОтчета_СтатистикаФормаП4_2017Кв1(ОписаниеПоказателейОтчета, ПараметрыОтчета);
	
	// Вывод данных отчета.
	Попытка
	
		СтруктураПоказателей = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		Количество = ДанныеОтчета.Количество();
		Для Номер = 1 По 9 Цикл // Выводится 9 строк.
			Если Номер > Количество Тогда
				СтрокаТаблицы = ДанныеОтчета.Добавить(); // Если данных нет, то заполняются пустые значения.
			Иначе
				СтрокаТаблицы = ДанныеОтчета[Номер-1];
			КонецЕсли;
			ПредставлениеНомера = Формат(Номер+1, "ЧЦ=2; ЧВН="); // Нумерация начинается с "02".
			
			Для Каждого ОписаниеПоказателя Из ОписаниеПоказателейОтчета Цикл
				Значение = СтрокаТаблицы[ОписаниеПоказателя.ИмяКолонки];
				ПутьКДанным = СтрЗаменить(ОписаниеПоказателя.ПутьКДанным, "##", ПредставлениеНомера);
				СтруктураПоказателей[ПутьКДанным] = Значение;
			КонецЦикла;
		КонецЦикла;
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Порядок заполнения отчета устарел, рекомендуем обновить конфигурацию.%1'"), Символы.ПС);
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет не заполнен.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецОбласти