////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль РаботаС1СДокументооборот: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
// 
// Параметры:
//  Обработчики - Соответствие:
//    * Ключ     - Строка - в формате "<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>".
//                   Символ '*'используется в конце имени параметра сеанса и обозначает,
//                   что один обработчик будет вызван для инициализации всех параметров сеанса
//                   с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотВерсияСервиса",
		"ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИмяПользователя",
		"ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотПароль",
		"ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотПарольИзвестен",
		"ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС",
		"ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.РегламентныеЗадания

// Определяет зависимости регламентных заданий и их дополнительные свойства.
//
// Параметры:
//  Настройки - ТаблицаЗначений:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ - Булево - если регламентное задание зависит более чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево
//                                              - Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - Неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево
//                                  - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - Неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево
//                                      - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - Неопределено.
//    * ДоступноВМоделиСервиса - Булево
//                             - Неопределено - Ложь, если необходимо блокировать выполнение регламентного
//        задания (в т.ч. задания очереди) в информационной базе с включенным использованием разделителя.
//        Значение Неопределено трактуется как Истина.
//        По умолчанию - Неопределено.
//    * РаботаетСВнешнимиРесурсами - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюС1СДокументооборот;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Выполняет запрос к сервису, превращая сообщения об ошибках в вид, понятный пользователю.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Запрос - ОбъектXDTO - выполняемый запрос.
//
// Возвращаемое значение:
//   ОбъектXDTO - результат выполнения запроса.
//
Функция ВыполнитьЗапрос(Прокси, Запрос) Экспорт
	
	Попытка
		Результат = Прокси.execute(Запрос);
		Возврат Результат;
	Исключение
		Инфо = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
		// По известным видам ошибок изменим текст сообщения.
		Если Найти(КраткоеПредставлениеОшибки, НСтр("ru = 'Аутентификация пользователя не выполнена'")) <> 0 Тогда
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
			КраткоеПредставлениеОшибки = НСтр("ru = 'Неверное имя пользователя или пароль. Проверьте имя
				|и пароль в настройках авторизации в 1С:Документообороте.'");
		// По неизвестным видам ошибок превратим HTML в простой текст.
		ИначеЕсли Найти(КраткоеПредставлениеОшибки, "<html>") <> 0 Тогда
			HTMLДокумент = Новый ФорматированныйДокумент;
			HTMLДокумент.УстановитьHTML(КраткоеПредставлениеОшибки, Новый Структура);
			КраткоеПредставлениеОшибки = HTMLДокумент.ПолучитьТекст();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение КраткоеПредставлениеОшибки;
	КонецПопытки;
	
КонецФункции

// Устанавливает параметры сеанса по массиву имен.
//
// Параметры:
//   ИменаПараметров - Массив - массив строк с именами параметров сеанса к установке.
//
Процедура УстановитьПараметрыСеансаПоМассивуИмен(ИменаПараметров) Экспорт
	
	Если ТипЗнч(ИменаПараметров) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		УстановитьПараметрыСеанса(ИмяПараметра, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметры сеанса работы с подсистемой "Интеграция с 1С:Документооборотом".
//
// Параметры:
//   ИмяПараметра - Строка
//   УстановленныеПараметры - Массив из Строка
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотПарольИзвестен" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотПарольИзвестен");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотПароль" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотПароль");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИмяПользователя" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИмяПользователя");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотВерсияСервиса" Тогда
		
		Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()
			Или ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
			
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
			
		Иначе
			
			#Если ВнешнееСоединение Тогда
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				УстановитьВерсиюСервиса(Неопределено,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
			Иначе // получим версию сервиса асинхронно, в фоновом задании
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Информация,,,
					НСтр("ru = 'Начато получение версии сервиса'",
						ОбщегоНазначения.КодОсновногоЯзыка()));
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор));
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
				ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = МассивПараметров[0];
				ФоновыеЗадания.Выполнить("ИнтеграцияС1СДокументооборот.УстановитьВерсиюСервиса", МассивПараметров);
			КонецЕсли;
			#Иначе
			Если ЭтоЗадание() Тогда
				УстановитьВерсиюСервиса(Неопределено,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
			Иначе // получим версию сервиса асинхронно, в фоновом задании
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Информация,,,
					НСтр("ru = 'Начато получение версии сервиса'",
						ОбщегоНазначения.КодОсновногоЯзыка()));
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор));
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
				ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = МассивПараметров[0];
				ФоновыеЗадания.Выполнить("ИнтеграцияС1СДокументооборот.УстановитьВерсиюСервиса", МассивПараметров);
			КонецЕсли;
			#КонецЕсли
			
		КонецЕсли;
		
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотВерсияСервиса");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Получает версию сервиса из параметров сеанса, возможно, инициируя ее получение в фоновом задании.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, установленный для прокси таймаут в секундах,
//     в течение которого клиент может ожидать успешного подключения или ответа о недоступности сервиса.
//
// Возвращаемое значение:
//   Строка - версия сервиса.
//
Функция ВерсияСервиса(Таймаут = Неопределено) Экспорт
	
	Таймаут = ТаймаутСервиса();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот") Тогда
		Возврат "0.0.0.0";
	КонецЕсли;
	
	ВерсияСервиса = ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса;
	Если ЭтоАдресВременногоХранилища(ВерсияСервиса) Тогда
		ВерсияСервиса = ПолучитьИзВременногоХранилища(ВерсияСервиса);
	КонецЕсли;
	
	Возврат ВерсияСервиса;
	
КонецФункции

// Устанавливает версию сервиса в параметрах сеанса. Вызывается напрямую или как фоновое задание.
//
// Параметры:
//   АдресВХранилище - Строка - адрес во временном хранилище для помещения версии сервиса (для ФЗ).
//                   - Неопределено - версию сервиса следует установить сразу в параметры сеанса.
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - истина, если используется аутентификация ОС (8.3.7 и выше).
//
Процедура УстановитьВерсиюСервиса(АдресВХранилище, ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС) Экспорт
	
	ВерсияСервиса = ПолучитьВерсиюВызовомСервиса(ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
	
	Если АдресВХранилище = Неопределено Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = ВерсияСервиса;
	Иначе
		ПоместитьВоВременноеХранилище(ВерсияСервиса, АдресВХранилище);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Завершено получение версии сервиса'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Добавляет команды Документооборота на форму объекта при создании на сервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		Возврат;
	КонецЕсли;
	
	Если МестоРазмещенияКоманд = Неопределено И Форма.Элементы.Найти("Список") <> Неопределено
			И (СтрНайти(Форма.ИмяФормы, "ФормаСписка") <> 0 Или СтрНайти(Форма.ИмяФормы, "ФормаВыбора") <> 0) Тогда
		Для Каждого ЭлементКомПанели Из Форма.Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементКомПанели) = Тип("ГруппаФормы") Тогда
				Для Каждого ЭлементГруппы Из ЭлементКомПанели.ПодчиненныеЭлементы Цикл
					Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы")
							И (ЭлементГруппы.Заголовок = НСтр("ru = 'Создать на основании'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Органайзер'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Печать'")) Тогда
						МестоРазмещенияКоманд = ЭлементКомПанели;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МестоРазмещенияКоманд <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Переместим команды создания на основании вниз.
	Если Форма.Элементы.Найти("ФормаСоздатьНаОсновании") <> Неопределено Тогда
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс")
			<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьПисьмо")
			<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьПисьмо,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
	КонецЕсли;
	
	// Сохраним тип и идентификатор объекта-основания.
	Если Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО")
			И Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО") Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Форма["ИнтеграцияС1СДокументооборотом_ТипОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ТипОбъектаДО;
		Форма["ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО;
		
	КонецЕсли;
	
	// Сохраним идентификатор связанного объекта ДО.
	Если Форма.Параметры.Свойство("Основание")
			И ТипЗнч(Форма.Параметры.Основание) = Тип("Структура") Тогда
		Основание = Форма.Параметры.Основание;
		Если Основание.Свойство("Объект1СДокументооборота") Тогда
			КомандаФормы = Форма.Команды.Добавить("ИдентификаторОбъектаДО");
			КомандаФормы.Действие = Основание.Объект1СДокументооборота.ID;
		КонецЕсли;
	КонецЕсли;
	
	// Исключения не должны делать невозможным открытие форм интегрируемых объектов.
	Попытка
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты1СДокументооборота") Тогда
			// Хронометраж.
			Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP", Истина) Тогда
				ДобавитьКомандуПереключитьХронометраж(Форма, МестоРазмещенияКоманд);
				ДобавитьКомандуУказатьТрудозатраты(Форма, МестоРазмещенияКоманд);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
	КонецПопытки;
	
	Попытка
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота")
				И НужноВыводитьКомандуПрисоединенныхФайловДО(Форма) Тогда
			ДобавитьКомандуФайлы(Форма, МестоРазмещенияКоманд);
		КонецЕсли;
	Исключение
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при создании форм интеграции, размещаемых на рабочем столе. Позволяет отказаться от их создания при работе
// в неразделенном сеансе или при выполнении обновления ИБ.
//
Процедура ПриСозданииНаСервереФормРазмещаемыхНаРабочемСтоле(Отказ) Экспорт
	
	// Проверим необходимость показа формы на рабочем столе.
	Если ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыКлиента = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере();
	Если ПараметрыКлиента.Получить("СкрытьРабочийСтолПриНачалеРаботыСистемы") <> Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Помещает в дополнительные свойства идентификатор объекта-основания. Вызывается перед записью объекта.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма записываемого объекта.
//   Объект - ДокументОбъект, СправочникОбъект - записываемый объект.
//   ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	// Команда используется для передачи идентификатора объекта ДО при создании на основании.
	КомандаИдентификатор = Форма.Команды.Найти("ИдентификаторОбъектаДО");
	Если КомандаИдентификатор <> Неопределено Тогда
		Объект.ДополнительныеСвойства.Вставить("ИдентификаторОбъектаДО",
			КомандаИдентификатор.Действие);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возврат WEB-сервиса. В случае возврата объекта типа DMError вызывает исключение.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Ответ - ОбъектXDTO - проверяемый результат вызова сервиса.
//
Процедура ПроверитьВозвратВебСервиса(Прокси, Ответ) Экспорт
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		
		ТекстОшибки = СокрЛП(Ответ.description);
		
		// Запишем в ЖР полный текст ошибки.
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(Ответ.subject),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		ВызватьИсключение
			Ответ.subject + ":" + Символы.ПС + ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит объекта XDTO по объекту ИС.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   ОбъектИС - ЛюбаяСсылка - источник заполнения.
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, ОбъектИС) Экспорт
	
	ОбъектXDTO.name = Строка(ОбъектИС);
	ОбъектXDTO.objectID = СоздатьObjectID(Прокси, "", "");
	
	ВнешнийОбъект = СоздатьОбъект(Прокси, "ExternalObject");
	ПолноеИмя = ОбъектИС.Метаданные().ПолноеИмя();
	Если Найти(ПолноеИмя, "Перечисление.") > 0 Тогда
		ВнешнийОбъект.ID = ОбщегоНазначения.ИмяЗначенияПеречисления(ОбъектИС);
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = Строка(ОбъектИС);
	Иначе
		ВнешнийОбъект.ID = Строка(ОбъектИС.УникальныйИдентификатор());
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = Строка(ОбъектИС);
	КонецЕсли;
	ОбъектXDTO.externalObject = ВнешнийОбъект;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, ОбъектИС);
	
КонецПроцедуры

// Заполняет свойства объекта-приемника по объекту-источнику.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Приемник - ОбъектXDTO - заполняемый объект.
//   Источник - ОбъектXDTO - источник данных заполнения.
//
Процедура ЗаполнитьЗначенияСвойствXDTO(Прокси, Приемник, Источник) Экспорт
	
	Для Каждого Свойство Из Источник.Свойства() Цикл
		
		СвойствоПриемника = Приемник.Свойства().Получить(Свойство.Имя);
		Если СвойствоПриемника <> Неопределено
				И (Источник.Установлено(Свойство.Имя) Или СвойствоПриемника.НижняяГраница <> 0) Тогда
			
			Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
				ОбъектноеСвойство = СоздатьОбъект(Прокси, Свойство.Тип.Имя);
				ЗаполнитьЗначенияСвойствXDTO(Прокси, ОбъектноеСвойство, Источник[Свойство.Имя]);
				Приемник[Свойство.Имя] = ОбъектноеСвойство;
				
			ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
				СписокПриемника = Приемник[Свойство.Имя]; // СписокXDTO
				Для Каждого Элемент Из Источник[Свойство.Имя] Цикл
					НовыйЭлемент = СоздатьОбъект(Прокси,Свойство.Тип.Имя);
					ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйЭлемент, Элемент);  
					СписокПриемника.Добавить(НовыйЭлемент);
				КонецЦикла;
				
			Иначе
				Приемник[Свойство.Имя] = Источник[Свойство.Имя];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает объект XDTO исходящего письма, заполненный по умолчанию.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Предмет - Структура - описание предмета (ID, type).
//
// Возвращаемое значение:
//   ОбъектXDTO - новое исходящее письмо.
//
Функция НовоеИсходящееПисьмо(Прокси, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewEMailRequest");
		
	Запрос.type = "DMOutgoingEMail";
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.targetID.ID = Предмет.ID;
		Запрос.targetID.type = Предмет.type;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Если ПроверитьТип(Прокси, Ответ, "DMGetNewEMailResponse") Тогда
		Возврат Ответ.object;
	Иначе
		ВызватьИсключение НСтр("ru = 'Эта версия 1С:Документооборота не поддерживает создание исходящих писем'");
	КонецЕсли;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//   Строка - Строка - текст с разделителями;
//   Разделитель - Строка - разделитель строк текста, минимум 1 символ;
//   ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//     Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//         Для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//         включаются в результат.
//         Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//         случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//         при других разделителях результатом функции будет пустой массив.
//
// Возвращаемое значение:
//   Массив - массив строк.
//
// Пример:
//	РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//	РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//	РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//	РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//	РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//	РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
		Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Создает прокси веб-сервиса Документооборота с настройками авторизации из параметров сеанса или, если это
// невозможно, например, при создании прокси в фоновом задании, с настройками, переданными напрямую.
//
// Параметры:
//   ВызыватьИсключение - Булево - Истина, если при невозможности получения следует вызвать исключение.
//   ИмяПользователя - Строка - имя пользователя ДО, или
//                   - Неопределено - признак необходимости получить имя, сохраненное в параметрах сеанса.
//   Пароль - Строка - пароль пользователя ДО, или
//          - Неопределено - признак необходимости получить пароль, сохраненное в параметрах сеанса.
//   ИспользуетсяАутентификацияОС - Булево - признак необходимости использовать аутентификацию ОС (8.3.7 и выше), или
//                                - Неопределено - признак необходимости получить этот признак из параметров сеанса.
//
// Возвращаемое значение:
//   WSПрокси, Неопределено - прокси веб-сервиса.
//
Функция ПолучитьПрокси(ВызыватьИсключение = Истина, ИмяПользователя = Неопределено, Пароль = Неопределено,
	ИспользуетсяАутентификацияОС = Неопределено) Экспорт
	
	// Получим настройки авторизации из параметров сеанса, если они не переданы параметрами функции.
	Если ИспользуетсяАутентификацияОС = Неопределено Тогда 
		ИспользуетсяАутентификацияОС = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС;
	КонецЕсли;
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПользователя) И Не ИспользуетсяАутентификацияОС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Пароль = Неопределено Тогда
		Если Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен И Не ИспользуетсяАутентификацияОС Тогда
			Возврат Неопределено;
		КонецЕсли;
		Пароль = ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль;
	КонецЕсли;
	
	МестоположениеWSDL = Константы.АдресВебСервиса1СДокументооборот.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL)
			И Прав(МестоположениеWSDL, 1) <> "/"
			И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	
	// При необходимости создадим защищенное соединение. Используем сертификаты из хранилища
	// Windows, если это имеет смысл для текущей платформы.
	ЭтоСоединениеSSL = СтрНачинаетсяС(МестоположениеWSDL, "https");
	Если ЭтоСоединениеSSL Тогда
		Если СерверРаботаетПодWindows() Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
				Новый СертификатКлиентаWindows(),
				Новый СертификатыУдостоверяющихЦентровWindows());
		Иначе
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		КонецЕсли;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриПолученииWSПрокси(ИнтернетПрокси);
	
	Попытка
		Определения = Новый WSОпределения(МестоположениеWSDL + "ws/dm.1cws?wsdl",
			ИмяПользователя,
			Пароль,
			ИнтернетПрокси,
			ТаймаутСервиса(),
			ЗащищенноеСоединение,
			ИспользуетсяАутентификацияОС);
	Исключение
		Определения = Неопределено;
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Определения = Неопределено Тогда
		Попытка
			Определения = Новый WSОпределения(МестоположениеWSDL + "ws/DMService?wsdl",
				ИмяПользователя,
				Пароль,
				ИнтернетПрокси,
				ТаймаутСервиса(),
				ЗащищенноеСоединение,
				ИспользуетсяАутентификацияОС);
		Исключение
			Определения = Неопределено;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Определения = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения к 1С:Документообороту.
				|
				|Возможно, не прошла авторизация, указан неверный адрес веб-сервиса 
				|или база 1С:Документооборота не опубликована на веб-сервере.
				|
				|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Прокси = Новый WSПрокси(Определения,
			"http://www.1c.ru/dm",
			"DMService",
			"DMServiceSoap",
			ИнтернетПрокси,
			ТаймаутСервиса(),
			ЗащищенноеСоединение,,
			ИспользуетсяАутентификацияОС);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(Инфо));
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения к 1С:Документообороту.
				|
				|Возможно, не прошла авторизация, указан неверный адрес веб-сервиса 
				|или база 1С:Документооборота не опубликована на веб-сервере.
				|
				|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
		
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции

// Возвращает таймаут прокси веб-сервиса Документооборота, возможно, переопределенный в настройках.
//
// Возвращаемое значение:
//   Число - таймаут в секундах.
//
Функция ТаймаутСервиса() Экспорт
	
	Таймаут = 20;
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииТаймаутаСервиса(Таймаут);
	
	Возврат Таймаут;
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен "http://www.1c.ru/dm".
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ТипОбъекта - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция СоздатьОбъект(Прокси, ТипОбъекта) Экспорт
	
	Если Прокси = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Интеграция с 1С:Документооборотом не настроена, или сервис
			|1С:Документооборота недоступен. Обратитесь к администратору.'");
	КонецЕсли;
	
	НовыйОбъект = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", ТипОбъекта));
	Если СвойствоСуществует(НовыйОбъект, "dataBaseID") Тогда
		НовыйОбъект.dataBaseID = ИнтеграцияС1СДокументооборотПовтИсп.ИдентификаторБазыДанных();
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции

// Создает объект DMObjectID.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор объекта XDTO
//   type - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция СоздатьObjectID(Прокси, ID, type) Экспорт
	
	objectID = СоздатьОбъект(Прокси, "DMObjectID");
	objectID.ID = ID;
	objectID.type = type;
	
	Возврат objectID;
	
КонецФункции

// Проверяет тип объекта XDTO.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект
//   Тип - Строка - имя типа для проверки
//
// Возвращаемое значение:
//   Булево - Истина если объект является объектом указанного типа и Ложь в противном случае.
//
Функция ПроверитьТип(Прокси, ОбъектXDTO, Тип) Экспорт
	
	Если ОбъектXDTO.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", Тип) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет значение на объектный тип, содержащий уникальный идентификатор.
//
// Параметры:
//   Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//   Булево - Признак наличия у объекта уникального идентификатора.
//
Функция ЕстьУникальныйИдентификатор(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тип = ТипЗнч(Значение);
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

// Проверяет, является ли свойство объектным, т.е. наследуется от типа DMObject.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - объект, содержащий проверяемое свойство
//   ИмяСвойстваXDTO - Строка - имя проверяемого свойства
//
// Возвращаемое значение:
//   Булево - Истина, в случае, если свойство является потомком типа DMObject, иначе Ложь
//
Функция ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
	ТипРодитель = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject");
	
	Возврат ТипЗнч(ТипСвойства) = Тип("ТипОбъектаXDTO") И ТипРодитель.ЭтоПотомок(ТипСвойства);
	
КонецФункции

// Проверяет, является ли значение объектным, т.е. наследуется от типа DMObject.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//   Булево - Истина, в случае, если значение является потомком типа DMObject, иначе Ложь.
//
Функция ЭтоОбъектноеЗначение(Прокси, Значение) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектныйТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject");
	Возврат ОбъектныйТип.ЭтоПотомок(Значение.Тип());
	
КонецФункции

// Возвращает ссылки на объекты этой конфигурации по информации о них в объекте ДО.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, Структура - потомок DMObject, объект ДО. Или структура:
//     * ID - Строка - идентификатор внешнего объекта по данным 1С:Документооборота;
//     * type - Строка - тип внешнего объекта по данным 1С:Документооборота.
//
// Возвращаемое значение:
//   Массив - массив ссылок на связанные объекты этой конфигурации.
//
Функция СсылкиПоВнешнимОбъектам(ОбъектXDTO) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектXDTO) = Тип("Структура") Тогда
		ВнешниеОбъекты = Новый Массив;
		ВнешниеОбъекты.Добавить(ОбъектXDTO);
		
	ИначеЕсли СвойствоУстановлено(ОбъектXDTO, "externalObjects") Тогда
		ВнешниеОбъекты = ОбъектXDTO.externalObjects;
		
	ИначеЕсли СвойствоУстановлено(ОбъектXDTO, "externalObject") Тогда
		ВнешниеОбъекты = Новый Массив;
		ВнешниеОбъекты.Добавить(ОбъектXDTO.externalObject);
		
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ВнешнийОбъект Из ВнешниеОбъекты Цикл
	
		Попытка
			Ссылка = СсылкаИзUUID(ВнешнийОбъект.type, ВнешнийОбъект.ID);
		Исключение
			// Тип объекта не найден в текущей конфигурации.
			Продолжить;
		КонецПопытки;
		
		Если Ссылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ " + ВнешнийОбъект.type + "
			|ГДЕ
			|	Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает доступность функционала версии web-сервиса Документооборота.
//
// Параметры:
//   ВерсияСервиса - Строка - версия web-сервиса Документооборота, содержащая требуемый функционал.
//   Оптимистично - Булево - признак необходимости вернуть Истина, если версия сервиса пока неизвестна.
//
// Возвращаемое значение:
//   Булево - Истина, если web-сервис Документооборота указанной версии доступен.
//
Функция ДоступенФункционалВерсииСервиса(ВерсияСервиса = "", Оптимистично = Ложь) Экспорт
	
	Если Оптимистично И Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекущаяВерсия = ВерсияСервиса();
	Если ТекущаяВерсия = "0.0.0.0" Тогда // ошибка подключения
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(ТекущаяВерсия) Тогда // в процессе получения
		Если Оптимистично Тогда 
			Возврат Истина; // пока не знаем, но, скорее всего, доступна
		Иначе
			Возврат Ложь; // пока не знаем, но, скорее всего, недоступна
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ВерсияСервиса) Тогда // нужна хоть какая-нибудь
		Возврат Истина;
	КонецЕсли;
	ОписаниеТекущейВерсии = РазложитьСтрокуВМассивПодстрок(ТекущаяВерсия, ".");
	Если ОписаниеТекущейВерсии.Количество() <> 5 Тогда
		// Старые версии не сообщают редакцию, а для этих версий она важна.
		// Оптимистично предположим КОРП.
		Если ТекущаяВерсия = "1.2.7.3" Или ТекущаяВерсия = "1.2.8.1" Тогда
			ОписаниеТекущейВерсии.Добавить("CORP");
		Иначе
			ОписаниеТекущейВерсии.Добавить("PROF");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВерсияНеМеньше(ОписаниеТекущейВерсии, ВерсияСервиса);
	
КонецФункции

// Получает объект из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - имя типа XDTO.
//   Ид - Строка - уникальный идентификатор объекта в Документообороте.
//   Колонки - Массив - необязательно, состав заполняемых колонок.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMRetrieveResponse.
//
Функция ПолучитьОбъект(Прокси, Тип, Ид, Колонки = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	objectID = СоздатьObjectID(Прокси, Ид, Тип);
	СписокОбъектов.Добавить(objectID);
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			ПолучаемыеПоля.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Получает объекты из документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из Структура:
//     * ID - Строка
//     * type - Строка
//   Колонки - Массив из Строка, Структура:
//     * ID - Строка
//     * type - Строка
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMRetrieveResponse
//
Функция ПолучитьОбъекты(Прокси, Объекты, Колонки = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	Для Каждого Объект Из Объекты Цикл
		objectID = СоздатьObjectID(Прокси, Объект.ID, Объект.type);
		СписокОбъектов.Добавить(objectID);
	КонецЦикла;
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			ПолучаемыеПоля.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Записывает изменения объекта в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объект - ОбъектXDTO - XDTO объект с сохраняемыми данными.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMUpdateResponse.
//
Функция ЗаписатьОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	СписокОбъектов = Запрос.objects; // СписокXDTO
	
	СписокОбъектов.Добавить(Объект);
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Записывает изменения объектов в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из ОбъектXDTO - массив XDTO объектов с сохраняемыми данными.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMUpdateResponse.
//
Функция ЗаписатьОбъекты(Прокси, Объекты) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	СписокОбъектов = Запрос.objects; // СписокXDTO
	
	Для Каждого Объект Из Объекты Цикл
		СписокОбъектов.Добавить(Объект);
	КонецЦикла;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

// Запрашивает ссылку на предопределенный объект Документооборота по заданному имени и типу.
//
// Параметры:
//   ТипОбъекта - Строка - Имя класса XDTO, предопределенный объект которого требуется получить.
//   ИмяПредопределенногоЭлемента - Строка - Имя предопределенного элемента.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMObject.
//
Функция ПредопределенноеЗначениеДО(ТипОбъекта, ИмяПредопределенногоЭлемента) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetPredefinedObjectRequest");
	Запрос.type = ТипОбъекта;
	Запрос.predefinedObjectName = ИмяПредопределенногоЭлемента;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат.result;
	
КонецФункции

// Помечает объект на удаление или снимает пометку.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Идентификатор - Строка - идентификатор помечаемого на удаление объекта.
//   Тип - Строка - тип помечаемого на удаление объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMDeleteResponse.
//
Функция ПометитьНаУдалениеСнятьПометку(Прокси, Идентификатор, Тип) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMDeleteRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	
	ObjectID = СоздатьObjectID(Прокси, Идентификатор, Тип);
	СписокОбъектов.Добавить(ObjectID);
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

// Создает новый объект в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объект - ОбъектXDTO - описание создаваемого объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMCreateResponse или DMError.
//
Функция СоздатьНовыйОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = Объект;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Получает заполненный по умолчанию объект из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - имя типа XDTO объекта.
//   Предмет - Структура - Используется для получения бизнес-процессов:
//     * ID - Строка - уникальный идентификатор объекта в Документооборот.
//     * type - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMGetNewObjectResponse.
//
Функция ПолучитьНовыйОбъект(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Если Предмет <> Неопределено Тогда
		Если Найти(Тип,"BusinessProcess") <> 0 Тогда
			Возврат НовыйБизнесПроцесс(Прокси, Тип, Предмет);
		ИначеЕсли Тип = "DMOutgoingEMail" Тогда
			Возврат НовоеИсходящееПисьмо(Прокси, Предмет);
		Иначе
			Возврат Неопределено
		КонецЕсли;
	Иначе
		Запрос = СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = Тип;
		
		Ответ = ВыполнитьЗапрос(Прокси, Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		Если ПроверитьТип(Прокси, Ответ, "DMGetNewObjectResponse") Тогда
			Возврат Ответ.object;
		КонецЕсли;
		
		Возврат Ответ;
		
	КонецЕсли;
	
КонецФункции

// Получает ссылку на объект по имени объекта конфигурации и ID.
//
// Параметры:
//   Тип - Строка - тип объекта конфигурации.
//   UUID - Строка - идентификатор объекта конфигурации.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект.
//
Функция СсылкаИзUUID(Тип, UUID) Экспорт
	
	СсылкаНаПотребителя = Неопределено;
	
	Если СтрНачинаетсяС(Тип, "Справочник.") Тогда
		СсылкаНаПотребителя = Справочники[СтрЗаменить(Тип, 
			"Справочник.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Документ.")Тогда
		СсылкаНаПотребителя = Документы[СтрЗаменить(Тип, 
			"Документ.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланСчетов.") Тогда
		СсылкаНаПотребителя = ПланыСчетов[СтрЗаменить(Тип,
			"ПланСчетов.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланВидовРасчета.") Тогда
		СсылкаНаПотребителя = ПланыВидовРасчета[СтрЗаменить(Тип, 
			"ПланВидовРасчета.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланВидовХарактеристик.") Тогда
		СсылкаНаПотребителя = ПланыВидовХарактеристик[СтрЗаменить(Тип, 
			"ПланВидовХарактеристик.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "БизнесПроцесс.") Тогда
		СсылкаНаПотребителя = БизнесПроцессы[СтрЗаменить(Тип, 
			"БизнесПроцесс.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Задача.") Тогда
		СсылкаНаПотребителя = Задачи[СтрЗаменить(Тип, 
			"Задача.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Перечисление.")
		И ЗначениеЗаполнено(UUID) Тогда
		СсылкаНаПотребителя = Перечисления[СтрЗаменить(Тип, 
			"Перечисление.", "")][UUID];
		
	КонецЕсли;
	
	Возврат СсылкаНаПотребителя;
	
КонецФункции

// Возвращает значение реквизита объекта ИС по значению реквизита объекта ДО.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//   ТипРеквизита - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизита - Строка - имя заполняемого реквизита ИС.
//   ТипОбъекта - Тип - тип заполняемого объекта ИС.
//   Объект - Произвольный - заполняемый объект ИС.
//   ЭтоДополнительноеСвойство - Булево - истина, если переданный объект является доп. свойством.
//   Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство-владелец.
//   ПараметрыВыбора - Соответствие - параметры выбора, где ключ - имя параметра вида "Отбор.Владелец",
//     значение - значение параметра (отбора).
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на найденный или созданный объект.
//
Функция ЗначениеРеквизитаПоОбъектуXDTO(ОбъектXDTO, ТипРеквизита, ИмяРеквизита = Неопределено, ТипОбъекта = Неопределено,
		Объект = Неопределено, ЭтоДополнительноеСвойство = Ложь, Свойство = Неопределено,
		ПараметрыВыбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
		Результат,
		ОбъектXDTO,
		ТипРеквизита,
		ИмяРеквизита,
		ТипОбъекта,
		Объект,
		ЭтоДополнительноеСвойство,
		Свойство,
		ПараметрыВыбора);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипРеквизита = Тип("Строка") Тогда
		Возврат ОбъектXDTO.name;
		
	ИначеЕсли ТипРеквизита = Тип("Число") Или ТипРеквизита = Тип("Дата") Или ТипРеквизита = Тип("Булево") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипРеквизита);
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		Возврат ОписаниеТипов.ПривестиЗначение(ОбъектXDTO.name);
		
	КонецЕсли;
	
	Если ОбъектXDTO.externalObject <> Неопределено Тогда
		Результат = СсылкаИзUUID(ОбъектXDTO.externalObject.type, ОбъектXDTO.externalObject.ID);
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Результат = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.
			СсылкаНаОбъектПоДаннымДокументооборота(ОбъектXDTO.objectID.ID, ОбъектXDTO.objectID.type, ТипРеквизита);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипРеквизита);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
		
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			
			// Возможно, соответствия созданы синхронизацией данных и унаследовали идентификаторы.
			УникальныйИдентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.objectID.ID);
			ВидСправочника = МетаданныеОбъекта.Имя;
			СсылкаПоИдентификатору = Справочники[ВидСправочника].ПолучитьСсылку(УникальныйИдентификатор);
			
			// Возможно исключение RLS.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Ссылка
				|ИЗ
				|	Справочник." + ВидСправочника + "
				|ГДЕ
				|	Ссылка = &СсылкаПоИдентификатору");
			Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
			
			Ошибка = Неопределено;
			Попытка
				Выборка = Запрос.Выполнить().Выбрать();
			Исключение
				Ошибка = ИнформацияОбОшибке();
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка);
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,
					СсылкаПоИдентификатору,
					ПредставлениеОшибки);
			КонецПопытки;
			
			Если Ошибка <> Неопределено Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					Результат = Строка(Выборка.Ссылка);
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Недостаточно прав для доступа к этому объекту (%1).
						|Обратитесь к администратору.'"),
						Результат);
					ВызватьИсключение ТекстСообщения; // Подробные сведения - в журнале регистрации.
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.Следующий() Тогда // объект найден
				
				Результат = Выборка.Ссылка;
				
			Иначе // продолжим поиск по другим реквизитам
				
				Если ЭтоДополнительноеСвойство
					И (ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
						Или ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
					Владелец = Свойство;
				ИначеЕсли ПараметрыВыбора <> Неопределено Тогда
					Владелец = ПараметрыВыбора["Отбор.Владелец"];
				Иначе
					Владелец = Неопределено;
				КонецЕсли;
				
				// Поиск по наименованию и другим реквизитам нельзя выполнять, если не определен
				// владелец для справочника со владельцами.
				Если МетаданныеОбъекта.Владельцы.Количество() = 0 Или Владелец <> Неопределено Тогда
					
					Результат = МенеджерОбъекта.НайтиПоНаименованию(ОбъектXDTO.name, Истина,, Владелец);
					
					Если Не ЗначениеЗаполнено(Результат) Тогда
						Если ПравоДоступа("Добавление", МетаданныеОбъекта) Тогда
							Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
							НовыйОбъект = Менеджер.СоздатьЭлемент(); // ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
							НовыйОбъект.Наименование = ОбъектXDTO.name;
							НовыйОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
							Если Владелец <> Неопределено Тогда
								НовыйОбъект.Владелец = Владелец;
							КонецЕсли;
							ИнтеграцияС1СДокументооборотПереопределяемый.ПриСозданииПоСсылке(
								НовыйОбъект,
								ОбъектXDTO,
								Объект);
							НовыйОбъект.Записать();
							Результат = НовыйОбъект.Ссылка;
							РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
								ОбъектXDTO.objectID.ID,
								ОбъектXDTO.objectID.type,
								Результат);
						Иначе
							ТекстСообщения = СтрШаблон(
								НСтр("ru = 'Недостаточно прав для создания новых элементов (%1).
								|Обратитесь к администратору.'"),
								МетаданныеОбъекта.Представление());
							ВызватьИсключение ТекстСообщения; // Подробные сведения - в журнале регистрации.
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеОбъекта) Тогда
			МетаданныеЗначения = МетаданныеОбъекта.ЗначенияПеречисления.
				Найти(ОбъектXDTO.objectID.ID); // ОбъектМетаданныхЗначениеПеречисления
			Если МетаданныеЗначения = Неопределено Тогда
				Для Каждого ЗначениеПеречисления Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
					Если ЗначениеПеречисления.Синоним = ОбъектXDTO.name Тогда
						МетаданныеЗначения = ЗначениеПеречисления;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МетаданныеЗначения <> Неопределено Тогда
				Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
				Результат = Менеджер[МетаданныеЗначения.Имя];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет указанный реквизит формы по свойству объекта XDTO.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, реквизит которой заполняется.
//   ИмяРеквизитаФормы - Строка - имя заполняемого реквизита.
//   ОбъектXDTO - ОбъектXDTO - источник данных заполнения.
//   ИмяСвойстваXDTO - Строка - имя свойства-источника данных.
//
Процедура ЗаполнитьРеквизитФормыИзXDTO(Форма, ИмяРеквизитаФормы, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	Если ОбъектXDTO.Установлено(ИмяСвойстваXDTO) Тогда
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда 
			Форма[ИмяРеквизитаФормы + "Тип"] = ЗначениеСвойстваXDTO.objectID.type;
			Форма[ИмяРеквизитаФормы + "ID"] = ЗначениеСвойстваXDTO.objectID.ID;
			Форма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO.name;
		Иначе	
			Форма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает объект XDTO, содержащий обновляемые изменения объекта.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеОбъекта - Структура - описание интегрированного объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO
//   Неопределено
//
Функция ПолучитьXDTOИзмененийИзОбъекта(Прокси, ДанныеОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторОбъектаДО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектыXDTO = ПолучитьОбъект(Прокси, ДанныеОбъекта.ТипОбъектаДО, ДанныеОбъекта.ИдентификаторОбъектаДО);
	Если ОбъектыXDTO.objects.Количество() = 0 Тогда
		ОбъектXDTO = СоздатьОбъект(Прокси, ДанныеОбъекта.ТипОбъектаДО);
	Иначе
		ОбъектXDTO = ОбъектыXDTO.objects[0];
	КонецЕсли;
	
	СписокФайлов = ОбъектXDTO.files; // СписокXDTO
	
	ОбъектXDTO.name = Строка(ДанныеОбъекта.Объект);
	
	ОбъектXDTO.objectID = СоздатьObjectID(Прокси,
		ДанныеОбъекта.ИдентификаторОбъектаДО,
		ДанныеОбъекта.ТипОбъектаДО);
	
	СтруктураРеквизитов = СтруктураРеквизитовЗаполняемогоОбъектаДО(ДанныеОбъекта.ТипОбъектаДО);
	
	НеОбновлятьПоПравилам = Новый Массив;
	Справочники.ПравилаИнтеграцииС1СДокументооборотом.ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу(
		ДанныеОбъекта.Объект,
		СтруктураРеквизитов,
		ДанныеОбъекта.ПравилоЗаполнения,
		Истина,
		НеОбновлятьПоПравилам);
	
	СоответствиеРеквизитов = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
		СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(ДанныеОбъекта.ТипОбъектаДО);
	
	Для Каждого СтрокаСоответствия Из СоответствиеРеквизитов Цикл
		Если НеОбновлятьПоПравилам.Найти(СтрокаСоответствия.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ОбъектXDTO,
			СтрокаСоответствия.Ключ,
			СтруктураРеквизитов,
			СтрокаСоответствия.Значение);
	КонецЦикла;
	
	Обработки.ИнтеграцияС1СДокументооборот.СформироватьДополнительныеСвойства(Прокси, ОбъектXDTO, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("Файлы") И СтруктураРеквизитов.Файлы.Количество() > 0 Тогда
		
		Для Каждого СтрокаФайла Из СтруктураРеквизитов.Файлы Цикл
			
			ФайлXDTO = СоздатьОбъект(Прокси,"DMFile");
			ФайлXDTO.objectID = СоздатьObjectID(Прокси, "", "DMFile");
			ФайлXDTO.name = "";
			
			ФайлXDTO.binaryData = СтрокаФайла.ДвоичныеДанные;
			ФайлXDTO.extension = СтрокаФайла.Расширение;
			ФайлXDTO.modificationDate = СтрокаФайла.ДатаСоздания;
			ФайлXDTO.modificationDateUniversal = СтрокаФайла.ДатаМодификацииУниверсальная;
			ФайлXDTO.name = СтрокаФайла.Наименование;
			ФайлXDTO.size = СтрокаФайла.Размер;
			
			СписокФайлов.Добавить(ФайлXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВнешнийОбъектXDTO = СоздатьОбъект(Прокси, "ExternalObject");
	ВнешнийОбъектXDTO.ID = Строка(ДанныеОбъекта.Объект.УникальныйИдентификатор());
	ВнешнийОбъектXDTO.type = ДанныеОбъекта.Объект.Метаданные().ПолноеИмя();
	ВнешнийОбъектXDTO.name = Строка(ДанныеОбъекта.Объект);
	ОбъектXDTO.externalObject = ВнешнийОбъектXDTO;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Обработчик подписки на событие ОбработкаЗаполнения для справочников.
//
// Параметры:
//   Источник - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//   ТекстЗаполнения - Строка
//                   - Неопределено
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияСправочники(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Объект1СДокументооборота") Тогда
		
		// Заполним реквизиты шапки.
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения.ЗначенияРеквизитов);
		
		// Заполним табличные части.
		Для Каждого ЗначениеРеквизита Из ДанныеЗаполнения.ЗначенияРеквизитов Цикл
			Если ТипЗнч(ЗначениеРеквизита.Значение) = Тип("Массив") Тогда
				Источник[ЗначениеРеквизита.Ключ].Очистить();
				Для Каждого Строка Из ЗначениеРеквизита.Значение Цикл
					ЗаполнитьЗначенияСвойств(Источник[ЗначениеРеквизита.Ключ].Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним дополнительные реквизиты.
		Для Каждого Строка Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
			НоваяСтрока = Источник.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик подписки на событие ОбработкаЗаполнения для документов.
//
// Параметры:
//   Источник - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокументы(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Объект1СДокументооборота") Тогда
		
		// Заполним реквизиты шапки.
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения.ЗначенияРеквизитов);
		
		// Заполним табличные части.
		Для Каждого ЗначениеРеквизита Из ДанныеЗаполнения.ЗначенияРеквизитов Цикл
			Если ТипЗнч(ЗначениеРеквизита.Значение) = Тип("Массив") Тогда
				Источник[ЗначениеРеквизита.Ключ].Очистить();
				Для Каждого Строка Из ЗначениеРеквизита.Значение Цикл
					ЗаполнитьЗначенияСвойств(Источник[ЗначениеРеквизита.Ключ].Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним дополнительные реквизиты.
		Если ДанныеЗаполнения.ДополнительныеРеквизиты.Количество() > 0
				И Источник.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
			ДополнительныеРеквизитыДокумента = Источник.ДополнительныеРеквизиты; // ТабличнаяЧасть
			Для Каждого Строка Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
				НоваяСтрока = ДополнительныеРеквизитыДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет существует ли свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство существует.
//
Функция СвойствоСуществует(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства) <> Неопределено);
	
КонецФункции

// Определяет было ли установлено свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство установлено.
//
Функция СвойствоУстановлено(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (СвойствоСуществует(ОбъектXDTO, ИмяСвойства) И ОбъектXDTO.Установлено(ИмяСвойства));
	
КонецФункции

// Проверяет наличие связанных объектов, если их не оказывается, получает сведения о них из Документооборота.
//
Процедура ПроверитьОбновитьДанныеСвязанныхОбъектов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект
		|ИЗ
		|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = СоздатьОбъект(Прокси, "DMGetLinkedObjectsRequest");
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	НаборЗаписей = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СоздатьНаборЗаписей();
	
	Для Каждого ОбъектXDTO Из Ответ.objects Цикл
		Объекты = СсылкиПоВнешнимОбъектам(ОбъектXDTO);
		Для Каждого Объект Из Объекты Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ИдентификаторОбъектаДО = ОбъектXDTO.objectID.ID;
			Запись.ТипОбъектаДО = ОбъектXDTO.objectID.type;
			Запись.Объект = Объект;
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Назначает новому документу идентификатор основания, если это возможно.
//
// Параметры:
//   Источник - ДокументОбъект - записываемый документ
//   Отказ - Булево - признак необходимости отказаться от записи
//   РежимЗаписи - РежимЗаписиДокумента - режим записи документа
//   РежимПроведения - РежимПроведенияДокумента - режим проведения документа
//
Процедура ИнтеграцияС1СДокументооборотПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСсылкуНовогоПередЗаписьюОбъекта(Источник);
	
КонецПроцедуры

// Назначает новому элементу справочника идентификатор основания, если это возможно.
//
// Параметры:
//   Источник - ДокументОбъект - записываемый документ
//   Отказ - Булево - признак необходимости отказаться от записи
//
Процедура ИнтеграцияС1СДокументооборотПередЗаписьюСправочника(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСсылкуНовогоПередЗаписьюОбъекта(Источник);
	
КонецПроцедуры

// Получает текущего пользователя 1С:Документооборота.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMUser или Неопределено.
//
Функция ТекущийПользовательДокументооборота() Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = СоздатьОбъект(Прокси, "DMGetCurrentUserRequest");
	Ответ = Прокси.execute(Запрос);
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Неопределено;
	Иначе
		Возврат Ответ.user;
	КонецЕсли;
	
КонецФункции

// Возвращает сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
// Возвращаемое значение:
//   Строка - сокращенное наименование конфигурации.
//
Функция СокращенноеНаименованиеКонфигурации() Экспорт
	
	СокращенноеНаименование = НСтр("ru = 'БИД (демо)'");
	
	ИнтеграцияС1СДокументооборотПереопределяемый.
		ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование);
	
	Возврат СокращенноеНаименование;
	
КонецФункции

// Определяет возможность использования аутентификации ОС платформой 1С:Предприятия.
// Возвращает Истина для версий 8.3.7 и старше под MS Windows, и Ложь в остальных случаях.
//
// Возвращаемое значение:
//   Булево
//
Функция ПоддерживаетсяАутентификацияОС() Экспорт
	
	Если Не СерверРаботаетПодWindows() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	Версия = СтрРазделить(СисИнфо.ВерсияПриложения, ".");
	
	Возврат (Число(Версия[0]) >= 8)
		И (Число(Версия[1]) >= 3)
		И (Число(Версия[2]) >= 7);
	
КонецФункции

// Возвращает Истина, если сервер работает под Windows, и Ложь в противном случае.
//
// Возвращаемое значение:
//   Булево
//
Функция СерверРаботаетПодWindows() Экспорт
	
	СисИнфо  = Новый СистемнаяИнформация;
	
	Возврат (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86)
		Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
КонецФункции

// Возвращает локализованное имя события журнала регистрации для интеграции с ДО.
//
// Параметры:
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//
// Возвращаемое значение:
//   Строка - Интеграция с 1С:Документооборотом
//        или Интеграция с 1С:Документооборотом.<ИмяСобытияВторогоУровня>.
//
Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Интеграция с 1С:Документооборотом'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Интеграция с 1С:Документооборотом'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции

// Начинает получение файлов связанных документов.
//
// Параметры:
//   СвязанныеДокументы - Массив из Структура:
//     * ID - Строка - идентификатор связанного документа.
//     * Тип - Строка - тип связанного документа.
//
// Возвращаемое значение:
//   Строка - адрес во временном хранилище, куда будет помещен результат.
//
Функция ПолучитьФайлыСвязанныхДокументов(СвязанныеДокументы) Экспорт
	
	КлючЗадания = Новый УникальныйИдентификатор;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, КлючЗадания);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(АдресВоВременномХранилище);
	МассивПараметров.Добавить(СвязанныеДокументы);
	МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя);
	МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
	
	ФоновыеЗадания.Выполнить(
		"ИнтеграцияС1СДокументооборот.ПолучитьФайлыСвязанныхДокументовАсинхронно",
		МассивПараметров, КлючЗадания, НСтр("ru = 'Получение файлов связанных документов'"));
		
	Возврат АдресВоВременномХранилище;
	
КонецФункции

// Асинхронно, в фоновом задании, получает файлы связанных документов.
//
// Параметры:
//   Адрес - Строка - адрес для результата выполнения во временном хранилище.
//   СвязанныеДокументы - Массив из Структура:
//     * ID - Строка - идентификатор связанного документа.
//     * Тип - Строка - тип связанного документа.
//   ИмяПользователя - Строка - имя пользователя ДО, сохраненного в настройках пользователя,
//     из сеанса которого инициирован асинхронный вызов.
//   Пароль - Строка - пароль этого пользователя.
//
Процедура ПолучитьФайлыСвязанныхДокументовАсинхронно(Адрес, СвязанныеДокументы, ИмяПользователя, Пароль) Экспорт
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = ИмяПользователя;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = Пароль;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Истина;
	
	Результат = Обработки.ИнтеграцияС1СДокументооборот.ПолучитьФайлыСвязанныхДокументов(СвязанныеДокументы);
	ПоместитьВоВременноеХранилище(Результат, Адрес);
	
КонецПроцедуры

// Возвращает расширение по типу файла сохраняемой печатной формы.
//
// Параметры:
//   ТипФайла - ПеречислениеСсылка.ТипыФайловСохраненияПечатныхФормОбъектов - тип сохраняемого файла.
//
// Возвращаемое значение:
//   Строка - расширение файла.
//
Функция РасширениеСохраняемойПечатнойФормы(ТипФайла) Экспорт
	
	Если ТипФайла = ПредопределенноеЗначение("Перечисление.ТипыФайловСохраненияПечатныхФормОбъектов.PDF_A_1") Тогда
		Возврат "pdf";
		
	ИначеЕсли ЗначениеЗаполнено(ТипФайла) Тогда
		Возврат НРег(ОбщегоНазначения.ИмяЗначенияПеречисления(ТипФайла));
		
	Иначе
		Возврат "";
		
	КонецЕсли
	
КонецФункции

// Возвращает тип файла сохраняемой печатной формы по умолчанию.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыФайловСохраненияПечатныхФормОбъектов - тип по умолчанию.
//
Функция ТипФайлаСохраняемойПечатнойФормыПоУмолчанию() Экспорт
	
	Возврат Перечисления.ТипыФайловСохраненияПечатныхФормОбъектов.PDF_A_1;
	
КонецФункции

// Получает список объектов по ссылкам из указанного объекта ИС, подходящих для автоматического 
// добавления связей (имеющих настроенные правила интеграции). Учитывает табличные части.
//
// Параметры:
//   СсылкаНаОбъектИС - ЛюбаяСсылка - объект ИС, связи к которому добавляются.
//
// Возвращаемое значение:
//   Массив - ссылки на подходящие объекты ИС.
//
Функция ПолучитьПодходящиеОбъектыДляДобавленияСвязей(СсылкаНаОбъектИС) Экспорт
	
	ПодходящиеОбъекты = Новый Массив;
	
	ТипыОбъектовСПравилами = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьТипыОбъектовСПравиламиИнтеграции(
		"DMInternalDocument, DMIncomingDocument, DMOutgoingDocument");
	Если ТипыОбъектовСПравилами.Количество() = 0 Тогда
		Возврат ПодходящиеОбъекты;
	КонецЕсли;
	
	МетаданныеОбъекта = СсылкаНаОбъектИС.Метаданные();
	
	ОбъектИС = Неопределено; // получим объект ниже при необходимости
	
	// Проверим реквизиты шапки.
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		ПодходитПоТипу = Ложь;
		Для Каждого ТипОбъектаСПравилами Из ТипыОбъектовСПравилами Цикл
			Если Реквизит.Тип.СодержитТип(ТипОбъектаСПравилами) Тогда
				ПодходитПоТипу = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПодходитПоТипу Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектИС = Неопределено Тогда
			ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
		КонецЕсли;
		
		ЗначениеРеквизитаИС = ОбъектИС[Реквизит.Имя];
		ЗначениеРеквизитаДОТипИС = ТипЗнч(ЗначениеРеквизитаИС);
		
		Если ТипыОбъектовСПравилами.Найти(ЗначениеРеквизитаДОТипИС) <> Неопределено
			И ЗначениеЗаполнено(ЗначениеРеквизитаИС) Тогда
			ПодходящиеОбъекты.Добавить(ЗначениеРеквизитаИС);
		КонецЕсли;
				
	КонецЦикла;
	
	// Проверим табличные части.
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			
			ПодходитПоТипу = Ложь;
			Для Каждого ТипОбъектаСПравилами Из ТипыОбъектовСПравилами Цикл
				Если Реквизит.Тип.СодержитТип(ТипОбъектаСПравилами) Тогда
					ПодходитПоТипу = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПодходитПоТипу Тогда
				Продолжить;
			КонецЕсли;
			
					
			Если ОбъектИС = Неопределено Тогда
				ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого СтрокаТабличнойЧасти Из ОбъектИС[ТабличнаяЧасть.Имя] Цикл
				
				ЗначениеРеквизитаИС = СтрокаТабличнойЧасти[Реквизит.Имя];
				ЗначениеРеквизитаДОТипИС = ТипЗнч(ЗначениеРеквизитаИС);
				
				Если ТипыОбъектовСПравилами.Найти(ЗначениеРеквизитаДОТипИС) <> Неопределено
					И ЗначениеЗаполнено(ЗначениеРеквизитаИС) Тогда
					ПодходящиеОбъекты.Добавить(ЗначениеРеквизитаИС);
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Ссылки на подходящие документы могут храниться где-то еще, например, в регистрах сведений.
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииПодходящихОбъектовДляДобавленияСвязи(
		ОбъектИС,
		ПодходящиеОбъекты);
		
	ПодходящиеОбъекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодходящиеОбъекты);
		
	Возврат ПодходящиеОбъекты;
	
КонецФункции

// Возвращает индекс картинки элемента справочника.
//
// Возвращаемое значение:
//   Число - индекс картинки.
//
Функция ИндексКартинкиЭлементаСправочника() Экспорт
	
	ИндексКартинки = 3;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииИндексаКартинкиЭлементаСправочника(ИндексКартинки);
	
	Возврат ИндексКартинки;
	
КонецФункции

// Возвращает подходящий тип потребителя для объекта XDTO.
//
// Параметры:
//   ТипОбъектаXDTO - Строка - тип объекта XDTO, соответствие которому следует выбрать
//   ТипыКандидаты - Массив - массив типов, из которых требуется выбрать подходящий
//
// Возвращаемое значение:
//   Тип - один из элементов массива ТипыКандидаты, подходящий для типа объекта XDTO
//
Функция ПодходящийТип(ТипОбъектаXDTO, ТипыКандидаты) Экспорт
	
	Попытка
		ТипИС = ИнтеграцияС1СДокументооборотВызовСервера.ТипИС(ТипОбъектаXDTO);
		Если ТипыКандидаты.Найти(ТипИС) <> Неопределено Тогда
			ПодходящийТип = ТипИС;
		Иначе
			ПодходящийТип = ТипыКандидаты[0];
		КонецЕсли;
	Исключение
		ПодходящийТип = ТипыКандидаты[0];
	КонецПопытки;
	
	Возврат ПодходящийТип;
	
КонецФункции

// Возвращает предельное количество объектов, выбираемых сервисом при получении списков.
//
// Параметры:
//   Тип - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//   Число - предельное количество элементов, выбираемых за раз
//
Функция ПредельноеКоличествоВыбираемыхОбъектов(Тип) Экспорт
	
	ПредельноеКоличество = 20;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииПредельногоКоличестваВыбираемыхОбъектов(
		Тип, ПредельноеКоличество);
	
	Возврат ПредельноеКоличество;
	
КонецФункции

// Определяет доступность интеграции для текущего пользователя. Может переопределяться
// при отказе от использования поставляемой роли ИспользованиеИнтеграцииС1СДокументооборотом.
//
// Возвращаемое значение:
//   Булево - Истина, если использование интеграции разрешено.
//
Функция ПользователюРазрешеноИспользованиеИнтеграции() Экспорт
	
	Разрешено = ПравоДоступа("Использование", Метаданные.Обработки.ИнтеграцияС1СДокументооборот);
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииРазрешенияПользователяИспользоватьИнтеграцию(Разрешено);
	
	Возврат Разрешено;
	
КонецФункции

// Получает пояснение к состоянию согласования, предназначенное для чтения пользователем.
//
// Параметры:
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - дата и время установки нового состояния.
//
// Возвращаемое значение:
//   Строка - пояснение к состоянию согласования.
//
Функция ПояснениеСостоянияСогласования(Установил, ДатаУстановки) Экспорт
	
	Результат = "";
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииПоясненияСостоянияСогласования(
		Установил, ДатаУстановки, Результат);
	Если Результат <> "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУстановки) Тогда
		Результат = Формат(ДатаУстановки, "ДЛФ=DT");
		Если ЗначениеЗаполнено(Установил) Тогда
			Результат = Результат + " (" + СокрЛП(Установил) + ")";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Установил) Тогда
			Результат = Установил;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вызывается при записи констант подсистемы Интеграция с 1С:Документооборотом.
//
// Параметры:
//   Источник - КонстантаМенеджерЗначения - записываемая константа.
//   Отказ - Булево - флаг отказа от выполнения записи.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаписиКонстанты(Источник, Отказ);
	
	ИмяКонстанты = Источник.ЭтотОбъект.Метаданные().Имя;
	ЗначениеКонстанты = Источник.Значение;
	
	ТипКонстанты = ТипЗнч(ЗначениеКонстанты);
	ПримитивныеТипы = Новый ОписаниеТипов("Число,Строка,Дата,Булево,Неопределено");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Синхронизировать "простые" зависимые константы
	Если ПримитивныеТипы.СодержитТип(ТипКонстанты) Или ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеКонстанты) Тогда
		
		ПодчиненныеКонстанты = ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты);
		
		Если ЗначениеЗаполнено(ПодчиненныеКонстанты) Тогда
			
			Для Каждого КлючИЗначение Из ПодчиненныеКонстанты Цикл
				Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
					Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу, описывающую зависимость констант в конфигурации.
// Каждая строка таблицы означает:
// для родительской константы со значением Х допустимо только значение Y для подчиненной константы.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ИмяРодительскойКонстанты - Строка
//     * ИмяПодчиненнойКонстанты - Строка
//     * ЗначениеРодительскойКонстанты - Произвольный
//     * ЗначениеПодчиненнойКонстанты - Произвольный
//
Функция ЗависимостиКонстант() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеРодительскойКонстанты");
	Результат.Колонки.Добавить("ЗначениеПодчиненнойКонстанты");
	
	Результат.Индексы.Добавить("ИмяРодительскойКонстанты");
	Результат.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьЕжедневныеОтчеты1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьЭлектроннуюПочту1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьФайловоеХранилище1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьПроцессыИЗадачи1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьСвязанныеДокументы1СДокументооборота",
		Ложь);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		Результат,
		"ИспользоватьИнтеграциюС1СДокументооборот",
		Ложь,
		"ИспользоватьПрисоединенныеФайлы1СДокументооборота",
		Ложь);
	
	// Инвертируемые константы
	ДобавитьСтрокуИнвертируемыхКонстант(
		Результат,
		"ИспользоватьПрисоединенныеФайлы1СДокументооборота",
		"ИспользоватьПрисоединенныеФайлыИнтегрированнойСистемы");
	ДобавитьСтрокуИнвертируемыхКонстант(
		Результат,
		"ИспользоватьФайловоеХранилище1СДокументооборота",
		"ИспользоватьПрисоединенныеФайлыИнтегрированнойСистемы");
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриПолученииТаблицыЗависимостиКонстант(Результат);
	
	Возврат Результат;
	
КонецФункции

// Добавляет строку в таблицу зависимости констант.
//
// Параметры:
//   ТаблицаКонстант - ТаблицаЗначений - см. ИнтеграцияС1СДокументооборот.ЗависимостиКонстант()
//   ИмяРодительскойКонстанты - Строка - имя родительской константы как оно задано в конфигураторе
//   ЗначениеРодительскойКонстанты - Произвольный - значение родительской константы
//   ИмяПодчиненнойКонстанты - Строка - имя подчиненной константы как оно задано в конфигураторе
//   ЗначениеПодчиненнойКонстанты - Произвольный - значение подчиненной константы
//
Процедура ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты,
		ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты) Экспорт
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры

// Добавляет строку инвертируемых констант в таблицу зависимости констант.
//
// Параметры:
//   ТаблицаКонстант - ТаблицаЗначений - см. ИнтеграцияС1СДокументооборот.ЗависимостиКонстант().
//   ИмяРодительскойКонстанты - Строка - имя родительской константы как оно задано в конфигураторе.
//   ИмяПодчиненнойКонстанты - Строка - имя подчиненной константы как оно задано в конфигураторе.
//
Процедура ДобавитьСтрокуИнвертируемыхКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты,
		ИмяПодчиненнойКонстанты = "") Экспорт
	
	Если ИмяПодчиненнойКонстанты = "" Тогда
		ИмяПодчиненнойКонстанты = "Не" + ИмяРодительскойКонстанты;
	КонецЕсли;
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		ИмяРодительскойКонстанты,
		Ложь,
		ИмяПодчиненнойКонстанты,
		Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		ИмяРодительскойКонстанты,
		Истина,
		ИмяПодчиненнойКонстанты,
		Ложь);
	
КонецПроцедуры

// Заполняет правила заполнения при выгрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - имя XDTO-типа приемника.
//   Источник - Строка - полное имя объекта метаданных-источника.
//
Процедура УстановитьПравилаЗаполненияПриВыгрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриУстановкеПравилаЗаполненияПриВыгрузкеПоУмолчанию(
		ПравилаЗаполнения, Приемник, Источник, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Источник); // ОбъектМетаданныхДокумент
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыЗаполнения = Новый Соответствие;
	ВариантыЗаполнения.Вставить("Организация", "organization");
	ВариантыЗаполнения.Вставить("Контрагент", "correspondent");
	ВариантыЗаполнения.Вставить("Комментарий", "comment");
	ВариантыЗаполнения.Вставить("ДатаНачала", "beginDate");
	ВариантыЗаполнения.Вставить("ДатаОкончания", "endDate");
	ВариантыЗаполнения.Вставить("СрокИсполнения", "performanceDate");
	ВариантыЗаполнения.Вставить("Сумма", "sum");
	ВариантыЗаполнения.Вставить("СуммаДокумента", "sum");
	ВариантыЗаполнения.Вставить("Валюта", "currency");
	ВариантыЗаполнения.Вставить("ВалютаВзаиморасчетов", "currency");
	ВариантыЗаполнения.Вставить("ВалютаРасчетов", "currency");
	ВариантыЗаполнения.Вставить("ВалютаДокумента", "currency");
	ВариантыЗаполнения.Вставить("Содержание", "summary");
	ВариантыЗаполнения.Вставить("РегистрационныйНомер", "regNumber");
	ВариантыЗаполнения.Вставить("ДатаРегистрации", "regDate");
	ВариантыЗаполнения.Вставить("ПодразделениеОрганизации", "subdivision");
	ВариантыЗаполнения.Вставить("Подразделение", "subdivision");
	ВариантыЗаполнения.Вставить("Утвердил", "signer");
	ВариантыЗаполнения.Вставить("Подготовил", "author");
	ВариантыЗаполнения.Вставить("Автор", "author");
	ВариантыЗаполнения.Вставить("КонтактноеЛицо", "contactPerson");
	ВариантыЗаполнения.Вставить("Ответственный", "responsible");
	ВариантыЗаполнения.Вставить("Наименование", "name");
	ВариантыЗаполнения.Вставить("ЮрФизЛицо", "legalPrivatePerson");
	ВариантыЗаполнения.Вставить("ИНН", "inn");
	ВариантыЗаполнения.Вставить("КПП", "kpp");
	ВариантыЗаполнения.Вставить("КодПоОКПО", "okpo");
	ВариантыЗаполнения.Вставить("ПолноеНаименование", "fullName");
	ВариантыЗаполнения.Вставить("НаименованиеПолное", "fullName");
	ВариантыЗаполнения.Вставить("ФизическоеЛицо", "privatePerson");
	ВариантыЗаполнения.Вставить("ФизЛицо", "privatePerson");
	ВариантыЗаполнения.Вставить("Ответственный", "author");
	ВариантыЗаполнения.Вставить("Проект", "project");
	
	ВариантыЗаполнения.Вставить("ДатаВходящегоДокумента", "externalDate");
	ВариантыЗаполнения.Вставить("НомерВходящегоДокумента", "externalNumber");
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Значение = ВариантыЗаполнения.Получить(Реквизит.Имя);
		Если Значение <> Неопределено Тогда
			ПравилаЗаполнения.Вставить(Значение, Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет правила заполнения при загрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие - соответствие имен реквизитов свойствам XDTO.
//   Приемник - Строка - полное имя объекта метаданных-приемника.
//   Источник - Строка - имя XDTO-типа источника.
//
Процедура УстановитьПравилаЗаполненияПриЗагрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриУстановкеПравилаЗаполненияПриЗагрузкеПоУмолчанию(
		ПравилаЗаполнения, Приемник, Источник, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыЗаполнения = Новый Соответствие;
	
	МетаданныеПриемника = Метаданные.НайтиПоПолномуИмени(Приемник); // ОбъектМетаданныхДокумент
	Если МетаданныеПриемника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(Источник, "Document") <> 0 Тогда
		ВариантыЗаполнения.Вставить("Организация", "organization");
		ВариантыЗаполнения.Вставить("Контрагент", "correspondent");
		ВариантыЗаполнения.Вставить("Комментарий", "comment");
		ВариантыЗаполнения.Вставить("ДатаНачала", "beginDate");
		ВариантыЗаполнения.Вставить("ДатаОкончания", "endDate");
		ВариантыЗаполнения.Вставить("СрокИсполнения", "performanceDate");
		ВариантыЗаполнения.Вставить("Сумма", "sum");
		ВариантыЗаполнения.Вставить("СуммаДокумента", "sum");
		ВариантыЗаполнения.Вставить("Валюта", "currency");
		ВариантыЗаполнения.Вставить("ВалютаВзаиморасчетов", "currency");
		ВариантыЗаполнения.Вставить("ВалютаРасчетов", "currency");
		ВариантыЗаполнения.Вставить("ВалютаДокумента", "currency");
		ВариантыЗаполнения.Вставить("Содержание", "summary");
		ВариантыЗаполнения.Вставить("РегистрационныйНомер", "regNumber");
		ВариантыЗаполнения.Вставить("ДатаРегистрации", "regDate");
		ВариантыЗаполнения.Вставить("ПодразделениеОрганизации", "subdivision");
		ВариантыЗаполнения.Вставить("Подразделение", "subdivision");
		ВариантыЗаполнения.Вставить("Утвердил", "signer");
		ВариантыЗаполнения.Вставить("Подготовил", "author");
		ВариантыЗаполнения.Вставить("Автор", "author");
		ВариантыЗаполнения.Вставить("КонтактноеЛицо", "contactPerson");
		ВариантыЗаполнения.Вставить("Ответственный", "responsible");
		ВариантыЗаполнения.Вставить("Наименование", "title");
		ВариантыЗаполнения.Вставить("Статус", "statusApproval");
		ВариантыЗаполнения.Вставить("Согласован", "statusApproval");
		
		ВариантыЗаполнения.Вставить("ДатаВходящегоДокумента", "externalDate");
		ВариантыЗаполнения.Вставить("НомерВходящегоДокумента", "externalNumber");
		
	ИначеЕсли Источник = "DMCorrespondent" Тогда
		ВариантыЗаполнения.Вставить("Наименование", "name");
		ВариантыЗаполнения.Вставить("Ответственный", "responsible");
		ВариантыЗаполнения.Вставить("ЮрФизЛицо", "legalPrivatePerson");
		ВариантыЗаполнения.Вставить("ИНН", "inn");
		ВариантыЗаполнения.Вставить("КПП", "kpp");
		ВариантыЗаполнения.Вставить("КодПоОКПО", "okpo");
		ВариантыЗаполнения.Вставить("ПолноеНаименование", "fullName");
		ВариантыЗаполнения.Вставить("НаименованиеПолное", "fullName");
		ВариантыЗаполнения.Вставить("ФизическоеЛицо", "privatePerson");
		ВариантыЗаполнения.Вставить("ФизЛицо", "privatePerson");
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеПриемника.Реквизиты Цикл
		Если ВариантыЗаполнения[Реквизит.Имя] <> Неопределено Тогда
			ПравилаЗаполнения[Реквизит.Имя] = ВариантыЗаполнения[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет строку в таблицу соответствия типов.
//
// Параметры:
//   Таблица - ТаблицаЗначений - таблица соответствия типов.
//   ИмяТипаXDTO - Строка - имя типа XDTO
//   ТипОбъектаИС - Тип - тип объекта ИС.
//
Процедура ДобавитьСтрокуСоответствияТипов(Таблица, ИмяТипаXDTO, ТипОбъектаИС) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяТипаXDTO = ИмяТипаXDTO;
	НоваяСтрока.ТипОбъектаИС = ТипОбъектаИС;
	
КонецПроцедуры

// Получает таблицу менеджеров печати форм объектов.
//
// Параметры:
//   МенеджерОбъекта - Строка - полное имя метаданных менеджера объекта.
//   ПечатныеФормы - ТаблицаЗначений:
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//                                 процедура Печать, формирующая табличные документы для этой команды.
//     * ИмяКоманды - Строка
//     * ПредставлениеКоманды - Строка
//
// Пример:
//	КомандыПечати = ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
//	
//	Для Каждого Команда Из КомандыПечати Цикл
//		Строка = ПечатныеФормы.Добавить();
//		Строка.МенеджерПечати = Команда.МенеджерПечати;
//		Строка.ИмяКоманды = Команда.Идентификатор;
//		Строка.ПредставлениеКоманды = Команда.Представление;
//	КонецЦикла;
//
Процедура ЗаполнитьТаблицуМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииТаблицыМенеджеровПечатиОбъекта(
		МенеджерОбъекта,
		ПечатныеФормы,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	КомандыПечати = КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
	
	Для Каждого Команда Из КомандыПечати Цикл
		Строка = ПечатныеФормы.Добавить();
		Строка.МенеджерПечати = Команда.МенеджерПечати;
		Строка.ИмяКоманды = Команда.Идентификатор;
		Строка.ПредставлениеКоманды = Команда.Представление;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет коллекцию печатных форм объекта по имени менеджера печати и команде менеджера печати.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - внешний объект.
//   ИмяКоманды - Строка - имя команды.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - неявно возвращаемое значение.
//
Процедура ЗаполнитьПечатныеФормы(ВнешнийОбъект, ИмяКоманды, КоллекцияПечатныхФорм) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииПечатныхФорм(
		ВнешнийОбъект,
		ИмяКоманды,
		КоллекцияПечатныхФорм,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеПечатью = Неопределено;
	МодульДополнительныеОтчетыИОбработки = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
	КонецЕсли;
	
	Если МодульУправлениеПечатью = Неопределено Или МодульДополнительныеОтчетыИОбработки = Неопределено Тогда
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли;
	
	НомерКомандыСтрокой = Сред(ИмяКоманды, СтрДлина("КомандаПечати") + 1);
	Если НомерКомандыСтрокой = "0" Тогда
		НомерКоманды = 0;
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов("Число");
		НомерКоманды = ОписаниеТипов.ПривестиЗначение(НомерКомандыСтрокой);
		НомерКоманды = ?(НомерКоманды = 0, -1, НомерКоманды);
	КонецЕсли;
	
	МенеджерОбъекта = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
	КомандыПечати = КомандыПечатиФормы(МенеджерОбъекта + ".Форма.ФормаСписка");
	Если КомандыПечати.Количество() = 0 Тогда
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли;
	
	Если НомерКоманды = -1 Тогда
		КомандаПечати = КомандыПечати.Найти(ИмяКоманды, "Идентификатор");
	Иначе
		КомандаПечати = КомандыПечати[НомерКоманды];
	КонецЕсли;
	ОписаниеКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаПечати);
	
	ОбъектыПечатиСписок = Новый СписокЗначений;
	ОбъектыПечатиСписок.Добавить(ВнешнийОбъект);
	
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(ВнешнийОбъект);
	
	ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ПараметрыПечати = ОписаниеКоманды.ДополнительныеПараметры; // Структура
	ПараметрыВывода = Неопределено;
	
	Если ПараметрыПечати.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыПечати.Ссылка) Тогда
		
		Попытка
			ПараметрыПечати.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);
			ПараметрыПечати.Вставить("ОбъектыНазначения", ОбъектыПечати);
			
			МодульДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(
				ПараметрыПечати.Ссылка,
				ПараметрыПечати,
				КоллекцияПечатныхФорм,
				ОбъектыПечатиСписок,
				ПараметрыВывода);
		Исключение
			КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось сформировать печатную форму по причине: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		КонецПопытки;
		
	Иначе
		
		ПечатныеФормы = МодульУправлениеПечатью.СформироватьПечатныеФормы(
			ОписаниеКоманды.МенеджерПечати,
			ОписаниеКоманды.Идентификатор,
			ОбъектыПечати,
			ПараметрыПечати);
		КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак состояния "Согласован" по данным документооборота.
//
// Параметры:
//   СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект ИС.
//
// Возвращаемое значение:
//   Булево - состояние согласования в ДО.
//
Функция СогласованВ1СДокументооборот(СсылкаНаОбъект) Экспорт
	
	Согласован = Ложь;
	
	Попытка
		
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		
		Если Прокси <> Неопределено Тогда
			
			ВнешнийОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
			ВнешнийОбъектXDTO.ID = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
			ВнешнийОбъектXDTO.type = СсылкаНаОбъект.Метаданные().ПолноеИмя();
			ВнешнийОбъектXDTO.name = Строка(СсылкаНаОбъект);
			
			Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
			ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
			Владельцы = Запрос.externalObjects; // СписокXDTO
			
			Владельцы.Добавить(ВнешнийОбъектXDTO);
			
			ПолучаемыеПоля.Добавить("status");
			
			Результат = Прокси.execute(Запрос);
			
			Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") = Ложь
					И Результат.documents.Количество() > 0 Тогда
				Объект = Результат.documents[0];
				Если Объект.status.name = "Согласован" Тогда
					Согласован = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		// Если нет соединения, вернем статус Ложь
		Согласован = Ложь;
	КонецПопытки;
	
	Возврат Согласован;
	
КонецФункции

#КонецОбласти

#Область ПроцессыИЗадачи

// Получает объект XDTO бизнес-процесса, заполненный по данным переданных предмета и шаблона.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - тип бизнес-процесса.
//   Шаблон - Структура:
//     * ID - Строка - идентификатор шаблона.
//     * type - Строка - тип шаблона.
//   Предмет - Структура:
//     * ID - Строка - идентификатор предмета.
//     * type - Строка - тип предмета.
//
// Возвращаемое значение:
//   ОбъектXDTO - XDTO объект с типом бизнес-процесса.
//
Функция НовыйБизнесПроцессПоШаблону(Прокси, Тип, Шаблон, Предмет = Неопределено) Экспорт
	
	// Создание бизнес-процесса
	Запрос = СоздатьОбъект(Прокси, "DMGetBusinessProcessByTemplateRequest");
	
	Запрос.type = Тип;
	
	ШаблонБизнесПроцессаИд = СоздатьОбъект(Прокси, "DMObjectID");
	ШаблонБизнесПроцессаИд.ID = Шаблон.ID;
	ШаблонБизнесПроцессаИд.type = Шаблон.type;
	
	Запрос.businessProcessTemplateID = ШаблонБизнесПроцессаИд;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ПредметБизнесПроцессаИд = СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.ID = Предмет.ID;
		ПредметБизнесПроцессаИд.type = Предмет.type;
		
		Запрос.targetID = ПредметБизнесПроцессаИд;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.Object;
	
КонецФункции

// Получает объект XDTO бизнес-процесса.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - тип бизнес-процесса.
//   Предмет - Структура:
//     * ID - Строка - идентификатор предмета.
//     * type - Строка - тип предмета.
//
// Возвращаемое значение:
//   ОбъектXDTO, Неопределено - XDTO объект с бизнес-процессом заданного типа.
//
Функция НовыйБизнесПроцесс(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewBusinessProcessRequest");
	
	Запрос.type = Тип;
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.targetID.ID = Предмет.ID;
		Запрос.targetID.type = Предмет.type;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Если ПроверитьТип(Прокси, Ответ, "DMGetNewBusinessProcessResponse") Тогда
		Возврат Ответ.object;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Выполняет сохранение и запуск бизнес-процесса.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объект - ОбъектXDTO - XDTO объект, хранящий данные бизнес-процесса.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMLaunchBusinessProcessResponse.
//
Функция ЗапуститьБизнесПроцесс(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMLaunchBusinessProcessRequest");
	Запрос.businessProcess = Объект;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает индекс картинки пометки завершения процесса или задачи по значению пометки.
//
// Параметры:
//   Значение - Строка - значение пометки.
//
// Возвращаемое значение:
//   Число - индекс картинки.
//
Функция ИндексКартинкиПометкиЗавершения(Значение) Экспорт
	
	Если Значение = "NotExecuted" Тогда
		Возврат 0;
		
	ИначеЕсли Значение = "Stopped" Тогда
		Возврат 1;
		
	ИначеЕсли Значение = "Interrupted" Тогда
		Возврат 2;
		
	ИначеЕсли Значение = "ReadyToStart" Тогда
		Возврат 3;
		
	ИначеЕсли Значение = "StartCanceled" Тогда
		Возврат 4;
		
	ИначеЕсли Значение = "ExecutedNeutral" Тогда
		Возврат 5;
		
	ИначеЕсли Значение = "ExecutedNegative" Тогда
		Возврат 6;
		
	ИначеЕсли Значение = "ExecutedAlmostPositive" Тогда
		Возврат 7;
		
	ИначеЕсли Значение = "ExecutedPositive" Тогда
		Возврат 8;
		
	ИначеЕсли Значение = "ReadyToExecute" Тогда
		Возврат 9;
		
	ИначеЕсли Значение = "ExecutionCanceled" Тогда
		Возврат 10;
		
	Иначе
		Возврат -1;
		
	КонецЕсли;
	
КонецФункции

// Возвращает объект XDTO бизнес-процесса, заполненный в соответствие с параметрами.
//
// Параметры:
//   ТипПроцессаXDTO - Строка - тип бизнес-процесса.
//   Параметры - Структура:
//     * ID - Строка - идентификатор бизнес-процесса.
//     * type - Строка - тип бизнес-процесса.
//     * Шаблон - Структура:
//         ** ID - Строка - идентификатор шаблона.
//         ** type - Строка - тип шаблона.
//     * Предмет - Структура:
//         ** ID - Строка - идентификатор предмета.
//         ** type - Строка - тип предмета.
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция ПолучитьОбъектXDTOПроцесса(ТипПроцессаXDTO, Параметры) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	// Если открывается новая карточка по заполненному шаблону.
	Если ЗначениеЗаполнено(Параметры.ID) И ЗначениеЗаполнено(Параметры.type) Тогда
		ДанныеБП = ПолучитьОбъект(Прокси, Параметры.type, Параметры.ID);
		ОбъектXDTO = ДанныеБП.objects[0];
		
	ИначеЕсли Параметры.Свойство("Шаблон") Тогда
		Если Параметры.Свойство("Предмет") Тогда
			ОбъектXDTO = НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцессаXDTO, Параметры.Шаблон, Параметры.Предмет);
		Иначе
			ОбъектXDTO = НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцессаXDTO, Параметры.Шаблон);
		КонецЕсли;
		
	Иначе
		Если Параметры.Свойство("Предмет") Тогда
			ОбъектXDTO = НовыйБизнесПроцесс(Прокси, ТипПроцессаXDTO, Параметры.Предмет);
		Иначе
			ОбъектXDTO = НовыйБизнесПроцесс(Прокси, ТипПроцессаXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Выполняет принятие задач к исполнению.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Задачи - Массив из Строка - массив идентификаторов задач Документооборота, которые нужно принять к исполнению.
//
// Возвращаемое значение:
//   Булево - признак успеха принятия задач к исполнению.
//
Функция ПринятьЗадачуКИсполнению(Прокси, Задачи) Экспорт
	
	Если Прокси = Неопределено Тогда
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	КонецЕсли;
	
	Запрос = СоздатьОбъект(Прокси, "DMAcceptTasksRequest");
	СписокЗадач = Запрос.tasks; // СписокXDTO
	
	Для Каждого ID Из Задачи Цикл
		ЗадачаXDTO = СоздатьОбъект(Прокси, "DMObject");
		ОбъектИД = СоздатьОбъект(Прокси, "DMObjectID");
		ОбъектИД.ID = ID;
		ОбъектИД.type = "DMBusinessProcessTask";
		ЗадачаXDTO.objectID = ОбъектИД;
		ЗадачаXDTO.name = "";
		СписокЗадач.Добавить(ЗадачаXDTO);
	КонецЦикла;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	
	Попытка
		ПроверитьВозвратВебСервиса(Прокси, Ответ);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

// Выполняет отмену принятия задач к исполнению.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Задачи - Массив из Строка - массив идентификаторов задач Документооборота,
//     принятие к исполнению которых нужно отменить.
//
// Возвращаемое значение:
//   Булево - признак успеха отмены принятия задач к исполнению.
//
Функция ОтменитьПринятиеЗадачКИсполнению(Прокси, Задачи) Экспорт
	
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP") Тогда
		
		Если Прокси = Неопределено Тогда
			Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		КонецЕсли;
		
		Запрос = СоздатьОбъект(Прокси, "DMRevokeTaskAcceptanceRequest");
		СписокЗадач = Запрос.tasks; // СписокXDTO
		
		Для Каждого ID Из Задачи Цикл
			ЗадачаXDTO = СоздатьОбъект(Прокси, "DMObject");
			ОбъектИД = СоздатьОбъект(Прокси, "DMObjectID");
			ОбъектИД.ID = ID;
			ОбъектИД.type = "DMBusinessProcessTask";
			ЗадачаXDTO.objectID = ОбъектИД;
			ЗадачаXDTO.name = "";
			СписокЗадач.Добавить(ЗадачаXDTO);
		КонецЦикла;
		
		Ответ = ВыполнитьЗапрос(Прокси, Запрос);
		
		Попытка
			ПроверитьВозвратВебСервиса(Прокси, Ответ);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает краткое имя точки маршрута.
//
// Параметры:
//   ПроцессТип - Строка - тип процесса.
//   ПолноеИмя - Строка - полное имя точки маршрута
//
// Возвращаемое значение:
//   Строка - краткое имя точки маршрута.
//
Функция КраткоеИмяТочкиМаршрута(ПроцессТип, ПолноеИмя) Экспорт
	
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		Если ПолноеИмя = "Ознакомиться с результатом согласования" Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessOrder" Тогда
		Если ПолноеИмя = "Контролировать поручение" Тогда //@NON-NLS-1
			КраткоеИмя = "Контролировать"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Проверить поручение" Тогда //@NON-NLS-1
			КраткоеИмя = "Проверить"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessPerformance" Тогда
		Если ПолноеИмя = "Ответственное исполнение" Тогда //@NON-NLS-1
			КраткоеИмя = "ОтветственноеИсполнение"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Контролировать исполнение" Тогда //@NON-NLS-1
			КраткоеИмя = "Контролировать"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Проверить исполнение" Тогда //@NON-NLS-1
			КраткоеИмя = "Проверить"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" Тогда
		Если ПолноеИмя = "Ознакомиться с регистрацией" Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		Если Найти(ПолноеИмя, "Ознакомиться с результатом утверждения") <> 0 Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessConsideration" Тогда
		Если ПолноеИмя = "Обработать резолюцию" Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMComplexBusinessProcess" Тогда
		Если ПолноеИмя = "Контролировать ход процесса" Тогда //@NON-NLS-1
			КраткоеИмя = "Контролировать"; //@NON-NLS-1
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		Если ПолноеИмя = "Исполнение \ ознакомление" Тогда //@NON-NLS-1
			КраткоеИмя = "ИсполнениеОзнакомление"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "В дело" Тогда //@NON-NLS-1
			КраткоеИмя = "ВДело"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessInternalDocumentProcessing" Тогда
		Если ПолноеИмя = "Рассмотрение" Тогда //@NON-NLS-1
			КраткоеИмя = "ВложенныйПроцесс1"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Исполнение \ ознакомление" Тогда //@NON-NLS-1
			КраткоеИмя = "ВложенныйПроцесс2"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "В дело" Тогда //@NON-NLS-1
			КраткоеИмя = "ВложенныйПроцесс3"; //@NON-NLS-1
		Иначе
			КраткоеИмя = ПолноеИмя;
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		Если ПолноеИмя = "Рассмотреть вопрос" Тогда //@NON-NLS-1
			КраткоеИмя = "РассмотрениеИнициатором"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Ознакомиться с результатом рассмотрения" Тогда //@NON-NLS-1
			КраткоеИмя = "ОзнакомлениеСРезультатомРассмотрения"; //@NON-NLS-1
		КонецЕсли;
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" Тогда
		Если ПолноеИмя = "Пригласить" Тогда //@NON-NLS-1
			КраткоеИмя = "Пригласить"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Ознакомиться с результатом приглашения" Тогда //@NON-NLS-1
			КраткоеИмя = "Ознакомиться"; //@NON-NLS-1
		ИначеЕсли ПолноеИмя = "Оповестить о результатах приглашения" Тогда //@NON-NLS-1
			КраткоеИмя = "Оповестить"; //@NON-NLS-1
		КонецЕсли;
		
	Иначе
		КраткоеИмя = ПолноеИмя;
	КонецЕсли;
	
	Возврат КраткоеИмя;
	
КонецФункции

#КонецОбласти

#Область Документы

// Заполняет свойство объекта XDTO из структуры реквизитов исходного объекта ИС.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект ДО.
//   ИмяСвойства - Строка - имя заполняемого свойства объекта XDTO.
//   СтруктураРеквизитов - Структура, ДанныеФормыСтруктура - предварительно заполненная структура
//     с данными объекта.
//   ПутьДанных - Структура, Строка - имя исходного реквизита.
//
Процедура ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси, ОбъектXDTO, ИмяСвойства, СтруктураРеквизитов,
		ПутьДанных) Экспорт
	
	Если ТипЗнч(ПутьДанных) = Тип("Структура") Тогда
		
		СвойствоКонтейнер = СоздатьОбъект(Прокси, ОбъектXDTO.Свойства().Получить(ИмяСвойства).Тип.Имя);
		
		Для Каждого КлючИЗначение Из ПутьДанных Цикл
			
			ИмяТаблицы = КлючИЗначение.Ключ;
			Таблица = СвойствоКонтейнер[ИмяТаблицы]; // СписокXDTO
			ТипЭлемента = СвойствоКонтейнер.Свойства().Получить(ИмяТаблицы).Тип.Имя;
			Если СтруктураРеквизитов[КлючИЗначение.Значение[0]] = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ИсходнаяТаблица = СтруктураРеквизитов[КлючИЗначение.Значение[0]];
			Если ТипЗнч(ИсходнаяТаблица) = Тип("ТаблицаЗначений") Тогда
				ТаблицаИсточник = ИсходнаяТаблица.Скопировать();
			Иначе // табличная часть
				ТаблицаИсточник = ИсходнаяТаблица.Выгрузить();
			КонецЕсли;
			ТаблицаИсточник.Колонки.Добавить("Тип");
			ТаблицаИсточник.ЗаполнитьЗначения(СтруктураРеквизитов.Тип, "Тип");
			
			Для Каждого ЭлементИсточник Из ТаблицаИсточник Цикл
				Элемент = СоздатьОбъект(Прокси, ТипЭлемента);
				Для Каждого СтрокаСоответствия Из КлючИЗначение.Значение[1] Цикл
					ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
						Элемент,
						СтрокаСоответствия.Ключ,
						ЭлементИсточник,
						СтрокаСоответствия.Значение);
				КонецЦикла;
				Таблица.Добавить(Элемент);
			КонецЦикла;
			
		КонецЦикла;
		
		ОбъектXDTO[ИмяСвойства] = СвойствоКонтейнер;
		
	ИначеЕсли ТипЗнч(ПутьДанных) = Тип("Строка") Тогда
		
		ИмяРеквизита = ПутьДанных;
		Если СтруктураРеквизитов[ИмяРеквизита] = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойства) Тогда
			
			Реквизит    = СтруктураРеквизитов[ИмяРеквизита];
			РеквизитID  = СтруктураРеквизитов[ИмяРеквизита + "ID"];
			РеквизитТип = СтруктураРеквизитов[ИмяРеквизита + "Тип"];
			
			ЗначениеСвойства = СоздатьОбъект(Прокси, ОбъектXDTO.Свойства().Получить(ИмяСвойства).Тип.Имя);
			
			// заполнить из потребителя.
			Если Метаданные.НайтиПоПолномуИмени(РеквизитТип) <> Неопределено Тогда
				
				СсылкаНаПотребителя = СсылкаИзUUID(РеквизитТип, РеквизитID);
				
				ЗаполнитьРеквизитыИзПотребителя(Прокси, ЗначениеСвойства, СсылкаНаПотребителя);
				
				Если СтруктураРеквизитов.Тип = "DMInternalDocument" Тогда
					Если ИмяСвойства = "contactPerson" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Контрагент");
					КонецЕсли;
				ИначеЕсли СтруктураРеквизитов.Тип = "DMOutgoingDocument" Тогда
					Если ИмяСвойства = "addressee" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Получатель");
					КонецЕсли;
				ИначеЕсли СтруктураРеквизитов.Тип = "DMIncomingDocument" Тогда
					Если ИмяСвойства = "signer" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Отправитель");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли РеквизитТип = "Строка" Тогда
				
				ЗначениеСвойства.objectID = СоздатьObjectID(Прокси, "", "");
				ЗначениеСвойства.name = Реквизит;
				
				ВнешнийОбъектXDTO = СоздатьОбъект(Прокси, "ExternalObject");
				ВнешнийОбъектXDTO.ID = "";
				ВнешнийОбъектXDTO.type = "";
				ВнешнийОбъектXDTO.name = "";
				
				ЗначениеСвойства.externalObject = ВнешнийОбъектXDTO;
				
				Если СтруктураРеквизитов.Тип = "DMInternalDocument" Тогда
					Если ИмяСвойства = "contactPerson" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Контрагент");
					КонецЕсли;
				ИначеЕсли СтруктураРеквизитов.Тип = "DMOutgoingDocument" Тогда
					Если ИмяСвойства = "addressee" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Получатель");
					КонецЕсли;
				ИначеЕсли СтруктураРеквизитов.Тип = "DMIncomingDocument" Тогда
					Если ИмяСвойства = "signer" И Не ЗначениеСвойства.Установлено("correspondent") Тогда
						ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
							ЗначениеСвойства,
							"correspondent",
							СтруктураРеквизитов,
							"Отправитель");
					КонецЕсли;
				КонецЕсли;
				
				Если ПроверитьТип(Прокси, ЗначениеСвойства, "DMPartyRowContact") Тогда
					ЗначениеСвойства.contactName = Реквизит;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Реквизит) Тогда 
				
				ЗначениеСвойства.objectID = СоздатьObjectID(Прокси, РеквизитID, РеквизитТип);
				ЗначениеСвойства.name = Реквизит;
				
			Иначе
				
				ЗначениеСвойства.objectID = СоздатьObjectID(Прокси, "", "");
				ЗначениеСвойства.name = "";
				
			КонецЕсли;
			
			ОбъектXDTO.Установить(ИмяСвойства, ЗначениеСвойства);
			
		Иначе
			ОбъектXDTO.Установить(ИмяСвойства, СтруктураРеквизитов[ИмяРеквизита]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты формы из свойств объекта XDTO по соответствию свойств и реквизитов.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект XDTO.
//   Форма - ФормаКлиентскогоПриложения - источник данных заполнения.
//   РеквизитыИСвойства - Соответствие - ключ - свойство XDTO, значение - реквизит.
//   
Процедура ЗаполнитьОбъектXDTOИзФормы(ОбъектXDTO, Форма, РеквизитыИСвойства) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Для Каждого РеквизитИСвойство Из РеквизитыИСвойства Цикл
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
			ОбъектXDTO,
			РеквизитИСвойство.Ключ,
			Форма,
			РеквизитИСвойство.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты формы из свойств объекта XDTO по соответствию свойств и реквизитов.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - заполняемая форма.
//   ОбъектXDTO - ОбъектXDTO - источник данных заполнения.
//   РеквизитыИСвойства - Соответствие - ключ - свойство XDTO, значение - реквизит.
//
Процедура ЗаполнитьФормуИзОбъектаXDTO(Форма, ОбъектXDTO, РеквизитыИСвойства) Экспорт
	
	Для Каждого РеквизитИСвойство Из РеквизитыИСвойства Цикл
		ЗаполнитьРеквизитИзОбъектаXDTO(Форма,
			РеквизитИСвойство.Значение,
			ОбъектXDTO,
			РеквизитИСвойство.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Создает новый объект Документооборота по объекту ИС и указанному правилу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило заполнения.
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект, или
//   Строка - сообщение об ошибке.
//
Функция СоздатьОбъектДОПоПравилу(Прокси, ОбъектИС, Правило) Экспорт
	
	ДанныеПравила = Справочники.ПравилаИнтеграцииС1СДокументооборотом.ДанныеПравилаДляВыгрузки(Правило);
	
	СтруктураРеквизитов = СтруктураРеквизитовЗаполняемогоОбъектаДО(ДанныеПравила.ТипОбъектаДО);
	
	Справочники.ПравилаИнтеграцииС1СДокументооборотом.ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу(
		ОбъектИС,
		СтруктураРеквизитов,
		ДанныеПравила);
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
	Запрос.type = ДанныеПравила.ТипОбъектаДО;
	
	// Заполнение документов по шаблонам.
	Шаблон = Неопределено;
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
		
		Если ЗначениеЗаполнено(ДанныеПравила.ШаблонID) Тогда
			
			Шаблон = СоздатьОбъект(Прокси,
				ДанныеПравила.ШаблонТип);
			Шаблон.name = ДанныеПравила.Шаблон;
			Шаблон.objectID = СоздатьObjectID(Прокси,
				ДанныеПравила.ШаблонID,
				ДанныеПравила.ШаблонТип);
			
			Запрос.dataSource = Шаблон;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Ответ.description;
	КонецЕсли;
	
	ОбъектXDTO = Ответ;
	
	СоответствиеСвойствXDTOиРеквизитов = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
		СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(ДанныеПравила.ТипОбъектаДО);
	
	Для Каждого СтрокаСоответствия Из СоответствиеСвойствXDTOиРеквизитов Цикл
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ОбъектXDTO,
			СтрокаСоответствия.Ключ,
			СтруктураРеквизитов,
			СтрокаСоответствия.Значение);
	КонецЦикла;
	
	// Сохраним файлы шаблона для отдельного заполнения.
	Если ОбъектXDTO.Свойства().Получить("files") <> Неопределено И СтруктураРеквизитов.Свойство("Файлы") Тогда
		
		НомерФайла = 0;
		Пока НомерФайла <= ОбъектXDTO.files.Количество() - 1 Цикл
			ФайлXDTO = ОбъектXDTO.files[НомерФайла];
			
			Если ФайлXDTO.Свойства().Получить("template") <> Неопределено
					И ФайлXDTO.Установлено("template")
					И ЗначениеЗаполнено(ФайлXDTO.template.objectID.ID) Тогда
				
				Файл = СтруктураРеквизитов.Файлы.Добавить();
				
				Файл.Наименование = ФайлXDTO.name;
				Файл.Расширение = ФайлXDTO.extension;
				Файл.Тип = "DMFile";
				Файл.ШаблонID = ФайлXDTO.template.objectID.ID;
				
				ОбъектXDTO.files.Удалить(НомерФайла);
				
			Иначе
				
				НомерФайла = НомерФайла + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборот.СформироватьДополнительныеСвойства(
		Прокси,
		ОбъектXDTO,
		СтруктураРеквизитов);
	
	ОбъектXDTO.objectID = СоздатьObjectID(Прокси, "", "");
	ОбъектXDTO.name = Строка(ОбъектИС);
	
	Если ЗначениеЗаполнено(ОбъектИС) Тогда
		ВнешнийОбъектXDTO = СоздатьОбъект(Прокси, "ExternalObject");
		ВнешнийОбъектXDTO.ID = Строка(ОбъектИС.УникальныйИдентификатор());
		ВнешнийОбъектXDTO.type = ОбъектИС.Метаданные().ПолноеИмя();
		ВнешнийОбъектXDTO.name = Строка(ОбъектИС);
		ОбъектXDTO.externalObject = ВнешнийОбъектXDTO;
	КонецЕсли;
	
	Если Шаблон <> Неопределено Тогда
		ОбъектXDTO.template = Шаблон;
	КонецЕсли;
	
	СинхронизоватьРеквизитИТЧКонтрагенты(Прокси, ОбъектXDTO);
	
	Запрос = СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = ОбъектXDTO;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Ответ.description;
	КонецЕсли;
	
	ОбъектXDTO = Ответ.object;
	
	РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
		ОбъектXDTO.objectID.ID,
		ОбъектXDTO.objectID.type,
		ОбъектИС);
	
	ДоступенФункционалПакетныеЗапросы = ИнтеграцияС1СДокументооборотПовтИсп.
		ДоступенФункционалВерсииСервиса("1.3.2.3");
	
	Если СтруктураРеквизитов.Свойство("Файлы") И СтруктураРеквизитов.Файлы.Количество() > 0 Тогда
		
		Если ДоступенФункционалПакетныеЗапросы Тогда
			Пакет = СоздатьОбъект(Прокси, "DMBatchRequest");
			ЗапросыПакета = Пакет.requests; // СписокXDTO
		КонецЕсли;
		
		Для Каждого СтрокаФайла Из СтруктураРеквизитов.Файлы Цикл
			
			Запрос = СоздатьОбъект(Прокси, "DMAddFileRequest");
			
			ОбъектВладелец = СоздатьОбъект(Прокси, "DMObject");
			ОбъектВладелец.objectID = СоздатьObjectID(Прокси,
				ОбъектXDTO.objectID.ID, ОбъектXDTO.objectID.type);
			ОбъектВладелец.name = ОбъектXDTO.name;
			
			Запрос.owner = ОбъектВладелец;
			
			Запрос.file = СоздатьОбъект(Прокси,"DMFile");
			Запрос.file.objectID = СоздатьObjectID(Прокси, "", "DMFile");
			Запрос.file.name = СтрокаФайла.Наименование;
			Запрос.file.extension = СтрокаФайла.Расширение;
			
			Если ЗначениеЗаполнено(СтрокаФайла.ШаблонID) Тогда
				ФайлШаблон = СоздатьОбъект(Прокси, "DMFile");
				ФайлШаблон.objectID = СоздатьObjectID(Прокси,
					СтрокаФайла.ШаблонID, "DMFile");
				ФайлШаблон.name = СтрокаФайла.Наименование;
				Запрос.file.template = ФайлШаблон;
			Иначе // из двоичных данных
				Запрос.file.binaryData = СтрокаФайла.ДвоичныеДанные;
				Запрос.file.modificationDate = СтрокаФайла.ДатаСоздания;
				Запрос.file.modificationDateUniversal = СтрокаФайла.ДатаМодификацииУниверсальная;
				Запрос.file.size = СтрокаФайла.Размер;
			КонецЕсли;
			
			Если ДоступенФункционалПакетныеЗапросы Тогда
				ЗапросыПакета.Добавить(Запрос);
			Иначе
				Ответ = ВыполнитьЗапрос(Прокси, Запрос);
				Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
					Возврат Ответ.description;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДоступенФункционалПакетныеЗапросы Тогда
			Ответ = ВыполнитьЗапрос(Прокси, Пакет);
			Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
				Возврат Ответ.description;
			КонецЕсли;
		КонецЕсли;
		
		ПриПоявленииПрисоединенныхФайловДокументооборота(
			ОбъектXDTO.objectID.ID,
			ОбъектXDTO.objectID.type,
			ОбъектИС);
		
	КонецЕсли;
	
	УстановитьШтрихкод(ОбъектИС, ОбъектXDTO.objectID.ID, ОбъектXDTO.objectID.type);
	
	// Автоматически добавим связи по ссылкам из объекта ИС.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСвязанныеДокументы1СДокументооборота")
			И ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1")
			И Не ДанныеПравила.НеСоздаватьСвязиПоСсылкам
			И ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(ОбъектXDTO.objectID.type) Тогда
		
		ПодходящиеОбъекты = ПолучитьПодходящиеОбъектыДляДобавленияСвязей(ОбъектИС);
		
		Если ПодходящиеОбъекты.Количество() = 0 Тогда
			Возврат ОбъектXDTO;
		КонецЕсли;
		
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		
		Для Каждого ПодходящийОбъект Из ПодходящиеОбъекты Цикл
			
			ДанныеОбъектаДО = ИнтеграцияС1СДокументооборотВызовСервера.
				ДанныеОбъектаДОПоВнешнемуОбъекту(ПодходящийОбъект);
			
			Если ДанныеОбъектаДО = Неопределено Тогда
				
				Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ПодходящийОбъект);
				Если Правила.Количество() <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(Правила[0].ТипОбъектаДО) Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеОбъектаДО = Неопределено Тогда // создадим документ в ДО
				
				НовыйОбъектДО = СоздатьОбъектДОПоПравилу(Прокси,
					ПодходящийОбъект,
					Правила[0].Ссылка);
				
				Если ТипЗнч(НовыйОбъектДО) = Тип("ОбъектXDTO") Тогда
					СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
						НовыйОбъектДО.objectID.ID,
						НовыйОбъектДО.objectID.type,
						НовыйОбъектДО.name);
				Иначе // сообщение об ошибке
					ИмяСобытия = НСтр("ru = 'Автоматическое создание связанного объекта'");
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЖурналаРегистрации(ИмяСобытия),
						УровеньЖурналаРегистрации.Ошибка,,,
						НовыйОбъектДО);
					ТекстИсключения = СтрШаблон(НСтр("ru = 'Не удалось создать связанный документ для ""%1"":
						|%2'"),
						ПодходящийОбъект,
						НовыйОбъектДО);
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			Иначе // добавим связь к существующему документу ДО
				
				Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(ДанныеОбъектаДО.type) Тогда
					Продолжить;
				КонецЕсли;
				
				СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
					ДанныеОбъектаДО.ID,
					ДанныеОбъектаДО.type,
					ДанныеОбъектаДО.name);
				
			КонецЕсли;
			
			ИсходныйДокумент = Новый Структура("ID, Тип, Представление",
				ОбъектXDTO.objectID.ID,
				ОбъектXDTO.objectID.type,
				ОбъектXDTO.name);
			
			ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязьДокументов(
				ИсходныйДокумент,
				СвязываемыйДокумент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Добавляет в связанный документ в ДО штрихкод по объекту ИС.
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота
//
Процедура УстановитьШтрихкод(ОбъектИС, ID, Тип) Экспорт
	
	Если Найти(Тип, "Document") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ШтрихкодОбъектаИС = "";
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииШтрихкодаДокумента(ОбъектИС, ШтрихкодОбъектаИС);
	Если ЗначениеЗаполнено(ШтрихкодОбъектаИС)
			И ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.3.1.CORP") Тогда
		
		Запрос = СоздатьОбъект(Прокси, "DMRetrieveBarcodesRequest");
		
		Запрос.objectID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.objectID.ID = ID;
		Запрос.objectID.type = Тип;
		
		Результат = Прокси.execute(Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		Запрос = СоздатьОбъект(Прокси, "DMUpdateBarcodesRequest");
		
		Запрос.objectBarcodes = Результат.objectBarcodes;
		СписокШтрихкодов = Запрос.objectBarcodes.barcodes; // СписокXDTO
		
		Штрихкод = СоздатьОбъект(Прокси, "DMBarcode");
		Штрихкод.internal = Ложь;
		Штрихкод.barcodeData = ШтрихкодОбъектаИС;
		СписокШтрихкодов.Добавить(Штрихкод);
		
		Результат = Прокси.execute(Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений с информацией о менеджерах печати объекта.
//
// Параметры:
//   МенеджерОбъекта - Строка - полное имя метаданных менеджера объекта.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//         процедура Печать, формирующая табличные документы для этой команды.
//     * ИмяКоманды - Строка
//     * ПредставлениеКоманды - Строка
//
Функция МенеджерыПечати(МенеджерОбъекта) Экспорт
	
	ПечатныеФормы = Новый ТаблицаЗначений;
	ПечатныеФормы.Колонки.Добавить("МенеджерПечати");
	ПечатныеФормы.Колонки.Добавить("ИмяКоманды");
	ПечатныеФормы.Колонки.Добавить("ПредставлениеКоманды");
	
	ЗаполнитьТаблицуМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Возвращает команды печати формы.
//
// Параметры:
//   ИмяФормы - Строка - имя формы объекта.
//
// Возвращаемое значение:
//   ТаблицаЗначений - команды печати.
//
Функция КомандыПечатиФормы(ИмяФормы) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		Возврат Новый Массив;
	Иначе
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		МодульУправлениеПечатьюПереопределяемый = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатьюПереопределяемый");
	КонецЕсли;
	
	МенеджерыОбъектов = Новый Массив;
	МодульУправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати(МенеджерыОбъектов);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Если МенеджерыОбъектов.Найти(МенеджерОбъекта) = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат МодульУправлениеПечатью.КомандыПечатиФормы(ИмяФормы);
	КонецЕсли;
	
КонецФункции

// Возвращает структуру Вида документа ДО для заполнения по переданному имени типа.
//
// Параметры:
//   ТипОбъектаДО - Строка - тип объекта: DMInternalDocumentType или DMIncomingDocumentType или DMOutgoingDocumentType.
//
// Возвращаемое значение:
//   Структура - реквизиты объекта указанного типа, подлежащие заполнению.
//
Функция СтруктураРеквизитовЗаполняемогоВидаДокументовДО(ТипОбъектаДО) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	
	// Реквизиты, общие для всех типов.
	СтруктураРеквизитов.Вставить("Тип", ТипОбъектаДО);
	СтруктураРеквизитов.Вставить("Имя");
	СтруктураРеквизитов.Вставить("ИспользоватьСрокИсполнения");
	СтруктураРеквизитов.Вставить("УчитыватьСуммуДокумента");
	СтруктураРеквизитов.Вставить("АвтоНумерация");
	СтруктураРеквизитов.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону");
	СтруктураРеквизитов.Вставить("ВключенУчетПоНоменклатуреДел");
	
	Если ТипОбъектаДО = "DMInternalDocumentType" Тогда
		СтруктураРеквизитов.Вставить("ВестиУчетПоАдресатам");
		СтруктураРеквизитов.Вставить("ВестиУчетПоСтатьямДДС");
		СтруктураРеквизитов.Вставить("ВестиУчетПоКонтрагентам");
		СтруктураРеквизитов.Вставить("ВестиУчетСторон");
		СтруктураРеквизитов.Вставить("ЯвляетсяЗаявкойНаОплату");
		СтруктураРеквизитов.Вставить("УчитыватьСрокДействия");
		СтруктураРеквизитов.Вставить("ВестиУчетПоОрганизациям");
		СтруктураРеквизитов.Вставить("ВестиУчетТоваровИУслуг");
		СтруктураРеквизитов.Вставить("ВариантПодписания");
		СтруктураРеквизитов.Вставить("ВариантПодписанияID");
		СтруктураРеквизитов.Вставить("ВариантПодписанияТип");
		СтруктураРеквизитов.Вставить("ИспользоватьУтверждение");
		СтруктураРеквизитов.Вставить("ИспользоватьПодписание");
	ИначеЕсли ТипОбъектаДО = "DMIncomingDocumentType" Тогда
		
	ИначеЕсли ТипОбъектаДО = "DMOutgoingDocumentType" Тогда
		СтруктураРеквизитов.Вставить("УчитыватьВходящийНомерИДатуПолучателя");
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип ""%1"" не относится к видам документов ДО'"),
			ТипОбъектаДО);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Создает вид документов с указанными свойствами.
//
// Параметры:
//   Свойства - См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоВидаДокументовДО.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DM<...>DocumentType или DMError.
//
Функция СоздатьВидДокументаВДО(Свойства) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ВидДокумента = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Свойства.Тип);
	ВидДокумента.objectID = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	ВидДокумента.objectID.ID = "";
	ВидДокумента.objectID.type = Свойства.Тип;
	
	ВидДокумента.name = Свойства.Имя;
	ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ВидДокумента,
		"automaticNumeration",
		Свойства,
		"АвтоНумерация");
	ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ВидДокумента,
		"sumEnabled",
		Свойства,
		"УчитыватьСуммуДокумента");
	ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ВидДокумента,
		"performanceDateEnabled",
		Свойства,
		"ИспользоватьСрокИсполнения");
	ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ВидДокумента,
		"templateRequired",
		Свойства,
		"ЗапретитьСозданиеДокументовНеПоШаблону");
	Если ИнтеграцияС1СДокументооборот.СвойствоСуществует(ВидДокумента, "accountingForCaseFilesEnabled") Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"accountingForCaseFilesEnabled",
			Свойства,
			"ВключенУчетПоНоменклатуреДел");
	КонецЕсли;
	
	Если Свойства.Тип = "DMInternalDocumentType" Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"addresseeEnabled",
			Свойства,
			"ВестиУчетПоАдресатам");
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"cashFlowDetailsEnabled",
			Свойства,
			"ВестиУчетПоСтатьямДДС");
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"correspondentEnabled",
			Свойства,
			"ВестиУчетПоКонтрагентам");
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"durationEnabled",
			Свойства,
			"УчитыватьСрокДействия");
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"organizationEnabled",
			Свойства,
			"ВестиУчетПоОрганизациям");
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"signatureOption",
			Свойства,
			"ВариантПодписания");
		Если ИнтеграцияС1СДокументооборот.СвойствоСуществует(ВидДокумента, "partiesEnabled") Тогда
			ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"partiesEnabled",
				Свойства,
				"ВестиУчетСторон");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборот.СвойствоСуществует(ВидДокумента, "isAPaymentRequest") Тогда
			ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"isAPaymentRequest",
				Свойства,
				"ЯвляетсяЗаявкойНаОплату");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборот.СвойствоСуществует(ВидДокумента, "productRowsEnabled") Тогда
			ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"productRowsEnabled",
				Свойства,
				"ВестиУчетТоваровИУслуг");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборот.СвойствоСуществует(ВидДокумента, "useConfirmation") Тогда
			ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"useConfirmation",
				Свойства,
				"ИспользоватьУтверждение");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборот.СвойствоСуществует(ВидДокумента, "useSigningByManager") Тогда
			ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
				Прокси,
				ВидДокумента,
				"useSigningByManager",
				Свойства,
				"ИспользоватьПодписание");
		КонецЕсли;
	ИначеЕсли Свойства.Тип = "DMOutgoingDocumentType" Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ВидДокумента,
			"externalNumberEnabled",
			Свойства,
			"УчитыватьВходящийНомерИДатуПолучателя");
	КонецЕсли;
	
	Возврат ИнтеграцияС1СДокументооборот.СоздатьНовыйОбъект(Прокси, ВидДокумента).object;
	
КонецФункции

// Ищет виды документов в ДО по типу объекта и по точному совпадению наименования. Создает новый
// вид документов с указанными свойствами, если ничего не найдено.
//
// Параметры:
//   Свойства - См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоВидаДокументовДО.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DM<...>DocumentType или DMError.
//
Функция НайтиСоздатьВидДокументаВДО(Свойства) Экспорт
	
	РезультатыПоиска = ИнтеграцияС1СДокументооборотВызовСервера.НайтиОбъектВДОПоИмени(Свойства.Тип, Свойства.Имя);
	
	Если РезультатыПоиска = Неопределено Тогда
		Возврат СоздатьВидДокументаВДО(Свойства);
	Иначе
		Возврат РезультатыПоиска;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру Папки внутренних документов ДО для заполнения.
//
// Возвращаемое значение:
//   Структура - реквизиты объекта указанного типа, подлежащие заполнению.
//
Функция СтруктураРеквизитовЗаполняемойПапкиВнутреннихДокументов() Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Имя");
	СтруктураРеквизитов.Вставить("Описание");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("ОтветственныйID");
	СтруктураРеквизитов.Вставить("ОтветственныйТип");
	СтруктураРеквизитов.Вставить("ДатаСоздания");
	СтруктураРеквизитов.Вставить("Родитель");
	СтруктураРеквизитов.Вставить("РодительID");
	СтруктураРеквизитов.Вставить("РодительТип");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Создает папку внутренних документов с указанными свойствами.
//
// Параметры:
//   Свойства - См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемойПапкиВнутреннихДокументов.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMInternalDocumentFolder или DMError.
//
Функция СоздатьПапкуВнутреннихДокументовВДО(Свойства) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Папка = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMInternalDocumentFolder");
	Папка.objectID = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	Папка.objectID.ID = "";
	Папка.objectID.type = "DMInternalDocumentFolder";
	
	Папка.name = Свойства.Имя;
	ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		Папка,
		"description",
		Свойства,
		"Описание");
	ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		Папка,
		"responsible",
		Свойства,
		"Ответственный");
	ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		Папка,
		"creationDate",
		Свойства,
		"ДатаСоздания");
	ИнтеграцияС1СДокументооборот.ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		Папка,
		"parent",
		Свойства,
		"Родитель");
	
	Возврат ИнтеграцияС1СДокументооборот.СоздатьНовыйОбъект(Прокси, Папка).object;
	
КонецФункции

// Ищет папки внутренних документов в ДО по точному совпадению наименования. Создает новую
// папку с указанными свойствами, если ничего не найдено.
//
// Параметры:
//   Свойства - См. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемойПапкиВнутреннихДокументов.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMInternalDocumentFolder или DMError.
//
Функция НайтиСоздатьПапкуВнутреннихДокументовВДО(Свойства) Экспорт
	
	РезультатыПоиска = ИнтеграцияС1СДокументооборотВызовСервера.НайтиОбъектВДОПоИмени(
		"DMInternalDocumentFolder", Свойства.Имя);
	
	Если РезультатыПоиска = Неопределено Тогда
		Возврат СоздатьПапкуВнутреннихДокументовВДО(Свойства);
	Иначе
		Возврат РезультатыПоиска;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Файлы

// Создает XDTO объект Документооборота типа Файл (DMFile).
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   МассивПодписей - Структура:
//     * ОбъектСсылка - Строка
//     * НоваяПодписьДвоичныеДанные - ДвоичныеДанные
//     * Отпечаток - Строка
//     * ДатаПодписи - Дата
//     * Комментарий - Строка
//     * ИмяФайлаПодписи - Строка
//     * КомуВыданСертификат - Строка
//     * ДвоичныеДанныеСертификата - ДвоичныеДанные
//     * ОбъектТип - Строка
//     * УстановившийПодпись - Строка
//     * УстановившийПодписьИд - Строка
//   Файл - ДанныеФормыЭлементКоллекции:
//     * ID - Строка
//     * Автор - Строка
//     * АдресВременногоХранилищаФайла - Строка
//     * ДатаМодификацииУниверсальная - Дата
//     * ДатаСоздания - Дата
//     * Зашифрован - Булево
//     * ИндексКартинки - Число
//     * Наименование - Строка
//     * НомерКартинкиПодписанЗашифрован - Число
//     * Описание - Строка
//     * ПодписанЭП - Булево
//     * ПометкаУдаления - Булево
//     * Размер - Число
//     * Расширение - Строка
//     * Редактируется - Булево
//     * РедактируетсяТекущимПользователем - Булево
//     * Тип - Строка
//     * ШаблонID - Строка
//     * ЯвляетсяОригиналом - Булево
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMFile.
//
Функция СоздатьXDTOФайл(Прокси, МассивПодписей, Файл) Экспорт
	
	Объект = СоздатьОбъект(Прокси,"DMFile");
	Подписи = Объект.signatures; // СписокXDTO
	
	Объект.objectID = СоздатьObjectID(Прокси, Файл.ID, "DMFile");
	
	// только 2 поля - Имя и Описание передаем при записи.
	Объект.name = Файл.Наименование;
	Объект.description = Файл.Описание;
	
	// добавление ЭП.
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		
		ПодписьXDTO = СоздатьОбъект(Прокси, "DMSignature");
		ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		Подписи.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
	Возврат Объект;
	
КонецФункции

// Заполняет XDTO объект подписи по структуре подписи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ПодписьXDTO - ОбъектXDTO - объект XDTO типа DMSignature.
//   ДанныеПодписи - Структура:
//     * ДатаПодписи - Дата
//     * ДвоичныеДанныеСертификата - ДвоичныеДанные
//     * ИмяФайлаПодписи - Строка
//     * Комментарий - Строка
//     * КомуВыданСертификат - Строка
//     * НоваяПодписьДвоичныеДанные - ДвоичныеДанные
//     * ОбъектСсылка - Строка
//     * ОбъектТип - Строка
//     * Отпечаток - Строка
//     * УстановившийПодпись - Строка
//     * УстановившийПодписьИд - Строка
//
Процедура ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи) Экспорт
	
	ПодписьXDTO.author = ДанныеПодписи.КомуВыданСертификат;
	ПодписьXDTO.certificate = ДанныеПодписи.ДвоичныеДанныеСертификата;
	ПодписьXDTO.comment = ДанныеПодписи.Комментарий;
	ПодписьXDTO.date = ?(ЗначениеЗаполнено(ДанныеПодписи.ДатаПодписи), ДанныеПодписи.ДатаПодписи, ТекущаяДатаСеанса());
	ПодписьXDTO.signature = ДанныеПодписи.НоваяПодписьДвоичныеДанные;
	ПодписьXDTO.signatureFileName = ДанныеПодписи.ИмяФайлаПодписи;
	ПодписьXDTO.thumbprint = ДанныеПодписи.Отпечаток;

	Если ДанныеПодписи.Свойство("УстановившийПодпись") Тогда
		
		ПодписьXDTO.signer =  СоздатьОбъект(Прокси, "DMUser");
		ПодписьXDTO.signer.name = ДанныеПодписи.УстановившийПодпись;
		
		ПодписьXDTO.signer.objectID = СоздатьObjectID(Прокси,
			ДанныеПодписи.УстановившийПодписьИд, "DMUser");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество прикрепленных файлов к связанному объекту 1С:Документооборот.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ВключаяУдаленные - Булево - учитывать ли помеченные на удаление файлы.
//
// Возвращаемое значение:
//   Число - количество прикрепленных файлов.
//
Функция КоличествоФайловСвязанногоОбъекта(ID, Тип, ВключаяУдаленные = Истина) Экспорт
	
	Если ID = "" Или Тип = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	СписокОбъектов.Добавить(ОбъектИд);
	
	ПолучаемыеПоля.Добавить("files");
	
	Если Тип = "DMInternalDocument" Или Тип = "DMIncomingDocument" Или Тип = "DMOutgoingDocument" Тогда
		ПолучаемыеПоля.Добавить("enabledProperties");
	КонецЕсли;
	
	Если ВключаяУдаленные Тогда
		ПолучаемыеПоля.Добавить("ignoreDeletionMark");
	КонецЕсли;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ОбъектXDTO = Результат.objects[0];
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "files") Тогда
		Возврат ОбъектXDTO.files.Количество();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПрисоединенныеФайлы

// Устанавливает признак наличия присоединенных файлов ДО для объекта ИС. Вызывается при добавлении
// связи с объектом ДО, имеющим файлы, при добавлении файла из интерфейса ИС и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//
Процедура ПриПоявленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриПоявленииПрисоединенныхФайловДокументооборота(
		ID, Тип, ОбъектИС, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если ВладелецПрисоединенныхФайлов = Неопределено
			Или Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = ИнтеграцияС1СДокументооборот.КоличествоФайловСвязанногоОбъекта(ID, Тип);
	
	Если КоличествоФайлов = Неопределено Или КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьИзменилась = Ложь;
	
	МенеджерЗаписи = РегистрыСведений["НаличиеФайлов"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ОбъектСФайлами) Тогда
		МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если Не МенеджерЗаписи.ЕстьФайлы Тогда
		МенеджерЗаписи.ЕстьФайлы = Истина;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторОбъекта) Тогда
		МенеджерЗаписи.ИдентификаторОбъекта = "0000000000";
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ЗаписьИзменилась Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Снимает признак наличия присоединенных файлов для объекта ИС, если их нет в самой ИС. Вызывается при
// удалении связи с объектом ДО и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект ИС.
//
Процедура ПриУдаленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриУдаленииПрисоединенныхФайловДокументооборота(
		ID, Тип, ОбъектИС, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектИС, МассивФайлов);
	
	Если МассивФайлов.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим запись.
	МенеджерЗаписи = РегистрыСведений["НаличиеФайлов"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ЕстьФайлы = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при определении наличия файлов, хранимых в интегрируемой конфигурации.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ЕстьФайлы - Булево, Неопределено - неявно возвращаемое значение, признак наличия присоединенных файлов.
//
Процедура ПриОпределенииНаличияПрисоединенныхФайлов(ВладелецФайлов, ЕстьФайлы) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииНаличияПрисоединенныхФайлов(
		ВладелецФайлов, ЕстьФайлы, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайловВДО = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота") Тогда
		ДанныеОбъектаДО = ИнтеграцияС1СДокументооборотВызовСервера.
			ДанныеОбъектаДОПоВнешнемуОбъекту(ВладелецФайлов);
		Если ДанныеОбъектаДО <> Неопределено И ДанныеОбъектаДО.ID <> "" И ДанныеОбъектаДО.type <> "" Тогда
			КоличествоФайловВДО = ИнтеграцияС1СДокументооборот.КоличествоФайловСвязанногоОбъекта(
				ДанныеОбъектаДО.ID,
				ДанныеОбъектаДО.type);
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоФайловВДО = Неопределено Или КоличествоФайловВДО = 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НаличиеФайлов.ЕстьФайлы
			|ИЗ
			|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
			|ГДЕ
			|	НаличиеФайлов.ОбъектСФайлами = &ВладелецФайлов
			|	И НаличиеФайлов.ЕстьФайлы
			|");
		Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЕстьФайлы = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при получении присоединенных файлов.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ДанныеФайлов - Массив из Структура:
//     * Ссылка - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//     * СсылкаНаДвоичныеДанныеФайла - Строка - адрес во временном хранилище, по которому помещены данные.
//     * ОтносительныйПуть - Строка - относительный путь файла.
//     * ДатаМодификацииУниверсальная - Дата - дата изменения фала.
//     * ИмяФайла - Строка - имя файла.
//     * Наименование - Строка - наименование файла в справочнике хранения файлов.
//     * Расширение - Строка - расширение файла без точки.
//     * Размер - Число - размер файла.
//     * Редактирует - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено - ссылка на
//         пользователя, занявшего файл.
//     * ПодписанЭП - Булево - признак того, что файл подписан.
//     * Зашифрован - Булево - признак того, что файл зашифрован.
//     * Версия - ОпределяемыйТип.ПрисоединенныйФайл - если справочник файлов поддерживает создание
//         версий, содержит ссылку на текущую версию файла. В ином случае содержит ссылку на файл.
//     * НомерВерсии - Число - если справочник файлов поддерживает создание версий, содержит номер
//         текущей версии файла, иначе - 0.
//     * Том - СправочникСсылка.ТомаХраненияФайлов - том хранения файла.
//     * Автор - СправочникСсылка.УчетныеЗаписиСинхронизацииФайлов
//             - СправочникСсылка.Пользователи,
//             - СправочникСсылка.ВнешниеПользователи - автор файла.
//     * СтатусИзвлеченияТекста - ПеречислениеСсылка.СтатусыИзвлеченияТекстаФайлов - статус извлечения текста
//         из файла.
//     * ПолноеНаименованиеВерсии - Строка - если справочник файлов поддерживает создание версий, содержит полное
//         наименование текущей версии файла. В ином случае содержит полное наименование файла.
//     * КодировкаТекущейВерсии - Строка - кодировка текстового файла.
//     * НаЧтение - Булево - признак того, что файл редактируется пользователем, отличным от текущего.
//     * ПолноеИмяФайлаВРабочемКаталоге - Строка - путь к файлу в рабочем каталоге.
//     * ВРабочемКаталогеНаЧтение - Булево - файл в рабочем каталоге помечен только для чтения.
//     * РабочийКаталогВладельца - Строка - путь к рабочему каталогу владельца.
//     * ПапкаДляСохранитьКак - Строка - путь к каталогу сохранения.
//     * ФайлРедактируется - Булево - признак того, что файл занят для редактирования.
//     * ФайлРедактируетТекущийПользователь - Булево - признак того, что файл занят для редактирования
//         текущим пользователем.
//     * Служебный - Булево - признак того, что файл является служебным.
//
Процедура ПриПолученииПрисоединенныхФайлов(ВладелецФайлов, ДанныеФайлов) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриПолученииПрисоединенныхФайлов(
		ВладелецФайлов, ДанныеФайлов, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецФайлов, Файлы);
	
	Для Каждого Файл Из Файлы Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, Неопределено, Истина, Ложь);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СогласованиеВозможно(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
	
	Результат = Новый Структура("Возможно, ОписаниеОшибки", Истина, "");
	
	// Проверим возможность запуска согласования.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПользователюРазрешенЗапускСогласования(
			Параметры.ПредметСогласования, Результат.ОписаниеОшибки) Тогда
		Если Результат.ОписаниеОшибки = "" Тогда // текст по умолчанию
			Результат.ОписаниеОшибки = НСтр("ru = 'Недостаточно прав для запуска согласования в 1С:Документообороте.'");
		КонецЕсли;
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ТипДокумента = Новый Структура("name, ID, type");
	
	// Проверим есть ли связанный объект в ДО.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		// Проверим можно ли создать связанный объект в ДО.
		ПодходящиеПравила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Параметры.ПредметСогласования);
		Если ПодходящиеПравила.Количество() = 0 Тогда
			// Возможно в переопределяемом модуле прописано автоматическое создание правил для данного типа объекта ИС
			СозданныеПравила = ИнтеграцияС1СДокументооборотВызовСервера.
				СоздатьПравилаИнтеграцииАвтоматически(Параметры.ПредметСогласования);
			Если СозданныеПравила.Количество() = 1 Тогда
				ПодходящиеПравила.Добавить(СозданныеПравила[0]);
			ИначеЕсли СозданныеПравила.Количество() > 1 Тогда
				ПодходящиеПравила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Параметры.ПредметСогласования);
			КонецЕсли;
		КонецЕсли;
		Если ПодходящиеПравила.Количество() = 1 Тогда
			ТипДокумента.name = ПодходящиеПравила[0].ПредставлениеОбъектаДО;
			ТипДокумента.ID = ПодходящиеПравила[0].ИдентификаторВидаДокумента;
			ТипДокумента.type = ПодходящиеПравила[0].ТипВидаДокумента;
		Иначе
			Результат.ОписаниеОшибки = НСтр("ru = 'Невозможно автоматически создать связанный документ в ДО.'");
			Результат.Возможно = Ложь;
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
		КонецЕсли;
	Иначе
		// Проверим нет ли уже запущенных бизнес-процессов согласования
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
		Запрос.type = "DMBusinessProcessApproval";
		Запрос.query = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
		УсловияОтбора = Запрос.query.conditions; // СписокXDTO
		
		Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = "target";
		Условие.value = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси,
			СвязанныйОбъектДО.ID, СвязанныйОбъектДО.type);
		
		УсловияОтбора.Добавить(Условие);
		
		Ответ = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		Если Ответ.items.Количество() <> 0 Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Есть запущенные процессы согласования.'");
			Результат.Возможно = Ложь;
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТипДокумента, СвязанныйОбъектДО.documentType);
	КонецЕсли;
	
	// Проверим есть ли шаблон согласования по умолчанию.
	ПодходящиеШаблоны = ИнтеграцияС1СДокументооборотВызовСервера.ШаблоныБизнесПроцесса(
		"ШаблоныСогласования",
		ТипДокумента);
	Если ПодходящиеШаблоны.Количество() <> 1 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Невозможно определить шаблон согласования.'");
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура НачатьСогласование(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
	
	Результат = Новый Структура("ВыполненоУспешно, ОписаниеОшибки", Истина, "");
	
	// Проверим есть ли связанный объект в ДО, в случае отсутствия - попытаемся создать.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		// Попытаемся создать связанный объект.
		ПодходящиеПравила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Параметры.ПредметСогласования);
		Если ПодходящиеПравила.Количество() = 0 Тогда
			// Возможно в переопределяемом модуле прописано автоматическое создание правил для данного типа объекта ИС
			СозданныеПравила = ИнтеграцияС1СДокументооборотВызовСервера.
				СоздатьПравилаИнтеграцииАвтоматически(Параметры.ПредметСогласования);
			Если СозданныеПравила.Количество() = 1 Тогда
				ПодходящиеПравила.Добавить(СозданныеПравила[0]);
			ИначеЕсли СозданныеПравила.Количество() > 1 Тогда
				ПодходящиеПравила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Параметры.ПредметСогласования);
			КонецЕсли;
		КонецЕсли;
		Если ПодходящиеПравила.Количество() = 1 Тогда
			ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьОбъектДОПоПравилу(
				Параметры.ПредметСогласования,
				ПодходящиеПравила[0].Ссылка);
				
			Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда
				// сообщение об ошибке
				Результат.ОписаниеОшибки = ОбъектДОИлиСообщение;
				Результат.ВыполненоУспешно = Ложь;
				ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
				Возврат;
			Иначе
				// структура с описанием созданного объекта результата
				СвязанныйОбъектДО = ОбъектДОИлиСообщение;
				СвязанныйОбъектДО.Вставить("documentType",
					Новый Структура("name, ID, type",
						ПодходящиеПравила[0].ПредставлениеОбъектаДО,
						ПодходящиеПравила[0].ИдентификаторВидаДокумента,
						ПодходящиеПравила[0].ТипВидаДокумента));
			КонецЕсли;
		Иначе
			Результат.ОписаниеОшибки = НСтр("ru = 'Невозможно автоматически создать связанный документ в ДО.'");
			Результат.ВыполненоУспешно = Ложь;
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим есть ли шаблон согласования по умолчанию.
	ПодходящиеШаблоны = ИнтеграцияС1СДокументооборотВызовСервера.ШаблоныБизнесПроцесса(
		"ШаблоныСогласования",
		СвязанныйОбъектДО.documentType);
	Если ПодходящиеШаблоны.Количество() <> 1 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Невозможно определить шаблон согласования.'");
		Результат.ВыполненоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Запустим процесс по шаблону.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ЗапуститьСогласованиеПоШаблону(
			ПодходящиеШаблоны[0].Значение, СвязанныйОбъектДО) Тогда
		Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось запустить согласование по шаблону ""%1"".'"),
			ПодходящиеШаблоны[0].Значение.name);
		Результат.ВыполненоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ПрерываниеСогласованияВозможно(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
	
	Результат = Новый Структура("Возможно, ОписаниеОшибки", Истина, "");
	
	// Проверим существование связанного объекта.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Связанный документ в ДО не найден.'");
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Проверим возможность прерывания согласования.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПользователюРазрешеноПрерываниеСогласования(
			Параметры.ПредметСогласования, СвязанныйОбъектДО, Результат.ОписаниеОшибки) Тогда
		Если Результат.ОписаниеОшибки = "" Тогда // предупреждение по умолчанию
			Результат.ОписаниеОшибки = НСтр("ru = 'Недостаточно прав для прерывания согласования в 1С:Документообороте.'");
		КонецЕсли;
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = "DMBusinessProcessApproval";
	Запрос.query = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	УсловияОтбора = Запрос.query.conditions; // СписокXDTO
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "target";
	Условие.value = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси,
		СвязанныйОбъектДО.ID, СвязанныйОбъектДО.type);
	
	УсловияОтбора.Добавить(Условие);

	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	Если Ответ.items.Количество() = 0 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Нет запущенных процессов согласования.'");
		Результат.Возможно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ПрерватьСогласование(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
	
	Результат = Новый Структура("ВыполненоУспешно, ОписаниеОшибки", Истина, "");
	
	// Найдем связанный объект в ДО.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Связанный документ в ДО не найден.'");
		Результат.ВыполненоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Прервем согласование.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьСогласование(СвязанныйОбъектДО) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось прервать согласование.'");
		Результат.ВыполненоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура СостояниеСогласования(Параметры, АдресРезультата) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		Параметры.ИнтеграцияС1СДокументооборотИмяПользователя,
		Параметры.ИнтеграцияС1СДокументооборотПароль,
		Параметры.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
	
	Результат = Новый Структура("ПолученоУспешно, Состояние, Пояснение", Истина, Неопределено, "");
	
	// Найдем связанный объект в ДО.
	СвязанныйОбъектДО = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(Параметры.ПредметСогласования);
	Если СвязанныйОбъектДО = Неопределено Тогда
		Результат.Пояснение = НСтр("ru = 'Связанный документ в ДО не найден.'");
		Результат.ПолученоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	// Получим объект из ДО.
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси,
		СвязанныйОбъектДО.ID,
		СвязанныйОбъектДО.type);
	СписокОбъектов.Добавить(ОбъектИд);
	ПолучаемыеПоля.Добавить("statusApproval");
	
	Ответ = Прокси.execute(Запрос);
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Результат.Пояснение = СокрЛП(Ответ.description);
		Результат.ПолученоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	ИначеЕсли Ответ.objects.Количество() = 1 Тогда
		Если Ответ.objects[0].statusApproval <> Неопределено
				И Ответ.objects[0].statusApproval.objectID.ID <> "" Тогда
			Результат.Состояние = Перечисления.СостоянияСогласованияВДокументообороте[
				Ответ.objects[0].statusApproval.objectID.ID];
		КонецЕсли;
	Иначе
		Результат.Пояснение = НСтр("ru = 'Не удалось получить статус согласования.'");
		Результат.ПолученоУспешно = Ложь;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Проверяет требуется ли выводить команду присоединенных файлов из библиотеки интеграции с 1С:Документооборотом.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - проверяемая форма.
//
// Возвращаемое значение:
//   Булево - результат проверки.
//
Функция НужноВыводитьКомандуПрисоединенныхФайловДО(Форма)
	
	СтандартнаяОбработка = Истина;
	
	Результат = Ложь;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииНеобходимостиВыводитьКомандуПрисоединенныхФайловДО(
		Форма, Результат, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		ИмяФормыМассив = СтрРазделить(Форма.ИмяФормы, ".");
		ИмяТипаОбъектаФормы = СтрШаблон("%1.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]);
		Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
		
		Если Правила.Количество() = 0 Тогда
			// Возможно в переопределяемом модуле прописано автоматическое создание правил для данного типа объекта ИС
			СозданныеПравила = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьПравилаИнтеграцииАвтоматически(
				ИмяТипаОбъектаФормы);
			Если СозданныеПравила.Количество() > 0 Тогда
				Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
			КонецЕсли;
		КонецЕсли;
		
		Результат = (Правила.Количество() <> 0);
		
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКомандуФайлы(Форма, Знач МестоРазмещенияКоманд)
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	ИмяКоманды = "ИнтеграцияС1СДокументооборотом_Файлы";
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуИнтеграции";
		КомандаФормы.Заголовок = НСтр("ru='Файлы ДО'");
		КомандаФормы.Подсказка = НСтр("ru='Файлы, хранящиеся в 1С:Документооборот'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	ИсходноеИмяЭлемента = "ИнтеграцияС1СДокументооборотом_Файлы";
	
	ИмяЭлемента = ИсходноеИмяЭлемента;
	Пока Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Цикл
		ИмяЭлемента = Форма.Элементы.Найти(ИмяЭлемента).Имя;
		Итератор = СтрЗаменить(ИмяЭлемента, ИсходноеИмяЭлемента, "");
		Итератор = Число(?(ПустаяСтрока(Итератор),"0",Итератор));
		Итератор = Итератор + ?(Итератор = 0, 2, 1);
		ИмяЭлемента = ИсходноеИмяЭлемента + Формат(Итератор,"ЧГ=0");
	КонецЦикла;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
	НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

// Добавляет команду переключения хронометража.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения:
//     * Объект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//              - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//   МестоРазмещенияКоманд - ГруппаФормы
//                         - Неопределено
//
Процедура ДобавитьКомандуПереключитьХронометраж(Форма, Знач МестоРазмещенияКоманд)
	
	ЭтаФормаМетаданные = Метаданные.НайтиПоПолномуИмени(Форма.ИмяФормы);
	РодительМетаданные = ЭтаФормаМетаданные.Родитель();
	
	Если ТипЗнч(РодительМетаданные) = Тип("ОбъектМетаданныхКонфигурация")
			Или Метаданные.ЖурналыДокументов.Содержит(РодительМетаданные)
			Или Метаданные.Обработки.Содержит(РодительМетаданные)
			Или Не РодительМетаданные.ОсновнаяФормаОбъекта = ЭтаФормаМетаданные Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Форма.Объект.Ссылка;
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Ссылка);
		ДоступенХронометраж = Ложь;
		Для Каждого Правило Из Правила Цикл
			ДоступенХронометраж = ДоступенХронометраж 
				Или ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(Правило.ТипОбъектаДО)
				Или ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоЗадачаБизнесПроцесса(Правило.ТипОбъектаДО);
		КонецЦикла;
		Если Не ДоступенХронометраж Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Если ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси() <> Неопределено Тогда
				ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.ПараметрыХронометражаОбъекта(Ссылка);
			Иначе
				Возврат;
			КонецЕсли;
		Исключение
			ПредставлениеОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось получить параметры хронометража (%1)'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПредставлениеОшибки);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ИмяКоманды = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж";
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуИнтеграции";
		КомандаФормы.Заголовок = НСтр("ru='Переключить хронометраж'");
		КомандаФормы.Подсказка = НСтр("ru='Переключить хронометраж'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Авто;
		КомандаФормы.Картинка = БиблиотекаКартинок.УстановитьВремя;
	КонецЕсли;
	
	ИсходноеИмяЭлемента = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж";
	
	ИмяЭлемента = ИсходноеИмяЭлемента;
	Пока Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Цикл
		ИмяЭлемента = Форма.Элементы.Найти(ИмяЭлемента).Имя;
		Итератор = СтрЗаменить(ИмяЭлемента, ИсходноеИмяЭлемента, "");
		Итератор = Число(?(ПустаяСтрока(Итератор),"0",Итератор));
		Итератор = Итератор + ?(Итератор = 0, 2, 1);
		ИмяЭлемента = ИсходноеИмяЭлемента + Формат(Итератор,"ЧГ=0");
	КонецЦикла;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Если ПараметрыХронометража.ВключенХронометраж Тогда
			НовыйЭлемент.Пометка = Истина;
		КонецЕсли;
	Иначе
		НовыйЭлемент.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандуУказатьТрудозатраты(Форма, Знач МестоРазмещенияКоманд)
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	ИмяКоманды = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты";
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуИнтеграции";
		КомандаФормы.Заголовок = НСтр("ru='Указать трудозатраты'");
		КомандаФормы.Подсказка = НСтр("ru='Указать трудозатраты'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Авто;
		КомандаФормы.Картинка = БиблиотекаКартинок.ДобавитьВЕжедневныйОтчет;
	КонецЕсли;
		
	ИсходноеИмяЭлемента = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты";
	
	ИмяЭлемента = ИсходноеИмяЭлемента;
	Пока Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Цикл
		ИмяЭлемента = Форма.Элементы.Найти(ИмяЭлемента).Имя;
		Итератор = СтрЗаменить(ИмяЭлемента, ИсходноеИмяЭлемента, "");
		Итератор = Число(?(ПустаяСтрока(Итератор),"0",Итератор));
		Итератор = Итератор + ?(Итератор = 0, 2, 1);
		ИмяЭлемента = ИсходноеИмяЭлемента + Формат(Итератор,"ЧГ=0");
	КонецЦикла;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры	

// Возвращает структуру объекта ДО для заполнения по переданному имени типа.
//
// Параметры:
//   ТипОбъектаДО - Строка - тип объекта, например, DMInternalDocument или DMCorrespondent.
//
// Возвращаемое значение:
//   Структура - реквизиты объекта указанного типа, подлежащие заполнению.
//
Функция СтруктураРеквизитовЗаполняемогоОбъектаДО(ТипОбъектаДО) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	РеквизитыСсылочногоТипа = Новый Структура;
	
	// Реквизиты, общие для всех типов.
	СтруктураРеквизитов.Вставить("ID");
	СтруктураРеквизитов.Вставить("Тип", ТипОбъектаДО);
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("Комментарий");
	
	Если ТипОбъектаДО = "DMCorrespondent" Тогда
		
		СтруктураРеквизитов.Вставить("ИНН");
		СтруктураРеквизитов.Вставить("КПП");
		СтруктураРеквизитов.Вставить("КодПоОКПО");
		СтруктураРеквизитов.Вставить("ПолноеНаименование");
		
	Иначе // документы
		
		СтруктураРеквизитов.Вставить("Описание");
		СтруктураРеквизитов.Вставить("РегистрационныйНомер");
		СтруктураРеквизитов.Вставить("ДатаРегистрации");
		СтруктураРеквизитов.Вставить("СрокИсполнения");
		СтруктураРеквизитов.Вставить("Сумма");
		
		РеквизитыСсылочногоТипа.Вставить("Подписал");
		РеквизитыСсылочногоТипа.Вставить("Подразделение");
		РеквизитыСсылочногоТипа.Вставить("ГрифДоступа");
		РеквизитыСсылочногоТипа.Вставить("ВидДокумента");
		РеквизитыСсылочногоТипа.Вставить("ВопросДеятельности");
		РеквизитыСсылочногоТипа.Вставить("Организация");
		РеквизитыСсылочногоТипа.Вставить("Ответственный");
		РеквизитыСсылочногоТипа.Вставить("Состояние");
		РеквизитыСсылочногоТипа.Вставить("СостояниеСогласование");
		РеквизитыСсылочногоТипа.Вставить("СостояниеУтверждение");
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1.CORP")
				И ТипОбъектаДО = "DMInternalDocument" Тогда
			РеквизитыСсылочногоТипа.Вставить("СостояниеПодписание");
		КонецЕсли;
		РеквизитыСсылочногоТипа.Вставить("СостояниеРассмотрение");
		РеквизитыСсылочногоТипа.Вставить("СостояниеРегистрация");
		РеквизитыСсылочногоТипа.Вставить("СостояниеИсполнение");
		РеквизитыСсылочногоТипа.Вставить("Валюта");
		
		// Шаблоны.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
			РеквизитыСсылочногоТипа.Вставить("Шаблон");
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			РеквизитыСсылочногоТипа.Вставить("Проект");
		КонецЕсли;
		
		// Состав документа
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1") Тогда
			РеквизитыСсылочногоТипа.Вставить("КоличествоЛистов");
			РеквизитыСсылочногоТипа.Вставить("КоличествоПриложений");
			РеквизитыСсылочногоТипа.Вставить("ЛистовВПриложениях");
			РеквизитыСсылочногоТипа.Вставить("КоличествоЭкземпляров");
		КонецЕсли;
		
		// Хранения документа
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.18.1") Тогда
			РеквизитыСсылочногоТипа.Вставить("НоменклатураДел");
			РеквизитыСсылочногоТипа.Вставить("Дело");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипОбъектаДО = "DMInternalDocument" Тогда
		
		СтруктураРеквизитов.Вставить("ДатаНачалаДействия");
		СтруктураРеквизитов.Вставить("ДатаОкончанияДействия");
		СтруктураРеквизитов.Вставить("Бессрочный");
		
		РеквизитыСсылочногоТипа.Вставить("Адресат");
		РеквизитыСсылочногоТипа.Вставить("Папка");
		РеквизитыСсылочногоТипа.Вставить("Подготовил");
		РеквизитыСсылочногоТипа.Вставить("Контрагент");
		РеквизитыСсылочногоТипа.Вставить("КонтактноеЛицо");
		РеквизитыСсылочногоТипа.Вставить("ПорядокПродления");
		РеквизитыСсылочногоТипа.Вставить("Получатель");
		
		СтатьиДДС = Новый ТаблицаЗначений;
		СтатьиДДС.Колонки.Добавить("СтатьяДДС");
		СтатьиДДС.Колонки.Добавить("СтатьяДДСID");
		СтатьиДДС.Колонки.Добавить("СтатьяДДСТип");
		СтатьиДДС.Колонки.Добавить("Сумма");
		СтатьиДДС.Колонки.Добавить("СуммаНДС");
		
		СтруктураРеквизитов.Вставить("СтатьиДДС", СтатьиДДС);
		
		СтруктураРеквизитов.Вставить("СуммаНДС");
		
		Товары = Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("Номенклатура");
		Товары.Колонки.Добавить("НоменклатураID");
		Товары.Колонки.Добавить("НоменклатураТип");
		Товары.Колонки.Добавить("Цена");
		Товары.Колонки.Добавить("Количество");
		Товары.Колонки.Добавить("ЕдиницаИзмерения");
		Товары.Колонки.Добавить("ЕдиницаИзмеренияID");
		Товары.Колонки.Добавить("ЕдиницаИзмеренияТип");
		Товары.Колонки.Добавить("СтавкаНДС");
		Товары.Колонки.Добавить("СтавкаНДСID");
		Товары.Колонки.Добавить("СтавкаНДСТип");
		Товары.Колонки.Добавить("СуммаНДС");
		Товары.Колонки.Добавить("Сумма");
		
		СтруктураРеквизитов.Вставить("Товары", Товары);
		
		Стороны = Новый ТаблицаЗначений;
		Стороны.Колонки.Добавить("ДатаПодписи");
		Стороны.Колонки.Добавить("Комментарий");
		Стороны.Колонки.Добавить("КонтактноеЛицо");
		Стороны.Колонки.Добавить("КонтактноеЛицоID");
		Стороны.Колонки.Добавить("КонтактноеЛицоТип");
		Стороны.Колонки.Добавить("Наименование");
		Стороны.Колонки.Добавить("НаименованиеID");
		Стороны.Колонки.Добавить("НаименованиеТип");
		Стороны.Колонки.Добавить("Подписал");
		Стороны.Колонки.Добавить("ПодписалID");
		Стороны.Колонки.Добавить("ПодписалТип");
		Стороны.Колонки.Добавить("Подписан");
		Стороны.Колонки.Добавить("Сторона");
		Стороны.Колонки.Добавить("СторонаID");
		Стороны.Колонки.Добавить("СторонаТип");
		Стороны.Колонки.Добавить("Установил");
		Стороны.Колонки.Добавить("УстановилID");
		Стороны.Колонки.Добавить("УстановилТип");
		
		СтруктураРеквизитов.Вставить("Стороны", Стороны);
		
		Контрагенты = Новый ТаблицаЗначений;
		Контрагенты.Колонки.Добавить("Контрагент");
		Контрагенты.Колонки.Добавить("КонтрагентID");
		Контрагенты.Колонки.Добавить("КонтрагентТип");
		Контрагенты.Колонки.Добавить("КонтактноеЛицо");
		Контрагенты.Колонки.Добавить("КонтактноеЛицоID");
		Контрагенты.Колонки.Добавить("КонтактноеЛицоТип");
		Контрагенты.Колонки.Добавить("ПодписалОтКонтрагента");
		Контрагенты.Колонки.Добавить("ПодписалОтКонтрагентаID");
		Контрагенты.Колонки.Добавить("ПодписалОтКонтрагентаТип");
		
		СтруктураРеквизитов.Вставить("Контрагенты", Контрагенты);
		
	ИначеЕсли ТипОбъектаДО = "DMIncomingDocument" Тогда
		
		СтруктураРеквизитов.Вставить("НомерОтправителя");
		СтруктураРеквизитов.Вставить("ДатаОтправителя");
		
		РеквизитыСсылочногоТипа.Вставить("Отправитель");
		РеквизитыСсылочногоТипа.Вставить("Адресат");
		РеквизитыСсылочногоТипа.Вставить("СпособПолучения");
		
	ИначеЕсли ТипОбъектаДО = "DMOutgoingDocument" Тогда
		
		СтруктураРеквизитов.Вставить("НомерПолучателя");
		СтруктураРеквизитов.Вставить("ДатаПолучателя");
		СтруктураРеквизитов.Вставить("Отправлен");
		СтруктураРеквизитов.Вставить("ДатаОтправки");
		
		РеквизитыСсылочногоТипа.Вставить("Получатель");
		РеквизитыСсылочногоТипа.Вставить("Адресат");
		РеквизитыСсылочногоТипа.Вставить("Подготовил");
		РеквизитыСсылочногоТипа.Вставить("СпособОтправки");
		
	ИначеЕсли ТипОбъектаДО = "DMCorrespondent" Тогда
		
		РеквизитыСсылочногоТипа.Вставить("ФизЛицо");
		РеквизитыСсылочногоТипа.Вставить("Ответственный");
		РеквизитыСсылочногоТипа.Вставить("ЮрФизЛицо");
		
	КонецЕсли;
	
	// Развернем реквизиты ссылочного типа, дополнив их ID и типом.
	Для Каждого Реквизит Из РеквизитыСсылочногоТипа Цикл
		
		СтруктураРеквизитов.Вставить(Реквизит.Ключ, Реквизит.Значение);
		СтруктураРеквизитов.Вставить(Реквизит.Ключ + "ID", Реквизит.Значение);
		СтруктураРеквизитов.Вставить(Реквизит.Ключ + "Тип", Реквизит.Значение);
		
	КонецЦикла;
	
	// Пометка удаления.
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1") Тогда
		СтруктураРеквизитов.Вставить("ПометкаУдаления");
	КонецЕсли;
	
	// Заполним дополнительные свойства.
	ДополнительныеСвойства = Новый ТаблицаЗначений;
	ДополнительныеСвойства.Колонки.Добавить("Свойство");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоТип");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоID");
	ДополнительныеСвойства.Колонки.Добавить("Значение");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеТип");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеID");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СписокЗначений"));
	
	ДополнительныеСвойства.Колонки.Добавить("СписокДоступныхТипов", Новый ОписаниеТипов(МассивТипов));
	
	СтруктураРеквизитов.Вставить("Свойства", ДополнительныеСвойства);
	
	// Заполним файлы документов.
	Если ТипОбъектаДО <> "DMCorrespondent" Тогда
		
		Файлы = Новый ТаблицаЗначений;
		Файлы.Колонки.Добавить("Тип");
		Файлы.Колонки.Добавить("Наименование");
		Файлы.Колонки.Добавить("Описание");
		Файлы.Колонки.Добавить("Автор");
		Файлы.Колонки.Добавить("ID");
		Файлы.Колонки.Добавить("Размер");
		Файлы.Колонки.Добавить("Расширение");
		Файлы.Колонки.Добавить("ДатаСоздания");
		Файлы.Колонки.Добавить("ДатаМодификацииУниверсальная");
		Файлы.Колонки.Добавить("ДвоичныеДанные");
		Файлы.Колонки.Добавить("ШаблонID");
		
		СтруктураРеквизитов.Вставить("Файлы", Файлы);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Определяет, является ли текущий сеанс сеансом фонового или регламентного задания..
//
Функция ЭтоЗадание()
	
	УстановитьПривилегированныйРежим(Истина);
	НомерСеанса = НомерСеансаИнформационнойБазы();
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Если Сеансы <> Неопределено Тогда
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				Возврат Сеанс.ИмяПриложения = "BackgroundJob" Или Сеанс.ИмяПриложения = "JobScheduler";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет, является ли версия сервиса более свежей или такой же, как требуемая версия.
// 
// Параметры:
//   ОписаниеВерсииСервиса - Массив - массив из 4-5 элементов, составляющий полный номер версии
//   ТребуемаяВерсия - Строка - строка с номером требуемой версии
//
// Возвращаемое значение:
//   Булево - Истина, если описание версии - не меньше требуемой версии
//
Функция ВерсияНеМеньше(ОписаниеВерсииСервиса, ТребуемаяВерсия)
	
	ОписаниеТребуемойВерсии = РазложитьСтрокуВМассивПодстрок(ТребуемаяВерсия, ".");
	Если ОписаниеТребуемойВерсии.Количество() <> 5 Тогда
		ОписаниеТребуемойВерсии.Добавить("PROF");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ОписаниеВерсииСервиса0 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[0]);
	ОписаниеТребуемойВерсии0 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[0]);
	ОписаниеВерсииСервиса1 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[1]);
	ОписаниеТребуемойВерсии1 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[1]);
	ОписаниеВерсииСервиса2 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[2]);
	ОписаниеТребуемойВерсии2 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[2]);
	ОписаниеВерсииСервиса3 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[3]);
	ОписаниеТребуемойВерсии3 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[3]);
	
	НомерНеМеньше = Ложь;
	Если ОписаниеВерсииСервиса0 > ОписаниеТребуемойВерсии0 Тогда
		НомерНеМеньше = Истина;
	ИначеЕсли ОписаниеВерсииСервиса0 = ОписаниеТребуемойВерсии0 Тогда
		Если ОписаниеВерсииСервиса1 > ОписаниеТребуемойВерсии1 Тогда
			НомерНеМеньше = Истина;
		ИначеЕсли ОписаниеВерсииСервиса1 = ОписаниеТребуемойВерсии1 Тогда
			Если ОписаниеВерсииСервиса2 > ОписаниеТребуемойВерсии2 Тогда
				НомерНеМеньше = Истина;
			ИначеЕсли ОписаниеВерсииСервиса2 = ОписаниеТребуемойВерсии2 Тогда
				Если ОписаниеВерсииСервиса3 >= ОписаниеТребуемойВерсии3 Тогда
					НомерНеМеньше = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерНеМеньше
		И ((ОписаниеВерсииСервиса[4] = ОписаниеТребуемойВерсии[4]) Или ОписаниеВерсииСервиса[4] = "CORP");
	
КонецФункции

// Устанавливает ссылку нового объекта согласно идентификатору в дополнительных свойствах.
//
// Параметры:
//   Объект - ДокументОбъект, СправочникОбъект - записываемый объект
//
Процедура УстановитьСсылкуНовогоПередЗаписьюОбъекта(Объект)
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ИдентификаторОбъектаДО")
		Или Не Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбъектаДО = Объект.ДополнительныеСвойства.ИдентификаторОбъектаДО;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторОбъектаДО);
	ПолноеИмя = Объект.Метаданные().ПолноеИмя();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	СсылкаПоИдентификатору = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	" + ПолноеИмя + "
		|ГДЕ
		|	Ссылка = &СсылкаПоИдентификатору");
	Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Объект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, описывающую "подчиненные" константы для указанной "родительской" константы.
//
// Параметры:
//   ИмяРодительскойКонстанты - Строка - имя константы как оно задано в конфигураторе.
//   ЗначениеРодительскойКонстанты - Произвольный - значение константы.
//
// Возвращаемое значение:
//   Структура:
//     * Ключ - Строка - имя подчиненной константы.
//     * Значение - Произвольный - значение подчиненной константы, соответствующее значению родительской константы.
//
Функция ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты)
	
	Результат = Новый Структура;
	ТаблицаКонстант = ЗависимостиКонстант();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Для Каждого СтрокаТаблицы Из ПодчиненныеКонстанты Цикл
		Результат.Вставить(СтрокаТаблицы.ИмяПодчиненнойКонстанты, СтрокаТаблицы.ЗначениеПодчиненнойКонстанты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает версию сервиса, обратившись к нему напрямую.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - истина, если используется аутентификация ОС (8.3.7 и выше).
//
Функция ПолучитьВерсиюВызовомСервиса(ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС)
	
	Прокси = ПолучитьПрокси(Ложь, // не вызывать исключение
		ИмяПользователя,
		Пароль,
		ИспользуетсяАутентификацияОС);
	
	Если Прокси = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Сервис недоступен'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат "0.0.0.0";
	Иначе
		Запрос = СоздатьОбъект(Прокси, "DMGetVersionRequest");
		Ответ = Прокси.execute(Запрос);
		Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
			ТекстОшибки = Ответ.description;
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			Возврат "0.0.0.0";
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Подключен сервис версии %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Ответ.versionNumber);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				ТекстСообщения);
			Возврат Ответ.versionNumber;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Заполняет указанный реквизит таблицы по свойству объекта XDTO.
//
// Параметры:
//   ЗаполняемыйОбъект - ДанныеФормыСтруктура, ДанныеФормыКоллекция - заполняемый объект или таблица.
//   ОписаниеРеквизита - Строка, Структура, Массив - описание заполняемого реквизита.
//   ОбъектXDTO - ОбъектXDTO, СписокXDTO - источник данных заполнения.
//   ИмяСвойства - Строка - имя свойства-источника для объектов XDTO, или
//               - Неопределено - для списков XDTO.
//
Процедура ЗаполнитьРеквизитИзОбъектаXDTO(ЗаполняемыйОбъект, ОписаниеРеквизита, ОбъектXDTO, ИмяСвойства = Неопределено)
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда // заполнение коллекции (таблицы формы)
		
		ЗаполняемыйОбъект.Очистить();
		Для Каждого ЗначениеСвойстваXDTO Из ОбъектXDTO Цикл
			ЗаполняемыйЭлемент = ЗаполняемыйОбъект.Добавить();
			Для Каждого СтрокаСоответствия Из ОписаниеРеквизита Цикл
				ЗаполнитьРеквизитИзОбъектаXDTO(
					ЗаполняемыйЭлемент,
					СтрокаСоответствия.Значение,
					ЗначениеСвойстваXDTO,
					СтрокаСоответствия.Ключ);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ОбъектXDTO.Свойства().Получить(ИмяСвойства) <> Неопределено
		И ОбъектXDTO.Установлено(ИмяСвойства) Тогда // заполнение реквизита (объекта)
		
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойства];
		Если ТипЗнч(ОписаниеРеквизита) = Тип("Строка") Тогда
			Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда // описание ссылки
				ЗаполняемыйОбъект[ОписаниеРеквизита + "Тип"] = ЗначениеСвойстваXDTO.objectID.type;
				ЗаполняемыйОбъект[ОписаниеРеквизита + "ID"] = ЗначениеСвойстваXDTO.objectID.ID;
				ЗаполняемыйОбъект[ОписаниеРеквизита] = ЗначениеСвойстваXDTO.name;
			Иначе // примитивный тип
				ЗаполняемыйОбъект[ОписаниеРеквизита] = ЗначениеСвойстваXDTO;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОписаниеРеквизита) = Тип("Структура") Тогда
			Для Каждого СтрокаСоответствия Из ОписаниеРеквизита Цикл
				ЗаполнитьРеквизитИзОбъектаXDTO(
					ЗаполняемыйОбъект,
					СтрокаСоответствия.Значение,
					ЗначениеСвойстваXDTO,
					СтрокаСоответствия.Ключ);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ОписаниеРеквизита) = Тип("Массив") Тогда
			ЗаполнитьРеквизитИзОбъектаXDTO(
				ЗаполняемыйОбъект[ОписаниеРеквизита[0]],
				ОписаниеРеквизита[1],
				ЗначениеСвойстваXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизоватьРеквизитИТЧКонтрагенты(Прокси, ОбъектXDTO)
	
	Если Не ИнтеграцияС1СДокументооборот.СвойствоСуществует(ОбъектXDTO, "correspondentRows") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектXDTO.correspondentRows.rows.Количество() > 0 Тогда
		Строка = ОбъектXDTO.correspondentRows.rows[0];
		Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Строка, "correspondent") Тогда
			СкопироватьКонтрагентаXDTO(Прокси, Строка.correspondent, ОбъектXDTO.correspondent);
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Строка, "contact") Тогда
			СкопироватьКонтактноеЛицоXDTO(Прокси, Строка.contact, ОбъектXDTO.contactPerson);
		КонецЕсли;
	Иначе
		Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "correspondent") Тогда
			СтрокаXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCorrespondentRow");
			
			СкопироватьКонтрагентаXDTO(Прокси, ОбъектXDTO.correspondent, СтрокаXDTO.correspondent);
			Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(ОбъектXDTO, "contactPerson") Тогда
				СкопироватьКонтактноеЛицоXDTO(Прокси, ОбъектXDTO.contactPerson, СтрокаXDTO.contact);
			КонецЕсли;
			
			ОбъектXDTO.correspondentRows.rows.Добавить(СтрокаXDTO);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьКонтрагентаXDTO(Прокси, Источник, Приемник)
	
	Приемник = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCorrespondent");
	Приемник.name = Источник.name;
	Приемник.objectID = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	Приемник.objectID.ID = Источник.objectID.ID;
	Приемник.objectID.type = Источник.objectID.type;
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Источник, "externalObject") Тогда
		Приемник.externalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
		Приемник.externalObject.name = Источник.externalObject.name;
		Приемник.externalObject.ID = Источник.externalObject.ID;
		Приемник.externalObject.type = Источник.externalObject.type;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Источник, "legalPrivatePerson") Тогда
		Приемник.legalPrivatePerson = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMLegalPrivatePerson");
		Приемник.legalPrivatePerson.name = Источник.legalPrivatePerson.name;
		Приемник.legalPrivatePerson.objectID = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		Приемник.legalPrivatePerson.objectID.ID = Источник.legalPrivatePerson.objectID.ID;
		Приемник.legalPrivatePerson.objectID.type = Источник.legalPrivatePerson.objectID.type;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Источник, "inn") Тогда
		Приемник.inn = Источник.inn;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Источник, "kpp") Тогда
		Приемник.kpp = Источник.kpp;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьКонтактноеЛицоXDTO(Прокси, Источник, Приемник)
	
	Приемник = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMContactPerson");
	Приемник.name = Источник.name;
	Приемник.objectID = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	Приемник.objectID.ID = Источник.objectID.ID;
	Приемник.objectID.type = Источник.objectID.type;
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Источник, "externalObject") Тогда
		Приемник.externalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
		Приемник.externalObject.name = Источник.externalObject.name;
		Приемник.externalObject.ID = Источник.externalObject.ID;
		Приемник.externalObject.type = Источник.externalObject.type;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Источник, "position") Тогда
		Приемник.position = Источник.position;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Источник, "comment") Тогда
		Приемник.comment = Источник.comment;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот.СвойствоУстановлено(Источник, "correspondent") Тогда
		СкопироватьКонтрагентаXDTO(Прокси, Источник.correspondent, Приемник.correspondent);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти