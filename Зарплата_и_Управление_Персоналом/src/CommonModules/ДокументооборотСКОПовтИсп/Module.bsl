////////////////////////////////////////////////////////////////////////////////
//
// Серверные процедуры и функции регламентированных отчетов общего назначения 
// с кешируемым результатом на время сеанса.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция PostЗапросОператору(ИмяМетода) Экспорт
	
	Оператор = Перечисления.СпецоператорыСвязи.КалугаАстрал;
	ВебСервисОпределение = ДокументооборотСКОПовтИсп.ПолучитьПараметрСпецоператора(Оператор, "ВебСервисОпределение");
	
	Адрес = СтрРазделить(ВебСервисОпределение, "?")[0];
	
	Соединение = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(Адрес + "/" + ИмяМетода);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Запрос = Новый HTTPЗапрос("/regservice.asmx/" + ИмяМетода, Заголовки);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'Не удалось получить данные с сервера Калуги-Астрал по причине: '") + ИнформацияОбОшибке;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. '") + ИмяМетода,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции

Функция ДанныеУЦИзВебСервиса(Спецоператор) Экспорт
	
	Спецоператор = Перечисления.СпецоператорыСвязи.КалугаАстрал;
	
	Сервис = ДокументооборотСКОПовтИсп.ОбменССерверомСоздатьСервис(Спецоператор,,,,Ложь);
	
	Если Сервис = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		XDTOРезультат = Сервис.GetCaInfo1C(РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить наименование УЦ:
					|%1'"), ИнформацияОбОшибке().Описание);
					
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
			ТекстОшибки, 
			, 
			, 
			Ложь);
			
		Возврат Неопределено;
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XDTOРезультат);
	
	ПостроительДОМ 	= Новый ПостроительDOM();
	ДОМ 			= ПостроительДОМ.Прочитать(ЧтениеXML);
	УзелDOM 		= ДОМ.ПолучитьЭлементыПоИмени("code");
	кодРезультата 	= УзелDOM[0].ТекстовоеСодержимое;
	
	
	Если кодРезультата = "0" Тогда
		
		УзелDOM 		= ДОМ.ПолучитьЭлементыПоИмени("ca");
		НаименованиеУЦ 	= УзелDOM[0].ТекстовоеСодержимое;
		
		УзелDOM 		= ДОМ.ПолучитьЭлементыПоИмени("caReglament");
		АдресРегламента = УзелDOM[0].ТекстовоеСодержимое;
		АдресРегламента = РаскодироватьСтроку(АдресРегламента, СпособКодированияСтроки.КодировкаURL);
		
		УзелDOM 		= ДОМ.ПолучитьЭлементыПоИмени("toWhom");
		Получатель		= УзелDOM[0].ТекстовоеСодержимое;		
		
		УзелDOM 		= ДОМ.ПолучитьЭлементыПоИмени("address");
		АдресУЦ			= УзелDOM[0].ТекстовоеСодержимое;
		
		Результат = Новый Структура();
		Результат.Вставить("НаименованиеУЦ",  НаименованиеУЦ);
		Результат.Вставить("РегламентУЦ", 	АдресРегламента);
		Результат.Вставить("ПолучательЗаявленияВУЦ", Получатель);
		Результат.Вставить("АдресУЦ", АдресУЦ);
		
		Возврат Результат;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
КонецФункции

Функция ПолучитьПараметрыОператораСвязи(Знач Спецоператор) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Макет = КонтекстЭДОСервер.ПолучитьМакет("ПараметрыСпецоператоровСвязи");
	
	// Инициализируем ключи, чтобы не было падения при попытке получить значение из Неопределено
	Результат = Новый Структура();
	Для НомерСтолбца = 1 По Макет.ШиринаТаблицы Цикл
		Ключ = Макет.Область(0, НомерСтолбца, 0, НомерСтолбца).Имя;
		Результат.Вставить(Ключ, "");
	КонецЦикла;

	Если ЗначениеЗаполнено(Спецоператор) Тогда
		
		Если ТипЗнч(Спецоператор) = Тип("ПеречислениеСсылка.СпецоператорыСвязи") Тогда
			ИмяСпецоператора = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьИмяЗначенияПеречисленияСпецоператорыСвязиПоСинониму(Спецоператор);
		Иначе
			ИмяСпецоператора = Спецоператор.Имя;
		КонецЕсли;
		
		Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
			
			ИмяТекущейСтроки = Макет.Область(НомерСтроки, 1).Текст;
			
			Если НРег(ИмяТекущейСтроки) = НРег(ИмяСпецоператора) Тогда
				
				Для НомерСтолбца = 1 По Макет.ШиринаТаблицы Цикл
					
					Ключ = Макет.Область(0, НомерСтолбца, 0, НомерСтолбца).Имя;
					Значение = Макет.Область(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца).Текст;
					
					Результат[Ключ] = Значение;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбменССерверомСоздатьСервисНизкоуровневый(СпецОператорСвязи, ПараметрыРесурса = Неопределено) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Сервис", Неопределено);
	Результат.Вставить("КраткаяОшибка", "");
	Результат.Вставить("ПолнаяОшибка",  "");
	
	Если ПараметрыРесурса = Неопределено Тогда
		Определение 				= ДокументооборотСКОПовтИсп.ПолучитьПараметрСпецоператора(СпецОператорСвязи, "ВебСервисОпределение");
		URIПространстваИменСервиса 	= ДокументооборотСКОПовтИсп.ПолучитьПараметрСпецоператора(СпецОператорСвязи, "ВебСервисURIПространстваИменСервиса");
		ИмяСервиса 					= ДокументооборотСКОПовтИсп.ПолучитьПараметрСпецоператора(СпецОператорСвязи, "ВебСервисИмяСервиса");
		ИмяТочкиПодключения 		= ДокументооборотСКОПовтИсп.ПолучитьПараметрСпецоператора(СпецОператорСвязи, "ВебСервисИмяТочкиПодключения");
		
	Иначе
		Определение 				= ПараметрыРесурса.Определение;
		URIПространстваИменСервиса 	= ПараметрыРесурса.URIПространстваИменСервиса;
		ИмяСервиса 					= ПараметрыРесурса.ИмяСервиса;
		ИмяТочкиПодключения 		= ПараметрыРесурса.ИмяТочкиПодключения;
	КонецЕсли;
	
	Попытка
		
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL 				= Определение;
		ПараметрыПодключения.URIПространстваИмен 	= URIПространстваИменСервиса;
		ПараметрыПодключения.ИмяСервиса 			= ИмяСервиса;
		ПараметрыПодключения.ИмяТочкиПодключения 	= ИмяТочкиПодключения;
		ПараметрыПодключения.ИмяПользователя 		= "";
		ПараметрыПодключения.Пароль 				= "";
		ПараметрыПодключения.Таймаут 				= 200;
		
		Сервис = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Результат.Сервис = Сервис;
		
		Возврат Результат;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.КраткаяОшибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Результат.ПолнаяОшибка  = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписьЖурналаРегистрации(
			"Электронный документооборот с контролирующими органами.Создание клиента сервиса",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			Результат.ПолнаяОшибка);
			
		Возврат Результат;
			
	КонецПопытки;
	
КонецФункции

Функция ОбменССерверомСоздатьСервис(
		СпецОператорСвязи 		= Неопределено, 
		ЗапомнитьОшибку 		= Ложь, 
		ОписаниеОшибки			= "", 
		ПараметрыРесурса 		= Неопределено, 
		ВыводитьСообщения 		= Истина) Экспорт
	
	Результат = ДокументооборотСКОПовтИсп.ОбменССерверомСоздатьСервисНизкоуровневый(СпецОператорСвязи, ПараметрыРесурса);
	
	Если Результат.Сервис = Неопределено Тогда
		
		Если ВыводитьСообщения Тогда
			
			Если НЕ ЗапомнитьОшибку Тогда 
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Результат.КраткаяОшибка);
			КонецЕсли;
			
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
				НСтр("ru = 'Ошибка соединения с сервисом регистрации!'"), 
				ЗапомнитьОшибку, 
				Результат.ПолнаяОшибка, 
				Истина);
				
		КонецЕсли;
			
		Возврат Неопределено;
			
	Иначе
		Возврат Результат.Сервис;
	КонецЕсли;
				
КонецФункции

Функция ПолучитьПараметрСпецоператора(Знач Спецоператор, Параметр) Экспорт
	
	ПараметрыСпецоператора = ДокументооборотСКОПовтИсп.ПолучитьПараметрыОператораСвязи(Спецоператор);
	Возврат ПараметрыСпецоператора[Параметр];
	
КонецФункции

Функция СоздатьКлиентСервисаПоСпецоператоруСвязи(СпецоператорСвязи) Экспорт
	
	Результат = Новый Структура("Выполнено", Истина);
	
	Обмен = ДокументооборотСКОПовтИсп.ОбменССерверомСоздатьСервисНизкоуровневый(СпецОператорСвязи);
	
	Если Обмен.Сервис = Неопределено Тогда
		Результат.Выполнено = Ложь;
 		Результат.Вставить("ОписаниеОшибки", Обмен.КраткаяОшибка);
	Иначе
		Результат.Вставить("КлиентСервиса", Обмен.Сервис);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция КодРегиона(АдресЮридический) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ЭтоАдресПоФИАСу   = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридический);
	
	Если ЭтоАдресПоФИАСу Тогда	
		
		СведенияОбАдресе = КонтекстЭДОСервер.СведенияОбАдресе(АдресЮридический);
		КодРегиона 		 = СведенияОбАдресе.КодРегиона;
		
	Иначе
		
		КодРегиона = КонтекстЭДОСервер.РазобратьСтрокуАдреса(АдресЮридический, ",");
		
	КонецЕсли;
	
	Возврат КодРегиона;
	
КонецФункции

Функция УчетнаяЗаписьОблачнойПодписьПоОтпечатку(ОтпечатокСертификата) Экспорт
	
	Результат = Неопределено;
	
	Если КриптографияЭДКО.ИспользованиеОблачнойПодписиВозможно() Тогда
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		НашлиСертификат = МодульСервисКриптографииDSS.НайтиСертификат(Новый Структура("Отпечаток", ОтпечатокСертификата));
		Результат = ?(НЕ НашлиСертификат.Выполнено, Неопределено, НашлиСертификат.УчетнаяЗапись);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти