
#Область СлужебныйПрограммныйИнтерфейс

Функция НаименованиеОрганизацииПоУмолчанию() Экспорт
	
	Возврат "Организация";
	
КонецФункции

Функция СоздатьЕдинственнуюОрганизацию() Экспорт
	
	Если Не Справочники.Организации.Выбрать().Следующий() Тогда
		// Если справочник пустой, создадим организацию.
		Организация = Справочники.Организации.СоздатьЭлемент();
		Организация.Наименование = НаименованиеОрганизацииПоУмолчанию();
		Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Организация.Записать();
		
		Возврат Организация.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ВыполнитьОбновлениеНастроекПрограммыПослеПереносаДанных(ПараметрыНастроекЗК) Экспорт
	
	ПараметрыНастроекЗК.ПараметрыПланВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	ПараметрыНастроекЗК.ПараметрыПланВидовРасчета.НачальнаяНастройкаПрограммы = Ложь;
	
	СохраненныеНастройкиХранилище = Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Получить();
	Настройки = СохраненныеНастройкиХранилище.Получить();
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый Структура;
	Иначе
		
		Если Настройки.Свойство("СсылкиНачисленийУдержаний") Тогда
			КоллекцияСсылок = КоллекцияСуществующихСсылок(Настройки.СсылкиНачисленийУдержаний);
			ЗаполнитьЗначенияСвойств(ПараметрыНастроекЗК.ПараметрыПланВидовРасчета.СсылкиНачисленийУдержаний, КоллекцияСсылок);
		КонецЕсли;
		
		Если Настройки.Свойство("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты") Тогда
			КоллекцияСсылок = КоллекцияСуществующихСсылок(Настройки.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты);
			ЗаполнитьЗначенияСвойств(ПараметрыНастроекЗК.ПараметрыПланВидовРасчета.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты, КоллекцияСсылок);
		КонецЕсли;
		
		Если Настройки.Свойство("СсылкиПоказателиРасчетаЗарплаты") Тогда
			КоллекцияСсылок = КоллекцияСуществующихСсылок(Настройки.СсылкиПоказателиРасчетаЗарплаты);
			ЗаполнитьЗначенияСвойств(ПараметрыНастроекЗК.ПараметрыПланВидовРасчета.СсылкиПоказателиРасчетаЗарплаты, КоллекцияСсылок);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ЗаписатьНастройкиЗарплатаКадры(ПараметрыНастроекЗК);
	
	ПараметрыПланВидовРасчета = ПараметрыНастроекЗК.ПараметрыПланВидовРасчета;
	
	Настройки.Вставить("СсылкиНачисленийУдержаний", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиНачисленийУдержаний));
	Настройки.Вставить("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты));
	Настройки.Вставить("СсылкиПоказателиРасчетаЗарплаты", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиПоказателиРасчетаЗарплаты));
	
	СохраняемыеЗначения = Новый ХранилищеЗначения(Настройки);
	Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Установить(СохраняемыеЗначения);
	
КонецПроцедуры

Функция ВыполняетсяНачальнаяНастройкаПрограммы() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ВыполнятьНачальнуюНастройкуПрограммы");

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоступенПереносДанныхИзПрежнихПрограмм(НеВыполнятьНачальнуюНастройкуПрограммы) Экспорт

	Если НеВыполнятьНачальнуюНастройкуПрограммы = Неопределено Тогда
		НеВыполнятьНачальнуюНастройкуПрограммы = Константы.НеВыполнятьНачальнуюНастройкуПрограммы.Получить();
	КонецЕсли;
	
	Возврат НеВыполнятьНачальнуюНастройкуПрограммы И ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежимеЗарплатаКадрыРасширенная");

КонецФункции 

#Область НачальнаяНастройкаПрограммы

Процедура ДополнитьФормуНачальнаяНастройкаПрограммы(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ДополнитьФормуНачальнаяНастройкаПрограммы(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру значениями реквизитов формы, которые необходимо сохранить.
// Параметры:
//		СохраняемыеРеквизиты - структура.
//
Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.НастройкиПрограммыВРеквизитыФормы(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ПолучитьНастройкиПрограммы(НастройкиПрограммы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиНастройкиПрограммы(НастройкиПрограммы, ТабДокумент) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ВывестиНастройкиПрограммы(НастройкиПрограммы, ТабДокумент);
	КонецЕсли;

КонецПроцедуры

Функция ОписаниеПараметровНачальнойНастройкиПрограммы() Экспорт
	
	ПараметрыПрограммы = Новый Структура("
	|ИспользоватьНесколькоОрганизаций,
	|ИспользоватьНачислениеЗарплаты,
	|РаботаВБюджетномУчреждении,
	|ИспользоватьВоеннуюСлужбу,
	|ИспользоватьГосударственнуюСлужбу,
	|ИспользоватьМуниципальнуюСлужбу,
	|ИспользоватьПодработки,
	|ИспользоватьСтатьиФинансирования,
	|ИспользуетсяВнебюджетнаяДеятельность,
	|НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим,
	|ИспользоватьРасчетСохраняемогоДенежногоСодержания,
	|ИспользоватьУчетКлассныхЧинов,
	|ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников,
	|ИспользоватьДоступКНаркотическимСредствам,
	|ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА,
	|ИспользоватьАккредитациюСпециалистов,
	|ИспользоватьМедицинскоеУчреждение,
	|РаботаВОбразовательномУчреждении,
	|НастройкиГосударственнойСлужбы");
		
	ПараметрыОрганизации = Новый Структура("
	|Организация,
	|ОрганизацияИндивидуальныйПредприниматель,
	|ИндивидуальныйПредприниматель,
	|РегистрацияВНалоговомОргане,
	|ТерриториальныеУсловияПФР,
	|ПрименяемыеТарифыСтраховыхВзносов,
	|СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев,
	|НастройкиУчетаСтраховыхВзносов,
	|НастройкиУчетаПособийСоциальногоСтрахования,
	|НастройкиСистемыНалогообложения,
	|НастройкиЗарплатаКадрыРасширенная");
	
	ПараметрыНачальнойНастройки = Новый Структура("
	|ТекущаяСтраницаИмя,
	|СохраняемыеЗначения,
	|ЗавершитьНастройку,
	|ПриступитьКПервоначальномуЗаполнению");
	
	ПараметрыНастроекЗК = ЗарплатаКадрыРасширенный.ОписаниеПараметровНастройкиЗарплатаКадры();
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ПараметрыНастроекЗК",  ПараметрыНастроекЗК);
	ПараметрыНастройки.Вставить("ПараметрыОрганизации", ПараметрыОрганизации);
	ПараметрыНастройки.Вставить("ПараметрыПрограммы",   ПараметрыПрограммы);
	ПараметрыНастройки.Вставить("ПараметрыНачальнойНастройки", ПараметрыНачальнойНастройки);
	
	Возврат ПараметрыНастройки;
	
КонецФункции

Процедура ЗаполнитьПараметрыПланВидовРасчетаСохраненнымиЗначениями(ПараметрыПланВидовРасчета) Экспорт

	СохраненныеНастройкиХранилище = Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Получить();
	Настройки = СохраненныеНастройкиХранилище.Получить();
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("СсылкиНачисленийУдержаний") Тогда
			КоллекцияСсылок = КоллекцияСуществующихСсылок(Настройки.СсылкиНачисленийУдержаний);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПланВидовРасчета.СсылкиНачисленийУдержаний, КоллекцияСсылок, Истина);
		КонецЕсли;
		
		Если Настройки.Свойство("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты") Тогда
			КоллекцияСсылок = КоллекцияСуществующихСсылок(Настройки.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПланВидовРасчета.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты, КоллекцияСсылок, Истина);
		КонецЕсли;
		
		Если Настройки.Свойство("СсылкиПоказателиРасчетаЗарплаты") Тогда
			КоллекцияСсылок = КоллекцияСуществующихСсылок(Настройки.СсылкиПоказателиРасчетаЗарплаты);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПланВидовРасчета.СсылкиПоказателиРасчетаЗарплаты, КоллекцияСсылок, Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура НачальнаяНастройкаПрограммыСохранитьНастройки(ПараметрыПланВидовРасчета) Экспорт
	
	СохраненныеНастройкиХранилище = Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Получить();
	Настройки = СохраненныеНастройкиХранилище.Получить();
	Если Настройки = Неопределено Тогда
		Настройки = Новый Структура;
	КонецЕсли;
	
	Настройки.Вставить("СсылкиНачисленийУдержаний", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиНачисленийУдержаний));
	Настройки.Вставить("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты));
	Настройки.Вставить("СсылкиПоказателиРасчетаЗарплаты", Новый ФиксированнаяСтруктура(ПараметрыПланВидовРасчета.СсылкиПоказателиРасчетаЗарплаты));
	
	СохраняемыеЗначения = Новый ХранилищеЗначения(Настройки);
	Константы.НачальнаяНастройкаПрограммыОтветыПользователя.Установить(СохраняемыеЗначения);
	
КонецПроцедуры

Функция КоллекцияСуществующихСсылок(Коллекция)
	
	НоваяКоллекция = Новый Структура;
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		ЗначениеЭлемента = Неопределено;
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) И ОбщегоНазначения.СсылкаСуществует(ЭлементКоллекции.Значение) Тогда
			ЗначениеЭлемента = ЭлементКоллекции.Значение;
		КонецЕсли;
		НоваяКоллекция.Вставить(ЭлементКоллекции.Ключ, ЗначениеЭлемента);
	КонецЦикла;

	Возврат НоваяКоллекция;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "НачальнаяНастройкаПрограммы.НачальнаяНастройкаПрограммыПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Метод обрабатывает первый запуск ИБ.
//
Процедура НачальнаяНастройкаПрограммыПервыйЗапуск() Экспорт
	
	ВыполнятьНачальнуюНастройкуПрограммы = Константы.ВыполнятьНачальнуюНастройкуПрограммы.Получить();
	НеВыполнятьНачальнуюНастройкуПрограммы = Константы.НеВыполнятьНачальнуюНастройкуПрограммы.Получить();
	
	Если ВыполнятьНачальнуюНастройкуПрограммы <> НеВыполнятьНачальнуюНастройкуПрограммы Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ВыполнятьНачальнуюНастройкуПрограммы.Установить(Не ВыполнятьНачальнуюНастройкуПрограммы);
	
КонецПроцедуры

#КонецОбласти