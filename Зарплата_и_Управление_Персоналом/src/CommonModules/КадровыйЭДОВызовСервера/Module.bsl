#Область ПрограммныйИнтерфейс

// Возвращает массив описаний файлов для вывода на диск, отправке по почте, публикации ...
//
// Параметры:
//  ФайлыДляВывода         - Массив, ссылок на присоединенные файлы.
//  ИдентификаторХранилища - УникальныйИдентификатор, идентификатор формы из которой выполняется вывод.
//
// Возвращаемое значение:
//  Массив - описаний выводимых файлов, см. ОписаниеВыводимогоФайла
//
Функция ВыводимыеФайлыПечатныхФорм(ФайлыДляВывода, ИдентификаторХранилища = Неопределено) Экспорт
	
	ВыводимыеФайлы = Новый Массив;
	
	Если ФайлыДляВывода.Количество() > 0 Тогда
		
		ИмяВременногоКаталога = РаботаСФайламиБЗК.ВременныйКаталог();
		Если ИдентификаторХранилища = Неопределено Тогда
			ИдентификаторХранилища = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		ДанныеФайлов = ДанныеФайловПечатныхФорм(ФайлыДляВывода, ИдентификаторХранилища);
		
		Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
			
			// Представление
			Для Каждого ДанныеФайлаПредставления Из ДанныеФайла.Значение.Представления Цикл
				ВыводимыеФайлы.Добавить(ДанныеФайлаПредставления);
			КонецЦикла;
			
			// Упаковка оригинала с подписями
			ИмяФайлаАрхива = ДанныеФайла.Значение.Оригинал.Представление + ".zip";
			ПолноеИмяФайлаАрхива = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
				+ ИмяФайлаАрхива;
			
			ФайлАрхива = Новый ЗаписьZipФайла();
			
			// Оригинал
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
				+ ДанныеФайла.Значение.Оригинал.Представление;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.Значение.Оригинал.АдресВоВременномХранилище);
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
			
			ФайлАрхива.Добавить(ПолноеИмяФайла);
			
			// Подписи
			Для Каждого ДанныеПодписи Из ДанныеФайла.Значение.Подписи Цикл
				
				ПолноеИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
					+ ДанныеПодписи.Представление;
				ПолноеИмяФайлаПодписи = РаботаСФайламиБЗК.УникальноеИмяФайла(ПолноеИмяФайлаПодписи);
				
				ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеПодписи.АдресВоВременномХранилище);
				ДвоичныеДанныеФайла.Записать(ПолноеИмяФайлаПодписи);
				
				ФайлАрхива.Добавить(ПолноеИмяФайлаПодписи);
				
			КонецЦикла;
			
			ОписаниеФайла = ОписаниеВыводимогоФайла();
			
			ОписаниеФайла.Представление = ИмяФайлаАрхива;
			ОписаниеФайла.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ФайлАрхива.ПолучитьДвоичныеДанные(), ИдентификаторХранилища);
			
			ВыводимыеФайлы.Добавить(ОписаниеФайла);
			
		КонецЦикла;
		
		УдалитьФайлы(ИмяВременногоКаталога);
		
	КонецЕсли;
	
	Возврат ВыводимыеФайлы;
	
КонецФункции

// Возвращает массив данных печатных форм объектов.
//
// Параметры:
//  ОписанияПечатныхФорм   - Массив, структур описывающих табличные документы общей формы ПечатьДокументов
//                            Ключи структуры:
//                             * ПечатнаяФорма              - ТабличныйДокумент
//                             * ИдентификаторПечатнойФормы - Строка
//                             * Название                   - Строка
//  ОбъектыПечати          - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ПараметрыПечати        - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ИдентификаторХранилища - УникальныйИдентификатор, идентификатор формы для которой собирается коллекция.
//
// Возвращаемое значение:
//  Массив - данных печатных форм, см. КадровыйЭДО.ДанныеПечатнойФормы
//
Функция ПечатныеФормыОбъектов(ОписанияПечатныхФорм, ОбъектыПечати, ПараметрыПечати, ИдентификаторХранилища) Экспорт
	
	ИмяВременногоКаталога = РаботаСФайламиБЗК.ВременныйКаталог();
	
	ИдентификаторыОбластейОбъектов = Неопределено;
	ДополнительныеПараметры = ПараметрыПечати.ДополнительныеПараметры;
	Если ДополнительныеПараметры.Свойство("ИдентификаторыОбластейОбъектов") Тогда
		ДетализироватьОбластиДокументов = Истина;
		ИдентификаторыОбластейОбъектов = ДополнительныеПараметры.ИдентификаторыОбластейОбъектов;
	Иначе
		ДетализироватьОбластиДокументов = Ложь;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ОписанияФайловПечатныхФорм") Тогда
		ДополнительныеПараметры.Вставить("ОписанияФайловПечатныхФорм",
			КадровыйЭДО.ОписанияФайловПечатныхФорм());
	КонецЕсли;
	
	ОригиналыПечатныхФорм = ДополнительныеПараметры.ОписанияФайловПечатныхФорм.ОригиналыПечатныхФорм;
	ПечатныеФормыОбъектов = ДополнительныеПараметры.ОписанияФайловПечатныхФорм.ПечатныеФормыОбъектов;
	
	РеквизитыОбъектов = РеквизитыАдресацииОбъектов(ОбъектыПечати.ВыгрузитьЗначения());
	ПечатныеФормы = Новый Массив;
	Для Каждого ОписаниеПечатнойФормы Из ОписанияПечатныхФорм Цикл
		
		ИдентификаторПечатнойФормы = КадровыйЭДОКлиентСервер.ТолькоИдентификаторПечатнойФормы(
			ОписаниеПечатнойФормы.ИдентификаторПечатнойФормы);
		
		ПечатныеФормыПоОбъектам = УправлениеПечатью.ПечатныеФормыПоОбъектам(ОписаниеПечатнойФормы.ПечатнаяФорма, ОбъектыПечати);
		Для Каждого СоответствиеОбъектаПечатнойФорме Из ПечатныеФормыПоОбъектам Цикл
			
			ОбъектПечати = СоответствиеОбъектаПечатнойФорме.Ключ;
			ПечатнаяФорма = СоответствиеОбъектаПечатнойФорме.Значение;
			
			Если ТипЗнч(ОбъектПечати) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			ПечатныеФормыОбъекта = ПечатныеФормыОбъектов.Получить(ОбъектПечати);
			Если ПечатныеФормыОбъекта <> Неопределено Тогда
				
				ФайлыПечатнойФормыОбъекта = ПечатныеФормыОбъекта.Получить(ИдентификаторПечатнойФормы);
				Если ФайлыПечатнойФормыОбъекта <> Неопределено Тогда
					
					Для Каждого ФайлПечатнойФормыОбъекта Из ФайлыПечатнойФормыОбъекта Цикл
						
						ОписаниеОригиналовИдентификатора = ОригиналыПечатныхФорм.Получить(ИдентификаторПечатнойФормы);
						Если ОписаниеОригиналовИдентификатора <> Неопределено Тогда
							
							ДанныеПечатнойФормы = ОписаниеОригиналовИдентификатора.Оригиналы.Получить(ФайлПечатнойФормыОбъекта);
							ПечатныеФормы.Добавить(ДанныеПечатнойФормы);
							
						КонецЕсли;
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДетальныеОбласти = Неопределено;
			Если ДетализироватьОбластиДокументов Тогда
				ДетальныеОбласти = ИдентификаторыОбластейОбъектов.Получить(ОбъектПечати);
			КонецЕсли;
			
			ЕстьДетальныеОбласти = ДетальныеОбласти <> Неопределено;
			Если ЕстьДетальныеОбласти Тогда
				
				ДетальныеПечатныеФормыПоОбъектам = УправлениеПечатью.ПечатныеФормыПоОбъектам(ПечатнаяФорма, ДетальныеОбласти);
				Если ДетальныеПечатныеФормыПоОбъектам.Количество() = 0 Тогда
					ЕстьДетальныеОбласти = Ложь;
					Если ДетальныеОбласти.Количество() = 1 Тогда
						
						ЗначениеДетализации = ДетальныеОбласти[0];
						
						ИмяОбласти = ОбъектыПечати.НайтиПоЗначению(ОбъектПечати).Представление;
						ОбластьПечатнойФормы = ОписаниеПечатнойФормы.ПечатнаяФорма.Области.Найти(ИмяОбласти);
						
						Если ОбластьПечатнойФормы <> Неопределено Тогда
							Если ЗначениеДетализации.Значение.НомерСтрокиНачалаОбласти = ОбластьПечатнойФормы.Верх
								И ЗначениеДетализации.Значение.НомерСтрокиОкончаниеОбласти = ОбластьПечатнойФормы.Низ Тогда
								
								ЗначениеДетализации.Представление = ИмяОбласти;
								
								ДетальныеПечатныеФормыПоОбъектам = Новый Соответствие;
								ДетальныеПечатныеФормыПоОбъектам.Вставить(ЗначениеДетализации.Значение, ПечатнаяФорма);
								
								ЕстьДетальныеОбласти = Истина;
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			РасшифровкиИмени = Новый Массив;
			РеквизитыОбъекта = РеквизитыОбъектов.Получить(ОбъектПечати);
			Если РеквизитыОбъекта <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(РеквизитыОбъекта.Номер) Тогда
					РасшифровкиИмени.Добавить(РеквизитыОбъекта.Номер);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеквизитыОбъекта.Дата) Тогда
					РасшифровкиИмени.Добавить(Формат(РеквизитыОбъекта.Дата, "ДФ=ггггММдд"));
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЕстьДетальныеОбласти Тогда
				
				ДанныеПечатнойФормы = КадровыйЭДО.ДанныеПечатнойФормы();
				ДанныеПечатнойФормы.Владелец                   = ОбъектПечати;
				ДанныеПечатнойФормы.ПечатнаяФорма              = ПечатнаяФорма;
				ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = ИдентификаторПечатнойФормы;
				
				ДанныеПечатнойФормы.Название                   = ОписаниеПечатнойФормы.Название;
				
				ЧастиИмени = Новый Массив;
				Если ЗначениеЗаполнено(РеквизитыОбъекта) Тогда
					
					ЗаполнитьЗначенияСвойств(ДанныеПечатнойФормы, РеквизитыОбъекта, "Организация,Сотрудник,ФизическоеЛицо,Дата");
					ДанныеПечатнойФормы.Номер                      = ЗарплатаКадрыОтчеты.НомерНаПечать(
						РеквизитыОбъекта.Номер, РеквизитыОбъекта.НомерПриказа);
					
					Если ЗначениеЗаполнено(РеквизитыОбъекта.ФИО) Тогда
						ДобавитьЧастьИмениФайлаДетализации(ЧастиИмени, РеквизитыОбъекта.ФИО, Истина);
					КонецЕсли;
					
				КонецЕсли;
				
				ДобавитьЧастьИмениФайлаДетализации(ЧастиИмени, ОписаниеПечатнойФормы.Название, Ложь);
				
				Если РасшифровкиИмени.Количество() > 0 Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧастиИмени, РасшифровкиИмени);
				КонецЕсли;
			
				ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					СтрСоединить(ЧастиИмени, " "));
				
				ДанныеПечатнойФормы.ИмяФайла = ИмяФайла;
				
				СоздатьФайлПечатнойФормы(ДанныеПечатнойФормы, ИмяВременногоКаталога, ИдентификаторХранилища);
				ПечатныеФормы.Добавить(ДанныеПечатнойФормы);
				
				Если ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
					
					КадровыйЭДО.ДобавитьОписаниеФайла(
						ПараметрыПечати.ДополнительныеПараметры.ОписанияФайловПечатныхФорм, ДанныеПечатнойФормы)
					
				КонецЕсли;
				
			Иначе
				
				Для Каждого СоответствиеОбъектаДетальнойПечатнойФорме Из ДетальныеПечатныеФормыПоОбъектам Цикл
					
					ОбъектДетализацииПечати = СоответствиеОбъектаДетальнойПечатнойФорме.Ключ;
					ДетальнаяПечатнаяФорма = СоответствиеОбъектаДетальнойПечатнойФорме.Значение;
					
					ДанныеПечатнойФормы = КадровыйЭДО.ДанныеПечатнойФормы();
					ДанныеПечатнойФормы.Владелец                   = ОбъектПечати;
					ДанныеПечатнойФормы.ПечатнаяФорма              = ДетальнаяПечатнаяФорма;
					ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = ИдентификаторПечатнойФормы;
					
					ЭлементДетальнойОбласти = ДетальныеОбласти.НайтиПоЗначению(СоответствиеОбъектаДетальнойПечатнойФорме.Ключ);
					Если ЭлементДетальнойОбласти <> Неопределено Тогда
						ДанныеПечатнойФормы.ИмяОбласти = ЭлементДетальнойОбласти.Представление;
					КонецЕсли;
					
					ДанныеПечатнойФормы.Название                   = ОписаниеПечатнойФормы.Название;
					ЗаполнитьЗначенияСвойств(ДанныеПечатнойФормы, РеквизитыОбъекта, "Организация,Сотрудник,ФизическоеЛицо,Дата");
					ДанныеПечатнойФормы.Номер                      = ЗарплатаКадрыОтчеты.НомерНаПечать(
						РеквизитыОбъекта.Номер, РеквизитыОбъекта.НомерПриказа);
					
					ЧастиИмени = Новый Массив;
					
					ФИОДобавлено = Ложь;
					ОбъектыДетализации = Новый Массив;
					Для Каждого Элемент Из ОбъектДетализацииПечати Цикл
						Если Элемент.Ключ <> "НомерСтрокиНачалаОбласти"
							И Элемент.Ключ <> "НомерСтрокиОкончаниеОбласти" Тогда
							
							ОбъектыДетализации.Добавить(Элемент.Значение);
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ОбъектДетализации Из ОбъектыДетализации Цикл
						
						ЭтоФИО = Ложь;
						Если ТипЗнч(ОбъектДетализации) = Тип("СправочникСсылка.Сотрудники")
							Или ТипЗнч(ОбъектДетализации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
							
							Если ТипЗнч(ОбъектДетализации) = Тип("СправочникСсылка.Сотрудники") Тогда
								ДанныеПечатнойФормы.Сотрудник = ОбъектДетализации;
							Иначе
								ДанныеПечатнойФормы.ФизическоеЛицо = ОбъектДетализации;
							КонецЕсли;
							
							ЭтоФИО = Истина;
							Если ФИОДобавлено Тогда
								Продолжить;
							Иначе
								ФИОДобавлено = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
						ДобавитьЧастьИмениФайлаДетализации(ЧастиИмени, ОбъектДетализации, ЭтоФИО);
						
					КонецЦикла;
					
					ЧастиИмени.Добавить(ОписаниеПечатнойФормы.Название);
					Если РасшифровкиИмени.Количество() > 0 Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧастиИмени, РасшифровкиИмени);
					КонецЕсли;
					
					ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
						СтрСоединить(ЧастиИмени, " "));
					
					ДанныеПечатнойФормы.ИмяФайла = ИмяФайла;
					
					СоздатьФайлПечатнойФормы(ДанныеПечатнойФормы, ИмяВременногоКаталога, ИдентификаторХранилища);
					ПечатныеФормы.Добавить(ДанныеПечатнойФормы);
					
					КадровыйЭДО.ДобавитьОписаниеФайла(
						ПараметрыПечати.ДополнительныеПараметры.ОписанияФайловПечатныхФорм, ДанныеПечатнойФормы);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	Возврат ПечатныеФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция РазблокироватьФормуОбъекта(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = КадровыйЭДО.РазблокироватьОбъектДляИзменений(СсылкаНаОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ФайлыПечатныхФормДляСохраненияНаДиск(СписокФайлов) Экспорт
	
	ФайлыДляСохранения = Новый Массив;
	
	ФайлыПечатныхФорм = ВыводимыеФайлыПечатныхФорм(СписокФайлов);
	Для Каждого ФайлПечатнойФормы Из ФайлыПечатныхФорм Цикл
		
		ФайлыДляСохранения.Добавить(Новый ОписаниеПередаваемогоФайла(
			ФайлПечатнойФормы.Представление, ФайлПечатнойФормы.АдресВоВременномХранилище));
		
	КонецЦикла;
	
	Возврат ФайлыДляСохранения;
	
КонецФункции

Функция ДанныеСертификатовОрганизаций(Организации) Экспорт
	
	Сертификаты = Новый Соответствие;
	ОрганизацииКОбновлению = Новый Соответствие;
	
	ДанныеСертификатов = Новый Структура;
	ДанныеСертификатов.Вставить("Сертификаты", Сертификаты);
	ДанныеСертификатов.Вставить("ОрганизацииКОбновлению", ОрганизацииКОбновлению);
	
	ПодписантыОрганизаций = Неопределено;
	
	СертификатыОрганизаций = СертификатыОрганизацийПоУмолчанию();
	
	Запрос = ЗапросСертификатыОрганизацииПользователя(Организации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ДанныеСертификатов.Сертификаты = СертификатыОрганизаций;
	Иначе
		
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			
			Если ЗначениеЗаполнено(Выборка.Сертификат) Тогда
				
				СертификатыПоУмолчанию = СертификатыОрганизаций.Получить(Выборка.Организация);
				Если СертификатыПоУмолчанию = Неопределено Тогда
					СертификатыПоУмолчанию = Новый Массив;
				КонецЕсли;
				
				ВсеСертификаты = Новый Массив;
				СписокСертификатов = Новый Массив;
				Сертификаты.Вставить(Выборка.Организация, СписокСертификатов);
				
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.Сертификат) Тогда
						Продолжить;
					КонецЕсли;
					
					ВсеСертификаты.Добавить(Выборка.Сертификат);
					Если СертификатыПоУмолчанию.Количество() > 0 Тогда
						Если СертификатыПоУмолчанию.Найти(Выборка.Сертификат) <> Неопределено Тогда
							СписокСертификатов.Добавить(Выборка.Сертификат);
						КонецЕсли;
					Иначе
						СписокСертификатов.Добавить(Выборка.Сертификат);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СертификатыПоУмолчанию.Количество() > 0
					И СертификатыПоУмолчанию.Количество() <> СписокСертификатов.Количество() Тогда
					
					Если СписокСертификатов.Количество() = 0 Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСертификатов, ВсеСертификаты);
					КонецЕсли;
					
					ОрганизацииКОбновлению.Вставить(Выборка.Организация, Истина);
					
				КонецЕсли;
				
			Иначе
				
				Если ПодписантыОрганизаций = Неопределено Тогда
					ПодписантыОрганизаций = ПодписантыОрганизацийПоУмолчанию();
				КонецЕсли;
				
				Подписанты = ПодписантыОрганизаций.Получить(Выборка.Организация);
				Если Подписанты <> Неопределено Тогда
					Сертификаты.Вставить(Выборка.Организация, Подписанты);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеСертификатов;
	
КонецФункции

Процедура ЗаменитьПечатныеФормы(ПечатныеФормыОбъектов, ПечатныеФормы, ОбъектыПечати) Экспорт
	
	Для Каждого ОписаниеФайла Из ПечатныеФормыОбъектов Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеФайла.ФайлОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеПечатнойФормы Из ПечатныеФормы Цикл
			
			Если СтрЗаканчиваетсяНа(ОписаниеПечатнойФормы.ИдентификаторПечатнойФормы, ОписаниеФайла.ИдентификаторПечатнойФормы) Тогда
				
				Если ЗначениеЗаполнено(ОписаниеФайла.ИмяОбласти) Тогда
					
					ЗаменитьОбластьТабличногоДокумента(
						ОписаниеПечатнойФормы.ПечатнаяФорма,
						ОписаниеФайла.ИмяОбласти,
						КадровыйЭДО.ПечатнаяФормаСоШтампами(ОписаниеФайла.ФайлОбъекта, ОписаниеФайла.ПечатнаяФорма, Истина));
					
				Иначе
					
					ЭлементСписка = ОбъектыПечати.НайтиПоЗначению(ОписаниеФайла.Владелец);
					Если ЭлементСписка <> Неопределено Тогда
						
						ЗаменитьОбластьТабличногоДокумента(
							ОписаниеПечатнойФормы.ПечатнаяФорма,
							ЭлементСписка.Представление,
							КадровыйЭДО.ПечатнаяФормаСоШтампами(ОписаниеФайла.ФайлОбъекта, ОписаниеФайла.ПечатнаяФорма, Истина));
						
					КонецЕсли;
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НаправитьНаПодпись(ДанныеФайлов, Действие, Исполнители) Экспорт
	
	ЗапланироватьДействияСПечатнымиФормами(ДанныеФайлов, Действие, Исполнители);
	УдалитьФайлыИзОбработкиПользователя(ДанныеФайлов);
	
КонецПроцедуры

Процедура ЗапланироватьДействияСПечатнымиФормами(ДанныеФайлов, Действие, Исполнители = Неопределено) Экспорт
	
	РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
		ДанныеФайлов, Действие, Исполнители);
	
КонецПроцедуры

Процедура ЗапомнитьПодписантов(Организация, ВыбранныеПодписанты) Экспорт
	
	ПодписантыОрганизаций = ПодписантыОрганизацийПоУмолчанию();
	ПодписантыОрганизаций.Вставить(Организация, ВыбранныеПодписанты);
	ЗапомнитьПодписантовОрганизаций(ПодписантыОрганизаций);
	
КонецПроцедуры

Процедура ЗапомнитьПодписантовОрганизаций(ПодписантыОрганизаций)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭлектронныйКадровыйДокументооборот", "ПодписантыОрганизаций", ПодписантыОрганизаций);
	
КонецПроцедуры

Процедура ЗапомнитьСертификатыОрганизации(Организация, СертификатыОрганизации) Экспорт
	
	СертификатыОрганизаций = ПодписантыОрганизацийПоУмолчанию();
	СертификатыОрганизаций.Вставить(?(Организация = Неопределено, "Неопределено", Организация), СертификатыОрганизации);
	ЗапомнитьСертификатыОрганизаций(СертификатыОрганизаций)
	
КонецПроцедуры

Процедура ЗапомнитьСертификатыОрганизаций(СертификатыОрганизаций) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭлектронныйКадровыйДокументооборот", "СертификатыОрганизаций", СертификатыОрганизаций);
	
КонецПроцедуры

Процедура ОчиститьНастройкиПодписанияПечатныхФорм() Экспорт
	ЗапомнитьПодписантовОрганизаций(Неопределено);
	ЗапомнитьСертификатыОрганизаций(Неопределено);
КонецПроцедуры

Процедура УдалитьФайлыИзОбработкиПользователя(ФайлыКОбработке) Экспорт
	
	РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработкиПользователя(ФайлыКОбработке);
	
КонецПроцедуры

// Возвращает структуру информации о печатной форме, созданном присоединенном файле.
//
// Параметры:
//  ПечатнаяФорма              - ТабличныйДокумент
//  ОбъектВладелец             - Ссылка, на объект владелец присоединенных файлов
//  ИдентификаторПечатнойФормы - Строка, Идентификатор печатной формы отличающий одни однотипные формы от других
//  Название                   - Строка, человекочитаемое представление печатной формы
//  Организация                - СправочникСсылка.Организации
//  ФизическоеЛицо             - СправочникСсылка.ФизическиеЛица
//  Сотрудник                  - СправочникСсылка.Сотрудники
//  ИмяФайла                   - Строка, имя файла
//
// Возвращаемое значение:
//  Структура - см. КадровыйЭДО.ДанныеПечатнойФормы()
//
Функция ДобавитьПечатнуюФорму(ПечатнаяФорма, ОбъектВладелец, ИдентификаторПечатнойФормы, Название, Организация, ФизическоеЛицо, Сотрудник = Неопределено, ИмяФайла = "") Экспорт
	
	ДанныеПечатнойФормы = КадровыйЭДО.ДанныеПечатнойФормы();
	ДанныеПечатнойФормы.Владелец                   = ОбъектВладелец;
	ДанныеПечатнойФормы.ПечатнаяФорма              = ПечатнаяФорма;
	ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = ИдентификаторПечатнойФормы;
	ДанныеПечатнойФормы.Название                   = Название;
	ДанныеПечатнойФормы.Организация                = Организация;
	ДанныеПечатнойФормы.ФизическоеЛицо             = ФизическоеЛицо;
	Если ПустаяСтрока(ИмяФайла) Тогда
		ДанныеПечатнойФормы.ИмяФайла               = ДанныеПечатнойФормы.Название;
	Иначе
		ДанныеПечатнойФормы.ИмяФайла               = ИмяФайла;
	КонецЕсли;
	ДанныеПечатнойФормы.Сотрудник                  = Сотрудник;
	
	СоздатьФайлПечатнойФормы(ДанныеПечатнойФормы, РаботаСФайламиБЗК.ВременныйКаталог(), Новый УникальныйИдентификатор);
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Функция ПараметрыОткрытияФормыПодписанияПрисоединенныхФайлов(ПрисоединенныеФайлы) Экспорт
	
	Возврат ПараметрыОткрытияФормыПодписанияПечатныхФорм(
		РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайловПечатныхФормНаПодпись(ПрисоединенныеФайлы));
	
КонецФункции

Функция ПараметрыОткрытияФормыПодписанияПечатныхФорм(ДанныеПрисоединенныхФайлов) Экспорт
	
	ПараметрыФормы = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыФормы.ПараметрКоманды = Новый Массив;
	
	КоллекцияПечатныхФорм = Новый Массив;
	ОбъектыПечати = Новый СписокЗначений;
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ОписанияФайловПечатныхФорм", КадровыйЭДО.ОписанияФайловПечатныхФорм());
	
	Поля = УправлениеПечатьюКлиентСервер.ИменаПолейКоллекцииПечатныхФорм();
	Владельцы = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПрисоединенныхФайлов, "Владелец", Истина);
	Идентификаторы = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПрисоединенныхФайлов, "ИдентификаторПечатнойФормы", Истина);
	
	ДобавленныеКоллекции = Новый Соответствие;
	Для Каждого Владелец Из Владельцы Цикл
		
		Для Каждого ИдентификаторПечатнойФормы Из Идентификаторы Цикл
			
			ОтборСтрок = Новый Структура("Владелец,ИдентификаторПечатнойФормы", Владелец, ИдентификаторПечатнойФормы);
			НайденныеПечатныеФормы = ДанныеПрисоединенныхФайлов.НайтиСтроки(ОтборСтрок);
			
			Если НайденныеПечатныеФормы.Количество() > 0 Тогда
				
				ПечатнаяФорма = ДобавленныеКоллекции.Получить(ИдентификаторПечатнойФормы);
				Если ПечатнаяФорма = Неопределено Тогда
					
					ПечатнаяФорма = Новый Структура(СтрСоединить(Поля, ","));
					ПечатнаяФорма.СинонимМакета = НайденныеПечатныеФормы[0].Название;
					ПечатнаяФорма.Экземпляров = 1;
					
					ПечатнаяФорма.ИмяМакета = ИдентификаторПечатнойФормы;
					ПечатнаяФорма.ИмяВРЕГ = ВРег(ПечатнаяФорма.ИмяМакета);
					
					ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент();
					ПечатнаяФорма.ТабличныйДокумент.Защита = Истина;
					
					КоллекцияПечатныхФорм.Добавить(ПечатнаяФорма);
					ДобавленныеКоллекции.Вставить(ИдентификаторПечатнойФормы, ПечатнаяФорма);
					
				КонецЕсли;
				
				НачалоФормы = ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы + 1;
				Для Каждого ФайлНаПодпись Из НайденныеПечатныеФормы Цикл
					
					НачалоДетальнойФормы = ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы + 1;
					
					ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ПечатнаяФорма.ТабличныйДокумент,
						КадровыйЭДО.ПечатнаяФормаСоШтампами(ФайлНаПодпись.ФайлОбъекта, ФайлНаПодпись.Оригинал.Получить()));
					
					КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ПечатнаяФорма.ТабличныйДокумент,
						ИдентификаторПечатнойФормы, НачалоДетальнойФормы, ПечатнаяФорма, Владелец);
					
					КадровыйЭДО.ДобавитьОписаниеФайла(ПараметрыПечати.ОписанияФайловПечатныхФорм,
						КадровыйЭДО.ДанныеПечатнойФормыПоДаннымФайлаПечатнойФормы(ФайлНаПодпись));
					
				КонецЦикла;
				
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ПечатнаяФорма.ТабличныйДокумент, НачалоФормы, ОбъектыПечати, Владелец);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыФормы.Вставить("КоллекцияПечатныхФорм",  КоллекцияПечатныхФорм);
	ПараметрыФормы.Вставить("ОбъектыПечати",          ОбъектыПечати);
	ПараметрыФормы.Вставить("ПараметрыПечати",        ПараметрыПечати);
	ПараметрыФормы.Вставить("ПодписаниеПечатныхФорм", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Возвращает соответствия описаний файлов печатных форм.
//
// Параметры:
//  ФайлыДляВывода         - Массив, ссылок на присоединенные файлы.
//  ИдентификаторХранилища - УникальныйИдентификатор, идентификатор формы из которой выполняется вывод.
//
// Возвращаемое значение:
//  Соответствие - Ключ, ссылка на присоединенный файл
//                Значение, Структура с ключами:
//                 * Оригинал      - Структура, описание выводимого
//                                   файла-оригинала, см. ОписаниеВыводимогоФайла
//                 * Представления - Массив описаний выводимых
//                                   файлов-представлений, см. ОписаниеВыводимогоФайла
//                 * Подписи       - Массив описаний выводимых
//                                   файлов-подписей, см. ОписаниеВыводимогоФайла
//
Функция ДанныеФайловПечатныхФорм(ФайлыДляВывода, ИдентификаторХранилища = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Соответствие;
	Если ФайлыДляВывода.Количество() > 0 Тогда
		
		Если ИдентификаторХранилища = Неопределено Тогда
			ИдентификаторХранилища = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		ОписанияФайлов = Новый Массив;
		ПрисоединенныеФайлы = Новый Массив;
		Для Каждого ФайлДляВывода Из ФайлыДляВывода Цикл
			
			Если ТипЗнч(ФайлДляВывода) = Тип("Структура") Тогда
				ОписанияФайлов.Добавить(ФайлДляВывода);
			Иначе
				ПрисоединенныеФайлы.Добавить(ФайлДляВывода);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПрисоединенныеФайлы.Количество() > 0 Тогда
			ВставитьДанныеПрисоединенныхФайловПечатныхФорм(ДанныеФайлов, ПрисоединенныеФайлы, ИдентификаторХранилища);
		КонецЕсли;
		
		Если ОписанияФайлов.Количество() > 0 Тогда
			ВставитьДанныеОписанийФайловПечатныхФорм(ДанныеФайлов, ОписанияФайлов, ИдентификаторХранилища);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеФайлов;
	
КонецФункции

Функция ПодписиБезСертификатов(ОбъектыПечати, ИдентификаторПечатнойФормы) Экспорт
	
	Выборка = КадровыйЭДО.ВыборкаДанныхПечатныхФорм(ОбъектыПечати,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПечатнойФормы));
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторХранилища = Новый УникальныйИдентификатор;
	
	ПодписанныеОбъекты = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ПодписанныеОбъекты.Добавить(Выборка.ФайлОбъекта);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.Подпись КАК Подпись,
		|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ПодписанныйОбъект В(&ПодписанныеОбъекты)
		|	И ЭлектронныеПодписи.Отпечаток = """"";
	
	УстановитьПривилегированныйРежим(Истина);
	Подписи = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ДанныеПодписи Из Подписи Цикл
		ДанныеПодписи.Подпись = ПоместитьВоВременноеХранилище(
			ДанныеПодписи.Подпись.Получить(), ИдентификаторХранилища);
	КонецЦикла;
	
	Возврат Подписи;
	
КонецФункции

Функция ФайлыНаПодписьПользователя() Экспорт
	Возврат РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыНаПодписьПользователя(Истина).
		ВыгрузитьКолонку("ФайлОбъекта");
КонецФункции

Функция ЭлектронныеДокументыПоСсылкамНаДокументыКадровогоЭДО(ДокументыКадровогоЭДО) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПечатныеФормы", Новый Массив);
	Результат.Вставить("ПрисоединенныеФайлы", Новый Массив);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДокументыКадровогоЭДО, "ЭлектронныйДокумент,КатегорияДокумента,Внешний");
	УстановитьПривилегированныйРежим(Ложь);
	Для Каждого РеквизитыДокумента Из РеквизитыДокументов Цикл
		Если РеквизитыДокумента.Значение.Внешний = Истина Тогда
			Результат.ПрисоединенныеФайлы.Добавить(РеквизитыДокумента.Значение.ЭлектронныйДокумент);
		Иначе
			Результат.ПечатныеФормы.Добавить(РеквизитыДокумента.Значение.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеФайловНаПодпись(ПрисоединенныеФайлы, Знач ИдентификаторХранилища = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Массив;
	Если ИдентификаторХранилища = Неопределено Тогда
		ИдентификаторХранилища = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ПрисоединенныеФайлы);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Организация КАК Организация,
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент В(&ЭлектронныеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеФайла = КадровыйЭДО.ДанныеПодписываемогоФайла();
		
		ДанныеФайла.Организация = Выборка.Организация;
		ДанныеФайла.ФайлОбъекта = Выборка.ЭлектронныйДокумент;
		
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторХранилища;
		
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ДанныеФайла.ФайлОбъекта, ДополнительныеПараметры);
		ДанныеФайла.ИмяФайла = ДанныеПрисоединенногоФайла.ИмяФайла;
		ДанныеФайла.АдресВХранилище = ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла;
		
		Если ДанныеПрисоединенногоФайла.ПодписанЭП Тогда
			КадровыйЭДО.ЗаполнитьКоллекциюОтпечатковПодписей(ДанныеФайла, ДанныеФайла.ФайлОбъекта);
		КонецЕсли;
		
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

Процедура ОбновитьУведомленияВФоне() Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление уведомлений от 1С:Кабинет Сотрудника'");
	ПараметрыВыполнения.КлючФоновогоЗадания = "4576cbf4-8395-46a1-9e66-54f66847c297";
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.БезРасширений = Истина;
	
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "ОбсужденияБЗК.ОбновитьУведомленияОНеобходимостиПодписанияФайловДокументовКЭДО");
	
КонецПроцедуры

Функция СодержимоеДокументаПечатнойФормы(ИдентификаторПечатнойФормы) Экспорт
	
	Настройки = КадровыйЭДОПовтИсп.НастройкиПечатныхФорм().Получить(ИдентификаторПечатнойФормы);
	Если Настройки = Неопределено Тогда
		Возврат Перечисления.СодержимоеДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Настройки.СодержимоеДокумента;
	
КонецФункции

Функция НастройкиПечатныхФорм() Экспорт
	
	Возврат КадровыйЭДОПовтИсп.НастройкиПечатныхФорм();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает пустое описание выводимого файла.
//
// Возвращаемое значение:
//  Структура
//   * Представление              - Строка
//   * АдресВоВременномХранилище  - Строка
//   * Кодировка                  - см. РаботаСФайлами.ДанныеФайла.КодировкаТекущейВерсии
//   * ИдентификаторПечатнойФормы - Строка
//   * ФизическоеЛицо             - СправочникСсылка.ФизическиеЛица
//   * Владелец                   - Ссылка на объект владелец файла
//   * Комментарий                - Строка
//   * Размер                     - Число
//
Функция ОписаниеВыводимогоФайла()
	
	ОписаниеФайла = Новый Структура(
		"Ссылка,
		|Представление,
		|АдресВоВременномХранилище,
		|Кодировка,
		|ИдентификаторПечатнойФормы,
		|ФизическоеЛицо,
		|Владелец,
		|Комментарий,
		|Размер,
		|ИмяФайлаБезРасширения,
		|РасширениеФайла");
	
	ОписаниеФайла.Комментарий = "";
	ОписаниеФайла.Размер = 0;
	
	Возврат ОписаниеФайла;
	
КонецФункции

Функция ОписаниеВыводимогоФайлаПодписи()
	ОписаниеФайла = ОписаниеВыводимогоФайла();
	ОписаниеФайла.Вставить("УстановившийПодпись");
	ОписаниеФайла.Вставить("КомуВыданСертификат");
	Возврат ОписаниеФайла;
КонецФункции

Процедура ДобавитьЧастьИмениФайлаДетализации(ЧастиИмени, ОбъектДетализации, ЭтоФИО)
	
	ПредставлениеОбъекта = Строка(ОбъектДетализации);
	Если Не ПустаяСтрока(ПредставлениеОбъекта) Тогда
		
		Если ЭтоФИО Тогда
			ЧастиИмени.Добавить(СокрЛП(
				ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ПредставлениеОбъекта)));
		Иначе
			ЧастиИмени.Добавить(СокрЛП(ПредставлениеОбъекта));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыАдресацииОбъектов(ОбъектыПечати)
	
	РеквизитыОбъектов = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТипыОбъектов = ОбщегоНазначенияБЗК.ОбъектыПоТипам(ОбъектыПечати);
	ТекстыЗапроса = Новый Массив;
	СчетчикПараметров = 0;
	Для Каждого ОбъектыТипа Из ТипыОбъектов Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОбъектыТипа.Ключ);
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа) Тогда
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сотрудник", МетаданныеТипа)
				И МетаданныеТипа.Реквизиты.Сотрудник.Тип.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
					|	ТаблицаДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ТаблицаДокумента.Сотрудник.Наименование КАК ФИО
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СовмещающийСотрудник", МетаданныеТипа)
				И МетаданныеТипа.Реквизиты.СовмещающийСотрудник.Тип.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	ТаблицаДокумента.СовмещающийСотрудник КАК Сотрудник,
					|	ТаблицаДокумента.СовмещающийСотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ТаблицаДокумента.СовмещающийСотрудник.Наименование КАК ФИО
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Сотрудник", МетаданныеТипа)
				И МетаданныеТипа.Реквизиты.Сотрудник.Тип.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	ТаблицаДокумента.Сотрудник КАК ФизическоеЛицо,
					|	ТаблицаДокумента.Сотрудник.Наименование КАК ФИО
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизическоеЛицо", МетаданныеТипа) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	ТаблицаДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ТаблицаДокумента.ФизическоеЛицо.Наименование КАК ФИО
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			Иначе
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо,
					|	"""" КАК ФИО
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
					|		ПО ТаблицаДокумента.Ссылка = СоставДокументовЗарплатаКадры.ДокументФизическогоЛица
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаДокумента.Ссылка,
					|	ТаблицаДокумента.Номер,
					|	ТаблицаДокумента.НомерПриказа,
					|	ТаблицаДокумента.Дата,
					|	ТаблицаДокумента.Организация
					|
					|ИМЕЮЩИЕ
					|	(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоставДокументовЗарплатаКадры.ФизическоеЛицо) >= 2
					|		ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоставДокументовЗарплатаКадры.Сотрудник) >= 2)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка,
					|	ТаблицаДокумента.Номер,
					|	ТаблицаДокумента.НомерПриказа,
					|	ТаблицаДокумента.Дата,
					|	ТаблицаДокумента.Организация,
					|	МАКСИМУМ(СоставДокументовЗарплатаКадры.Сотрудник),
					|	МАКСИМУМ(СоставДокументовЗарплатаКадры.ФизическоеЛицо),
					|	""""
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
					|		ПО ТаблицаДокумента.Ссылка = СоставДокументовЗарплатаКадры.ДокументФизическогоЛица
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаДокумента.Ссылка,
					|	ТаблицаДокумента.Номер,
					|	ТаблицаДокумента.НомерПриказа,
					|	ТаблицаДокумента.Дата,
					|	ТаблицаДокумента.Организация
					|
					|ИМЕЮЩИЕ
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоставДокументовЗарплатаКадры.ФизическоеЛицо) < 2 И
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоставДокументовЗарплатаКадры.Сотрудник) < 2";
					
			КонецЕсли;
			
			ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "#ТаблицаДокумента", МетаданныеТипа.ПолноеИмя());
			
			Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерПриказа", МетаданныеТипа) Тогда
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "ТаблицаДокумента.НомерПриказа", "НЕОПРЕДЕЛЕНО");
			КонецЕсли;
			
			ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
			ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
			
			ТекстыЗапроса.Добавить(ТекстЗапрос);
			Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
			
			СчетчикПараметров = СчетчикПараметров + 1;
			
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеТипа) Тогда
			
			Если МетаданныеТипа = Метаданные.Справочники.Сотрудники Тогда
				
				Запрос.УстановитьПараметр("Сегодня", ТекущаяДатаСеанса());
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаСправочника.Ссылка КАК Ссылка,
					|	"""" КАК Номер,
					|	"""" КАК НомерПриказа,
					|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
					|	КадроваяИстория.Организация КАК Организация,
					|	ТаблицаСправочника.Ссылка КАК Сотрудник,
					|	ТаблицаСправочника.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ТаблицаСправочника.ФизическоеЛицо.Наименование КАК ФИО
					|ИЗ
					|	Справочник.Сотрудники КАК ТаблицаСправочника
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИстория
					|		ПО ТаблицаСправочника.Ссылка = КадроваяИстория.Сотрудник
					|			И (&Сегодня МЕЖДУ КадроваяИстория.ДатаНачала И КадроваяИстория.ДатаОкончания)
					|ГДЕ
					|	ТаблицаСправочника.Ссылка В(&Объекты)";
				
				ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
				
				ТекстыЗапроса.Добавить(ТекстЗапрос);
				Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
				
				СчетчикПараметров = СчетчикПараметров + 1;
				
			ИначеЕсли МетаданныеТипа = Метаданные.Справочники.ФизическиеЛица Тогда
				
				Запрос.УстановитьПараметр("Сегодня", ТекущаяДатаСеанса());
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаСправочника.Ссылка КАК Ссылка,
					|	"""" КАК Номер,
					|	"""" КАК НомерПриказа,
					|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
					|	КадроваяИстория.Организация КАК Организация,
					|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
					|	ТаблицаСправочника.Ссылка КАК ФизическоеЛицо,
					|	ТаблицаСправочника.Наименование КАК ФИО
					|ИЗ
					|	Справочник.ФизическиеЛица КАК ТаблицаСправочника
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИстория
					|			ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = КадроваяИстория.Сотрудник
					|				И (&Сегодня МЕЖДУ КадроваяИстория.ДатаНачала И КадроваяИстория.ДатаОкончания)
					|		ПО ТаблицаСправочника.Ссылка = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
					|			И (&Сегодня МЕЖДУ ОсновныеСотрудникиФизическихЛиц.ДатаНачала И КОНЕЦПЕРИОДА(ОсновныеСотрудникиФизическихЛиц.ДатаОкончания, ДЕНЬ))
					|ГДЕ
					|	ТаблицаСправочника.Ссылка В(&Объекты)";
				
				ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
				
				ТекстыЗапроса.Добавить(ТекстЗапрос);
				Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
				
				СчетчикПараметров = СчетчикПараметров + 1;
				
			ИначеЕсли МетаданныеТипа = Метаданные.Справочники.Организации Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаСправочника.Ссылка КАК Ссылка,
					|	"""" КАК Номер,
					|	"""" КАК НомерПриказа,
					|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
					|	ТаблицаСправочника.Ссылка КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо,
					|	"""" КАК ФИО
					|ИЗ
					|	Справочник.Организации КАК ТаблицаСправочника
					|ГДЕ
					|	ТаблицаСправочника.Ссылка В(&Объекты)";
				
				ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
				
				ТекстыЗапроса.Добавить(ТекстЗапрос);
				Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
				
				СчетчикПараметров = СчетчикПараметров + 1;
				
			ИначеЕсли МетаданныеТипа.Владельцы.Содержит(Метаданные.Справочники.Организации) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаСправочника.Ссылка КАК Ссылка,
					|	"""" КАК Номер,
					|	"""" КАК НомерПриказа,
					|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
					|	ТаблицаСправочника.Владелец КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо,
					|	"""" КАК ФИО
					|ИЗ
					|	Справочник.ШтатноеРасписание КАК ТаблицаСправочника
					|ГДЕ
					|	ТаблицаСправочника.Ссылка В(&Объекты)";
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "Справочник.ШтатноеРасписание", МетаданныеТипа.ПолноеИмя());
				
				ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
				
				ТекстыЗапроса.Добавить(ТекстЗапрос);
				Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
				
				СчетчикПараметров = СчетчикПараметров + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		
		Запрос.Текст = СтрСоединить(ТекстыЗапроса,Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РеквизитыОбъекта = Новый Структура("Номер,НомерПриказа,Дата,Организация,Сотрудник,ФизическоеЛицо,ФИО");
			ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Выборка);
			
			РеквизитыОбъектов.Вставить(Выборка.Ссылка, РеквизитыОбъекта);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РеквизитыОбъектов;
	
КонецФункции

Процедура СоздатьФайлПечатнойФормы(ДанныеПечатнойФормы, ИмяВременногоКаталога, ИдентификаторХранилища)
	
	ТипФайла = ТипФайлаТабличногоДокумента.PDF_A_3;
	
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
	
	ДатаВыпуска = ТекущаяДатаСеанса();
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
		
		Если ДанныеПечатнойФормы.ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма = Новый ТабличныйДокумент;
			ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ПечатнаяФорма, ДанныеПечатнойФормы.ПечатнаяФорма);
			
			ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы, , ПечатнаяФорма.ВысотаТаблицы).КонецСтраницы = Ложь;
			
			Пока ПечатнаяФорма.Области.Количество() > 0 Цикл
				ПечатнаяФорма.Области[0].Имя = Неопределено;
			КонецЦикла;
			
			ПечатнаяФорма.НижнийКолонтитул.Выводить = Истина;
			ПечатнаяФорма.НижнийКолонтитул.ТекстВЦентре =
				СтрШаблон("%1 (%2). " + НСтр("ru = 'Стр'") + ". [&НомерСтраницы]/[&СтраницВсего]",
				Формат(ДатаВыпуска, "ДЛФ=DT"),
				Метаданные.Синоним);
			ПечатнаяФорма.НижнийКолонтитул.Шрифт = Новый Шрифт(ШрифтыСтиля.ВажнаяНадписьШрифт, , 6, Ложь);
			
			ИмяФайлаСРасширением = ДанныеПечатнойФормы.ИмяФайла + "." + НастройкиФормата.Расширение;
			
			ПолноеИмяФайла = РаботаСФайламиБЗК.УникальноеИмяФайла(
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + ИмяФайлаСРасширением);
			
			ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторХранилища);
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов     = ДанныеПечатнойФормы.Владелец;
			ПараметрыФайла.ИмяБезРасширения   = ДанныеПечатнойФормы.ИмяФайла;
			ПараметрыФайла.РасширениеБезТочки = НастройкиФормата.Расширение;
			
			Если КадровыйЭДО.ЭтоОбъектСПечатнымиФормами(ДанныеПечатнойФормы.Владелец) Тогда
				ДанныеПечатнойФормы.ФайлОбъекта = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);
			КонецЕсли;
			
			ДанныеПечатнойФормы.АдресВХранилище = АдресВХранилище;
			
			Если Не ЗначениеЗаполнено(ДанныеПечатнойФормы.ФизическоеЛицо)
				И ЗначениеЗаполнено(ДанныеПечатнойФормы.Сотрудник) Тогда
				
				ДанныеПечатнойФормы.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДанныеПечатнойФормы.Сотрудник, "ФизическоеЛицо");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
				
				НачатьТранзакцию();
				Попытка
					РегистрыСведений.ПодписанныеПечатныеФормы.ДобавитьПечатнуюФорму(ДанныеПечатнойФормы, ПечатнаяФорма, ДатаВыпуска);
					ОписаниеДокумента = Документы.ДокументКадровогоЭДО.СвойстваДокумента(
						ДанныеПечатнойФормы.ФайлОбъекта,
						ДанныеПечатнойФормы.Организация,
						ДанныеПечатнойФормы.ФизическоеЛицо,
						ДанныеПечатнойФормы.Владелец,
						,
						СодержимоеДокументаПечатнойФормы(
							ДанныеПечатнойФормы.ИдентификаторПечатнойФормы));
					ДокументКадровогоЭДО = Документы.ДокументКадровогоЭДО.Добавить(ОписаниеДокумента);
					Если Не ЗначениеЗаполнено(ДанныеПечатнойФормы.Владелец) Тогда
						ДанныеПечатнойФормы.Владелец = ДокументКадровогоЭДО;
					КонецЕсли;
					ЗафиксироватьТранзакцию();
				Исключение
					Ошибка = ИнформацияОбОшибке();
					ОтменитьТранзакцию();
					ВызватьИсключение КраткоеПредставлениеОшибки(Ошибка);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаменитьОбластьТабличногоДокумента(ТабличныйДокумент, ИмяОбласти, ТабличныйДокументСНовойОбластью)
	
	ОбластьПриемник = ТабличныйДокумент.Области.Найти(ИмяОбласти);
	Если ОбластьПриемник <> Неопределено Тогда
		
		ПерваяСтрокаОбластиПриемника = ОбластьПриемник.Верх;
		ПоследняяСтрокаОбластиПриемника = ОбластьПриемник.Низ;
		
		УдалитьКонецСтраницыПрежнейОбласти = Ложь;
		Если СтрокаТабличногоДокументаСодержитКонецСтраницы(ТабличныйДокумент, ПоследняяСтрокаОбластиПриемника) Тогда
			
			УстановитьВТабличномДокументеКонецСтраницы(ТабличныйДокументСНовойОбластью, ТабличныйДокументСНовойОбластью.ВысотаТаблицы, Истина);
			УдалитьКонецСтраницыПрежнейОбласти = 
				(ТабличныйДокументСНовойОбластью.ВысотаТаблицы <> ПоследняяСтрокаОбластиПриемника - ПерваяСтрокаОбластиПриемника + 1);
			
		КонецЕсли;
		
		Пока ТабличныйДокументСНовойОбластью.Области.Количество() > 0 Цикл
			ТабличныйДокументСНовойОбластью.Области[0].Имя = Неопределено;
		КонецЦикла;
		
		ИсходнаяОбласть = ТабличныйДокументСНовойОбластью.Область(1, , ТабличныйДокументСНовойОбластью.ВысотаТаблицы);
		ИсходнаяОбласть.Имя = ИмяОбласти;
		
		ТабличныйДокумент.УдалитьОбласть(ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ОбластьВставки = ТабличныйДокумент.Область(ПерваяСтрокаОбластиПриемника, , ПерваяСтрокаОбластиПриемника);
		ТабличныйДокумент.ВставитьОбласть(ИсходнаяОбласть, ОбластьВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если УдалитьКонецСтраницыПрежнейОбласти Тогда
			УстановитьВТабличномДокументеКонецСтраницы(ТабличныйДокумент, ПоследняяСтрокаОбластиПриемника, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаТабличногоДокументаСодержитКонецСтраницы(ТабличныйДокумент, НомерСтроки)
	
	Если ТабличныйДокумент.ВысотаТаблицы < НомерСтроки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТабличныйДокумент.Область(НомерСтроки, , НомерСтроки).КонецСтраницы;
	
КонецФункции

Процедура УстановитьВТабличномДокументеКонецСтраницы(ТабличныйДокумент, НомерСтроки, КонецСтраницы)
	
	Если ТабличныйДокумент.ВысотаТаблицы < НомерСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Область(НомерСтроки, , НомерСтроки).КонецСтраницы = КонецСтраницы;
	
КонецПроцедуры

Функция ПодписантыОрганизацийПоУмолчанию()
	
	ПодписантыОрганизаций = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныйКадровыйДокументооборот", "ПодписантыОрганизаций");
	
	Если ПодписантыОрганизаций = Неопределено Тогда
		ПодписантыОрганизаций = Новый Соответствие;
	КонецЕсли;
	
	Возврат ПодписантыОрганизаций;
	
КонецФункции

Функция СертификатыОрганизацийПоУмолчанию() Экспорт
	
	СертификатыОрганизаций = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныйКадровыйДокументооборот", "СертификатыОрганизаций");
	
	Если СертификатыОрганизаций = Неопределено Тогда
		СертификатыОрганизаций = Новый Соответствие;
	КонецЕсли;
	
	Возврат СертификатыОрганизаций;
	
КонецФункции

Функция ФайлыСоШтампамиПодписей(ФайлыДляПечати)
	
	ФайлыСоШтампами = Новый Соответствие;
	
	ТипФайла = ТипФайлаТабличногоДокумента.PDF_A_3;
	ИмяВременногоКаталога = РаботаСФайламиБЗК.ВременныйКаталог();
	
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
	
	ПрисоединенныеФайлы = Новый Массив;
	ОписанияФайлов = Новый Массив;
	Для Каждого ФайлДляПечати Из ФайлыДляПечати Цикл
		
		Если ТипЗнч(ФайлДляПечати) = Тип("Структура") Тогда
			ОписанияФайлов.Добавить(ФайлДляПечати);
		Иначе
			ПрисоединенныеФайлы.Добавить(ФайлДляПечати);
		КонецЕсли;
		
	КонецЦикла;
	
	ИдентификаторХранилища = Новый УникальныйИдентификатор;
	ИменаФайлов = Новый Соответствие;
	
	Если ОписанияФайлов.Количество() > 0 Тогда
		
		Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
			
			Оригинал = ОписаниеФайла.ПечатнаяФорма;
			ПечатнаяФорма = КадровыйЭДО.ПечатнаяФормаСоШтампамиПоОригиналу(
				Оригинал, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеФайла.СвойстваПодписи));
			
			ИмяФайла = УникальноеИмяФайла(ОписаниеФайла.Название, ИменаФайлов);
			ИмяФайлаСРасширением = ИмяФайла + "." + НастройкиФормата.Расширение;
			
			ПолноеИмяФайла = РаботаСФайламиБЗК.УникальноеИмяФайла(
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + ИмяФайлаСРасширением);
			
			ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторХранилища);
			
			ОписаниеФайлаФайлаСоШтампом = Новый Структура;
			ОписаниеФайлаФайлаСоШтампом.Вставить("ИмяФайла",                   ИмяФайлаСРасширением);
			ОписаниеФайлаФайлаСоШтампом.Вставить("АдресВХранилище",            АдресВХранилище);
			ОписаниеФайлаФайлаСоШтампом.Вставить("ИдентификаторПечатнойФормы", ОписаниеФайла.ИдентификаторПечатнойФормы);
			ОписаниеФайлаФайлаСоШтампом.Вставить("Название",                   ОписаниеФайла.Название);
			ОписаниеФайлаФайлаСоШтампом.Вставить("ФизическоеЛицо",             ОписаниеФайла.ФизическоеЛицо);
			ОписаниеФайлаФайлаСоШтампом.Вставить("Расширение",                 НастройкиФормата.Расширение);
			ОписаниеФайлаФайлаСоШтампом.Вставить("Размер",                     ДвоичныеДанные.Размер());
			
			ФайлыСоШтампами.Вставить(ОписаниеФайла, ОписаниеФайлаФайлаСоШтампом);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПрисоединенныеФайлы.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеПечатныхФорм = РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайловПечатныхФорм(ПрисоединенныеФайлы);
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого ДанныеПечатнойФормы Из ДанныеПечатныхФорм Цикл
			
			ПрисоединенныйФайл = ДанныеПечатнойФормы.Ключ;
			ДанныеФормы = ДанныеПечатнойФормы.Значение;
			
			ПечатнаяФорма = КадровыйЭДО.ПечатнаяФормаСоШтампами(ПрисоединенныйФайл, ДанныеФормы.Оригинал);
			ИмяФайла = УникальноеИмяФайла(Строка(ПрисоединенныйФайл), ИменаФайлов);
			
			ИмяФайлаСРасширением = ИмяФайла + "." + НастройкиФормата.Расширение;
			
			ПолноеИмяФайла = РаботаСФайламиБЗК.УникальноеИмяФайла(
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + ИмяФайлаСРасширением);
			
			ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторХранилища);
			
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("ИмяФайла",                   ИмяФайлаСРасширением);
			ОписаниеФайла.Вставить("АдресВХранилище",            АдресВХранилище);
			ОписаниеФайла.Вставить("ИдентификаторПечатнойФормы", ДанныеФормы.ИдентификаторПечатнойФормы);
			ОписаниеФайла.Вставить("ДатаВыпуска",                ДанныеФормы.ДатаВыпуска);
			ОписаниеФайла.Вставить("Название",                   ДанныеФормы.Название);
			ОписаниеФайла.Вставить("Организация",                ДанныеФормы.Организация);
			ОписаниеФайла.Вставить("Сотрудник",                  ДанныеФормы.Сотрудник);
			ОписаниеФайла.Вставить("ФизическоеЛицо",             ДанныеФормы.ФизическоеЛицо);
			ОписаниеФайла.Вставить("Номер",                      ДанныеФормы.Номер);
			ОписаниеФайла.Вставить("Дата",                       ДанныеФормы.Дата);
			ОписаниеФайла.Вставить("Размер",                     ДвоичныеДанные.Размер());
			
			ФайлыСоШтампами.Вставить(ПрисоединенныйФайл, ОписаниеФайла);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	Возврат ФайлыСоШтампами;
	
КонецФункции

Функция УникальноеИмяФайла(ИмяФайла, ИменаФайлов)
	
	Если ИменаФайлов.Получить(ИмяФайла) = Неопределено Тогда
		ИменаФайлов.Вставить(ИмяФайла, Истина);
		Возврат ИмяФайла;
	КонецЕсли;
	
	Счетчик = 1;
	Пока Истина Цикл
		ИмяФайлаСНомером = ИмяФайла + "_" + Формат(Счетчик, "ЧГ=");
		Если ИменаФайлов.Получить(ИмяФайлаСНомером) = Неопределено Тогда
			ИменаФайлов.Вставить(ИмяФайлаСНомером, Истина);
			Возврат ИмяФайлаСНомером;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецФункции

Процедура ВставитьДанныеПрисоединенныхФайловПечатныхФорм(ДанныеФайлов, ПрисоединенныеФайлы, ИдентификаторХранилища)
	
	Если ПрисоединенныеФайлы.Количество() > 0 Тогда
		
		ФайлыСоШтампами = ФайлыСоШтампамиПодписей(ПрисоединенныеФайлы);
		Для Каждого ФайлДляВывода Из ПрисоединенныеФайлы Цикл
			
			ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
			ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторХранилища;
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлДляВывода, ПараметрыДанныхФайла);
			ФайлСоШтампами = ФайлыСоШтампами.Получить(ФайлДляВывода);
			
			ДанныеВыводимогоФайла = Новый Структура;
			ДанныеВыводимогоФайла.Вставить("Оригинал", ОписаниеВыводимогоФайла());
			ДанныеВыводимогоФайла.Вставить("Представления", Новый Массив());
			ДанныеВыводимогоФайла.Вставить("Подписи", Новый Массив());
			
			ИменаФайла = ИменаВыводимогоФайла(ДанныеФайла.ИмяФайла, ДанныеФайла.Расширение);
			
			// Оригинал
			ДанныеВыводимогоФайла.Оригинал.Ссылка = ФайлДляВывода;
			ДанныеВыводимогоФайла.Оригинал.Представление = ИменаФайла.ИмяФайла;
			ДанныеВыводимогоФайла.Оригинал.Кодировка = ДанныеФайла.КодировкаТекущейВерсии;
			ДанныеВыводимогоФайла.Оригинал.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			ДанныеВыводимогоФайла.Оригинал.Владелец = ДанныеФайла.Владелец;
			ДанныеВыводимогоФайла.Оригинал.Размер = ДанныеФайла.Размер;
			Если ФайлСоШтампами <> Неопределено Тогда
				ДанныеВыводимогоФайла.Оригинал.ИдентификаторПечатнойФормы = ФайлСоШтампами.ИдентификаторПечатнойФормы;
				ДанныеВыводимогоФайла.Оригинал.ФизическоеЛицо = ФайлСоШтампами.ФизическоеЛицо;
			КонецЕсли;
			УстановитьИмяФайлаИРасширениеВыводимогоФайла(ДанныеВыводимогоФайла.Оригинал);
			
			Если ДанныеФайла.ПодписанЭП Тогда
				
				// Представления
				Если ФайлСоШтампами <> Неопределено Тогда
					
					ОписаниеФайла = ОписаниеВыводимогоФайла();
					ОписаниеФайла.Представление = ИменаФайла.ИмяФайлаДляПечати;
					ОписаниеФайла.АдресВоВременномХранилище = ФайлСоШтампами.АдресВХранилище;
					ОписаниеФайла.ИдентификаторПечатнойФормы = ФайлСоШтампами.ИдентификаторПечатнойФормы;
					ОписаниеФайла.ФизическоеЛицо = ФайлСоШтампами.ФизическоеЛицо;
					ОписаниеФайла.Размер = ФайлСоШтампами.Размер;
					ОписаниеФайла.Владелец = ДанныеФайла.Владелец;
					
					УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла);
					ДанныеВыводимогоФайла.Представления.Добавить(ОписаниеФайла);
					
				КонецЕсли;
				
				// Подписи
				ПодписиФайла = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлДляВывода);
				Для Каждого ОписаниеПодписи Из ПодписиФайла Цикл
					
					Если ДанныеВыводимогоФайла.Подписи.Количество() = 0 Тогда
						ИмяФайлаПодписи = ИменаФайла.ИмяФайлаПодписи;
					Иначе
						Файл = Новый Файл(ИменаФайла.ИмяФайлаПодписи);
						ИмяФайлаПодписи = Файл.ИмяБезРасширения + "_"
							+ Формат(ДанныеВыводимогоФайла.Подписи.Количество(), "ЧГ=")
							+ Файл.Расширение;
					КонецЕсли;
					
					ОписаниеФайла = ОписаниеВыводимогоФайлаПодписи();
					ОписаниеФайла.Представление = ИмяФайлаПодписи;
					ОписаниеФайла.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
						ОписаниеПодписи.Подпись, ИдентификаторХранилища);
					ОписаниеФайла.Владелец = ДанныеВыводимогоФайла.Оригинал.Ссылка;
					ОписаниеФайла.Комментарий = ОписаниеПодписи.Комментарий;
					ОписаниеФайла.Размер = ОписаниеПодписи.Подпись.Размер();
					ОписаниеФайла.УстановившийПодпись = ОписаниеПодписи.УстановившийПодпись;
					ОписаниеФайла.КомуВыданСертификат = ОписаниеПодписи.КомуВыданСертификат;
					
					УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла);
					ДанныеВыводимогоФайла.Подписи.Добавить(ОписаниеФайла);
					
					
				КонецЦикла;
			
			КонецЕсли;
			
			ДанныеФайлов.Вставить(ФайлДляВывода, ДанныеВыводимогоФайла)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьДанныеОписанийФайловПечатныхФорм(ДанныеФайлов, ОписанияФайлов, ИдентификаторХранилища)
	
	Если ОписанияФайлов.Количество() > 0 Тогда
		
		ФайлыСоШтампами = ФайлыСоШтампамиПодписей(ОписанияФайлов);
		Для Каждого ДанныеОписанияФайла Из ОписанияФайлов Цикл
			
			ФайлСоШтампами = ФайлыСоШтампами.Получить(ДанныеОписанияФайла);
			
			ДанныеВыводимогоФайла = Новый Структура;
			ДанныеВыводимогоФайла.Вставить("Оригинал", ОписаниеВыводимогоФайла());
			ДанныеВыводимогоФайла.Вставить("Представления", Новый Массив());
			ДанныеВыводимогоФайла.Вставить("Подписи", Новый Массив());
			
			ИменаФайла = ИменаВыводимогоФайла(ФайлСоШтампами.ИмяФайла, ФайлСоШтампами.Расширение);
			
			// Оригинал
			ДанныеВыводимогоФайла.Оригинал.Представление = ИменаФайла.ИмяФайла;
			ДанныеВыводимогоФайла.Оригинал.АдресВоВременномХранилище = ДанныеОписанияФайла.АдресВХранилище;
			ДанныеВыводимогоФайла.Оригинал.ИдентификаторПечатнойФормы = ФайлСоШтампами.ИдентификаторПечатнойФормы;
			ДанныеВыводимогоФайла.Оригинал.ФизическоеЛицо = ДанныеОписанияФайла.ФизическоеЛицо;
			ДанныеВыводимогоФайла.Оригинал.Размер = ПолучитьИзВременногоХранилища(
				ДанныеВыводимогоФайла.Оригинал.АдресВоВременномХранилище).Размер();
			УстановитьИмяФайлаИРасширениеВыводимогоФайла(ДанныеВыводимогоФайла.Оригинал);
			
			// Представления
			ОписаниеФайла = ОписаниеВыводимогоФайла();
			ОписаниеФайла.Представление = ИменаФайла.ИмяФайлаДляПечати;
			ОписаниеФайла.АдресВоВременномХранилище = ФайлСоШтампами.АдресВХранилище;
			ОписаниеФайла.ИдентификаторПечатнойФормы = ФайлСоШтампами.ИдентификаторПечатнойФормы;
			ОписаниеФайла.ФизическоеЛицо = ДанныеОписанияФайла.ФизическоеЛицо;
			ОписаниеФайла.Размер = ФайлСоШтампами.Размер;
			
			УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла);
			ДанныеВыводимогоФайла.Представления.Добавить(ОписаниеФайла);
			
			// Подписи
			ОписаниеФайла = ОписаниеВыводимогоФайлаПодписи();
			ОписаниеФайла.Представление = ИменаФайла.ИмяФайлаПодписи;
			ОписаниеФайла.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ДанныеОписанияФайла.СвойстваПодписи.Подпись, ИдентификаторХранилища);
			ОписаниеФайла.Размер = ДанныеОписанияФайла.СвойстваПодписи.Подпись.Размер();
			ОписаниеФайла.УстановившийПодпись = ДанныеОписанияФайла.СвойстваПодписи.УстановившийПодпись;
			ОписаниеФайла.КомуВыданСертификат = ДанныеОписанияФайла.СвойстваПодписи.КомуВыданСертификат;
			
			УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла);
			ДанныеВыводимогоФайла.Подписи.Добавить(ОписаниеФайла);
			
			ДанныеФайлов.Вставить(ОписаниеФайла, ДанныеВыводимогоФайла)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИменаВыводимогоФайла(Знач ИмяФайла, Знач Расширение)
	
	ИменаФайла = Новый Структура;
	
	Если Не СтрЗаканчиваетсяНа(СокрЛП(ВРег(ИмяФайла)), "." + Врег(Расширение)) Тогда
		ИмяФайла = ИмяФайла + "." + Расширение;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	ИменаФайла.Вставить("ИмяФайла", Файл.ПолноеИмя);
	ИменаФайла.Вставить("ИмяФайлаДляПечати", Файл.ИмяБезРасширения + НСтр("ru = '_для_печати'") + Файл.Расширение);
	ИменаФайла.Вставить("ИмяФайлаПодписи", ИменаФайла.ИмяФайла + "." + ЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи);
	
	Возврат ИменаФайла;
	
КонецФункции

Процедура УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла)
	
	Файл = Новый Файл(ОписаниеФайла.Представление);
	ОписаниеФайла.ИмяФайлаБезРасширения = Файл.ИмяБезРасширения;
	ОписаниеФайла.РасширениеФайла = СтрЗаменить(Файл.Расширение, ".", "");
	
КонецПроцедуры

Функция СертификатыОрганизацииПользователя(Организации = Неопределено) Экспорт
	Запрос = ЗапросСертификатыОрганизацииПользователя(Организации);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ЗапросСертификатыОрганизацииПользователя(Организации = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка, ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)) КАК Сертификат,
		|	Организации.Ссылка КАК Организация,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО Организации.Ссылка = СертификатыКлючейЭлектроннойПодписиИШифрования.Организация
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Подписание)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван = ЛОЖЬ)
		|			И (НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо > &ТекущаяДата)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Программа <> ЗНАЧЕНИЕ(Справочник.ПрограммыЭлектроннойПодписиИШифрования.ПустаяСсылка))
		|ГДЕ
		|	Организации.Ссылка В(&Организации)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка, ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)),
		|	Организации.Ссылка,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Отпечаток
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО Организации.Ссылка = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Организация
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Подписание)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Отозван = ЛОЖЬ)
		|			И (НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.ПометкаУдаления)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.ДействителенДо > &ТекущаяДата)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Программа <> ЗНАЧЕНИЕ(Справочник.ПрограммыЭлектроннойПодписиИШифрования.ПустаяСсылка))
		|ГДЕ
		|	Организации.Ссылка В(&Организации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Сертификат УБЫВ";
	
	Если Организации = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организации.Ссылка В(&Организации)", "(ИСТИНА)");
	Иначе
		Запрос.УстановитьПараметр("Организации", Организации);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти