////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись в модели сервиса".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

Процедура ПодключитьОбработчикПроверкиЗаявлений(Интервал = Неопределено) Экспорт
	
	ОтключитьОбработчикПроверкиЗаявлений();
	
	// Подключаем однократно.
	// Внутри процедуры по результату проверки будет принято решение, включить ли его еще раз или нет.
	Интервал = ИнтервалПроверкиЗаявлений(Интервал);
	ПодключитьОбработчикОжидания("СообщитьОбОдобренныхЗаявленияхАбонента", Интервал, Истина);
	
КонецПроцедуры

Процедура ОтключитьОбработчикПроверкиЗаявлений() Экспорт
	
	ОтключитьОбработчикОжидания("СообщитьОбОдобренныхЗаявленияхАбонента");
	
КонецПроцедуры

Процедура ВключитьАвтоматическуюПроверкуСтатуса(ДокументЗаявление) Экспорт
	
	// Запускаем на сервере регламентное задание 
	ОбработкаЗаявленийАбонентаВызовСервера.ВключитьОтслеживаниеИзмененияСтатусаЗаявления(ДокументЗаявление);
	// Отслеживаем, вдруг у заявления изменился статус - тогда надо показать сообщение пользователю.
	ПодключитьОбработчикПроверкиЗаявлений();
	
КонецПроцедуры

Процедура СообщитьОбОдобренныхЗаявленияхАбонента_ПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.СообщитьОбОдобренныхЗаявленияхАбонента_Контейнер(Неопределено, Неопределено);
	
КонецПроцедуры

Процедура ПодсказкаКСертификатуОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "Подробнее" Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = ОбработкаЗаявленийАбонентаКлиентСервер.ПодробнаяПодсказкаПриВыбореСертификатаФНС(Форма.ЭтоЮридическоеЛицо);
		ПоказатьПредупреждение(, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ДляБП3

Процедура Открыть1СОтчетностьНаЗакладкеОтчеты() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
		ПараметрыФормы,
		,
		"1С-Отчетность");
	
	Оповестить("Открытие формы 1С-Отчетность", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьЗаявлениеНаПодключение(ЗаявлениеНаПодключение) Экспорт
	
	ПоказатьЗначение(, ЗаявлениеНаПодключение);
	
КонецПроцедуры

#КонецОбласти

	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнтервалПроверкиЗаявлений(Знач Интервал) Экспорт
	
	Если Интервал = Неопределено Тогда
		
		ИспользуетсяРежимТестирования = ДокументооборотСКОКлиент.ИспользуетсяРежимТестирования();
			
		Если ИспользуетсяРежимТестирования Тогда
			Интервал = 15;
		Иначе
			Интервал = 600;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Интервал;
	
КонецФункции

Процедура ПроверкаУЦОбработкаНавигационнойСсылки(Форма, Ссылка, СтандартнаяОбработка) Экспорт
	
	ЭтоВебСтраница = СтрНайти(Ссылка, "http");
	Если НЕ ЭтоВебСтраница Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(Форма.КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_УдалитеViPNet",, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключаемыйСертификатНажатие(ОповещениеОЗавершении, Форма, ПараметрыФормы = Неопределено) Экспорт
	
	КонтекстЭДОКлиент = Форма.КонтекстЭДОКлиент;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимВыбора", "Сертификат");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВключаемыйСертификатНажатие_Завершение", 
		ЭтотОбъект,
		ДополнительныеПараметры); 
	
	КонтекстЭДОКлиент.ВключаемыйСертификатНажатие(Форма, ОписаниеОповещения, , ПараметрыФормы);
	
КонецПроцедуры

Процедура ВключаемыйСертификатНажатие_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйСертификат = Результат.ВключаемыйСертификат;
	Период = 60 * 24 * 60 * 60;
	
	ПредложитьЗаменить = ВыбранныйСертификат.ДействителенПо - Период < ТекущаяДата();

	ВходящийКонтекст.Вставить("Результат", Результат);
	
	Если ПредложитьЗаменить Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВключаемыйСертификатНажатие_ПослеВопроса", 
			ЭтотОбъект, 
			ВходящийКонтекст);
		
		ТекстВопроса = ТекстВопросаОбИстекающемСертификате(ВыбранныйСертификат.ДействителенПо);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(НСтр("ru = 'Использовать выбранный'"));
		Кнопки.Добавить(НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,Кнопки[0].Значение);
		
	Иначе
		ВключаемыйСертификатНажатие_ПослеВопроса(НСтр("ru = 'Использовать выбранный'"), ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстВопросаОбИстекающемСертификате(ДействителенПо)
	
	Текст = ОбработкаЗаявленийАбонентаКлиентСервер.ТекстЧерезСколькоЛетМесяцевНедельДней(ТекущаяДата(), ДействителенПо, "", "");
		
	ТекстВопроса = НСтр("ru = 'Ваш сертификат истекает через %1.
                         |После окончания срока действия сертификата эл. подписи отправка отчетов станет невозможной.'");
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, Текст);
		
	Возврат ТекстВопроса;
	
КонецФункции

Процедура ВключаемыйСертификатНажатие_ПослеВопроса(Ответ, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(Форма);
	
	Если Ответ = НСтр("ru = 'Использовать выбранный'") Тогда
		
		ПослеВыбораСуществующегоСертификата(ВходящийКонтекст);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораСуществующегоСертификата(ВходящийКонтекст)
	
	Форма = ВходящийКонтекст.Форма;
	
	ЭтоЗаявлениеНаИзменение = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма);
	
	Если ЭтоЗаявлениеНаИзменение Тогда
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаписатьСуществующийСертификатВФорму", 
			ЭтотОбъект,
			ВходящийКонтекст);
	
		Текст = НСтр("ru = 'Обратите внимание, изменение некоторых настроек будет недоступно в этом заявлении в связи с подключением сертификата эл. подписи из другой программы. Для изменения этих настроек дождитесь одобрения данного заявления и отправьте новое.'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ЗаписатьСуществующийСертификатВФорму(КодВозвратаДиалога.ОК, ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСуществующийСертификатВФорму(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	Результат = ВходящийКонтекст.Результат;
	Форма     = ВходящийКонтекст.Форма;
	
	// Определяем до присвоения новых значений, иначе значение изменится
	ЭтоОблако = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоОблако(Форма);
	
	Форма.СпособПолученияСертификата	= ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	Форма.ВключаемыйСертификат 			= Результат.ВключаемыйСертификат;
	Форма.ЭтоСертификатДругогоУЦ		= Результат.ЭтоСертификатДругогоУЦ;
	Форма.ВключаемыйСертификатОблачный 	= Результат.ВключаемыйСертификатОблачный;
	
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Форма.ВключаемыйСертификат);
	Форма.МестоХраненияКлюча = МестоХраненияКлюча;
	Если КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
		ИсходнаяУчетнаяЗапись = Форма.СвойствоОблачнойПодписи.ИсходнаяУчетнаяЗапись;
		Форма.СвойствоОблачнойПодписи = ОбработкаЗаявленийАбонентаКлиентСервер.СведенияОблачнойПодписиЗаявления();
		Форма.СвойствоОблачнойПодписи.УчетнаяЗапись = КриптографияЭДКОКлиентСервер.ПолучитьУчетнуюЗаписьПодписи(МестоХраненияКлюча);
		Форма.СвойствоОблачнойПодписи.ПоставляемыйСервер = ОбработкаЗаявленийАбонентаВызовСервера.ЭтоПоставляемыйСерверОблачнойПодписи(Форма.СвойствоОблачнойПодписи.УчетнаяЗапись);
		Форма.СвойствоОблачнойПодписи.ИсходнаяУчетнаяЗапись = ИсходнаяУчетнаяЗапись;
		Форма.ПереключитьНаОблачнуюПодпись(МестоХраненияКлюча);
		
	ИначеЕсли Форма.ВключаемыйСертификатОблачный И НЕ ЭтоОблако Тогда
		Форма.ПереключитьНаОблачноеХранение();
		
	ИначеЕсли НЕ Форма.ВключаемыйСертификатОблачный И ЭтоОблако Тогда
		Форма.ПереключитьНаЛокальноеХранение();
		
	КонецЕсли;
	
	Форма.УправлениеФормой();
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура УЦПриИзменении(Форма, ОповещениеОЗавершении = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	ВыбранФНС = Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС");
	ЭтоОблако = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоОблако(Форма);
	ЭтоОблачнаяПодпись = КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(Форма.МестоХраненияКлюча);
	
	Если (ЭтоОблако ИЛИ ЭтоОблачнаяПодпись) И ВыбранФНС Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИсправитьУЦ", 
			ЭтотОбъект,
			ДополнительныеПараметры);

		Текст = НСтр("ru = 'Получение сертификата эл. подписи в инспекции ФНС невозможно при хранении подписи в программе. Переключиться на хранение подписи на этом компьютере?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбработкаЗаявленийАбонентаКлиентСервер.ИзменитьОформлениеУЦ(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьУЦ(Ответ, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	
	ВернутьОснование = 
		Ответ = КодВозвратаДиалога.Нет 
		ИЛИ Ответ = КодВозвратаДиалога.Отмена;
	
	Если ВернутьОснование Тогда
		
		ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
		ЭтоОблако = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоОблако(Форма);
		ЭтоОблачнаяПодпись = КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(Форма.МестоХраненияКлюча);
			
		Если ЭтоРуководитель И (ЭтоОблако ИЛИ ЭтоОблачнаяПодпись) Тогда
			Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр");
		Иначе
			Форма.УЦ = Неопределено;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Форма.ПереключитьНаЛокальноеХранение();
	КонецЕсли;
	
	Форма.УправлениеФормой();
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
	
КонецПроцедуры

Функция ЛицензииКриптоПроИстекла(Форма) Экспорт
	
	КонтекстЭДОКлиент = Форма.КонтекстЭДОКлиент;

	ДатаИстечения = КонтекстЭДОКлиент.ДатаИстеченияЛицензииКриптоПро();
	Бесконечная   = НЕ КонтекстЭДОКлиент.СрокЛицензииКриптоПроКонечный();
	
	Истекла = 
		НЕ Бесконечная 
		И ДатаИстечения <> Неопределено 
		И ДатаИстечения < ТекущаяДата();
		
	Возврат Истекла;
		
КонецФункции

Процедура ПодписатьЗаявлениеСтороннимСертификатом(
		КонтекстЭДОКлиент, 
		ОповещениеОЗавершении, 
		ДвДанныеДляПодписания, 
		СертификатДляПодписания,
		ТипКриптопровайдера) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ДвДанныеДляПодписания", ДвДанныеДляПодписания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьЗаявлениеСтороннимСертификатом_ПослеПолученияМенеджера", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ПолучитьМенеджерИСертификатКриптографии(
		СертификатДляПодписания, 
		ОписаниеОповещения, 
		ТипКриптопровайдера);
	
КонецПроцедуры

Процедура ПодписатьЗаявлениеСтороннимСертификатом_ПослеПолученияМенеджера(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено = Истина И НЕ Результат.МенеджерКриптографии = Неопределено Тогда
		СертификатКриптографии 	= Результат.СертификатКриптографии;
		МенеджерКриптографии 	= Результат.МенеджерКриптографии;
	Иначе
		ТекстОшибки = НСтр("ru = 'Ошибка получения менеджера криптографии'");
		ВернутьРезультатПодписанияПлатформой(ВходящийКонтекст, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ВходящийКонтекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	// Нельзя объединять оповещения, так как параметры оповещения различные
	Оповещение = Новый ОписаниеОповещения(
		"СформироватьИОтправить_ПроверкаПодписи", 
		ЭтотОбъект, 
		ВходящийКонтекст,
		"СформироватьИОтправить_ОбработчикОшибкиПодписания",
		ЭтотОбъект);
			
	ДвДанныеДляПодписания = ВходящийКонтекст.ДвДанныеДляПодписания;
	
	// Методом платформы, так как компонента не подписывает сертификатами сторонних УЦ
	МенеджерКриптографии.НачатьПодписывание(
		Оповещение, 
		ДвДанныеДляПодписания, 
		СертификатКриптографии);
		
КонецПроцедуры

Процедура СформироватьИОтправить_ОбработчикОшибкиПодписания(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке));
	
	ВернутьРезультатПодписанияПлатформой(ВходящийКонтекст, ТекстОшибки);
	
КонецПроцедуры

Процедура СформироватьИОтправить_ПроверкаПодписи(ПодписанноеСообщение, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Вставить("ПодписанноеСообщение", ПодписанноеСообщение);
	
	ДвДанныеДляПодписания = ВходящийКонтекст.ДвДанныеДляПодписания;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СформироватьИОтправить_ПослеПроверкиПодписи", 
		ЭтотОбъект, 
		ВходящийКонтекст,
		"СформироватьИОтправить_ОбработчикОшибкиПодписания",
		ЭтотОбъект);
		
	ВходящийКонтекст.МенеджерКриптографии.НачатьПроверкуПодписи(
		ОписаниеОповещения,
		ДвДанныеДляПодписания, 
		ПодписанноеСообщение);
	
КонецПроцедуры

Процедура СформироватьИОтправить_ПослеПроверкиПодписи(Результат, ВходящийКонтекст) Экспорт
	
	ВернутьРезультатПодписанияПлатформой(ВходящийКонтекст);
	
КонецПроцедуры

Процедура ВернутьРезультатПодписанияПлатформой(ВходящийКонтекст, ТекстОшибки = "") Экспорт
	
	Если ТекстОшибки = "" Тогда
		Результат = Новый Структура();
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("ПодписанноеСообщение", ВходящийКонтекст.ПодписанноеСообщение);
	Иначе
		Результат = Новый Структура();
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	 
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры


#КонецОбласти

