
#Область ПрограммныйИнтерфейс

#Область Основные

// Возвращает список доступных типов оборудования.
// 
// Возвращаемое значение:
//   Массив - Массив доступных типов подключаемого оборудования в конфигурации.
//
Функция ПолучитьДоступныеТипыОборудования() Экспорт
	
	СписокОборудования = Новый Массив;
	
	// Сканеры штрихкода
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	// Конец Сканеры штрихкода
	
	Возврат СписокОборудования;
	
КонецФункции

// Возвращает флаг возможности добавления новых драйверов в справочник драйверов.
// 
// Возвращаемое значение:
//   Булево - В случае разрешение добавления новых драйверов возвращает Истина.
//
Функция ВозможностьДобавленияНовыхДрайверов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает флаг возможности использовать подключаемое оборудование.
// 
// Возвращаемое значение:
//   Булево - В случае разрешение использовать подключаемое оборудование.
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак возможности обращения к разделенным данным из текущего сеанса.
//  
// Возвращаемое значение:
//  Булево - В случае вызова в неразделенной конфигурации возвращает Истина.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Возврат ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
КонецФункции

// Возвращает признак доступности распределенной фискализации.
//  
// Возвращаемое значение:
//  Булево - В случае доступности распределенной фискализации.
//
Функция ДоступноРаспределеннаяФискализации() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновление библиотеки в целевой конфигурации.
//                                   
Процедура ОбновлениеБиблиотеки() Экспорт
	
	ОбновитьПоставляемыеДрайвера();
	ОбновитьУстановленныеДрайвера();
	
КонецПроцедуры

// Обновить поставляемые драйверы в составе конфигурации.
//                                   
Процедура ОбновитьПоставляемыеДрайвера() Экспорт
	
	// Сканеры штрихкода
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода, "AddIn.ScancodeScanner", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода, "AddIn.Scaner45", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода, "AddIn.Scanner", "Драйвер1ССканерШтрихкода", Ложь, "8.1.9.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкодаNative, "AddIn.InputDevice", "Драйвер1СУстройстваВводаNative", Ложь, "9.0.8.7");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонСканерыШтрихкода, "AddIn.ProtonScanner", "ДрайверГексагонСканерШтрихкода", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода8X, "AddIn.ATOL_Scaners_1CInt", "ДрайверАТОЛУстройстваВвода8X", Ложь);
	// Конец Сканеры штрихкода
	
КонецПроцедуры

// Обновить установленные драйвера.
//
Процедура ОбновитьУстановленныеДрайвера() Экспорт
	
	// Сканеры штрихкода
	МенеджерОборудованияВызовСервера.ОбновитьУстановленныеДрайвера(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	// Конец Сканеры штрихкода
	
КонецПроцедуры

// Возвращает флаг возможности использовать драйверов снятых с поддержки.
// 
// Возвращаемое значение:
//   Булево - В случае возможность использовать снятых с поддержки драйверов возвращает Истина.
//
Функция ВозможностьИспользоватьСнятыхСПоддержкиДрайверов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Переопределяемая процедура для подсистемы управление доступом СтандартныеПодсистемы
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭлементомФормы

// Дополнительные переопределяемые действия с элементом формы 
// служит для учета специфики визуального отображения в зависимости от типа клиента.
//
Процедура ПодготовитьЭлементУправления(ЭлементУправления, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновленияБПОМеждуВерсиями

// Обновить параметры ККМ Офлайн.
//
Процедура ОбновитьПараметрыККМОфлайн205() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	
	// 1С ККМОфлайн - при переходе с 2.0.4 на 2.0.5
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.УдалитьВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВидТранспортаОфлайнОбмена) Тогда
			Продолжить; // обработка уже была
		КонецЕсли;
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", Выборка.ВерсияФорматаОбмена);
		НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.FILE);
		
		Если Выборка.ВерсияФорматаОбмена > 2000 Тогда
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогОбмена") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогОбмена", ДанныеУстройства.Параметры.КаталогОбмена);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаЗагрузки", ДанныеУстройства.Параметры.ИмяФайлаЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаВыгрузки", ДанныеУстройства.Параметры.ИмяФайлаВыгрузки);
			КонецЕсли;
			
		Иначе
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогВыгрузки", ДанныеУстройства.Параметры.КаталогВыгрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаНастроек") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаНастроек", ДанныеУстройства.Параметры.ИмяФайлаНастроек);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаПрайсЛиста") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаПрайсЛиста", ДанныеУстройства.Параметры.ИмяФайлаПрайсЛиста);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогЗагрузки", ДанныеУстройства.Параметры.КаталогЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяЗагружаемогоФайла") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяЗагружаемогоФайла", ДанныеУстройства.Параметры.ИмяЗагружаемогоФайла);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
				НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
			КонецЕсли;
			
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
		
		ОборудованиеОбъект = Выборка.Идентификатор.ПолучитьОбъект(); //СправочникОбъект.ПодключаемоеОборудование - .
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE;
		ОборудованиеОбъект.Записать();
		
	КонецЦикла;
	
	// WebСервис -> ККМОфлайн
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.УдалитьВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.УдалитьWebСервисОборудование)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВидТранспортаОфлайнОбмена) Тогда
			Продолжить; // обработка уже была
		КонецЕсли;
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", Выборка.ВерсияФорматаОбмена);
		НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
		
		Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
			НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
		
		ОборудованиеОбъект = Выборка.Идентификатор.ПолучитьОбъект(); //СправочникОбъект.ПодключаемоеОборудование - .
		
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS;
		ОборудованиеОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн;
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1СККМOffline;
		ОборудованиеОбъект.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		ОборудованиеОбъект.Записать();
		
	КонецЦикла;
	
	
	// Заполнение ТипОфлайнОборудования И ВидТранспортаОфлайнОбмена
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
		|	И ПодключаемоеОборудование.ТипОфлайнОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыОфлайнОборудования.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОборудованиеОбъект = Выборка.Ссылка.ПолучитьОбъект(); //СправочникОбъект.ПодключаемоеОборудование -
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE;
		ОборудованиеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновить параметры ККМ Офлайн.
//
Процедура ОбновитьПараметрыККМОфлайн211() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	// 1С ККМОфлайн - при переходе с 2.0.6 на 2.1.1
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		Если ДанныеУстройства.Параметры.Свойство("ВерсияФорматаОбмена") Тогда
			ВерсияФорматаОбмена = ДанныеУстройства.Параметры.ВерсияФорматаОбмена;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяВерсия = 3000;
		Если НЕ (ВерсияФорматаОбмена > 2000 И НЕ ВерсияФорматаОбмена = НоваяВерсия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.FILE);
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогОбмена") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогОбмена", ДанныеУстройства.Параметры.КаталогОбмена);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаЗагрузки", ДанныеУстройства.Параметры.ИмяФайлаЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаВыгрузки", ДанныеУстройства.Параметры.ИмяФайлаВыгрузки);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		ИначеЕсли Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
			
			Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
				НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ПараметрыДрайвераККМ") Тогда
				НовыеЗначениеПараметров.Вставить("ПараметрыДрайвераККМ", ДанныеУстройства.Параметры.ПараметрыДрайвераККМ);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновить параметры ККМ Офлайн Эвотор
//
Процедура ОбновитьПараметрыККМОфлайнЭвотор() Экспорт
	
	//Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭвоторККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Ссылка);
		
		Если ДанныеУстройства.Свойство("ПериодИзмененВручную") Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ЭтоПерваяЗагрузка", Истина);
		НовыеЗначениеПараметров.Вставить("ПериодИзмененВручную", Ложь);
		
		Если ДанныеУстройства.Параметры.Свойство("Токен") Тогда
			НовыеЗначениеПараметров.Вставить("Токен", ДанныеУстройства.Параметры.Токен);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("Магазин") Тогда
			НовыеЗначениеПараметров.Вставить("Магазин", ДанныеУстройства.Параметры.Магазин);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("МагазинЗначение") Тогда
			НовыеЗначениеПараметров.Вставить("МагазинЗначение", ДанныеУстройства.Параметры.МагазинЗначение);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("Терминал") Тогда
			НовыеЗначениеПараметров.Вставить("Терминал", ДанныеУстройства.Параметры.Терминал);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ТерминалЗначение") Тогда
			НовыеЗначениеПараметров.Вставить("ТерминалЗначение", ДанныеУстройства.Параметры.ТерминалЗначение);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ПериодВыгрузки") Тогда
			НовыеЗначениеПараметров.Вставить("ДатаНачала", ДанныеУстройства.Параметры.ПериодВыгрузки.ДатаНачала);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ПериодВыгрузки") Тогда
			НовыеЗначениеПараметров.Вставить("ДатаОкончания", ДанныеУстройства.Параметры.ПериодВыгрузки.ДатаОкончания);
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Ссылка, НовыеЗначениеПараметров);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Обновить параметры ККМ Офлайн Эвотор
Процедура ОбновитьПараметрыДатыЗагрузкиККМОфлайнЭвотор() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭвоторККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Ссылка);
		
		Если ДанныеУстройства.Параметры.Свойство("ДатаНачала") И ДанныеУстройства.Параметры.Свойство("ДатаОкончания") Тогда
			Продолжить;
		Иначе
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ЭтоПерваяЗагрузка", Истина);
			НовыеЗначениеПараметров.Вставить("ПериодИзмененВручную", Ложь);
			
			Если ДанныеУстройства.Параметры.Свойство("Токен") Тогда
				НовыеЗначениеПараметров.Вставить("Токен", ДанныеУстройства.Параметры.Токен);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("Магазин") Тогда
				НовыеЗначениеПараметров.Вставить("Магазин", ДанныеУстройства.Параметры.Магазин);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("МагазинЗначение") Тогда
				НовыеЗначениеПараметров.Вставить("МагазинЗначение", ДанныеУстройства.Параметры.МагазинЗначение);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("Терминал") Тогда
				НовыеЗначениеПараметров.Вставить("Терминал", ДанныеУстройства.Параметры.Терминал);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ТерминалЗначение") Тогда
				НовыеЗначениеПараметров.Вставить("ТерминалЗначение", ДанныеУстройства.Параметры.ТерминалЗначение);
			КонецЕсли;
			
			НовыеЗначениеПараметров.Вставить("ДатаНачала", Неопределено);
			НовыеЗначениеПараметров.Вставить("ДатаОкончания", Неопределено);
				
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Ссылка, НовыеЗначениеПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обновить параметры ККМ Офлайн.
//
Процедура УстановитьПоследнююВерсиюФорматаОфлайнОборудование() Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОборудованиеККТ

// Процедура заполняет реквизиты организации для регистрации ФН.
//
Процедура ЗаполнитьРеквизитыОрганизацииДляРегистрацииФН(Организация, ПараметрыРегистрации) Экспорт
	
КонецПроцедуры

// Переопределяет формируемый шаблон чека.
//
Функция СформироватьШаблонЧека(ОбщиеПараметры, ДополнительныйТекст, СтандартнаяОбработка, ТипОборудования = "") Экспорт

КонецФункции

// Переопределяет доступное ККТ для фискализации чека
// Параметры:
//  РеквизитыЧека - Структура - реквизиты фискального чека
//  СписокУстройств - Массив - список доступных ККТ для фискализации
//  ИдентификаторУстройстваККТ - Ссылка - выбранное ККТ для фискализации
//
Процедура ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ) Экспорт

КонецПроцедуры

// Возвращает признак заполнения тега 1162 (код товара) только для DataMatrixGS1.
//  
// Возвращаемое значение:
//  Булево - Если код товара заполняется только для КМ DataMatrixGS1.
//
Функция КодТовараЗаполняетсяТолькоДляDataMatrixGS1() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОборудованиеOffline

// Функция возвращает префикс весового товара применяемого для генерации штрихкода.
// Используется при выгрузке в весы с печатью этикеток.
//
// Параметры:
//  ПодключаемоеОборудованиеСсылка - Ссылка на экземпляр подключаемого оборудования.
// 
// Возвращаемое значение:
//   Число - Префикс весового товара.
//
Функция ПолучитьПрефиксВесовогоТовара(ПодключаемоеОборудованиеСсылка) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает префикс штучного товара применяемого для генерации штрихкода.
// Используется при выгрузке в весы с печатью этикеток.
//
// Параметры:
//  ПодключаемоеОборудованиеСсылка - Ссылка на экземпляр подключаемого оборудования.
// 
// Возвращаемое значение:
//   Число - Префикс штучного товара который фасуется на весах.
//
Функция ПолучитьПрефиксШтучногоТовара(ПодключаемоеОборудованиеСсылка) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормойЭкземпляраОборудования

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  Параметры - Структура - Параметры операции
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ЭкземплярОборудованияПриСозданииНаСервере(Объект, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриЧтенииНаСервере".
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//
Процедура ЭкземплярОборудованияПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПередЗаписьюНаСервере".
//
// Параметры:
//  Отказ - Булево - Отказ операции
//  ТекущийОбъект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ПараметрыЗаписи - Структура - Параметры операции
//
Процедура ЭкземплярОборудованияПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриЗаписиНаСервере".
//
// Параметры:
//  Отказ - Булево - Отказ операции
//  ТекущийОбъект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ПараметрыЗаписи - Структура - Параметры операции
//
Процедура ЭкземплярОборудованияПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПослеЗаписиНаСервере".
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ПараметрыЗаписи - Структура - Параметры операции
//
Процедура ЭкземплярОборудованияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ОбработкаПроверкиЗаполненияНаСервере".
//
// Параметры:
//  Объект - СправочникОбъект.ПодключаемоеОборудование - Объект подключаемого оборудования.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  ПроверяемыеРеквизиты - Структура - Проверяемые реквизиты
//
Процедура ЭкземплярОборудованияОбработкаПроверкиЗаполненияНаСервере(Объект, ЭтаФорма, Отказ, ПроверяемыеРеквизиты) Экспорт

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойЭкземпляраФискальныеОперации

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре Фискальные операции
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  Запись - Запись - Запись фискальные операции.
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  Параметры - Структура - Параметры операции
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ЭкземплярФискальныеОперацииПриСозданииНаСервере(Запись, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойСписокаФискальныеОперации

// Дополнительные переопределяемые действия с управляемой формой в Список Фискальные операции
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  ЭтаФорма – ФормаКлиентскогоПриложения – Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  Параметры - Структура - Параметры операции
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура СписокФискальныеОперацииПриСозданииНаСервере(ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ОчередьФискальныхЧеков

// Завершение фискализация чека в очереди
//
// Параметры:
//  ИдентификаторФискальнойЗаписи - Строка - Идентификатор фискальной записи
//  ПараметрыФискализации - Структура - Параметры операции
//  СтандартнаяОбработка - СправочникСсылка - СправочникСсылка.ПодключаемоеОборудование
//  РезультатФискализации - Структура - Результат Фискализации
//
Процедура ФискализацияЧекаВОчереди(ИдентификаторФискальнойЗаписи, ПараметрыФискализации, ОборудованиеККТ, РезультатФискализации) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти