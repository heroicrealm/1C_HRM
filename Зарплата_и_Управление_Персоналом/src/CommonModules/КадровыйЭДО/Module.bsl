#Область ПрограммныйИнтерфейс

// Дорабатывает форму нового документа, создает реквизиты наличия присоединенных файлов печатных форм.
// Вызывается из события ПриСозданииНаСервере формы объекта.
//
// Параметры:
//   УправляемаяФорма     - ФормаКлиентскогоПриложения - форма объекта.
//   Отказ                - Булево
//   СтандартнаяОбработка - Булево
//   ОбъектФормы          - ДанныеФормыСтруктура, основной объект формы
//
Процедура ПриСозданииНаСервереФормыОбъекта(УправляемаяФорма, Отказ, СтандартнаяОбработка, ОбъектФормы) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УправляемаяФорма.Параметры.Свойство("Ключ") Тогда
		Возврат;
	КонецЕсли;
	
	Если УправляемаяФорма.Параметры.Ключ.Пустая() Тогда
		ПроинициализироватьФормуОбъекта(УправляемаяФорма);
		КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, ОбъектФормы, Ложь);
	КонецЕсли;
	
	Структура = Новый Структура("РеквизитыИдентификаторов,ПараметрыПодключаемыхКоманд", Null, Null);
	ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
	Если ТипЗнч(Структура.ПараметрыПодключаемыхКоманд) = Тип("Структура")
		И Структура.РеквизитыИдентификаторов = Неопределено Тогда
		
		УправляемаяФорма.РеквизитыИдентификаторов =
			Новый ФиксированноеСоответствие(РеквизитыИдентификаторовПоПараметрам(Структура.ПараметрыПодключаемыхКоманд));
		
		ПриПомещенииДанныхВРеквизиты(УправляемаяФорма, ОбъектФормы.Ссылка, ОбъектФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Дорабатывает форму существующего документа, создает реквизиты наличия присоединенных файлов печатных форм.
// Вызывается из события ПриЧтенииНаСервере формы объекта.
//
// Параметры:
//   УправляемаяФорма     - ФормаКлиентскогоПриложения - форма объекта.
//   ТекущийОбъект        - ДокументОбъект - объект, который будет прочитан.
//   ОбъектФормы          - ДанныеФормыСтруктура, основной объект формы
//
Процедура ПриЧтенииНаСервереФормыОбъекта(УправляемаяФорма, ТекущийОбъект, ОбъектФормы) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	ПроинициализироватьФормуОбъекта(УправляемаяФорма);
	
КонецПроцедуры

// В форме документа обновляет сведения о наличии присоединенных файлов печатных форм.
// Вызывается из события ПослеЗаписиНаСервере формы объекта.
//
// Параметры:
//   УправляемаяФорма     - ФормаКлиентскогоПриложения - форма объекта.
//   ТекущийОбъект        - ДокументОбъект - объект.
//   ПараметрыЗаписи      - Структура
//   ОбъектФормы          - ДанныеФормыСтруктура, основной объект формы
//
Процедура ПослеЗаписиНаСервереФормыОбъекта(УправляемаяФорма, ТекущийОбъект, ПараметрыЗаписи, ОбъектФормы) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	ПриПомещенииДанныхВРеквизиты(УправляемаяФорма, ТекущийОбъект.Ссылка, ОбъектФормы);
	
КонецПроцедуры

// Дорабатывает запрос динамического списка документов, расширяя состав полей признаками
// наличия присоединенного файла печатной формы.
//
// Параметры:
//  УправляемаяФорма - УправляемаяФорма
//  Список           - ДинамическийСписок
//
Процедура ПриСозданииНаСервереФормыСписка(УправляемаяФорма, Список) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	Структура = Новый Структура("ПараметрыПодключаемыхКоманд", Null);
	ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
	ПараметрыПодключаемыхКоманд = Структура.ПараметрыПодключаемыхКоманд;
	Если ТипЗнч(ПараметрыПодключаемыхКоманд) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыИдентификаторов = РеквизитыИдентификаторовПоПараметрам(ПараметрыПодключаемыхКоманд,
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Выбор.ДоступныеПоляВыбора.Элементы);
	
	Если РеквизитыИдентификаторов.Количество() > 0 Тогда
		
		Схема = Новый СхемаЗапроса();
		Схема.РежимКомпоновкиДанных = Истина;
		Схема.УстановитьТекстЗапроса(Список.ТекстЗапроса);
		Пакет = Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество() - 1];
		Оператор = Пакет.Операторы[0];
		Для Каждого ТипыИдентификатора Из РеквизитыИдентификаторов Цикл
			Если ТипЗнч(ТипыИдентификатора.Значение) = Тип("Строка")
				И СтрНайти(ТипыИдентификатора.Значение, ",") = 0 Тогда
				
				Оператор.ВыбираемыеПоля.Добавить("ЛОЖЬ");
				Пакет.Колонки[Оператор.ВыбираемыеПоля.Количество() - 1].Псевдоним = ТипыИдентификатора.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Список.ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
		
		Для Каждого ТипыИдентификатора Из РеквизитыИдентификаторов Цикл
			Список.УстановитьОбязательноеИспользование(ТипыИдентификатора.Значение, Истина);
		КонецЦикла;
		
		Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РеквизитыИдентификаторов", РеквизитыИдентификаторов);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет флаги существования присоединенных файлов печатных форм.
//
// Параметры:
//  ИмяЭлемента - Строка
//  Настройки   - НастройкиКомпоновкиДанных
//  Строки      - СтрокиДинамическогоСписка
//
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Настройки.ДополнительныеСвойства.Свойство("РеквизитыИдентификаторов") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыИдентификаторов = Настройки.ДополнительныеСвойства.РеквизитыИдентификаторов;
	
	КлючиСтрок = Строки.ПолучитьКлючи();
	
	УстановитьПривилегированныйРежим(Истина);
	ФайлыПечатныхФорм = ФайлыПечатныхФормПоОбъектам(КлючиСтрок);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ОписаниеФайлов Из ФайлыПечатныхФорм Цикл
		
		СтрокаСписка = Строки.Получить(ОписаниеФайлов.Ключ);
		Если СтрокаСписка <> Неопределено Тогда
			
			ЗначенияИдентификаторов = ИспользуемыеИдентификаторы(ОписаниеФайлов.Значение);
			Для Каждого ЗначениеИдентификатора Из ЗначенияИдентификаторов Цикл
				ИмяРеквизита = РеквизитыИдентификаторов.Получить(ЗначениеИдентификатора.Ключ);
				Если ИмяРеквизита <> Неопределено Тогда
					СтрокаСписка.Данные[ИмяРеквизита] = ЗначениеИдентификатора.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Задает детальную область печати в табличном документе, позволяя более глубоко детализировать
// выводимые бланки по одной ссылке на объект.
//
// Параметры:
//  ПараметрыПечати            - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ДокументРезультат          - ТабличныйДокумент
//  ИдентификаторПечатнойФормы - Строка
//  НомерСтрокиНачалаОбласти   - Число
//  ДанныеПечати               - Структура, СтрокаТаблицаЗначений, содержащая детальную информацию
//  ОбъектДокумента            - Ссылка на печатаемый объект
//
Процедура ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторПечатнойФормы, НомерСтрокиНачалаОбласти, ДанныеПечати, ОбъектДокумента) Экспорт
	
	Если ПараметрыПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДетализации = Неопределено;
	Если ПараметрыПечати.Свойство("РеквизитыДетализации") Тогда
		РеквизитыДетализации = ПараметрыПечати.РеквизитыДетализации;
	КонецЕсли;
	
	Если РеквизитыДетализации = Неопределено
		И ПараметрыПечати.Свойство("РеквизитыДетализацииПакета") Тогда
		
		РеквизитыДетализации = ПараметрыПечати.РеквизитыДетализацииПакета[ИдентификаторПечатнойФормы];
	КонецЕсли;
	
	Если РеквизитыДетализации <> Неопределено Тогда
		
		КлючОбласти = Новый Структура(РеквизитыДетализации);
		ЗаполнитьЗначенияСвойств(КлючОбласти, ДанныеПечати);
		
		Если ПараметрыПечати.Свойство("ИдентификаторыОбластейОбъектов") Тогда
			ИдентификаторыОбластей = ПараметрыПечати.ИдентификаторыОбластейОбъектов;
		Иначе
			ИдентификаторыОбластей = Новый Соответствие;
			ПараметрыПечати.Вставить("ИдентификаторыОбластейОбъектов", ИдентификаторыОбластей);
		КонецЕсли;
		
		ИдентификаторыОбластейДокумента = ИдентификаторыОбластей.Получить(ОбъектДокумента);
		Если ИдентификаторыОбластейДокумента = Неопределено Тогда
			ИдентификаторыОбластейДокумента = Новый СписокЗначений;
			ИдентификаторыОбластей.Вставить(ОбъектДокумента, ИдентификаторыОбластейДокумента);
		КонецЕсли;
		
		ИдентификаторОбласти = "Область_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
		
		НомерСтрокиОкончаниеОбласти = ДокументРезультат.ВысотаТаблицы;
		ДокументРезультат.Область(НомерСтрокиНачалаОбласти, , НомерСтрокиОкончаниеОбласти, ).Имя = ИдентификаторОбласти;
		КлючОбласти.Вставить("НомерСтрокиНачалаОбласти", НомерСтрокиНачалаОбласти);
		КлючОбласти.Вставить("НомерСтрокиОкончаниеОбласти", НомерСтрокиОкончаниеОбласти);
		
		ИдентификаторыОбластейДокумента.Добавить(КлючОбласти, ИдентификаторОбласти);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание файлов печатных форм объектов.
//
// Параметры:
//  Владельцы                  - Массив, ссылок на объекты с присоединенными файлами
//  ИдентификаторыПечатныхФорм - Массив, идентификаторов печатных форм
//                             - Строка, идентификаторы печатных форм, разделенные запятыми
//
// Возвращаемое значение:
//  Структура - с ключами:
//   * ПечатныеФормыОбъектов - Соответствие
//     * Ключ     - Ссылка на владельца
//     * Значение - Структура
//        * Ключ     - Идентификатор печатной формы
//        * Значение - Массив, ссылок на присоединенные файлы
//   * ОригиналыПечатныхФорм - Структура
//      * Ключ     - Идентификатор печатной формы
//      * Значение - Структура, с Ключами
//         * Наименование - Наименование печатной формы
//         * Оригиналы    - Соответствие
//            * Ключ     - Ссылка, на присоединенный файл печатной формы
//            * Значение - Структура с ключами, описывающими печатную форму
//
Функция ОписанияФайловПечатныхФормПоОбъектам(Владельцы, ИдентификаторыПечатныхФорм) Экспорт
	
	ОписанияФайловПечатныхФорм = ОписанияФайловПечатныхФорм();
	ЗаполнитьОписанияФайловПечатныхФормПоОбъектам(ОписанияФайловПечатныхФорм, Владельцы, ИдентификаторыПечатныхФорм);
	
	Возврат ОписанияФайловПечатныхФорм;
	
КонецФункции

// Разблокирует объект с приложенными файлами печатных форм, помечая файлы печатных форм на удаление.
//
// Параметры:
//  ОбъектДляРазблокировки - ОпределяемыйТип.ОбъектСПечатнымиФормами
//
// Возвращаемое значение:
//  Строка - Пустая если все в порядке или полное описание возникшей ошибки.
//
Функция РазблокироватьОбъектДляИзменений(ОбъектДляРазблокировки) Экспорт
	
	Результат = "";
	Попытка
		УдалитьПечатныеФормыОбъекта(ОбъектДляРазблокировки);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		Результат = ПодробноеПредставлениеОшибки(Ошибка);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Вызывает процедуры печати в менеджерах объектов после переопределения массива ссылок, выводимых на печать.
//
// Параметры:
//  МенеджерПечати        - модуль менеджера или общий модуль, содержащий процедуру Печать
//  МассивОбъектов        - Массив, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ПараметрыПечати       - Структура, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  КоллекцияПечатныхФорм - ТаблицаЗначений, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ОбъектыПечати         - СписокЗначений, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ПараметрыВывода       - Структура, см. УправлениеПечатьюПереопределяемый.ПриПечати
//  СписокСотрудников     - Массив, ссылок на элементы справочника Сотрудники, когда производится
//                          печать по одному сотруднику списочного документа
//
Процедура ПечатьСтороннейПечатнойФормы(МенеджерПечати, МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников = Неопределено) Экспорт
	
	Для Каждого СтрокаПечатнойФормы Из КоллекцияПечатныхФорм Цикл
		
		Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(СтрокаПечатнойФормы.ИмяМакета) Тогда
			МассивОбъектовНаПечать = МассивОбъектов;
			Прервать;
		КонецЕсли;
		
		МассивОбъектовНаПечать = ОбщегоНазначения.СкопироватьРекурсивно(МассивОбъектов);
		ПриОпределенииОбъектовПечатнойФормы(МассивОбъектовНаПечать, СтрокаПечатнойФормы.ИмяМакета,
			Метаданные.НайтиПоТипу(ТипЗнч(МенеджерПечати)).ПолноеИмя(), ПараметрыПечати, СписокСотрудников);
		
		Если ЗначениеЗаполнено(СписокСотрудников) Тогда
			МассивОбъектовНаПечать = МассивОбъектов;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОбъектовНаПечать = Неопределено Тогда
		МассивОбъектовНаПечать = Новый Массив;
	Иначе
		
		Если СписокСотрудников = Неопределено Тогда
			МенеджерПечати.Печать(МассивОбъектовНаПечать, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
		Иначе
			МенеджерПечати.Печать(МассивОбъектовНаПечать, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников);
		КонецЕсли;
		
	КонецЕсли;
	
	ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Добавляет в команды печати объектов условия, позволяющие отличить их
// в общей массе команд печати.
//
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//  ИмяОбъекта    - Строка, полное имя объекта метаданных, для которого необходимо
//                  получить список команд печати.
//
Процедура ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта) Экспорт
	
	Если Не (ИспользуютсяЭлектронныеДокументы()
		И ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи()) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта)) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипа = СтрЗаменить(ИмяОбъекта, ".", "Ссылка.");
	Если Не ЭтоТипОбъектаСПечатнымиФормами(Тип(ИмяТипа)) Тогда
		Возврат;
	КонецЕсли;
	
	КомандыДляРасширения = Новый Массив;
	КомандыПечатиПакетаДокументов = Новый Массив;
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		
		Если КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати" Тогда
			
			Если КомандаПечати.Картинка = БиблиотекаКартинок.СторонняяПечатнаяФорма Тогда
				Продолжить;
			КонецЕсли;
			
			Если КомандаПечати.Картинка = БиблиотекаКартинок.ПечатьПакетаДокументов Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторКоманды = КомандаПечати.Идентификатор;
			Если ТипЗнч(ИдентификаторКоманды) = Тип("Массив") Тогда
				
				Если ИдентификаторКоманды.Количество() > 1 Тогда
					КомандыПечатиПакетаДокументов.Добавить(КомандаПечати);
					Продолжить;
				Иначе
					ИдентификаторКоманды = ИдентификаторКоманды[0];
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрРазделить(ИдентификаторКоманды, ",").Количество() > 1 Тогда
				КомандыПечатиПакетаДокументов.Добавить(КомандаПечати);
				Продолжить;
			КонецЕсли;
			
			Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ИдентификаторКоманды) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Идентификатор", КомандаПечати.Идентификатор);
			СтруктураПоиска.Вставить("Обработчик", ОбработчикОткрытияПодписанныхФайлов());
			
			Если КомандыПечати.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				КомандыДляРасширения.Добавить(КомандаПечати);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КомандаДляРасширения Из КомандыДляРасширения Цикл
		
		Если ТипЗнч(КомандаДляРасширения.Идентификатор) = Тип("Массив") Тогда
			ИдентификаторКоманды = КомандаДляРасширения.Идентификатор[0];
		Иначе
			ИдентификаторКоманды = КомандаДляРасширения.Идентификатор;
		КонецЕсли;
		
		СловаИдентификатораКоманды = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИдентификаторКоманды);
		ИдентификаторПечатнойФормы = "ПечатнаяФорма_" + СтрСоединить(СловаИдентификатораКоманды);
		
		КомандаПечати = КомандыПечати.Добавить();
		ЗаполнитьЗначенияСвойств(КомандаПечати, КомандаДляРасширения, ,
			"УсловияВидимости,ТипыОбъектовПечати,УсловияВидимостиПоТипамОбъектов");
		
		КомандаПечати.УсловияВидимости = ОбщегоНазначения.СкопироватьРекурсивно(КомандаДляРасширения.УсловияВидимости);
		КомандаПечати.ТипыОбъектовПечати = ОбщегоНазначения.СкопироватьРекурсивно(КомандаДляРасширения.ТипыОбъектовПечати);
		КомандаПечати.УсловияВидимостиПоТипамОбъектов = ОбщегоНазначения.СкопироватьРекурсивно(КомандаДляРасширения.УсловияВидимостиПоТипамОбъектов);
		КомандаПечати.Обработчик = ОбработчикОткрытияПодписанныхФайлов();
		КомандаПечати.Картинка = БиблиотекаКартинок.PDFПодписанныйЭЦП;
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, ИдентификаторПечатнойФормы, Истина);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаДляРасширения, ИдентификаторПечатнойФормы, Ложь);
		
	КонецЦикла;
	
	Если КомандыПечатиПакетаДокументов.Количество() > 0 Тогда
		
		Для Каждого Команда Из КомандыПечатиПакетаДокументов Цикл
			УстановитьПараметрыКомандПечатиКомплектаДокументов(Команда, КомандыПечати);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовПечатнойФормы.
Процедура ПриОпределенииОбъектовПечатнойФормы(ОбъектыПечатнойФормы, ИдентификаторПечатнойФормы, ИмяМенеджераПечати, ПараметрыПечати, СписокСотрудников = Неопределено) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ИдентификаторПечатнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПечати.Свойство("ОписанияФайловПечатныхФорм") Тогда
		ПараметрыПечати.Вставить("ОписанияФайловПечатныхФорм", ОписанияФайловПечатныхФорм());
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ОбработанныеИдентификаторыПечатныхФорм") Тогда
		ОбработанныеИдентификаторы = ПараметрыПечати.ОбработанныеИдентификаторыПечатныхФорм;
	Иначе
		ОбработанныеИдентификаторы = Новый Соответствие;
		ПараметрыПечати.Вставить("ОбработанныеИдентификаторыПечатныхФорм", ОбработанныеИдентификаторы);
	КонецЕсли;
	
	Если ОбработанныеИдентификаторы.Получить(ИдентификаторПечатнойФормы) <> Неопределено Тогда
		ОбъектыПечатнойФормы = Неопределено;
		Возврат;
	КонецЕсли;
	
	МассивОбъектовНаПечать = ОбъектыНаПечатьПоИдентификаторуПечатнойФормы(
		ОбъектыПечатнойФормы, ИдентификаторПечатнойФормы, ПараметрыПечати.ОписанияФайловПечатныхФорм, СписокСотрудников);
	
	Если Не ОбщегоНазначения.КоллекцииИдентичны(ОбъектыПечатнойФормы, МассивОбъектовНаПечать) Тогда
		ОбработанныеИдентификаторы.Вставить(ИдентификаторПечатнойФормы, МассивОбъектовНаПечать);
	КонецЕсли;
	
	Если МассивОбъектовНаПечать.Количество() = 0 Тогда
		ОбъектыПечатнойФормы = Неопределено;
	Иначе
		ОбъектыПечатнойФормы = МассивОбъектовНаПечать;
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриПечати.
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников = Неопределено) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат
	КонецЕсли;
	
	Если Не ПараметрыПечати.Свойство("ОбработанныеИдентификаторыПечатныхФорм") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПечати.Свойство("ОписанияФайловПечатныхФорм") Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСертификаты(ПараметрыПечати);
	
	Для Каждого СтрокаКоллекции Из КоллекцияПечатныхФорм Цикл
		
		ИдентификаторПечатнойФормы = КадровыйЭДОКлиентСервер.ТолькоИдентификаторПечатнойФормы(СтрокаКоллекции.ИмяМакета);
		
		Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ИдентификаторПечатнойФормы) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОбъектовНаПечать = ПараметрыПечати.ОбработанныеИдентификаторыПечатныхФорм.Получить(ИдентификаторПечатнойФормы);
		Если МассивОбъектовНаПечать = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.КоллекцииИдентичны(МассивОбъектов, МассивОбъектовНаПечать) Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Для Каждого ОбъектНаПечать Из МассивОбъектов Цикл
			
			Если МассивОбъектовНаПечать.Найти(ОбъектНаПечать) = Неопределено Тогда
				
				НачалоПечатнойФормы = ТабличныйДокумент.ВысотаТаблицы + 1;
				
				ФайлыОбъекта = ПараметрыПечати.ОписанияФайловПечатныхФорм.ПечатныеФормыОбъектов.Получить(ОбъектНаПечать);
				Если ФайлыОбъекта <> Неопределено Тогда
					ФайлыИдентификатора = ФайлыОбъекта.Получить(ИдентификаторПечатнойФормы);
					Если ФайлыИдентификатора <> Неопределено Тогда
						
						ОригиналыИдентификатора = ПараметрыПечати.ОписанияФайловПечатныхФорм.ОригиналыПечатныхФорм.Получить(ИдентификаторПечатнойФормы);
						Если ОригиналыИдентификатора <> Неопределено Тогда
							
							Для Каждого ФайлПечатнойФормы Из ФайлыИдентификатора Цикл
								
								НачалоБланка = ТабличныйДокумент.ВысотаТаблицы + 1;
								
								ОписаниеФайла = ОригиналыИдентификатора.Оригиналы.Получить(ФайлПечатнойФормы);
								
								ПечатнаяФорма = ПечатнаяФормаСоШтампами(ФайлПечатнойФормы, ОписаниеФайла.ПечатнаяФорма, Истина);
								ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ТабличныйДокумент, ПечатнаяФорма);
								
								ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ТабличныйДокумент, ИдентификаторПечатнойФормы,
									НачалоБланка, ОписаниеФайла, ОбъектНаПечать);
								
								ТабличныйДокумент.Защита = Истина;
								
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ТабличныйДокумент.ВысотаТаблицы > НачалоПечатнойФормы Тогда
					УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НачалоПечатнойФормы, ОбъектыПечати, ОбъектНаПечать);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаКоллекции.ТабличныйДокумент <> Неопределено Тогда
				
				ДанныеОбласти = ОбъектыПечати.НайтиПоЗначению(ОбъектНаПечать);
				Если ДанныеОбласти <> Неопределено
					И СтрокаКоллекции.ТабличныйДокумент.Области.Найти(ДанныеОбласти.Представление) <> Неопределено Тогда
					
					ПечатнаяФорма = СтрокаКоллекции.ТабличныйДокумент.ПолучитьОбласть(ДанныеОбласти.Представление);
					ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ТабличныйДокумент, ПечатнаяФорма);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			СтрокаКоллекции.ТабличныйДокумент = ТабличныйДокумент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не ИспользуютсяЭлектронныеДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Форма.Параметры.ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(Форма.Параметры.ИменаМакетов, ",");
	Иначе
		ИменаМакетов = Форма.Параметры.ИменаМакетов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаМакетов) Тогда
		
		Для Каждого ИмяМакета Из ИменаМакетов Цикл
			Если Не КадровыйЭДОКлиентСервер.ЭтоИдентификаторыЭлектронногоДокумента(ИмяМакета) Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ПодписаниеПечатныхФорм")
		Или ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки(Форма.Параметры.ИмяМенеджераПечати) Тогда
		
		Если Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм")
			И Не Форма.Параметры.ПараметрыПечати.ДополнительныеПараметры.Свойство("СторонняяПечатнаяФорма")
			И Не ЭтоОбъектСПечатнымиФормами(Форма.Параметры.ПараметрКоманды[0]) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
			
			Если Форма.Параметры.Свойство("ПодписаниеПечатныхФорм") Тогда
				
				ПечатьДокументовПриСозданииНаСервереВывестиКомандуПодписать(Форма);
				
			Иначе
				
				// Отправить подписанные файлы
				КнопкаСохранить = Форма.Элементы.Найти("КнопкаСохранить");
				Если КнопкаСохранить <> Неопределено Тогда
					КнопкаСохранить.Видимость = Ложь;
				КонецЕсли;
				
				КомандаФормы = Форма.Команды.Добавить("СохранитьВPDFИПодписатьФайл");
				КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
				КомандаФормы.Заголовок = НСтр("ru = 'Подписать PDF файл'");
				КомандаФормы.Подсказка = НСтр("ru = 'Подписать и сохранить на диске'");
				
				КнопкаФормы = Форма.Элементы.Добавить(КомандаФормы.Имя, Тип("КнопкаФормы"),
					Форма.Элементы.ГруппаСохранитьОтправить);
				
				КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
				КнопкаФормы.Картинка = БиблиотекаКартинок.СохранитьИПодписать;
				КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
				
				// Отправить подписанные файлы
				Если РаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
					
					КнопкаОтправить = Форма.Элементы.Найти("КнопкаОтправить");
					Если КнопкаОтправить <> Неопределено Тогда
						КнопкаОтправить.Видимость = Ложь;
					КонецЕсли;
					
					КомандаФормы = Форма.Команды.Добавить("ОтправитьПодписанныеPDF");
					КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
					КомандаФормы.Заголовок = НСтр("ru = 'Отправить подписанные PDF файлы'");
					КомандаФормы.Подсказка = НСтр("ru = 'Подписать и отправить на электронную почту'");
					
					КнопкаФормы = Форма.Элементы.Добавить(КомандаФормы.Имя, Тип("КнопкаФормы"),
						Форма.Элементы.ГруппаСохранитьОтправить);
					
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
					КнопкаФормы.Картинка = БиблиотекаКартинок.ПодписатьИОтправитьЭлектронноеПисьмо;
					КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
					
				КонецЕсли;
				
				Если ДоступнаКомандаПодписать(Форма) Тогда
					ПечатьДокументовПриСозданииНаСервереВывестиКомандуПодписать(Форма);
				КонецЕсли;
				
			КонецЕсли;
			
			ВывестиИнформациюОДоступностиРедактированияПечатнойФормы(Форма);
			
		КонецЕсли;
		
		ИнтеграцияСРаботаВРоссии.ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		Если Не ИнтеграцияСРаботаВРоссии.ДоступнаПередачаДокументовНаРаботаВРоссии() Тогда
			КабинетСотрудника.ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
			
			КомандаФормы = ИнтеграцияСРаботаВРоссии.КомандаПодписатьФормыПечатьДокументов(Форма);
			Если КомандаФормы <> Неопределено Тогда
				
				Если СтрНайти(КомандаФормы.Заголовок, НСтр("ru = '1С:Кабинет сотрудника'")) = 0 Тогда
					КомандаФормы.Заголовок = НСтр("ru = 'Передать на ""Работа в России"" и ""1С:Кабинет сотрудника""'");
					КомандаФормы.Подсказка = НСтр("ru = 'Подписать и передать на порталы ""Работа в России"" и ""1С:Кабинет сотрудника""'");
					КомандаФормы.Отображение = ОтображениеКнопки.Текст;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ФайлыПечатныхФормПоОбъектам(Владельцы, ИдентификаторыПечатныхФорм = Неопределено, ТолькоПечатныеФормыОбъектов = Ложь, ВТомЧислеПомеченныеНаУдаление = Ложь) Экспорт
	
	ИдентификаторыФайлов = Новый Соответствие;
	
	Выборка = ВыборкаДанныхПечатныхФорм(Владельцы, ИдентификаторыПечатныхФорм, ТолькоПечатныеФормыОбъектов, , ВТомЧислеПомеченныеНаУдаление);
	Пока Выборка.СледующийПоЗначениюПоля("Владелец") Цикл
		
		ИдентификаторыФайловСЭЦП = Новый Соответствие;
		ИдентификаторыФайлов.Вставить(Выборка.Владелец, ИдентификаторыФайловСЭЦП);
		
		Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторПечатнойФормы") Цикл
			
			СписокФайлов = Новый Массив;
			ИдентификаторыФайловСЭЦП.Вставить(Выборка.ИдентификаторПечатнойФормы, СписокФайлов);
			
			Пока Выборка.Следующий() Цикл
				
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("Файл", Выборка.ФайлОбъекта);
				ОписаниеФайла.Вставить("Название", Выборка.Название);
				ОписаниеФайла.Вставить("Сотрудник", Выборка.Сотрудник);
				ОписаниеФайла.Вставить("ФизическоеЛицо", Выборка.ФизическоеЛицо);
				
				СписокФайлов.Добавить(Выборка.ФайлОбъекта);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИдентификаторыФайлов;
	
КонецФункции

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "06a2a25e-dc98-4d4a-a592-83ceaa9972e2", Метаданные.Документы.ДокументКадровогоЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ДокументКадровогоЭДО, Истина);
	Списки.Вставить(Метаданные.Справочники.ДокументКадровогоЭДОПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
		|Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы.Изменение.Организации
		
		|Документ.ДокументКадровогоЭДО.Чтение.ГруппыФизическихЛиц
		|Документ.ДокументКадровогоЭДО.Чтение.Организации
		|Документ.ДокументКадровогоЭДО.Изменение.ГруппыФизическихЛиц
		|Документ.ДокументКадровогоЭДО.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область БлокировкаИзмененияОбъектов

Функция ДобавитьБлокировкуИзмененияОбъекта(КоллекцияБлокировок, СсылкаНаОбъект) Экспорт
	
	БлокироватьФорму = ОбъектЗаблокирован(СсылкаНаОбъект);
	Если БлокироватьФорму Тогда
		
		БлокировкаИзмененияОбъекта = БлокировкаИзмененияОбъектов.ОписаниеБлокировкиИзмененияОбъекта(
			"УправлениеПечатьюБЗК",
			НСтр("ru = 'К объекту приложены подписанные ЭЦП (электронной цифровой подписью) печатные формы.
				|При снятии блокировки объекта, подписанные печатные формы необходимо подписать заново, прежние версии печатных форм будут удалены.'"),
		Истина);
		
		КоллекцияБлокировок.Добавить(БлокировкаИзмененияОбъекта);
		
	КонецЕсли;
	
КонецФункции

Процедура ЗапретитьИзменениеДокументаПоФизическомуЛицу(Источник) Экспорт
	
	Если Не Источник.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	БлокироватьОбъект = ОбъектЗаблокирован(Источник.Ссылка);
	Если БлокироватьОбъект Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'К документу %1 приложены подписанные файлы печатных форм, необходимо удалить файлы перед записью документа.'"),
			Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Обработчики.Добавить(КадровыйЭДО);
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Раздел = НСтр("ru = 'Кадровый ЭДО'");
	
	КоличествоЗависшихЗаданий = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.КоличествоЗависшихЗаданийОбработки(Истина);
	Если ЗначениеЗаполнено(КоличествоЗависшихЗаданий) Тогда
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ЗависшиеЗадания_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		Дело.Количество     = КоличествоЗависшихЗаданий;
		Дело.ЕстьДела       = (Дело.Количество > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Просрочено!'");
		
		Дело.Подсказка      =
			НСтр("ru = 'Задания с большими сроками ожидания выполнения, необходимо отменить или форсировать выполнение.'");
		
		Дело.ПараметрыФормы = Новый Структура;
		Дело.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		Дело.Форма          = "Отчет.ПросроченныеДействияСПечатнымиФормами.Форма";
		
	КонецЕсли;
	
	ПрисоединенныеФайлы = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыНаПодписьПользователя(Истина);
	
	ПечатныеФормы = ПрисоединенныеФайлы.Скопировать(Новый Структура("ПечатнаяФорма", Истина));
	Если ПечатныеФормы.Количество() > 0 Тогда
		
		КоличествоПросроченных = ПечатныеФормы.НайтиСтроки(Новый Структура("Просрочено", Истина)).Количество();
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "НаправленыНаПодпись_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		Дело.Количество     = ПечатныеФормы.Количество();
		Дело.ЕстьДела       = (Дело.Количество > 0);
		Дело.Важное         = КоличествоПросроченных > 0;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Подписать'");
		
		Дело.Подсказка      =
			НСтр("ru = 'Перед дальнейшей обработкой печатные формы ожидают подписания ЭЦП (электронной цифровой подписью).'");
		
		Дело.ПараметрыФормы = КадровыйЭДОВызовСервера.ПараметрыОткрытияФормыПодписанияПечатныхФорм(ПечатныеФормы);
		Дело.Форма          = "ОбщаяФорма.ПечатьДокументов";
		
	КонецЕсли;
	
	ФайлыНаПодпись = ПрисоединенныеФайлы.Скопировать(Новый Структура("ПечатнаяФорма", Ложь));
	Если ФайлыНаПодпись.Количество() > 0 Тогда
		
		КоличествоПросроченных = ФайлыНаПодпись.НайтиСтроки(Новый Структура("Просрочено", Истина)).Количество();
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "НаправленыНаПодпись_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		Дело.Количество     = ФайлыНаПодпись.Количество();
		Дело.ЕстьДела       = (Дело.Количество > 0);
		Дело.Важное         = КоличествоПросроченных > 0;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Подписать файлы'");
		
		Дело.Подсказка      =
			НСтр("ru = 'Перед дальнейшей обработкой файлы ожидают подписания ЭЦП (электронной цифровой подписью).'");
		
		Дело.ПараметрыФормы = Новый Структура("ДокументыНаПодпись", Истина);
		Дело.Форма          = "Документ.ДокументКадровогоЭДО.ФормаСписка";
		
	КонецЕсли;
	
	Если ПрисоединенныеФайлы.Количество() > 0 Тогда
		УведомитьОНеобходимостиПодписанияФайловДокументовКЭДО(
			ПрисоединенныеФайлы.Количество(),
			ФайлыНаПодпись.НайтиСтроки(Новый Структура("Просрочено", Истина)).Количество(),
			Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	ЗаданияКИсполнению = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗаданияОбработки(Истина);
	Для Каждого ОписаниеЗадания Из ЗаданияКИсполнению Цикл
		
		Если ОписаниеЗадания.Ключ = Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте Тогда
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = "ГотовыКОтправке_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
			Дело.Количество     = ОписаниеЗадания.Значение;
			Дело.ЕстьДела       = (Дело.Количество > 0);
			Дело.Важное         = Ложь;
			Дело.Владелец       = Раздел;
			Дело.Представление  = НСтр("ru = 'Отправить на электронную почту'");
			Дело.Подсказка      = НСтр("ru = 'Необходимо отправить печатные формы адресатам по электронной почте.'");
			
			ФайлыКОбработке = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
				Истина, Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
			
			СписокФайлов = ФайлыКОбработке.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
			
			Дело.ПараметрыФормы = Новый Структура;
			Дело.ПараметрыФормы.Вставить("СписокФайлов", СписокФайлов.ВыгрузитьЗначения());
			
			Дело.Форма          = "ОбщаяФорма.ОтправкаПодписанныхФайлов";
			
		ИначеЕсли ОписаниеЗадания.Ключ = Перечисления.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск Тогда
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = "ГотовыКЗаписиНаДиск_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
			Дело.Количество     = ОписаниеЗадания.Значение;
			Дело.ЕстьДела       = (Дело.Количество > 0);
			Дело.Важное         = Ложь;
			Дело.Владелец       = Раздел;
			Дело.Представление  = НСтр("ru = 'Записать на носитель'");
			Дело.Подсказка      = НСтр("ru = 'Необходимо записать файлы на диск (USB - носитель).'");
			
			ФайлыКОбработке = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
				Истина, Перечисления.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск);
			
			СписокФайлов = ФайлыКОбработке.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск);
			
			Дело.ПараметрыФормы = Новый Структура;
			Дело.ПараметрыФормы.Вставить("СписокФайлов", СписокФайлов.ВыгрузитьЗначения());
			
			Дело.Форма          = "ОбщаяФорма.СохранениеПодписанныхФайлов";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ДокументКадровогоЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаДокументовПечатныхФорм;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбработкаДокументовПечатныхФорм.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбработкаДокументовПечатныхФорм.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя        = "Подписать";
	Вид.ИмяПодменю = "ОзнакомитьсяИПодписать";
	Вид.Картинка = БиблиотекаКартинок.ЭлектронноЦифроваяПодпись;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
КонецПроцедуры

Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Источники.Строки.Найти(Метаданные.Документы.ДокументКадровогоЭДО, "Метаданные") <> Неопределено Тогда
		
		Команда = Команды.Добавить();
		Команда.Вид = "Подписать";
		Команда.Представление = НСтр("ru = 'Подписать'");
		Команда.МножественныйВыбор = Истина;
		Команда.РежимЗаписи = "Проводить";
		Команда.ВидимостьВФормах = "ФормаСписка";
		Команда.Обработчик = "КадровыйЭДОКлиент.ОбработчикПодключаемойКомандыПодписанияПечатныхФорм";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ОжидаетПодписания", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ДоступныеСодержанияДокументовПользователя(Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Результат = Новый Массив;
	
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Пользователь, "ИдентификаторПользователяИБ");
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.КадроваяИсторияСотрудников, СвойстваПользователяИБ.ПользовательИБ) Тогда
		Результат.Добавить(Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
		Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПлановыеНачисления, СвойстваПользователяИБ.ПользовательИБ) Тогда
			Результат.Добавить(Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки);
			Если ПравоДоступа("Просмотр", Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам, СвойстваПользователяИБ.ПользовательИБ) Тогда
				Результат.Добавить(Перечисления.СодержимоеДокументов.СодержитЗарплату);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальноДоступноеСодержимоеДокументовПользователя(Знач Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Результат = ДоступныеСодержанияДокументовПользователя(Пользователь);
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[Результат.Количество() - 1];
	КонецЕсли;
	Возврат Перечисления.СодержимоеДокументов.ПустаяСсылка();
КонецФункции

Функция ДлительностьОжиданияОбработки(ОжиданиеМинут) Экспорт
	
	Если Не ЗначениеЗаполнено(ОжиданиеМинут) Тогда
		Возврат "???";
	КонецЕсли;
	
	ВЧасах = Цел(ОжиданиеМинут / 60);
	
	Дней = Цел(ВЧасах / 24);
	Часов = ВЧасах - Дней * 24;
	Минут = ОжиданиеМинут - Дней * 24 * 60 - Часов * 60;
	
	Если Дней > 0 Тогда
		
		Шаблон = НСтр("ru = '%1 д. %2 ч. %3 м.'");
		Представление = СтрШаблон(
			Шаблон,
			Дней,
			Формат(Часов, "ЧЦ=2; ЧН=; ЧВН="),
			Формат(Минут, "ЧЦ=2; ЧН=; ЧВН="));
		
	ИначеЕсли Минут > 0 Тогда
		
		Шаблон = НСтр("ru = '%1 ч. %2 м.'");
		Представление = СтрШаблон(
			Шаблон,
			Формат(Часов, "ЧЦ=2; ЧН=; ЧВН="),
			Формат(Минут, "ЧЦ=2; ЧН=; ЧВН="));
		
	Иначе
		
		Шаблон = НСтр("ru = '%2 м.'");
		Представление = СтрШаблон(
			Шаблон,
			Формат(Минут, "ЧЦ=2; ЧН=; ЧВН="));
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПечатнаяФормаСоШтампами(ФайлПечатнойФормы, Оригинал, ВыводитьОжиданияПодписи = Ложь) Экспорт
	
	Если ТипЗнч(Оригинал) = Тип("ТабличныйДокумент") Тогда
		ОригиналПечатнойФормы = Оригинал;
	Иначе
		ОригиналПечатнойФормы = Оригинал.Получить();
	КонецЕсли;
	
	Направления = Неопределено;
	Если ВыводитьОжиданияПодписи Тогда
		УстановитьПривилегированныйРежим(Истина);
		Направления = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.НаправленияНаПодпись(ФайлПечатнойФормы);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ПечатнаяФормаСоШтампамиПоОригиналу(
		ОригиналПечатнойФормы,
		ЭлектроннаяПодпись.УстановленныеПодписи(ФайлПечатнойФормы),
		Направления);
	
КонецФункции

Функция ПечатнаяФормаСоШтампамиПоОригиналу(ОригиналПечатнойФормы, УстановленныеПодписи, Направления = Неопределено) Экспорт
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ПечатнаяФорма, ОригиналПечатнойФормы);
	
	ОписаниеШтампов = Новый Массив;
	Для Каждого ДанныеСертификата Из УстановленныеПодписи Цикл
		
		ПараметрыШтампа = Новый Структура;
		ПараметрыШтампа.Вставить("ТекстОтметки", "");
		ПараметрыШтампа.Вставить("Логотип");
		
		Если ТипЗнч(ДанныеСертификата.Сертификат) = Тип("ДвоичныеДанные") Тогда
			Сертификат = ДанныеСертификата.Сертификат;
		Иначе
			Сертификат = ДанныеСертификата.Сертификат.Получить();
		КонецЕсли;
		
		Если Сертификат <> Неопределено Тогда
			СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
			РаботаСФайламиПереопределяемый.ПриПечатиФайлаСоШтампом(ПараметрыШтампа, СертификатКриптографии);
			
			Штамп = ЭлектроннаяПодпись.ШтампВизуализацииЭлектроннойПодписи(
				СертификатКриптографии, ДанныеСертификата.ДатаПодписи,
				ПараметрыШтампа.ТекстОтметки, ПараметрыШтампа.Логотип);
			
			ОписаниеШтампов.Добавить(Штамп);
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось вывести штамп подписи (%1 от %2)'"),
				ДанныеСертификата.КомуВыданСертификат,
				ДанныеСертификата.ДатаПодписи);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектроннаяПодпись.ДобавитьШтампыВТабличныйДокумент(ПечатнаяФорма, ОписаниеШтампов);
	
	Если Направления <> Неопределено Тогда
		Для Каждого Направление Из Направления Цикл
			
			Область = ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы + 2, 2);
			Область.Текст = СтрШаблон(НСтр("ru = 'Ожидает подписи (%1)'"), Направление.Исполнитель);
			Область.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Процедура УдалитьФайлыПечатныхФормОбработчик(Источник) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("УдалениеПечатныхФорм") Тогда
		
		Если ОбщегоНазначения.ЭтоДокумент(Источник.ВладелецФайла.Метаданные()) И Источник.ПометкаУдаления Тогда
			
			УдаленоФайлов = УдалитьПечатныеФормыОбъекта(Источник.ВладелецФайла);
			Если УдаленоФайлов > 0 Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Удалено %1 печатных форм документа %2'"),
					СтрокаСЧислом(
						НСтр("ru = ';%1 печатная форма; ;%1 печатных формы;%1 печатных форм;%1 печ. форм'"),
						УдаленоФайлов,
						ВидЧисловогоЗначения.Количественное),
					Источник.ВладелецФайла);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник.ВладелецФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеФайла(ОписанияФайловПечатныхФорм, ДанныеПечатнойФормы) Экспорт
	
	ОписанияОригиналов = ОписанияФайловПечатныхФорм.ОригиналыПечатныхФорм.Получить(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы);
	Если ОписанияОригиналов = Неопределено Тогда
		
		ОписанияОригиналов = Новый Структура;
		ОписанияОригиналов.Вставить("Наименование", ДанныеПечатнойФормы.Название);
		ОписанияОригиналов.Вставить("Оригиналы", Новый Соответствие);
		
		ОписанияФайловПечатныхФорм.ОригиналыПечатныхФорм.Вставить(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы, ОписанияОригиналов)
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
		ОписанияОригиналов.Оригиналы.Вставить(ДанныеПечатнойФормы.ФайлОбъекта, ДанныеПечатнойФормы);
	КонецЕсли;
	
	ПечатныеФормыВладельца = ОписанияФайловПечатныхФорм.ПечатныеФормыОбъектов.Получить(ДанныеПечатнойФормы.Владелец);
	Если ПечатныеФормыВладельца = Неопределено Тогда
		
		ПечатныеФормыВладельца = Новый Соответствие;
		ОписанияФайловПечатныхФорм.ПечатныеФормыОбъектов.Вставить(
			ДанныеПечатнойФормы.Владелец, ПечатныеФормыВладельца);
		
	КонецЕсли;
	
	СписокФайловИдентификатора = ПечатныеФормыВладельца.Получить(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы);
	Если СписокФайловИдентификатора = Неопределено Тогда
		СписокФайловИдентификатора = Новый Массив;
		ПечатныеФормыВладельца.Вставить(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы, СписокФайловИдентификатора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
		СписокФайловИдентификатора.Добавить(ДанныеПечатнойФормы.ФайлОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПодписываемогоФайла() Экспорт
	
	Возврат Новый Структура(
		"Организация,
		|ФайлОбъекта,
		|АдресВХранилище,
		|УстановленныеПодписи,
		|ИмяФайла");
	
КонецФункции

// Возвращает структуру описания печатной формы
//
// Возвращаемое значение:
//	Структура - С ключами
//		* Владелец						- Ссылка на объект с присоединенными файлами
//		* ИдентификаторПечатнойФормы	- Строка, идентификатор печатной формы, заданный
//											при добавлении команд печати
//		* Название						- Строка, представление печатной формы
//		* ПечатнаяФорма					- ТабличныйДокумент
//		* ИмяФайла						- Строка, имя файла
//		* АдресВХранилище				- Строка, адрес во временном хранилище двоичных данных
//											присоединенного файла
//		* ФайлОбъекта					- ОпределяемыйТип.ПрисоединенныйФайлПечатнойФормы
//		* Организация					- СправочникСсылка.Организации
//		* Сотрудник						- СправочникСсылка.Сотрудники
//		* ФизическоеЛицо				- СправочникСсылка.ФизическиеЛица
//		* УстановленныеПодписи			- Соответствие:
//											* Ключ		- СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//											* Значение	- Булево, всегда Истина
//
Функция ДанныеПечатнойФормы() Экспорт
	
	ДанныеФормы = ДанныеПодписываемогоФайла();
	ДанныеФормы.Вставить("Владелец");
	ДанныеФормы.Вставить("ИдентификаторПечатнойФормы");
	ДанныеФормы.Вставить("Название");
	ДанныеФормы.Вставить("ПечатнаяФорма");
	ДанныеФормы.Вставить("Сотрудник");
	ДанныеФормы.Вставить("ФизическоеЛицо");
	ДанныеФормы.Вставить("Номер");
	ДанныеФормы.Вставить("Дата");
	ДанныеФормы.Вставить("ИмяОбласти");
	
	Возврат ДанныеФормы;
	
КонецФункции

// Возвращает структуру описывающую файлы печатных форм
// 
// Возвращаемое значение:
//  Структура - с ключами
//   * ПечатныеФормыОбъектов - Соответствие
//   * ОригиналыПечатныхФорм - Соответствие
//
Функция ОписанияФайловПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатныеФормыОбъектов,ОригиналыПечатныхФорм", Новый Соответствие, Новый Соответствие);
	
КонецФункции

// Выполняет в фоновом режиме отправку по электронной почте готовых для этого печатных форм.
//
Процедура ВыполнитьОтправкуПечатныхФормПоЭлектроннойПочте() Экспорт
	
	ФайлыКОбработке = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
		Ложь, Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
	
	СписокФайлов = ФайлыКОбработке.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
	Если СписокФайлов <> Неопределено Тогда
		
		ДанныеФайловПечатныхФорм = ДанныеФайловПечатныхФормКОтправкеПоЭлектроннойПочте(СписокФайлов);
		ДанныеПолучателей = ПолучателиЭлектронныхПисем(ДанныеФайловПечатныхФорм);
		
		ОтправленныеПолучатели = ОтправитьПисьмаПолучателям(ДанныеПолучателей, ДанныеФайловПечатныхФорм, Новый УникальныйИдентификатор);
		
		Если ОтправленныеПолучатели.Количество() > 0 Тогда
			
			ОтправленныеФайлы = Новый Массив;
			Для Каждого ДанныеПолучателя Из ОтправленныеПолучатели Цикл
				ОписаниеФайлов = ДанныеФайловПечатныхФорм.Скопировать(Новый Структура("ФизическоеЛицо", ДанныеПолучателя.ФизическоеЛицо));
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтправленныеФайлы, ОписаниеФайлов.ВыгрузитьКолонку("ФайлОбъекта"));
			КонецЦикла;
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработки(
				ОтправленныеФайлы, Перечисления.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяЗаписьЭлектроннойПочты() Экспорт
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеУчетныеЗаписи[0].Ссылка;
	
КонецФункции

Функция ОтправитьПисьмаПолучателям(ДанныеПолучателей, ДанныеФайловПечатныхФорм, ИдентификаторХранилища) Экспорт
	
	ОтправленныеПолучатели = Новый Массив;
	
	ЗаписьЭлектроннойПочты = УчетнаяЗаписьЭлектроннойПочты();
	
	ПолучателиПисем = Новый Соответствие;
	Письма = Новый Массив;
	Для Каждого ДанныеПолучателя Из ДанныеПолучателей Цикл
		
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(
			ЗаписьЭлектроннойПочты, ПараметрыПисьма(ДанныеПолучателя, ДанныеФайловПечатныхФорм, ИдентификаторХранилища));
		
		Письма.Добавить(Письмо);
		ПолучателиПисем.Вставить(Письмо, ДанныеПолучателя);
		
	КонецЦикла;
	
	Попытка
		
		ТекстОшибки = "";
		РезультатыОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьма(ЗаписьЭлектроннойПочты, Письма, ТекстОшибки);
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Для Каждого ОписаниеПолучателяПисем Из ПолучателиПисем Цикл
				
				РезультатОтправки = РезультатыОтправки.Получить(ПолучателиПисем, ОписаниеПолучателяПисем.Ключ);
				Если РезультатОтправки <> Неопределено
					И РезультатОтправки.ОшибочныеПолучателиТогда.Количество() > 0 Тогда
					
					ТекстыОшибки = Новый Массив;
					Для Каждого ОписаниеОшибки Из РезультатОтправки.ОшибочныеПолучателиТогда Цикл
						ТекстыОшибки.Добавить(СтрШаблон("%1 - %2"), ОписаниеОшибки.Ключ, ОписаниеОшибки.Значение);
					КонецЦикла;
					
					ПолучателиПисем.Значение.ТекстОшибки = СтрСоединить(ТекстыОшибки, "; ");
					
				Иначе
					ОтправленныеПолучатели.Добавить(ПолучателиПисем.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого ДанныеПолучателя Из ДанныеПолучателей Цикл
				ОтправленныеПолучатели.Добавить(ДанныеПолучателя);
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		ИнформацияОшибке = ИнформацияОбОшибке();
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОшибке));
	КонецПопытки;
	
	Возврат ОтправленныеПолучатели;
	
КонецФункции

Функция ДанныеФайловПечатныхФормКОтправкеПоЭлектроннойПочте(СписокФайлов) Экспорт
	
	ДанныеФайловКОтправке = Новый ТаблицаЗначений;
	ДанныеФайловКОтправке.Колонки.Добавить("Название", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000)));
	ДанныеФайловКОтправке.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеФайловКОтправке.Колонки.Добавить("ФайлОбъекта", Метаданные.ОпределяемыеТипы.ПрисоединенныйФайлПечатнойФормы.Тип);
	ДанныеФайловКОтправке.Колонки.Добавить("ОписаниеПечатнойФормы", Новый ОписаниеТипов);
	
	ОписанияФайлов = Новый Массив;
	ПрисоединенныеФайлы = Новый Массив;
	Для Каждого ФайлСписка Из СписокФайлов Цикл
		
		Если ТипЗнч(ФайлСписка) = Тип("Структура") Тогда
			ОписанияФайлов.Добавить(ФайлСписка);
		Иначе
			ПрисоединенныеФайлы.Добавить(ФайлСписка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписанияФайлов.Количество() > 0 Тогда
		
		Для Каждого ОписанияФайла Из ОписанияФайлов Цикл
			
			ПодписываемыйФайл = ДанныеФайловКОтправке.Добавить();
			ПодписываемыйФайл.Название = ОписанияФайла.Название;
			ПодписываемыйФайл.ФизическоеЛицо = ОписанияФайла.ФизическоеЛицо;
			ПодписываемыйФайл.ОписаниеПечатнойФормы = ОписанияФайла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПрисоединенныеФайлы.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеПечатныхФорм = РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайловПечатныхФорм(СписокФайлов);
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого ДанныеПечатнойФормы Из ДанныеПечатныхФорм Цикл
			
			ПодписываемыйФайл = ДанныеФайловКОтправке.Добавить();
			ПодписываемыйФайл.Название = ДанныеПечатнойФормы.Значение.Название;
			ПодписываемыйФайл.ФизическоеЛицо = ДанныеПечатнойФормы.Значение.ФизическоеЛицо;
			ПодписываемыйФайл.ФайлОбъекта = ДанныеПечатнойФормы.Ключ;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеФайловКОтправке;
	
КонецФункции

Функция ПолучателиЭлектронныхПисем(ДанныеФайловПечатныхФорм) Экспорт
	
	Получатели = Новый ТаблицаЗначений;
	Получатели.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Получатели.Колонки.Добавить("ЭлектронныйАдрес", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000)));
	
	СписокПолучателей = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеФайловПечатныхФорм, "ФизическоеЛицо", Истина);
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокПолучателей, "EMailПредставление");
	
	Для Каждого ДанныеПолучателя Из КадровыеДанные Цикл
		
		Получатель = Получатели.Добавить();
		Получатель.ФизическоеЛицо = ДанныеПолучателя.ФизическоеЛицо;
		Получатель.ЭлектронныйАдрес = ДанныеПолучателя.EMailПредставление;
		
	КонецЦикла;
	
	Возврат Получатели;
	
КонецФункции

Функция ЭтоТипОбъектаСПечатнымиФормами(ТипОбъект) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ОбъектСПечатнымиФормами.Тип.СодержитТип(ТипОбъект);
	
КонецФункции

Функция ЭтоОбъектСПечатнымиФормами(СсылкаНаОбъект) Экспорт
	
	Возврат ЭтоТипОбъектаСПечатнымиФормами(ТипЗнч(СсылкаНаОбъект));
	
КонецФункции

Функция ДанныеПечатнойФормыПоДаннымФайлаПечатнойФормы(ДанныеФайла) Экспорт
	
	ДанныеПечатнойФормы = ДанныеПечатнойФормы();
	ДанныеПечатнойФормы.Владелец =                   ДанныеФайла.Владелец;
	ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = ДанныеФайла.ИдентификаторПечатнойФормы;
	ДанныеПечатнойФормы.Название =                   ДанныеФайла.Название;
	ДанныеПечатнойФормы.ФайлОбъекта =                ДанныеФайла.ФайлОбъекта;
	ДанныеПечатнойФормы.Организация =                ДанныеФайла.Организация;
	ДанныеПечатнойФормы.Сотрудник =                  ДанныеФайла.Сотрудник;
	ДанныеПечатнойФормы.ФизическоеЛицо =             ДанныеФайла.ФизическоеЛицо;
	ДанныеПечатнойФормы.ПечатнаяФорма =              ДанныеФайла.Оригинал.Получить();
	
	ЗаполнитьКоллекциюОтпечатковПодписей(ДанныеПечатнойФормы, ДанныеФайла.ФайлОбъекта);
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Процедура ЗаполнитьКоллекциюОтпечатковПодписей(ДанныеФайла, ПрисоединенныйФайл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
	Если УстановленныеПодписи.Количество() > 0 Тогда
		ДанныеФайла.УстановленныеПодписи = Новый Соответствие;
		Для Каждого УстановленнаяПодпись Из УстановленныеПодписи Цикл
			ДанныеФайла.УстановленныеПодписи.Вставить(
				ЭлектроннаяПодпись.СсылкаНаСертификат(УстановленнаяПодпись.Отпечаток), Истина);
		КонецЦикла;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЭтоФайлПечатнойФормы(ПрисоединенныйФайл) Экспорт
	
	Возврат ОтобратьФайлыПечатныхФорм(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрисоединенныйФайл)).Количество() > 0;
	
КонецФункции

Функция ОтобратьФайлыПечатныхФорм(ПрисоединенныеФайлы) Экспорт
	
	Возврат РегистрыСведений.ПодписанныеПечатныеФормы.ОтобратьФайлыПечатныхФорм(ПрисоединенныеФайлы);
	
КонецФункции

Процедура ПриПодписанииФайловПечатныхФорм(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Количество() > 0 Тогда
		
		СертификатыПользователя = КадровыйЭДОВызовСервера.СертификатыОрганизацииПользователя();
		
		ПодписанныеОбъекты = Новый Массив;
		Для Каждого Запись Из Источник Цикл
			Если Запись.УстановившийПодпись = Пользователи.ТекущийПользователь() Тогда
				Если СертификатыПользователя.Найти(Запись.Отпечаток, "Отпечаток") <> Неопределено Тогда
					ПодписанныеОбъекты.Добавить(Запись.ПодписанныйОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПодписанныеОбъекты) Тогда
			ПечатныеФормы = ОтобратьФайлыПечатныхФорм(ПодписанныеОбъекты);
			Если ЗначениеЗаполнено(ПечатныеФормы) Тогда
				КадровыйЭДОВызовСервера.УдалитьФайлыИзОбработкиПользователя(ПечатныеФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.19.77";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ПометитьНаУдалениеДокументыУдаленныхОснований";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5917f6cb-e603-45fe-86f4-22a6b690c7f1");
	Обработчик.Комментарий = НСтр("ru = 'Удаление документов кадрового ЭДО с удаленными основаниями.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.2";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПечатныхФорм.ЗаполнитьНастройки";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.2";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ЗаполнитьНаличияСведенийОЗарплате";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bda48768-02e2-4c61-8e2c-aba05fecfc1a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение уровней доступа документов кадрового ЭДО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.2";
	Обработчик.Процедура = "РегистрыСведений.ПодписанныеОбъектыПользователей.ЗаполнитьПодписанныеОбъекты";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ffd181db-bb81-46b3-adaa-62ac06056dea");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение информации об установленных подписях пользователей.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.64";
	Обработчик.Процедура = "Документы.ДокументКадровогоЭДО.ЗаполнитьПодписантов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("81fe5625-d308-471a-97f6-d7c866214360");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подписантов в табличной части документов кадрового ЭДО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.64";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПечатныхФорм.ЗаполнитьНастройки";
	Обработчик.РежимВыполнения = "Монопольно";
	
КонецПроцедуры

Функция РазместитьКомандуНаФормеПечатьДокументов(УправляемаяФорма, КомандаФормы) Экспорт
	
	КнопкаФормы = Неопределено;
	
	ГруппаСохранитьОтправить = УправляемаяФорма.Элементы.Найти("ГруппаСохранитьОтправить");
	Если ГруппаСохранитьОтправить <> Неопределено Тогда
		
		ЭлементВставки = Неопределено;
		Если ГруппаСохранитьОтправить.ПодчиненныеЭлементы.Количество() > 0 Тогда
			ЭлементВставки = ГруппаСохранитьОтправить.ПодчиненныеЭлементы[0];
			Если ЭлементВставки.Имя = "ПодписатьПечатныеФормы" Тогда
				Если ГруппаСохранитьОтправить.ПодчиненныеЭлементы.Количество() > 1 Тогда
					ЭлементВставки = ГруппаСохранитьОтправить.ПодчиненныеЭлементы[1];
				Иначе
					ЭлементВставки = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КнопкаФормы = УправляемаяФорма.Элементы.Вставить(КомандаФормы.Имя, Тип("КнопкаФормы"),
			ГруппаСохранитьОтправить, ЭлементВставки);
			
		КонецЕсли;
		
	Возврат КнопкаФормы;
	
КонецФункции

Функция Ассистент() Экспорт
	
	Возврат ОбсужденияБЗК.Ассистент(
		НСтр("ru = '1С:Кабинет сотрудника'"),
		БиблиотекаКартинок.СервисКабинетСотрудника48);
	
КонецФункции

Процедура УведомитьОНеобходимостиПодписанияФайловДокументовКЭДО(КоличествоПечатныхФорм, КоличествоПросроченных, Пользователь) Экспорт
	
	Если Не Обсуждения.СистемаВзаимодействийПодключена() Тогда
		Возврат;
	КонецЕсли;
	
	АссистентКЭДО = Ассистент();
	Если Не ЗначениеЗаполнено(АссистентКЭДО) Или Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоПечатныхФорм = 0 Тогда
		ОбсужденияБЗК.УдалитьСообщения(АссистентКЭДО, КлючСообщенияОНеобходимостиПодписанияПечатныхФорм(),
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь));
	Иначе
		
		Если КоличествоПросроченных = 0 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ожидают подписания %1.'"),
				СтрокаСКоличествомДокументов(КоличествоПечатныхФорм));
		ИначеЕсли КоличествоПросроченных < КоличествоПечатныхФорм Тогда
			ТекстСообщения = Новый ФорматированнаяСтрока(
				СтрШаблон(
					НСтр("ru = 'Ожидают подписания %1'"),
					СтрокаСКоличествомДокументов(КоличествоПечатныхФорм)),
				" ",
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = '(в том числе %1 с большим сроком ожидания)'"),
						СтрокаСКоличествомДокументов(КоличествоПросроченных)), , ЦветаСтиля.ПоясняющийОшибкуТекст),
				".");
		Иначе
			ТекстСообщения = Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru = 'Ожидают подписания %1 с большим сроком ожидания.'"),
					СтрокаСКоличествомДокументов(КоличествоПросроченных)), , ЦветаСтиля.ПоясняющийОшибкуТекст);
		КонецЕсли;
		
		ОписаниеСообщения = ОбсужденияБЗК.ОписаниеСообщения(
			ТекстСообщения, КлючСообщенияОНеобходимостиПодписанияПечатныхФорм());
		
		ОписаниеСообщения.Действия.Добавить(
			КадровыйЭДОКлиентСервер.ИмяДействияУведомленияОзнакомитьсяИПодписать(),
			НСтр("ru = 'Показать документы'"));
		
		ОбсужденияБЗК.ОбновитьУведомление(АссистентКЭДО, ОписаниеСообщения,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПодписанныеОбъектыПользователей(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Отбор.ПодписанныйОбъект.Использование Тогда
		РегистрыСведений.ПодписанныеОбъектыПользователей.ОбновитьЗаписиПоОбъектам(
			Источник.Отбор.ПодписанныйОбъект.Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючСообщенияОНеобходимостиПодписанияПечатныхФорм()
	Возврат "ПодписаниеПечатныхФорм";
КонецФункции

Процедура ЗаполнитьОписанияФайловПечатныхФормПоОбъектам(ОписанияФайловПечатныхФорм, Владельцы, ИдентификаторыПечатныхФорм, СписокСотрудников = Неопределено)
	
	Выборка = ВыборкаДанныхПечатныхФорм(Владельцы, ИдентификаторыПечатныхФорм, , СписокСотрудников);
	Пока Выборка.СледующийПоЗначениюПоля("Владелец") Цикл
		
		ИдентификаторыФайловВладельца = ОписанияФайловПечатныхФорм.ПечатныеФормыОбъектов.Получить(Выборка.Владелец);
		Если ИдентификаторыФайловВладельца = Неопределено Тогда
			ИдентификаторыФайловВладельца = Новый Соответствие;
			ОписанияФайловПечатныхФорм.ПечатныеФормыОбъектов.Вставить(
				Выборка.Владелец, ИдентификаторыФайловВладельца);
		КонецЕсли;
		
		Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторПечатнойФормы") Цикл
			
			ОригиналыПечатнойФормы = ОписанияФайловПечатныхФорм.ОригиналыПечатныхФорм.Получить(Выборка.ИдентификаторПечатнойФормы);
			Если ОригиналыПечатнойФормы = Неопределено Тогда
				ОригиналыПечатнойФормы = Новый Структура;
				ОригиналыПечатнойФормы.Вставить("Наименование", Выборка.Название);
				ОригиналыПечатнойФормы.Вставить("Оригиналы", Новый Соответствие);
			КонецЕсли;
			
			СписокФайлов = Новый Массив;
			ИдентификаторыФайловВладельца.Вставить(Выборка.ИдентификаторПечатнойФормы, СписокФайлов);
			
			Пока Выборка.Следующий() Цикл
				
				ОригиналыПечатнойФормы.Оригиналы.Вставить(Выборка.ФайлОбъекта,
					ДанныеПечатнойФормыПоДаннымФайлаПечатнойФормы(Выборка));
				
				СписокФайлов.Добавить(Выборка.ФайлОбъекта);
				
				Если СписокСотрудников <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СписокСотрудников, Выборка.Сотрудник);
				КонецЕсли;
				
			КонецЦикла;
			
			ОписанияФайловПечатныхФорм.ОригиналыПечатныхФорм.Вставить(Выборка.ИдентификаторПечатнойФормы, ОригиналыПечатнойФормы);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаДанныхПечатныхФорм(Владельцы, ИдентификаторыПечатныхФорм = Неопределено, ТолькоПечатныеФормыОбъектов = Ложь, СписокСотрудников = Неопределено, ВТомЧислеПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТипыОбъектов = ТипыОбъектов(Владельцы, ИдентификаторыПечатныхФорм, ТолькоПечатныеФормыОбъектов);
	
	СчетчикПараметров = 0;
	ТекстыЗапросов = Новый Массив;
	Для Каждого ТипВладельца Из ТипыОбъектов Цикл
		
		Если Не ЭтоТипОбъектаСПечатнымиФормами(ТипВладельца.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ТипВладельца.Ключ);
		ИмяПараметра = "ВладельцыФайлов_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
		Запрос.УстановитьПараметр(ИмяПараметра, ТипВладельца.Значение);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПрисоединенныеФайлы.Ссылка КАК ФайлОбъекта,
			|	ПрисоединенныеФайлы.ВладелецФайла КАК Владелец
			|ПОМЕСТИТЬ ВТДанныеПечатныхФорм
			|ИЗ
			|	Справочник.УвольнениеПрисоединенныеФайлы КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ВладелецФайла В(&ВладельцыФайлов)
			|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
		
		Если ВТомЧислеПомеченныеНаУдаление Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ПрисоединенныеФайлы.ПометкаУдаления", "");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.УвольнениеПрисоединенныеФайлы", "Справочник." + ИмяСправочника);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВладельцыФайлов", "&" + ИмяПараметра);
		
		Если ТекстыЗапросов.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТДанныеПечатныхФорм", "");
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		СчетчикПараметров = СчетчикПараметров + 1;
		
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() > 0 Тогда
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, "
			|ОБЪЕДИНИТЬ ВСЕ
			|");
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК ФайлОбъекта,
			|	НЕОПРЕДЕЛЕНО КАК Владелец
			|ПОМЕСТИТЬ ВТДанныеПечатныхФорм";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодписанныеФормы.ИдентификаторПечатнойФормы КАК ИдентификаторПечатнойФормы,
		|	ДанныеПечатныхФорм.ФайлОбъекта КАК ФайлОбъекта,
		|	ДанныеПечатныхФорм.Владелец КАК Владелец,
		|	ПодписанныеФормы.Оригинал КАК Оригинал,
		|	ПодписанныеФормы.Название КАК Название,
		|	ПодписанныеФормы.Организация КАК Организация,
		|	ПодписанныеФормы.Сотрудник КАК Сотрудник,
		|	ПодписанныеФормы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПодписанныеФормы.Номер КАК Номер,
		|	ПодписанныеФормы.Дата КАК Дата
		|ИЗ
		|	ВТДанныеПечатныхФорм КАК ДанныеПечатныхФорм
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписанныеПечатныеФормы КАК ПодписанныеФормы
		|		ПО ДанныеПечатныхФорм.ФайлОбъекта = ПодписанныеФормы.ПрисоединенныйФайл
		|ГДЕ
		|	&ОтборПоИдентификаторуПечатнойФормы
		|	И &ОтборПоСпискуСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	Владелец,
		|	ИдентификаторПечатнойФормы,
		|	ФайлОбъекта";
	
	Если ИдентификаторыПечатныхФорм = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоИдентификаторуПечатнойФормы", "(ИСТИНА)");
	Иначе
		Запрос.УстановитьПараметр("ИдентификаторыПечатныхФорм", ИдентификаторыПечатныхФорм);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоИдентификаторуПечатнойФормы",
			"ПодписанныеФормы.ИдентификаторПечатнойФормы В (&ИдентификаторыПечатныхФорм)");
	КонецЕсли;
	
	Если СписокСотрудников = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпискуСотрудников", "(ИСТИНА)");
	Иначе
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпискуСотрудников",
			"ПодписанныеФормы.Сотрудник В (&СписокСотрудников)");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ОбъектЗаблокирован(СсылкаНаОбъект)
	
	БлокироватьФорму = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодписанныеФормы.ИдентификаторПечатнойФормы КАК ИдентификаторПечатнойФормы
		|ИЗ
		|	Справочник.УвольнениеПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписанныеПечатныеФормы КАК ПодписанныеФормы
		|		ПО ПрисоединенныеФайлы.Ссылка = ПодписанныеФормы.ПрисоединенныйФайл
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ТипЗнч(СсылкаНаОбъект));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"Справочник.УвольнениеПрисоединенныеФайлы", "Справочник." + ИмяСправочника);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Количество() > 0 Тогда
		
		ПроверкаБлокировкиСУсловиемВыполнялась = Ложь;
		Пока Выборка.Следующий() Цикл
			
			Если Не БлокировкаПечатнойФормыСУсловием(Выборка.ИдентификаторПечатнойФормы) Тогда
				БлокироватьФорму = Истина;
				Прервать;
			КонецЕсли;
			
			Если Не ПроверкаБлокировкиСУсловиемВыполнялась Тогда
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект);
				Если МенеджерОбъекта.ОбъектЗаблокирован(СсылкаНаОбъект) Тогда
					БлокироватьФорму = Истина;
					Прервать;
				КонецЕсли;
				ПроверкаБлокировкиСУсловиемВыполнялась = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат БлокироватьФорму;
	
КонецФункции

Процедура ПроинициализироватьФормуОбъекта(УправляемаяФорма)
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("ИдентификаторыФайловСЭЦП", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы("РеквизитыИдентификаторов", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	СуществующиеРеквизиты = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(УправляемаяФорма, СуществующиеРеквизиты);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(УправляемаяФорма, ДобавляемыеРеквизиты, СуществующиеРеквизиты);
	
КонецПроцедуры

Процедура ПриПомещенииДанныхВРеквизиты(УправляемаяФорма, СсылкаНаОбъект, ОбъектФормы)
	
	ОбновитьДанныеПечатныхФормСЭЦПВФормеОбъекта(УправляемаяФорма);
	КадровыйЭДОКлиентСервер.ОбновитьКоманды(УправляемаяФорма, ОбъектФормы, Истина);
	
КонецПроцедуры

Функция ОбработчикОткрытияПодписанныхФайлов()
	Возврат "КадровыйЭДОКлиент.ВыполнитьКомандуОткрытияПодписанныхФайлов";
КонецФункции

Функция ТипыОбъектов(Владельцы, ИдентификаторыПечатныхФорм, ТолькоПечатныеФормыОбъектов)
	
	ОбъектыПоТипам = ОбщегоНазначенияБЗК.ОбъектыПоТипам(Владельцы);
	
	Если Не ТолькоПечатныеФормыОбъектов Тогда
		
		СторонниеПечатныеФормы = Новый Массив;
		Для Каждого ТипОбъектаСоСтороннимиПечатнымиФормами Из ТипыОбъектовСоСтороннимиПечатнымиФормами() Цикл
			
			ОбъектыТипа = ОбъектыПоТипам.Получить(ТипОбъектаСоСтороннимиПечатнымиФормами);
			Если ОбъектыТипа <> Неопределено Тогда
				
				МенеджерОбъекта = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипОбъектаСоСтороннимиПечатнымиФормами);
				ОбъектыСтороннихПечатныхФорм = МенеджерОбъекта.ОбъектыСтороннихПечатныхФорм(ОбъектыТипа, ИдентификаторыПечатныхФорм);
				
				Если ОбъектыСтороннихПечатныхФорм.Количество() > 0 Тогда
					
					Для Каждого ОписаниеОбъектов Из ОбъектыСтороннихПечатныхФорм Цикл
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СторонниеПечатныеФормы, ОписаниеОбъектов.Значение);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СторонниеПечатныеФормы.Количество() > 0 Тогда
			
			ОбъектыСтороннихФормПоТипам = ОбщегоНазначенияБЗК.ОбъектыПоТипам(СторонниеПечатныеФормы);
			Для Каждого ОписаниеОбъектовТипа Из ОбъектыСтороннихФормПоТипам Цикл
				
				ОбъектыТипа = ОбъектыПоТипам.Получить(ОписаниеОбъектовТипа.Ключ);
				Если ОбъектыТипа = Неопределено Тогда
					ОбъектыПоТипам.Вставить(ОписаниеОбъектовТипа.Ключ, ОписаниеОбъектовТипа.Значение);
				Иначе
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыТипа, ОписаниеОбъектовТипа.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектыПоТипам;
	
КонецФункции

Функция ТипыОбъектовСоСтороннимиПечатнымиФормами()
	
	Возврат КадровыйЭДОВнутренний.ТипыОбъектовСоСтороннимиПечатнымиФормами();
	
КонецФункции

Функция ОбновитьДанныеПечатныхФормСЭЦПВФормеОбъекта(УправляемаяФорма)
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СсылкаНаОбъектФормы = УправляемаяФорма.Объект.Ссылка;
	Если Не ЗначениеЗаполнено(СсылкаНаОбъектФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Структура = Новый Структура("ИдентификаторыФайловСЭЦП,РеквизитыИдентификаторов", Null, Null);
	ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
	Если Структура.ИдентификаторыФайловСЭЦП = Null Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторыФайлов = ФайлыПечатныхФормПоОбъектам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъектФормы), , Истина)[СсылкаНаОбъектФормы];
	
	Если ИдентификаторыФайлов = Неопределено Тогда
		
		Если УправляемаяФорма.ИдентификаторыФайловСЭЦП <> Неопределено Тогда
			УправляемаяФорма.ИдентификаторыФайловСЭЦП = Неопределено;
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		ИдентификаторыФайловСЭЦП = ИспользуемыеИдентификаторы(ИдентификаторыФайлов);
		
		ИдентификаторыКоманд = Новый Соответствие;
		Для Каждого ОписаниеИдентификатора Из ИдентификаторыФайловСЭЦП Цикл
			ИдентификаторКоманды = Структура.РеквизитыИдентификаторов.Получить(ОписаниеИдентификатора.Ключ);
			Если ИдентификаторКоманды <> Неопределено Тогда
				ИдентификаторыКоманд.Вставить(ИдентификаторКоманды, ОписаниеИдентификатора.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если УправляемаяФорма.ИдентификаторыФайловСЭЦП = Неопределено
			Или Не ОбщегоНазначения.КоллекцииИдентичны(УправляемаяФорма.ИдентификаторыФайловСЭЦП, ИдентификаторыКоманд) Тогда
			
			УправляемаяФорма.ИдентификаторыФайловСЭЦП = Новый ФиксированноеСоответствие(ИдентификаторыКоманд);
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИспользуемыеИдентификаторы(ОписанияФайловОбъекта)
	
	ЗначенияИдентификаторов = Новый Соответствие;
	Для Каждого ОписаниеФормы Из ОписанияФайловОбъекта Цикл
		ЗначенияИдентификаторов.Вставить(ОписаниеФормы.Ключ, Истина);
	КонецЦикла;
	
	Возврат ЗначенияИдентификаторов;
	
КонецФункции

Функция ПараметрыПисьма(ДанныеПолучателя, ДанныеФайловПечатныхФорм, ИдентификаторХранилища)
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("УведомитьОДоставке", Истина);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении", Истина);
	
	ПолучателиСообщения = Новый Массив;
	ОписаниеПолучателя = Новый Структура;
	ОписаниеПолучателя.Вставить("Представление", ДанныеПолучателя.ФизическоеЛицо);
	ОписаниеПолучателя.Вставить("Адрес", ДанныеПолучателя.ЭлектронныйАдрес);
	ПолучателиСообщения.Добавить(ОписаниеПолучателя);
	
	ПараметрыПисьма.Вставить("Кому", ПолучателиСообщения);
	
	СписокНазваний = Новый Массив;
	ИменаФайлов = Новый Массив;
	Вложения = Новый Массив;
	
	Если ТипЗнч(ДанныеФайловПечатныхФорм) = Тип("ТаблицаЗначений") Тогда
		ОписаниеФайлов = ДанныеФайловПечатныхФорм.Скопировать(Новый Структура("ФизическоеЛицо", ДанныеПолучателя.ФизическоеЛицо));
	Иначе
		ОписаниеФайлов = ДанныеФайловПечатныхФорм.Выгрузить(Новый Структура("ФизическоеЛицо", ДанныеПолучателя.ФизическоеЛицо));
	КонецЕсли;
	
	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		Если СписокНазваний.Найти(ОписаниеФайла.Название) = Неопределено Тогда
			СписокНазваний.Добавить(ОписаниеФайла.Название);
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлыДляВывода = Новый Массив;
	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		Если ЗначениеЗаполнено(ОписаниеФайла.ФайлОбъекта) Тогда
			ФайлыДляВывода.Добавить(ОписаниеФайла.ФайлОбъекта);
		Иначе
			ФайлыДляВывода.Добавить(ОписаниеФайла.ОписаниеПечатнойФормы);
		КонецЕсли;
		
	КонецЦикла;
	ВыводимыеФайлы = КадровыйЭДОВызовСервера.ВыводимыеФайлыПечатныхФорм(ФайлыДляВывода, ИдентификаторХранилища);
	
	Для Каждого ОписаниеФайла Из ВыводимыеФайлы Цикл
		
		ИменаФайлов.Добавить(ОписаниеФайла.Представление);
		
		Вложение = Новый Структура;
		Вложение.Вставить("Представление", ОписаниеФайла.Представление);
		Вложение.Вставить("АдресВоВременномХранилище", ОписаниеФайла.АдресВоВременномХранилище);
		
		Вложения.Добавить(Вложение);
		
	КонецЦикла;
	
	ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'Документы'") + ": " + СтрСоединить(СписокНазваний, "; "));
	
	ПараметрыПисьма.Вставить("Тело",
		СтрокаСЧислом(
			НСтр("ru = ';Приложен %1 файл;;Приложено %1 файла;Приложено %1 файлов;Приложены файлы'"),
			Вложения.Количество(), ВидЧисловогоЗначения.Количественное));
	
	ПараметрыПисьма.Тело = ПараметрыПисьма.Тело + ":" + Символы.ПС + Символы.Таб
		+ СтрСоединить(ИменаФайлов, ";" + Символы.ПС + Символы.Таб);
	
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

// Уточняет коллекцию дополнительных параметров команды печати комплекта документов,
// дополнительными параметрами команд печати отдельных документов.
//
// Параметры:
//  Команда       - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура УстановитьПараметрыКомандПечатиКомплектаДокументов(Команда, КомандыПечати)
	
	Если ТипЗнч(Команда.Идентификатор) = Тип("Строка") Тогда
		Идентификаторы = СтрРазделить(Команда.Идентификатор, ", ", Ложь);
	Иначе
		Идентификаторы = Команда.Идентификатор;
	КонецЕсли;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ИдентификаторПечатнойФормы = Идентификатор;
		НайденныеСтроки = КомандыПечати.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПечатнойФормы));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИдентификаторПечатнойФормы = КадровыйЭДОКлиентСервер.ТолькоИдентификаторПечатнойФормы(ИдентификаторПечатнойФормы);
			НайденныеСтроки = КомандыПечати.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторПечатнойФормы));
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если Не Команда.ДополнительныеПараметры.Свойство("РеквизитыДетализацииПакета") Тогда
				Команда.ДополнительныеПараметры.Вставить("РеквизитыДетализацииПакета", Новый Соответствие);
			КонецЕсли;
			
			Если НайденныеСтроки[0].ДополнительныеПараметры.Свойство("РеквизитыДетализации") Тогда
				Команда.ДополнительныеПараметры.РеквизитыДетализацииПакета.Вставить(
					ИдентификаторПечатнойФормы, НайденныеСтроки[0].ДополнительныеПараметры.РеквизитыДетализации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыИдентификаторовПоПараметрам(ПараметрыПодключаемыхКоманд, ПоляСписка = Неопределено)
	
	РеквизитыИдентификаторов = Новый Соответствие;
	
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	Для Каждого Подменю Из ПараметрыПодключаемыхКоманд.ПодменюСУсловиямиВидимости Цикл
		
		Для Каждого ОписаниеКоманды Из Подменю.КомандыСУсловиямиВидимости Цикл
			
			Для Каждого Условие Из ОписаниеКоманды.УсловияВидимости Цикл
				
				ИмяРеквизита = Условие.Реквизит;
				Если ПоляСписка <> Неопределено Тогда
					Если ПоляСписка.Найти(ИмяРеквизита) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если Не СтрНачинаетсяС(ИмяРеквизита, "ПечатнаяФорма_") Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ТипПараметра Из ОписаниеКоманды.ТипПараметра.Типы() Цикл
					
					Если ОбщегоНазначения.ЭтоСсылка(ТипПараметра) Тогда
						
						ТипыИдентификатора = РеквизитыИдентификаторов.Получить(ИмяРеквизита);
						Если ТипыИдентификатора = Неопределено Тогда
							
							НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(Новый Структура("ИмяВФорме", ОписаниеКоманды.ИмяВФорме));
							Если НайденныеКоманды.Количество() > 0 Тогда
								
								ИдентификаторКоманды = НайденныеКоманды[0].Идентификатор;
								Если ТипЗнч(ИдентификаторКоманды) = Тип("Массив") Тогда
									Если ИдентификаторКоманды.Количество() > 1 Тогда
										Продолжить;
									КонецЕсли;
									ИдентификаторКоманды = ИдентификаторКоманды[0];
								КонецЕсли;
								
								Если РеквизитыИдентификаторов.Получить(ИдентификаторКоманды) = Неопределено Тогда
									
									Если СтрРазделить(ИдентификаторКоманды, ",").Количество() > 1 Тогда
										Продолжить;
									КонецЕсли;
								
									РеквизитыИдентификаторов.Вставить(ИдентификаторКоманды, ИмяРеквизита);
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РеквизитыИдентификаторов;
	
КонецФункции

Функция ИспользуютсяЭлектронныеДокументы()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника")
		Или ИнтеграцияСРаботаВРоссии.ДоступнаПередачаДокументовНаРаботаВРоссии();
	
КонецФункции

// Возвращает массив объектов не содержащих файлов печатных форм.
//
// Параметры:
//  МассивОбъектов             - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ИдентификаторПечатнойФормы - Строка, идентификатор команды печати см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ОписанияФайловПечатныхФорм - см. ОписанияФайловПечатныхФорм
// Возвращаемое значение:
//  Массив - Массив из ЛюбаяСсылка - список объектов, для которых необходимо выполнить команду печати
//
Функция ОбъектыНаПечатьПоИдентификаторуПечатнойФормы(МассивОбъектов, ИдентификаторПечатнойФормы, ОписанияФайловПечатныхФорм, СписокСотрудников = Неопределено)
	
	НапечатанныеОбъекты = Новый Массив;
	
	ЗаполнитьОписанияФайловПечатныхФормПоОбъектам(ОписанияФайловПечатныхФорм, МассивОбъектов,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПечатнойФормы), СписокСотрудников);
	
	Для Каждого ОписаниеФайлов Из ОписанияФайловПечатныхФорм.ПечатныеФормыОбъектов Цикл
		Если ОписаниеФайлов.Значение.Получить(ИдентификаторПечатнойФормы) <> Неопределено Тогда
			ИндексСсылки = МассивОбъектов.Найти(ОписаниеФайлов.Ключ);
			Если ИндексСсылки <> Неопределено Тогда
				НапечатанныеОбъекты.Добавить(ОписаниеФайлов.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НапечатанныеОбъекты.Количество() > 0 Тогда
		Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОбъектов, НапечатанныеОбъекты)
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция УдалитьПечатныеФормыОбъекта(Объект)
	
	Результат = 0;
	
	НачатьТранзакцию();
	Попытка
		Документы.ДокументКадровогоЭДО.УдалитьДокументыПечатныхФормОбъекта(Объект);
		Результат = РегистрыСведений.ПодписанныеПечатныеФормы.УдалитьПечатныеФормыОбъекта(Объект);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьСертификаты(ПараметрыПечати)
	
	Если Не ПараметрыПечати.Свойство("ПодписиБезСертификатов")
		Или Не ЗначениеЗаполнено(ПараметрыПечати.ПодписиБезСертификатов) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ПодписьБезСертификата Из ПараметрыПечати.ПодписиБезСертификатов Цикл
		
		Если ЗначениеЗаполнено(ПодписьБезСертификата.Отпечаток) Тогда
			
			СохранитьСертификатПодписи(
				ПодписьБезСертификата.ПодписанныйОбъект,
				ПодписьБезСертификата.ПорядковыйНомер,
				ПодписьБезСертификата.Отпечаток,
				ПодписьБезСертификата.Сертификат);
			
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СохранитьСертификатПодписи(ПодписанныйОбъект, ПорядковыйНомер, Отпечаток, АдресСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	Запись.ПодписанныйОбъект = ПодписанныйОбъект;
	Запись.ПорядковыйНомер = ПорядковыйНомер;
	
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Запись.Отпечаток = Отпечаток;
		Запись.Сертификат = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(АдресСертификата));
		Запись.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СохранитьПодписьДокументаКЭДО(ДокументКЭДО, ФизическоеЛицо, Отпечаток, ДатаПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = ДокументКЭДО;
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Отпечаток = Отпечаток;
		МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(ИмяСобытия) Экспорт
	Возврат СтрШаблон(
		"%1.%2",
		НСтр("ru = 'Кадровый ЭДО'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ИмяСобытия);
КонецФункции

Процедура ПечатьДокументовПриСозданииНаСервереВывестиКомандуПодписать(УправляемаяФорма)
	
	КнопкаПодписатьПечатныеФормы = УправляемаяФорма.Элементы.Найти("ПодписатьПечатныеФормы");
	Если КнопкаПодписатьПечатныеФормы <> Неопределено Тогда
		КнопкаПодписатьПечатныеФормы.Видимость = Ложь;
	КонецЕсли;
	
	КомандаФормы = УправляемаяФорма.Команды.Добавить("ПодписатьПечатныеФормы");
	КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Подписать'");
	КомандаФормы.Подсказка = НСтр("ru = 'Подписать печатные формы'");
	
	КнопкаФормы = РазместитьКомандуНаФормеПечатьДокументов(УправляемаяФорма, КомандаФормы);
	Если КнопкаФормы <> Неопределено Тогда
		КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
		КнопкаФормы.Картинка = БиблиотекаКартинок.ЭлектронноЦифроваяПодпись;
		КнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
		КнопкаФормы.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступнаКомандаПодписать(УправляемаяФорма)
	
	КомандаДоступна = Ложь;
	Если УправляемаяФорма.Параметры.Свойство("ПараметрыПечати") Тогда
		Если УправляемаяФорма.Параметры.ПараметрыПечати.Свойство("ДополнительныеПараметры") Тогда
			Если УправляемаяФорма.Параметры.ПараметрыПечати.ДополнительныеПараметры.Свойство("ОписанияФайловПечатныхФорм") Тогда
				ФайлыПечатныхФорм = Новый Массив;
				Для Каждого ДанныеИдентификаторовПечатныхФорм Из УправляемаяФорма.Параметры.ПараметрыПечати.ДополнительныеПараметры.ОписанияФайловПечатныхФорм.ПечатныеФормыОбъектов Цикл
					Для Каждого ДанныеИдентификатораПечатнойФормы Из ДанныеИдентификаторовПечатныхФорм.Значение Цикл
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФайлыПечатныхФорм, ДанныеИдентификатораПечатнойФормы.Значение);
					КонецЦикла;
				КонецЦикла;
				Если ЗначениеЗаполнено(ФайлыПечатныхФорм) Тогда
					ФайлыНаПодписьПользователя = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыНаПодписьПользователя(Истина);
					Если ФайлыНаПодписьПользователя.Количество() >= ФайлыПечатныхФорм.Количество() Тогда
						КомандаДоступна = Истина;
						Для Каждого ФайлПечатныхФорм Из ФайлыПечатныхФорм Цикл
							Если ФайлыНаПодписьПользователя.Найти(ФайлПечатныхФорм) = Неопределено Тогда
								КомандаДоступна = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КомандаДоступна;
	
КонецФункции

Процедура ВывестиИнформациюОДоступностиРедактированияПечатнойФормы(УправляемаяФорма)
	
	Элементы = УправляемаяФорма.Элементы;
	Команды = УправляемаяФорма.Команды;
	
	ПрефиксЭлементов = КадровыйЭДОКлиентСервер.ПрефиксЭлементовОВозможностиРедактирования();
	
	ИмяГруппы = ПрефиксЭлементов + "Группа";
	ИнформацияОДоступностиРедактированияГруппа = Элементы.Найти(ИмяГруппы);
	Если ИнформацияОДоступностиРедактированияГруппа = Неопределено Тогда
		
		// Команда переключение режима редактирования
		НачатьИзменениеПечатнойФормы = Команды.Добавить("НачатьИзменениеПечатнойФормы");
		НачатьИзменениеПечатнойФормы.Действие = "Подключаемый_ВыполнитьКоманду";
		НачатьИзменениеПечатнойФормы.Заголовок = НСтр("ru = 'Редактировать'");
		НачатьИзменениеПечатнойФормы.Картинка = БиблиотекаКартинок.ТабличныйДокументТолькоПросмотр;
		НачатьИзменениеПечатнойФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		НовыйЭлемент = Элементы.Вставить(ПрефиксЭлементов + "КомандаРедактирования", Тип("КнопкаФормы"),
			Элементы.Найти("ГруппаРедактированиеПечатнойФормы"), Элементы.Найти("КнопкаРедактирование"));
		НовыйЭлемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = "НачатьИзменениеПечатнойФормы";
		
		НастройкаПечатнойФормы = Неопределено;
		Если Элементы.НастройкиПечатныхФорм.ТекущаяСтрока = Неопределено Тогда
			Если УправляемаяФорма.НастройкиПечатныхФорм.Количество() > 0 Тогда
				НастройкаПечатнойФормы = УправляемаяФорма.НастройкиПечатныхФорм[0];
			КонецЕсли;
		Иначе
			НастройкаПечатнойФормы = УправляемаяФорма.НастройкиПечатныхФорм.НайтиПоИдентификатору(
				Элементы.НастройкиПечатныхФорм.ТекущаяСтрока);
		КонецЕсли;
		
		Если НастройкаПечатнойФормы <> Неопределено Тогда
			Элементы[НастройкаПечатнойФормы.ИмяРеквизита].Редактирование = Ложь;
		КонецЕсли;
		
		// Информация о невозможности редактирования
		ИнформацияОДоступностиРедактированияГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), УправляемаяФорма, Элементы.Найти("ГруппаПечатныеФормы"));
		ИнформацияОДоступностиРедактированияГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ИнформацияОДоступностиРедактированияГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ИнформацияОДоступностиРедактированияГруппа.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = Элементы.Добавить(
			ПрефиксЭлементов + "КартинкаИнформация", Тип("ДекорацияФормы"), ИнформацияОДоступностиРедактированияГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Информация16АнимированнаяБЗК;
		
		НовыйЭлемент = Элементы.Добавить(
			ПрефиксЭлементов + "Надпись", Тип("ДекорацияФормы"), ИнформацияОДоступностиРедактированияГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = НСтр("ru = 'Подписанные (ожидающие подписания) документы уже нельзя редактировать'");
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		
	КонецЕсли;
	
	КадровыйЭДОКлиентСервер.ОбновитьИнформационнуюНадписьОВозможностиРедактированияПечатнойФормы(УправляемаяФорма);
	
КонецПроцедуры

Функция ОписанияНастроекПечатныхФормПоУмолчанию() Экспорт
	
	ОписанияНастроек = Новый ТаблицаЗначений;
	ОписанияНастроек.Колонки.Добавить("ИдентификаторПечатнойФормы", Новый ОписаниеТипов("Строка"));
	ОписанияНастроек.Колонки.Добавить("СодержимоеДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.СодержимоеДокументов"));
	ОписанияНастроек.Колонки.Добавить("БлокировкаСУсловием", Новый ОписаниеТипов("Булево"));
	
	ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
	Возврат ОписанияНастроек;
	
КонецФункции

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек)
	
	КадровыйЭДОВнутренний.ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек);
	
КонецПроцедуры

Функция БлокировкаПечатнойФормыСУсловием(ИдентификаторПечатнойФормы)
	
	Возврат КадровыйЭДОПовтИсп.НастройкиПечатныхФорм().Получить(ИдентификаторПечатнойФормы).БлокировкаСУсловием;
	
КонецФункции

Функция СтрокаСКоличествомДокументов(КоличествоПечатныхФорм)
	
	Возврат СтрокаСЧислом(";%1 документ;;%1 документа;%1 документов; %1 документа",
		КоличествоПечатныхФорм, ВидЧисловогоЗначения.Количественное, "L=ru");
		
КонецФункции

#КонецОбласти