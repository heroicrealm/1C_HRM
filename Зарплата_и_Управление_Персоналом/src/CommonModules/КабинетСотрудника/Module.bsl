#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.165";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.206";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("bf0e44ef-e92b-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ИнициализироватьРолиИсполнителейЗадач";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление ролей исполнителей задач.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5295d003-f66e-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьПубликациюПравНаВычеты";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации прав на вычеты.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.16.9";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.16.42";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a518af76-0896-11eb-8108-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника";
	Обработчик.Комментарий     = НСтр("ru = 'Настройка регламентного задания Проверка состояния сервиса ""1С:Кабинет сотрудника"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.85";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.УстановитьВерсияИзмененийКабинетСотрудника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9c1bc85d-8b82-4afb-97ed-37d3c1df247f");
	Обработчик.Процедура       = "КабинетСотрудника.ПроверитьПубликуемыхФизическихЛиц";
	Обработчик.Комментарий     = НСтр("ru = 'Проверка заполнения данных физических лиц, публикуемых в сервисе.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f0f899de-ffd3-4f35-8dda-017425bd0e67");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеНастроекСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление настроек сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.32";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("1a994315-b6ba-4fad-857b-c43cb900ddaf");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеНастроекСервисаВерсии303";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление настроек сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("67b20450-fb55-4d6f-bcc0-c64cf907b467");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьПубликациюПотерянныхОбъектов";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации объектов сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a6ae4155-996e-40bb-b4ee-7854d960aba3");
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьСобытиеСотрудникиДляОбновленияПубликуемыхОбъектов";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение события в ""Сотрудники для обновления публикуемых объектов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.91";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ec985970-fd7d-4382-ba93-be8ae07623de");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьФункциональностьСервисаПриИспользованииКЭДО";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление используемой функциональности сервиса 1С:Кабинет сотрудника"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.21.63";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("92fc10bf-5ec9-422c-b73e-75f148786586");
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьСодержимоеДокументаКЭДОРасчетныхЛистков";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по расчетным листкам.'");
КонецПроцедуры

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступноИзменениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

Функция ДоступноЧтениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	КабинетСотрудникаВнутренний.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.Имя);
	
	КабинетСотрудникаВнутренний.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.ИмяМетода);
	
	КабинетСотрудникаВнутренний.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		Если Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм") Тогда
			
			ИмяКоманды = "ПередатьПодписанныеPDFВСервисКабинетСотрудника";
			
			КомандаФормы = Форма.Команды.Найти(ИмяКоманды);
			Если КомандаФормы = Неопределено Тогда
				
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
				КомандаФормы.Заголовок = НСтр("ru = 'Передать в ""1С:Кабинет сотрудника""'");
				КомандаФормы.Подсказка = НСтр("ru = 'Подписать и передать в ""1С:Кабинет сотрудника""'");
				КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
				КомандаФормы.Картинка = БиблиотекаКартинок.СервисКабинетСотрудника;
				
				КнопкаФормы = КадровыйЭДО.РазместитьКомандуНаФормеПечатьДокументов(Форма, КомандаФормы);
				Если КнопкаФормы <> Неопределено Тогда
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
					КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область РегистрацияПубликуемыхОбъектов

Процедура ПриЗаписиПубликуемогоОбъекта(Объект) Экспорт
	
	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияКонтролируемыхРеквизитов);
	Если Не КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектПубликации", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = &ОбъектПубликации";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьИзмененияДляСервиса(Объект.Ссылка)
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей);

КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей);

КонецПроцедуры

Процедура ПриЗаписиЗаявкиСотрудника(Объект) Экспорт
	
	Если Не Объект.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(Объект.Ссылка);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПредметПубликации 	= Объект.Ссылка;
		ЗаписьНабора.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ИмущественныеВычетыНДФЛПередЗаписью(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ИмущественныеВычетыНДФЛ.Регистратор = &Регистратор";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ФизическиеЛицаОбновленияПубликацииВычетов", СписокФизическихЛиц);

КонецПроцедуры

Процедура ИмущественныеВычетыНДФЛПриЗаписи(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизическихЛиц = НаборЗаписей.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	СписокФизическихЛицПередЗаписью = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ФизическиеЛицаОбновленияПубликацииВычетов", СписокФизическихЛицПередЗаписью);
	Если СписокФизическихЛицПередЗаписью <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФизическихЛиц, СписокФизическихЛицПередЗаписью ,Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновленияПубликации
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновленияПубликации.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И ФизическиеЛицаДляОбновленияПубликации.БылаОшибкаПриПубликации ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
				МенеджерЗаписи.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПлановыеУдержанияПередЗаписью(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ПлановыеУдержанияПередЗаписью(НаборЗаписей);

КонецПроцедуры

Процедура ПлановыеУдержанияПриЗаписи(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ПлановыеУдержанияПриЗаписи(НаборЗаписей);
	
КонецПроцедуры

#КонецОбласти

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника
//	Параметры:
//		ВыполняетсяНачальнаяНастройка - булево;
//		ИспользуетсяСервисКабинетСотрудника - булево.
Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника(Знач ВыполняетсяНачальнаяНастройка = Неопределено,
																   Знач ИспользуетсяСервисКабинетСотрудника = Неопределено) Экспорт
															   
	Если ВыполняетсяНачальнаяНастройка = Неопределено Тогда 
		 Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
			 Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
			 ВыполняетсяНачальнаяНастройка = Модуль.ВыполняетсяНачальнаяНастройкаПрограммы();
		 Иначе
			 ВыполняетсяНачальнаяНастройка = Ложь;
		 КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяСервисКабинетСотрудника = ?(ИспользуетсяСервисКабинетСотрудника <> Неопределено, ИспользуетсяСервисКабинетСотрудника,
																								 ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника"));
	ПоказыватьПриглашениеКабинетаСотрудника = НЕ (ВыполняетсяНачальнаяНастройка ИЛИ ИспользуетсяСервисКабинетСотрудника);
	
	Если ПоказыватьПриглашениеКабинетаСотрудника <> Константы.ПоказыватьПриглашениеКабинетСотрудника.Получить() Тогда
		Константы.ПоказыватьПриглашениеКабинетСотрудника.Установить(ПоказыватьПриглашениеКабинетаСотрудника);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника для базовой версии
//
Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии() Экспорт

	Если ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации() Тогда
		УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника();
	КонецЕсли;
	
КонецПроцедуры

// Получает данные расчетных листков.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации
// 	Месяц - Дата
// 	СписокФизическихЛиц - Массив
//
// 	Возвращаемое значение:
// 		Структура - данные расчетных листков
//
Функция ДанныеРасчетныхЛистовДляПубликации(Организация, Месяц, СписокФизическихЛиц) Экспорт
	
	Данные = Отчеты.АнализНачисленийИУдержаний.ДанныеРасчетныхЛистков(
		СписокФизическихЛиц, Организация, НачалоМесяца(Месяц), КонецМесяца(Месяц));
	
	Если ЗначениеЗаполнено(Данные.ДанныеРасчетныхЛистков) Тогда
		Данные.ДанныеРасчетныхЛистков.Вставить("РасчетныеЛистыДокументы", РасчетныеЛистыДокументы(Данные.ДокументРезультат));
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Процедура ЗарегистрироватьОбновлениеВычетов(СписокФизическихЛиц) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновленияПубликации
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновленияПубликации.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И ФизическиеЛицаДляОбновленияПубликации.БылаОшибкаПриПубликации ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
				МенеджерЗаписи.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает значение настройки ИспользуетсяКадровыйЭДО.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ИспользуетсяКадровыйЭДО() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");

КонецФункции

// Сравнивает текущую версию сервиса с переданным значением.
//
// Параметры:
// 	ПроверяемаяВерсия - Строка - сравниваемая версия.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ВерсияПриложенияМеньшеВерсии(ПроверяемаяВерсия) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияПриложения) Тогда
		Возврат Истина;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Настройки.ВерсияПриложения, ПроверяемаяВерсия) < 0;
	КонецЕсли;

КонецФункции

// Возвращает значение настройки интеграции с сервисом - ПубликоватьСтруктуруЮридическихЛиц.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ПубликоватьСтруктуруЮридическихЛиц() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки.ПубликоватьСтруктуруЮридическихЛиц;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКлючамиПриложения

Функция ЕстьКлючиПриложения() Экспорт
	
	Возврат (КлючиПриложенияИзБезопасногоХранилища() <> Неопределено);
	
КонецФункции

Функция КлючиПриложенияИзБезопасногоХранилища() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Приложение.Ключи",
		"ИдентификаторКлиента,СекретКлиента");
	УстановитьПривилегированныйРежим(Ложь);

	Если ДанныеВБезопасномХранилище.ИдентификаторКлиента <> Неопределено
		И ДанныеВБезопасномХранилище.СекретКлиента <> Неопределено Тогда
		Возврат Новый Структура(
			"ИдентификаторКлиента,СекретКлиента",
			ДанныеВБезопасномХранилище.ИдентификаторКлиента,
			ДанныеВБезопасномХранилище.СекретКлиента);
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

Процедура СохранитьКлючиПриложенияВБезопасномХранилище(ИдентификаторКлиента, СекретКлиента) Экспорт

	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Ключи",ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Ключи",СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеТокенаАутентификации

Функция ТокенАутентификации(Соединение, ПараметрыСоединения)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Приложение.Токен",
		"Токен,СрокГодностиТокена");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеВБезопасномХранилище.Токен <> Неопределено
		И ДанныеВБезопасномХранилище.СрокГодностиТокена <> Неопределено Тогда
		
		Если ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеВБезопасномХранилище.СрокГодностиТокена Тогда
			Возврат НовыйТокенАутентификации(Соединение, ПараметрыСоединения).Токен;
		Иначе
			Возврат ДанныеВБезопасномХранилище.Токен;
		КонецЕсли;
		
	Иначе
		Возврат НовыйТокенАутентификации(Соединение, ПараметрыСоединения).Токен;
	КонецЕсли;
	
КонецФункции

Функция НовыйТокенАутентификации(Соединение, ПараметрыСоединения)
	
	Результат = Новый Структура("Токен,НеактуальныеКлючи",,Ложь);
	
	КлючиПриложения = КлючиПриложенияИзБезопасногоХранилища();
	Если КлючиПриложения = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заданы ключи приложения.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	СтрокаBase64 = Base64Строка(
	ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", КлючиПриложения.ИдентификаторКлиента, КлючиПриложения.СекретКлиента)));
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", СтрокаBase64));
	Запрос = Новый HTTPЗапрос("/auth/oidc/token", Заголовки);
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыСоединения.ИмяСобытияЖР, ПараметрыСоединения.СтруктураАдресаПриложения, "POST", Запрос, Ответ);
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
		Если РезультатЧтенияJSON.Свойство("id_token") Тогда
			Токен = РезультатЧтенияJSON["id_token"];
			СрокГодностиТокена = ТекущаяУниверсальнаяДатаВМиллисекундах() + 3600*100;
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Токен",Токен, "Токен");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Токен",СрокГодностиТокена, "СрокГодностиТокена");
			УстановитьПривилегированныйРежим(Ложь);
			Результат.Токен = Токен;
		Иначе
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ОтветОшибка = ОбъектОтвета["error"];
		Если ОтветОшибка <> Неопределено Тогда
			Сообщение = ОтветОшибка["message"];
			Если Сообщение <> Неопределено И СтрНайти(Сообщение, "User name or password is invalid") > 0 Тогда
				Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
				ЗаписьЖурналаРегистрации(ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
				Результат.НеактуальныеКлючи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Результат.НеактуальныеКлючи Тогда
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 401 Тогда
		
		Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		Результат.НеактуальныеКлючи = Истина;
		
	Иначе
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИспользованиеAPI

Функция ПараметрыПодключения(ИмяСобытияЖР, ВестиПротокол)
	
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтруктураАдресаПриложения = ОбщегоНазначенияКлиентСервер.СтруктураURI(НастройкиСервиса.АдресПриложения);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресПриложения", 			НастройкиСервиса.АдресПриложения);
	Результат.Вставить("СтруктураАдресаПриложения", СтруктураАдресаПриложения);
	Результат.Вставить("Соединение",				НовоеHTTPСоединение(СтруктураАдресаПриложения));
	Результат.Вставить("Ошибки",					Новый Массив);
	Результат.Вставить("БылиОшибки",				Ложь);
	Результат.Вставить("ИмяСобытияЖР",				ИмяСобытияЖР);
	Результат.Вставить("ВестиПротокол",				ВестиПротокол Или Константы.РегистрироватьВЖурналеСобытийЗапросы.Получить());
	Результат.Вставить("ОбновлениеПубликации",		Ложь);
	Возврат Результат;
	
КонецФункции

Функция HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, ИмяМетода, СтрокаТела = "", ОписаниеФайла = Неопределено, РазрешенныйКодОтвета = "")
	
	Ответ = Неопределено;
	
	Соединение = ПараметрыПодключения.Соединение;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	
	ИмяФайла = "";
	Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
		ИмяФайла = ОписаниеФайла.ИмяФайла;
		Если ВерсияПриложенияМеньшеВерсии("5.0.2.1") Тогда
			Заголовки.Вставить("Content-Type", "application/octet-stream");
		Иначе
			РасширениеФайла = НРег(ОписаниеФайла.Расширение);
			Если РасширениеФайла = "jpg"
				Или РасширениеФайла = "jpеg"
				Или РасширениеФайла = "jpe"
				Или РасширениеФайла = "jfif" Тогда
				Заголовки.Вставить("Content-Type", "image/jpeg");
			ИначеЕсли РасширениеФайла = "png" Тогда
				Заголовки.Вставить("Content-Type", "image/png");
			ИначеЕсли РасширениеФайла = "gif" Тогда
				Заголовки.Вставить("Content-Type", "image/gif");
			ИначеЕсли РасширениеФайла = "tiff" Тогда
				Заголовки.Вставить("Content-Type", "image/tiff");
			ИначеЕсли РасширениеФайла = "webp" Тогда
				Заголовки.Вставить("Content-Type", "image/webp");
			ИначеЕсли РасширениеФайла = "bmp" Тогда
				Заголовки.Вставить("Content-Type", "image/vnd.wap.wbmp");
			Иначе
				Заголовки.Вставить("Content-Type", "application/octet-stream");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	Токен = ТокенАутентификации(Соединение, ПараметрыПодключения);
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	Запрос = Новый HTTPЗапрос("/" + ПараметрыПодключения.СтруктураАдресаПриложения.ПутьНаСервере + РесурсСервиса, Заголовки);
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Запрос.УстановитьИмяФайлаТела(ИмяФайла);
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	КонецЕсли;
	
	Если ПараметрыПодключения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, Запрос);
	КонецЕсли;
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыПодключения.ИмяСобытияЖР, ПараметрыПодключения.СтруктураАдресаПриложения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Ответ = Неопределено;
	КонецПопытки;
	
	Если ПараметрыПодключения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 401 Тогда
		Соединение = НовоеHTTPСоединение(ПараметрыПодключения.СтруктураАдресаПриложения);
		Токен = ТокенАутентификации(Соединение, ПараметрыПодключения);
		Если ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
		Попытка
			Если ПараметрыПодключения.ВестиПротокол Тогда
				ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, Запрос);
			КонецЕсли;
			Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		Исключение
			ЗаписатьОшибкуВызова(ПараметрыПодключения.ИмяСобытияЖР, ПараметрыПодключения.Сервер, ИмяМетода, Запрос, , ОписаниеОшибки());
			Ответ = Неопределено;
		КонецПопытки;
		Если ПараметрыПодключения.ВестиПротокол Тогда
			ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, Запрос, Ответ);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния >= 300
		И Не (Ответ.КодСостояния = 404 И ИмяМетода = "DELETE")
		И Ответ.КодСостояния <> РазрешенныйКодОтвета Тогда
		ЗаписатьОшибкуВызова(ПараметрыПодключения.ИмяСобытияЖР, ПараметрыПодключения.СтруктураАдресаПриложения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Выполняет публикацию присоединенного файла и возвращает идентификатор файла, полученный из сервиса.
// 	Параметры:
// 		ПараметрыПодключения - Структура - параметры подключения
// 		ПрисоединенныйФайл - Ссылка - ссылка на присоединенный файл
// 		Расширение - Строка - расширение файла
//
// 	Возвращаемое значение:
// 		Идентификатор файла - Строка
//
Функция ОпубликоватьПрисоединенныйФайл(ПараметрыПодключения, ПрисоединенныйФайл, Расширение) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеВложения = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
	ДвоичныеДанныеВложения.Записать(ИмяВременногоФайла);
	
	ОписаниеФайла = ОписаниеФайлаДляПубликации(ИмяВременногоФайла, Расширение);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсФайлы(), "POST",, ОписаниеФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Попытка
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектОтвета.Получить("fileID");
	
КонецФункции

Функция ЗаполнитьПараметрыШаблонаURL(Знач ШаблонСтроки, Знач Параметры)
	Результат = ШаблонСтроки;
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, "{" + Параметр.Ключ + "}", Параметр.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОписаниеРесурсовAPI

Функция РесурсAPI() Экспорт
	
	Возврат "/api";
	
КонецФункции

Функция РесурсФизическиеЛица()
	
	Возврат РесурсAPI() + "/persons";
	
КонецФункции

Функция РесурсОрганизации()
	
	Возврат РесурсAPI() + "/employers";
	
КонецФункции

Функция РесурсСтруктураПредприятия()
	
	Возврат РесурсAPI() + "/divisions";
	
КонецФункции

Функция РесурсДолжности()
	
	Возврат РесурсAPI() + "/positions";
	
КонецФункции

Функция РесурсШтатноеРасписание()
	
	Возврат РесурсAPI() + "/stafflist-positions";
	
КонецФункции

Функция РесурсСотрудники()
	
	Возврат РесурсAPI() + "/employees";
	
КонецФункции

Функция РесурсПрименяемыеВычеты()
	
	Возврат РесурсAPI() + "/tax-deductions";
	
КонецФункции

Функция РесурсЗаявленияНаНалоговыеВычеты()
	
	Возврат РесурсПрименяемыеВычеты() + "/requests";
	
КонецФункции

Функция РесурсСоставныеЧастиЗарплаты()
	
	Возврат РесурсAPI() + "/payslip-component-types";
	
КонецФункции

Функция РесурсРасчетныеЛисты()
	
	Возврат РесурсAPI() + "/payslips";
	
КонецФункции

Функция РесурсЗапросыИзмененияЛичныхДанных()
	
	Возврат РесурсФизическиеЛица() + "/information-change-requests";
	
КонецФункции

Функция РесурсСправки2НДФЛ()
	
	Возврат РесурсAPI() + "/forms2NDFL";
	
КонецФункции

Функция РесурсЗапросыСправок2НДФЛ()
	
	Возврат РесурсСправки2НДФЛ() + "/requests";
	
КонецФункции

Функция РесурсОтветыНаЗапросыСправок2НДФЛ()
	
	Возврат РесурсСправки2НДФЛ() + "/responses";
	
КонецФункции

Функция РесурсСправкиСМестаРаботы()
	
	Возврат РесурсAPI() + "/employment-certificates";
	
КонецФункции

Функция РесурсЗапросыСправокСРаботы()
	
	Возврат РесурсСправкиСМестаРаботы() + "/requests";
	
КонецФункции

Функция РесурсЗаявленияНаОтпуск()
	
	Возврат РесурсAPI() + "/vacations/requests";
	
КонецФункции

Функция РесурсСправкиОбОстаткеОтпуска()
	
	Возврат РесурсAPI() + "/vacations/balance-reports";
	
КонецФункции

Функция РесурсЗапросыСправокОбОстаткеОтпуска()
	
	Возврат РесурсСправкиОбОстаткеОтпуска() + "/requests";
	
КонецФункции

Функция РесурсОтсутствия()
	
	Возврат РесурсAPI() + "/absences";
	
КонецФункции

Функция РесурсФайлы()
	
	Возврат РесурсAPI() + "/files";
	
КонецФункции

Функция РесурсФайлыПолучение()
	
	Возврат РесурсAPI() + "/files/{ID}";
	
КонецФункции

Функция РесурсПолучениеВсехИзменений()
	
	Возврат РесурсAPI() + "/data/updates?version={version}&limit={limit}";
	
КонецФункции

Функция РесурсРезультатыСогласования()
	
	Возврат РесурсAPI() + "/agreement-results";
	
КонецФункции

Функция РесурсДокументыНаПодпись()
	
	Возврат РесурсAPI() + "/documents-to-be-signed";
	
КонецФункции

Функция РесурсЗаявленияНаКомпенсациюОтпуска()
	
	Возврат РесурсAPI() + "/leave-encashment-requests";
	
КонецФункции

Функция РесурсЗаявлениеНаКомпенсациюОтпуска()
	
	Возврат РесурсЗаявленияНаКомпенсациюОтпуска() + "/requests";
	
КонецФункции

Функция РесурсЗаявленияНаУдержаниеДСВ()
	
	Возврат РесурсAPI() + "/contributions";
	
КонецФункции

Функция РесурсЗаявлениеНаУдержаниеДСВ()
	
	Возврат РесурсЗаявленияНаУдержаниеДСВ() + "/requests";
	
КонецФункции

Функция РесурсСправка2НДФЛ()
	
	Возврат РесурсAPI() + "/forms2NDFL";
	
КонецФункции

#КонецОбласти

#Область ОписанияОбъектов

// Описание объекта - form2NDFLRequest.
Функция ОписаниеОбъектаЗапросСправокНДФЛ()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("purpose", 		"Назначение2НДФЛ", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxYear", 		"НалоговыйПериод", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("proofPeriod",	"КоличествоМесяцев", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("incomePeriodStartDate",	"НачалоПериода", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("incomePeriodEndDate", 	"ОкончаниеПериода", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("obtainingMode",	"ВариантФормированияФайлаОтвета", Тип("ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("copiesNumber",	"КоличествоЭкземпляров", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("sendEmail",		"ОтправлятьEmail", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("addressEmail",	"АдресEmail", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - personalInformationChangeRequest.
Функция ОписаниеОбъектаЗапросНаИзменениеЛичныхДанных()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeName",	"ИзменитьФИО", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("lastName",		"Фамилия", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("firstName",		"Имя", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("patronymic",	"Отчество", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeIdentityDocument", 	"ИзменитьДокумент", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("identityDocument", 			"ДокументУдостоверяющийЛичность", Тип("Структура"), ОписаниеОбъектаДокументУдостоверяющийЛичность()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changePersonalPhone",		"ИзменитьНомерТелефона", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personalPhone",				"ЛичныйНомерТелефона", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeAddress",				"ИзменитьАдрес", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("registrationAddress",		"АдресРегистрации", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("residentialAddress",		"АдресМестаПроживания", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - certificateFromEmployerRequest.
Функция ОписаниеОбъектаЗапросСправкиСРаботы()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("purpose",		"НазначениеСправкиСРаботыСтрока", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("obtainingMode",	"ВариантФормированияФайлаОтвета", Тип("ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("copiesNumber",	"КоличествоЭкземпляров", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("sendEmail",		"ОтправлятьEmail", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("addressEmail",	"АдресEmail", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationRequest.
Функция ОписаниеОбъектаЗапросНаОтпуск()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employeeID",	"Сотрудник", Тип("СправочникСсылка.Сотрудники")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("startDate",		"ДатаНачала", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("endDate",		"ДатаОкончания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("unpaid",		"ЗаСвойСчет", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("leaveEncashmentDays", 	"КоличествоДнейКомпенсации", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("leaveEncashment", 		"КомпенсироватьОтпуск", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID", "ИдентификаторЭлектронногоДокумента", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - leaveEncashmentRequests.
Функция ОписаниеОбъектаЗапросНаКомпенсациюОтпуска()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("leaveEncashmentDays",	"КоличествоДнейКомпенсации", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationBalanceInfoRequest.
Функция ОписаниеОбъектаЗапросСправкиОбОстаткеОтпуска()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("obtainingMode",	"ВариантФормированияФайлаОтвета", Тип("ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("copiesNumber",	"КоличествоЭкземпляров", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("sendEmail",		"ОтправлятьEmail", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("addressEmail",	"АдресEmail", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - taxDeductionApplication.
Функция ОписаниеОбъектаЗаявлениеНаНалоговыеВычеты()
	 
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 				"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 			"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 		"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 			"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 		"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("applyMonth", 		"МесяцПрименения", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personalDeduction", "ЭтоЛичныйВычет", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("childTaxDeduction", "ЭтоВычетНаДетей", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("childTaxDeductions", 	"ВычетыНаДетей", Тип("ТаблицаЗначений"), ОписаниеПолейВычетаНаДетей()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxAuthorityNotices", 	"УведомленияИзНалоговой", Тип("ТаблицаЗначений"), ОписаниеПолейУведомленияИзНалоговой()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("educationTaxDeduction", 		"ЭтоВычетНаОбучение", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("medicalTreatmentTaxDeduction", 	"ЭтоВычетНаЛечение", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("realEstateTaxDeduction", 		"ЭтоВычетНаНедвижимость", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 						"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 			"Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 					"Комментарий", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - voluntaryInsuranceContributionsRequests.
Функция ОписаниеОбъектаЗапросНаУдержаниеДСВ()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("calculationMethod", "СпособРасчетаУдержанияДСВ", Тип("ПеречислениеСсылка.СпособыРасчетаУдержанийКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("percentage",	"Процент", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("amount",		"Сумма", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - absence.
Функция ОписаниеОбъектаУведомлениеОбОтсутствии()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("reason", 		"ПричинаОтсутствия", Тип("ПеречислениеСсылка.ПричиныОтсутствийЗаявокКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("startDate",		"ДатаНачала", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("endDate",		"ДатаОкончания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("allDay",		"ВесьДень", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID", "ИдентификаторЭлектронногоДокумента", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - agreementResult.
Функция ОписаниеОбъектРезультатСогласования()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"Подписант", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personName",	"ИмяПодписанта", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentID",	"ИдентификаторДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID",	"ИдентификаторЭлектронногоДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("result",				"РезультатСогласования", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicSignature",	"ЭлектроннаяПодпись", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("signatoryRole",			"РольПодписанта", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentVersion",		"ВерсияДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("comment", 				"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("certificate",			"СертификатЭП", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("time",					"ДатаПодписи", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - electronicDocument.
Функция ОписаниеОбъектаЭлектронныйДокумент()

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("originalDocument", "ИсходныйДокумент", Тип("Структура"), ОписаниеОбъектаФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("additionalPresentations", "ПредставленияДокумента", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл()));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - file.
Функция ОписаниеОбъектаФайл()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", 		"НаименованиеФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("extension", "РасширениеФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("size", 		"РазмерФайла", Тип("Число"))); 
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 		"ИдентификаторФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("hash", 		"ХешСумма", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - inputFile.
Функция ОписаниеОбъектаВходящийФайл()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("fileID", 	"ИдентификаторФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", 		"НаименованиеФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("extension", "РасширениеФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("size", 		"РазмерФайла", Тип("Число"))); 
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - identityDocument.
Функция ОписаниеОбъектаДокументУдостоверяющийЛичность()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("identityDocumentType",	"ДокументВид", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("serias",				"ДокументСерия", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("number",				"ДокументНомер", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("issueDate",				"ДокументДатаВыдачи", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("issuingAuthority",		"ДокументКемВыдан", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("issuingAuthorityID",	"ДокументКодПодразделения", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationBalanceReport.
Функция ОписаниеОбъектаСправкаОбОстаткеОтпуска() Экспорт
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", "ИдентификаторЗаявки", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachment",  "Вложение", Неопределено, ОписаниеОбъектаВходящийФайл()));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта  - documentToBeSigned.
Функция ОписаниеОбъектаДокументНаПодпись()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", "ИдентификаторДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID","Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("emloyees", 	"ФизическиеЛица", Тип("ТаблицаЗначений")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("date", 		"Дата", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", 		"НазваниеДокумента", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 	"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("basicProperties", 	"СвойстваДокумента", Тип("ТаблицаЗначений"), ОписаниеОбъектаСвойствоДокумента()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 				"Комментарий", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта  - basicProperties.
Функция ОписаниеОбъектаСвойствоДокумента()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", "ИмяСвойства", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("value","ЗначениеСвойства", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - certificateFromEmployer.
Функция ОписаниеОбъектаСправкаСРаботы() Экспорт
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 		"Заявка", Неопределено));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", "ИдентификаторЗаявки", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID","Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachment","Вложение", Неопределено, ОписаниеОбъектаВходящийФайл()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 	"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 		"Комментарий", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - form2NDFL.
Функция ОписаниеОбъектаСправка2НДФЛ()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"Справка2НДФЛ", Неопределено));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", 	"ИдентификаторЗаявки", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxYear", 		"НалоговыйПериод", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("incomeAmount", 	"СуммаДохода", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxAmount", 	"СуммаНалога", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент()));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
	// не используется с версии 3.0.3.1
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachment",	"Вложение", Неопределено, ОписаниеОбъектаВходящийФайл()));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - form2NDFLResponse.
Функция ОписаниеОбъектаОтветНаЗапросСправок2НДФЛ()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", "ИдентификаторЗаявки", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID","Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("forms2NDFL", "Справки2НДФЛ", Тип("ТаблицаЗначений"), ОписаниеОбъектаСправка2НДФЛ()));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта salaryInfo
Функция ОписаниеИнформацияОЗарплате()

	Описание = Новый Структура("
	|personID,
	|month,
	|isFirstHalf,
	|components,
	|documentsToBeSigned");
	
	Возврат Описание;

КонецФункции

// Описание объекта - contributions.
Функция ОписаниеОбъектаПлановыеУдержания() Экспорт

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("contributions", "ПлановыеУдержания", Тип("ТаблицаЗначений"), ОписаниеОбъектаПлановоеУдержание()));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - contribution.
Функция ОписаниеОбъектаПлановоеУдержание() Экспорт

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("presentation", 		"ПредставлениеУдержания", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("expirationDate", 	"ДатаОкончания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("calculationMethod", "СпособРасчета", Тип("ПеречислениеСсылка.СпособыРасчетаУдержанийКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("percentage", 		"Процент", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("amount", 			"Сумма", Тип("Число")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Возвращает описание объекта на основании описания объекта сервиса.
//
// 	Параметры:
// 		ОписаниеОбъекта - содержит описание полей объекта сервиса.
//
// Возвращаемое значение:
// 		Структура - свойства структуры ИмяПоляКонфигурации описания объекта.
//
Функция ОписаниеОбъекта(ОписаниеОбъекта) Экспорт

	ОписаниеПолей = Новый Массив;
	Для каждого ОписаниеПоля Из ОписаниеОбъекта Цикл
		ОписаниеПолей.Добавить(ОписаниеПоля["ИмяПоляКонфигурации"]); 
	КонецЦикла;
	
	Возврат Новый Структура(СтрСоединить(ОписаниеПолей,","));

КонецФункции

// Преобразование структуры ОписаниеОбъекта в структуру с именами полей сервиса.
//
// 	Параметры:
// 		ОписаниеОбъекта - Структура - имена свойств ИмяПоляКонфигурации описания объекта,
// 		ОписаниеОбъектаСервиса - Массив - содержит описание полей объекта сервиса.
//
// Возвращаемое значение:
// 		Структура - имена свойств ИмяПоляСервиса  описания объекта.
//
Функция ОбъектСервисаПоОписанию(ОписаниеОбъекта, ОписаниеОбъектаСервиса) Экспорт

	Результат = Новый Структура;
	Для каждого ОписаниеПоля Из ОписаниеОбъектаСервиса Цикл
		ЗначениеПоля = Неопределено;
		ОписаниеОбъекта.Свойство(ОписаниеПоля["ИмяПоляКонфигурации"], ЗначениеПоля);
		Если ЗначениеПоля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(ОписаниеПоля["ИмяПоляСервиса"], ЗначениеПоля);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПреобразованиеЗагруженныхОбъектовВТаблицуЗначений

Функция ТаблицаИзМассиваОбъектов(Объекты, ОписаниеПолей)
	
	Таблица = Новый ТаблицаЗначений;
	ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПолей);
	Для Каждого ОписаниеОбъекта Из Объекты Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьСтрокуТаблицыПоОписанию(НоваяСтрока, ОписаниеОбъекта, ОписаниеПолей);
	КонецЦикла;
	
	Возврат Таблица;

КонецФункции

Процедура ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПолей) Экспорт
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ОписаниеПоля["ТипПоля"]);
			Таблица.Колонки.Добавить(ОписаниеПоля["ИмяПоляКонфигурации"], Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыПоОписанию(СтрокаТаблицы, ОписаниеОбъекта, ОписаниеПолей)
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		ЗначениеПоляСервиса = ОписаниеОбъекта.Получить(ОписаниеПоля["ИмяПоляСервиса"]);
		Если ЗначениеПоляСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ЗаполнитьСтрокуТаблицыПоОписанию(СтрокаТаблицы, ОписаниеОбъекта, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			СтрокаТаблицы[ОписаниеПоля["ИмяПоляКонфигурации"]] = ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПоля)
	
	Значение = ЗначениеПоляСервиса;
	Если ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
		Значение = ТаблицаИзМассиваОбъектов(Значение, ОписаниеПоля["ОписаниеПолей"]);
	ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("Структура") Тогда
		Значение = СтруктураИзЗначенияПоляСервиса(Значение, ОписаниеПоля["ОписаниеПолей"]);
	Иначе
		ИмяПоля = ОписаниеПоля["ИмяПоляКонфигурации"];
		Если ИмяПоля = "ФизическоеЛицо" Или ИмяПоля = "Подписант" Тогда  
			Значение = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение))
		ИначеЕсли ИмяПоля = "Сотрудник" Тогда  
			Значение = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение))	
		ИначеЕсли ИмяПоля = "Организация" Тогда
			Значение = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение))
		ИначеЕсли ИмяПоля = "Назначение2НДФЛ" Тогда
			Значение = НазначениеСправкиНДФЛСервиса(Значение);
		ИначеЕсли ИмяПоля = "ВариантФормированияФайлаОтвета" Тогда
			Значение = ВариантФормированияФайлаОтветаСервиса(Значение);
		ИначеЕсли ИмяПоля = "РезультатСогласования" Тогда
			Значение = ЗначениеРезультатСогласования(Значение);
		ИначеЕсли ИмяПоля = "ПричинаОтсутствия" Тогда
			Значение = ПричинаОтсутствияСервиса(Значение);
		ИначеЕсли ИмяПоля = "СпособРасчетаУдержанияДСВ" Тогда
			Значение = СпособРасчетаУдержанияДСВ(Значение);
		ИначеЕсли ИмяПоля = "РольПодписанта" Тогда
			Значение = РольПодписантаСервиса(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция СтруктураИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПолей)

	ОписаниеОбъекта = Новый Структура;
	Для каждого ОписаниеПоля Из ОписаниеПолей Цикл
		
		ЗначениеПоля = ЗначениеПоляСервиса.Получить(ОписаниеПоля["ИмяПоляСервиса"]);
		Если ЗначениеПоля = Неопределено Тогда
			Значение = Неопределено;
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
			Значение = ТаблицаИзМассиваОбъектов(ЗначениеПоля, ОписаниеПоля["ОписаниеПолей"]);
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("Структура") Тогда
			Значение = СтруктураИзЗначенияПоляСервиса(ЗначениеПоля, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			Значение = ЗначениеИзЗначенияПоляСервиса(ЗначениеПоля, ОписаниеПоля);
		КонецЕсли;
		
		ОписаниеОбъекта.Вставить(ОписаниеПоля["ИмяПоляКонфигурации"], Значение);
	
	КонецЦикла;
	
	Возврат ОписаниеОбъекта;

КонецФункции

Функция НазначениеСправкиНДФЛСервиса(Назначение)
	
	Результат = Назначение;
	Если Назначение = "incomeProof" Тогда
		Результат = "ПодтверждениеДоходов";
	ИначеЕсли Назначение = "declare" Тогда
		Результат = "ДекларированиеДоходов";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ВариантФормированияФайлаОтветаСервиса(Вариант)
	
	ВариантыФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника;
	Результат = Неопределено;
	
	Если Вариант = "fileForPrinterOutput" Тогда
		Результат = ВариантыФормированияФайлаОтвета.ФайлДляВыводаНаПринтер;
	ИначеЕсли Вариант = "scanWithSignatureAndStamp" Тогда
		Результат = ВариантыФормированияФайлаОтвета.СканСПодписьюИПечатью;
	ИначеЕсли Вариант = "paperForm" Тогда
		Результат = ВариантыФормированияФайлаОтвета.ВБумажномВиде;
	ИначеЕсли Вариант = "fileWithElectronicSignature" Тогда
		Результат = ВариантыФормированияФайлаОтвета.ФайлСЭП;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеРезультатСогласования(ЗначениеПоля)

	Результат = ЗначениеПоля;
	Если ЗначениеПоля = "agreed" Тогда
		Результат = "Согласовано";
	ИначеЕсли ЗначениеПоля = "denied" Тогда
		Результат = "Отклонено";
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция СоответствиеЗначенийРольПодписанта()

	Описание = Новый Соответствие;
	Описание.Вставить("employee", 		"Сотрудник");
	Описание.Вставить("directManager", 	"Руководитель");
	Описание.Вставить("executor", 		"Исполнитель");
	Описание.Вставить("employer", 		"Организация");
	
	Возврат Описание;

КонецФункции

Функция РольПодписантаСервиса(ЗначениеПоля)

	СоответствиеЗначений = СоответствиеЗначенийРольПодписанта();
	Результат = СоответствиеЗначений[ЗначениеПоля];
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоля;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПричинаОтсутствияСервиса(ПричинаОтсутствия)
	
	Результат = ПричинаОтсутствия;
	Если ПричинаОтсутствия = "late" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание;
	ИначеЕсли ПричинаОтсутствия = "illness" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь;
	ИначеЕсли ПричинаОтсутствия = "vacation" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отпуск;
	ИначеЕсли ПричинаОтсутствия = "studyLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск;
	ИначеЕсли ПричинаОтсутствия = "unpaidLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускЗаСвойСчет;
	ИначеЕсли ПричинаОтсутствия = "maternityLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам;
	ИначеЕсли ПричинаОтсутствия = "parentalLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоУходуЗаРебенком;
	ИначеЕсли ПричинаОтсутствия = "timeOff" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отгул;
	ИначеЕсли ПричинаОтсутствия = "businessTrip" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Командировка;
	ИначеЕсли ПричинаОтсутствия = "personalReason" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела;
	ИначеЕсли ПричинаОтсутствия = "invalidChildCare" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ДниУходаЗаДетьмиИнвалидами;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СпособРасчетаУдержанияДСВ(СпособРасчета)

	Результат = СпособРасчета;
	Если СпособРасчета = "percentage" Тогда
		Результат = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.Процентом; 
	ИначеЕсли СпособРасчета = "fixedAmount" Тогда
		Результат = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.ФиксированнойСуммой;
	ИначеЕсли СпособРасчета = "percentageUpToAmount" Тогда
		Результат =  Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.ПроцентомНеБолееСуммы;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область КонструкторыСоответствияПолей

Функция ОписаниеПолейОрганизаций()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",		"Организация");
	СоответствиеПолей.Вставить("name",		"Наименование");
	СоответствиеПолей.Вставить("taxID",		"ИНН");
	СоответствиеПолей.Вставить("isBranch",	"ОбособленноеПодразделение");
	СоответствиеПолей.Вставить("parentOrganizationID", "ГоловнаяОрганизация");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейСтруктурыПредприятия()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"СтруктураПредприятия");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("code",				"Код");
	СоответствиеПолей.Вставить("parentDivisionID",	"Родитель");
	СоответствиеПолей.Вставить("headID",			"ФизическоеЛицоРуководителя");
	СоответствиеПолей.Вставить("priority",			"Порядок");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейДолжностей()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",		"Должность");
	СоответствиеПолей.Вставить("name",		"Наименование");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейШтатногоРасписания()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",			"ПозицияШтатногоРасписания");
	СоответствиеПолей.Вставить("name",			"Наименование");
	СоответствиеПолей.Вставить("employerID",	"Организация");
	СоответствиеПолей.Вставить("divisionID",	"МестоВСтруктуреПредприятия");
	СоответствиеПолей.Вставить("positionID",	"Должность");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейФизическихЛиц()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"ФизическоеЛицо");
	СоответствиеПолей.Вставить("lastName",			"Фамилия");
	СоответствиеПолей.Вставить("firstName",			"Имя");
	СоответствиеПолей.Вставить("patronymic",		"Отчество");
	СоответствиеПолей.Вставить("initials",			"Инициалы");
	СоответствиеПолей.Вставить("gender",			"Пол");
	СоответствиеПолей.Вставить("birthDate",			"ДатаРождения");
	СоответствиеПолей.Вставить("taxID",				"ИНН");
	СоответствиеПолей.Вставить("insuranceNumber",	"СтраховойНомерПФР");
	СоответствиеПолей.Вставить("birthPlace",		"МестоРождения");
	СоответствиеПолей.Вставить("phoneNumber",		"ТелефонРабочийПредставление");
	СоответствиеПолей.Вставить("mobilePhoneNumber",	"ТелефонМобильныйПредставление");
	СоответствиеПолей.Вставить("eMail",				"EMailПредставление");
	СоответствиеПолей.Вставить("identityDocument",	ОписаниеПолейДокументВид());
	СоответствиеПолей.Вставить("registrationAddress", "АдресПоПропискеПредставление");
	СоответствиеПолей.Вставить("residentialAddress", "АдресМестаПроживанияПредставление");
	
	Возврат СоответствиеПолей;

КонецФункции

Функция ОписаниеПолейДокументВид()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("identityDocumentType",	"ДокументВид");
	СоответствиеПолей.Вставить("serias",				"ДокументСерия");
	СоответствиеПолей.Вставить("number",				"ДокументНомер");
	СоответствиеПолей.Вставить("issueDate",				"ДокументДатаВыдачи");
	СоответствиеПолей.Вставить("issuingAuthority",		"ДокументКемВыдан");
	СоответствиеПолей.Вставить("issuingAuthorityID",	"ДокументКодПодразделения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейСотрудников()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",					"Сотрудник");
	СоответствиеПолей.Вставить("personID",				"ФизическоеЛицо");
	СоответствиеПолей.Вставить("employmentDate",		"ДатаПриема");
	СоответствиеПолей.Вставить("staffListPositionID",	"ДолжностьПоШтатномуРасписанию");
	СоответствиеПолей.Вставить("employerID",			"Организация");
	СоответствиеПолей.Вставить("divisionID",			"МестоВСтруктуреПредприятия");
	СоответствиеПолей.Вставить("positionID",			"Должность");
	СоответствиеПолей.Вставить("transferDate",			"РабочееМестоПериодРегистрации");
	СоответствиеПолей.Вставить("employmentType",		"ВидЗанятости");
	СоответствиеПолей.Вставить("wageRate",				ОписаниеПолейТарифнойСтавки());
	СоответствиеПолей.Вставить("workScheduleID", 		"ГрафикРаботы");
	СоответствиеПолей.Вставить("dismissed", 			"Уволен");
	СоответствиеПолей.Вставить("hidden", 				"СкрыватьВСписках");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейТарифнойСтавки()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("value",			"ТарифнаяСтавка");
	СоответствиеПолей.Вставить("presentation",	"ПоказательТарифнойСтавки");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейВложения()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("name",		"НаименованиеВложения");
	СоответствиеПолей.Вставить("extension",	"РасширениеВложения");
	СоответствиеПолей.Вставить("fileID",	"ИдентификаторВложения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейПрименяемыеНалоговыеВычеты()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("employerID", "Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("personID", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("deductions", "ИнформацияОВычетах", Тип("ТаблицаЗначений"), ОписаниеПолейИнформацияОПримененииВычета()));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейИнформацияОПримененииВычета()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("startDate", "ДатаНачала", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("endDate", "ДатаОкончания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("amount", "РазмерВычета", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "ОписаниеВычета", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейВычетаНаДетей()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("childSeniority", "СтаршинствоРебенка", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("childDisability", "РебенокИнвалид", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("singleParent", "РодительОдиночка", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("guardian", "ЗаявительОпекун", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("endDate", "ДатаОкончания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейУведомленияИзНалоговой()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("amount", "Размер", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("attachment", "Вложение", Неопределено, ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейЗагружаемыйФайл()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("name", "НаименованиеФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("extension", "РасширениеФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("size", "РазмерФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("ID", "ИдентификаторФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("hesh", "ХешСумма", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция НовоеОписаниеПоля(ИмяПоляСервиса, ИмяПоляКонфигурации, ТипПоля, ОписаниеПолей = Неопределено, ОбязательноеПоле = Ложь) Экспорт
	
	ОписаниеПоля = Новый Соответствие;
	ОписаниеПоля.Вставить("ИмяПоляСервиса", ИмяПоляСервиса);
	ОписаниеПоля.Вставить("ИмяПоляКонфигурации", ИмяПоляКонфигурации);
	ОписаниеПоля.Вставить("ТипПоля", ТипПоля);
	ОписаниеПоля.Вставить("ОписаниеПолей", ОписаниеПолей);
	ОписаниеПоля.Вставить("ОбязательноеПоле", ОбязательноеПоле);
	Возврат ОписаниеПоля;
	
КонецФункции

#КонецОбласти

#Область ФункцииПреобразованияПеречисленийВЗначенияСервиса

Функция ПолФизическогоЛица(Пол)
	
	Результат = Неопределено;
	
	Если Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской") Тогда
		Результат = "male";
	ИначеЕсли Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский") Тогда
		Результат = "female";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидЗанятостиСотрудника(ВидЗанятости)
	
	Результат = Неопределено;
	
	Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		Результат = "mainWork";
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
		Результат = "extraWorkExternal";
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
		Результат = "extraWorkInternal";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидДокументаФизическогоЛица(ВидДокумента)
	
	Результат = "other";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		КодМВД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "КодМВД");
		Если КодМВД = "21" Тогда
			Результат = "passport";
		ИначеЕсли КодМВД = "10" Тогда
			Результат = "foreignPassport";
		ИначеЕсли КодМВД = "12" Тогда
			Результат = "residenceCard";
		ИначеЕсли КодМВД = "14" Тогда
			Результат = "identityCard";
		ИначеЕсли КодМВД = "04" Тогда
			Результат = "militaryIdentityCard";
		ИначеЕсли КодМВД = "15" Тогда
			Результат = "residencePermission";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СпособРасчетаУдержания(СпособРасчета)

	Результат = Неопределено;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.Процентом Тогда
		Результат = "percentage";
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.ФиксированнойСуммой Тогда
		Результат = "fixedAmount";
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.ПроцентомНеБолееСуммы Тогда
		Результат = "percentageUpToAmount";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИБ

#Область ФункцииПолученияДанных

Функция ДанныеФизическихЛиц(ПараметрыПодключения, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейФизическихЛиц();
	ВыбираемыеПоля = ВыбираемыеПоля(СоответствиеПолей);
	
	ВыбираемыеПоля.Удалить(ВыбираемыеПоля.Найти("ТелефонМобильныйПредставление"));
	ВыбираемыеПоля.Удалить(ВыбираемыеПоля.Найти("EMailПредставление"));
	
	КадровыеДанные = СтрСоединить(ВыбираемыеПоля, ", ");
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, МассивОтбора, КадровыеДанные, ТекущаяДатаСеанса());
	
	КонтактнаяИнформация = КонтактнаяИнформацияФизическихЛиц(МассивОтбора);
	
	ТаблицаДанных.Колонки.Добавить("ТелефонМобильныйПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("EMailПредставление", Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		СтрокаТЗ.ТелефонМобильныйПредставление = КонтактнаяИнформация.МобильныеТелефоны[СтрокаТЗ.ФизическоеЛицо];
		СтрокаТЗ.EMailПредставление = КонтактнаяИнформация.АдресаПочты[СтрокаТЗ.ФизическоеЛицо];
		
		СтрокаТЗ.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(СтрокаТЗ.МестоРождения);
		Если ЗначениеЗаполнено(СтрокаТЗ.ТелефонРабочийПредставление) И СтрДлина(СтрокаТЗ.ТелефонРабочийПредставление) > 40 Тогда
			СтрокаТЗ.ТелефонРабочийПредставление = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЗ.ТелефонМобильныйПредставление) И СтрДлина(СтрокаТЗ.ТелефонМобильныйПредставление) > 20 Тогда
			СтрокаТЗ.ТелефонМобильныйПредставление = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Вложения = КабинетСотрудникаВнутренний.ФотографииФизическихЛиц(ТаблицаДанных.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаДанных", ТаблицаДанных);
	Результат.Вставить("Вложения", 		Вложения);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДолжностей(ПараметрыПодключения, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейДолжностей();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтбора", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.Ссылка В(&СписокОтбора)";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);

КонецФункции

Функция ДанныеОрганизаций(ПараметрыПодключения, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейОрганизаций();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтбора", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОтбора)";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
КонецФункции

Функция ДанныеСтруктурыПредприятия(ПараметрыПодключения, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейСтруктурыПредприятия();
	ТаблицаДанных = КабинетСотрудникаВнутренний.ДанныеСтруктурыПредприятия(МассивОтбора);
	
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
КонецФункции

Функция ДанныеСтруктурыЮридическихЛиц(ПараметрыПодключения, Организации, ПодразделенияОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Подразделения", ПодразделенияОрганизаций);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	""0000"" КАК Код,
	|	Организации.Наименование КАК Наименование,
	|	НЕОПРЕДЕЛЕНО КАК РодительПодразделения,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицоРуководителя,
	|	"""" КАК Порядок,
	|	Организации.Ссылка КАК Организация,
	|	ИСТИНА КАК ЭтоОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подразделения.Ссылка,
	|	Подразделения.Код,
	|	Подразделения.Наименование,
	|	Подразделения.Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	Подразделения.РеквизитДопУпорядочиванияИерархического,
	|	Подразделения.Владелец,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Ссылка В(&Подразделения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыОрганизаций.Организация КАК Организация,
	|	ИдентификаторыОрганизаций.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника КАК ИдентификаторыОрганизаций";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаСтруктурыПредприятия = РезультатЗапроса[0].Выгрузить();
	Если Не ЗначениеЗаполнено(ТаблицаСтруктурыПредприятия) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТаблицаСтруктурыПредприятия.Колонки.Добавить("СтруктураПредприятия");
	ТаблицаСтруктурыПредприятия.Колонки.Добавить("Родитель");
	
	ИдентификаторыОрганизаций = Новый Соответствие;
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыОрганизаций.Вставить(Выборка.Организация, Выборка.Идентификатор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО (ФизическиеЛица.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|				И НЕ ОшибкиЗаполнения.ЕстьОшибки)
	|ГДЕ
	|	ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	ОрганизацииРуководители = Новый Соответствие;
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтруктурыПредприятия, "Организация", Истина);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ОтветственныеЛица = ПодписиДокументов.ОтветственныеЛицаОрганизации(Организация, "Руководитель", ТекущаяДатаСеанса());
		Если ПубликуемыеФизическиеЛица[ОтветственныеЛица.Руководитель] <> Неопределено Тогда
			ОрганизацииРуководители.Вставить(Организация, ОтветственныеЛица.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	ПодразделенияРуководители = КабинетСотрудникаВнутренний.РуководителиПодразделенийОрганизаций(ПодразделенияОрганизаций);
	
	ПорядокОрганизаций = ПорядокОрганизаций();
	Для Каждого СтрокаТЗ Из ТаблицаСтруктурыПредприятия Цикл
		
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТЗ.Организация];
		ПорядокПодразделения = СтрокаТЗ.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТЗ.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		
		СтрокаТЗ.Родитель = СтрокаТЗ.РодительПодразделения;
		СтрокаТЗ.СтруктураПредприятия = СтрокаТЗ.Ссылка;
		
		СтрокаТЗ.ФизическоеЛицоРуководителя = ПодразделенияРуководители[СтрокаТЗ.Ссылка];
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ФизическоеЛицоРуководителя) Или ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицоРуководителя] = Неопределено Тогда
			СтрокаТЗ.ФизическоеЛицоРуководителя = ОрганизацииРуководители[СтрокаТЗ.Организация];
		КонецЕсли;
		
		Если СтрокаТЗ.ЭтоОрганизация Или Не ЗначениеЗаполнено(СтрокаТЗ.Родитель) Тогда
			ИдентификаторОрганизации = ИдентификаторыОрганизаций[СтрокаТЗ.Организация];
			Если ИдентификаторОрганизации = Неопределено Тогда
				ИдентификаторОрганизации = Строка(Новый УникальныйИдентификатор);
				СтрокаЗаписи = РегистрыСведений.ИдентификаторыОрганизацийКабинетСотрудника.СоздатьМенеджерЗаписи();
				СтрокаЗаписи.Организация = СтрокаТЗ.Организация;
				СтрокаЗаписи.Идентификатор = ИдентификаторОрганизации;
				СтрокаЗаписи.Записать();
				ИдентификаторыОрганизаций.Вставить(СтрокаТЗ.Организация, ИдентификаторОрганизации);
			КонецЕсли;
			Если СтрокаТЗ.ЭтоОрганизация Тогда
				СтрокаТЗ.СтруктураПредприятия = ИдентификаторОрганизации;
			Иначе
				СтрокаТЗ.Родитель = ИдентификаторОрганизации;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеПолей = ОписаниеПолейСтруктурыПредприятия();
	
	Возврат ТаблицаДанныхВМассив(ТаблицаСтруктурыПредприятия, СоответствиеПолей);
	
КонецФункции

Функция ДанныеШтатногоРасписания(ПараметрыПодключения, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейШтатногоРасписания();
	ТаблицаДанных = КабинетСотрудникаВнутренний.ДанныеШтатногоРасписания(МассивОтбора);
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.МестоВСтруктуреПредприятия) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);

КонецФункции

Функция ДанныеСотрудников(ПараметрыПодключения, МассивОтбора)
	
	ДанныеСотрудников = КабинетСотрудникаВнутренний.ДанныеСотрудниковДляПубликации(ПараметрыПодключения, МассивОтбора);
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСотрудников, "ДолжностьПоШтатномуРасписанию", Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПубликации.ОбъектПравила КАК ОбъектПравила
	|ИЗ
	|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|ГДЕ
	|	ПравилаПубликации.ОбъектПравила В(&Позиции)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ПубликуемыеПозиции = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеПозиции.Вставить(Выборка.ОбъектПравила, Истина);
	КонецЦикла;
	
	СоответствиеПолей = ОписаниеПолейСотрудников();
	ВыбираемыеПоля = ВыбираемыеПоля(СоответствиеПолей);
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ИмяПоля Из ВыбираемыеПоля Цикл
		ТаблицаДанных.Колонки.Добавить(ИмяПоля);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ДанныеСотрудников Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Организация) Или Не ЗначениеЗаполнено(СтрокаТЗ.МестоВСтруктуреПредприятия) Тогда
			Продолжить;
		КонецЕсли;
		ИсключаяСвойства = "";
		Уволен = Ложь;
		Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			ИсключаяСвойства = "ТарифнаяСтавка,ПоказательТарифнойСтавки";
			Уволен = Истина;
		КонецЕсли;
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,, ИсключаяСвойства);
		НоваяСтрока.Уволен = Уволен;
		НоваяСтрока.СкрыватьВСписках = ?(ПубликуемыеПозиции[СтрокаТЗ.ДолжностьПоШтатномуРасписанию] = Неопределено, Истина, Ложь);
	КонецЦикла;
	
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
КонецФункции

Функция ДанныеОВычетах(ПараметрыПодключения, МассивОтбора)
	
	ОписаниеПолей = ОписаниеПолейПрименяемыеНалоговыеВычеты();
	ТаблицаДанных = ПрименяемыеВычеты(МассивОтбора, ТекущаяДатаСеанса());
	
	ФизическиеЛицаСВычетами  = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "ФизическоеЛицо", Истина);
	
	Результат = Новый Структура("Данные,ФизическиеЛицаБезВычетов");
	Результат.Данные = МассивИзТаблицы(ТаблицаДанных, ОписаниеПолей);
	Результат.ФизическиеЛицаБезВычетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОтбора, ФизическиеЛицаСВычетами);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеРасчетныхЛистов(Организация, МесяцРасчетныхЛистов, СписокФизическихЛиц, ПовторнаяПубликация)
	
	Данные = ДанныеРасчетныхЛистовДляПубликации(Организация, МесяцРасчетныхЛистов, СписокФизическихЛиц);
	Если Не ЗначениеЗаполнено(Данные.ДанныеРасчетныхЛистков) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРасчетныхЛистов = Данные.ДанныеРасчетныхЛистков.ДанныеРасчетныхЛистков;
	РасчетныеЛистыДокументы = Данные.ДанныеРасчетныхЛистков.РасчетныеЛистыДокументы;
	
	ВидыМестВыплатыРегистраторов = ВидыМестВыплатыРегистраторов(ДанныеРасчетныхЛистов);
	
	ПерваяПоловинаМесяца = Ложь;
	ДанныеРасчетныхЛистов.Колонки.Добавить("ID",						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("section",					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("specificSalaryComponent",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("accrualType",				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("priority",					Новый ОписаниеТипов("Число"));
	ДанныеРасчетныхЛистов.Колонки.Добавить("name",						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("amount",					Новый ОписаниеТипов("Число"));
	ДанныеРасчетныхЛистов.Колонки.Добавить("workplace",					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	Идентификаторы = ИдентификаторыСоставнойЧастиЗарплаты();
	НачисленияТарифнойСтавки = РасчетЗарплаты.НачисленияТарифнойСтавки();
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеРасчетныхЛистов Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидРасчета) И Не ЗначениеЗаполнено(СтрокаДанных.Группа) Тогда
			СтрокиКУдалению.Добавить(СтрокаДанных);
			Продолжить;
		КонецЕсли;
		ОбработатьСтрокуДанных(СтрокаДанных, НачисленияТарифнойСтавки, ВидыМестВыплатыРегистраторов);
	КонецЦикла;
	
	Для каждого СтрокаДанных Из СтрокиКУдалению Цикл
		ДанныеРасчетныхЛистов.Удалить(СтрокаДанных);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеРасчетныхЛистов", ДанныеРасчетныхЛистов);
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеРасчетныхЛистов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеРасчетныхЛистов.Сотрудник КАК Сотрудник,
	|	ДанныеРасчетныхЛистов.amount КАК amount,
	|	ДанныеРасчетныхЛистов.workplace КАК workplace,
	|	ДанныеРасчетныхЛистов.priority КАК priority,
	|	ДанныеРасчетныхЛистов.accrualType КАК accrualType,
	|	ДанныеРасчетныхЛистов.section КАК section,
	|	ДанныеРасчетныхЛистов.specificSalaryComponent КАК specificSalaryComponent,
	|	ДанныеРасчетныхЛистов.name КАК name,
	|	ДанныеРасчетныхЛистов.ID КАК ID
	|ПОМЕСТИТЬ ВТДанныеСИдентификаторами
	|ИЗ
	|	&ДанныеРасчетныхЛистов КАК ДанныеРасчетныхЛистов
	|ГДЕ
	|	НЕ ДанныеРасчетныхЛистов.ID = """"
	|	И НЕ ДанныеРасчетныхЛистов.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ДанныеРасчетныхЛистов.amount = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСИдентификаторами.ID КАК ID,
	|	ВТДанныеСИдентификаторами.name КАК name,
	|	ВТДанныеСИдентификаторами.section КАК section,
	|	ВТДанныеСИдентификаторами.specificSalaryComponent КАК specificSalaryComponent,
	|	ВТДанныеСИдентификаторами.accrualType КАК accrualType,
	|	МИНИМУМ(ВТДанныеСИдентификаторами.priority) КАК priority
	|ИЗ
	|	ВТДанныеСИдентификаторами КАК ВТДанныеСИдентификаторами
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеСИдентификаторами.ID,
	|	ВТДанныеСИдентификаторами.name,
	|	ВТДанныеСИдентификаторами.section,
	|	ВТДанныеСИдентификаторами.specificSalaryComponent,
	|	ВТДанныеСИдентификаторами.accrualType
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСИдентификаторами.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТДанныеСИдентификаторами.Сотрудник КАК Сотрудник,
	|	ВТДанныеСИдентификаторами.ID КАК ID,
	|	ВТДанныеСИдентификаторами.amount КАК amount,
	|	ВТДанныеСИдентификаторами.workplace КАК workplace
	|ИЗ
	|	ВТДанныеСИдентификаторами КАК ВТДанныеСИдентификаторами
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СоставныеЧастиЗарплаты = Новый Массив;
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СоставнаяЧастьЗарплаты = Новый Структура;
		Для Каждого КолонкаРезультатаЗапроса Из РезультатЗапроса[1].Колонки Цикл
			Если ЗначениеЗаполнено(Выборка[КолонкаРезультатаЗапроса.Имя]) Тогда
				СоставнаяЧастьЗарплаты.Вставить(КолонкаРезультатаЗапроса.Имя, Выборка[КолонкаРезультатаЗапроса.Имя]);
			КонецЕсли;
		КонецЦикла;
		СоставныеЧастиЗарплаты.Добавить(СоставнаяЧастьЗарплаты);
	КонецЦикла;
	
	ИнформацияОЗарплате = Новый Массив;
	ДанныеЛистков = РезультатЗапроса[2].Выгрузить();
	ДанныеЛистков.Индексы.Добавить("ФизическоеЛицо");
	Отбор = Новый Структура("ФизическоеЛицо");
	Для каждого ЭлементКоллекции Из РасчетныеЛистыДокументы Цикл
		
		Отбор.ФизическоеЛицо = ЭлементКоллекции.Ключ;
		
		НайденныеСтроки = ДанныеЛистков.НайтиСтроки(Отбор);
		Компоненты = Новый Массив;
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			СтруктураКомпонента = Новый Структура;
			СтруктураКомпонента.Вставить("employerID", Организация);
			СтруктураКомпонента.Вставить("employeeID", СтрокаТЗ.Сотрудник);
			СтруктураКомпонента.Вставить("componentID", СтрокаТЗ.ID);
			СтруктураКомпонента.Вставить("amount", СтрокаТЗ.amount);
			СтруктураКомпонента.Вставить("workplace", СтрокаТЗ.workplace);
			Компоненты.Добавить(СтруктураКомпонента);
		КонецЦикла;
		
		Если Компоненты.Количество() = 0 И Не ПовторнаяПубликация Тогда
			// нет данных и это не повторная публикация
			Продолжить;
		КонецЕсли;
		
		ОбъектИнформацияОЗарплате = ОписаниеИнформацияОЗарплате();
		ОбъектИнформацияОЗарплате.personID 		= Отбор.ФизическоеЛицо;
		ОбъектИнформацияОЗарплате.month 		= МесяцРасчетныхЛистов;
		ОбъектИнформацияОЗарплате.isFirstHalf 	= ПерваяПоловинаМесяца;
		ОбъектИнформацияОЗарплате.components 	= Компоненты;
		ИнформацияОЗарплате.Добавить(ОбъектИнформацияОЗарплате);
	
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("СоставныеЧастиЗарплаты", СоставныеЧастиЗарплаты);
	Результат.Вставить("ИнформацияОЗарплате", ИнформацияОЗарплате);
	Результат.Вставить("РасчетныеЛистыДокументы", РасчетныеЛистыДокументы);
	Возврат Результат;
	
КонецФункции

Функция РасчетныеЛистыДокументы(ДокументРезультат)
	
	Результат = Новый Соответствие;
	
	Для Каждого Область Из ДокументРезультат.Области Цикл
		
		Если Не СтрНачинаетсяС(Область.Имя, "payslip_") Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = Сред(Область.Имя, СтрНайти(Область.Имя, "_", , , 3) + 1);
		Идентификатор = Лев(Идентификатор, СтрНайти(Идентификатор, "_") - 1);
		
		ИдентификаторФизлица = Новый УникальныйИдентификатор(
			Лев(Идентификатор, 8)
			+ "-"
			+ Сред(Идентификатор, 9, 4)
			+ "-"
			+ Сред(Идентификатор, 13, 4)
			+ "-"
			+ Сред(Идентификатор, 17, 4)
			+ "-"
			+ Прав(Идентификатор, 12));
		
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(ИдентификаторФизлица);
		Если Не ФизическоеЛицо.Пустая() Тогда
			РасчетныйЛист = ДокументРезультат.ПолучитьОбласть(Область.Имя);
			ЗаполнитьЗначенияСвойств(РасчетныйЛист, ДокументРезультат, "АвтоМасштаб,ПолеСверху,ПолеСнизу,ПолеСлева,ПолеСправа,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу");
			Результат.Вставить(ФизическоеЛицо, РасчетныйЛист);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторЗначенияПеречисления(Знач Значение)
	
	Если Не Метаданные.Перечисления.Содержит(Значение.Метаданные()) Тогда
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение НСтр("ru = 'Значение не является значением перечисления.'");
	КонецЕсли;
	
	Значение = ЗначениеВСтрокуВнутр(Значение);
	Значение = Сред(Значение, СтрНайти(Значение, ":") + 1, 32);
	Значение =
		Лев(Значение, 8)+ "-"
		+ Сред(Значение, 9, 4) + "-"
		+ Сред(Значение, 13, 4) + "-"
		+ Сред(Значение, 17, 4) + "-"
		+ Прав(Значение, 12);
	
	Возврат Значение;
	
КонецФункции

Процедура ОбработатьСтрокуДанных(СтрокаДанных, НачисленияТарифнойСтавки, ВидыМестВыплатыРегистраторов)
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.ВидРасчета) Тогда
		СтрокаДанных.ID = ИдентификаторЗначенияПеречисления(СтрокаДанных.Группа);
		СтрокаДанных.ПриоритетВидаРасчета = 0;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(СтрокаДанных.ВидРасчета.Метаданные()) Тогда
		СтрокаДанных.ID = Строка(СтрокаДанных.ВидРасчета.УникальныйИдентификатор());
		СтрокаДанных.ПриоритетВидаРасчета = СтрокаДанных.ВидРасчета.РеквизитДопУпорядочивания;
	ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(СтрокаДанных.ВидРасчета.Метаданные()) Тогда
		СтрокаДанных.ID = ИдентификаторЗначенияПеречисления(СтрокаДанных.ВидРасчета);
		СтрокаДанных.ПриоритетВидаРасчета = 99;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.ВидРасчета) Тогда
		СтрокаДанных.name = Строка(СтрокаДанных.Группа);
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидРасчетаКраткоеНаименование) Тогда
		СтрокаДанных.name = СтрокаДанных.ВидРасчетаКраткоеНаименование;
	Иначе
		СтрокаДанных.name = Строка(СтрокаДанных.ВидРасчета);
	КонецЕсли;
	
	Если СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо") Тогда
		СтрокаДанных.section = "incomingBalance";
		Если СтрокаДанных.Сумма < 0 Тогда
			СтрокаДанных.specificSalaryComponent = "incomingEmployerDebt";
			СтрокаДанных.name = НСтр("ru = 'Долг сотрудника на начало'");
			СтрокаДанных.ID = "2f576597-ec81-482e-a504-202004ac75c4";
		Иначе
			СтрокаДанных.specificSalaryComponent = "incomingEmployeeDebt";
			СтрокаДанных.name = НСтр("ru = 'Долг предприятия на начало'");
			СтрокаДанных.ID = "a51bf7db-9fd5-451e-a3e4-7c4613b0a11b";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено") Тогда
		СтрокаДанных.section = "accruals";
		СтрокаДанных.accrualType = ТипНачисления(НачисленияТарифнойСтавки, СтрокаДанных.Группа, СтрокаДанных.ВидРасчета);
		СтрокаДанных.specificSalaryComponent = "";
		Если СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа")
			Или СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги") Тогда
			СтрокаДанных.specificSalaryComponent = "civilContractAcrual";
		ИначеЕсли СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты") Тогда
			СтрокаДанных.specificSalaryComponent = "salaryDelayCompensation";
		ИначеЕсли СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности")
			Или СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка")
			Или СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение")
			Или СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику") Тогда
			СтрокаДанных.specificSalaryComponent = "allowance";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано") Тогда
		СтрокаДанных.section = "deductions";
		Если СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму") Тогда
			СтрокаДанных.specificSalaryComponent = "loanInterestRepayment";
		ИначеЕсли СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты") Тогда
			СтрокаДанных.specificSalaryComponent = "loanRepayment";
		ИначеЕсли СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ") Тогда
			СтрокаДанных.specificSalaryComponent = "tax";
		Иначе
			СтрокаДанных.specificSalaryComponent = "";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено") Тогда
		СтрокаДанных.section = "payouts";
		СтрокаДанных.specificSalaryComponent = "";
		Если ВидыМестВыплатыРегистраторов[СтрокаДанных.РегистраторВыплаты] = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
			СтрокаДанных.specificSalaryComponent = "bankPayment";
			СтрокаДанных.name = НСтр("ru = 'Выплата на карту'");
			СтрокаДанных.ID = "dd587525-ff57-4ebc-9ef7-5c0f9d515d08";
		ИначеЕсли ВидыМестВыплатыРегистраторов[СтрокаДанных.РегистраторВыплаты] = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
			СтрокаДанных.specificSalaryComponent = "bankPayment";
			СтрокаДанных.name = НСтр("ru = 'Выплата на счет'");
			СтрокаДанных.ID = "669dbc3b-fcab-11ea-8106-4cedfb95099a";	
		Иначе
			СтрокаДанных.specificSalaryComponent = "cashPayment";
			СтрокаДанных.name = НСтр("ru = 'Выплата наличными'");
			СтрокаДанных.ID = "2a1c604e-8c6a-4b6c-a8d9-e984984f1c57";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо") Тогда
		СтрокаДанных.section = "outgoingBalance";
		Если СтрокаДанных.Сумма < 0 Тогда
			СтрокаДанных.specificSalaryComponent = "outgoingEmployerDebt";
			СтрокаДанных.name = НСтр("ru = 'Долг сотрудника на конец'");
			СтрокаДанных.ID = "a110f6ae-17cf-4f8a-8545-6c86f3d45ac6";
		Иначе
			СтрокаДанных.specificSalaryComponent = "outgoingEmployeeDebt";
			СтрокаДанных.name = НСтр("ru = 'Долг предприятия на конец'");
			СтрокаДанных.ID = "375922cb-9d6a-4614-be5b-46e2cd2e1f12";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно") Тогда
		СтрокаДанных.section = "additionalInfo";
		СтрокаДанных.specificSalaryComponent = "";
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы") Тогда
		СтрокаДанных.section = "benefits";
		СтрокаДанных.specificSalaryComponent = "";
	Иначе
		
		ИдентификаторНеизвестногоЗначения = "";
		Если Метаданные.Перечисления.Содержит(СтрокаДанных.Группа.Метаданные()) Тогда
			ИдентификаторНеизвестногоЗначения = ИдентификаторЗначенияПеречисления(СтрокаДанных.Группа);
		КонецЕсли;
		
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Данные расчетных листов содержат неизвестное значение группы начисления удержания выплаты.
											|Неизвестное значение: %1
											|Тип значения: %2
											|Идентификатор: %3'"), СтрокаДанных.Группа, ТипЗнч(СтрокаДанных.Группа), ИдентификаторНеизвестногоЗначения);
		
	КонецЕсли;
	СтрокаДанных.priority =
		(Перечисления.ГруппыНачисленияУдержанияВыплаты.Индекс(СтрокаДанных.Группа) + 1 )* 10000000
		+ ?(СтрокаДанных.ПриоритетВидаРасчета = Неопределено, 0, Число(СтрокаДанных.ПриоритетВидаРасчета));
	СтрокаДанных.amount = ?(СтрокаДанных.Сумма = Неопределено, 0, Число(СтрокаДанных.Сумма));
	СтрокаДанных.workplace = СтрокаДанных.ПредставлениеРабочегоМеста;
	
КонецПроцедуры

Функция ИдентификаторыСоставнойЧастиЗарплаты()
	
	Идентификаторы = Новый ТаблицаЗначений;
	Идентификаторы.Колонки.Добавить("section",					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Идентификаторы.Колонки.Добавить("specificSalaryComponent",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Идентификаторы.Колонки.Добавить("accrualType",				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Идентификаторы.Колонки.Добавить("ID",						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "incomingBalance";
	НоваяСтрока.specificSalaryComponent = "incomingEmployerDebt";
	НоваяСтрока.ID = "2f576597-ec81-482e-a504-202004ac75c4";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "incomingBalance";
	НоваяСтрока.specificSalaryComponent = "incomingEmployeeDebt";
	НоваяСтрока.ID = "a51bf7db-9fd5-451e-a3e4-7c4613b0a11b";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.accrualType = "permanent";
	НоваяСтрока.ID = "192e35e6-5299-46a2-b0ab-af177d5521be";

	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.accrualType = "variable";
	НоваяСтрока.ID = "65f38e09-fb7c-4612-9326-9cd96e517333";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "civilContractAcrual";
	НоваяСтрока.ID = "28005886-0042-442a-94b5-5155eac0a3dd";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "salaryDelayCompensation";
	НоваяСтрока.ID = "057ca56e-0a6f-4708-96cb-772af62f1242";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "allowance";
	НоваяСтрока.ID = "91c006f8-0baa-4608-a449-4b56a95446bc";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "deductions";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.ID = "7787f7d9-826a-4dca-9e54-59185c73a1c6";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "deductions";
	НоваяСтрока.specificSalaryComponent = "loanInterestRepayment";
	НоваяСтрока.ID = "24d582cb-d3c2-4892-8187-30c32122a93c";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "deductions";
	НоваяСтрока.specificSalaryComponent = "loanRepayment";
	НоваяСтрока.ID = "28faac1b-0651-4953-bff9-d84ea990e333";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "deductions";
	НоваяСтрока.specificSalaryComponent = "tax";
	НоваяСтрока.ID = "52832021-8803-45a7-8212-804c51d7745e";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "payouts";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.ID = "7a8c743a-abb2-4ea5-bc3c-dd323c37530d";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "outgoingBalance";
	НоваяСтрока.specificSalaryComponent = "outgoingEmployerDebt";
	НоваяСтрока.ID = "a110f6ae-17cf-4f8a-8545-6c86f3d45ac6";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "outgoingBalance";
	НоваяСтрока.specificSalaryComponent = "outgoingEmployeeDebt";
	НоваяСтрока.ID = "375922cb-9d6a-4614-be5b-46e2cd2e1f12";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "additionalInfo";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.ID = "30efdd89-0845-42ec-b88b-fd0db9e44efc";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "benefits";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.ID = "2001554d-6c89-4a3c-b905-4d31914d2b16";
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ТипНачисления(НачисленияТарифнойСтавки, Группа, Начисление)
	
	Результат = "";
	Если Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено") Тогда
		Результат = ?(НачисленияТарифнойСтавки.Найти(Начисление) = Неопределено, "variable", "permanent");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ПрименяемыеВычеты(СписокФизическихЛиц, ДатаАктуальности)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерВычетовНДФЛСрезПоследних.КодВычета КАК КодВычета,
	|	РазмерВычетовНДФЛСрезПоследних.Размер КАК Размер
	|ИЗ
	|	РегистрСведений.РазмерВычетовНДФЛ.СрезПоследних(&ДатаАктуальности, ) КАК РазмерВычетовНДФЛСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	РазмерыВычетов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыВычетов.Вставить(Выборка.КодВычета, Выборка.Размер);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ДатаАктуальности));
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТРегистраторыИмущественныхВычетов
	|ИЗ
	|	Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.Проведен
	|	И ИмущественныеВычетыНДФЛ.ПрименятьВычетыС МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ИмущественныеВычетыНДФЛ.Сотрудник В(&СписокФизическихЛиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПоследнийМесяцВычетовНаДетей
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо >= &ДатаНачала
	|	И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцРегистрации,
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(СтандартныеВычетыФизическихЛицНДФЛ.Период) КАК Период,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПоследнийМесяцВычетов
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.Организация КАК Организация,
	|	ИмущественныеВычетыНДФЛ.Сотрудник КАК ФизическоеЛицо,
	|	ИмущественныеВычетыНДФЛ.ПрименятьВычетыС КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ИмущественныеВычетыНДФЛ.ПрименятьВычетыС, ГОД) КАК ДатаОкончания,
	|	ИмущественныеВычетыНДФЛ.РасходыНаСтроительствоПриобретение КАК РасходыНаСтроительствоПриобретение,
	|	ИмущественныеВычетыНДФЛ.ПроцентыПоКредитам КАК ПроцентыПоКредитам,
	|	ИмущественныеВычетыНДФЛ.ПроцентыПриПерекредитовании КАК ПроцентыПриПерекредитовании,
	|	ИмущественныеВычетыНДФЛ.РасходыНаСвоеОбучение КАК РасходыНаСвоеОбучение,
	|	ИмущественныеВычетыНДФЛ.РасходыНаОбучениеДетей КАК РасходыНаОбучениеДетей,
	|	ИмущественныеВычетыНДФЛ.РасходыНаЛечение КАК РасходыНаЛечение,
	|	ИмущественныеВычетыНДФЛ.СтраховыеВзносыНаМедУслуги КАК СтраховыеВзносыНаМедУслуги,
	|	ИмущественныеВычетыНДФЛ.РасходыНаДорогостоящееЛечение КАК РасходыНаДорогостоящееЛечение,
	|	ИмущественныеВычетыНДФЛ.ВзносыНаДобровольноеСтрахованиеЖизни КАК ВзносыНаДобровольноеСтрахованиеЖизни
	|ИЗ
	|	ВТРегистраторыИмущественныхВычетов КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
	|		ПО Регистраторы.Ссылка = ИмущественныеВычетыНДФЛ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация КАК Организация,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации КАК ДатаНачала,
	|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо КАК ДатаОкончания,
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета КАК КодВычета,
	|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей КАК КоличествоДетей,
	|	ВидыВычетовНДФЛ.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийМесяцВычетовНаДетей КАК ПоследнийМесяцВычетовНаДетей
	|		ПО СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации = ПоследнийМесяцВычетовНаДетей.МесяцРегистрации
	|			И СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация = ПоследнийМесяцВычетовНаДетей.Организация
	|			И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = ПоследнийМесяцВычетовНаДетей.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО СтандартныеВычетыНаДетейНДФЛ.КодВычета = ВидыВычетовНДФЛ.Ссылка
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета.Код,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация КАК Организация,
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Период КАК ДатаНачала,
	|	СтандартныеВычетыФизическихЛицНДФЛ.КодВычетаЛичный КАК КодВычета,
	|	ВидыВычетовНДФЛ.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийМесяцВычетов КАК ВТПоследнийМесяцВычетов
	|		ПО СтандартныеВычетыФизическихЛицНДФЛ.Период = ВТПоследнийМесяцВычетов.Период
	|			И СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо = ВТПоследнийМесяцВычетов.ФизическоеЛицо
	|			И СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация = ВТПоследнийМесяцВычетов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО СтандартныеВычетыФизическихЛицНДФЛ.КодВычетаЛичный = ВидыВычетовНДФЛ.Ссылка";
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10)));
	Таблица.Колонки.Добавить("ОписаниеВычета", Новый ОписаниеТипов("Строка"));
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.РасходыНаСтроительствоПриобретение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаСтроительствоПриобретение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на жилье'");
		КонецЕсли;
		
		Если Выборка.ПроцентыПоКредитам > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ПроцентыПоКредитам;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Проценты по кредитам'");
		КонецЕсли;
		
		Если Выборка.ПроцентыПриПерекредитовании > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ПроцентыПриПерекредитовании;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Проценты при перекредитовании'");
		КонецЕсли;
		
		Если Выборка.РасходыНаСвоеОбучение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаСвоеОбучение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на свое обучение'");
		КонецЕсли;
		
		Если Выборка.РасходыНаОбучениеДетей > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаОбучениеДетей;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на обучение детей'");
		КонецЕсли;
		
		Если Выборка.РасходыНаЛечение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаЛечение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на лечение'");
		КонецЕсли;
		
		Если Выборка.СтраховыеВзносыНаМедУслуги > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.СтраховыеВзносыНаМедУслуги;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Страховые взносы на медицинские услуги'");
		КонецЕсли;
		
		Если Выборка.РасходыНаДорогостоящееЛечение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаДорогостоящееЛечение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на дорогостоящее лечение'");
		КонецЕсли;
		
		Если Выборка.ВзносыНаДобровольноеСтрахованиеЖизни > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ВзносыНаДобровольноеСтрахованиеЖизни;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Взносы на добровольное страхование жизни'");
		КонецЕсли;
	КонецЦикла;
		
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		РазмерВычета = РазмерыВычетов[Выборка.КодВычета];
		ТекстРубли = НСтр("ru = 'р'");
		ОписаниеВычета = СтрШаблон("%1 %2. %3", РазмерВычета, ТекстРубли, Выборка.ПолноеНаименование);
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.РазмерВычета = РазмерВычета;
		НоваяСтрока.ОписаниеВычета = ОписаниеВычета;
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		РазмерВычета = РазмерыВычетов[Выборка.КодВычета];
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.РазмерВычета = РазмерВычета;
		НоваяСтрока.ОписаниеВычета = Выборка.ПолноеНаименование;
	КонецЦикла;
	
	Результат = Таблица.Скопировать(, "Организация, ФизическоеЛицо");
	Результат.Свернуть("Организация, ФизическоеЛицо");
	Результат.Колонки.Добавить("ИнформацияОВычетах", Новый ОписаниеТипов("ТаблицаЗначений"));
	Для Каждого СтрокаТаблицы  Из Результат Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтрокаТаблицы.Организация);
		Отбор.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		ТаблицаИнформацияОВычетах = НоваяТаблицаИнформацияОВычетах();
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаИнформацияОВычетах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;
		СтрокаТаблицы.ИнформацияОВычетах = ТаблицаИнформацияОВычетах;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаИнформацияОВычетах()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ОписаниеВычета", Новый ОписаниеТипов("Строка"));
	Возврат Результат;
	
КонецФункции

Функция КонтактнаяИнформацияФизическихЛиц(ФизическиеЛица) Экспорт

	КонтактнаяИнформация = Новый Структура("МобильныеТелефоны, АдресаПочты", Новый Соответствие, Новый Соответствие);
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат КонтактнаяИнформация;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Настройки.ВидКонтактнойИнформацииМобильныйТелефон);
	ВидыКИ.Добавить(Настройки.ВидКонтактнойИнформацииАдресЭлектроннойПочты);
	
	МобильныеТелефоны = Новый Соответствие;
	АдресаПочты = Новый Соответствие;
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ФизическиеЛица, , ВидыКИ, ТекущаяДатаСеанса());
	Для каждого СтрокаТЗ Из ТаблицаКИ Цикл
		Если СтрокаТЗ.Вид = Настройки.ВидКонтактнойИнформацииМобильныйТелефон Тогда
			МобильныеТелефоны.Вставить(СтрокаТЗ.Объект, СокрЛП(СтрокаТЗ.Представление));
		ИначеЕсли СтрокаТЗ.Вид = Настройки.ВидКонтактнойИнформацииАдресЭлектроннойПочты Тогда
			АдресаПочты.Вставить(СтрокаТЗ.Объект, СокрЛП(СтрокаТЗ.Представление));
		КонецЕсли;
	КонецЦикла;
	
	КонтактнаяИнформация.МобильныеТелефоны = МобильныеТелефоны;
	КонтактнаяИнформация.АдресаПочты = АдресаПочты;
	
	Возврат КонтактнаяИнформация;

КонецФункции

Функция ВидыМестВыплатыРегистраторов(ДанныеРасчетныхЛистов)

	Отбор = Новый Структура("Группа", Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено);
	СтрокиВыплат = ДанныеРасчетныхЛистов.Скопировать(Отбор);
	РегистраторыВыплаты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиВыплат, "РегистраторВыплаты", Истина);
	
	ВидыМестВыплатыРегистраторов = Новый Соответствие;
	ПрочиеРегистраторы = Новый Массив;
	Для каждого РегистраторВыплаты Из РегистраторыВыплаты Цикл
		Если ЗначениеЗаполнено(РегистраторВыплаты) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(РегистраторВыплаты)) Тогда
			ВидМестаВыплаты = ВедомостьНаВыплатуЗарплаты.ВидМестаВыплатыПоДокументу(РегистраторВыплаты);
			Если ЗначениеЗаполнено(ВидМестаВыплаты) Тогда
				ВидыМестВыплатыРегистраторов.Вставить(РегистраторВыплаты, ВидМестаВыплаты);
			Иначе
				ПрочиеРегистраторы.Добавить(РегистраторВыплаты);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КабинетСотрудникаПереопределяемый.ДополнитьВидыМестВыплатыРегистраторов(ВидыМестВыплатыРегистраторов, ПрочиеРегистраторы);
	
	Возврат ВидыМестВыплатыРегистраторов;

КонецФункции

#КонецОбласти

Функция МассивИзТаблицы(ТаблицаДанных, ОписаниеПолей) Экспорт
	
	Результат = Новый Массив;
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		Результат.Добавить(СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПолей));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПолей)
	
	Результат = Новый Структура;
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			Значение = СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПоля["ОписаниеПолей"]);
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, ОписаниеПоля["ИмяПоляКонфигурации"]);
			Если ЗначениеЗаполнено(Значение) Тогда
				Значение = МассивИзТаблицы(Значение, ОписаниеПоля["ОписаниеПолей"]);
			КонецЕсли;
		Иначе
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, ОписаниеПоля["ИмяПоляКонфигурации"]);
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение)
				Или ТипЗнч(Значение) = Тип("Число") Тогда
			Результат.Вставить(ОписаниеПоля["ИмяПоляСервиса"], Значение);
		ИначеЕсли ОписаниеПоля["ОбязательноеПоле"] Тогда
			Результат.Вставить(ОписаниеПоля["ИмяПоляСервиса"], "");
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ВыбираемыеПоля(СоответствиеПолей)
	
	ВыбираемыеПоля = Новый Массив;
	Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
		Поле = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(Поле) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Поле) = Тип("Соответствие") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыбираемыеПоля, ВыбираемыеПоля(Поле), Истина);
		ИначеЕсли ВыбираемыеПоля.Найти(Поле) = Неопределено Тогда
			ВыбираемыеПоля.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	Возврат ВыбираемыеПоля;
	
КонецФункции

Функция ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей) Экспорт
	
	МассивЭлементов = Новый Массив;
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		МассивЭлементов.Добавить(СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, СоответствиеПолей));
	КонецЦикла;
	Возврат МассивЭлементов;
	
КонецФункции

Функция СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, СоответствиеПолей)
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда
			Значение = СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, КлючИЗначение.Значение);
		Иначе
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, КлючИЗначение.Значение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение) Тогда
			Результат.Вставить(КлючИЗначение.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ЗначениеПоИмениПоля(СтрокаТаблицыДанных, Поле)
	
	Если Не ЗначениеЗаполнено(Поле) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВладелецСтроки = СтрокаТаблицыДанных.Владелец();
	Если ВладелецСтроки.Колонки.Найти(Поле) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтрокаТаблицыДанных[Поле];
	
КонецФункции

Процедура ДополнитьТаблицуКолонкамиВложения(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("НаименованиеВложения",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	ТаблицаДанных.Колонки.Добавить("РасширениеВложения",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаДанных.Колонки.Добавить("ИдентификаторВложения",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
КонецПроцедуры

Функция ПорядокОрганизаций() Экспорт
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Счетчик = 1;
		Пока Выборка.Следующий() Цикл
			Порядок = ДобавитьЛидирующиеНули(Формат(Счетчик, "ЧГ=0"), 3);
			Результат.Вставить(Выборка.Организация, Порядок);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(ИсходнаяСтрока, ДлинаСтроки)
	
	ТекстПолный = ИсходнаяСтрока;
	Пока СтрДлина(ТекстПолный) < ДлинаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

Функция РодителиПодразделений(Подразделения) Экспорт
	
	РодителиПодразделений = Новый Массив;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Родитель", Ложь);
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			РодителиПодразделений.Добавить(ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	РодителиПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РодителиПодразделений);
	Если РодителиПодразделений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
		РодителиПодразделений = РодителиПодразделений(РодителиПодразделений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Подразделения);

КонецФункции

#КонецОбласти

#Область ПубликацияОтветственноеЛицо

Процедура ОпубликоватьОтветственноеЛицоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СообщениеОбОшибке");
	
	БылиОшибки = ОпубликоватьОтветственноеЛицо(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = НСтр("ru='Не удалось опубликовать ответственное лицо.'");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ОпубликоватьОтветственноеЛицо(Ответственный) Экспорт
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал публикацию.
	УстановитьПривилегированныйРежим(Истина);

	// Регистрируем ответственного к публикации.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", Ответственный);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Ответственный);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Ответственный;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПередачаИзменений(), Ложь);
	РезультатВыгрузки = РезультатВыгрузкиФизическихЛиц(ПараметрыПодключения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ответственный));
	
	Возврат Не ЗначениеЗаполнено(РезультатВыгрузки.Выгружено);

КонецФункции

#КонецОбласти

#Область ПубликацияИзмененийОбъектов

Процедура ОпубликоватьИзменения(ПараметрыПодключения, БылиОшибки)
	
	ОпубликоватьИзмененияПубликуемыхОбъектов(ПараметрыПодключения, БылиОшибки);
	ОпубликоватьПрочиеИзменения(ПараметрыПодключения, БылиОшибки);
	
КонецПроцедуры

Процедура ОпубликоватьИзмененияПубликуемыхОбъектов(ПараметрыПодключения, БылиОшибки)
	
	ОтложенноеОбновлениеСписковПубликуемыхОбъектов(БылиОшибки);
	
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
		
	// Таблица с данными зарегистрированными к отправке.
	// Колонки таблицы: ПредметПубликации, ВерсияДанных, Публикуется, ТипДанных
	ТаблицаИзменений = ИзмененияДляПубликации();
	Если ТаблицаИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзменений.Индексы.Добавить("ТипДанных,Публикуется");
	Отбор = Новый Структура("ТипДанных,Публикуется");
	Отбор.Публикуется = Истина;
	ТипыДанных = ТипыПубликуемыхДанных();
	
	Результат = НовыйРезультатВыгрузки();
	
	Отбор.ТипДанных = ТипыДанных["ФизическиеЛица"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиФизическихЛиц(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Организации"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиОрганизаций(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		
		Отбор.ТипДанных = ТипыДанных["Организации"];
		Организации = ТаблицаИзменений.Скопировать(Отбор).ВыгрузитьКолонку("ПредметПубликации");
		
		Отбор.ТипДанных = ТипыДанных["ПодразделенияОрганизаций"];
		ПодразделенияОрганизаций = ТаблицаИзменений.Скопировать(Отбор).ВыгрузитьКолонку("ПредметПубликации");
		
		Если Организации.Количество()>0 Или ПодразделенияОрганизаций.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиСтруктурыЮридическихЛиц(ПараметрыПодключения, Организации, ПодразделенияОрганизаций);
			// Выгруженные организации пропускаем, они уже в списке выгруженных.
			Для каждого ВыгруженныйОбъект Из РезультатВыгрузки.Выгружено Цикл
				Если ТипЗнч(ВыгруженныйОбъект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					Результат.Выгружено.Добавить(ВыгруженныйОбъект);
				КонецЕсли;
			КонецЦикла;
			// Если организация не выгружена, проверяем ее выгрузку на этапе выгрузке организаций и исключаем
			// из выгруженных объектов, что бы повторить выгрузку в составе структуры предприятия.
			Для каждого ЭлементКоллекции Из РезультатВыгрузки.НеВыгружено Цикл
				Если ТипЗнч(ЭлементКоллекции.Ключ) = Тип("СправочникСсылка.Организации") Тогда
					Индекс = Результат.Выгружено.Найти(ЭлементКоллекции.Ключ);
					Если Индекс <> Неопределено Тогда
						Результат.Выгружено.Удалить(Индекс);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
		КонецЕсли;
		
	Иначе
		
		Отбор.ТипДанных = ТипыДанных["СтруктураПредприятия"];
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиСтруктурыПредприятия(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Должности"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиДолжностей(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["ШтатноеРасписание"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиШтатногоРасписания(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Сотрудники"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиСотрудников(ПараметрыПодключения, ТаблицаДляВыгрузки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ОпубликоватьЗарегистрированныеИзменения(ПараметрыПодключения, ТаблицаИзменений, Результат);
	
	ОтменитьРегистрациюИзмененийПоРезультатамПубликации(ТаблицаИзменений, Результат);
	ОтменитьРегистрациюУсловноПубликуемыхОбъектов(Результат.БылиОшибки);
	
	БылиОшибки = Результат.БылиОшибки;
	
КонецПроцедуры

Процедура ОпубликоватьПрочиеИзменения(ПараметрыПодключения, БылиОшибки)
	
	Результат = НовыйРезультатВыгрузки();
	
	ТаблицаИзменений = ИзмененияВычетыНДФЛ();
	Если ТаблицаИзменений <> Неопределено Тогда
		
		Отбор = Новый Структура("Публикуется");
		Отбор.Публикуется = Истина;
		
		ТаблицаИзменений.Индексы.Добавить("Публикуется");
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиПрименяемыхВычетов(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ФизическоеЛицо"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
			// Физические лица по которым заказали публикацию вычетов, но они не имеют вычетов.
			ФизическиеЛицаБезВычетов = РезультатВыгрузки.ФизическиеЛицаБезВычетов;
			// Включим этих физических лиц в список выгруженных.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, ФизическиеЛицаБезВычетов);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
		КонецЕсли;
		
		Если ТаблицаИзменений.Количество() > 0 Тогда
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
				Блокировка.Заблокировать();
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
				Запрос.УстановитьПараметр("Выгружено", Результат.Выгружено);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
				|	ТаблицаИзменений.Публикуется КАК Публикуется
				|ПОМЕСТИТЬ ВТОтменитьИзменения
				|ИЗ
				|	&ТаблицаИзменений КАК ТаблицаИзменений
				|ГДЕ
				|	(ТаблицаИзменений.ФизическоеЛицо В (&Выгружено)
				|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ОтменитьИзменения.ФизическоеЛицо КАК ФизическоеЛицо
				|ИЗ
				|	ВТОтменитьИзменения КАК ОтменитьИзменения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛица
				|		ПО ОтменитьИзменения.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
				|			И (ОтменитьИзменения.ВерсияДанных = ФизическиеЛица.ВерсияДанных
				|				ИЛИ НЕ ОтменитьИзменения.Публикуется)";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ФизическоеЛицо = Выборка.ФизическоеЛицо;
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				
				Если Результат.БылиОшибки Тогда
					Для Каждого Ошибка Из Результат.НеВыгружено Цикл
						МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ФизическоеЛицо = Ошибка.Ключ;
						МенеджерЗаписи.Прочитать();
						МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
						МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
						МенеджерЗаписи.Записать();
					КонецЦикла;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ОписаниеИзменений = НСтр("ru = 'Прочие изменения'");
				ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки());
				Результат.БылиОшибки = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
		
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ОпубликоватьПрочиеИзменения(ПараметрыПодключения, БылиОшибки);
	
КонецПроцедуры

Функция ИзмененияДляПубликации()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации КАК ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТВсеИзменения
	|ИЗ
	|	РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ВсеИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации КАК ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ЕСТЬNULL(ПубликуемыеОбъекты.УсловноПубликуется, ЛОЖЬ) КАК УсловноПубликуется
	|ПОМЕСТИТЬ ВТИзмененияПрочихОбъектов
	|ИЗ
	|	ВТВсеИзменения КАК ВсеИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ВсеИзменения.ПредметПубликации = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	НЕ ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.ФизическиеЛица";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТВсеИзменения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.ПредметПубликации КАК ПредметПубликации,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ЛОЖЬ КАК УсловноПубликуется,
	|	ТИПЗНАЧЕНИЯ(Изменения.ПредметПубликации) КАК ТипДанных,
	|	NULL КАК ФизическоеЛицо
	|ИЗ
	|	ВТВсеИзменения КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО Изменения.ПредметПубликации = ПубликуемыеОбъекты.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО Изменения.ПредметПубликации = ОшибкиЗаполнения.ОбъектПубликации
	|ГДЕ
	|	Изменения.ПредметПубликации ССЫЛКА Справочник.ФизическиеЛица
	|	И ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных,
	|	ВсеИзменения.Публикуется,
	|	ЛОЖЬ,
	|	ТИПЗНАЧЕНИЯ(ВсеИзменения.ПредметПубликации),
	|	NULL
	|ИЗ
	|	ВТИзмененияПрочихОбъектов КАК ВсеИзменения
	|ГДЕ
	|	НЕ ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.Сотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных,
	|	ВсеИзменения.Публикуется,
	|	ВсеИзменения.УсловноПубликуется,
	|	ТИПЗНАЧЕНИЯ(ВсеИзменения.ПредметПубликации),
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	ВТИзмененияПрочихОбъектов КАК ВсеИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|		ПО ВсеИзменения.ПредметПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.Сотрудники
	|	И (ВсеИзменения.УсловноПубликуется
	|			ИЛИ ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ИзмененияВычетыНДФЛ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вычеты.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК Вычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ПО Вычеты.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО Вычеты.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|ГДЕ
	|	ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Процедура ОтменитьРегистрациюИзмененийПоРезультатамПубликации(ТаблицаИзменений, РезультатВыгрузки)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("Выгружено", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ПредметПубликации КАК ПредметПубликации,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
		|	ТаблицаИзменений.Публикуется КАК Публикуется
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	(ТаблицаИзменений.ПредметПубликации В (&Выгружено)
		|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ПредметПубликации КАК ПредметПубликации
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервисаКабинетСотрудника
		|		ПО ОтменитьИзменения.ПредметПубликации = ИзмененияДляСервисаКабинетСотрудника.ПредметПубликации
		|			И (ОтменитьИзменения.ВерсияДанных = ИзмененияДляСервисаКабинетСотрудника.ВерсияДанных
		|				ИЛИ НЕ ОтменитьИзменения.Публикуется)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Выборка.ПредметПубликации;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Если РезультатВыгрузки.БылиОшибки Тогда
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации = Ошибка.Ключ;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Публикуемые объекты'");
		ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки());
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Функция ТипыПубликуемыхДанных()

	ОписаниеТиповДанных = Новый Соответствие;

	ОписаниеТиповДанных.Вставить("ФизическиеЛица", 				Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеТиповДанных.Вставить("Организации", 				Тип("СправочникСсылка.Организации"));
	ОписаниеТиповДанных.Вставить("Должности", 					Тип("СправочникСсылка.Должности"));
	ОписаниеТиповДанных.Вставить("Сотрудники", 					Тип("СправочникСсылка.Сотрудники"));
	ОписаниеТиповДанных.Вставить("ПодразделенияОрганизаций", 	Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	ОписаниеТиповДанных.Вставить("ШтатноеРасписание", 	 КабинетСотрудникаВнутренний.ТипШтатноеРасписание());
	ОписаниеТиповДанных.Вставить("СтруктураПредприятия", КабинетСотрудникаВнутренний.ТипСтруктураПредприятия());
	
	Возврат ОписаниеТиповДанных;
	
КонецФункции

Функция НовыйРезультатВыгрузки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выгружено", Новый Массив);
	Результат.Вставить("НеВыгружено", Новый Соответствие);
	Результат.Вставить("БылиОшибки", Ложь);
	Результат.Вставить("ОтменитьРегистрацию", Новый Массив);
	Возврат Результат;
	
КонецФункции

Функция СформироватьJSON(Значение)
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразованиеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудника"));
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;

	Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Результат = ПолФизическогоЛица(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыЗанятости") Тогда
		Результат = ВидЗанятостиСотрудника(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Результат = ВидДокументаФизическогоЛица(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.СпособыРасчетаУдержанийКабинетСотрудника") Тогда
		Результат = СпособРасчетаУдержания(Значение);
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Или Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Если Не Значение.Пустая() Тогда
			Результат = Строка(Значение.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, Знач РесурсСервиса, Знач Данные, ПолеКлюча, РезультатВыгрузки = Неопределено, РазмерПакета = 100) Экспорт

	Если РезультатВыгрузки = Неопределено Тогда
		РезультатВыгрузки = НовыйРезультатВыгрузки();
	КонецЕсли;
	
	Если Не ТипЗнч(Данные) = Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru = 'Произошла ошибка при выгрузки коллекции в сервис. Ожидается массив.'");
	КонецЕсли;
	
	КоличествоЭлементов = Данные.Количество();
	
	Если КоличествоЭлементов > РазмерПакета Тогда
		ДанныеПакета = Новый Массив;
		Для Сч = 1 По РазмерПакета Цикл
			ДанныеПакета.Добавить(Данные[0]);
			Данные.Удалить(0);
		КонецЦикла;
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, ПолеКлюча, РезультатВыгрузки, РазмерПакета);
	Иначе
		ДанныеПакета = Данные;
	КонецЕсли;
	
	СтрокаТела = СформироватьJSON(ДанныеПакета);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT", СтрокаТела);
	
	Если Ответ = Неопределено Тогда
		РезультатВыгрузки.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Тогда
		Для Каждого СтрокаДанных Из ДанныеПакета Цикл
			РезультатВыгрузки.Выгружено.Добавить(СтрокаДанных[ПолеКлюча]);
		КонецЦикла;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		РезультатВыгрузки.БылиОшибки = Истина;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат РезультатВыгрузки;
		КонецПопытки;
		
		Результат = ОбъектОтвета["result"];
		Если Результат <> Неопределено Тогда
			Для Каждого ЭлементРезультат Из Результат Цикл
				КлючОбъекта = ДанныеПакета[Число(ЭлементРезультат["position"]) - 1][ПолеКлюча];
				РезультатВыгрузки.Выгружено.Добавить(КлючОбъекта);
			КонецЦикла;
		КонецЕсли;
		
		КоличествоЭлементов = ДанныеПакета.Количество();
		Ошибки = ОбъектОтвета["errors"];
		Если Ошибки <> Неопределено Тогда
			Для Каждого ЭлементОшибки Из Ошибки Цикл
				ПозицияВКоллекции = ЭлементОшибки["position"];
				Если ПозицияВКоллекции <> Неопределено Тогда
					НомерПозиции = Число(ПозицияВКоллекции);
					Если НомерПозиции <= КоличествоЭлементов Тогда
						КлючОбъекта = ДанныеПакета[НомерПозиции - 1][ПолеКлюча];
						РезультатВыгрузки.НеВыгружено.Вставить(КлючОбъекта, ОписаниеОшибкиВыгрузки(ЭлементОшибки));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ОписаниеОшибкиВыгрузки(ОбъектОшибка)
	
	Попытка
		Результат = НСтр("ru = 'Тип ошибки: %1
						|Код ошибки: %2
						|Описание: %3
						|Подробно:'");
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат, ОбъектОшибка["error"]["type"], ОбъектОшибка["error"]["code"], ОбъектОшибка["error"]["description"]);
	
		Для Каждого КлючЗначение Из ОбъектОшибка["error"]["value"] Цикл
			Результат = Результат + Символы.ПС + КлючЗначение.Ключ + ": " + КлючЗначение.Значение;
		КонецЦикла;
	Исключение
		Результат = НСтр("ru = 'Неизвестное описание ошибки.'");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьВложенияВСервис(ПараметрыПодключения, ТаблицаДанных, Вложения, ИмяПоляВладельца, НазваниеВложения)
	
	БылиОшибки = Ложь;
	
	РесурсСервиса = РесурсФайлы();
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		ХранилищеВложения = Вложения.Получить(СтрокаТаблицы[ИмяПоляВладельца]);
		Если Не ЗначениеЗаполнено(ХранилищеВложения) Тогда
			Продолжить;
		КонецЕсли;
		Вложение = ХранилищеВложения.Получить();
		Если ТипЗнч(Вложение) <> Тип("ДвоичныеДанные") Тогда
			Продолжить;
		КонецЕсли;
		// проверка размера вложения
		Если Вложение.Размер() > 5242880 Тогда
			ТекстСообщения = НСтр("ru = 'Размер фотографии превышает 5Мб: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТаблицы.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		Картинка = Новый Картинка(Вложение);
		// проверка формата вложения
		ФорматВложения = Картинка.Формат();
		Если ФорматВложения = ФорматКартинки.JPEG 
			Или ФорматВложения = ФорматКартинки.GIF
			Или ФорматВложения = ФорматКартинки.TIFF
			Или ФорматВложения = ФорматКартинки.PNG
			Или ФорматВложения = ФорматКартинки.BMP Тогда
			Расширение = Строка(ФорматВложения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный формат картинки фотографии: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТаблицы.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		Картинка.Записать(ИмяВременногоФайла);
		ОписаниеФайла = ОписаниеФайлаДляПубликации(ИмяВременногоФайла, Расширение);
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "POST",, ОписаниеФайла);
		УдалитьФайлы(ИмяВременногоФайла);
		Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
			БылиОшибки = Истина;
			ТекстСообщения = НСтр("ru = 'Ошибка при публикации файла: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТаблицы.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			БылиОшибки = Истина;
			ТекстСообщения = НСтр("ru = 'Ошибка при публикации файла фотографии: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТаблицы.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		СтрокаТаблицы.ИдентификаторВложения = ОбъектОтвета.Получить("fileID");
		СтрокаТаблицы.РасширениеВложения = Расширение;
		СтрокаТаблицы.НаименованиеВложения = Строка(СтрокаТаблицы[ИмяПоляВладельца]) + " " + НазваниеВложения + "." + Расширение;
	КонецЦикла;
	
	Возврат БылиОшибки;
	
КонецФункции

Функция ОписаниеФайлаДляПубликации(ИмяФайла,Расширение)

	Возврат Новый Структура("ИмяФайла,Расширение",ИмяФайла,Расширение);

КонецФункции

#Область ПроцедурыВыгрузкиОбъектовПоТипам

Функция РезультатВыгрузкиФизическихЛиц(ПараметрыПодключения, Список)
	
	Результат = НовыйРезультатВыгрузки();
	РесурсСервиса = РесурсФизическиеЛица();
	ДанныеФизическихЛиц = ДанныеФизическихЛиц(ПараметрыПодключения, Список);
	
	СоответствиеПолей = ОписаниеПолейФизическихЛиц();
	ТаблицаДанных = ДанныеФизическихЛиц.ТаблицаДанных;
	
	БылиОшибки = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеФизическихЛиц.Вложения) Тогда
		СоответствиеПолей.Вставить("picture", ОписаниеПолейВложения());
		ДополнитьТаблицуКолонкамиВложения(ТаблицаДанных);
		БылиОшибки = ВыгрузитьВложенияВСервис(ПараметрыПодключения, ТаблицаДанных, ДанныеФизическихЛиц.Вложения, "ФизическоеЛицо", "Фотография");
	КонецЕсли;
	
	Данные = ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	Результат.БылиОшибки = Результат.БылиОшибки Или БылиОшибки;
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиОрганизаций(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсОрганизации();
	Данные = ДанныеОрганизаций(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСтруктурыПредприятия(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсСтруктураПредприятия();
	Данные = ДанныеСтруктурыПредприятия(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСтруктурыЮридическихЛиц(ПараметрыПодключения, Организации, ПодразделенияОрганизаций)
	
	РесурсСервиса = РесурсСтруктураПредприятия();
	Данные = ДанныеСтруктурыЮридическихЛиц(ПараметрыПодключения,  Организации, ПодразделенияОрганизаций);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиДолжностей(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсДолжности();
	Данные = ДанныеДолжностей(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиШтатногоРасписания(ПараметрыПодключения, Список)

	РесурсСервиса = РесурсШтатноеРасписание();
	Данные = ДанныеШтатногоРасписания(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСотрудников(ПараметрыПодключения, ТаблицаДляВыгрузки)
	
	ОтменитьПубликацию = Новый Массив;
	
	// проверим, что сотрудник опубликован в сервисе
	Отбор = Новый Структура("УсловноПубликуется", Истина);
	УсловноПубликуемыеСотрудники = ТаблицаДляВыгрузки.НайтиСтроки(Отбор);
	Если ВерсияПриложенияМеньшеВерсии("3.0.3.96") Тогда
		
		УдаляемыеСтроки = Новый Массив;
		Для каждого СтрокаТЗ Из УсловноПубликуемыеСотрудники Цикл
			УдаляемыеСтроки.Добавить(СтрокаТЗ);
		КонецЦикла;
		Для каждого СтрокаТЗ Из УдаляемыеСтроки Цикл
			ТаблицаДляВыгрузки.Удалить(СтрокаТЗ);
		КонецЦикла;
		
	Иначе
		
		РесурсФизическиеЛица = РесурсФизическиеЛица();
		ПроверенныеФизическиеЛица = Новый Соответствие;
		УдаляемыеСтроки = Новый Массив;
		
		Для каждого СтрокаТЗ Из УсловноПубликуемыеСотрудники Цикл
			
			Публикуется = ПроверенныеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо];
			Если Публикуется = Неопределено Тогда
				
				РесурсСервиса = СтрШаблон("%1/%2", РесурсФизическиеЛица, Строка(СтрокаТЗ.ФизическоеЛицо.УникальныйИдентификатор()));
				Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET",,,404);
				Если Ответ = Неопределено Тогда
					Публикуется = -1; // не удалось проверить
				ИначеЕсли Ответ.КодСостояния = 200 Тогда
					Публикуется = 1 // публикуется
				ИначеЕсли Ответ.КодСостояния = 404 Тогда
					Публикуется = 0; // не публикуется
				Иначе
					Публикуется = -1; // не удалось проверить
				КонецЕсли;
			КонецЕсли;
			
			Если Публикуется <> 1 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЗ);
				Если Публикуется = 0 Тогда
					ОтменитьПубликацию.Добавить(СтрокаТЗ.ПредметПубликации);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из УдаляемыеСтроки Цикл
			ТаблицаДляВыгрузки.Удалить(СтрокаТЗ);
		КонецЦикла;
		
	КонецЕсли;
	
	РесурсСервиса = РесурсСотрудники();
	Данные = ДанныеСотрудников(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Для каждого Сотрудник Из ОтменитьПубликацию Цикл
		Результат.Выгружено.Добавить(Сотрудник);
	КонецЦикла;
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиПрименяемыхВычетов(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсПрименяемыеВычеты();
	СведенияОВычетах = ДанныеОВычетах(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, СведенияОВычетах.Данные, "personID");
	Результат.Вставить("ФизическиеЛицаБезВычетов", СведенияОВычетах.ФизическиеЛицаБезВычетов);
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПубликацияУдалинеяОбъектов

Процедура ОпубликоватьУдалениеДанных(ПараметрыПодключения, БылиОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыДляУдаления.ОбъектДляУдаления КАК ОбъектДляУдаления,
	|	ТИПЗНАЧЕНИЯ(ОбъектыДляУдаления.ОбъектДляУдаления) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника КАК ОбъектыДляУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДанных = ТипыПубликуемыхДанных();
	РесурсСервисаПоТипуДанных = Новый Соответствие;
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["ФизическиеЛица"], 		РесурсФизическиеЛица());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Организации"], 			РесурсОрганизации());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Должности"], 			РесурсДолжности());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Сотрудники"], 			РесурсСотрудники());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["ШтатноеРасписание"], 	РесурсШтатноеРасписание());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["СтруктураПредприятия"], 	РесурсСтруктураПредприятия());
	
	УдаленныеОбъекты = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РесурсСервиса = РесурсСервисаПоТипуДанных[Выборка.ТипДанных];
		Если РесурсСервиса <> Неопределено Тогда
			Идентификатор = Строка(Выборка.ОбъектДляУдаления.УникальныйИдентификатор());
			Если РезультатУдаленияОбъектаИзСервиса(ПараметрыПодключения, РесурсСервиса, Идентификатор) Тогда
				УдаленныеОбъекты.Добавить(Выборка.ОбъектДляУдаления);
			Иначе
				БылиОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ОбъектДляУдаления Из УдаленныеОбъекты Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ОбъектДляУдаления", ОбъектДляУдаления);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектДляУдаления.Установить(ОбъектДляУдаления);
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(ОбъектДляУдаления, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпубликоватьУдалениеДокументовНаПодпись(ПараметрыПодключения, БылиОшибки)
	
	РесурсСервиса = РесурсДокументыНаПодпись();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыДокументов.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.ДокументыНаПодписьКУдалениюКабинетСотрудника КАК ИдентификаторыДокументов";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УдаленныеДокументы = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если РезультатУдаленияОбъектаИзСервиса(ПараметрыПодключения, РесурсСервиса, СокрЛП(Выборка.ИдентификаторДокумента)) Тогда
			УдаленныеДокументы.Добавить(Выборка.ИдентификаторДокумента);
		Иначе
			БылиОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдентификаторДокумента Из УдаленныеДокументы Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыНаПодписьКУдалениюКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ИдентификаторДокумента);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДокументыНаПодписьКУдалениюКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(ИдентификаторДокумента, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатУдаленияОбъектаИзСервиса(ПараметрыПодключения, Знач РесурсСервиса, ИдентификаторОбъекта)
	
	РесурсСервиса = СтрШаблон("%1/%2", РесурсСервиса , ИдентификаторОбъекта);
	
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "DELETE");
	
	Если Ответ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Или Ответ.КодСостояния = 404 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПубликацияИзмененийЗаявок

Процедура ОпубликоватьИзмененияЗаявок(ПараметрыПодключения, БылиОшибки)

	РезультатОбработки = НовыйРезультатВыгрузки();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации КАК ПредметПубликации,
	|	ИзмененияДляСервиса.ВерсияДанных КАК ВерсияДанных,
	|	ТИПЗНАЧЕНИЯ(ИзмененияДляСервиса.ПредметПубликации) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипДанных";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзменений = РезультатЗапроса.Выгрузить();
	ТаблицаИзменений.Индексы.Добавить("ТипДанных");
	Отбор = Новый Структура("ТипДанных");
	ТипыДанных = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ТипДанных", Истина);
	
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	ПубликоватьРезультатСогласования = ИспользоватьФормат303();
	РесурсСтатусовСервиса = РесурсСтатусовСервиса();
	
	// Заявки с ошибками заполнения, например пустой идентификатор заявки,
	// снимаем с регистрации изменений после выгрузки данных.
	ЗаявкиОтменитьРегистрацию = Новый Массив;
	
	// Заявки к выгрузке, не участвующие в кадровом ЭДО.
	// Ключ - ТипыЗаявокКабинетСотрудника,
	// Значение - массив объектов к выгрузке.
	ЗаявкиКВыгрузке = Новый Соответствие;
	
	// Заявки по которым были ошибки при обработке, до публикации результатов.
	// Ключ - ссылка на заявку,
	// Значение - описание причины не обработки заявки.
	НеОбработанныеЗаявки = Новый Соответствие;
	
	// Содержит все заявки полученный как изменения для публикации.
	// Ключ - ИдентификаторЗаявки - идентификатор в сервисе,
	// Значение - ссылка на заявку.
	ИдентификаторЗаявка = Новый Соответствие;
	
	// Результаты согласования для выгрузки.
	// Ключ - ИдентификаторЗаявки - идентификатор в сервисе,
	// Значение - массив объектов РезультатСогласования.
	ЗаявкаРезультатыСогласования = Новый Соответствие;
	
	// Заявки для выгрузки по "строму" формату.
	// Ключ - ИдентификаторЗаявки - идентификатор в сервисе,
	// Значение - Структура, ресурс сервиса и СтатусПубликации.
	СтатусыЗаявокКПубликации = Новый Соответствие;
	
	// Таблица с документами кадрового ЭДО по заявкам, содержит колонки
	// Ссылка - ссылка на документ КЭДО,
	// Документ - ссылка на бизнес-процесс - Заявку,
	// ЭлектронныйДокумент - ссылка на присоединенный файл.
	ДокументыКЭДОПоЗаявкам = ДокументыКЭДОПоПолюДокумент(ТаблицаИзменений.ВыгрузитьКолонку("ПредметПубликации"));
	ДокументыКЭДОПоЗаявкам.Индексы.Добавить("Документ");
	
	Для каждого ТипДанных Из ТипыДанных Цикл
		
		Если ТипДанных = Тип("Неопределено") Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.ТипДанных = ТипДанных;
		ТаблицаПоТипуДанных = ТаблицаИзменений.Скопировать(Отбор);
		ПубликуемыеЗаявки = ТаблицаПоТипуДанных.ВыгрузитьКолонку("ПредметПубликации");
		
		// Таблица с данными заявок, содержит колонки
		// Заявка - ссылка на бизнес-процесс,
		// ТипЗаявкиКабинетСотрудника - ПеречислениеСсылка.ТипыЗаявокКабинетСотрудника,
		// ИдентификаторЗаявки - строка, идентификатор заявки из сервиса,
		// СостояниеЗаявки - ПеречислениеСсылка.СостоянияЗаявокКабинетСотрудника
		// Комментарий - Строка - ответ по заявке.
		ТаблицаЗаявок = БизнесПроцессыЗаявокСотрудников.ТаблицаЗаявокСотрудника(ПубликуемыеЗаявки, ТипДанных);
		
		// Таблица содержит вложения по заявкам не участвующим в кадровом ЭДО.
		ТаблицаВложенийЗаявок = БизнесПроцессыЗаявокСотрудников.ТаблицаФайловОтветаЗаявокСотрудника(ПубликуемыеЗаявки, ТипДанных);
		ОтборЗаявок = Новый Структура("Заявка");
		
		Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЗаявки) Тогда
				РезультатОбработки.БылиОшибки = Истина;
				ЗаявкиОтменитьРегистрацию.Добавить(СтрокаТЗ.Заявка);
				ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор заявки.'");
				ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
				Продолжить;
			КонецЕсли;
			
			ТипЗаявкиСервиса = СтрокаТЗ.ТипЗаявкиКабинетСотрудника;
			ИдентификаторЗаявка.Вставить(СтрокаТЗ.ИдентификаторЗаявки, СтрокаТЗ.Заявка);
			
			ЭлектронныйДокумент = Неопределено;
			
			// Проверяем, что у заявки есть документ кадрового ЭДО,
			// документ может отсутствовать, если еще не выполнена обработка обновления.
			СтрокаТаблицы = ДокументыКЭДОПоЗаявкам.Найти(СтрокаТЗ.Заявка, "Документ");
			Если СтрокаТаблицы = Неопределено Тогда
				ОписаниеОшибки = НСтр("ru = 'Не найден документ кадрового ЭДО.'");
				НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, ОписаниеОшибки);
				ЗаписатьПредупреждениеВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
				Продолжить;
			Иначе
				ЭлектронныйДокумент = СтрокаТаблицы.ЭлектронныйДокумент;
				// Электронный документ есть в заявках, полученных из сервиса с использованием ЭП.
				ТребуетсяЭлектроннаяПодпись = СтрокаТЗ.ЗаявкаПодписывается И ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(ЭлектронныйДокумент);
			КонецЕсли;
			
			РезультатВыполнения = "";
			ЗаявкаИсполнена = Ложь;
			Если СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				РезультатВыполнения = "agreed";
				ЗаявкаИсполнена = Истина;
			ИначеЕсли СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				РезультатВыполнения = "denied";
			Иначе
				РезультатОбработки.БылиОшибки = Истина;
				ОписаниеОшибки = НСтр("ru = 'Не установлен статус выполнения заявки.'");
				НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, ОписаниеОшибки);
				ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
				Продолжить;
			КонецЕсли;
			
			// Обработка заявок не участвующих в кадровом ЭДО.
			Если ЗаявкаИсполнена И ТипЗаявкиСервиса = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
				
				ОбъектСправка = ОбъектСправкаОбОстаткеОтпуска(ПараметрыПодключения, СтрокаТЗ, ТаблицаВложенийЗаявок, НеОбработанныеЗаявки);
				Если ОбъектСправка = Неопределено Тогда
					Продолжить;
				Иначе
					ЗаявкиПоТипу = ЗаявкиКВыгрузке[ТипЗаявкиСервиса];
					Если ЗаявкиПоТипу = Неопределено Тогда
						ЗаявкиПоТипу = Новый Массив;
					КонецЕсли;
					ЗаявкиПоТипу.Добавить(ОбъектСправка);
					ЗаявкиКВыгрузке.Вставить(ТипЗаявкиСервиса, ЗаявкиПоТипу);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПубликоватьРезультатСогласования Тогда
				
				РезультатыСогласования = Новый Массив;
				
				Если ТребуетсяЭлектроннаяПодпись Тогда
					
					Ответ = РезультатыСогласованияЗаявкиСПодписью(
								СтрокаТЗ.ИдентификаторЗаявки,
								РезультатВыполнения,
								СтрокаТЗ.Комментарий,
								ЭлектронныйДокумент);
					
					Если Ответ.ОписаниеОшибки <> Неопределено Тогда
						РезультатОбработки.БылиОшибки = Истина;
						НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, Ответ.ОписаниеОшибки);
						Продолжить;
					ИначеЕсли Ответ.РезультатыСогласования <> Неопределено Тогда
						РезультатыСогласования = Ответ.РезультатыСогласования;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
					
					// не требуется ЭП, или у заявки нет ЭП
					
					Исполнитель = СтрокаТЗ.Заявка.Исполнитель;
					Подписант = "";
					ИмяПодписанта = "";
					Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
						Если ЗначениеЗаполнено(Исполнитель) Тогда
							Подписант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнитель, "ФизическоеЛицо");
						КонецЕсли;
						Если ЗначениеЗаполнено(Подписант) И ФизическоеЛицоПубликуется(Подписант) Тогда
							ИмяПодписанта = Строка(Подписант);
						ИначеЕсли Исполнитель <> Пользователи.СсылкаНеуказанногоПользователя(Ложь) Тогда
							Подписант = "";
							ИмяПодписанта = Строка(Исполнитель);
						КонецЕсли;
					КонецЕсли;
					
					РезультатСогласования = ОписаниеОбъекта(ОписаниеОбъектРезультатСогласования());
					РезультатСогласования.Подписант 	= Подписант;
					РезультатСогласования.ИмяПодписанта = ИмяПодписанта;
					РезультатСогласования.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторЗаявки;
					РезультатСогласования.РезультатСогласования = РезультатВыполнения;
					РезультатСогласования.РольПодписанта 		= "executor";
					РезультатСогласования.Комментарий 			= СтрокаТЗ.Комментарий;
					
					ОбъектРезультатСогласования = ОбъектСервисаПоОписанию(РезультатСогласования, ОписаниеОбъектРезультатСогласования());
					РезультатыСогласования.Добавить(ОбъектРезультатСогласования);
					
				КонецЕсли;
				
				ЗаявкаРезультатыСогласования.Вставить(СтрокаТЗ.Заявка, РезультатыСогласования);
				
			Иначе
				
				РесурсСервиса = РесурсСтатусовСервиса[ТипЗаявкиСервиса];
				Если ЗаявкаИсполнена Тогда
					СтатусПубликации = "completed";
				Иначе
					СтатусПубликации = "rejected";
				КонецЕсли;
				
				ПараметрыСтатуса = Новый Структура;
				ПараметрыСтатуса.Вставить("РесурсСервиса", РесурсСервиса);
				ПараметрыСтатуса.Вставить("СтатусПубликации", СтатусПубликации);
				
				СтатусыЗаявокКПубликации.Вставить(СтрокаТЗ.ИдентификаторЗаявки, ПараметрыСтатуса);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Идентификаторы заявок по которым были ошибки выгрузки.
	НеВыгруженныеЗаявки = Новый Массив;
	
	// Публикация заявок не участвующие в кадровом ЭДО.
	Если ЗаявкиКВыгрузке.Количество() > 0 Тогда
		
		РесурсЗаявокСервиса = РесурсЗаявокСервисаБезКЭДО();
		Для каждого ЭлементКоллекции Из ЗаявкиКВыгрузке Цикл
		
			ТипЗаявкиСервиса = ЭлементКоллекции.Ключ;
			ЗаявкиПоТипу = ЭлементКоллекции.Значение;
			РесурсСервиса = РесурсЗаявокСервиса[ТипЗаявкиСервиса];
			
			РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыПодключения,
				РесурсСервиса,
				ЗаявкиПоТипу,
				"requestID");
				
			РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				// Не найденные заявки с таким идентификатором, регистрируем как успешно выгруженные.
				РегистрироватьКаКВыгружена = (ЗначениеЗаполнено(Ошибка.Значение) И СтрНайти(Ошибка.Значение, "objectNotFound") > 0);
				НеВыгруженныеЗаявки.Добавить(Ошибка.Ключ);
				Заявка = ИдентификаторЗаявка[Ошибка.Ключ];
				Если Заявка <> Неопределено Тогда
					Если РегистрироватьКаКВыгружена Тогда
						РезультатОбработки.Выгружено.Добавить(Заявка);
					Иначе	
						РезультатОбработки.НеВыгружено.Вставить(Заявка, Ошибка.Значение);
					КонецЕсли;
				КонецЕсли;
				ЗарегистрироватьОшибкуПубликацииОбъекта(Заявка, РесурсСервиса, Ошибка.Значение);
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Публикация результатов согласования по заявкам.
	Если ПубликоватьРезультатСогласования Тогда
		
		// вычеркнем заявки, которые не выгрузились на предыдущем шаге
		Для каждого ИдентификаторЗаявки Из НеВыгруженныеЗаявки Цикл
			ЗаявкаРезультатыСогласования.Удалить(ИдентификаторЗаявки);
		КонецЦикла;
		
		РезультатыСогласования = Новый Массив;
		Для каждого ЭлементКоллекции Из ЗаявкаРезультатыСогласования Цикл
			Для каждого РезультатСогласования Из ЭлементКоллекции.Значение Цикл
				РезультатыСогласования.Добавить(РезультатСогласования);
			КонецЦикла;
		КонецЦикла;
		
		РесурсСервиса = РесурсРезультатыСогласования();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыПодключения,
			РесурсСервиса,
			РезультатыСогласования,
			"documentID");
			
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для каждого Идентификатор Из РезультатВыгрузки.Выгружено Цикл
			ОпубликованнаяЗаявка = ИдентификаторЗаявка[Идентификатор];
			Если ОпубликованнаяЗаявка <> Неопределено Тогда
				РезультатОбработки.Выгружено.Добавить(ОпубликованнаяЗаявка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			// Не найденные заявки с таким идентификатором, регистрируем как успешно выгруженные.
			РегистрироватьКаКВыгружена = (ЗначениеЗаполнено(Ошибка.Значение) И СтрНайти(Ошибка.Значение, "objectNotFound") > 0);
			Заявка = ИдентификаторЗаявка[Ошибка.Ключ];
			Если Заявка <> Неопределено Тогда
				Если РегистрироватьКаКВыгружена Тогда
					РезультатОбработки.Выгружено.Добавить(Заявка);
				Иначе	
					РезультатОбработки.НеВыгружено.Вставить(Заявка, Ошибка.Значение);
				КонецЕсли;
			КонецЕсли;
			ЗарегистрироватьОшибкуПубликацииОбъекта(Заявка, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	Иначе
		
		// вычеркнем заявки, которые не выгрузились на предыдущем шаге
		Для каждого ИдентификаторЗаявки Из НеВыгруженныеЗаявки Цикл
			СтатусыЗаявокКПубликации.Удалить(ИдентификаторЗаявки);
		КонецЦикла;
		
		Для каждого ЭлементКоллекции Из СтатусыЗаявокКПубликации Цикл
		
			ИдентификаторЗаявки = ЭлементКоллекции.Ключ;
			СтатусПубликации = ЭлементКоллекции.Значение.СтатусПубликации;
			РесурсСервиса = ЭлементКоллекции.Значение.РесурсСервиса;
			
			Заявка = ИдентификаторЗаявка[ИдентификаторЗаявки];
			Если ОпубликоватьСтатусЗаявки(ПараметрыПодключения, РесурсСервиса, ИдентификаторЗаявки, СтатусПубликации) Тогда
				ОпубликованнаяЗаявка = ИдентификаторЗаявка[ИдентификаторЗаявки];
				Если Заявка <> Неопределено Тогда
					РезультатОбработки.Выгружено.Добавить(ОпубликованнаяЗаявка);
				КонецЕсли;
			Иначе
				РезультатОбработки.БылиОшибки = Истина;
				ОписаниеОшибки = НСтр("ru = 'Ошибка обновления статуса заявки.'");
				ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
				Если Заявка <> Неопределено Тогда
					РезультатОбработки.НеВыгружено.Вставить(Заявка, ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
				РезультатОбработки.НеВыгружено,
				НеОбработанныеЗаявки);
				
	РезультатОбработки.ОтменитьРегистрацию = ЗаявкиОтменитьРегистрацию;
	
	ОтменитьРегистрациюИзмененийЗаявокПоРезультатамПубликации(ТаблицаИзменений, РезультатОбработки);
	
	БылиОшибки = РезультатОбработки.БылиОшибки;
	
КонецПроцедуры

Процедура ОтменитьРегистрациюИзмененийЗаявокПоРезультатамПубликации(ТаблицаИзменений, РезультатВыгрузки)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("Выгружено", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ПредметПубликации КАК ПредметПубликации,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.ПредметПубликации В(&Выгружено)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ПредметПубликации КАК ПредметПубликации
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
		|		ПО ОтменитьИзменения.ПредметПубликации = ИзмененияДляСервиса.ПредметПубликации
		|			И ОтменитьИзменения.ВерсияДанных = ИзмененияДляСервиса.ВерсияДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Выборка.ПредметПубликации;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Если РезультатВыгрузки.БылиОшибки Тогда
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации = Ошибка.Ключ;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ПредметПубликации Из РезультатВыгрузки.ОтменитьРегистрацию Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = ПредметПубликации;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Заявки сотрудников'");
		ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки());
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Функция ОпубликоватьСтатусЗаявки(ПараметрыПодключения, РесурсЗаявкиСервиса, ИдентификаторЗаявки, Статус)
	
	РесурсСервиса = РесурсЗаявкиСервиса + "/" + ИдентификаторЗаявки + "/status?status=" + Статус;
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT");
	Если Ответ <> Неопределено И (Ответ.КодСостояния = 404 Или Ответ.КодСостояния = 200) Тогда
		СтатусУстановлен = Истина;
	Иначе
		СтатусУстановлен = Ложь;
	КонецЕсли;
	
	Возврат СтатусУстановлен;
	
КонецФункции

Функция ОбъектСправкаОбОстаткеОтпуска(ПараметрыПодключения, СтрокаТЗ, ТаблицаВложенийЗаявок, НеОбработанныеЗаявки)

	ОбъектСправка = Неопределено;
	
	СтрокаВложений = ТаблицаВложенийЗаявок.Найти(СтрокаТЗ.Заявка, "Заявка");
	Если СтрокаВложений <> Неопределено Тогда
		
		Попытка
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(СтрокаВложений.ФайлЗаявки, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка получения данных файла.'");
			НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, ОписаниеОшибки);
			ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки());
			Возврат ОбъектСправка;
		КонецПопытки;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		
		ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыПодключения, ДвоичныеДанныеФайла, ДанныеФайла.Расширение);
		Если ИдентификаторФайла = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Ошибка публикации файла.'");
			НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, ОписаниеОшибки);
			ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
			Возврат ОбъектСправка;
		КонецЕсли;
		
		ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаВходящийФайл());
		ОписаниеФайла.НаименованиеФайла 	= ДанныеФайла.ИмяФайла;
		ОписаниеФайла.РасширениеФайла 		= ДанныеФайла.Расширение;
		ОписаниеФайла.РазмерФайла 			= ДанныеФайла.Размер;
		ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
		ОбъектФайл = ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаВходящийФайл());

		ОписаниеСправка = ОписаниеОбъекта(ОписаниеОбъектаСправкаОбОстаткеОтпуска());
		ОписаниеСправка.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
		ОписаниеСправка.Вложение = ОбъектФайл;
		
		ОбъектСправка = ОбъектСервисаПоОписанию(ОписаниеСправка, ОписаниеОбъектаСправкаОбОстаткеОтпуска())
		
	КонецЕсли;
	
	Возврат ОбъектСправка;

КонецФункции

Функция РезультатыСогласованияЗаявкиСПодписью(ИдентификаторЗаявки, РезультатВыполнения, Комментарий, ПрисоединенныйФайл)

	Результат = Новый Структура("РезультатыСогласования,ОписаниеОшибки");
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОписаниеОшибки = НСтр("ru = 'Ошибка получения файла.'");
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецПопытки;
	
	РезультатыСогласования = Новый Массив;
	
	Если ДанныеФайла.ПодписанЭП Тогда
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
		
		ПодписиДокумента = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
		Для каждого ПодписьДокумента Из ПодписиДокумента Цикл
			
			Если ЭтоПодписанСервиса(ПодписьДокумента.Комментарий) Тогда
				Продолжить;
			КонецЕсли;
			
			Подписант = "";
			ИмяПодписанта = "";
			Если ЗначениеЗаполнено(ПодписьДокумента.УстановившийПодпись) Тогда
				Подписант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписьДокумента.УстановившийПодпись, "ФизическоеЛицо");
			КонецЕсли;
			Если ЗначениеЗаполнено(Подписант) И ФизическоеЛицоПубликуется(Подписант) Тогда
				ИмяПодписанта = Строка(Подписант);
			ИначеЕсли ЗначениеЗаполнено(ПодписьДокумента.КомуВыданСертификат) Тогда
				Подписант = "";
				ИмяПодписанта = ПодписьДокумента.КомуВыданСертификат;
			КонецЕсли;
			
			РезультатСогласования = ОписаниеОбъекта(ОписаниеОбъектРезультатСогласования());
			РезультатСогласования.Подписант 	= Подписант;
			РезультатСогласования.ИмяПодписанта = ИмяПодписанта;
			РезультатСогласования.ИдентификаторДокумента = ИдентификаторЗаявки;
			РезультатСогласования.РезультатСогласования = РезультатВыполнения;
			РезультатСогласования.ЭлектроннаяПодпись 	= Base64Строка(ПодписьДокумента.Подпись);
			РезультатСогласования.РольПодписанта 		= "executor";
			РезультатСогласования.ВерсияДокумента 		= ВерсияФайла;
			РезультатСогласования.Комментарий 			= Комментарий;
			
			ОбъектРезультатСогласования = ОбъектСервисаПоОписанию(РезультатСогласования, ОписаниеОбъектРезультатСогласования());
			РезультатыСогласования.Добавить(ОбъектРезультатСогласования);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатыСогласования.Количество() > 0 Тогда
		Результат.РезультатыСогласования = РезультатыСогласования;;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция РесурсСтатусовСервиса()

	РесурсСтатусов = Новый Соответствие;
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ, РесурсЗапросыСправок2НДФЛ());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы, РесурсЗапросыСправокСРаботы());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска, РесурсЗапросыСправокОбОстаткеОтпуска());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных, РесурсЗапросыИзмененияЛичныхДанных());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск, РесурсЗаявленияНаОтпуск());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия, РесурсОтсутствия());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты, РесурсЗаявленияНаНалоговыеВычеты());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска, РесурсЗаявлениеНаКомпенсациюОтпуска());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ, РесурсЗаявлениеНаУдержаниеДСВ());
	
	Возврат РесурсСтатусов;

КонецФункции

Функция РесурсЗаявокСервисаБезКЭДО()

	РесурсСтатусов = Новый Соответствие;
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска, РесурсСправкиОбОстаткеОтпуска());
	
	Возврат РесурсСтатусов;

КонецФункции

#КонецОбласти

#Область ПубликацияИзмененийДокументовКЭДО

Функция НовыйРезультатВыгрузкиДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выгружено", 			Новый Массив);
	Результат.Вставить("НеВыгружено", 			Новый Массив);
	Результат.Вставить("ОтменитьРегистрацию", 	Новый Массив);
	Результат.Вставить("БылиОшибки", Ложь);
	Возврат Результат;
	
КонецФункции

Процедура ОпубликоватьИзмененияДокументов(ПараметрыПодключения, БылиОшибки)

	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		Попытка
			ЗарегистрироватьДокументыНаПодпись();
		Исключение
			ШаблонОписания = НСтр(
			"ru = 'Произошла ошибка при регистрации изменений документов на подпись
			|Описание ошибки:
			|%1'");
			ТекстОшибки = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ПубликуемыйДокумент КАК ПубликуемыйДокумент,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ДокументКадровогоЭДО.ОснованиеДокумента КАК Документ,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ДокументКадровогоЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументКадровогоЭДО.ОснованиеДокумента) КАК ТипДанных,
	|	ВЫБОР
	|		КОГДА ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДокументКадровогоЭДО.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ИЗ
	|	РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника КАК Изменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|		ПО Изменения.ПубликуемыйДокумент = ДокументКадровогоЭДО.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВсеИзменения = РезультатЗапроса.Выгрузить();
	
	Отбор = Новый Структура("Публикуется");
	Отбор.Публикуется = Ложь;
	ОтменаРегистрации = ВсеИзменения.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из ОтменаРегистрации Цикл
		РезультатОбработки.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент)
	КонецЦикла;
	
	Отбор.Публикуется = Истина;
	ТаблицаИзменений = ВсеИзменения.Скопировать(Отбор);
	ТипыДанных = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ТипДанных", Истина);
	ТаблицаИзменений.Индексы.Добавить("ТипДанных");
	Отбор = Новый Структура("ТипДанных");
	
	ДокументыКПубликации = Новый Массив;
	НеобработанныеДокументы = Новый Массив;
	
	ТипДанныхЗаявкаСправкаСРаботы = БизнесПроцессыЗаявокСотрудников.ТипЗаявкаСотрудникаСправкаСМестаРаботы();
	
	ТаблицаДокументовНаПодпись = ТаблицаИзменений.СкопироватьКолонки();
	
	Для каждого ТипДанных Из ТипыДанных Цикл
		
		Отбор.ТипДанных = ТипДанных;
		ТаблицаПоТипуДанных = ТаблицаИзменений.Скопировать(Отбор);
		
		Если ТипДанных = Тип("ДокументСсылка.СправкаНДФЛ") Тогда
			РезультатВыгрузки = РезультатВыгрузки2НДФЛ(ПараметрыПодключения, ТаблицаПоТипуДанных);
			ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки);
		ИначеЕсли ТипДанных = ТипДанныхЗаявкаСправкаСРаботы Тогда
			РезультатВыгрузки = РезультатВыгрузкиСправокСРаботы(ПараметрыПодключения, ТаблицаПоТипуДанных);
			ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки);
		Иначе
			
			Если Не КадровыйЭДО.ЭтоТипОбъектаСПечатнымиФормами(ТипДанных) Тогда
				Для каждого СтрокаТЗ Из ТаблицаПоТипуДанных Цикл
					РезультатОбработки.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаТЗ Из ТаблицаПоТипуДанных Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДокументовНаПодпись.Добавить(), СтрокаТЗ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатВыгрузки = РезультатВыгрузкиДокументовНаПодпись(ПараметрыПодключения, ТаблицаДокументовНаПодпись);
	ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки);
	
	ОтменитьРегистрациюИзмененийДокументов(ТаблицаИзменений, РезультатОбработки);
	
	БылиОшибки = БылиОшибки Или РезультатОбработки.БылиОшибки;

КонецПроцедуры

Процедура ОтменитьРегистрациюИзмененийДокументов(ТаблицаИзменений, РезультатВыгрузки)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПубликуемыйДокумент", "ПубликуемыйДокумент");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("Выгружено", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ПубликуемыйДокумент КАК ПубликуемыйДокумент,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	(ТаблицаИзменений.ПубликуемыйДокумент В (&Выгружено)
		|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ПубликуемыйДокумент КАК ПубликуемыйДокумент
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
		|		ПО ОтменитьИзменения.ПубликуемыйДокумент = ИзмененияДляСервиса.ПубликуемыйДокумент
		|			И ОтменитьИзменения.ВерсияДанных = ИзмененияДляСервиса.ВерсияДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПубликуемыйДокумент = Выборка.ПубликуемыйДокумент;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Для Каждого ПубликуемыйДокумент Из РезультатВыгрузки.ОтменитьРегистрацию Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПубликуемыйДокумент = ПубликуемыйДокумент;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Если РезультатВыгрузки.БылиОшибки Тогда
			Для Каждого ПубликуемыйДокумент Из РезультатВыгрузки.НеВыгружено Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПубликуемыйДокумент = ПубликуемыйДокумент;
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Документы кадрового ЭДО'");
		ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки());
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки)

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.Выгружено, РезультатВыгрузки.Выгружено);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, РезультатВыгрузки.НеВыгружено);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.ОтменитьРегистрацию, РезультатВыгрузки.ОтменитьРегистрацию);
	РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;	

КонецПроцедуры

Функция ЭлектронныйДокументРезультатыСогласования(ПараметрыПодключения, ДанныеЭлектронногоДокумента, ИдентификаторДокумента)
	
	Результат = Новый Структура("ЭлектронныйДокумент,РезультатыСогласования");
	
	Оригинал 		= ДанныеЭлектронногоДокумента.Оригинал;
	Подписи 		= ДанныеЭлектронногоДокумента.Подписи;
	Представления 	= ДанныеЭлектронногоДокумента.Представления;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Оригинал.АдресВоВременномХранилище);
	
	ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
	
	ТекстОписания = НСтр("ru = 'Ошибка публикации файла.'");
	ВладелецФайлаТекст = НСтр("ru = 'Владелец файла'");
	ФайлТекст = НСтр("ru = 'Файл'"); ;
	ШаблонОписанияОшибки = СтрШаблон("%1%2%3: %4, %5:", ТекстОписания, Символы.ПС, ВладелецФайлаТекст, Строка(Оригинал.Владелец), ФайлТекст);
	
	ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыПодключения, ДвоичныеДанныеФайла, Оригинал.РасширениеФайла);
	Если ИдентификаторФайла = Неопределено Тогда
		ОписаниеОшибки = СтрШаблон("%1 %2.", ШаблонОписанияОшибки, Оригинал.Представление);
		ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	РезультатыСогласования = Новый Массив;
	Для каждого Подпись Из Подписи Цикл
		
		Если ЭтоПодписанСервиса(Подпись.Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		
		Подписант = "";
		ИмяПодписанта = "";
		Если ЗначениеЗаполнено(Подпись.УстановившийПодпись) Тогда
			Подписант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подпись.УстановившийПодпись, "ФизическоеЛицо");
		КонецЕсли;
		Если ЗначениеЗаполнено(Подписант) И ФизическоеЛицоПубликуется(Подписант) Тогда
			ИмяПодписанта = Строка(Подписант);
		ИначеЕсли ЗначениеЗаполнено(Подпись.КомуВыданСертификат) Тогда
			Подписант = "";
			ИмяПодписанта = Подпись.КомуВыданСертификат;
		КонецЕсли;
		
		ДвоичныеДанныеПодпись = ПолучитьИзВременногоХранилища(Подпись.АдресВоВременномХранилище);
		
		РезультатСогласования = ОписаниеОбъекта(ОписаниеОбъектРезультатСогласования());
		РезультатСогласования.Подписант 			= Подписант;
		РезультатСогласования.ИмяПодписанта 		= ИмяПодписанта;
		РезультатСогласования.ИдентификаторДокумента = ИдентификаторДокумента;
		РезультатСогласования.РезультатСогласования = "agreed";
		РезультатСогласования.ЭлектроннаяПодпись 	= Base64Строка(ДвоичныеДанныеПодпись);
		РезультатСогласования.РольПодписанта 		= "employer";
		РезультатСогласования.ВерсияДокумента 		= ВерсияФайла;
		
		ОбъектРезультатСогласования = ОбъектСервисаПоОписанию(РезультатСогласования, ОписаниеОбъектРезультатСогласования());
		РезультатыСогласования.Добавить(ОбъектРезультатСогласования);
		
	КонецЦикла;
	
	Если РезультатыСогласования.Количество() = 0 Тогда
		
		РезультатСогласования = ОписаниеОбъекта(ОписаниеОбъектРезультатСогласования());
		РезультатСогласования.Подписант 			= "";
		РезультатСогласования.ИдентификаторДокумента = ИдентификаторДокумента;
		РезультатСогласования.РезультатСогласования = "agreed";
		РезультатСогласования.РольПодписанта 		= "employer";
		РезультатСогласования.ВерсияДокумента 		= ВерсияФайла;
		
		ОбъектРезультатСогласования = ОбъектСервисаПоОписанию(РезультатСогласования, ОписаниеОбъектРезультатСогласования());
		РезультатыСогласования.Добавить(ОбъектРезультатСогласования);
		
	КонецЕсли;
	
	ОписаниеИсходныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаФайл());
	ОписаниеИсходныйДокумент.НаименованиеФайла 	= Оригинал.ИмяФайлаБезРасширения;
	ОписаниеИсходныйДокумент.РасширениеФайла 	= Оригинал.РасширениеФайла;
	ОписаниеИсходныйДокумент.РазмерФайла 		= Оригинал.Размер;
	ОписаниеИсходныйДокумент.ИдентификаторФайла = ИдентификаторФайла;
	ОписаниеИсходныйДокумент.ХешСумма 			= ВерсияФайла;
	ОбъектИсходныйДокумент = ОбъектСервисаПоОписанию(ОписаниеИсходныйДокумент, ОписаниеОбъектаФайл());
	
	ПредставленияДокумента = Новый Массив;
	Для каждого ПредставлениеДокумента Из Представления Цикл
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПредставлениеДокумента.АдресВоВременномХранилище);
		
		ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыПодключения, ДвоичныеДанныеФайла, ПредставлениеДокумента.РасширениеФайла);
		Если ИдентификаторФайла = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон("%1 %2.", ШаблонОписанияОшибки, ПредставлениеДокумента.Представление);
			ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки);
			Возврат Результат;
		КонецЕсли;
		
		ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаФайл());
		ОписаниеФайла.НаименованиеФайла 	= ПредставлениеДокумента.ИмяФайлаБезРасширения;
		ОписаниеФайла.РасширениеФайла 		= ПредставлениеДокумента.РасширениеФайла;
		ОписаниеФайла.РазмерФайла 			= ПредставлениеДокумента.Размер;
		ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
		ОбъектФайл = ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаФайл());
		
		ПредставленияДокумента.Добавить(ОбъектФайл);
		
	КонецЦикла;
	
	ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент());
	ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектИсходныйДокумент;
	Если ПредставленияДокумента.Количество() > 0 Тогда
		ОписаниеЭлектронныйДокумент.ПредставленияДокумента = ПредставленияДокумента;
	КонецЕсли;
	
	Результат.ЭлектронныйДокумент = ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент());
	Результат.РезультатыСогласования = РезультатыСогласования;
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектФайлПоПрисоединенномуФайлу(ПрисоединенныйФайл, ПараметрыПодключения)
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
	
	ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыПодключения, ДвоичныеДанныеФайла, ДанныеФайла.Расширение);
	Если ИдентификаторФайла = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка публикации файла.'");
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаФайл());
	ОписаниеФайла.НаименованиеФайла 	= ДанныеФайла.ИмяФайла;
	ОписаниеФайла.РасширениеФайла 		= ДанныеФайла.Расширение;
	ОписаниеФайла.РазмерФайла 			= ДанныеФайла.Размер;
	ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
	ОписаниеФайла.ХешСумма 				= ВерсияФайла;
	ОбъектФайл = ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаФайл());
	
	Возврат ОбъектФайл;

КонецФункции

Функция ОбъектВходящийФайлПоПрисоединенномуФайлу(ПрисоединенныйФайл, ПараметрыПодключения)

	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыПодключения, ДвоичныеДанныеФайла, ДанныеФайла.Расширение);
	Если ИдентификаторФайла = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка публикации файла.'");
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаВходящийФайл());
	ОписаниеФайла.НаименованиеФайла 	= ДанныеФайла.ИмяФайла;
	ОписаниеФайла.РасширениеФайла 		= ДанныеФайла.Расширение;
	ОписаниеФайла.РазмерФайла 			= ДанныеФайла.Размер;
	ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
	ОбъектФайл = ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаВходящийФайл());
	
	Возврат ОбъектФайл;

КонецФункции

Функция ОпубликоватьДвоичныеДанныеФайла(ПараметрыПодключения, ФайлДвоичныеДанные, Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ФайлДвоичныеДанные.Записать(ИмяВременногоФайла);
	ОписаниеФайла = ОписаниеФайлаДляПубликации(ИмяВременногоФайла, Расширение);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсФайлы(), "POST",, ОписаниеФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Попытка
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектОтвета.Получить("fileID");
	
КонецФункции

#Область ВыгрузкаДокументовНаПодпись

Функция РезультатВыгрузкиДокументовНаПодпись(ПараметрыПодключения, ТаблицаДокументовНаПодпись)

	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	Если ТаблицаДокументовНаПодпись.Количество() = 0 Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ИспользоватьФормат303 = ИспользоватьФормат303();
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	ПубликоватьДокументыНаПодпись = ИспользоватьФормат303 И ИспользуетсяКадровыйЭДО;
	Если Не ПубликоватьДокументыНаПодпись Тогда
		Для каждого СтрокаТЗ Из ТаблицаДокументовНаПодпись Цикл
			РезультатОбработки.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
		КонецЦикла;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	// Массив ссылок на документы КЭДО, по которым
	// не удалось сформировать объект для выгрузки.
	НеОбработанныеДокументы = Новый Массив;
	
	ТаблицаДанных = ДанныеДляВыгрузкиДокументовНаПодпись(ТаблицаДокументовНаПодпись);
	
	// Коллекция документов с результатами согласования, электронной подписью.
	// Ключ - ссылка на Документ,
	// Значение - массив объектов РезультатСогласования.
	ДокументРезультатыСогласования = Новый Соответствие;
	
	// Коллекция документов КЭДО.
	// Ключ - идентификатор документа,
	// Значение - ссылка на ДокументКЭДО.
	ИдентификаторыДокументов = Новый Соответствие;
	
	// Массив объектов документов для публикации.
	ДокументыНаПодписьКПубликации = Новый Массив;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Ответ = ЭлектронныйДокументРезультатыСогласования(ПараметрыПодключения, СтрокаТЗ.ДанныеЭлектронногоДокумента, СтрокаТЗ.ИдентификаторДокумента);
		
		ОбъектЭлектронныйДокумент 	= Ответ.ЭлектронныйДокумент;
		РезультатыСогласования 		= Ответ.РезультатыСогласования;
		Если ОбъектЭлектронныйДокумент = Неопределено Тогда
			РезультатОбработки.БылиОшибки = Истина;
			НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
			// нет ЭП с соответствующей ролью подписанта
			РезультатОбработки.БылиОшибки = Истина;
			НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			ОписаниеОшибки = НСтр("ru = 'Отсутствует электронная подпись файла.'");
			ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.ЭлектронныйДокумент, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		ДокументРезультатыСогласования.Вставить(СтрокаТЗ.ПубликуемыйДокумент, РезультатыСогласования);
		
		ОписаниеДокументНаПодпись =  ОписаниеОбъекта(ОписаниеОбъектаДокументНаПодпись());
		ОписаниеДокументНаПодпись.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторДокумента;
		ОписаниеДокументНаПодпись.Организация 				= СтрокаТЗ.Организация;
		ОписаниеДокументНаПодпись.ФизическиеЛица 			= СтрокаТЗ.ФизическиеЛица;
		ОписаниеДокументНаПодпись.Дата 						= СтрокаТЗ.ДатаДокумента;
		ОписаниеДокументНаПодпись.НазваниеДокумента 		= СтрокаТЗ.НазваниеДокумента;
		ОписаниеДокументНаПодпись.ЭлектронныйДокумент 		= ОбъектЭлектронныйДокумент;
		ОбъектДокументНаПодпись = ОбъектСервисаПоОписанию(ОписаниеДокументНаПодпись, ОписаниеОбъектаДокументНаПодпись());
		
		ДокументыНаПодписьКПубликации.Добавить(ОбъектДокументНаПодпись);
		ИдентификаторыДокументов.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ПубликуемыйДокумент);
		
	КонецЦикла;
	
	РесурсСервиса = РесурсДокументыНаПодпись();
	РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыПодключения,
				РесурсСервиса,
				ДокументыНаПодписьКПубликации,
				"ID");
		
	РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	ВыгруженныеДокументы = Новый Соответствие;
	РезультатыСогласованияКПубликации = Новый Массив;
	Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		ДокументНаПодпись = ИдентификаторыДокументов[ИдентификаторДокумента];
		ВыгруженныеДокументы.Вставить(ДокументНаПодпись, Истина);
		РезультатыСогласования = ДокументРезультатыСогласования[ДокументНаПодпись];
		Если РезультатыСогласования <> Неопределено Тогда
			Для каждого РезультатСогласования Из РезультатыСогласования Цикл
				РезультатыСогласованияКПубликации.Добавить(РезультатСогласования);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
		СтрокаДанных = ТаблицаДанных.Найти(Ошибка.Ключ, "ИдентификаторДокумента");
		РезультатОбработки.НеВыгружено.Добавить(СтрокаДанных.ПубликуемыйДокумент);
		ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаДанных.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Если РезультатыСогласованияКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсРезультатыСогласования();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыПодключения,
			РесурсСервиса,
			РезультатыСогласованияКПубликации,
			"documentID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			СтрокаДанных = ТаблицаДанных.Найти(Ошибка.Ключ, "ИдентификаторДокумента");
			РезультатОбработки.НеВыгружено.Добавить(СтрокаДанных.ПубликуемыйДокумент);
			ВыгруженныеДокументы.Удалить(СтрокаДанных.ДокументНаПодпись);
			ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаДанных.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ВыгруженныеДокументы Цикл
		РезультатОбработки.Выгружено.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
	
	Возврат РезультатОбработки
	
КонецФункции

Функция ДанныеДляВыгрузкиДокументовНаПодпись(ТаблицаИзменений)

	ТаблицаДокументыНаПодпись = Новый ТаблицаЗначений;
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ПубликуемыйДокумент");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ЭлектронныйДокумент");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ИдентификаторДокумента");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("Организация");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ФизическиеЛица");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ДатаДокумента");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("НазваниеДокумента");
	
	ДокументыНаПодпись = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "Документ", Истина);
	ДокументыНаПодписьРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДокументыНаПодпись, "Дата,Представление");
	
	ЭлектронныеДокументы = ТаблицаИзменений.ВыгрузитьКолонку("ЭлектронныйДокумент");
	ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
	
	ПубликуемыеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ПубликуемыйДокумент", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ПубликуемыеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.Организация КАК Организация,
	|	ДокументКадровогоЭДО.ВнешниеПодписанты.(
	|		ФизическоеЛицо КАК ФизическоеЛицо
	|	) КАК ВнешниеПодписанты
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.Ссылка В(&Ссылки)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ПубликуемыеДокументыРеквизиты = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ЗначенияРеквизитов = Новый Структура("Организация,ФизическиеЛица");
		ЗначенияРеквизитов.Организация = Выборка.Организация;
		ЗначенияРеквизитов.ФизическиеЛица = Выборка.ВнешниеПодписанты.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		ПубликуемыеДокументыРеквизиты.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		НоваяСтрока = ТаблицаДокументыНаПодпись.Добавить();
		НоваяСтрока.ПубликуемыйДокумент 	= СтрокаТЗ.ПубликуемыйДокумент;
		НоваяСтрока.ЭлектронныйДокумент 	= СтрокаТЗ.ЭлектронныйДокумент;
		НоваяСтрока.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.ДанныеЭлектронногоДокумента = ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
		НоваяСтрока.Организация 		= ПубликуемыеДокументыРеквизиты[СтрокаТЗ.ПубликуемыйДокумент].Организация;
		НоваяСтрока.ФизическиеЛица 		= ПубликуемыеДокументыРеквизиты[СтрокаТЗ.ПубликуемыйДокумент].ФизическиеЛица;
		НоваяСтрока.ДатаДокумента 		= ДокументыНаПодписьРеквизитов[СтрокаТЗ.Документ].Дата;
		НазваниеДокумента = "";
		Если ЗначениеЗаполнено(НоваяСтрока.ДанныеЭлектронногоДокумента) Тогда
			НазваниеДокумента = НоваяСтрока.ДанныеЭлектронногоДокумента.Оригинал.Представление;
		Иначе
			НазваниеДокумента = ДокументыНаПодписьРеквизитов[СтрокаТЗ.Документ].Представление;
		КонецЕсли;
		НоваяСтрока.НазваниеДокумента 	= НазваниеДокумента;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументыНаПодпись;

КонецФункции

#КонецОбласти

#Область ВыгрузкаСправокСРаботы

Функция РезультатВыгрузкиСправокСРаботы(ПараметрыПодключения, ТаблицаПоТипуДанных)

	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	
	ИспользоватьФормат303 = ИспользоватьФормат303();
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	// Массив ссылок на документы КЭДО, по которым
	// не удалось сформировать объект для выгрузки.
	НеОбработанныеДокументы = Новый Массив;
	
	// Массив ссылок на документы КЭДО, по которым
	// заявка отказана, отменяем публикацию таких документов.
	ДокументыОтменитьРегистрацию = Новый Массив;
	
	ТаблицаДанных = ДанныеДляВыгрузкиСправокСРаботы(ТаблицаПоТипуДанных);
	Если ТаблицаДанных.Количество() = 0 Тогда
		РезультатОбработки.БылиОшибки = Истина;
		ОписаниеИзменений = НСтр("ru = 'Справки с места работы'");
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить данные справок'");
		ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки);
		Для каждого СтрокаТЗ Из ТаблицаПоТипуДанных Цикл
			НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
		Возврат РезультатОбработки;
	КонецЕсли;
	
	// Коллекция заявок с результатами согласования.
	// Ключ - ИдентификаторДокумента,
	// Значение - массив объектов РезультатСогласования.
	ДокументыРезультатыСогласования = Новый Соответствие;
	
	// Коллекция для получения документа КЭДО.
	// Ключ - идентификатор документа
	// Значение - ссылка на документ КЭДО.
	ИдентификаторыДокументов = Новый Соответствие;
	
	// Массив объектов справка для публикации.
	СправкиКПубликации = Новый Массив;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Если СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
			ДокументыОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			Продолжить;
		ИначеЕсли СтрокаТЗ.СостояниеЗаявки <> Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
			// Заявка еще не выполнена, пропускаем обработку документа.
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыДокументов.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ПубликуемыйДокумент);
		
		ОписаниеСправки = ОписаниеОбъекта(ОписаниеОбъектаСправкаСРаботы());
		ОписаниеСправки.Заявка 				= СтрокаТЗ.ИдентификаторДокумента;
		ОписаниеСправки.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
		ОписаниеСправки.Организация 		= СтрокаТЗ.Организация;
		ОписаниеСправки.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
		ОписаниеСправки.Комментарий 		= СтрокаТЗ.Комментарий;
		
		Если ИспользоватьФормат303 Тогда
			
			ТребуетсяЭП = ИспользоватьФормат303
				И (ИспользуетсяКадровыйЭДО
				Или СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
				
			Если ТребуетсяЭП И СтрокаТЗ.ДанныеЭлектронногоДокумента <> Неопределено Тогда
			
				Ответ = ЭлектронныйДокументРезультатыСогласования(ПараметрыПодключения, СтрокаТЗ.ДанныеЭлектронногоДокумента, СтрокаТЗ.ИдентификаторДокумента);
				
				ОбъектЭлектронныйДокумент 	= Ответ.ЭлектронныйДокумент;
				РезультатыСогласования 		= Ответ.РезультатыСогласования;
				Если ОбъектЭлектронныйДокумент = Неопределено Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					Продолжить;
				ИначеЕсли Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
					// нет ЭП с соответствующей ролью подписанта
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					ОписаниеОшибки = НСтр("ru = 'Отсутствует электронная подпись файла.'");
					ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.ЭлектронныйДокумент, ОписаниеОшибки);
					Продолжить;
				КонецЕсли;
				
				ДокументыРезультатыСогласования.Вставить(СтрокаТЗ.ИдентификаторДокумента, РезультатыСогласования);
				
			Иначе
				
				Если Не ЗначениеЗаполнено(СтрокаТЗ.ЭлектронныйДокумент) Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					ОписаниеОшибки = НСтр("ru = 'Нет данных электронного документа.'");
					ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.ПубликуемыйДокумент, ОписаниеОшибки);
					Продолжить;	
				КонецЕсли;
				
				ОбъектФайл = ОбъектФайлПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент, ПараметрыПодключения);
				
				Если ОбъектФайл = Неопределено Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					Продолжить;
				КонецЕсли;
				
				ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент());
				ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектФайл;
				ОбъектЭлектронныйДокумент = ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент());
				
			КонецЕсли;
			
			ОписаниеСправки.ЭлектронныйДокумент = ОбъектЭлектронныйДокумент;
			
		Иначе
			
			ОбъектВходящийФайл = ОбъектВходящийФайлПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент, ПараметрыПодключения);
			Если ОбъектВходящийФайл = Неопределено Тогда
				РезультатОбработки.БылиОшибки = Истина;
				НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Продолжить;
			КонецЕсли;
			
			ОписаниеСправки.Вложение = ОбъектВходящийФайл;
			
		КонецЕсли;
		
		ОбъектСправка = ОбъектСервисаПоОписанию(ОписаниеСправки, ОписаниеОбъектаСправкаСРаботы());
		
		СправкиКПубликации.Добавить(ОбъектСправка);
		
	КонецЦикла;
	
	РезультатыСогласованияКПубликации = Новый Массив;
	ВыгруженныеДокументы = Новый Соответствие;
	
	Если СправкиКПубликации.Количество() > 0  Тогда
		
		РесурсСервиса = РесурсСправкиСМестаРаботы();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыПодключения,
			РесурсСервиса,
			СправкиКПубликации,
			"ID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
			ВыгруженныеДокументы.Вставить(ИдентификаторыДокументов[ИдентификаторДокумента], Истина);
			РезультатыСогласования = ДокументыРезультатыСогласования[ИдентификаторДокумента];
			Если РезультатыСогласования <> Неопределено Тогда
				Для каждого РезультатСогласования Из РезультатыСогласования Цикл
					РезультатыСогласованияКПубликации.Добавить(РезультатСогласования);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			РезультатОбработки.НеВыгружено.Добавить(ИдентификаторыДокументов[Ошибка.Ключ]);
			ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатыСогласованияКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсРезультатыСогласования();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыПодключения,
			РесурсСервиса,
			РезультатыСогласованияКПубликации,
			"documentID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			РезультатОбработки.НеВыгружено.Добавить(ИдентификаторыДокументов[Ошибка.Ключ]);
			ВыгруженныеДокументы.Удалить(ИдентификаторыДокументов[Ошибка.Ключ]);
			ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ВыгруженныеДокументы Цикл
		РезультатОбработки.Выгружено.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.ОтменитьРегистрацию, ДокументыОтменитьРегистрацию);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ДанныеДляВыгрузкиСправокСРаботы(ТаблицаИзменений)

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ПубликуемыйДокумент");
	ТаблицаДанных.Колонки.Добавить("ИдентификаторДокумента");
	ТаблицаДанных.Колонки.Добавить("Заявка");
	ТаблицаДанных.Колонки.Добавить("СостояниеЗаявки");
	ТаблицаДанных.Колонки.Добавить("ИдентификаторЗаявки");
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаДанных.Колонки.Добавить("ЭлектронныйДокумент");
	ТаблицаДанных.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	ТаблицаДанных.Колонки.Добавить("ВариантФормированияФайлаОтвета");
	ТаблицаДанных.Колонки.Добавить("Комментарий");
	
	Заявки = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "Документ", Истина);
	ДанныеЗаявок = БизнесПроцессыЗаявокСотрудников.ДанныеЗаявокСправкиСРаботы(Заявки);
	Если ДанныеЗаявок = Неопределено Тогда
		Возврат ТаблицаДанных;
	КонецЕсли;
	
	ЭлектронныеДокументыСправок = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		ЭлектронныеДокументыСправок = ТаблицаИзменений.ВыгрузитьКолонку("ЭлектронныйДокумент");
	Иначе
		Отбор = Новый Структура("ВариантФормированияФайлаОтвета", Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		НайденныеСтроки = ДанныеЗаявок.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			Если СтрокаТЗ.СостояниеЗаявки <> Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицыИзменений = ТаблицаИзменений.Найти(СтрокаТЗ.Заявка, "Документ");
			Если ЗначениеЗаполнено(СтрокаТаблицыИзменений) Тогда
				ЭлектронныеДокументыСправок.Добавить(СтрокаТаблицыИзменений.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронныеДокументы = Новый Массив;
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументыСправок Цикл
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			ЭлектронныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЭлектронныхДокументов = Новый Соответствие;
	Если ЭлектронныеДокументы.Количество() > 0 Тогда
		Попытка
			ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
		Исключение
			Возврат ТаблицаДанных;
		КонецПопытки;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		
		СтрокаЗаявки = ДанныеЗаявок.Найти(СтрокаТЗ.Документ, "Заявка");
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ПубликуемыйДокумент 	= СтрокаТЗ.ПубликуемыйДокумент;
		НоваяСтрока.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.Заявка 					= СтрокаТЗ.Документ;
		НоваяСтрока.ЭлектронныйДокумент 	= СтрокаТЗ.ЭлектронныйДокумент;
		НоваяСтрока.ИдентификаторЗаявки 	= СтрокаЗаявки.ИдентификаторЗаявки;
		НоваяСтрока.Организация 			= СтрокаЗаявки.Организация;
		НоваяСтрока.ФизическоеЛицо 			= СтрокаЗаявки.ФизическоеЛицо;
		НоваяСтрока.Комментарий 			= СтрокаЗаявки.Комментарий;
		НоваяСтрока.СостояниеЗаявки 		= СтрокаЗаявки.СостояниеЗаявки;
		НоваяСтрока.ВариантФормированияФайлаОтвета 	= СтрокаЗаявки.ВариантФормированияФайлаОтвета;
		НоваяСтрока.ДанныеЭлектронногоДокумента 	= ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
	
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции

#КонецОбласти

#Область Выгрузка2НФДЛ

Функция РезультатВыгрузки2НДФЛ(ПараметрыПодключения, ТаблицаПоТипуДанных)

	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	
	ИспользоватьФормат303 = ИспользоватьФормат303();
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	ТаблицаДанных = ДанныеДляВыгрузки2НДФЛ(ТаблицаПоТипуДанных);
	ТаблицаДанных.Сортировать("ИдентификаторЗаявки");
	
	// Массив ссылок на документы КЭДО, которые не обрабатываем,
	// если ИспользоватьФормат303 = Ложь, снимаем с регистрации изменений
	// после выгрузки данных.
	ДокументыОтменитьРегистрацию = Новый Массив;
	
	// Массив ссылок на документы КЭДО, по которым
	// не удалось сформировать объект для выгрузки.
	НеОбработанныеДокументы = Новый Массив;
	
	// Коллекция с результатами согласования.
	// Ключ - ИдентификатоДокумента
	// Значение - массив объектов РезультатСогласования.
	ДокументРезультатыСогласования = Новый Соответствие;
	
	// Массив объектов справка 2НДФЛ для публикации когда ИспользоватьФормат303 = Истина.
	СправкиКПубликации = Новый Массив;
	
	// Коллекция объектов справка 2НДФЛ для формирования ответа на запрос справок,
	// когда ИспользоватьФормат303 = Ложь.
	// Ключ - ИдентификаторЗаявки
	// Значение - массив объектов справка 2НДФЛ.
	ОбъектыСправкаПоИдентификаторам = Новый Соответствие;
	
	// Коллекция для получения документа КЭДО.
	// Ключ - идентификатор документа
	// Значение - ссылка на документ КЭДО.
	ИдентификаторыДокументов = Новый Соответствие;
	
	// Коллекция для получения документа КЭДО.
	// Ключ - идентификатор документа
	// Значение - ссылка на справку 2НДФЛ.
	ИдентификаторыДокументовСправки = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Если СтрокаТЗ.СостояниеЗаявки <> Неопределено Тогда
			Если СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				ДокументыОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Продолжить;
			ИначеЕсли СтрокаТЗ.СостояниеЗаявки <> Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				// Заявка еще не выполнена, пропускаем обработку документа.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИдентификаторыДокументов.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ПубликуемыйДокумент);
		ИдентификаторыДокументовСправки.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.Справка2НДФЛ);
		
		Если Не ИспользоватьФормат303 И Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЗаявки) Тогда
			ДокументыОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			Продолжить;
		КонецЕсли;
		
		ОписаниеСправка2НДФЛ = ОписаниеОбъекта(ОписаниеОбъектаСправка2НДФЛ());
		ОписаниеСправка2НДФЛ.Справка2НДФЛ 		= СтрокаТЗ.ИдентификаторДокумента;
		ОписаниеСправка2НДФЛ.Организация 		= СтрокаТЗ.Организация;
		ОписаниеСправка2НДФЛ.ФизическоеЛицо 	= СтрокаТЗ.ФизическоеЛицо;
		ОписаниеСправка2НДФЛ.НалоговыйПериод 	= СтрокаТЗ.НалоговыйПериод;
		ОписаниеСправка2НДФЛ.СуммаДохода 		= СтрокаТЗ.СуммаДохода;
		ОписаниеСправка2НДФЛ.СуммаНалога 		= СтрокаТЗ.СуммаНалога;
		ОписаниеСправка2НДФЛ.ДатаСоздания 		= СтрокаТЗ.ДатаСоздания;
		ОписаниеСправка2НДФЛ.Комментарий 		= СтрокаТЗ.Комментарий;
		
		Если ИспользоватьФормат303 Тогда
			
			// Если это справка на основании заявки из сервиса.
			Если ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЗаявки) Тогда
				ОписаниеСправка2НДФЛ.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
			КонецЕсли;
			
			ТребуетсяЭП = ИспользуетсяКадровыйЭДО
				Или СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП;
				
			Если ТребуетсяЭП И СтрокаТЗ.ДанныеЭлектронногоДокумента <> Неопределено Тогда
				
				Ответ = ЭлектронныйДокументРезультатыСогласования(ПараметрыПодключения, СтрокаТЗ.ДанныеЭлектронногоДокумента, СтрокаТЗ.ИдентификаторДокумента);
				
				ОбъектЭлектронныйДокумент 	= Ответ.ЭлектронныйДокумент;
				РезультатыСогласования 		= Ответ.РезультатыСогласования;
				Если ОбъектЭлектронныйДокумент = Неопределено Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					Продолжить;
				ИначеЕсли Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
					// нет ЭП с соответствующей ролью подписанта
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					ОписаниеОшибки = НСтр("ru = 'Отсутствует электронная подпись файла.'");
					ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.ЭлектронныйДокумент, ОписаниеОшибки);
					Продолжить;
				КонецЕсли;
				
				ДокументРезультатыСогласования.Вставить(СтрокаТЗ.ИдентификаторДокумента, РезультатыСогласования);
				
			Иначе
				
				ОбъектФайл = ОбъектФайлПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент, ПараметрыПодключения);
				
				Если ОбъектФайл = Неопределено Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					Продолжить;
				КонецЕсли;
				
				ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент());
				ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектФайл;
				ОбъектЭлектронныйДокумент = ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент());
				
			КонецЕсли;
			
			ОписаниеСправка2НДФЛ.ЭлектронныйДокумент = ОбъектЭлектронныйДокумент;
			
			ОбъектСправка2НДФЛ = ОбъектСервисаПоОписанию(ОписаниеСправка2НДФЛ, ОписаниеОбъектаСправка2НДФЛ());
			СправкиКПубликации.Добавить(ОбъектСправка2НДФЛ);
			
		Иначе
			
			ОбъектВходящийФайл = ОбъектВходящийФайлПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент, ПараметрыПодключения);
						
			Если ОбъектВходящийФайл = Неопределено Тогда
				РезультатОбработки.БылиОшибки = Истина;
				НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Продолжить;
			КонецЕсли;
			
			ОписаниеСправка2НДФЛ.Вложение = ОбъектВходящийФайл;
			
			ОбъектСправка2НДФЛ = ОбъектСервисаПоОписанию(ОписаниеСправка2НДФЛ, ОписаниеОбъектаСправка2НДФЛ());
			
			МассивСправок = ОбъектыСправкаПоИдентификаторам[СтрокаТЗ.ИдентификаторЗаявки];
			Если МассивСправок = Неопределено Тогда
				МассивСправок = Новый Массив;
			КонецЕсли;
			МассивСправок.Добавить(ОбъектСправка2НДФЛ);
			ОбъектыСправкаПоИдентификаторам.Вставить(СтрокаТЗ.ИдентификаторЗаявки, МассивСправок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьФормат303 И СправкиКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсСправка2НДФЛ();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыПодключения,
				РесурсСервиса,
				СправкиКПубликации,
				"ID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		ВыгруженныеДокументы = Новый Соответствие;
		// Добавим в РезультатыСогласованияКПубликации данные по выгруженным справкам.
		РезультатыСогласованияКПубликации = Новый Массив;
		Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
			ВыгруженныеДокументы.Вставить(ИдентификаторыДокументов[ИдентификаторДокумента]);
			РезультатыСогласования = ДокументРезультатыСогласования[ИдентификаторДокумента];
			Если РезультатыСогласования <> Неопределено Тогда
				Для каждого РезультатСогласования Из РезультатыСогласования Цикл
					РезультатыСогласованияКПубликации.Добавить(РезультатСогласования);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			РезультатОбработки.НеВыгружено.Добавить(ИдентификаторыДокументов[Ошибка.Ключ]);
			ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
		Если РезультатыСогласованияКПубликации.Количество() > 0 Тогда
			
			РесурсСервиса = РесурсРезультатыСогласования();
			РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
					ПараметрыПодключения,
					РесурсСервиса,
					РезультатыСогласованияКПубликации,
					"documentID");
			
			РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				РезультатОбработки.НеВыгружено.Добавить(ИдентификаторыДокументов[Ошибка.Ключ]);
				ВыгруженныеДокументы.Удалить(ИдентификаторыДокументов[Ошибка.Ключ]);
				ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из ВыгруженныеДокументы Цикл
			РезультатОбработки.Выгружено.Добавить(ЭлементКоллекции.Ключ);
		КонецЦикла;
		
	КонецЕсли;
		
	Если Не ИспользоватьФормат303 И ОбъектыСправкаПоИдентификаторам.Количество() > 0 Тогда
		
		ТаблицаДанных.Индексы.Добавить("ИдентификаторЗаявки");
		Отбор = Новый Структура("ИдентификаторЗаявки");
		
		ОтветыНаЗапросыКПубликации = Новый Массив;
		Для каждого ЭлементКоллекции Из ОбъектыСправкаПоИдентификаторам Цикл
		
			ИдентификаторЗаявки = ЭлементКоллекции.Ключ;
			ОбъектыСправка = ЭлементКоллекции.Значение;
			
			Организация 	= ОбъектыСправка[0].employerID;
			ФизическоеЛицо 	= ОбъектыСправка[0].personID;
			
			ОписаниеОтвет = ОписаниеОбъекта(ОписаниеОбъектаОтветНаЗапросСправок2НДФЛ());
			ОписаниеОтвет.ИдентификаторЗаявки 	= ИдентификаторЗаявки;
			ОписаниеОтвет.Организация 			= Организация;
			ОписаниеОтвет.ФизическоеЛицо 		= ФизическоеЛицо;
			ОписаниеОтвет.Справки2НДФЛ 			= ОбъектыСправка;
			
			ОбъектОтвет = ОбъектСервисаПоОписанию(ОписаниеОтвет, ОписаниеОбъектаОтветНаЗапросСправок2НДФЛ());
			ОтветыНаЗапросыКПубликации.Добавить(ОбъектОтвет);
		
		КонецЦикла;
		
		РесурсСервиса = РесурсОтветыНаЗапросыСправок2НДФЛ();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыПодключения,
				РесурсСервиса,
				ОтветыНаЗапросыКПубликации,
				"requestID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого ИдентификаторЗаявки Из РезультатВыгрузки.Выгружено Цикл
			Отбор.ИдентификаторЗаявки = ИдентификаторЗаявки;
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				РезультатОбработки.Выгружено.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			// Не найденные заявки с таким идентификатором, регистрируем как успешно выгруженные.
			РегистрироватьКаКВыгружена = (ЗначениеЗаполнено(Ошибка.Значение) И СтрНайти(Ошибка.Значение, "objectNotFound") > 0);
			ИдентификаторЗаявки = Ошибка.Ключ;
			Отбор.ИдентификаторЗаявки = ИдентификаторЗаявки;
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если РегистрироватьКаКВыгружена Тогда
					РезультатОбработки.Выгружено.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Иначе	
					РезультатОбработки.НеВыгружено.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				КонецЕсли;
			КонецЦикла;
			ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаТЗ.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
	РезультатОбработки.ОтменитьРегистрацию = ДокументыОтменитьРегистрацию;
		
	Возврат РезультатОбработки;
	
КонецФункции

Функция ДанныеДляВыгрузки2НДФЛ(ТаблицаИзменений)

	Справки2НДФЛ = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "Документ", Истина);
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	БизнесПроцессыЗаявокСотрудников.СоздатьВТЗаявкиПоСправкам2НДФЛ(МенеджерВТ, Справки2НДФЛ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзменений.ПубликуемыйДокумент КАК ПубликуемыйДокумент,
	|	ТаблицаИзменений.Документ КАК Справка2НДФЛ,
	|	ТаблицаИзменений.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ТаблицаИзменений.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|	&ТаблицаИзменений КАК ТаблицаИзменений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Изменения.Справка2НДФЛ КАК Ссылка
	|ПОМЕСТИТЬ ВТСсылки
	|ИЗ
	|	ВТИзменения КАК Изменения";
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТДанныеСправок2НДФЛДляПубликации(МенеджерВТ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзменений.ПубликуемыйДокумент КАК ПубликуемыйДокумент,
	|	ТаблицаИзменений.Справка2НДФЛ КАК Справка2НДФЛ,
	|	ТаблицаИзменений.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ТаблицаИзменений.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ЕСТЬNULL(Заявки.ИдентификаторЗаявки, """") КАК ИдентификаторЗаявки,
	|	ЕСТЬNULL(Заявки.ОтветПоЗаявке, """") КАК Комментарий,
	|	ЕСТЬNULL(Заявки.Заявка, НЕОПРЕДЕЛЕНО) КАК Заявка,
	|	ЕСТЬNULL(Заявки.ВариантФормированияФайлаОтвета, НЕОПРЕДЕЛЕНО) КАК ВариантФормированияФайлаОтвета,
	|	ЕСТЬNULL(Заявки.СостояниеЗаявки, НЕОПРЕДЕЛЕНО) КАК СостояниеЗаявки,
	|	ДанныеСправок2НДФЛ.Организация КАК Организация,
	|	ДанныеСправок2НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеСправок2НДФЛ.ДатаСоздания КАК ДатаСоздания,
	|	ДанныеСправок2НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
	|	ДанныеСправок2НДФЛ.СуммаДохода КАК СуммаДохода,
	|	ДанныеСправок2НДФЛ.СуммаНалога КАК СуммаНалога
	|ИЗ
	|	ВТИзменения КАК ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиПоСправкам2НДФЛ КАК Заявки
	|		ПО ТаблицаИзменений.Справка2НДФЛ = Заявки.СправкаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСправок2НДФЛДляПубликации КАК ДанныеСправок2НДФЛ
	|		ПО ТаблицаИзменений.Справка2НДФЛ = ДанныеСправок2НДФЛ.Ссылка";
	
	ДанныеДляВыгрузки = Запрос.Выполнить().Выгрузить();
	ДанныеДляВыгрузки.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		ЭлектронныеДокументы = Новый Массив;
		Для каждого СтрокаТЗ Из ДанныеДляВыгрузки Цикл
			Если СтрокаТЗ.СостояниеЗаявки <> Неопределено 
				И СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена
				И ЗначениеЗаполнено(СтрокаТЗ.ЭлектронныйДокумент)Тогда
				ЭлектронныеДокументы.Добавить(СтрокаТЗ.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
		
		Для каждого СтрокаТЗ Из ДанныеДляВыгрузки Цикл
			СтрокаТЗ.ДанныеЭлектронногоДокумента = ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
		КонецЦикла;
		
	Иначе
		
		Отбор = Новый Структура("ВариантФормированияФайлаОтвета", Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		НайденныеСтроки = ДанныеДляВыгрузки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ЭлектронныеДокументы = Новый Массив;
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена 
					И ЗначениеЗаполнено(СтрокаТЗ.ЭлектронныйДокумент)Тогда
					ЭлектронныеДокументы.Добавить(СтрокаТЗ.ЭлектронныйДокумент);
				КонецЕсли;
			КонецЦикла;
			ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
			
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаТЗ.ДанныеЭлектронногоДокумента = ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПубликацияРасчетныхЛистков

// Публикация расчетных листков из формы публикации.
Процедура ОпубликоватьРасчетныеЛистыВФоне(Параметры, АдресХранилища) Экспорт
	
	// Параметры ПодготовитьДанныеДляТехПоддержки, ДатаНачала, ДатаОкончания
	// используются для получения списка событий журнала регистрации при подготовке
	// данных для техподдержки.
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), Настройки.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), Настройки.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Начало процесса публикации расчетных листков.'");
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
	БылиОшибки = Ложь;
	КоличествоВыгружено = 0;
	Попытка
		
		ПроверитьВерсиюОбновитьФункциональностьСервиса(Параметры.ПодготовитьДанныеДляТехПоддержки);
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПубликацияРасчетныхЛистов(), Параметры.ПодготовитьДанныеДляТехПоддержки);
		
		ПроверитьОпубликоватьФизическихЛиц(Параметры.СписокФизическихЛиц, ПараметрыПодключения);
		
		ПараметрыВыгрузки = Новый Структура("Организация,МесяцРасчетныхЛистов,СписокФизическихЛиц,ПовторнаяПубликация");
		ПараметрыВыгрузки.Организация 			= Параметры.Организация;
		ПараметрыВыгрузки.МесяцРасчетныхЛистов 	= Параметры.МесяцРасчетныхЛистов;
		ПараметрыВыгрузки.СписокФизическихЛиц 	= Параметры.СписокФизическихЛиц;
		ПараметрыВыгрузки.ПовторнаяПубликация 	= Параметры.ПовторнаяПубликация;
		
		Ответ = РезультатВыгрузкиРасчетныхЛистков(ПараметрыПодключения, ПараметрыВыгрузки);
		БылиОшибки = Ответ.БылиОшибки;
		
		КоличествоВыгружено = Ответ.КоличествоВыгружено;
		
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СтрокаСобытие = НСтр("ru = 'Окончание процесса публикации расчетных листков. Опубликовано: %1.'");
	СтрокаСобытие = СтрШаблон(СтрокаСобытие, КоличествоВыгружено);
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
	
	Результат.ДатаОкончания = ТекущаяДатаСеанса();
	Результат.БылиОшибки = БылиОшибки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Публикация расчетных листков из формы интеграции с сервисом.
Процедура ОпубликоватьРасчетныеЛистыЗаМесяцВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьВерсиюОбновитьФункциональностьСервиса(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Месяц", ПараметрыПроцедуры.Месяц);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(&Месяц, ДЕНЬ) КАК Период,
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ПО ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = НачисленияУдержанияПоСотрудникам.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) = &Месяц)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|		ПО ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации") Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для выгрузки.'");
	КонецЕсли;
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "Организация");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанные.Организация КАК Организация,
	|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	КадровыеДанные.Организация,
	|	КадровыеДанные.ФизическоеЛицо";
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), Настройки.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), Настройки.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Начало процесса публикации расчетных листков.'");
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
	КоличествоВыгружено = 0;
	БылиОшибки = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Организация = Выборка.Организация;
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПубликацияРасчетныхЛистов(), Ложь);
		
		ПараметрыВыгрузки = Новый Структура("Организация,МесяцРасчетныхЛистов,СписокФизическихЛиц,ПовторнаяПубликация");
		ПараметрыВыгрузки.Организация = Организация;
		ПараметрыВыгрузки.МесяцРасчетныхЛистов = ПараметрыПроцедуры.Месяц;
		ПараметрыВыгрузки.СписокФизическихЛиц = СписокФизическихЛиц;
		ПараметрыВыгрузки.ПовторнаяПубликация = Ложь;
		Ответ = РезультатВыгрузкиРасчетныхЛистков(ПараметрыПодключения, ПараметрыВыгрузки);
		
		БылиОшибки = БылиОшибки Или Ответ.БылиОшибки;
		КоличествоВыгружено = КоличествоВыгружено + Ответ.КоличествоВыгружено;
		
	КонецЦикла;
	
	СтрокаСобытие = НСтр("ru = 'Окончание процесса публикации расчетных листков. Опубликовано: %1.'");
	СтрокаСобытие = СтрШаблон(СтрокаСобытие, КоличествоВыгружено);
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Публикация расчетных листков после подключения к сервису.
Процедура ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков)

	Если ПериодыРасчетныхЛистков.Количество() = 0 Тогда
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|		ПО ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), Настройки.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), Настройки.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Начало процесса публикации расчетных листков после подключения сервиса.'");
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
	КоличествоВыгружено = 0;
	БылиОшибки = Ложь;
	Для каждого МесяцПубликации Из ПериодыРасчетныхЛистков Цикл
		
		ФизическиеЛицаПоОрганизациям = ФизическиеЛицаОрганизаций(МесяцПубликации, Запрос.МенеджерВременныхТаблиц);
		ПериодПубликации = НачалоМесяца(МесяцПубликации);
		
		Для Каждого ФизическиеЛицаОрганизации Из ФизическиеЛицаПоОрганизациям Цикл
			
			Организация = ФизическиеЛицаОрганизации.Ключ;
			СписокФизическихЛиц = ФизическиеЛицаОрганизации.Значение;
			
			ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПубликацияРасчетныхЛистов(), Ложь);
			
			ПараметрыВыгрузки = Новый Структура("Организация,МесяцРасчетныхЛистов,СписокФизическихЛиц,ПовторнаяПубликация");
			ПараметрыВыгрузки.Организация 			= Организация;
			ПараметрыВыгрузки.МесяцРасчетныхЛистов 	= ПериодПубликации;
			ПараметрыВыгрузки.СписокФизическихЛиц 	= СписокФизическихЛиц;
			ПараметрыВыгрузки.ПовторнаяПубликация 	= Ложь;
			Ответ = РезультатВыгрузкиРасчетныхЛистков(ПараметрыПодключения, ПараметрыВыгрузки);
			
			БылиОшибки = БылиОшибки Или Ответ.БылиОшибки;
			КоличествоВыгружено = КоличествоВыгружено + Ответ.КоличествоВыгружено;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокаСобытие = НСтр("ru = 'Окончание процесса публикации расчетных листков после подключения сервиса. Опубликовано: %1.'");
	СтрокаСобытие = СтрШаблон(СтрокаСобытие, КоличествоВыгружено);
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

Функция РезультатВыгрузкиРасчетныхЛистков(ПараметрыПодключения, ПараметрыВыгрузки) 
	
	// КоличествоВыгружено - количество выгруженных данных,
	// БылиОшибки - признак наличия ошибок при выгрузке,
	// НеОбработаны - Массив - физические лица, по которым нет данных о зарплате.
	РезультатОбработки = Новый Структура("КоличествоВыгружено,БылиОшибки,НеОбработаны", 0, Ложь);
	
	Организация = ПараметрыВыгрузки.Организация;
	МесяцРасчетныхЛистов = НачалоМесяца(ПараметрыВыгрузки.МесяцРасчетныхЛистов);
	СписокФизическихЛиц = ПараметрыВыгрузки.СписокФизическихЛиц;
	Данные = ДанныеРасчетныхЛистов(Организация, МесяцРасчетныхЛистов, СписокФизическихЛиц, ПараметрыВыгрузки.ПовторнаяПубликация);
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	РесурсСервиса = РесурсСоставныеЧастиЗарплаты();
	РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
		ПараметрыПодключения,
		РесурсСервиса,
		Данные.СоставныеЧастиЗарплаты,
		"ID");
		
	Если РезультатВыгрузки.БылиОшибки Тогда
		РезультатОбработки.БылиОшибки = Истина;
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ПубликоватьДокументыНаПодпись = ИспользоватьФормат303();
	
	ДокументыКЭДО = ДокументыКЭДОРасчетныхЛистков(Организация, МесяцРасчетныхЛистов, СписокФизическихЛиц, Ложь);
	
	ШаблонНаименованияФайла = НСтр("ru = '%1.%2'");
	ШаблонИмяФайла = НСтр("ru = '%1 Расчетный лист. %2'");
	ПериодСтрокой = Формат(МесяцРасчетныхЛистов, "ДФ='MMMM yyyy'");
	РасширениеФайла = "pdf";
	
	ДокументыНаПодписьКПубликации 	= Новый Массив;
	РасчетныеЛисткиКПубликации 		= Новый Массив;
	
	ФизическиеЛицаСДаннымиОЗарплате = Новый Соответствие;
	ФизическиеЛицаДокументыКЭДО 	= Новый Соответствие;
	ИдентификаторыДокументов 		= Новый Соответствие;
	
	ДокументыКЭДОПрежниеФайлы 				= Новый Соответствие;
	ИдентификаторДокументаРасчетныйЛисток 	= Новый Соответствие;
	
	// Данные.ИнформацияОЗарплате - массив структур
	Для Каждого ОбъектИнформацияОЗарплате Из Данные.ИнформацияОЗарплате Цикл
		
		ФизическоеЛицо = ОбъектИнформацияОЗарплате.personID;
		
		РасчетныйЛистДокумент = Данные.РасчетныеЛистыДокументы.Получить(ФизическоеЛицо);
		Если РасчетныйЛистДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ДокументКЭДОСсылка = ДокументыКЭДО[ФизическоеЛицо];
			Если ДокументКЭДОСсылка <> Неопределено Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ДокументКадровогоЭДО");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументКЭДОСсылка);
				Блокировка.Заблокировать();
				
				ДокументКЭДООбъект = ДокументКЭДОСсылка.ПолучитьОбъект();
				ДокументКЭДОФайл   = ДокументКЭДООбъект.ЭлектронныйДокумент;
				
			Иначе
				
				ДокументКЭДОФайл = Неопределено;
				ДокументКЭДОСсылка = Документы.ДокументКадровогоЭДО.ПолучитьСсылку();
				ДокументКЭДООбъект = НовыйДокументКЭДО(Организация, ФизическоеЛицо, ДокументКЭДОСсылка);
				
			КонецЕсли;
			
			ИдентификаторыДокументов.Вставить(ДокументКЭДООбъект.ИдентификаторДокумента, ДокументКЭДОСсылка);
			
			РеквизитыОбъекта =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицо, "Фамилия,Инициалы");
			ФИО = СтрШаблон("%1 %2", РеквизитыОбъекта["Фамилия"], СтрЗаменить(РеквизитыОбъекта["Инициалы"]," ",""));
			
			// Создаем присоединенный файл расчетного листка
			ИмяФайла = СтрШаблон(ШаблонИмяФайла, ФИО, ПериодСтрокой);
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов 		= ДокументКЭДОСсылка;
			ПараметрыФайла.ИмяБезРасширения 	= ИмяФайла;
			ПараметрыФайла.РасширениеБезТочки 	= "PDF";
			ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
			ПараметрыФайла.Служебный = Истина;
			
			Поток = Новый ПотокВПамяти();
			РасчетныйЛистДокумент.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
			ДвоичныеДанные =  Поток.ЗакрытьИПолучитьДвоичныеДанные();
			РазмерФайла = ДвоичныеДанные.Размер();
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			ФайлРасчетногоЛистка = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
			
			// публикация файла в сервисе
			ИдентификаторФайла = ОпубликоватьПрисоединенныйФайл(ПараметрыПодключения, ФайлРасчетногоЛистка, РасширениеФайла);
			Если ИдентификаторФайла = Неопределено Тогда
				ОписаниеОшибки = НСтр("ru = 'Ошибка публикации файла расчетного листка.'");
				ЗаписатьОшибкуВыгрузкиИзменений(ФизическоеЛицо, ОписаниеОшибки);
				РезультатОбработки.БылиОшибки = Истина;
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			// запоминаем "старый" файл
			Если ЗначениеЗаполнено(ДокументКЭДОФайл) Тогда
				ФайлыДокумента = Новый Структура("СтарыйФайл,НовыйФайл", ДокументКЭДОФайл, ФайлРасчетногоЛистка);
				ДокументыКЭДОПрежниеФайлы.Вставить(ДокументКЭДОСсылка, ФайлыДокумента);
			КонецЕсли;
			
			// обновим ссылку на файл - ЭлектронныйДокумент
			ДокументКЭДООбъект.ЭлектронныйДокумент = ФайлРасчетногоЛистка;
			ДокументКЭДООбъект.ОснованиеДокумента = ДокументКЭДОСсылка;
			ДокументКЭДООбъект.Записать();
			
			ФизическиеЛицаДокументыКЭДО.Вставить(ФизическоеЛицо, ДокументКЭДОСсылка);
			
			Если ПубликоватьДокументыНаПодпись Тогда
				
				// Формирование объекта ДокументНаПодпись
				ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаФайл());
				ОписаниеФайла.НаименованиеФайла 	= ИмяФайла;
				ОписаниеФайла.РасширениеФайла 		= РасширениеФайла;
				ОписаниеФайла.РазмерФайла 			= РазмерФайла;
				ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
				ОписаниеФайла.ХешСумма 				= ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанные);;
				ОбъектФайл = ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаФайл());
				
				ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент());
				ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектФайл;
				ОбъектЭлектронныйДокумент = ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент());
				
				ОписаниеДокументНаПодпись = ОписаниеОбъекта(ОписаниеОбъектаДокументНаПодпись());
				ОписаниеДокументНаПодпись.ИдентификаторДокумента = ДокументКЭДООбъект.ИдентификаторДокумента;
				ОписаниеДокументНаПодпись.Организация 			= Организация;
				ОписаниеДокументНаПодпись.ФизическиеЛица 		= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
				ОписаниеДокументНаПодпись.Дата 					= ТекущаяДатаСеанса();
				ОписаниеДокументНаПодпись.НазваниеДокумента 	= ИмяФайла;
				ОписаниеДокументНаПодпись.ЭлектронныйДокумент 	= ОбъектЭлектронныйДокумент;
				ОбъектДокументНаПодпись = ОбъектСервисаПоОписанию(ОписаниеДокументНаПодпись, ОписаниеОбъектаДокументНаПодпись());
				
				ДокументыНаПодписьКПубликации.Добавить(ОбъектДокументНаПодпись);
				
				// дозаполнение объекта ОбъектИнформацияОЗарплате
				ОписаниеДокументНаПодпись = ОписаниеОбъекта(ОписаниеОбъектаДокументНаПодпись());
				ОписаниеДокументНаПодпись.ИдентификаторДокумента = ДокументКЭДООбъект.ИдентификаторДокумента;
				ОбъектДокументНаПодпись = ОбъектСервисаПоОписанию(ОписаниеДокументНаПодпись, ОписаниеОбъектаДокументНаПодпись());
				ОбъектИнформацияОЗарплате.documentsToBeSigned = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектДокументНаПодпись);
				
				ИдентификаторДокументаРасчетныйЛисток.Вставить(ДокументКЭДООбъект.ИдентификаторДокумента, ОбъектИнформацияОЗарплате);
				
			Иначе
				
				ОбъектФайл = Новый Структура;
				ОбъектФайл.Вставить("fileID", ИдентификаторФайла);
				ОбъектФайл.Вставить("name", СтрШаблон(ШаблонНаименованияФайла, ИмяФайла, РасширениеФайла));
				ОбъектФайл.Вставить("extension", РасширениеФайла);
				ОбъектИнформацияОЗарплате.Вставить("attachment", ОбъектФайл);
				
				РасчетныеЛисткиКПубликации.Добавить(ОбъектИнформацияОЗарплате);
				
			КонецЕсли;
			
			ФизическиеЛицаСДаннымиОЗарплате.Вставить(ФизическоеЛицо, Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОписаниеИзменений = НСтр("ru = 'Расчетные листки'");
			ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки());
			РезультатОбработки.БылиОшибки = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	ОпубликованныеДокументы = Новый Соответствие;
	ОпубликованныеФизическиеЛица = Новый Соответствие;
	
	Если ДокументыНаПодписьКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсДокументыНаПодпись();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыПодключения,
				РесурсСервиса,
				ДокументыНаПодписьКПубликации,
				"ID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		// Добавим в РасчетныеЛисткиКПубликации данные по физическим лицам,
		// для которых выгружены документы на подпись.
		Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
			ОбъектИнформацияОЗарплате = ИдентификаторДокументаРасчетныйЛисток[ИдентификаторДокумента];
			РасчетныеЛисткиКПубликации.Добавить(ОбъектИнформацияОЗарплате);
			ОпубликованныеДокументы.Вставить(ИдентификаторыДокументов[ИдентификаторДокумента], Истина);
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатВыгрузки = НовыйРезультатВыгрузки();
	Если РасчетныеЛисткиКПубликации.Количество() = 0 Тогда
		РезультатОбработки.КоличествоВыгружено = 0;
	Иначе
		
		РесурсСервиса = РесурсРасчетныеЛисты();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыПодключения,
				РесурсСервиса,
				РасчетныеЛисткиКПубликации,
				"personID",
				,
				30);
				
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		РезультатОбработки.КоличествоВыгружено = РезультатВыгрузки.Выгружено.Количество();
		
		Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
			ОпубликованныеФизическиеЛица.Вставить(ФизическоеЛицо, Истина);
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаРЛ = Новый ТаблицаЗначений;
	ТаблицаРЛ.Колонки.Добавить("Организация");
	ТаблицаРЛ.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаРЛ.Колонки.Добавить("Месяц");
	ТаблицаРЛ.Колонки.Добавить("ПерваяПоловинаМесяца");
	ТаблицаРЛ.Колонки.Добавить("СостояниеПубликации");
	ТаблицаРЛ.Колонки.Добавить("ДатаПубликации");
	ТаблицаРЛ.Колонки.Добавить("ДокументКадровогоЭДО");
	ТаблицаРЛ.Колонки.Добавить("Ответственный");
	
	ПодписиДокументовКУдалению = Новый ТаблицаЗначений;
	ПодписиДокументовКУдалению.Колонки.Добавить("Объект");
	ПодписиДокументовКУдалению.Колонки.Добавить("ФизическоеЛицо");
	
	ДокументыВозвратФайлов = Новый ТаблицаЗначений;
	ДокументыВозвратФайлов.Колонки.Добавить("ДокументКадровогоЭДО");
	ДокументыВозвратФайлов.Колонки.Добавить("ЭлектронныйДокумент");
	
	ФайлыКУдалению = Новый ТаблицаЗначений;
	ФайлыКУдалению.Колонки.Добавить("Файл");
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ДатаПубликации = ТекущаяДатаСеанса();
	
	Для каждого ЭлементКоллекции Из ФизическиеЛицаДокументыКЭДО Цикл
	
		ФизическоеЛицо = ЭлементКоллекции.Ключ;
		ДокументКЭДО = ЭлементКоллекции.Значение;
		
		Если ОпубликованныеФизическиеЛица[ФизическоеЛицо] = Неопределено Тогда
			// не удалось опубликовать расчетный листок
			СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.ОшибкаОбработки;
		Иначе
			СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.Опубликован;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРЛ.Добавить();
		НоваяСтрока.Организация 			= Организация;
		НоваяСтрока.ФизическоеЛицо 			= ФизическоеЛицо;
		НоваяСтрока.Месяц 					= МесяцРасчетныхЛистов;
		НоваяСтрока.ПерваяПоловинаМесяца 	= Ложь;
		НоваяСтрока.СостояниеПубликации 	= СостояниеПубликации;
		НоваяСтрока.ДатаПубликации 			= ДатаПубликации;
		НоваяСтрока.ДокументКадровогоЭДО 	= ДокументКЭДО;
		НоваяСтрока.Ответственный 			= ТекущийПользователь;
		
		НоваяСтрока = ПодписиДокументовКУдалению.Добавить();
		НоваяСтрока.Объект 			= ДокументКЭДО;
		НоваяСтрока.ФизическоеЛицо 	= ФизическоеЛицо;
		
		ФайлыДокумента = ДокументыКЭДОПрежниеФайлы[ДокументКЭДО];
		Если ЗначениеЗаполнено(ФайлыДокумента) Тогда
			
			Если ОпубликованныеДокументы[ДокументКЭДО] = Неопределено Тогда
				
				Если ЗначениеЗаполнено(ФайлыДокумента.СтарыйФайл) Тогда
					// документ на подпись не опубликован, возвращаем прежний файл
					НоваяСтрока = ДокументыВозвратФайлов.Добавить();
					НоваяСтрока.ДокументКадровогоЭДО = ДокументКЭДО;
					НоваяСтрока.ЭлектронныйДокумент = ФайлыДокумента.СтарыйФайл;
					
					НоваяСтрока = ФайлыКУдалению.Добавить();
					НоваяСтрока.Файл = ФайлыДокумента.НовыйФайл;
				КонецЕсли;
				
			Иначе
				НоваяСтрока = ФайлыКУдалению.Добавить();
				НоваяСтрока.Файл = ФайлыДокумента.СтарыйФайл;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаРЛ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Месяц", "Месяц");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПерваяПоловинаМесяца", "ПерваяПоловинаМесяца");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
		ЭлементБлокировки.ИсточникДанных = ПодписиДокументовКУдалению;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Объект");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДокументКадровогоЭДО");
		ЭлементБлокировки.ИсточникДанных = ДокументыВозвратФайлов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ДокументКадровогоЭДО");
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы");
		ЭлементБлокировки.ИсточникДанных = ФайлыКУдалению;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Файл");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаРЛ Цикл
			МенеджерЗаписи = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ПодписиДокументовКУдалению Цикл
			МенеджерЗаписи = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДокументыВозвратФайлов Цикл
			ДокументОбъект = СтрокаТЗ.ДокументКадровогоЭДО.ПолучитьОбъект();
			ДокументОбъект.ЭлектронныйДокумент = СтрокаТЗ.ЭлектронныйДокумент;
			ДокументОбъект.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ФайлыКУдалению Цикл
			ФайлОбъект = СтрокаТЗ.Файл.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Расчетные листки'");
		ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки());
		РезультатОбработки.БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Получает существующие документы ДокументКадровогоЭДО расчетных листков.
//
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Период - Дата - первое число месяца, период расчетных листков.
// 		ФизическиеЛица - Массив
// 		ПерваяПоловинаМесяца - Булево
//
// 	Возвращаемое значение:
// 		Соответствие
// 			* Ключ - СправочникСсылка.ФизическиеЛица
// 			* Значение - ДокументСсылка.ДокументКадровогоЭДО
//
Функция ДокументыКЭДОРасчетныхЛистков(Организация, Период, ФизическиеЛица, ПерваяПоловинаМесяца)

	ДокументыКЭДО = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ПерваяПоловинаМесяца", ПерваяПоловинаМесяца);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО,
	|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
	|ГДЕ
	|	РасчетныеЛисткиКабинетСотрудника.Организация = &Организация
	|	И РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо В(&ФизическиеЛица)
	|	И РасчетныеЛисткиКабинетСотрудника.Месяц = &Период
	|	И РасчетныеЛисткиКабинетСотрудника.ПерваяПоловинаМесяца = &ПерваяПоловинаМесяца
	|	И РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО <> ЗНАЧЕНИЕ(Документ.ДокументКадровогоЭДО.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыКЭДО.Вставить(Выборка.ФизическоеЛицо, Выборка.ДокументКадровогоЭДО);
	КонецЦикла;
	
	Возврат ДокументыКЭДО;

КонецФункции

Функция НовыйДокументКЭДО(Организация,ФизическоеЛицо, СсылкаНового)

	ДокументОбъект = Документы.ДокументКадровогоЭДО.СоздатьДокумент();
	ДокументОбъект.ДополнительныеСвойства.Вставить("СсылкаНового", СсылкаНового);
	ДокументОбъект.Дата 					= ТекущаяДатаСеанса();
	ДокументОбъект.Организация 				= Организация;
	ДокументОбъект.ОснованиеДокумента 		= СсылкаНового;
	ДокументОбъект.ИдентификаторДокумента 	= Строка(Новый УникальныйИдентификатор);
	ДокументОбъект.КатегорияДокумента 		= Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток;
	ДокументОбъект.СодержимоеДокумента 		= Перечисления.СодержимоеДокументов.СодержитЗарплату;
	ДокументОбъект.ВнешниеПодписанты.Добавить().ФизическоеЛицо = ФизическоеЛицо;
	
	Возврат ДокументОбъект;

КонецФункции

Процедура ПроверитьОпубликоватьФизическихЛиц(СписокФизическихЛиц, ПараметрыПодключения)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации КАК ПредметПубликации
	|ИЗ
	|	РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|ГДЕ
	|	ИзмененияДляСервиса.ПредметПубликации В(&ФизическиеЛица)";
	ФизическиеЛицаКпубликации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПредметПубликации");
	
	РезультатВыгрузки = РезультатВыгрузкиФизическихЛиц(ПараметрыПодключения, ФизическиеЛицаКпубликации);
	Если РезультатВыгрузки.БылиОшибки Тогда
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			Индекс = СписокФизическихЛиц.Найти(Ошибка.Ключ);
			СписокФизическихЛиц.Удалить(Индекс);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзменений

Процедура ЗагрузитьИзмененияИзСервиса(ПараметрыПодключения, БылиОшибки)
	
	Лимит = 100;
	Результат = НовыйРезультатЗагрузкиИзменений();
	
	ПервыйЗапрос = Истина;
	Пока ПервыйЗапрос Или Не Результат.БылиОшибки И Результат.КоличествоОбъектов = Лимит Цикл
		
		ПервыйЗапрос = Ложь;
		Результат.КоличествоОбъектов = 0;
		
		ВерсияИзменений = Константы.ВерсияИзмененийКабинетСотрудника.Получить();
		Ответ = ИзмененияИзСервиса(ПараметрыПодключения, ВерсияИзменений, Лимит);
		Если Ответ.БылиОшибки Тогда
			Результат.БылиОшибки = Истина;
		ИначеЕсли ЗначениеЗаполнено(Ответ.ПолученныеИзменения) Тогда
			Результат = ОбработатьИзмененияИзСервиса(ПараметрыПодключения, Ответ.ПолученныеИзменения);
		Иначе
			// Если нет изменений, выполним только обработку необработанных результатов согласования.
			Результат = РезультатОбработкиНеобработанныхРезультатовСогласования();
		КонецЕсли;
		
	КонецЦикла;
	
	БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
	
КонецПроцедуры

Функция ИзмененияИзСервиса(ПараметрыПодключения, ВерсияИзменений, Лимит)
	
	Результат = Новый Структура("БылиОшибки,ПолученныеИзменения", Ложь);
	
	ПараметрыULR = Новый Структура;
	ПараметрыULR.Вставить("version", Формат(ВерсияИзменений + 1, "ЧН=0; ЧГ=0"));
	ПараметрыULR.Вставить("limit", Лимит);
	ШаблонРесурса = РесурсПолучениеВсехИзменений();
	РесурсСервиса = ЗаполнитьПараметрыШаблонаURL(ШаблонРесурса,ПараметрыULR);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
	Если Ответ = Неопределено Тогда
		Результат.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ИменаСвойствСервисаСоЗначениямиДата = ИменаСвойствСервисаСоЗначениямиДата();
		Результат.ПолученныеИзменения = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСервисаСоЗначениямиДата, ФорматДатыJSON.ISO, "ВосстановлениеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудника"),, ИменаСвойствСервисаСоЗначениямиДата);	
	ИначеЕсли Ответ.КодСостояния = 204 Тогда
		// нет изменений
	Иначе
		ПараметрыПодключения.Ошибки.Добавить(Ответ.ПолучитьТелоКакСтроку());
		Результат.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбработатьИзмененияИзСервиса(ПараметрыПодключения, ПолученныеИзменения)

	РезультатОбработки = НовыйРезультатЗагрузкиИзменений();
		
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("Объект");
	ТаблицаЗаявок.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаЗаявок.Колонки.Добавить("ТипЗаявки", 			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаявокКабинетСотрудника"));
	ТаблицаЗаявок.Колонки.Добавить("ПричинаОтсутствия", 	Новый ОписаниеТипов("ПеречислениеСсылка.ПричиныОтсутствийЗаявокКабинетСотрудника"));
	ТаблицаЗаявок.Колонки.Добавить("ИдентификаторЗаявки", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаЗаявок.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ТипыОбрабатываемыхЗаявок = КабинетСотрудникаВнутренний.ТипыОбрабатываемыхЗаявок();
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["forms2NDFLRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросСправокНДФЛ());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["vacationRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросНаОтпуск());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["taxDeductionRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗаявлениеНаНалоговыеВычеты());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["personalInformationChangeRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросНаИзменениеЛичныхДанных());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["absences"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаУведомлениеОбОтсутствии());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["vacationBalanceRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросСправкиОбОстаткеОтпуска());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["certificatesFromEmployerRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросСправкиСРаботы());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["leaveEncashmentRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросНаКомпенсациюОтпуска());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["voluntaryInsuranceContributionsRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросНаУдержаниеДСВ());
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ);
		КонецЕсли;
	КонецЕсли;
		
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаявок, "ФизическоеЛицо", Истина);
	// в таблицу будет добавлена колонка "ИмяТаблицы"
	ПараметрыБизнесПроцессов = БизнесПроцессыЗаявокСотрудников.ПараметрыСозданияБизнесПроцессовПоЗаявкамСервиса(СписокФизическихЛиц, ТаблицаЗаявок);
	
	ТаблицаРезультатовСогласований = Новый ТаблицаЗначений;
	ТаблицаРезультатовСогласований.Колонки.Добавить("Объект");
	ТаблицаРезультатовСогласований.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаРезультатовСогласований.Колонки.Добавить("ИдентификаторДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(72)));
	
	МассивОбъектов = ПолученныеИзменения["agreementResults"];
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ТаблицаОбъектов = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектРезультатСогласования());
		ЗаполнитьТаблицуДанныхПоРезультатамСогласования(ТаблицаРезультатовСогласований, ТаблицаОбъектов);
	КонецЕсли;
	
	// Обработка загруженных заявок.
	
	ТаблицаЗаявок.Сортировать("ВерсияИзменений");
	СвойстваОтветовПоЗаявкам = "ВариантФормированияФайлаОтвета,КоличествоЭкземпляров,ОтправлятьEmail,АдресEmail";
	ВерсияДляЗаписи = 0;
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		
		ОписаниеЗаявки = СтрокаТЗ.Объект;
		
		// проверка повторной регистрации заявки
		РезультатРегистрацииЗаявки = ПараметрыБизнесПроцессов.ЗарегистрированныеЗаявки[СтрокаТЗ.ИдентификаторЗаявки];
		Если РезультатРегистрацииЗаявки <> Неопределено Тогда
			// заявка с таким идентификатором уже зарегистрирована
			ЗаявкаЗарегистрирована = Истина;
			
			Если ТипЗнч(РезультатРегистрацииЗаявки) = Тип("Массив") Тогда
				// есть заявки с дополнительной идентификацией
				Если ЗначениеЗаполнено(ОписаниеЗаявки.ИдентификаторЭлектронногоДокумента)
					И РезультатРегистрацииЗаявки.Найти(ОписаниеЗаявки.ИдентификаторЭлектронногоДокумента) = Неопределено Тогда
					ЗаявкаЗарегистрирована = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаявкаЗарегистрирована Тогда
				ВерсияДляЗаписи = СтрокаТЗ.ВерсияИзменений;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ИмяТаблицы = СтрокаТЗ.ИмяТаблицы;
			ОписаниеБизнесПроцесса = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыБизнесПроцессов.ОписанияБизнесПроцессов[ИмяТаблицы]);
			
			ОписаниеБизнесПроцесса.ТипЗаявкиКабинетСотрудника = СтрокаТЗ.ТипЗаявки;
			ОписаниеБизнесПроцесса.ИдентификаторЗаявки 		  = СтрокаТЗ.ИдентификаторЗаявки;
			
			ФайлыЗаявки = Новый Массив;
			ЭлектронныйДокумент = Неопределено;
			Если ОписаниеЗаявки.Свойство("ЭлектронныйДокумент") И ЗначениеЗаполнено(ОписаниеЗаявки.ЭлектронныйДокумент) Тогда
				ЭлектронныйДокумент = ФайлЗаявки(ПараметрыПодключения, ОписаниеЗаявки.ЭлектронныйДокумент);
			КонецЕсли;
			
			Если СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ Тогда
				
				ЗаполнитьЗначенияСвойств(ОписаниеБизнесПроцесса, ОписаниеЗаявки, СвойстваОтветовПоЗаявкам);
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				Если ОписаниеЗаявки.Назначение2НДФЛ = "ПодтверждениеДоходов" Тогда
					ОписаниеБизнесПроцесса.НачалоПериода = ОписаниеЗаявки.НачалоПериода;
					ОписаниеБизнесПроцесса.ОкончаниеПериода = ОписаниеЗаявки.ОкончаниеПериода;
					ОписаниеБизнесПроцесса.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно;
				Иначе
					ОписаниеБизнесПроцесса.НалоговыйПериод = ОписаниеЗаявки.НалоговыйПериод;
					ОписаниеБизнесПроцесса.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО;
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				Если ОписаниеЗаявки.ИзменитьФИО Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.Фамилия) Тогда
						ОписаниеБизнесПроцесса.Фамилия = ОписаниеЗаявки.Фамилия;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеЗаявки.Имя) Тогда
						ОписаниеБизнесПроцесса.Имя = ОписаниеЗаявки.Имя;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеЗаявки.Отчество) Тогда
						ОписаниеБизнесПроцесса.Отчество = ОписаниеЗаявки.Отчество;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьДокумент Тогда
					ОписаниеДокумента = ОписаниеЗаявки.ДокументУдостоверяющийЛичность;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументВид) Тогда
						ВидДокумента = ВидыДокументовСервиса(ОписаниеДокумента.ДокументВид); 
						ОписаниеБизнесПроцесса.ДокументВид = ?(ВидДокумента.Ссылка <> Неопределено, ВидДокумента.Ссылка, ВидДокумента.ТекстовоеПредставление);
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументСерия) Тогда
						ОписаниеБизнесПроцесса.ДокументСерия = ОписаниеДокумента.ДокументСерия; 
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументНомер) Тогда
						ОписаниеБизнесПроцесса.ДокументНомер = ОписаниеДокумента.ДокументНомер;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументДатаВыдачи) Тогда
						ОписаниеБизнесПроцесса.ДокументДатаВыдачи = ОписаниеДокумента.ДокументДатаВыдачи;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументКемВыдан) Тогда
						ОписаниеБизнесПроцесса.ДокументКемВыдан = ОписаниеДокумента.ДокументКемВыдан;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументКодПодразделения) Тогда
						ОписаниеБизнесПроцесса.ДокументКодПодразделения = ОписаниеДокумента.ДокументКодПодразделения;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьНомерТелефона Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.ЛичныйНомерТелефона) Тогда
						ОписаниеБизнесПроцесса.НомерМобильногоТелефона = ОписаниеЗаявки.ЛичныйНомерТелефона;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьАдрес Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.АдресРегистрации) Тогда
						ОписаниеБизнесПроцесса.АдресРегистрации = ОписаниеЗаявки.АдресРегистрации;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеЗаявки.АдресМестаПроживания) Тогда
						ОписаниеБизнесПроцесса.АдресМестаПроживания = ОписаниеЗаявки.АдресМестаПроживания;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеЗаявки.Вложения) Тогда
					ФайлыЗаявки = ФайлыЗаявки(ПараметрыПодключения, ОписаниеЗаявки.Вложения);
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
				
				ЗаполнитьЗначенияСвойств(ОписаниеБизнесПроцесса, ОписаниеЗаявки, СвойстваОтветовПоЗаявкам);
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				ОписаниеБизнесПроцесса.НазначениеСправки = ОписаниеЗаявки.НазначениеСправкиСРаботыСтрока;
				
				Если ЗначениеЗаполнено(ОписаниеЗаявки.Вложения) Тогда
					ФайлыЗаявки = ФайлыЗаявки(ПараметрыПодключения, ОписаниеЗаявки.Вложения);
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.Сотрудник 			 = ОписаниеЗаявки.Сотрудник;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				ОписаниеБизнесПроцесса.ИдентификаторЭлектронногоДокумента = ОписаниеЗаявки.ИдентификаторЭлектронногоДокумента;
				
				ОписаниеБизнесПроцесса.ЗаСвойСчет 			= ОписаниеЗаявки.ЗаСвойСчет;
				ОписаниеБизнесПроцесса.ДатаНачалаОтпуска 	= ОписаниеЗаявки.ДатаНачала;
				ОписаниеБизнесПроцесса.ДатаОкончанияОтпуска = ОписаниеЗаявки.ДатаОкончания;
				
				Если ОписаниеЗаявки.КомпенсироватьОтпуск Тогда
					ОписаниеБизнесПроцесса.КоличествоДнейКомпенсации = ОписаниеЗаявки.КоличествоДнейКомпенсации;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(ОписаниеЗаявки.Вложения) Тогда
					ФайлыЗаявки = ФайлыЗаявки(ПараметрыПодключения, ОписаниеЗаявки.Вложения);
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				ОписаниеБизнесПроцесса.КоличествоДнейКомпенсации = ОписаниеЗаявки.КоличествоДнейКомпенсации;
				
				Если ЗначениеЗаполнено(ОписаниеЗаявки.Вложения) Тогда
					ФайлыЗаявки = ФайлыЗаявки(ПараметрыПодключения, ОписаниеЗаявки.Вложения);
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
				
				ЗаполнитьЗначенияСвойств(ОписаниеБизнесПроцесса, ОписаниеЗаявки, СвойстваОтветовПоЗаявкам);
				ОписаниеБизнесПроцесса.ФизическоеЛицо  = ОписаниеЗаявки.ФизическоеЛицо;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				ОписаниеБизнесПроцесса.ЛичныйВычет 			= ОписаниеЗаявки.ЭтоЛичныйВычет;
				ОписаниеБизнесПроцесса.ВычетНаДетей 		= ОписаниеЗаявки.ЭтоВычетНаДетей;
				ОписаниеБизнесПроцесса.ВычетНаНедвижимость 	= ОписаниеЗаявки.ЭтоВычетНаНедвижимость;
				ОписаниеБизнесПроцесса.ВычетНаЛечение 		= ОписаниеЗаявки.ЭтоВычетНаЛечение;
				ОписаниеБизнесПроцесса.ВычетНаОбучение 		= ОписаниеЗаявки.ЭтоВычетНаОбучение;
				
				Если ОписаниеЗаявки.ЭтоВычетНаДетей Тогда
					Для каждого ВычетНаРебенка Из ОписаниеЗаявки.ВычетыНаДетей Цикл
						НовыйВычет = ОписаниеБизнесПроцесса.Вычеты.Добавить();
						НовыйВычет.ДействуетДо = ВычетНаРебенка.ДатаОкончания - 86400;
						НовыйВычет.ВидВычета = ОпределитьВидВычетаНаРебенка(ВычетНаРебенка);
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеЗаявки.Вложения) Тогда
					ФайлыЗаявки = ФайлыЗаявки(ПараметрыПодключения, ОписаниеЗаявки.Вложения);
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				ОписаниеБизнесПроцесса.СпособРасчета = ОписаниеЗаявки.СпособРасчетаУдержанияДСВ;
				ОписаниеБизнесПроцесса.РазмерУдержанияПроцент 	= ОписаниеЗаявки.Процент;
				ОписаниеБизнесПроцесса.РазмерУдержанияСумма 	= ОписаниеЗаявки.Сумма;
				
				Если ЗначениеЗаполнено(ОписаниеЗаявки.Вложения) Тогда
					ФайлыЗаявки = ФайлыЗаявки(ПараметрыПодключения, ОписаниеЗаявки.Вложения);
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				ОписаниеБизнесПроцесса.ИдентификаторЭлектронногоДокумента = ОписаниеЗаявки.ИдентификаторЭлектронногоДокумента;
				
				Если СтрокаТЗ.ПричинаОтсутствия =  Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
					
					ОписаниеБизнесПроцесса.ДатаНачалаОтпуска 	= ОписаниеЗаявки.ДатаНачала;
					ОписаниеБизнесПроцесса.ДатаОкончанияОтпуска = ОписаниеЗаявки.ДатаОкончания;
					ОписаниеБизнесПроцесса.УчебныйОтпуск 		= Истина;
					
				ИначеЕсли СтрокаТЗ.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь
					Или СтрокаТЗ.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам Тогда
					
					Если СтрокаТЗ.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам Тогда
						ОписаниеБизнесПроцесса.ПоБеременности = Истина;
					КонецЕсли;
					
					ОписаниеБизнесПроцесса.ДатаНачалаОтсутствия 	= ОписаниеЗаявки.ДатаНачала;
					ОписаниеБизнесПроцесса.ДатаОкончанияОтсутствия 	= ОписаниеЗаявки.ДатаОкончания;
					
				Иначе
					
					ОписаниеБизнесПроцесса.ПричинаОтсутствия 		= СтрокаТЗ.ПричинаОтсутствия;
					ОписаниеБизнесПроцесса.ДатаНачалаОтсутствия 	= ОписаниеЗаявки.ДатаНачала;
					ОписаниеБизнесПроцесса.ДатаОкончанияОтсутствия 	= ОписаниеЗаявки.ДатаОкончания;
					ОписаниеБизнесПроцесса.ВесьДень 				= ОписаниеЗаявки.ВесьДень;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеЗаявки.Вложения) Тогда
					ФайлыЗаявки = ФайлыЗаявки(ПараметрыПодключения, ОписаниеЗаявки.Вложения);
				КонецЕсли;
				
			КонецЕсли;
			
			ОписаниеБизнесПроцесса.Вложения 			= ФайлыЗаявки;
			ОписаниеБизнесПроцесса.ЭлектронныйДокумент 	= ЭлектронныйДокумент;
			
			БизнесПроцессыЗаявокСотрудников.СоздатьБизнесПроцессПоЗаявке(ИмяТаблицы, ОписаниеБизнесПроцесса, ПараметрыБизнесПроцессов);
			
			ВерсияДляЗаписи = СтрокаТЗ.ВерсияИзменений;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			// не удалось загрузить очередную заявку, прекращаем загрузку
			ОтменитьТранзакцию();
			РезультатОбработки.БылиОшибки = Истина;
			ЗаписатьОшибкуЗагрузкиИзменений(СтрокаТЗ.ТипЗаявки, ОписаниеОшибки());
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	// Конец обработки загруженных заявок.
	
	ТаблицаРезультатовСогласований.Сортировать("ВерсияИзменений");
	// Заполняем таблицу РезультатыСогласования.
	Если РезультатОбработки.БылиОшибки Тогда
		// При загрузке заявок были ошибки.
		// Сформируем таблицу к обработке с версиями меньше той на которой была ошибка.
		РезультатыСогласования = ТаблицаРезультатовСогласований.СкопироватьКолонки();
		Если ВерсияДляЗаписи <> 0 Тогда
			Для каждого СтрокаТЗ Из ТаблицаРезультатовСогласований Цикл
				Если СтрокаТЗ.ВерсияИзменений < ВерсияДляЗаписи Тогда
					ЗаполнитьЗначенияСвойств(РезультатыСогласования.Добавить(), СтрокаТЗ);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		РезультатыСогласования = ТаблицаРезультатовСогласований;
	КонецЕсли;
	
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	// Обработка загруженных результатов согласования.
	
	Идентификаторы = РезультатыСогласования.ВыгрузитьКолонку("ИдентификаторДокумента");
	// получаем таблицу с существующими документами по идентификаторам 
	ДокументыКЭДО = ДокументыКЭДОПоИдентификатору(Идентификаторы);
	ДокументыКЭДОРасчетныеЛистки = ДокументыКЭДОРасчетныеЛисткиДляСогласования(ДокументыКЭДО);
	
	НеобработанныеОбъекты = Новый Массив;
	Для каждого СтрокаТЗ Из РезультатыСогласования Цикл
		
		ВерсияДляЗаписи = ?(ВерсияДляЗаписи < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияДляЗаписи);
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЗДокументКЭДО = ДокументыКЭДО.Найти(СтрокаТЗ.ИдентификаторДокумента, "ИдентификаторДокумента");
		Если СтрокаТЗДокументКЭДО = Неопределено Тогда
			НеобработанныеОбъекты.Добавить(СтрокаТЗ.Объект);
			Продолжить;
		КонецЕсли;
		
		РезультатСогласования = СтрокаТЗ.Объект;
		
		Если Не ЭлектронныйДокументСоответствуетОтвету(СтрокаТЗДокументКЭДО, РезультатСогласования) Тогда
			// Электронный документ не соответствует тому, который получен в результате согласования,
			// не обрабатываем.
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ВыполняетсяБлокировка = Ложь;
			
			Если РезультатСогласования.РольПодписанта = "Руководитель" Тогда
				
				БизнесПроцессыЗаявокСотрудников.ЗарегистрироватьРезультатСогласованияЗаявки(СтрокаТЗДокументКЭДО.Документ, РезультатСогласования);
				
				// Обработка записи ЭП
				Если ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(РезультатСогласования.ЭлектроннаяПодпись) Тогда
					СохранитьЭлектроннуюПодписьРезультатаСогласования(СтрокаТЗДокументКЭДО.ЭлектронныйДокумент, РезультатСогласования)
				КонецЕсли;
				
			ИначеЕсли РезультатСогласования.РольПодписанта = "Сотрудник" Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
				ЭлементБлокировки.УстановитьЗначение("Объект", СтрокаТЗДокументКЭДО.Ссылка);
				ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", РезультатСогласования.Подписант);
				
				СтрокаТЗРасчетныйЛисток = ДокументыКЭДОРасчетныеЛистки.Найти(СтрокаТЗДокументКЭДО.Ссылка, "ДокументКадровогоЭДО");
				Если ЗначениеЗаполнено(СтрокаТЗРасчетныйЛисток) Тогда
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
					ЭлементБлокировки.УстановитьЗначение("Организация", 	СтрокаТЗРасчетныйЛисток.Организация);
					ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо",	СтрокаТЗРасчетныйЛисток.ФизическоеЛицо);
					ЭлементБлокировки.УстановитьЗначение("Месяц", 			СтрокаТЗРасчетныйЛисток.Месяц);
					ЭлементБлокировки.УстановитьЗначение("ПерваяПоловинаМесяца", СтрокаТЗРасчетныйЛисток.ПерваяПоловинаМесяца);
				КонецЕсли;
				
				ВыполняетсяБлокировка = Истина;
				Блокировка.Заблокировать();
				ВыполняетсяБлокировка = Ложь;
				
				Если ЗначениеЗаполнено(СтрокаТЗРасчетныйЛисток) Тогда
					Запись = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, СтрокаТЗРасчетныйЛисток, "Организация,ФизическоеЛицо,Месяц,ПерваяПоловинаМесяца");
					Запись.Прочитать();
					Запись.СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился;
					Запись.Записать();
				КонецЕсли;
				
				// Обработка записи ЭП
				Отпечаток = "";
				Если ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(РезультатСогласования.ЭлектроннаяПодпись) Тогда
					СохранитьЭлектроннуюПодписьРезультатаСогласования(СтрокаТЗДокументКЭДО.ЭлектронныйДокумент, РезультатСогласования, Отпечаток);
				КонецЕсли;
				
				Запись = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
				Запись.Объект = СтрокаТЗДокументКЭДО.Ссылка;
				Запись.ФизическоеЛицо = РезультатСогласования.Подписант;
				Запись.Отпечаток = Отпечаток;
				Запись.ДатаПодписи = РезультатСогласования.ДатаПодписи;
				Запись.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			// не удалось обработать результат согласования
			ОтменитьТранзакцию();
			// Если ошибка блокировки, не регистрируем ошибку обработки,
			// результат согласования будет сохранен как не обработанный.
			Если Не ВыполняетсяБлокировка Тогда
				РезультатОбработки.БылиОшибки = Истина;
				ТипИзменений = НСтр("ru = 'Результат согласования'");
				ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки());
			КонецЕсли;
			НеобработанныеОбъекты.Добавить(СтрокаТЗ.Объект);
		КонецПопытки;
	
	КонецЦикла;
	
	// Конец обработки загруженных результатов согласования.
	
	// Обработка сохраненных не обработанных результатов согласований.
	
	Результат = РезультатОбработкиНеобработанныхРезультатовСогласования();
	РезультатОбработки.БылиОшибки = Результат.БылиОшибки Или РезультатОбработки.БылиОшибки;
	
	// Конец обработки не обработанных результатов согласований.
	
	// Сохранение необработанных результатов согласования текущего пакета изменений.
	Для каждого РезультатСогласования Из НеобработанныеОбъекты Цикл
		Запись = РегистрыСведений.НеобработанныеРезультатыСогласованияКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторДокумента = РезультатСогласования.ИдентификаторДокумента;
		Запись.Подписант = РезультатСогласования.Подписант;
		Запись.РезультатСогласования = Новый ХранилищеЗначения(РезультатСогласования);
		Запись.Записать();
	КонецЦикла;
	
	Если ВерсияДляЗаписи <> 0 Тогда
		Константы.ВерсияИзмененийКабинетСотрудника.Установить(ВерсияДляЗаписи);
	КонецЕсли;

	РезультатОбработки.КоличествоОбъектов = ТаблицаЗаявок.Количество() + ТаблицаРезультатовСогласований.Количество();
	
	Возврат РезультатОбработки;

КонецФункции

Функция РезультатОбработкиНеобработанныхРезультатовСогласования()

	РезультатОбработки = НовыйРезультатЗагрузкиИзменений();
	
	НеобработанныеРезультаты = НеобработанныеРезультаты();
	Идентификаторы = НеобработанныеРезультаты.ВыгрузитьКолонку("ИдентификаторДокумента");
	// получаем таблицу с существующими документами по идентификаторам 
	ДокументыКЭДО = ДокументыКЭДОПоИдентификатору(Идентификаторы);
	ДокументыКЭДОРасчетныеЛистки = ДокументыКЭДОРасчетныеЛисткиДляСогласования(ДокументыКЭДО);
	
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	ОбработанныеОбъекты = Новый Массив;
	Для каждого СтрокаТЗ Из НеобработанныеРезультаты Цикл
		
		РезультатСогласования = СтрокаТЗ.РезультатСогласования.Получить();
		
		СтрокаТЗДокументКЭДО = ДокументыКЭДО.Найти(СтрокаТЗ.ИдентификаторДокумента, "ИдентификаторДокумента");
		Если СтрокаТЗДокументКЭДО = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлектронныйДокументСоответствуетОтвету(СтрокаТЗДокументКЭДО, РезультатСогласования) Тогда
			// Электронный документ не соответствует тому, который получен в результате согласования,
			// не обрабатываем.
			ОбработанныеОбъекты.Добавить(СтрокаТЗ.ИдентификаторДокумента);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ВыполняетсяБлокировка = Ложь;
			
			Если РезультатСогласования.РольПодписанта = "Руководитель" Тогда
				
				БизнесПроцессыЗаявокСотрудников.ЗарегистрироватьРезультатСогласованияЗаявки(СтрокаТЗДокументКЭДО.Документ, РезультатСогласования);
				
				// Обработка записи ЭП
				Если ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(РезультатСогласования.ЭлектроннаяПодпись) Тогда
					СохранитьЭлектроннуюПодписьРезультатаСогласования(СтрокаТЗДокументКЭДО.ЭлектронныйДокумент, РезультатСогласования)
				КонецЕсли;
				
			ИначеЕсли РезультатСогласования.РольПодписанта = "Сотрудник" Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
				ЭлементБлокировки.УстановитьЗначение("Объект", СтрокаТЗДокументКЭДО.Ссылка);
				ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", РезультатСогласования.Подписант);
				
				СтрокаТЗРасчетныйЛисток = ДокументыКЭДОРасчетныеЛистки.Найти(СтрокаТЗДокументКЭДО.Ссылка, "ДокументКадровогоЭДО");
				Если ЗначениеЗаполнено(СтрокаТЗРасчетныйЛисток) Тогда
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
					ЭлементБлокировки.УстановитьЗначение("Организация", 	СтрокаТЗРасчетныйЛисток.Организация);
					ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо",	СтрокаТЗРасчетныйЛисток.ФизическоеЛицо);
					ЭлементБлокировки.УстановитьЗначение("Месяц", 			СтрокаТЗРасчетныйЛисток.Месяц);
					ЭлементБлокировки.УстановитьЗначение("ПерваяПоловинаМесяца", СтрокаТЗРасчетныйЛисток.ПерваяПоловинаМесяца);
				КонецЕсли;
				
				ВыполняетсяБлокировка = Истина;
				Блокировка.Заблокировать();
				ВыполняетсяБлокировка = Ложь;
				
				Если ЗначениеЗаполнено(СтрокаТЗРасчетныйЛисток) Тогда
					Запись = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, СтрокаТЗРасчетныйЛисток, "Организация,ФизическоеЛицо,Месяц,ПерваяПоловинаМесяца");
					Запись.Прочитать();
					Запись.СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился;
					Запись.Записать();
				КонецЕсли;
				
				// Обработка записи ЭП
				Отпечаток = "";
				Если ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(РезультатСогласования.ЭлектроннаяПодпись) Тогда
					СохранитьЭлектроннуюПодписьРезультатаСогласования(СтрокаТЗДокументКЭДО.ЭлектронныйДокумент, РезультатСогласования, Отпечаток);
				КонецЕсли;
				
				Запись = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
				Запись.Объект = СтрокаТЗДокументКЭДО.Ссылка;
				Запись.ФизическоеЛицо = РезультатСогласования.Подписант;
				Запись.Отпечаток = Отпечаток;
				Запись.ДатаПодписи = РезультатСогласования.ДатаПодписи;
				Запись.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			// не удалось обработать результат согласования
			ОтменитьТранзакцию();
			// Если ошибка блокировки, не регистрируем ошибку обработки,
			// результат согласования будет сохранен как не обработанный.
			Если Не ВыполняетсяБлокировка Тогда
				РезультатОбработки.БылиОшибки = Истина;
				ТипИзменений = НСтр("ru = 'Результат согласования'");
				ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
	
	КонецЦикла;
	
	Для каждого ИдентификаторДокумента Из ОбработанныеОбъекты Цикл
		Запись = РегистрыСведений.НеобработанныеРезультатыСогласованияКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторДокумента = ИдентификаторДокумента;
		Запись.Удалить();
	КонецЦикла;
	
	Возврат РезультатОбработки;

КонецФункции

Процедура ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаДанных, ТаблицаЗаявок, ТипЗаявки)

	ЗаполнятьПричинуОтсутствия = (ТаблицаЗаявок.Колонки.Найти("ПричинаОтсутствия") <> Неопределено);
	
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Объект 				= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		НоваяСтрока.ТипЗаявки 			= ТипЗаявки;
		Если ЗаполнятьПричинуОтсутствия Тогда
			НоваяСтрока.ПричинаОтсутствия = СтрокаТЗ.ПричинаОтсутствия;
		КонецЕсли;
		НоваяСтрока.ВерсияИзменений 	= СтрокаТЗ.Версия;
		НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
		НоваяСтрока.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗапроса;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТаблицуДанныхПоРезультатамСогласования(ТаблицаДанных, ТаблицаОбъектов)
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Объект 			= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		НоваяСтрока.ВерсияИзменений = СтрокаТЗ.Версия;
		Если ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЭлектронногоДокумента) Тогда
			НоваяСтрока.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторЭлектронногоДокумента;
		Иначе
			НоваяСтрока.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ФайлыЗаявки(ПараметрыПодключения, ТаблицаВложений) Экспорт
	
	ФайлыЗаявки = Новый Массив;
	
	ШаблонРесурса = РесурсФайлыПолучение();
	Для Каждого СтрокаТаблицы Из ТаблицаВложений Цикл
		
		РесурсСервиса = ЗаполнитьПараметрыШаблонаURL(ШаблонРесурса, Новый Структура("ID", СтрокаТаблицы.ИдентификаторФайла));
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
		Если Ответ = Неопределено Или Не Ответ.КодСостояния = 200 Тогда
			// вызывающий метод обрабатывает исключение
			ВызватьИсключение НСтр("ru = 'Произошла ошибка при загрузке файлов из сервиса. Подробности в журнале регистрации.'");
		КонецЕсли;
		
		ОписаниеФайла = Новый Структура("ИмяФайла,РасширениеФайла,ДвоичныеДанные,ХешСумма");
		ОписаниеФайла.ИмяФайла = СтрЗаменить(СтрокаТаблицы.НаименованиеФайла, "." + СтрокаТаблицы.РасширениеФайла, "");
		ОписаниеФайла.РасширениеФайла = СтрЗаменить(СтрокаТаблицы.РасширениеФайла, ".", "");
		ОписаниеФайла.ХешСумма = СтрокаТаблицы.ХешСумма;
		ОписаниеФайла.ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		
		ФайлыЗаявки.Добавить(ОписаниеФайла);
		
	КонецЦикла;
	
	Возврат ФайлыЗаявки;
	
КонецФункции

Функция ФайлЗаявки(ПараметрыПодключения, ЭлектронныйДокумент) Экспорт
	
	ИсходныйДокумент = ЭлектронныйДокумент.ИсходныйДокумент;
	
	НаименованиеФайла 	= ЗаменитьЗапрещенныеСимволыВИмениФайла(ИсходныйДокумент.НаименованиеФайла);
	РасширениеФайла 	= ИсходныйДокумент.РасширениеФайла;
	ИдентификаторФайла 	= ИсходныйДокумент.ИдентификаторФайла;
	ХешСумма 			= ИсходныйДокумент.ХешСумма;
	
	ШаблонРесурса = РесурсФайлыПолучение();
	
	РесурсСервиса = ЗаполнитьПараметрыШаблонаURL(ШаблонРесурса, Новый Структура("ID", ИдентификаторФайла));
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
	Если Ответ = Неопределено Или Не Ответ.КодСостояния = 200 Тогда
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение НСтр("ru = 'Произошла ошибка при загрузке файлов из сервиса. Подробности в журнале регистрации.'");
	КонецЕсли;
	
	ОписаниеФайла = Новый Структура("ИмяФайла,РасширениеФайла,ДвоичныеДанные,ХешСумма");
	ОписаниеФайла.ИмяФайла 			= НаименованиеФайла;
	ОписаниеФайла.РасширениеФайла 	= РасширениеФайла;
	ОписаниеФайла.ХешСумма 			= ХешСумма;
	ОписаниеФайла.ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
	
	Возврат ОписаниеФайла;
	
КонецФункции

Функция НовыйРезультатЗагрузкиИзменений()

	Возврат Новый Структура("БылиОшибки,КоличествоОбъектов", Ложь, 0);

КонецФункции

Функция ОпределитьВидВычетаНаРебенка(ВычетНаРебенка)
	
	ТекстВычета = НСтр("ru = 'Вычет на'");
	
	СтаршинствоРебенка = "первого";
	Если ВычетНаРебенка.СтаршинствоРебенка = 1 Тогда
		СтаршинствоРебенка = НСтр("ru = 'первого'");
	ИначеЕсли ВычетНаРебенка.СтаршинствоРебенка = 2 Тогда
		СтаршинствоРебенка =  НСтр("ru = 'второго'");
	ИначеЕсли ВычетНаРебенка.СтаршинствоРебенка = 3 Тогда
		СтаршинствоРебенка =  НСтр("ru = 'третьего или последующего'");
	КонецЕсли;
			
	Возврат (ТекстВычета + " " + СтаршинствоРебенка + " " + НСтр("ru = 'ребенка'") 
						 + ?(ВычетНаРебенка.РебенокИнвалид, НСтр("ru = '-инвалида'"), "")
						 + " " + ?(ВычетНаРебенка.ЗаявительОпекун, НСтр("ru = 'опекуну'"), НСтр("ru = 'родителю'")) 
						 + ?(ВычетНаРебенка.РодительОдиночка, " " + НСтр("ru = 'в двойном размере'"), ""));
КонецФункции

Функция ВосстановлениеJSON(Знач Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	Исключение
		Результат = Дата(1,1,1);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИменаСвойствСервисаСоЗначениямиДата()
	
	Результат = Новый Массив;
	Результат.Добавить("dateCreated");
	Результат.Добавить("issueDate");
	Результат.Добавить("startDate");
	Результат.Добавить("endDate");
	Результат.Добавить("applyMonth");
	Результат.Добавить("incomePeriodStartDate");
	Результат.Добавить("incomePeriodEndDate");
	Результат.Добавить("time");
	Возврат Результат;
	
КонецФункции

Функция ВидыДокументовСервиса(ВидДокумента)
	
	ВидыДокументовФизическихЛиц = Справочники.ВидыДокументовФизическихЛиц;

	Результат = Новый Структура;
	
	Если ВидДокумента = "passport" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.ПаспортРФ);
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Паспорт гражданина РФ'"));
	ИначеЕсли ВидДокумента = "foreignPassport" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(10));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Иностранный паспорт'"));
	ИначеЕсли ВидДокумента = "residenceCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(12));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Вид на жительство'"));
	ИначеЕсли ВидДокумента = "identityCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(14));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Временное удостоверение личности гражданина РФ'"));
	ИначеЕсли ВидДокумента = "militaryIdentityCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.УдостоверениеОфицера);
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Удостоверение личности офицера'"));
	ИначеЕсли ВидДокумента = "residencePermission" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(15));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Разрешение на временное проживание в Российской Федерации'"));
	Иначе
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(91));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Иной документ'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДокументыКЭДОРасчетныеЛисткиДляСогласования(ТаблицаДокументыКЭДО)

	ДокументыКЭДО = ТаблицаДокументыКЭДО.ВыгрузитьКолонку("Ссылка");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКЭДО", ДокументыКЭДО);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетныеЛисткиКабинетСотрудника.Организация КАК Организация,
	|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛисткиКабинетСотрудника.Месяц КАК Месяц,
	|	РасчетныеЛисткиКабинетСотрудника.ПерваяПоловинаМесяца КАК ПерваяПоловинаМесяца,
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
	|ГДЕ
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО В(&ДокументыКЭДО)";
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ЭлектронныйДокументСоответствуетОтвету(ДанныеДокументаКЭДО, РезультатСогласования)
	
	ЭлектронныйДокумент = ДанныеДокументаКЭДО.ЭлектронныйДокумент;
	ДокументКЭДО = ДанныеДокументаКЭДО.Ссылка;
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Нет электронного документа.'");
		ЗаписатьПредупреждениеПроверкиВерсийФайлов(ДокументКЭДО, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатСогласования.ВерсияДокумента) Тогда
		Возврат Истина;
	КонецЕсли;
		
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлектронныйДокумент, Ложь);
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных электронного документа.'");
		ЗаписатьПредупреждениеПроверкиВерсийФайлов(ДокументКЭДО, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
	ВерсииСовпадают = (ВерсияФайла = ВРег(РезультатСогласования.ВерсияДокумента));
	Если Не ВерсииСовпадают Тогда
		ТекстСообщения = НСтр("ru = 'Версии файлов различаются.'");
		ЗаписатьПредупреждениеПроверкиВерсийФайлов(ДокументКЭДО, ТекстСообщения);
	КонецЕсли;
	
	Возврат ВерсииСовпадают;

КонецФункции

Функция НеобработанныеРезультаты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеобработанныеРезультаты.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	НеобработанныеРезультаты.РезультатСогласования КАК РезультатСогласования
	|ИЗ
	|	РегистрСведений.НеобработанныеРезультатыСогласованияКабинетСотрудника КАК НеобработанныеРезультаты";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область РаботаСПравиламиПубликации

Процедура СохранитьНастройкиПубликацииВФоне(Параметры, АдресХранилища) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписей = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Параметры.НовыеНастройки);
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Истина);
		Если НаборЗаписей.Количество() > 0 Тогда
			ОбновитьПубликациюОбъектовПоНовымПравилам();
		Иначе
			ОбработатьОчисткуПравилПубликации();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение(НСтр("ru = 'При записи правил публикации произошла ошибка.'")
			+ Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПубликациюОбъектовПоНовымПравилам()
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	
	Если Не ПубликоватьСтруктуруЮридическихЛиц() Тогда
		КабинетСотрудникаВнутренний.ОбновитьСтруктуруПредприятия();
	КонецЕсли;
	
	// Получим публикуемые позиции штатного расписания.
	ПозицияЕстьВПравилах = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПубликации.ОбъектПравила КАК Позиция
	|ИЗ
	|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|ГДЕ
	|	ПравилаПубликации.ОбъектПравила ССЫЛКА Справочник.ШтатноеРасписание";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПозицияЕстьВПравилах.Вставить(Выборка.Позиция, Истина);
	КонецЦикла;
	
	// Получим публикуемых физических лиц.
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	// Текущие публикуемые сотрудники
	ФизическиеЛицаУсловноПубликуемыхСотрудников = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаУсловноПубликуемыхСотрудников.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ТипГрафикРаботы = КабинетСотрудникаВнутренний.ТипГрафикРаботы();
	
	// РабочиеМеста - сведения о рабочих местах физических лиц на дату актуальности,
	// включая уволенных.
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	РабочиеМеста.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	РабочиеМеста.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	РабочиеМеста.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипГрафикРаботы)));
	
	// БудущиеКадровыеСобытия - даты будущих кадровых событий обрабатываемых сотрудников.
	БудущиеКадровыеСобытия = Новый ТаблицаЗначений;
	БудущиеКадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеКадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Если ИспользоватьКадровыйУчет Тогда
		
		// Будущие кадровые события.
		ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
		ПараметрыПолученияРабочихМест.ВключаяУволенныхНаНачалоПериода = Истина;
		ПараметрыПолученияРабочихМест.НачалоПериода = ДатаАктуальности;
		КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, Ложь, ПараметрыПолученияРабочихМест);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМеста.Период КАК ДатаСобытия,
		|	РабочиеМеста.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|ГДЕ
		|	РабочиеМеста.Период > &ДатаАктуальности";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(БудущиеКадровыеСобытия.Добавить(), Выборка);
		КонецЦикла;
		
		// Заполняем таблицу РабочиеМеста.
		// Получим все рабочие места физических лиц на дату актуальности, включая уволенных.
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "РабочееМестоПериодРегистрации,ВидСобытия";
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",Организация,Подразделение,Должность";
		КонецЕсли;
		Если ТипГрафикРаботы <> Неопределено Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ГрафикРаботы";
		КонецЕсли;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		// Заполним ДолжностьПоШтатномуРасписанию в таблице КадровыеДанныеСотрудников,
		// если не ведется штатное расписание.
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Если ТипГрафикРаботы = Неопределено Тогда
				КадровыеДанныеСотрудников.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
			|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
			|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			НоваяСтрока = РабочиеМеста.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ДатаСобытия = СтрокаТЗ.РабочееМестоПериодРегистрации;
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
				Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
				Иначе
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
				КонецЕсли;
			Иначе
				Если СтрокаТЗ.ДатаУвольнения = ДатаАктуальности Тогда
						
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаУвольнения + 86400;
					
				ИначеЕсли СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
					
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаУвольнения + 86400;
					
				Иначе //СтрокаТЗ.ДатаУвольнения > ДатаАктуальности
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаУвольнения + 86400;
					
					Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
						НоваяСтрока = РабочиеМеста.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
						НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
					Иначе
						НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СотрудникиКУдалению = Новый Массив;
	
	ПубликацияФизическихЛиц = Новый ТаблицаЗначений;
	ПубликацияФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПубликацияФизическихЛиц.Колонки.Добавить("ОкончаниеПубликации", Новый ОписаниеТипов("Дата"));
	
	ПубликацияСотрудников = Новый ТаблицаЗначений;
	ПубликацияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПубликацияСотрудников.Колонки.Добавить("УсловноПубликуется", Новый ОписаниеТипов("Булево"));
	ПубликацияСотрудников.Колонки.Добавить("Уволен", Новый ОписаниеТипов("Булево"));
	
	ПозицииПубликуемыхСотрудников = Новый Массив;
	
	РабочиеМеста.Индексы.Добавить("ФизическоеЛицо");
	ОтборПоФизическимЛицам = Новый Структура("ФизическоеЛицо");
	РабочиеМестаФизическогоЛица = РабочиеМеста.СкопироватьКолонки();
	СписокГрафиков = Новый Массив;
	
	СтарыйАлгоритм = ВерсияПриложенияМеньшеВерсии("3.0.3.96");
	
	ФизическиеЛица =  ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "ФизическоеЛицо", Истина);
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		// Состояние публикации физического лица, до изменения правил публикации.
		ФизическоеЛицоПубликуется = (ПубликуемыеФизическиеЛица[ФизическоеЛицо] <> Неопределено);
		
		РабочиеМестаФизическогоЛица.Очистить();
		ОтборПоФизическимЛицам.ФизическоеЛицо = ФизическоеЛицо;
		РабочиеМестаСотрудников = РабочиеМеста.НайтиСтроки(ОтборПоФизическимЛицам);
		
		ЕстьПубликуемоеРабочееМесто = Ложь;
		
		Если СтарыйАлгоритм Тогда
			
			Для каждого ДанныеСотрудника Из РабочиеМестаСотрудников Цикл
				
				Если ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
					
					Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
						ЕстьПубликуемоеРабочееМесто = Истина;
						ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьПубликуемоеРабочееМесто Тогда
				НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
					НоваяСтрока = ПубликацияСотрудников.Добавить();
					НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
					Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
						СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Для каждого ДанныеСотрудника Из РабочиеМестаСотрудников Цикл
				
				Если Не ЗначениеЗаполнено(ДанныеСотрудника.ВидСобытия) Тогда
					
					Если ФизическоеЛицоПубликуется Тогда
						СотрудникиКУдалению.Добавить(ДанныеСотрудника.Сотрудник);
					КонецЕсли;
					
				ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
					
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					
				ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда	
					
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
						ЕстьПубликуемоеРабочееМесто = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьПубликуемоеРабочееМесто Тогда
				НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
					НоваяСтрока = ПубликацияСотрудников.Добавить();
					НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
					НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
					ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
					Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
						СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ФизическоеЛицоПубликуется Тогда
					Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
						// Регистрируем сотрудников к публикации для обновления сведений о рабочих местах,
						// т.к. текущее состояние физического лица - публикуется.
						НоваяСтрока = ПубликацияСотрудников.Добавить();
						НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
						НоваяСтрока.УсловноПубликуется = Истина;
						НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
						ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
					КонецЦикла;
				ИначеЕсли ФизическиеЛицаУсловноПубликуемыхСотрудников[ФизическоеЛицо] <> Неопределено Тогда
					// текущие условно публикуемые сотрудники, добавим их позиции
					Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
						ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
						Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
							СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если ЗначениеЗаполнено(НастройкиСервиса.Ответственный) Тогда
		СтрокаТЗ = ПубликацияФизическихЛиц.Найти(НастройкиСервиса.Ответственный, "ФизическоеЛицо");
		// ответственный за сервис всегда публикуется
		Если СтрокаТЗ = Неопределено Тогда
			НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
			НоваяСтрока.ФизическоеЛицо = НастройкиСервиса.Ответственный;
		КонецЕсли;
	КонецЕсли;
	
	// получим ссылки на объекты публикуемых позиций
	Для каждого ЭлементКоллекции Из ПозицияЕстьВПравилах Цикл
		ПозицииПубликуемыхСотрудников.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	ПрочиеОбъектыКПубликации = ОбъектыПозицийШтатногоРасписанияПоСсылкам(ПозицииПубликуемыхСотрудников, Ложь);
	
	СписокГрафиков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокГрафиков);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрочиеОбъектыКПубликации, СписокГрафиков);
	
	// Определим физических лиц для регистрации изменений.
	// Регистрируем изменения по физическим лицам
	// - новые публикуемые физические лица
	// - публикуемые физические лица уже зарегистрированные как изменения.
	// Регистрируем изменения для обновления вычетов
	// - новые публикуемые физические лица
	// - публикуемые физические лица по которым уже зарегистрировано обновление вычетов.
	Запрос.УстановитьПараметр("ФизическиеЛицаКПубликации", ПубликацияФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.ОкончаниеПубликации КАК ОкончаниеПубликации
	|ПОМЕСТИТЬ ВТФизическиеЛицаКПубликации
	|ИЗ
	|	&ФизическиеЛицаКПубликации КАК ФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТНовыеФизическиеЛицаКПубликации
	|ИЗ
	|	ВТФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
	|		ПО ФизическиеЛицаКПубликации.ФизическоеЛицо = ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо
	|			И ФизическиеЛицаКПубликации.ОкончаниеПубликации = ФизическиеЛицаКабинетСотрудника.ОкончаниеПубликации
	|ГДЕ
	|	ФизическиеЛицаКабинетСотрудника.ОкончаниеПубликации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТНовыеФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|		ПО ФизическиеЛицаКПубликации.ФизическоеЛицо = ИзмененияДляСервиса.ПредметПубликации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТНовыеФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ОбновлениеВычетов
	|		ПО ФизическиеЛицаКПубликации.ФизическоеЛицо = ОбновлениеВычетов.ФизическоеЛицо";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ИзмененияФизическиеЛица = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	ИзмененияВычеты = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	// Сотрудники для регистрации изменений
	// - новые публикуемые сотрудники
	// - сотрудники, уже зарегистрированные как изменения.
	// Публикуемые сотрудники
	// - все сотрудники публикуемые по новым правилам
	// - сотрудники не публикуемые по новым правилам, но уже зарегистрированные как публикуемые с признаком УсловноПубликуется.
	Запрос.УстановитьПараметр("СотрудникиКПубликации", ПубликацияСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.УсловноПубликуется КАК УсловноПубликуется,
	|	Сотрудники.Уволен КАК Уволен
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	&СотрудникиКПубликации КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКПубликации.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТСотрудникиКПубликации КАК СотрудникиКПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО СотрудникиКПубликации.Сотрудник = ПубликуемыеОбъекты.ОбъектПубликации
	|			И СотрудникиКПубликации.УсловноПубликуется = ПубликуемыеОбъекты.УсловноПубликуется
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации
	|ИЗ
	|	РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|ГДЕ
	|	ИзмененияДляСервиса.ПредметПубликации ССЫЛКА Справочник.Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник,
	|	ПубликуемыеОбъекты.УсловноПубликуется КАК УсловноПубликуется,
	|	ЛОЖЬ КАК Уволен
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиКПубликации КАК СотрудникиКПубликации
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = СотрудникиКПубликации.Сотрудник
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется
	|	И ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И СотрудникиКПубликации.УсловноПубликуется ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиКПубликации.Сотрудник,
	|	СотрудникиКПубликации.УсловноПубликуется,
	|	СотрудникиКПубликации.Уволен
	|ИЗ
	|	ВТСотрудникиКПубликации КАК СотрудникиКПубликации";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ИзмененияСотрудники = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Сотрудник");
	ПубликацияСотрудников = РезультатЗапроса[2].Выгрузить();
	
	// Прочие объекты для регистрации изменений
	// - новые публикуемые объекты.
	Запрос.УстановитьПараметр("ОбъектыКПубликации", ПрочиеОбъектыКПубликации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В (&ОбъектыКПубликации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации КАК ПредметПубликации
	|ИЗ
	|	РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|ГДЕ
	|	ИзмененияДляСервиса.ПредметПубликации В(&ОбъектыКПубликации)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТекущиеПубликуемыеОбъекты = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	НовыеПубликуемыеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрочиеОбъектыКПубликации, ТекущиеПубликуемыеОбъекты);
	ИзмененияПубликуемыеОбъекты = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ПредметПубликации");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененияПубликуемыеОбъекты, НовыеПубликуемыеОбъекты, Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов");
		КабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиОбновлениеНастройкиПубликации(Блокировка);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого ПубликуемыйОбъект Из ПрочиеОбъектыКПубликации Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации = ПубликуемыйОбъект;
		КонецЦикла;
		СотрудникиДляОбновлениеПрочихОбъектов = Новый Массив;
		Для каждого СтрокаТЗ Из ПубликацияСотрудников Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации = СтрокаТЗ.Сотрудник;
			НоваяЗапись.УсловноПубликуется = СтрокаТЗ.УсловноПубликуется;
			Если Не СтрокаТЗ.УсловноПубликуется И Не СтрокаТЗ.Уволен Тогда
				СотрудникиДляОбновлениеПрочихОбъектов.Добавить(СтрокаТЗ.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого ПредметПубликации Из ИзмененияФизическиеЛица Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = ПредметПубликации;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Для каждого ПредметПубликации Из ИзмененияСотрудники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = ПредметПубликации;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Для каждого ПредметПубликации Из ИзмененияПубликуемыеОбъекты Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = ПредметПубликации;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого Сотрудник Из СотрудникиКУдалению Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектДляУдаления = Сотрудник;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ПубликацияФизическихЛиц Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			НоваяЗапись.ОкончаниеПубликации = СтрокаТЗ.ОкончаниеПубликации;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		Для каждого ФизическоеЛицо Из ИзмененияВычеты Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		ПроверитьЗаполнениеСвойствФизическихЛиц(ПубликацияФизическихЛиц.ВыгрузитьКолонку("ФизическоеЛицо"));
		
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из БудущиеКадровыеСобытия Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Сотрудник = СтрокаТЗ.Сотрудник;
			НоваяЗапись.ДатаСобытия = СтрокаТЗ.ДатаСобытия;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеПубликуемыхОбъектов(СотрудникиДляОбновлениеПрочихОбъектов, Ложь);
		КабинетСотрудникаВнутренний.ОчиститьДанныеОбАктуальностиИнформацииОбОтпускеНепубликуемыхСотрудников(СотрудникиДляОбновлениеПрочихОбъектов);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОчисткуПравилПубликации()

	Если ВерсияПриложенияМеньшеВерсии("3.0.3.96") Тогда
		РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	// РабочиеМеста - сведения о рабочих местах физических лиц на дату актуальности,
	// включая уволенных.
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	
	Если ИспользоватьКадровыйУчет Тогда
		
		// Заполняем таблицу РабочиеМеста.
		// Получим все рабочие места физических лиц на дату актуальности, включая уволенных.
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = "ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = "Подразделение,Должность";
		КонецЕсли;
		ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		// Заполним ДолжностьПоШтатномуРасписанию в таблице КадровыеДанныеСотрудников,
		// если не ведется штатное расписание.
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
				Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				КонецЕсли;
			Иначе
				Если СтрокаТЗ.ДатаУвольнения = ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "ДолжностьПоШтатномуРасписанию", Истина);
	ПрочиеОбъектыКПубликации = ОбъектыПозицийШтатногоРасписанияПоСсылкам(Позиции, Ложь);
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "Сотрудник", Истина);
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов");
		КабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиОбновлениеНастройкиПубликации(Блокировка);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого ПубликуемыйОбъект Из ПрочиеОбъектыКПубликации Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации = ПубликуемыйОбъект;
			НоваяЗапись.УсловноПубликуется = Истина;
		КонецЦикла;
		Для каждого Сотрудник Из Сотрудники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации = Сотрудник;
			НоваяЗапись.УсловноПубликуется = Истина;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого Сотрудник Из Сотрудники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = Сотрудник;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Для каждого ПредметПубликации Из ПрочиеОбъектыКПубликации Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = ПредметПубликации;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Если ЗначениеЗаполнено(НастройкиСервиса.Ответственный) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = НастройкиСервиса.Ответственный;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		НаборЗаписей.Записать();
		
		Если ЗначениеЗаполнено(НастройкиСервиса.Ответственный) Тогда
			НаборЗаписей = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = НастройкиСервиса.Ответственный;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей().Записать();
		
		КабинетСотрудникаВнутренний.ОчиститьДанныеПриПриОбновленииПубликации();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Процедура ОтложенноеОбновлениеСписковПубликуемыхОбъектов(БылиОшибки)
	
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ДатаСобытия <= &ДатаАктуальности";
	РезультатаЗапроса = Запрос.Выполнить();
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСотрудников  = РезультатаЗапроса.Выгрузить();
	
	Отбор = Новый Структура("Событие");
	Отбор.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные;
	Попытка
		ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников.Скопировать(Отбор));
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Отбор.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.ГрафикРаботы;
	Попытка
		КабинетСотрудникаВнутренний.ЗарегистрироватьИзмененияГрафиковРаботы(ТаблицаСотрудников.Скопировать(Отбор));
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников) Экспорт

	// требуется привилегированный режим, т.к. получаются сведения всех рабочих мест физических лиц
	УстановитьПривилегированныйРежим(Истина);
	
	СписокСотрудников = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	ОбрабатываемыеСотрудники = Новый Соответствие;
	Для каждого Сотрудник Из СписокСотрудников Цикл
		ОбрабатываемыеСотрудники.Вставить(Сотрудник, Истина);
	КонецЦикла;
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "ФизическоеЛицо", Истина);
	
	// Получим публикуемых физических лиц.
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
	|ГДЕ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо В(&ФизическиеЛица)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ДатаПроверкиПубликуемости = НачалоДня(ТекущаяДатаСеанса()) - Настройки.ДнейСохраненияПубликации * 86400;
	ТипГрафикРаботы = КабинетСотрудникаВнутренний.ТипГрафикРаботы();
	
	// РабочиеМеста - сведения о рабочих местах физических лиц на дату актуальности,
	// включая уволенных.
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	РабочиеМеста.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	РабочиеМеста.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	РабочиеМеста.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипГрафикРаботы)));
	
	// БудущиеКадровыеСобытия - даты будущих кадровых событий обрабатываемых сотрудников.
	БудущиеКадровыеСобытия = Новый ТаблицаЗначений;
	БудущиеКадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеКадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновляемыеПозиции = Новый Массив;
	
	// Заполняем таблицы РабочиеМеста, БудущиеКадровыеСобытия.
	Если ИспользоватьКадровыйУчет Тогда
		
		// Будущие кадровые события.
		ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
		ПараметрыПолученияРабочихМест.ВключаяУволенныхНаНачалоПериода = Истина;
		ПараметрыПолученияРабочихМест.НачалоПериода 	= ДатаАктуальности;
		ПараметрыПолученияРабочихМест.СписокСотрудников = СписокСотрудников;
		КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, Ложь, ПараметрыПолученияРабочихМест);
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМеста.Период КАК ДатаСобытия,
		|	РабочиеМеста.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|ГДЕ
		|	РабочиеМеста.Период > &ДатаАктуальности";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(БудущиеКадровыеСобытия.Добавить(), Выборка);
		КонецЦикла;
		
		Если ВедетсяШтатноеРасписание Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(РабочиеМеста.ПериодЗаписи, СЕКУНДА, -1) КАК ДатаСобытия,
			|	РабочиеМеста.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудники
			|ИЗ
			|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
			|ГДЕ
			|	РабочиеМеста.Период <= &ДатаАктуальности";
			Запрос.Выполнить();
			
			ОписательТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТСотрудники", "Сотрудник", "ДатаСобытия");
			ЗапросКД = КадровыйУчет.ЗапросВТКадровыеДанныеСотрудников(Ложь, ОписательТаблицыОтборов, "ДолжностьПоШтатномуРасписанию",,Ложь);
			ЗапросКД.МенеджерВременныхТаблиц = МенеджерВТ;
			ЗапросКД.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеДанные.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.ДолжностьПоШтатномуРасписанию) Тогда
					ОбновляемыеПозиции.Добавить(Выборка.ДолжностьПоШтатномуРасписанию);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполняем таблицу РабочиеМеста.
		// Получим все рабочие места физических лиц на дату актуальности, включая уволенных.
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "РабочееМестоПериодРегистрации,ВидСобытия";
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",Организация,Подразделение,Должность";
		КонецЕсли;
		Если ТипГрафикРаботы <> Неопределено Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ГрафикРаботы";
		КонецЕсли;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.СписокФизическихЛиц 	= СписокФизическихЛиц;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		// Заполним ДолжностьПоШтатномуРасписанию в таблице КадровыеДанныеСотрудников,
		// если не ведется штатное расписание.
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Если ТипГрафикРаботы = Неопределено Тогда
				КадровыеДанныеСотрудников.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
			|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные";
			Запрос.Выполнить();
			КадровыеДанныеСотрудников = КабинетСотрудникаВнутренний.КадровыеДанныеОбновляемыхСотрудников(МенеджерВТ);
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			НоваяСтрока = РабочиеМеста.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ДатаСобытия = СтрокаТЗ.РабочееМестоПериодРегистрации;
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.СписокФизическихЛиц 	= СписокФизическихЛиц;
		
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Организация КАК Организация,
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка) КАК ВидСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК РабочееМестоПериодРегистрации,
		|	"""" КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные";
		Запрос.Выполнить();
		КадровыеДанныеСотрудников = КабинетСотрудникаВнутренний.КадровыеДанныеОбновляемыхСотрудников(МенеджерВТ);
		
		Отбор = Новый Структура("Сотрудник");
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
			ДанныеСотрудника = КадровыеДанные.НайтиСтроки(Отбор);
			ДатаПриема = ДанныеСотрудника[0].ДатаПриема;
			ДатаУвольнения = ДанныеСотрудника[0].ДатаУвольнения;
			
			Если Не ЗначениеЗаполнено(ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДатаУвольнения) Тогда
				
				Если ДатаПриема <= ДатаАктуальности Тогда
					
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = ДатаПриема;
					
				ИначеЕсли ОбрабатываемыеСотрудники[СтрокаТЗ.Сотрудник] <> Неопределено Тогда
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаПриема;
					
				КонецЕсли;
				
			Иначе
				
				Если ДатаУвольнения = ДатаАктуальности Тогда
						
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = ДатаПриема;
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
				ИначеЕсли ДатаУвольнения < ДатаАктуальности Тогда
					
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
				Иначе //ДатаУвольнения > ДатаАктуальности
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
					Если ДатаПриема <= ДатаАктуальности Тогда
						
						НоваяСтрока = РабочиеМеста.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
						НоваяСтрока.ДатаСобытия = ДатаПриема;
						
					ИначеЕсли ОбрабатываемыеСотрудники[СтрокаТЗ.Сотрудник] <> Неопределено Тогда
						
						НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ДатаСобытия = ДатаПриема;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим публикуемые позиции штатного расписания.
	ПозицияЕстьВПравилах = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПубликации.ОбъектПравила КАК Позиция
	|ИЗ
	|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|ГДЕ
	|	ПравилаПубликации.ОбъектПравила ССЫЛКА Справочник.ШтатноеРасписание";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПозицияЕстьВПравилах.Вставить(Выборка.Позиция, Истина);
	КонецЦикла;
	
	РабочиеМеста.Индексы.Добавить("ФизическоеЛицо");
	ТаблицаСотрудников.Индексы.Добавить("ФизическоеЛицо");
	ОтборПоФизическимЛицам = Новый Структура("ФизическоеЛицо");
	
	ФизическиеЛицаСотрудники = Новый Соответствие;
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		
		Сотрудники = Новый Массив;
		ОтборПоФизическимЛицам.ФизическоеЛицо = ФизическоеЛицо;
		
		НайденныеСтроки = ТаблицаСотрудников.НайтиСтроки(ОтборПоФизическимЛицам);
		Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
			Сотрудники.Добавить(СтрокаТЗ.Сотрудник);
		КонецЦикла;
		НайденныеСтроки = РабочиеМеста.НайтиСтроки(ОтборПоФизическимЛицам);
		Для каждого СтрокаТЗ Из РабочиеМеста Цикл
			Если Сотрудники.Найти(СтрокаТЗ.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(СтрокаТЗ.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		ФизическиеЛицаСотрудники.Вставить(ФизическоеЛицо, Сотрудники);
		
	КонецЦикла;
	
	СотрудникиКУдалению = Новый ТаблицаЗначений;
	СотрудникиКУдалению.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиКУдалению.Колонки.Добавить("Добавить", Новый ОписаниеТипов("Булево"));
	
	ПубликацияФизическихЛиц = Новый ТаблицаЗначений;
	ПубликацияФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПубликацияФизическихЛиц.Колонки.Добавить("Публикуется", Новый ОписаниеТипов("Булево"));
	ПубликацияФизическихЛиц.Колонки.Добавить("ОкончаниеПубликации", Новый ОписаниеТипов("Дата"));
	
	ПубликацияСотрудников = Новый ТаблицаЗначений;
	ПубликацияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПубликацияСотрудников.Колонки.Добавить("УсловноПубликуется", Новый ОписаниеТипов("Булево"));
	ПубликацияСотрудников.Колонки.Добавить("Уволен", Новый ОписаниеТипов("Булево"));
	ПубликацияСотрудников.Колонки.Добавить("ОтменитьПубликацию", Новый ОписаниеТипов("Булево"));
	
	ПозицииПубликуемыхСотрудников = Новый Массив;
	СписокГрафиков = Новый Массив;
	РабочиеМестаФизическогоЛица = РабочиеМеста.СкопироватьКолонки();
	ОтборПоСотрудникам = Новый Структура("Сотрудник");
	
	УдалятьНеПубликуемых = ВерсияПриложенияМеньшеВерсии("3.0.3.96");
	
	// Обработка данных
	Для каждого ЭлементКоллекции Из ФизическиеЛицаСотрудники Цикл
		
		ФизическоеЛицо = ЭлементКоллекции.Ключ;
		Сотрудники = ЭлементКоллекции.Значение;
		
		ФизическоеЛицоПубликуется = ПубликуемыеФизическиеЛица[ФизическоеЛицо] <> Неопределено;
		РабочиеМестаФизическогоЛица.Очистить();
		
		ОкончаниеПубликации = Дата(1,1,1);
		ЕстьПубликуемоеРабочееМесто = Ложь;
		
		Для каждого Сотрудник Из Сотрудники Цикл
			
			ОтборПоСотрудникам.Сотрудник = Сотрудник;
			ДанныеСотрудника = РабочиеМеста.Найти(Сотрудник, "Сотрудник");
			
			Если ДанныеСотрудника = Неопределено Или Не ЗначениеЗаполнено(ДанныеСотрудника.ВидСобытия) Тогда
				
				Если ФизическоеЛицоПубликуется Тогда
					НоваяСтрока = СотрудникиКУдалению.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.Добавить = Истина;
				КонецЕсли;
				
			ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				
				Если УдалятьНеПубликуемых Тогда
					Если ФизическоеЛицоПубликуется Тогда
						НоваяСтрока = СотрудникиКУдалению.Добавить();
						НоваяСтрока.Сотрудник = Сотрудник;
						НоваяСтрока.Добавить = Истина;
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					Если ФизическоеЛицоПубликуется И ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
						// Увольнение публикуемого физического лица с публикуемой позиции,
						// запомним самую позднюю дату увольнения сотрудника этого физического лица,
						// при условии, что уволен "недавно".
						ДатаСобытия = ДанныеСотрудника.ДатаСобытия;
						Если ДатаСобытия > ДатаПроверкиПубликуемости Тогда
							ОкончаниеПубликации = ?(ОкончаниеПубликации < ДатаСобытия, ДатаСобытия, ОкончаниеПубликации);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
				
				ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
				Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
					ЕстьПубликуемоеРабочееМесто = Истина;
				ИначеЕсли ФизическоеЛицоПубликуется И Не УдалятьНеПубликуемых Тогда
					// Перевод публикуемого физического лица на не публикуемую позиции,
					// запомним самую позднюю дату сотрудника этого физического лица.
					ДатаСобытия = ДанныеСотрудника.ДатаСобытия;
					Если ДатаСобытия > ДатаПроверкиПубликуемости Тогда
						ОкончаниеПубликации = ?(ОкончаниеПубликации < ДатаСобытия, ДатаСобытия, ОкончаниеПубликации);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
				Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда	
				
				ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
				Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
					ЕстьПубликуемоеРабочееМесто = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьПубликуемоеРабочееМесто Тогда
			
			НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			НоваяСтрока.Публикуется = Истина;
			
			Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
				Если УдалятьНеПубликуемых Тогда
					Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ПубликацияСотрудников.Добавить();
					НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
				Иначе
					НоваяСтрока = ПубликацияСотрудников.Добавить();
					НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
					НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
					ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
					СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			// нет публикуемых рабочих мест, проверим увольнение или перевод с публикуемой позиции
			Если ЗначениеЗаполнено(ОкончаниеПубликации) Тогда
				
				НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				НоваяСтрока.Публикуется = Истина;
				НоваяСтрока.ОкончаниеПубликации = ОкончаниеПубликации;
				Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
					НоваяСтрока = ПубликацияСотрудников.Добавить();
					НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
					НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
					ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
					Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
						СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				Если ФизическоеЛицоПубликуется Тогда
					
					НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
					НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
					НоваяСтрока.Публикуется = Ложь;
					
					Если УдалятьНеПубликуемых Тогда
						Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
							НоваяСтрока = ПубликацияСотрудников.Добавить();
							НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
							НоваяСтрока.ОтменитьПубликацию = Истина;
						КонецЦикла;
					Иначе	
						Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
							// Регистрируем сотрудников к публикации для обновления сведений о рабочих местах,
							// т.к. текущее состояние физического лица - публикуется.
							НоваяСтрока = ПубликацияСотрудников.Добавить();
							НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
							НоваяСтрока.УсловноПубликуется = Истина;
							ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если ЗначениеЗаполнено(НастройкиСервиса.Ответственный) Тогда
		СтрокаТЗ = ПубликацияФизическихЛиц.Найти(НастройкиСервиса.Ответственный, "ФизическоеЛицо");
		Если СтрокаТЗ <> Неопределено Тогда
			// ответственный за сервис всегда публикуется
			СтрокаТЗ.Публикуется = Истина;
			СтрокаТЗ.ОкончаниеПубликации = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
	Если СотрудникиКУдалению.Количество() = 0
		И ПубликацияФизическихЛиц.Количество() = 0
		И ПубликацияСотрудников.Количество() = 0
		И БудущиеКадровыеСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПубликуемыеСотрудники = ПубликацияСотрудников.ВыгрузитьКолонку("Сотрудник");
	Запрос.УстановитьПараметр("ПубликуемыеСотрудники", ПубликуемыеСотрудники);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыДляУдаления.ОбъектДляУдаления КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника КАК ОбъектыДляУдаления
	|ГДЕ
	|	ОбъектыДляУдаления.ОбъектДляУдаления В(&ПубликуемыеСотрудники)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СотрудникиКУдалению.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.Добавить = Ложь;
	КонецЦикла;
	
	// получим ссылки на объекты публикуемых позиций
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПозицииПубликуемыхСотрудников, ОбновляемыеПозиции);
	ПрочиеОбъектыКПубликации = ОбъектыПозицийШтатногоРасписанияПоСсылкам(ПозицииПубликуемыхСотрудников, Истина);
	
	// получим список графиков работы, которые еще не публикуются
	ПубликуемыеГрафикиРаботы = ПубликуемыеГрафикиРаботы(СписокГрафиков);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрочиеОбъектыКПубликации, ПубликуемыеГрафикиРаботы);
	
	// Подготовка таблиц с данными для блокировки объектов перед записью.
	ПубликуемыеОбъектыБлокировка = Новый ТаблицаЗначений;
	ПубликуемыеОбъектыБлокировка.Колонки.Добавить("ОбъектПубликации");
	
	ИзмененияДляСервисаБлокировка = Новый ТаблицаЗначений;
	ИзмененияДляСервисаБлокировка.Колонки.Добавить("ПредметПубликации");
	
	ПубликацииПравНаОтпускБлокировка = Новый ТаблицаЗначений;
	ПубликацииПравНаОтпускБлокировка.Колонки.Добавить("Сотрудник");
	
	Для каждого ЭлементКоллекции Из ПрочиеОбъектыКПубликации Цикл
		НоваяСтрока = ПубликуемыеОбъектыБлокировка.Добавить();
		НоваяСтрока.ОбъектПубликации = ЭлементКоллекции;
		НоваяСтрока = ИзмененияДляСервисаБлокировка.Добавить();
		НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ПубликацияСотрудников Цикл
		НоваяСтрока = ПубликуемыеОбъектыБлокировка.Добавить();
		НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
		НоваяСтрока = ИзмененияДляСервисаБлокировка.Добавить();
		НоваяСтрока.ПредметПубликации = СтрокаТЗ.Сотрудник;
		Если Не СтрокаТЗ.ОтменитьПубликацию И Не СтрокаТЗ.Уволен И Не СтрокаТЗ.УсловноПубликуется Тогда 
			НоваяСтрока = ПубликацииПравНаОтпускБлокировка.Добавить();
			НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ПубликацияФизическихЛиц Цикл
		НоваяСтрока = ИзмененияДляСервисаБлокировка.Добавить();
		НоваяСтрока.ПредметПубликации = СтрокаТЗ.ФизическоеЛицо;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликуемыеОбъектыБлокировка;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляСервисаБлокировка;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = СотрудникиКУдалению;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектДляУдаления", "Сотрудник");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликацияФизическихЛиц;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		ЭлементБлокировки.ИсточникДанных = ПубликацияФизическихЛиц;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликацияФизическихЛиц;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ФизическоеЛицо");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов");
		ЭлементБлокировки.ИсточникДанных = ТаблицаСотрудников;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
		
		КабинетСотрудникаВнутренний.ДобавитьЭлементБлокировкиСотрудникиДляОбновленияПубликацииПравНаОтпуск(Блокировка, ПубликацииПравНаОтпускБлокировка);
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из СотрудникиКУдалению Цикл
			Запись = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектДляУдаления = СтрокаТЗ.Сотрудник;
			Если СтрокаТЗ.Добавить Тогда
				Запись.Записать();
			Иначе
				Запись.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ОбъектПубликации Из ПрочиеОбъектыКПубликации Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ОбъектПубликации;
			Запись.Записать();
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = ОбъектПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ПубликацияСотрудников Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.Сотрудник;
			Если СтрокаТЗ.ОтменитьПубликацию Тогда
				Запись.Удалить();
			Иначе
				Запись.УсловноПубликуется = СтрокаТЗ.УсловноПубликуется;
				Запись.Записать();
			КонецЕсли;
			Если Не СтрокаТЗ.ОтменитьПубликацию Тогда
				Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				Запись.ПредметПубликации = СтрокаТЗ.Сотрудник;
				Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				Запись.Записать();
			КонецЕсли;
			Если Не СтрокаТЗ.ОтменитьПубликацию И Не СтрокаТЗ.Уволен И Не СтрокаТЗ.УсловноПубликуется Тогда
				КабинетСотрудникаВнутренний.ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(СтрокаТЗ.Сотрудник, Ложь);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ПубликацияФизическихЛиц Цикл
			Запись = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			Если СтрокаТЗ.Публикуется Тогда
				Запись.ОкончаниеПубликации = СтрокаТЗ.ОкончаниеПубликации;
				Запись.Записать();
			Иначе
				Запись.Удалить()
			КонецЕсли;
			Если СтрокаТЗ.Публикуется Тогда
				Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				Запись.ПредметПубликации = СтрокаТЗ.ФизическоеЛицо;
				Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				Запись.Записать();
				Запись = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
				Запись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
				Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				Запись.Записать();
			Иначе
				Запись = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
				Запись.ОбъектПубликации = СтрокаТЗ.ФизическоеЛицо;
				Запись.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		ФизическиеЛицаКПубликации = ПубликацияФизическихЛиц.Скопировать(Новый Структура("Публикуется", Истина));
		ПроверитьЗаполнениеСвойствФизическихЛиц(ФизическиеЛицаКПубликации.ВыгрузитьКолонку("ФизическоеЛицо"));
		
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		Отбор = Новый Структура("Сотрудник");
		Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
			НаборЗаписей.Очистить();
			Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
			НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТЗ.Сотрудник);
			НаборЗаписей.Отбор.Событие.Установить(Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные);
			НайденныеСтроки = БудущиеКадровыеСобытия.НайтиСтроки(Отбор);
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
				НоваяЗапись.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Функция ОбъектыПозицийШтатногоРасписанияПоСсылкам(Позиции, ТолькоНеПубликуемые)

	ОбъектыПозиций = Новый Массив;
	
	Если Позиции.Количество() = 0 Тогда
		Возврат ОбъектыПозиций;
	КонецЕсли;
	
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	
	Позиции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Позиции);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, Позиции);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Должность КАК Должность
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций, "Организация", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, Организации);
	ГоловныеОрганизации = Новый Массив;
	Для каждого Организация Из Организации Цикл
		ГоловныеОрганизации.Добавить(ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, ГоловныеОрганизации, Истина);
	
	Должности = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций, "Должность", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, Должности, Истина);
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Подразделения = ПубликуемыеПодразделенияОрганизаций(Позиции);
	Иначе
		Подразделения = КабинетСотрудникаВнутренний.ПубликуемаяСтруктураПредприятия(Позиции);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, Подразделения);
	
	Если ТолькоНеПубликуемые Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыПозиций", ОбъектыПозиций);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
		|ГДЕ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации В(&ОбъектыПозиций)";
		ТекущиеПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
		ПубликуемыеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбъектыПозиций, ТекущиеПубликуемыеОбъекты);
		// добавим подразделения, они всегда обновляются
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПубликуемыеОбъекты, Подразделения);
		
		Возврат ПубликуемыеОбъекты;
		
	Иначе
		
		Возврат ОбъектыПозиций;
		
	КонецЕсли;

КонецФункции 

Функция ПубликуемыеПодразделенияОрганизаций(Позиции)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтатноеРасписание.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Если Подразделения.Количество() > 0 Тогда
		Подразделения = РодителиПодразделений(Подразделения);
	КонецЕсли;
	
	Возврат Подразделения;

КонецФункции

Функция ПубликуемыеГрафикиРаботы(СписокГрафиков)
	
	Если СписокГрафиков.Количество() = 0 Тогда
		Возврат СписокГрафиков;
	КонецЕсли;

	СписокГрафиков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокГрафиков);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикиРаботы", СписокГрафиков);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации В(&ГрафикиРаботы)";
	ТекущиеПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокГрафиков, ТекущиеПубликуемыеОбъекты);

КонецФункции

Процедура ОтменитьРегистрациюУсловноПубликуемыхОбъектов(БылиОшибки)

	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ОкончаниеПубликации = НачалоДня(ТекущаяДатаСеанса()) - Настройки.ДнейСохраненияПубликации * 86400;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОкончаниеПубликации", ОкончаниеПубликации);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|			ПО Сотрудники.Ссылка = ИзмененияДляСервиса.ПредметПубликации
	|		ПО ФизическиеЛица.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ОкончаниеПубликации <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ФизическиеЛица.ОкончаниеПубликации <= &ОкончаниеПубликации
	|	И ИзмененияДляСервиса.БылаОшибкаПриПубликации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|			ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = ИзмененияДляСервиса.ПредметПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется
	|	И ИзмененияДляСервиса.БылаОшибкаПриПубликации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПубликуемыеОбъекты = РезультатЗапроса[1].Выгрузить();
	ФизическиеЛица = РезультатЗапроса[2].Выгрузить();
	
	Если ПубликуемыеОбъекты.Количество() = 0 И ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликуемыеОбъекты;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ФизическиеЛица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ПубликуемыеОбъекты Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.ОбъектПубликации;
			Запись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ФизическиеЛица Цикл
			Запись = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			Запись.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Публикуемые объекты'");
		ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки());
		БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область РегистрацияПубликуемыхОбъектов

Процедура ОбработатьИзменениеКадровойИстории(ИзменившиесяДанные) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Если ИзменившиесяДанные = Неопределено Или ИзменившиесяДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ИзменившиесяДанные.ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)
	|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка";
	ТаблицаСотрудников  = Запрос.Выполнить().Выгрузить();
	
	ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников);
	
КонецПроцедуры

Процедура ОбъектПередЗаписью(Объект) Экспорт

	ИменаКонтролируемыхПолей = ИменаКонтролируемыхПолей(Объект);
	Если Объект.ЭтоНовый() Тогда
		ПрежниеДанныеОбъекта = Новый Структура(ИменаКонтролируемыхПолей);
	Иначе
		ПрежниеДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, ИменаКонтролируемыхПолей);
	КонецЕсли;
	Объект.ДополнительныеСвойства.Вставить("ПрежниеДанныеПубликуемогоОбъекта", ПрежниеДанныеОбъекта);
	
	КабинетСотрудникаВнутренний.ОбъектПередЗаписью(Объект);
	
КонецПроцедуры

Функция ИменаКонтролируемыхПолей(Объект)
	
	ИменаКонтролируемыхПолей = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Должности") Тогда
		ИменаКонтролируемыхПолей = "Наименование";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Организации") Тогда
		ИменаКонтролируемыхПолей = "Наименование,ИНН,ГоловнаяОрганизация";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		Если ПубликоватьСтруктуруЮридическихЛиц() Тогда
			ИменаКонтролируемыхПолей = "Наименование,Код,Родитель,РеквизитДопУпорядочиванияИерархического";
		Иначе
			ИменаКонтролируемыхПолей = "РеквизитДопУпорядочиванияИерархического";
		КонецЕсли;
	Иначе
		ИменаКонтролируемыхПолей = КабинетСотрудникаВнутренний.ИменаКонтролируемыхПолей(Объект);
	КонецЕсли;
	
	Возврат ИменаКонтролируемыхПолей;

КонецФункции

Процедура ОбъектПриЗаписи(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ПриЗаписиФизическогоЛица(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		Если ПубликоватьСтруктуруЮридическихЛиц() Тогда
			ПриЗаписиПубликуемогоОбъекта(Объект);
		Иначе
			ПриЗаписиПодразделенияОрганизации(Объект);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Организации")
		Или ТипЗнч(Объект) = Тип("СправочникОбъект.Должности") Тогда
		ПриЗаписиПубликуемогоОбъекта(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаИзменитьЛичныеДанные")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаНалоговыйВычет")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтпуск")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаСправка2НДФЛ")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтсутствиеПоБолезни") Тогда
		ПриЗаписиЗаявкиСотрудника(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("КонстантаМенеджерЗначения.ИспользоватьЭлектронныеПодписи") Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если Объект.Ссылка = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись() Тогда
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ДокументКадровогоЭДО") Тогда
		ПриЗаписиДокументаКЭДО(Объект);
	Иначе
		КабинетСотрудникаВнутренний.ОбъектПриЗаписи(Объект);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПриЗаписиФизическогоЛица(ФизическоеЛицо)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
	|ГДЕ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо = &ФизическоеЛицо";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", ФизическоеЛицо.Ссылка);
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ОбъектПубликации", ФизическоеЛицо.Ссылка);
			
			ВыполняетсяБлокировка = Истина;
			Блокировка.Заблокировать();
			ВыполняетсяБлокировка = Ложь;
			
			НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПредметПубликации.Установить(ФизическоеЛицо.Ссылка);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ПредметПубликации 	= ФизическоеЛицо.Ссылка;
			ЗаписьНабора.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
			
			НаборЗаписей.Записать();
			
			ПроверитьЗаполнениеСвойствФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо.Ссылка));
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Если ВыполняетсяБлокировка Тогда
				ЗаписьЖурналаРегистрации(ИмяСобытияОшибкаБлокировки(), УровеньЖурналаРегистрации.Ошибка, , ФизическоеЛицо.Ссылка, "РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
			Иначе
				ЗаписатьОшибкуРегистрацииИзменений(ФизическоеЛицо.Ссылка, ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиПодразделенияОрганизации(Подразделение)
	
	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Подразделение.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияКонтролируемыхРеквизитов);
	Если Не КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеПредприятия = КабинетСотрудникаВнутренний.ПодразделениеВСтруктуреПредприятия(Подразделение);
	Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектПубликации", ПодразделениеПредприятия.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
		|ГДЕ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = &ОбъектПубликации";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗарегистрироватьИзмененияДляСервиса(Выборка.ОбъектПубликации);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Объект)

	Если ЗначенияКонтролируемыхРеквизитов = Неопределено Тогда
		Возврат Истина;
	Иначе
		Для каждого ЭлементКоллекции Из ЗначенияКонтролируемыхРеквизитов Цикл
			Если Объект[ЭлементКоллекции.Ключ] <> ЭлементКоллекции.Значение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ПриЗаписиДокументаКЭДО(ДокументОбъект)
	
	Если ДокументОбъект.ПометкаУдаления И Не ВерсияПриложенияМеньшеВерсии("4.0.1.31") Тогда
		
		Если Не КадровыйЭДО.ЭтоТипОбъектаСПечатнымиФормами(ТипЗнч(ДокументОбъект.Ссылка)) Тогда
			Возврат;
		КонецЕсли;
		
		Если ДокументОбъект.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыНаПодписьКУдалениюКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ДокументОбъект.ИдентификаторДокумента);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДокументыНаПодписьКУдалениюКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ДокументОбъект.ИдентификаторДокумента);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ИдентификаторДокумента = ДокументОбъект.ИдентификаторДокумента;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(ДокументОбъект.ИдентификаторДокумента, ОписаниеОшибки());
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		РегистрироватьИзменения = Неопределено;
		ДокументОбъект.ДополнительныеСвойства.Свойство("РегистрироватьИзмененияКабинетСотрудника", РегистрироватьИзменения);
		Если РегистрироватьИзменения <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.ВнешниеПодписанты, "ФизическоеЛицо");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
		|ГДЕ
		|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо В(&ФизическиеЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|ГДЕ
		|	ПубликуемыеОбъекты.ОбъектПубликации = &Организация";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Если Не РезультатЗапроса[0].Пустой() И Не РезультатЗапроса[1].Пустой() Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ПубликуемыйДокумент", ДокументОбъект.Ссылка);
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПубликуемыйДокумент.Установить(ДокументОбъект.Ссылка);
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ПубликуемыйДокумент = ДокументОбъект.Ссылка;
				ЗаписьНабора.ВерсияДанных  = Строка(Новый УникальныйИдентификатор);
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ЗаписатьОшибкуРегистрацииИзменений(ДокументОбъект.Ссылка, ОписаниеОшибки());
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьДокументыНаПодпись() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданияКИсполнению = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
		Ложь, Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокФайлов = ЗаданияКИсполнению.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	Если СписокФайлов <> Неопределено Тогда
		ЗарегистрироватьИзмененияДокументовКадровогоЭДО(СписокФайлов)
	КонецЕсли;
	
КонецПроцедуры

// Выполняет регистрацию документа как изменения к публикации в сервисе.
//
// 	Параметры
// 		СписокФайлов - СписокЗначений содержит ссылки на присоединенный файл.
//
Процедура ЗарегистрироватьИзмененияДокументовКадровогоЭДО(СписокФайлов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФайлов", СписокФайлов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент В(&СписокФайлов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбработанныеФайлы = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПубликуемыйДокумент", "Ссылка");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбработанныеФайлы.Добавить(Выборка.ЭлектронныйДокумент);
				НаборЗаписей = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПубликуемыйДокумент.Установить(Выборка.Ссылка);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ПубликуемыйДокумент = Выборка.Ссылка;
				НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				НаборЗаписей.Записать();
			КонецЦикла;
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработки(
							ОбработанныеФайлы,
							Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(Выборка.Ссылка, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляСервиса(ПредметПубликации)

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", ПредметПубликации);
		
		ВыполняетсяБлокировка = Истина;
		Блокировка.Заблокировать();
		ВыполняетсяБлокировка = Ложь;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(ПредметПубликации);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПредметПубликации 	= ПредметПубликации;
		ЗаписьНабора.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Если ВыполняетсяБлокировка Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияОшибкаБлокировки(), УровеньЖурналаРегистрации.Ошибка, , ПредметПубликации, "РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		Иначе
			ЗаписатьОшибкуРегистрацииИзменений(ПредметПубликации, ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаПубликуемыхОбъектов

Процедура ПроверитьЗаполнениеПубликуемыхОбъектов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
	МассивФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	ПроверитьЗаполнениеСвойствФизическихЛиц(МассивФизическихЛиц);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСвойствФизическихЛиц(МассивФизическихЛиц) Экспорт
	
	Если МассивФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.ОбъектПубликации В(&ФизическиеЛица)";
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущиеОшибки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ТекущиеОшибки.Вставить(Выборка.ОбъектПубликации, Истина);
	КонецЦикла;
	
	ПроверяемыеДанные = "Пол,Фамилия";
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, МассивФизическихЛиц, ПроверяемыеДанные);
	КонтактнаяИнформация = КонтактнаяИнформацияФизическихЛиц(МассивФизическихЛиц);
	УстановитьПривилегированныйРежим(Ложь);
	
	ШаблонПодстроки = "%1" + Символы.ПС + "%2";
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		ОписаниеОшибки = "";
		ЕстьОшибки = ЕстьОшибкиЗаполненияФизическогоЛица(СтрокаТЗ, КонтактнаяИнформация, ОписаниеОшибки, ШаблонПодстроки);
		
		Если ЕстьОшибки Тогда
			Запись = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.ФизическоеЛицо;
			Запись.ЕстьОшибки = Истина;
			Запись.ОписаниеОшибки = ОписаниеОшибки;
			Запись.Записать();
		ИначеЕсли ТекущиеОшибки[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
			Запись = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.ФизическоеЛицо;
			Запись.Удалить();
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьОшибкиЗаполненияФизическогоЛица(СтрокаТЗ, КонтактнаяИнформация, ОписаниеОшибки, ШаблонПодстроки)

	ЕстьОшибки = Ложь;
	
	Если Не ЗначениеЗаполнено(СтрокаТЗ.Пол) Тогда
		ЕстьОшибки = Истина;
		ОписаниеОшибки = НСтр("ru = 'Не указан пол'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТЗ.Фамилия) Тогда
		ЕстьОшибки = Истина;
		Описание = НСтр("ru = 'Не указана фамилия'");
		ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки),Описание,СтрШаблон(ШаблонПодстроки, ОписаниеОшибки, Описание));
	КонецЕсли;
	
	ТелефонМобильный = КонтактнаяИнформация.МобильныеТелефоны[СтрокаТЗ.ФизическоеЛицо];
	АдресПочты = КонтактнаяИнформация.АдресаПочты[СтрокаТЗ.ФизическоеЛицо];
	
	Если Не ЗначениеЗаполнено(ТелефонМобильный) И Не ЗначениеЗаполнено(АдресПочты) Тогда
		ЕстьОшибки = Истина;
		Описание = НСтр("ru = 'Необходимо указать мобильный телефон или адрес электронной почты'");
		ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки),Описание,СтрШаблон(ШаблонПодстроки, ОписаниеОшибки, Описание));
	Иначе
		Если ЗначениеЗаполнено(ТелефонМобильный) Тогда
			Если МобильныйТелефонУказанСОшибкой(ТелефонМобильный) Тогда
				ЕстьОшибки = Истина;
				Описание = НСтр("ru = 'Мобильный телефон указан некорректно'");
				ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки),Описание,СтрШаблон(ШаблонПодстроки, ОписаниеОшибки, Описание));
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресПочты) Тогда
			Если АдресЭлектроннойПочтыУказанСОшибкой(АдресПочты) Тогда
				ЕстьОшибки = Истина;
				Описание = НСтр("ru = 'Адрес электронной почты указан некорректно'");
				ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки),Описание,СтрШаблон(ШаблонПодстроки, ОписаниеОшибки, Описание));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОшибки;

КонецФункции

Функция МобильныйТелефонУказанСОшибкой(ТелефонСтрокой)
	
	РазрешенныеСимволы = "- ()+0123456789";
	ТелефонЦифры = "";
	Для Сч=1 По СтрДлина(ТелефонСтрокой) Цикл
		ОчереднойСимвол = Сред(ТелефонСтрокой, Сч, 1);
		Если СтрНайти(РазрешенныеСимволы, ) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		ТелефонЦифры = ТелефонЦифры + ОчереднойСимвол;
	КонецЦикла;
	
	Если Лев(ТелефонСтрокой, 1) = "+" Тогда
		// код страны должен начинаться цифрой и не равен нулю
		Если СтрНайти("123456789", Сред(ТелефонСтрокой, 2, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(ТелефонЦифры) < 10 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция АдресЭлектроннойПочтыУказанСОшибкой(АдресЭлектроннойПочты)

	АдресСоответствуетТребованиям = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты);
	Если АдресСоответствуетТребованиям Тогда
		// дополнительна проверка
		Позиция = СтрНайти(АдресЭлектроннойПочты,"@");
		ЛокальноеИмя = Лев(АдресЭлектроннойПочты, Позиция - 1);
		Символ = ".";
		АдресСоответствуетТребованиям = Не ((Лев(ЛокальноеИмя,1) = Символ) Или (Прав(ЛокальноеИмя,1) = Символ));
	КонецЕсли;
	
	Возврат Не АдресСоответствуетТребованиям;

КонецФункции

#КонецОбласти

#Область ИменаСобытийЖурналаРегистрации

Функция НазваниеГруппыСобытийЖР()
	
	Возврат НСтр("ru = '1С:Кабинет сотрудника'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияЖРПолучениеИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Получение изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПередачаИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Публикация изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРУдалениеДанных()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Удаление данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРРегистрацияИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Регистрация изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПубликацияРасчетныхЛистов()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Публикация расчетных листов'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРСостояниеСервиса()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Проверка состояния сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПроверкаИспользуемойФункциональности()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Проверка используемой функциональности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияПротоколЗапрос() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Протокол запрос'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПротоколОтвет() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Протокол ответ'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияМенеджера() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Менеджер сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияОтключениеСервиса() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Отключение сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияЖРАутентификации() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПодключениеСервиса()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Подключение сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРНарушениеПравДоступа() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Нарушение прав доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияПрочиеСобытия() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Прочие события'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция СобытияЖРОбмен() Экспорт

	ИменаСобытий = Новый Массив;
	ИменаСобытий.Добавить(НазваниеГруппыСобытийЖР());
	ИменаСобытий.Добавить(ИмяСобытияЖРПолучениеИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРПередачаИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРУдалениеДанных());
	ИменаСобытий.Добавить(ИмяСобытияЖРРегистрацияИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРСостояниеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРПроверкаИспользуемойФункциональности());
	ИменаСобытий.Добавить(ИмяСобытияПротоколЗапрос());
	ИменаСобытий.Добавить(ИмяСобытияПротоколОтвет());
	ИменаСобытий.Добавить(ИмяСобытияМенеджера());
	ИменаСобытий.Добавить(ИмяСобытияОтключениеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРАутентификации());
	ИменаСобытий.Добавить(ИмяСобытияПодключениеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРНарушениеПравДоступа());
	ИменаСобытий.Добавить(ИмяСобытияПрочиеСобытия());
	ИменаСобытий.Добавить(ИмяСобытияОшибкаБлокировки());
	
	Возврат ИменаСобытий;
	
КонецФункции

Функция СобытияЖРПубликацияРЛ() Экспорт

	ИменаСобытий = Новый Массив;
	ИменаСобытий.Добавить(НазваниеГруппыСобытийЖР());
	ИменаСобытий.Добавить(ИмяСобытияЖРПубликацияРасчетныхЛистов());
	ИменаСобытий.Добавить(ИмяСобытияЖРСостояниеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРПроверкаИспользуемойФункциональности());
	ИменаСобытий.Добавить(ИмяСобытияПротоколЗапрос());
	ИменаСобытий.Добавить(ИмяСобытияПротоколОтвет());
	ИменаСобытий.Добавить(ИмяСобытияМенеджера());
	ИменаСобытий.Добавить(ИмяСобытияЖРАутентификации());
	ИменаСобытий.Добавить(ИмяСобытияЖРНарушениеПравДоступа());
	ИменаСобытий.Добавить(ИмяСобытияПрочиеСобытия());
	ИменаСобытий.Добавить(ИмяСобытияОшибкаБлокировки());
	
	Возврат ИменаСобытий;
	
КонецФункции

Функция ВсеСобытияЖР() Экспорт

	ИменаСобытий = Новый Массив;
	ИменаСобытий.Добавить(НазваниеГруппыСобытийЖР());
	ИменаСобытий.Добавить(ИмяСобытияЖРПолучениеИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРПередачаИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРУдалениеДанных());
	ИменаСобытий.Добавить(ИмяСобытияЖРРегистрацияИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРПубликацияРасчетныхЛистов());
	ИменаСобытий.Добавить(ИмяСобытияЖРСостояниеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРПроверкаИспользуемойФункциональности());
	ИменаСобытий.Добавить(ИмяСобытияПротоколЗапрос());
	ИменаСобытий.Добавить(ИмяСобытияПротоколОтвет());
	ИменаСобытий.Добавить(ИмяСобытияМенеджера());
	ИменаСобытий.Добавить(ИмяСобытияОтключениеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРАутентификации());
	ИменаСобытий.Добавить(ИмяСобытияПодключениеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРНарушениеПравДоступа());
	ИменаСобытий.Добавить(ИмяСобытияПрочиеСобытия());
	ИменаСобытий.Добавить(ИмяСобытияОшибкаБлокировки());
	
	Возврат ИменаСобытий;

КонецФункции

Функция ИмяСобытияОшибкаБлокировки() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Ошибка блокировки'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Процедура ЗаписатьОшибкуВызова(ИмяСобытияЖР, СтруктураАдресаПриложения, Метод, HTTPЗапрос, HTTPОтвет = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	АдресСервера = СтрШаблон( "%1://%2", СтруктураАдресаПриложения.Схема, СтруктураАдресаПриложения.ИмяСервера);
	
	ЗапросТекст = Метод + " " + АдресСервера + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(ТелоОтвета) Тогда
			ОтветТекст = ОтветТекст + Символы.ПС + Символы.ПС + ТелоОтвета;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОписаниеОшибки = Неопределено Тогда
		ОтветТекст = ОтветТекст + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;

	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВыгрузкиИзменений(ДанныеСсылка, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при выгрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСсылка), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖРПередачаИзменений(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСсылка, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьПредупреждениеВыгрузкиИзменений(ДанныеСсылка, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при выгрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСсылка), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖРПередачаИзменений(), УровеньЖурналаРегистрации.Предупреждение,, ДанныеСсылка, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуПриВыгрузкиИзменений(ОписаниеИзменений, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при выгрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеИзменений, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖРПередачаИзменений(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖРПередачаИзменений(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки)
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при загрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ТипИзменений, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖРПолучениеИзменений(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, HTTPЗапрос)

	ЭтоПередачаФайла = (СтрНайти(HTTPЗапрос.АдресРесурса, РесурсФайлы()) > 0);
	
	АдресСервера = СтрШаблон( "%1://%2", ПараметрыПодключения.СтруктураАдресаПриложения.Схема, ПараметрыПодключения.СтруктураАдресаПриложения.ИмяСервера);
	
	ЗапросТекст = ИмяМетода + " " + АдресСервера + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	ТелоЗапроса = "";
	Если Не ЭтоПередачаФайла Тогда
		ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
		
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ТелоЗапроса);
	ЗаписьЖурналаРегистрации(ИмяСобытияПротоколЗапрос(), УровеньЖурналаРегистрации.Информация,,,Комментарий);	

КонецПроцедуры

Процедура ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, HTTPЗапрос, HTTPОтвет)

	ЭтоПередачаФайла = (СтрНайти(HTTPЗапрос.АдресРесурса, РесурсФайлы()) > 0);
	
	АдресСервера = СтрШаблон( "%1://%2", ПараметрыПодключения.СтруктураАдресаПриложения.Схема, ПараметрыПодключения.СтруктураАдресаПриложения.ИмяСервера);
	
	ЗапросТекст = ИмяМетода + " " + АдресСервера + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		Если Не ЭтоПередачаФайла Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(ТелоОтвета) Тогда
				ОтветТекст = ОтветТекст + Символы.ПС + Символы.ПС + ТелоОтвета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИмяСобытияПротоколОтвет(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуРегистрацииИзменений(ДанныеСсылка, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при регистрации изменений %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСсылка), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСсылка, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибкуПубликацииОбъекта(ОбъектПубликации, РесурсСервиса, ОписаниеОшибки) Экспорт

	Если ЗначениеЗаполнено(ОбъектПубликации) Тогда
		ПредставлениеОбъекта = Строка(ОбъектПубликации);
	Иначе
		ПредставлениеОбъекта = НСтр("ru = '<объект не найден>'");
	КонецЕсли;
	
	ШаблонОписания = НСтр(
	"ru = 'Ошибка публикации: ресурс: %1, объект: %2
	|Описание ошибки:
	|%3'");
	ТекстОшибки = СтрШаблон(ШаблонОписания, РесурсСервиса, ПредставлениеОбъекта, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖРПередачаИзменений(), УровеньЖурналаРегистрации.Ошибка,, ОбъектПубликации, ТекстОшибки);

КонецПроцедуры

Функция ПодробностиВЖурналеРегистрации()

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.'");

КонецФункции

Процедура ЗаписатьОшибкуЧтенияJSON(ОтветСтрока, ОписаниеОшибки)

	ШаблонОписания = НСтр(
	"ru = 'Ошибка чтения JSON:
	|Описание ошибки:
	|%1
	|Строка JSON:
	|%2'");
	
	ОтветСтрокаПустой = НСтр("ru = '<пустая строка>'");
	ОтветСтрока = ?(Не ЗначениеЗаполнено(ОтветСтрока), ОтветСтрокаПустой, ОтветСтрока);
	Комментарий = СтрШаблон(ШаблонОписания, ОписаниеОшибки, ОтветСтрока);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Процедура ЗаписатьПредупреждениеПроверкиВерсийФайлов(ДокументКЭДО, ТекстСообщения)

	ШаблонОписания = НСтр(
	"ru = 'Проверка версии электронного документа:
	|%1'");
	Комментарий = СтрШаблон(ШаблонОписания, ТекстСообщения);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Предупреждение,, ДокументКЭДО, Комментарий);

КонецПроцедуры

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступнаПубликацияРасчетныхЛистков() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника);

КонецФункции

#КонецОбласти

#Область ОбслуживаниеОбменаССервисом

// Процедура регламентного задания ОбменССервисомКабинетСотрудника
//
Процедура ОбменССервисомКабинетСотрудника() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника);
	Если ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияПубликации()) Тогда
		Возврат;
	КонецЕсли;
	
	Если СервисЗаблокирован() Тогда
		// Сервис заблокирован.
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не Настройки.ВыполнятьРегламентноеЗадание Тогда
		// Реализации паузы первого запуска регламентного задания.
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.ВключитьВыполнениеРегламентногоЗадания();
		Возврат;
	КонецЕсли;
	
	БылиОшибки = РезультатВыполненияОбменаССервисом(Ложь);
	
	Если БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Обмен данными с сервисом 1С:Кабинет сотрудника завершен с ошибками.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменССервисомФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки", Ложь);
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал публикацию.
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Результат.БылиОшибки = РезультатВыполненияОбменаССервисом(Параметры.ПодготовитьДанныеДляТехПоддержки);
	Исключение
		Результат.БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция РезультатВыполненияОбменаССервисом(ВестиПротокол)
	
	РезультатОбмена = РегистрыСведений.РезультатОбменаКабинетСотрудника.РезультатОбмена();
	РезультатОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), Настройки.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), Настройки.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Начало процесса обмена данными.'");
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
	БылиОшибки = Ложь;
	Попытка
		
		СервисКабинетСотрудникаВЛокальнойСети = Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить();
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Если Не СервисКабинетСотрудникаВЛокальнойСети И Не Настройки.ТестовыйТарифАктивирован Тогда
			Если Не ОбщегоНазначения.РазделениеВключено() Тогда
				КабинетСотрудникаМенеджерСервиса.АктивироватьТестовыйТариф(ВестиПротокол);
			КонецЕсли;
		ИначеЕсли Не СервисКабинетСотрудникаВЛокальнойСети И Не Настройки.СообщениеОбАктивацииТестовогоТарифаОтправлено Тогда
			КабинетСотрудникаМенеджерСервиса.ОтправитьСообщениеОбАктивацииТестовогоТарифа(ВестиПротокол);
		КонецЕсли;
		
		ПроверитьВерсиюОбновитьФункциональностьСервиса(ВестиПротокол);
		ОпубликоватьНастройкиЗаявокНаОтпуск(ВестиПротокол);
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПередачаИзменений(), ВестиПротокол);
		ОпубликоватьИзменения(ПараметрыПодключения, БылиОшибки);
		ОпубликоватьИзмененияЗаявок(ПараметрыПодключения, БылиОшибки);
		ОпубликоватьУдалениеДокументовНаПодпись(ПараметрыПодключения, БылиОшибки);
		ОпубликоватьИзмененияДокументов(ПараметрыПодключения, БылиОшибки);
		
		ПараметрыПодключения.ИмяСобытияЖР = ИмяСобытияЖРУдалениеДанных();
		ОпубликоватьУдалениеДанных(ПараметрыПодключения, БылиОшибки);
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПолучениеИзменений(), ВестиПротокол);
		ЗагрузитьИзмененияИзСервиса(ПараметрыПодключения, БылиОшибки);
		
		ВыполнитьОбработчикиОбмена(ВестиПротокол);
		
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	РезультатОбмена.ДатаОкончания = ТекущаяДатаСеанса();
	РезультатОбмена.БылиОшибки = БылиОшибки;
	РегистрыСведений.РезультатОбменаКабинетСотрудника.ЗаписатьРезультатОбмена(РезультатОбмена);
	
	СтрокаСобытие = НСтр("ru = 'Окончание процесса обмена данными.'");
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
	Возврат БылиОшибки;
	
КонецФункции

Процедура ОбновлениеПубликацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания", Ложь);
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал публикацию.
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), Настройки.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), Настройки.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Начало процесса обновления публикации.'");
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
	БылиОшибки = Ложь;
	
	Попытка
		ПроверитьВерсиюОбновитьФункциональностьСервиса(Параметры.ПодготовитьДанныеДляТехПоддержки);
		ОпубликоватьНастройкиЗаявокНаОтпуск(Параметры.ПодготовитьДанныеДляТехПоддержки);
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖРРегистрацияИзменений(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	ОтложенноеОбновлениеСписковПубликуемыхОбъектов(БылиОшибки);
	
	// Регистрация всех публикуемых объектов как изменения для публикации.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		КабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиПриОбновленииПубликации(Блокировка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
		ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты";
		ПрочиеПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
		
		НаборЗаписейИзменения = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписейВычеты    = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		Для каждого ОбъектПубликации Из ФизическиеЛица Цикл
			ЗаписьНабора = НаборЗаписейИзменения.Добавить();
			ЗаписьНабора.ПредметПубликации = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			ЗаписьНабора = НаборЗаписейВычеты.Добавить();
			ЗаписьНабора.ФизическоеЛицо = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		Для каждого ОбъектПубликации Из ПрочиеПубликуемыеОбъекты Цикл
			ЗаписьНабора = НаборЗаписейИзменения.Добавить();
			ЗаписьНабора.ПредметПубликации = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		НаборЗаписейИзменения.Записать();
		НаборЗаписейВычеты.Записать();
		
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеПубликуемыхОбъектов(ПрочиеПубликуемыеОбъекты, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖРРегистрацияИзменений(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПередачаИзменений(), Параметры.ПодготовитьДанныеДляТехПоддержки);
		ПараметрыПодключения.ОбновлениеПубликации = Истина;
		ОпубликоватьИзменения(ПараметрыПодключения, БылиОшибки);
		
		ПараметрыПодключения.ИмяСобытияЖР = ИмяСобытияЖРУдалениеДанных();
		ОпубликоватьУдалениеДанных(ПараметрыПодключения, БылиОшибки);

	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	СтрокаСобытие = НСтр("ru = 'Окончание процесса обновления публикации.'");
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
	Результат.БылиОшибки = БылиОшибки;
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	Результат.ДатаОкончания = ТекущаяДатаСеанса();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция КлючФоновогоЗаданияПубликации() Экспорт

	Возврат "ПубликацияВСервисе";

КонецФункции

Функция ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗадания)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат (АктивныеФоновыеЗадания.Количество() > 0);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ИнициализироватьРолиИсполнителейЗадач(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьБизнесПроцессыИЗадачи.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	РолиИсполнителей = Новый Массив;
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РолиИсполнителей", РолиИсполнителей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Ссылка В(&РолиИсполнителей)
	|	И (НЕ РолиИсполнителей.ИспользуетсяСОбъектамиАдресации
	|			ИЛИ НЕ РолиИсполнителей.ИспользуетсяБезОбъектовАдресации
	|			ИЛИ РолиИсполнителей.ТипыОсновногоОбъектаАдресации <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации))";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.РолиИсполнителей", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		РольИсполнителя = Выборка.Ссылка.ПолучитьОбъект();
		РольИсполнителя.ИспользуетсяСОбъектамиАдресации 	= Истина;
		РольИсполнителя.ИспользуетсяБезОбъектовАдресации 	= Истина;
		РольИсполнителя.ТипыОсновногоОбъектаАдресации 		= ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РольИсполнителя);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПубликациюПравНаВычеты(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновления
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновления.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛицаДляОбновления.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "ПроверкаСостоянияСервисаКабинетСотрудника");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Не ЗначениеЗаполнено(Задания) Или Задания[0].Использование Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура УстановитьВерсияИзмененийКабинетСотрудника() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(УдалитьВерсииЗаявокКабинетСотрудника.ВерсияИзменений) КАК ВерсияИзменений
	|ИЗ
	|	РегистрСведений.УдалитьВерсииЗаявокКабинетСотрудника КАК УдалитьВерсииЗаявокКабинетСотрудника";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Константы.ВерсияИзмененийКабинетСотрудника.Получить() <> Выборка.ВерсияИзменений Тогда
			Константы.ВерсияИзмененийКабинетСотрудника.Установить(Выборка.ВерсияИзменений);
		КонецЕсли;
		РегистрыСведений.УдалитьВерсииЗаявокКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПубликуемыхФизическихЛиц(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	МассивФизическихЛиц = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.ОбъектПубликации В(&ФизическиеЛица)";
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущиеОшибки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ТекущиеОшибки.Вставить(Выборка.ОбъектПубликации, Истина);
	КонецЦикла;
	
	ПроверяемыеДанные = "Пол,Фамилия";
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, МассивФизическихЛиц, ПроверяемыеДанные);
	КонтактнаяИнформация = КонтактнаяИнформацияФизическихЛиц(МассивФизическихЛиц);
	
	ШаблонПодстроки = "%1" + Символы.ПС + "%2";
	ОбработкаВыполнена = Истина;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		ОписаниеОшибки = "";
		ЕстьОшибки = ЕстьОшибкиЗаполненияФизическогоЛица(СтрокаТЗ, КонтактнаяИнформация, ОписаниеОшибки, ШаблонПодстроки);
		
		Если ЕстьОшибки Или ТекущиеОшибки[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника", "ОбъектПубликации", СтрокаТЗ.ФизическоеЛицо) Тогда
				ОбработкаВыполнена = Ложь;
				Продолжить;
			КонецЕсли;
		
			НаборЗаписей = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаТЗ.ФизическоеЛицо);
			Если ЕстьОшибки Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ОбъектПубликации = СтрокаТЗ.ФизическоеЛицо;
				ЗаписьНабора.ЕстьОшибки = Истина;
				ЗаписьНабора.ОписаниеОшибки = ОписаниеОшибки;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеНастроекСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не ЗначениеЗаполнено(Настройки.ВерсияПриложения) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Настройки.ВерсияПриложения, "3.0.1.1") < 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеНастроекСервисаВерсии303(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не ЗначениеЗаполнено(Настройки.ВерсияПриложения) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Настройки.ВерсияПриложения, "3.0.3.1") < 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Получить() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Константа.КонтролироватьОзнакомлениеСРасчетнымиЛистками", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			МенеджерКонстанты = Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.СоздатьМенеджерЗначения();
			МенеджерКонстанты.Значение = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ОбновитьПубликациюПотерянныхОбъектов(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не ЗначениеЗаполнено(Настройки.ВерсияПриложения) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Настройки.ВерсияПриложения, "3.0.3.96") < 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ОкончаниеПубликации = ДАТАВРЕМЯ(1, 1, 1)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	ОбъектыКПубликации = ПотерянныеОбъектыСервиса(ФизическиеЛица);
	
	Если ОбъектыКПубликации.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Для каждого СтрокаТЗ Из ОбъектыКПубликации Цикл
		
		ВыполняетсяБлокировка = Ложь;
		
		НачатьТранзакцию();
		Попытка
			
			Если ПараметрыОбновления <> Неопределено Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ОбъектПубликации", СтрокаТЗ.ПубликуемыйОбъект);
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", СтрокаТЗ.ПубликуемыйОбъект);
				Если ТипЗнч(СтрокаТЗ.ПубликуемыйОбъект) = Тип("СправочникСсылка.Сотрудники") Тогда
					КабинетСотрудникаВнутренний.ДобавитьЭлементБлокировкиСотрудникиДляОбновленияПубликацииПравНаОтпуск(Блокировка, СтрокаТЗ.ПубликуемыйОбъект);
				КонецЕсли;
				
				ВыполняетсяБлокировка = Истина;
				Блокировка.Заблокировать();
				ВыполняетсяБлокировка = Ложь;
				
			КонецЕсли;
				
			НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаТЗ.ПубликуемыйОбъект);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ОбъектПубликации = СтрокаТЗ.ПубликуемыйОбъект;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПредметПубликации.Установить(СтрокаТЗ.ПубликуемыйОбъект);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ПредметПубликации = СтрокаТЗ.ПубликуемыйОбъект;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			Если ТипЗнч(СтрокаТЗ.ПубликуемыйОбъект) = Тип("СправочникСсылка.Сотрудники") Тогда
				КабинетСотрудникаВнутренний.ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(СтрокаТЗ.ПубликуемыйОбъект, Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Если ВыполняетсяБлокировка Тогда
				ОбработкаЗавершена = Ложь;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение, , "РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника", "ОбъектПубликации");
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьСобытиеСотрудникиДляОбновленияПубликуемыхОбъектов(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДляОбновления.Сотрудник КАК Сотрудник,
	|	СотрудникиДляОбновления.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА СотрудникиДляОбновления.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные)
	|		ИНАЧЕ СотрудникиДляОбновления.Событие
	|	КОНЕЦ КАК Событие
	|ИЗ
	|	РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СотрудникиДляОбновления.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления
	|		ГДЕ
	|			СотрудникиДляОбновления.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.ПустаяСсылка)) КАК Сотрудники
	|		ПО СотрудникиДляОбновления.Сотрудник = Сотрудники.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов", "Сотрудник", Выборка.Сотрудник) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		
		Пока Выборка.Следующий() Цикл
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Сотрудник 		= Выборка.Сотрудник;
			ЗаписьНабора.ДатаСобытия 	= Выборка.ДатаСобытия;
			ЗаписьНабора.Событие 		= Выборка.Событие;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ОбновитьФункциональностьСервисаПриИспользованииКЭДО(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Настройки.ТребуетсяОбновитьНастройкиФункциональности Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаЗавершена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаЗавершена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьСодержимоеДокументаКЭДОРасчетныхЛистков(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.СодержимоеДокумента = ЗНАЧЕНИЕ(Перечисление.СодержимоеДокументов.ПустаяСсылка)
	|	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументКадровогоЭДО.Дата УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ДокументКадровогоЭДО", "Ссылка", Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СодержимоеДокумента = Перечисления.СодержимоеДокументов.СодержитЗарплату;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

#КонецОбласти

#Область ПроверкаСостоянияСервиса

// Процедура регламентного задания ПроверкаСостоянияСервисаКабинетСотрудника
Процедура ПроверкаСостоянияСервиса() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	
	ИСДоступна = СостояниеИнформационнойСистемы();
	Если ИСДоступна = Неопределено Тогда
		// Не удалось получить информацию о состоянии ИС.
		Возврат;
	КонецЕсли;
	
	СервисЗаблокирован = Не ИСДоступна;
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьСостояниеБлокировкиСервиса(СервисЗаблокирован);

КонецПроцедуры

Функция СостояниеИнформационнойСистемы() Экспорт

	ИСДоступна = Неопределено;
	
	РесурсСервиса = "/api/application/access";
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРСостояниеСервиса(), Ложь);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат ИСДоступна;
		КонецПопытки;
		СостояниеДоступа = ОбъектОтвета["infosystemAccess"];
		Если ЗначениеЗаполнено(СостояниеДоступа) Тогда
			ИСДоступна = (СостояниеДоступа <> "denied"); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИСДоступна;

КонецФункции 

#КонецОбласти

#Область УправлениеИспользуемойФункциональности

Процедура ОбновитьНастройкиФункциональностиСервиса(ВестиПротокол) Экспорт

	Отказ = Ложь;
	
	Если ВерсияПриложенияМеньшеВерсии("3.0.1.1") Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = ТекущиеИспользуемыеФункции(ВестиПротокол);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяОбновитьДоступнуюФункциональностьСервиса(Ответ.ИспользуемыеФункции) Тогда
		ДоступнаяФункциональностьСервиса = ДоступнаяФункциональностьСервиса();
		Ответ = УстановитьИспользуемыеФункции(ДоступнаяФункциональностьСервиса, ВестиПротокол);
		Если Ответ.СообщениеОбОшибке = Неопределено Тогда
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Ложь);
		КонецЕсли;
	Иначе
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьИспользуемыеФункции(ИспользуемыеФункции, ВестиПротокол)

	Результат = Новый Структура("СообщениеОбОшибке");
	
	ТелоЗапроса = ТелоЗапросаИспользуемыеФункции(ИспользуемыеФункции);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = "/api/used-features";
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПроверкаИспользуемойФункциональности(), ВестиПротокол);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT", СтрокаТела);
	
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТекущиеИспользуемыеФункции(ВестиПротокол)

	Результат = Новый Структура("ИспользуемыеФункции, СообщениеОбОшибке");
	
	РесурсСервиса = "/api/used-features";
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПроверкаИспользуемойФункциональности(), ВестиПротокол);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
	
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
			Возврат Результат;
		КонецПопытки;
		Результат.ИспользуемыеФункции = ИспользуемыеФункцииПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ДоступнаяФункциональностьСервиса() Экспорт

	ДоступнаяФункциональность = КабинетСотрудникаВнутренний.ДоступнаяФункциональностьСервиса();
	
	ДоступнаяФункциональность.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	
	УстановитьПривилегированныйРежим(Истина);
	СистемнаяУчетнаяЗаписьНастроена = РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	ДоступнаяФункциональность.ДоступноПолучениеКопииНаЭлектроннуюПочту = СистемнаяУчетнаяЗаписьНастроена;
	
	ДоступнаяФункциональность.ЗапросМестаРаботыВЗаявлении = Не ВерсияПриложенияМеньшеВерсии("3.0.3.1");
	ДоступнаяФункциональность.ДоступноПолучениеФайлаДляПечати = Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	Возврат ДоступнаяФункциональность;

КонецФункции

Функция ТребуетсяОбновитьДоступнуюФункциональностьСервиса(ТекущаяФункциональность)

	ДоступнаяФункциональность = ДоступнаяФункциональностьСервиса();
	Для каждого ЭлементКоллекции Из ДоступнаяФункциональность Цикл
		Если ЭлементКоллекции.Значение <> ТекущаяФункциональность[ЭлементКоллекции.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Функция ТелоЗапросаИспользуемыеФункции(ИспользуемыеФункции)

	ТелоЗапроса = Новый Соответствие;
	ОписаниеОбъекта = ОписаниеОбъектаИспользуемыеФункции();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ТелоЗапроса.Вставить(ЭлементКоллекции.Ключ, ИспользуемыеФункции[ЭлементКоллекции.Значение]);
	КонецЦикла;
	
	Возврат ТелоЗапроса;

КонецФункции

Функция ИспользуемыеФункцииПоОтветуНаЗапрос(ОбъектОтвета)
	
	ОписаниеОбъекта = ОписаниеОбъектаИспользуемыеФункции();
	Описание = Новый Структура;
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Описание.Вставить(ЭлементКоллекции.Значение, ОбъектОтвета[ЭлементКоллекции.Ключ]);
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеОбъектаИспользуемыеФункции()

	Описание = Новый Соответствие;
	Описание.Вставить("salaryInfo", 						"ИнформацияОЗарплате");
	Описание.Вставить("taxDeductionApplication", 			"ЗаявленияНаВычетыНДФЛ");
	Описание.Вставить("absenceInfo", 						"РегистрацияОтсутствий");
	Описание.Вставить("personalReason", 					"ОтсутствиеПоЛичнымОбстоятельствам");
	Описание.Вставить("late", 								"Опоздание");
	Описание.Вставить("vacation", 							"Отпуск");
	Описание.Вставить("illness", 							"Болезнь");
	Описание.Вставить("businessTrip", 						"Командировка");
	Описание.Вставить("studyLeave", 						"УчебныйОтпуск");
	Описание.Вставить("unpaidLeave", 						"ОтпускБезОплаты");
	Описание.Вставить("timeOff", 							"Отгул");
	Описание.Вставить("maternityLeave", 					"ОтпускПоБеременностиИРодам");
	Описание.Вставить("parentalLeave", 						"ОтпускПоУходуЗаРебенком");
	Описание.Вставить("invalidChildCare", 					"УходЗаРебенкомИнвалидом");
	Описание.Вставить("vacationInfo", 						"ИнформацияОбОтпуске");
	Описание.Вставить("vacationScheduleInfo", 				"ГрафикОтпусков");
	Описание.Вставить("form2NDFLRequest", 					"ЗапросСправки2НДФЛ");
	Описание.Вставить("certificateFromEmployerRequest", 	"ЗапросСправкиСМестаРаботы");
	Описание.Вставить("employeeAddress", 					"АдресСотрудника");
	Описание.Вставить("personalContactInfo", 				"ЛичнаяКонтактнаяИнформация");
	Описание.Вставить("personalInformationChangeRequest", 	"ЗапросНаИзменениеЛичнойИнформации");
	Описание.Вставить("fileForPrinterOutput", 				"ДоступноПолучениеФайлаДляПечати");
	Описание.Вставить("documentScan", 						"ДоступноПолучениеСканаОригинала");
	Описание.Вставить("fileWithElectronicSignature", 		"ДоступноПолучениеДокументаСЭП");
	Описание.Вставить("paperForm", 							"ДоступноПолучениеДокументаВБумажномВиде");
	Описание.Вставить("sendCopyToEMail", 					"ДоступноПолучениеКопииНаЭлектроннуюПочту");
	Описание.Вставить("leaveEncashmentRequest",				"ЗаявленияНаКомпенсациюОтпуска");
	Описание.Вставить("voluntaryInsuranceContributions",	"ЗаявленияНаДСВ");
	Описание.Вставить("calculationMethodPercentage",			"СпособРасчетаДСВПроцентом");
	Описание.Вставить("calculationMethodFixedAmount",			"СпособРасчетаДСВСуммой");
	Описание.Вставить("calculationMethodPercentageUpToAmount",	"СпособРасчетаДСВПроцентомНеБолееСуммы");
	Описание.Вставить("positionRequestsInApplication", 		"ЗапросМестаРаботыВЗаявлении");
	
	Возврат Описание;
	
КонецФункции

Функция НовоеОписаниеИспользуемыеФункции() Экспорт
	
	ОписаниеОбъекта = ОписаниеОбъектаИспользуемыеФункции();
	
	Описание = Новый Структура;
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Описание.Вставить(ЭлементКоллекции.Значение, Ложь);
	КонецЦикла;
	
	Возврат Описание;

КонецФункции

Процедура СохранитьНастройкиИспользуемаяФункциональностьСервиса(НастройкиФункциональность, СообщениеОбОшибке = Неопределено) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.СохранитьНовыеНастройки(НастройкиФункциональность);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область РаботаСЛокальнымСервисом

Процедура ПодключениеКСервисуЛокальноФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СсылкаДляАдминистратора,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ВерсияПриложения = "";
	ИдентификаторПриложения = "";
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.АдресПриложения 		= Параметры.АдресПриложения;
	Настройки.АбонентСервисаИнициализирован 				= Истина;
	Настройки.ТребуетсяОбновитьНастройкиФункциональности 	= Истина;
	НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьКлючиПриложенияВБезопасномХранилище(Параметры.ИдентификаторКлиента, Параметры.СекретКлиента);
	УстановитьПривилегированныйРежим(Ложь);
	
	ШаблонСообщения = НСтр("ru='Подключение недоступно. Указаны неверные настройки подключения или недоступно приложение по адресу ""%1"". Обратитесь к вашему администратору.'");
	ТекстСообщенияОбОшибке = СтрШаблон(ШаблонСообщения, Параметры.АдресПриложения);
	
	// Получим токен аутентификации, это проверка правильности ввода данных настройки сервиса.
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияПодключениеСервиса(), Ложь);
	Соединение = ПараметрыПодключения.Соединение;
	Токен = ТокенАутентификации(Соединение, ПараметрыПодключения);
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Результат.СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Отказ = Истина
	КонецЕсли;
	
	// Запрос GET /application/info
	Если Не Отказ Тогда
		
		РесурсСервиса = "/api/application/info";
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			ВерсияПриложения 		= ОбъектОтвета["applicationVersion"];
			ИдентификаторПриложения = ОбъектОтвета["id"];
			Если Не ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
				СообщениеОбОшибке = НСтр("ru='Подключение недоступно. Приложение еще не зарегистрировано, обратитесь к вашему администратору.'");
				Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Запрос PUT /application/settings
	Если Не Отказ Тогда
		
		НастройкаПриложения = Новый Соответствие;
		НастройкаПриложения.Вставить("applicationUrl", Параметры.АдресПриложения);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, НастройкаПриложения);
		СтрокаТела = ЗаписьJSON.Закрыть();
		
		РесурсСервиса = "/api/application/settings";
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT", СтрокаТела);
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Иначе
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Публикация ответственного
	Если Не Отказ Тогда
		БылиОшибки = ОпубликоватьОтветственноеЛицо(Параметры.Ответственный);
		Если БылиОшибки Тогда
			Результат.СообщениеОбОшибке = НСтр("ru='Не удалось опубликовать ответственное лицо.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Запрос POST /administrators
	Если Не Отказ Тогда
		
		Ответ = УстановитьАдминистратораПриложения(ПараметрыПодключения, Параметры.ОписаниеАдминистратора);
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			Результат.СсылкаДляАдминистратора = ОбъектОтвета["logonUrl"];
		Иначе
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Ключи");
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Токен");
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		ОбновитьНастройкиФункциональностиСервиса(Ложь);
		
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Настройки.ИдентификаторПриложения 	= ИдентификаторПриложения;
		Настройки.Идентификатор 			= "local";
		Настройки.ВерсияПриложения 			= ВерсияПриложения;
		Настройки.Ответственный 			= Параметры.Ответственный;
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ОбновлениеОтветственногоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("НовыйОтветственный,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ТекстСообщенияОбОшибке = НСтр("ru='Не удалось изменить ответственное лицо.'");
	СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
	
	БылиОшибки = ОпубликоватьОтветственноеЛицо(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПолучениеИзменений(), Ложь);
		Ответ = УстановитьАдминистратораПриложения(ПараметрыПодключения, Параметры.ОписаниеАдминистратора);
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
			Результат.НовыйОтветственный = Параметры.Ответственный;
			Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
			Настройки.Ответственный = Параметры.Ответственный;
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
			НаборЗаписей.Записать();
		Иначе
			Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция УстановитьАдминистратораПриложения(ПараметрыПодключения, ОписаниеАдминистратора)

	ОписаниеОбъекта = Новый Соответствие();
	ОписаниеОбъекта.Вставить("personExternalID", ОписаниеАдминистратора.ФизическоеЛицо);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОписаниеОбъекта);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = "/api/administrators";
	Возврат HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "POST", СтрокаТела);

КонецФункции

#КонецОбласти

#Область НастройкиЗаявокНаОтпуск

Процедура ОпубликоватьНастройкиЗаявокНаОтпуск(ВестиПротокол)

	Если ВерсияПриложенияМеньшеВерсии("3.0.3.1") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.НастройкиЗаявокНаОтпуск();
	Если Не Настройки.ОбновитьНастройкиВСервисе Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = ОбновитьНастройкиЗаявокНаОтпуск(Настройки, ВестиПротокол);
	Если Ответ.СообщениеОбОшибке = Неопределено Тогда
		// Проверка, что настройки не изменились за время публикации.
		ТекущиеНастройки = РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.НастройкиЗаявокНаОтпуск();
		Если ОбщегоНазначения.КоллекцииИдентичны(Настройки, ТекущиеНастройки) Тогда
			Настройки.ОбновитьНастройкиВСервисе = Ложь;
			СохранитьНастройкиЗаявокНаОтпуск(Настройки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ОбновитьНастройкиЗаявокНаОтпуск(Настройки, ВестиПротокол)

	Результат = Новый Структура("СообщениеОбОшибке");
	
	ТелоЗапроса = ТелоЗапросаНастройкиЗаявокНаОтпуск(Настройки);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = "/api/vacations-settings";
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияПрочиеСобытия(), ВестиПротокол);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT", СтрокаТела);
	
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОписаниеОбъектаНастройкиЗаявокНаОтпуск()

	Описание = Новый Соответствие;
	Описание.Вставить("vacationStartDateControl", 		"КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления");
	Описание.Вставить("daysBeforeVacationStart", 		"КоличествоДнейДоНачалаОтпуска");
	Описание.Вставить("fourteenDaysVacationControl", 	"КонтролироватьНаличиеОтпускаМенее14дней");
	Описание.Вставить("advanceVacationControl", 		"ОграничиватьПредоставлениеОтпускаАвансом");
	Описание.Вставить("advanceVacationDays", 			"МаксимальноеКоличествоДнейОтпускаАвансом");
	Описание.Вставить("workDaysControl", 				"ПроверятьНаличиеРабочихДнейВПериодеОтпуска");
	
	Возврат Описание;

КонецФункции

Функция ТелоЗапросаНастройкиЗаявокНаОтпуск(Настройки)

	ТелоЗапроса = Новый Соответствие;
	ОписаниеОбъекта = ОписаниеОбъектаНастройкиЗаявокНаОтпуск();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ТелоЗапроса.Вставить(ЭлементКоллекции.Ключ, Настройки[ЭлементКоллекции.Значение]);
	КонецЦикла;
	
	Возврат ТелоЗапроса;

КонецФункции

Процедура СохранитьНастройкиЗаявокНаОтпуск(НастройкиЗаявокНаОтпуск, СообщениеОбОшибке = Неопределено) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.СохранитьНовыеНастройки(НастройкиЗаявокНаОтпуск);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбменаКабинетСотрудника

Процедура ВыполнитьОбработчикиОбмена(ВестиПротокол)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиОбменаКабинетСотрудника.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбменаКабинетСотрудника
	|ГДЕ
	|	НЕ ОбработчикиОбменаКабинетСотрудника.Выполнено";
	
	ВыборкаОбработчики = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОбработчики.Следующий() Цикл
		Если ВыборкаОбработчики.Обработчик = "РегистрацияВыполненныхНеопубликованныхЗаявок" Тогда
			РегистрацияВыполненныхНеопубликованныхЗаявок(ВестиПротокол);
		ИначеЕсли ВыборкаОбработчики.Обработчик = ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний() Тогда
			Если КабинетСотрудникаВнутренний.ЗарегистрироватьИзмененияПлановыхУдержаний() Тогда
				ИмяОбработчика = ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний();
				НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Обработчик = ИмяОбработчика; 
				ЗаписьНабора.Выполнено = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
		ИначеЕсли ВыборкаОбработчики.Обработчик = ИмяОбработчикаОбновитьПубликациюПотерянныхОбъектов() Тогда
			Если ЗарегистрироватьПубликациюПотерянныхОбъектов() Тогда
				ИмяОбработчика = ИмяОбработчикаОбновитьПубликациюПотерянныхОбъектов();
				НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Обработчик = ИмяОбработчика; 
				ЗаписьНабора.Выполнено = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний() Экспорт

	Возврат "ЗарегистрироватьИзмененияПлановыхУдержаний";

КонецФункции

Функция ИмяОбработчикаОбновитьПубликациюПотерянныхОбъектов()

	Возврат "ОбновитьПубликациюПотерянныхОбъектов";

КонецФункции

Функция ЗарегистрироватьПубликациюПотерянныхОбъектов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ОкончаниеПубликации = ДАТАВРЕМЯ(1, 1, 1)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ФизическиеЛица = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	ОбъектыКПубликации = ПотерянныеОбъектыСервиса(ФизическиеЛица);
	
	Если ОбъектыКПубликации.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("ЭтоСотрудник", Истина);
	ТаблицаСотрудников = ОбъектыКПубликации.Скопировать(Отбор);
	ТаблицаСотрудников.Колонки.ПубликуемыйОбъект.Имя = "Сотрудник";
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ОбъектыКПубликации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ПубликуемыйОбъект");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ОбъектыКПубликации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПубликуемыйОбъект");
		
		КабинетСотрудникаВнутренний.ДобавитьЭлементБлокировкиСотрудникиДляОбновленияПубликацииПравНаОтпуск(Блокировка, ТаблицаСотрудников);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ОбъектыКПубликации Цикл
			
			ЗаписьНабора = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаписьНабора.ОбъектПубликации = СтрокаТЗ.ПубликуемыйОбъект;
			ЗаписьНабора.Записать();
			
			ЗаписьНабора = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаписьНабора.ПредметПубликации = СтрокаТЗ.ПубликуемыйОбъект;
			ЗаписьНабора.Записать();
			
			Если ТипЗнч(СтрокаТЗ.ПубликуемыйОбъект) = Тип("СправочникСсылка.Сотрудники") Тогда
				КабинетСотрудникаВнутренний.ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(СтрокаТЗ.ПубликуемыйОбъект, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

#Область РегистрацияВыполненныхНеопубликованныхЗаявок

Процедура РегистрацияВыполненныхНеопубликованныхЗаявок(ВестиПротокол)
	
	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = "РегистрацияВыполненныхНеопубликованныхЗаявок";
	МенеджерЗаписи.Выполнено = Истина;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбслуживаниеПодключенияОтключенияСервиса

Процедура ВыполнитьПубликациюПослеПодключенияКСервисуВФоне(ПериодыРасчетныхЛистков) Экспорт
	
	Попытка
		
		ПроверитьЗаполнениеПубликуемыхОбъектов();
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПередачаИзменений(), Ложь);
		ПараметрыПодключения.ОбновлениеПубликации = Истина;
		ОпубликоватьИзменения(ПараметрыПодключения, Ложь);
		
		Если ПериодыРасчетныхЛистков.Количество() > 0 Тогда
			ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков);
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
		
КонецПроцедуры

Процедура ВключитьНастройкиПрограммыПослеПодключенияСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	КонецЕсли;
	Попытка
		БизнесПроцессыЗаявокСотрудников.ИнициализироватьРолиИсполнителей();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось инициализировать роли исполнителей задач'");
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = НСтр(
		"ru = '%1
		|
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецПопытки;
	
	Если Не ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Попытка
			КабинетСотрудникаВнутренний.ОбновитьСтруктуруПредприятия();
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось обновить структуру предприятия'");
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = НСтр(
			"ru = '%1
			|
			|%2'");
			Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецПопытки;
	КонецЕсли;
		
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Попытка
		БизнесПроцессыЗаявокСотрудников.НачальноеЗаполнениеИсполнителейЗадач(ТекущийПользователь);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить начальное заполнение исполнителей задач'");
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = НСтр(
		"ru = '%1
		|
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецПопытки;
	
	Если Не ВерсияПриложенияМеньшеВерсии("3.0.3.1") Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДанныеПриОтключенииСервиса() Экспорт
	
	Константы.РегистрироватьВЖурналеСобытийЗапросы.Установить(Ложь);
	Константы.СервисКабинетСотрудникаВЛокальнойСети.Установить(Ложь);
	Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Ложь);
	Константы.ВерсияИзмененийКабинетСотрудника.Установить(0);
	
	РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НеобработанныеРезультатыСогласованияКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.РезультатОбменаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	
	КабинетСотрудникаВнутренний.ОчиститьДанныеПриОтключенииСервиса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСменыВерсииСервиса

Процедура ПроверитьВерсиюОбновитьФункциональностьСервиса(ВестиПротокол)
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ПрежняяВерсия = Настройки.ВерсияПриложения;
	
	НоваяВерсия = Неопределено;
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРСостояниеСервиса(), ВестиПротокол);
	РесурсСервиса = "/api/application/info";
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			НоваяВерсия = ОбъектОтвета["applicationVersion"];
		Исключение
			ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если НоваяВерсия = Неопределено И Не Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить() Тогда
		НоваяВерсия = КабинетСотрудникаМенеджерСервиса.ВерсияПриложения(ВестиПротокол);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюПриложения(НоваяВерсия);
		ВыполнитьДействияПриПереходеНаВерсию(ПрежняяВерсия, НоваяВерсия);
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Настройки.ТребуетсяОбновитьНастройкиФункциональности Тогда
		ОбновитьНастройкиФункциональностиСервиса(ВестиПротокол);
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсию(ПрежняяВерсия, НоваяВерсия)

	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.1.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.1.1") < 0) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеГрафиковРаботы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.3.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.3.1") < 0) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Истина);
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеДанныхГрафиковРаботы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.3.96") >= 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.3.96") < 0) Тогда
		
		ИмяОбработчика = ИмяОбработчикаОбновитьПубликациюПотерянныхОбъектов();
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика; 
		ЗаписьНабора.Выполнено = Ложь;
		НаборЗаписей.Записать();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КадровыйЭДО

Функция ДокументыКЭДОПоИдентификатору(Идентификаторы)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ДокументКадровогоЭДО.ОснованиеДокумента КАК Документ
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)
	|	И НЕ ДокументКадровогоЭДО.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ДокументыКЭДОПоПолюДокумент(СписокДокументов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документы", СписокДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ОснованиеДокумента КАК Документ,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ОснованиеДокумента В(&Документы)
	|	И НЕ ДокументКадровогоЭДО.ПометкаУдаления
	|	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область Прочие

Функция НовоеHTTPСоединение(СтруктураURI, Таймаут = 100)
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Или ВРег(СтруктураURI.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	Возврат Соединение;
	
КонецФункции

Функция ФизическиеЛицаОрганизаций(Месяц, МенеджерВременныхТаблиц)
	
	ФизическиеЛицаПоОрганизациям = Новый Соответствие;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(Месяц);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(Месяц);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация КАК Организация,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиКПубликации КАК ПубликуемыеСотрудники
	|		ПО СотрудникиОрганизации.ФизическоеЛицо = ПубликуемыеСотрудники.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО СотрудникиОрганизации.Организация = ПубликуемыеОбъекты.ОбъектПубликации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() > 0 Тогда
			ФизическиеЛицаПоОрганизациям.Вставить(Выборка.Организация, СписокФизическихЛиц);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	Запрос.Выполнить();
	
	Возврат ФизическиеЛицаПоОрганизациям;
	
КонецФункции

Функция КлючиПриложенияАктуальные() Экспорт

	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРАутентификации(), Ложь);
	Соединение = ПараметрыПодключения.Соединение;
	
	Ответ = НовыйТокенАутентификации(Соединение, ПараметрыПодключения);
	Если Ответ.НеактуальныеКлючи Тогда
		// ключи не актуальны, удаляем токен, если он сохранен
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Токен");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	Возврат Не Ответ.НеактуальныеКлючи;

КонецФункции

Процедура ЗаполнитьДеревоНастроекПубликации(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("РезультатЗапроса,ИспользоватьШтатноеРасписание,ДанныеДоступны");
	
	ИспользоватьШтатноеРасписание = Ложь;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	КабинетСотрудникаВнутренний.СоздатьВТШтатноеРасписание(МенеджерВТ, ИспользоватьШтатноеРасписание);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.ИспользоватьШтатноеРасписание = ИспользоватьШтатноеРасписание;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Организация КАК Организация,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ШтатноеРасписание.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	НЕ ШтатноеРасписание.Утверждена КАК НеУтверждена,
	|	ШтатноеРасписание.ДатаУтверждения КАК ДатаУтверждения,
	|	ШтатноеРасписание.Закрыта КАК Закрыта,
	|	ШтатноеРасписание.ДатаЗакрытия КАК ДатаЗакрытия,
	|	ШтатноеРасписание.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ПорядокПодразделений,
	|	ШтатноеРасписание.Должность.РеквизитДопУпорядочивания КАК ПорядокДолжностей,
	|	ВЫБОР
	|		КОГДА ПравилаПубликации.ОбъектПравила ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Публиковать
	|ИЗ
	|	ВТШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|		ПО ШтатноеРасписание.ПозицияШтатногоРасписания = ПравилаПубликации.ОбъектПравила
	|			И (ПравилаПубликации.ОбъектПравила ССЫЛКА Справочник.ШтатноеРасписание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШтатноеРасписание.Организация.Наименование,
	|	ШтатноеРасписание.Подразделение.РеквизитДопУпорядочиванияИерархического,
	|	ШтатноеРасписание.Должность.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	Организация,
	|	Подразделение ИЕРАРХИЯ";
	Если Не ИспользоватьШтатноеРасписание Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ШтатноеРасписание.Утверждена", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.ДатаУтверждения", """");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.Закрыта", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.ДатаЗакрытия", """");
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Результат.ДанныеДоступны = Истина;
		Результат.РезультатЗапроса = РезультатЗапроса;
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Настройка публикации. Пользователю недоступны организации и/или позиции штатного расписания.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖРНарушениеПравДоступа(),
			УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Результат.ДанныеДоступны = Ложь;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура СохранитьНовыеВидыКонтактнойИнформацииФизическихЛиц(ВидКИМобильныйТелефон, ВидКИАдресЭлектроннойПочты, СообщениеОбОшибке) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ТекущиеОшибки = Новый Соответствие;
	ТаблицаДанных = Новый Массив;
	Если ФизическиеЛица.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
		|ГДЕ
		|	ОшибкиЗаполнения.ОбъектПубликации В(&ФизическиеЛица)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущиеОшибки.Вставить(Выборка.ОбъектПубликации, Истина);
		КонецЦикла;
		
		ПроверяемыеДанные = "Пол,Фамилия";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, ФизическиеЛица, ПроверяемыеДанные);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Если ФизическиеЛица.Количество() > 0 Тогда
			
			КонтактнаяИнформация = КонтактнаяИнформацияФизическихЛиц(ФизическиеЛица);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ФизическоеЛицо");
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ФизическоеЛицо");
			
			Блокировка.Заблокировать();
			
			ШаблонПодстроки = "%1" + Символы.ПС + "%2";
			Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
				
				Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				Запись.ПредметПубликации = СтрокаТЗ.ФизическоеЛицо;
				Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				Запись.Записать();
				
				ОписаниеОшибки = "";
				ЕстьОшибки = ЕстьОшибкиЗаполненияФизическогоЛица(СтрокаТЗ, КонтактнаяИнформация, ОписаниеОшибки, ШаблонПодстроки);
				Если ЕстьОшибки Тогда
					Запись = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
					Запись.ОбъектПубликации = СтрокаТЗ.ФизическоеЛицо;
					Запись.ЕстьОшибки = Истина;
					Запись.ОписаниеОшибки = ОписаниеОшибки;
					Запись.Записать();
				ИначеЕсли ТекущиеОшибки[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
					Запись = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
					Запись.ОбъектПубликации = СтрокаТЗ.ФизическоеЛицо;
					Запись.Удалить();
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Блокировка.Заблокировать();
		КонецЕсли;
		
		РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СохранитьНовыеВидыКонтактнойИнформации(ВидКИМобильныйТелефон, ВидКИАдресЭлектроннойПочты);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось изменить виды контактной информации. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

Функция ОбъектыБезОшибокЗаполнения(ОбъектыДляПроверки) Экспорт

	Результат = Новый Массив;
	
	Если ОбъектыДляПроверки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектыДляПроверки", ОбъектыДляПроверки);
	
	Если ТипЗнч(ОбъектыДляПроверки[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК Таблица
		|		ПО ФизическиеЛица.Ссылка = Таблица.ОбъектПубликации
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ОбъектыДляПроверки)
		|	И Таблица.ЕстьОшибки ЕСТЬ NULL";
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	ИначеЕсли ТипЗнч(ОбъектыДляПроверки[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК Таблица
		|		ПО Сотрудники.ФизическоеЛицо = Таблица.ОбъектПубликации
		|ГДЕ
		|	Сотрудники.Ссылка В(&ОбъектыДляПроверки)
		|	И Таблица.ЕстьОшибки ЕСТЬ NULL";
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		Результат = ОбъектыДляПроверки;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СервисЗаблокирован() Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Возврат Настройки.СервисЗаблокирован;

КонецФункции

Функция ЕстьАктивныеФоновыеЗаданияОбменПубликация() Экспорт
	
	Возврат ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияПубликации())
		Или ЕстьАктивныеФоновыеЗадания("ПубликацияДанныхВСервисе") ;
	
КонецФункции

Функция ВыгрузкаЖурналаРегистрацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ВыгрузитьЖурналРегистрации(ИмяВременногоФайла, Параметры.ОтборЖурналаРегистрации);
	
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	Архив = Новый ЗаписьZipФайла(ИмяФайлаАрхива,,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	Архив.Добавить(ИмяВременногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
	Архив.Записать();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаАрхива);
	
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ИмяФайлаАрхива);
	
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища)
	

КонецФункции

Функция ОтборЖурналаРегистрацииДляВыгрузки(ИменаСобытий, ОтборПоДатам = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Событие", ИменаСобытий);
	
	СмещениеВремениСервера = СмещениеВремениСервера();
	Если Не ЗначениеЗаполнено(ОтборПоДатам) Тогда
		РезультатОбмена = РегистрыСведений.РезультатОбменаКабинетСотрудника.РезультатОбмена();
		ОтборДатаНачала 	= РезультатОбмена.ДатаНачала + СмещениеВремениСервера;
		ОтборДатаОкончания 	= РезультатОбмена.ДатаОкончания + СмещениеВремениСервера;
	Иначе
		ОтборДатаНачала 	= ОтборПоДатам.ДатаНачала + СмещениеВремениСервера;
		ОтборДатаОкончания 	= ОтборПоДатам.ДатаОкончания + СмещениеВремениСервера;
	КонецЕсли;
	ОтборДатаОкончания = ОтборДатаОкончания + 1;
	
	Отбор.Вставить("ДатаНачала", ОтборДатаНачала);
	Отбор.Вставить("ДатаОкончания", ОтборДатаОкончания);
	
	Возврат Отбор;

КонецФункции

Функция СмещениеВремениСервера()
	
	СмещениеВремениСервера = ТекущаяДата() - ТекущаяДатаСеанса();
	Если СмещениеВремениСервера >= -1 И СмещениеВремениСервера <= 1 Тогда
		СмещениеВремениСервера = 0;
	КонецЕсли;
	Возврат СмещениеВремениСервера;
	
КонецФункции

Функция ИспользоватьФормат303()

	Возврат Не ВерсияПриложенияМеньшеВерсии("3.0.3.1");

КонецФункции

// Получает хеш по алгоритму SHA256 и преобразовывает в HexСтроку.
//
// Возвращаемое значение:
// 	Строка
//
Функция ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанные)

	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ДвоичныеДанные);
	
	Возврат ВРег(ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма));

КонецФункции

Процедура СохранитьЭлектроннуюПодписьРезультатаСогласования(ЭлектронныйДокумент, РезультатСогласования, Отпечаток = "")

	СтрокаРольПодписанта = СтрокаРольПодписантаДляЭП(РезультатСогласования.РольПодписанта);
	Если Не ЭтоПодписанСервиса(СтрокаРольПодписанта) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Подпись = Base64Значение(РезультатСогласования.ЭлектроннаяПодпись);
	
	Сертификат = Неопределено;
	Если ЗначениеЗаполнено(РезультатСогласования.СертификатЭП) Тогда
		Сертификат = Base64Значение(РезультатСогласования.СертификатЭП);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(Сертификат);
		Отпечаток = ПолучитьBase64СтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма);
	КонецЕсли;
	
	СвойстваПодписи = Новый Структура;
	СвойстваПодписи.Вставить("Подпись", 			Подпись);
	СвойстваПодписи.Вставить("Сертификат", 			Сертификат);
	СвойстваПодписи.Вставить("Отпечаток", 			Отпечаток);
	СвойстваПодписи.Вставить("КомуВыданСертификат", РезультатСогласования.ИмяПодписанта);
	СвойстваПодписи.Вставить("Комментарий", 		СтрокаРольПодписанта);
	СвойстваПодписи.Вставить("ДатаПодписи", 		РезультатСогласования.ДатаПодписи);
	
	ЭлектроннаяПодпись.ДобавитьПодпись(ЭлектронныйДокумент, СвойстваПодписи);

КонецПроцедуры

Функция ЭтоПодписанСервиса(СтрокаРольПодписантаЭП) Экспорт

	Если ПустаяСтрока(СтрокаРольПодписантаЭП) Тогда
		Возврат Ложь;
	Иначе
		
		СоответствиеЗначений = СоответствиеЗначенийРольПодписанта();
		Для каждого ЭлементКоллекции Из СоответствиеЗначений Цикл
			Если (ЭлементКоллекции.Ключ = "employee" Или ЭлементКоллекции.Ключ = "directManager") 
				И ВРег(СтрокаРольПодписантаДляЭП(ЭлементКоллекции.Значение)) = ВРег(СтрокаРольПодписантаЭП) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция СтрокаРольПодписантаДляЭП(СтрокаРольПодписанта)

	Возврат СтрШаблон("%1:%2", "РольПодписанта", СтрокаРольПодписанта);

КонецФункции

Функция ФизическоеЛицоПубликуется(ФизическоеЛицо)
	
	МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	МенеджерЗаписи.Прочитать();
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектПубликации = ФизическоеЛицо;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НастройкиПрограммы() Экспорт

	
	НастройкиПрограммы = Новый Структура("ИспользоватьДСВ");
	НастройкиПрограммы.ИспользоватьДСВ = Ложь;
	КабинетСотрудникаВнутренний.ЗаполнитьНастройкиПрограммы(НастройкиПрограммы);
	
	Возврат НастройкиПрограммы;
	
КонецФункции

Функция ПотерянныеОбъектыСервиса(ФизическиеЛица)

	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если ИспользоватьКадровыйУчет Тогда
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = "ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = "Подразделение,Должность";
		КонецЕсли;
		ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
				Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				КонецЕсли;
			Иначе
				Если СтрокаТЗ.ДатаУвольнения = ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбъектыКПубликации = Новый ТаблицаЗначений;
	ОбъектыКПубликации.Колонки.Добавить("ПубликуемыйОбъект");
	ОбъектыКПубликации.Колонки.Добавить("ЭтоСотрудник", Новый ОписаниеТипов("Булево"));
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "ДолжностьПоШтатномуРасписанию", Истина);
	ПрочиеОбъектыКПубликации = ОбъектыПозицийШтатногоРасписанияПоСсылкам(Позиции, Истина);
	Для каждого ПубликуемыйОбъект Из ПрочиеОбъектыКПубликации Цикл
		НоваяСтрока = ОбъектыКПубликации.Добавить();
		НоваяСтрока.ПубликуемыйОбъект = ПубликуемыйОбъект;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из РабочиеМеста Цикл
		НоваяСтрока = ОбъектыКПубликации.Добавить();
		НоваяСтрока.ПубликуемыйОбъект = СтрокаТЗ.Сотрудник;
		НоваяСтрока.ЭтоСотрудник = Истина;
	КонецЦикла;
	
	Возврат ОбъектыКПубликации;

КонецФункции

Функция ЗаменитьЗапрещенныеСимволыВИмениФайла(ИсходнаяСтрока, ЗаменятьНа = "_")
	
	ЗапрещенныеСимволы = СтрРазделить("@,\,/,:,*,?,"",<,>,|,+", ",");
	
	СтрокаПослеЗамены = СокрЛП(ИсходнаяСтрока);
	
	Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл
		СтрокаПослеЗамены = СтрЗаменить(СтрокаПослеЗамены, ЗапрещенныйСимвол, ЗаменятьНа);
	КонецЦикла;
	
	Если СтрЗаканчиваетсяНа(СтрокаПослеЗамены, ".") Тогда
		СтрокаПослеЗамены = Лев(СтрокаПослеЗамены, СтрДлина(СтрокаПослеЗамены) - 1) + ЗаменятьНа;
	КонецЕсли;
	
	Возврат СтрокаПослеЗамены;
	
КонецФункции

Процедура СохранитьИзменениеПубликуемойСтруктурыКомпании(ПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке) Экспорт

	Если ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации,
	|	ТИПЗНАЧЕНИЯ(ПубликуемыеОбъекты.ОбъектПубликации) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты";
	ПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить();
	
	ТипыДанных = ТипыПубликуемыхДанных();
	
	ПубликуемыеОбъекты.Индексы.Добавить("ТипДанных");
	Отбор = Новый Структура("ТипДанных");
	
	Отбор.ТипДанных = ТипыДанных["ШтатноеРасписание"];
	Позиции = ПубликуемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("ОбъектПубликации");
	
	Отбор.ТипДанных = ТипыДанных["Сотрудники"];
	Сотрудники = ПубликуемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("ОбъектПубликации");
	
	Отбор.ТипДанных = ТипыДанных["Организации"];
	Организации = ПубликуемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("ОбъектПубликации");
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		НовыеПодразделения = ПубликуемыеПодразделенияОрганизаций(Позиции);
		Отбор.ТипДанных = ТипыДанных["СтруктураПредприятия"];
	Иначе
		НовыеПодразделения = КабинетСотрудникаВнутренний.ПубликуемаяСтруктураПредприятия(Позиции);
		Отбор.ТипДанных = ТипыДанных["ПодразделенияОрганизаций"];
	КонецЕсли;
	СтарыеПодразделения = ПубликуемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("ОбъектПубликации");
	
	// Подготовка таблиц с данными для блокировки объектов перед записью.
	ПубликуемыеОбъектыБлокировка = Новый ТаблицаЗначений;
	ПубликуемыеОбъектыБлокировка.Колонки.Добавить("ОбъектПубликации");
	
	ИзмененияДляСервиса = Новый ТаблицаЗначений;
	ИзмененияДляСервиса.Колонки.Добавить("ПредметПубликации");
	
	Для каждого ЭлементКоллекции Из НовыеПодразделения Цикл
		НоваяСтрока = ПубликуемыеОбъектыБлокировка.Добавить();
		НоваяСтрока.ОбъектПубликации = ЭлементКоллекции;
		НоваяСтрока = ИзмененияДляСервиса.Добавить();
		НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СтарыеПодразделения Цикл
		НоваяСтрока = ПубликуемыеОбъектыБлокировка.Добавить();
		НоваяСтрока.ОбъектПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из Позиции Цикл
		НоваяСтрока = ИзмененияДляСервиса.Добавить();
		НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из Сотрудники Цикл
		НоваяСтрока = ИзмененияДляСервиса.Добавить();
		НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Для каждого ЭлементКоллекции Из Организации Цикл
			НоваяСтрока = ИзмененияДляСервиса.Добавить();
			НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
		КонецЦикла;
	КонецЕсли;
	
	СервисПодключен = Константы.ИспользуетсяСервисКабинетСотрудника.Получить();
	
	Если СервисПодключен Тогда
		РолиИсполнителейЗадач = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗадач();
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РолиИсполнителейЗадач", РолиИсполнителейЗадач);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Ссылка В(&РолиИсполнителейЗадач)";
		РезультатЗапросаРоли = Запрос.Выполнить();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		Если СервисПодключен Тогда
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РолиИсполнителей");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапросаРоли;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		КонецЕсли;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииКабинетСотрудника");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликуемыеОбъектыБлокировка;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляСервиса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СохранитьЗначениеПубликоватьСтруктуруЮридическихЛиц(ПубликоватьСтруктуруЮридическихЛиц);
		
		Для каждого ЭлементКоллекции Из НовыеПодразделения Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ЭлементКоллекции;
			Запись.Записать();
		КонецЦикла;
		
		Для каждого ЭлементКоллекции Из СтарыеПодразделения Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ЭлементКоллекции;
			Запись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ИзмененияДляСервиса Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = СтрокаТЗ.ПредметПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		Если СервисПодключен Тогда
			Выборка = РезультатЗапросаРоли.Выбрать();
			Пока Выборка.Следующий() Цикл
				РольОбъект = Выборка.Ссылка.ПолучитьОбъект();
				РольОбъект.ИспользуетсяБезОбъектовАдресации = Ложь;
				РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
				Если ПубликоватьСтруктуруЮридическихЛиц Тогда
					РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ПодразделенияОрганизаций;
				Иначе
					РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.СтруктураПредприятия;
				КонецЕсли;
				РольОбъект.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось изменить вид публикуемой структуры. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецОбласти