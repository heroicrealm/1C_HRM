////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотПовтИсп, сервер, повт. использование
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Возвращает настройки базы Документооборота.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьНастройки
//
Функция ПолучитьНастройки() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьНастройки();
	
КонецФункции

// Создает прокси веб-сервиса Документооборота. В случае ошибки при создании вызывается исключение.
//
// Возвращаемое значение:
//   WSПрокси - Прокси веб-сервиса
//
Функция ПолучитьПрокси() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборот.ПолучитьПрокси();
	
КонецФункции

// Получает доступность функционала версии web-сервиса Документооборота.
//
// Параметры:
//   ВерсияСервиса - Строка - версия web-сервиса Документооборота, содержащая требуемый функционал.
//   Оптимистично - Булево - признак необходимости вернуть Истина, если версия сервиса пока неизвестна.
//
// Возвращаемое значение:
//   Булево - Истина, если web-сервис Документооборота указанной версии доступен.
//
Функция ДоступенФункционалВерсииСервиса(ВерсияСервиса = "", Оптимистично = Ложь) Экспорт
	
	Возврат ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса(ВерсияСервиса, Оптимистично);
	
КонецФункции

// Возвращает идентификатор текущей базы данных, если он есть. Если нет, создает его и возвращает.
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторБазыДанных() Экспорт
	
	ЭтотУзел = ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый.ЭтотУзел();
	Если СтрДлина(ЭтотУзел.Наименование) <> 36 Тогда
		ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
		ЭтотУзелОбъект.Заблокировать();
		ЭтотУзелОбъект.Наименование = Строка(Новый УникальныйИдентификатор);
		ЭтотУзелОбъект.Код = 0;
		ЭтотУзелОбъект.ОбменДанными.Загрузка = Истина;
		ЭтотУзелОбъект.Записать();
	КонецЕсли;
	
	Возврат ЭтотУзел.Наименование;
	
КонецФункции

// Возвращает узел Документооборота. В случае отсутствия узел будет создан.
//
// Возвращаемое значение:
//   ПланОбменаСсылка.ИнтеграцияС1СДокументооборотомПереопределяемый
//
Функция УзелДокументооборота() Экспорт
	
	ЭтотУзел = ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый.ЭтотУзел();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнтеграцияС1СДокументооборотомПереопределяемый.Ссылка,
		|	ИнтеграцияС1СДокументооборотомПереопределяемый.Наименование
		|ИЗ
		|	ПланОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый КАК ИнтеграцияС1СДокументооборотомПереопределяемый
		|ГДЕ
		|	ИнтеграцияС1СДокументооборотомПереопределяемый.Ссылка <> &ЭтотУзел";
		
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Узел1СДокументооборота = ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый.СоздатьУзел();
		Узел1СДокументооборота.Наименование = НСтр("ru='1С:Документооборот'");
		Узел1СДокументооборота.Код = 1;
		Узел1СДокументооборота.Записать();
		Узел = Узел1СДокументооборота.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Узел = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Узел;
	
КонецФункции

// Получает текущего пользователя 1С:Документооборота.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMUser или Неопределено.
//
Функция ТекущийПользовательДокументооборота() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборот.ТекущийПользовательДокументооборота();
	
КонецФункции

// Возвращает массив типов объектов ИС, поддерживающих бесшовную интеграцию.
//
// Возвращаемое значение:
//   Массив из Тип
//
Функция ТипыОбъектовПоддерживающихИнтеграцию() Экспорт
	
	Типы = Новый Массив;
	
	Команды = Новый Массив;
	Команды.Добавить(Метаданные.ОбщиеКоманды.ИнтеграцияС1СДокументооборот);
	Команды.Добавить(Метаданные.ОбщиеКоманды.ИнтеграцияС1СДокументооборотПрисоединенныеФайлы);
	Команды.Добавить(Метаданные.ОбщиеКоманды.ИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс);
	Команды.Добавить(Метаданные.ОбщиеКоманды.ИнтеграцияС1СДокументооборотСоздатьПисьмо);
	Команды.Добавить(Метаданные.ОбщиеКоманды.ИнтеграцияС1СДокументооборотСоздатьПроцессСогласования);
	
	Для Каждого Команда Из Команды Цикл
		
		ТипыПараметраКоманды = Команда.ТипПараметраКоманды.Типы();
		
		Для Каждого Тип Из ТипыПараметраКоманды Цикл
			
			Если Типы.Найти(Тип) = Неопределено Тогда
				Типы.Добавить(Тип);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.
		ПриОпределенииТиповОбъектовПоддерживающихИнтеграцию(Типы);
	
	Возврат Типы;
	
КонецФункции

// Формирует таблицу соответствия типов XDTO и типов объектов информационной базы
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИмяТипаXDTO - Строка - имя типа XDTO.
//     * ТипОбъектаИС - Тип - тип объекта ИС.
//     * ИмяТипаИС - Строка - полное имя типа объекта ИС.
//
Функция СоответствиеТипов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяТипаXDTO", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТипОбъектаИС", Новый ОписаниеТипов("Тип"));
	
	// Поддерживаемые справочники.
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(Таблица,
		"DMCurrency", Тип("СправочникСсылка.Валюты"));
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(Таблица,
		"DMBank", Тип("СправочникСсылка.КлассификаторБанков"));
	ИнтеграцияС1СДокументооборот.ДобавитьСтрокуСоответствияТипов(Таблица,
		"DMUser", Тип("СправочникСсылка.Пользователи"));
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ДополнитьСоответствиеТипов(Таблица);
	
	Таблица.Колонки.Добавить("ИмяТипаИС", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.ИмяТипаИС = Метаданные.НайтиПоТипу(Строка.ТипОбъектаИС).ПолноеИмя();
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает массив типов объектов ИС, для которых заданы правила интеграции.
//
// Параметры:
//   ТипыОбъектовДО - Строка - список типов через запятую.
//
// Возвращаемое значение:
//   Массив из Тип
//
Функция ПолучитьТипыОбъектовСПравиламиИнтеграции(ТипыОбъектовДО) Экспорт
	
	Результат = Новый Массив;
	
	ТипыОбъектовДО = Новый Массив;
	Для Каждого Строка Из СтрРазделить(ТипыОбъектовДО, ",", Ложь) Цикл
		ТипыОбъектовДО.Добавить(СокрЛП(Строка));
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТипОбъектаИС КАК ТипСтрокой
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|ГДЕ
		|	НЕ Правила.ПометкаУдаления
		|	И Правила.ТипОбъектаДО В (&ТипыОбъектовДО)");
	Запрос.УстановитьПараметр("ТипыОбъектовДО", ТипыОбъектовДО);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если СтрНачинаетсяС(Выборка.ТипСтрокой, "Справочник.") Тогда
			ТипСтрокой = "СправочникСсылка." + Сред(Выборка.ТипСтрокой,
				СтрДлина("Справочник.") + 1);
		ИначеЕсли СтрНачинаетсяС(Выборка.ТипСтрокой, "Документ.") Тогда
			ТипСтрокой = "ДокументСсылка." + Сред(Выборка.ТипСтрокой,
				СтрДлина("Документ.") + 1);
		ИначеЕсли СтрНачинаетсяС(Выборка.ТипСтрокой, "ПланСчетов.") Тогда
			ТипСтрокой = "ПланСчетовСсылка." + Сред(Выборка.ТипСтрокой,
				СтрДлина("ПланСчетов.") + 1);
		ИначеЕсли СтрНачинаетсяС(Выборка.ТипСтрокой, "ПланВидовРасчета.") Тогда
			ТипСтрокой = "ПланВидовРасчетаСсылка." + Сред(Выборка.ТипСтрокой,
				СтрДлина("ПланВидовРасчета.") + 1);
		ИначеЕсли СтрНачинаетсяС(Выборка.ТипСтрокой, "ПланВидовХарактеристик.") Тогда
			ТипСтрокой = "ПланВидовХарактеристикСсылка." + Сред(Выборка.ТипСтрокой,
				СтрДлина("ПланВидовХарактеристик.") + 1);
		ИначеЕсли СтрНачинаетсяС(Выборка.ТипСтрокой, "БизнесПроцесс.") Тогда
			ТипСтрокой = "БизнесПроцессСсылка." + Сред(Выборка.ТипСтрокой,
				СтрДлина("БизнесПроцесс.") + 1);
		ИначеЕсли СтрНачинаетсяС(Выборка.ТипСтрокой, "Задача.") Тогда
			ТипСтрокой = "ЗадачаСсылка." + Сред(Выборка.ТипСтрокой, СтрДлина("Задача.") + 1);
		Иначе
			Продолжить;
		КонецЕсли;
		
		// Устаревшие типы в правилах не должны приводить к неработоспособности связей.
		Попытка
			ТипОбъекта = Тип(ТипСтрокой);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Не ПравоДоступа("Чтение", Метаданные.НайтиПоТипу(ТипОбъекта)) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ТипОбъекта);
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если используется термин "Корреспонденты".
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьТерминКорреспонденты() Экспорт
	
	Возврат Не ДоступенФункционалВерсииСервиса("2.1.0.1", Истина);
	
КонецФункции

#КонецОбласти