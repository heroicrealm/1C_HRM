
#Область ПрограммныйИнтерфейс

// Устанавливает значение параметра облачной подписи в заявление по его виду
//
// Параметры:
//	ОбъектДокумента	- ДокументОбъект.ЗаявлениеАбонентаСпецоператораСвязи
//	ВидПараметра 	- ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи, Строка
//	ТекущееЗначение	- Строка, Булево, СправочникСсылка.УчетныеЗаписиDSS
//
// Возвращаемое значение:
//	Строка, Булево, СправочникСсылка.УчетныеЗаписиDSS
//
Процедура УстановитьПараметрПодключения(ОбъектДокумента, ВидПараметра, ТекущееЗначение) Экспорт
	
	СсылкаПараметра = ПолучитьВидПараметраОблачнойПодписи(ВидПараметра);
	ТаблицаПараметров = ОбъектДокумента.ПараметрыПодключенияОблачнойПодписи;
	ВсеСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", СсылкаПараметра));
	
	Если ВсеСтроки.Количество() > 1 Тогда
		Для Каждого СтрокаМассива Из ВсеСтроки Цикл
			ТаблицаПараметров.Удалить(СтрокаМассива);
		КонецЦикла;	
		НашлиСтроку = ТаблицаПараметров.Добавить();
	ИначеЕсли ВсеСтроки.Количество() = 1 Тогда
		НашлиСтроку = ВсеСтроки[0];
	Иначе	
		НашлиСтроку = ТаблицаПараметров.Добавить();
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущееЗначение) И ТекущееЗначение <> Ложь Тогда
		НашлиСтроку.Параметр = СсылкаПараметра;
		НашлиСтроку.ЗначениеСсылка = Неопределено;
		НашлиСтроку.ЗначениеБулево = Ложь;
		НашлиСтроку.ЗначениеСтрока = "";
		
		ТипПараметра = ТипПараметраОблачнойПодписи(СсылкаПараметра);
		Если ТипПараметра = Тип("Булево") Тогда
			НашлиСтроку.ЗначениеБулево = ТекущееЗначение;
		ИначеЕсли ТипПараметра = Тип("Строка") Тогда
			НашлиСтроку.ЗначениеСтрока = ТекущееЗначение;
		Иначе
			НашлиСтроку.ЗначениеСсылка = ТекущееЗначение;
		КонецЕсли;
	Иначе
		ТаблицаПараметров.Удалить(НашлиСтроку);
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает установленое значение параметра облачной подписи в заявление по его виду
//
// Параметры:
//	ОбъектДокумента - ДокументОбъект.ЗаявлениеАбонентаСпецоператораСвязи, ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи
//	ВидПараметра 	- ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи, Строка
//
// Возвращаемое значение:
//	Строка, Булево, СправочникСсылка.УчетныеЗаписиDSS
//
Функция ПолучитьПараметрПодключения(ОбъектДокумента, ВидПараметра) Экспорт
	
	СсылкаПараметра = ПолучитьВидПараметраОблачнойПодписи(ВидПараметра);
	
	Если ТипЗнч(ОбъектДокумента) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		ВсеСтроки = ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьРеквизитОблачнойПодписи(ОбъектДокумента, СсылкаПараметра);
	ИначеЕсли ТипЗнч(ОбъектДокумента) = Тип("ДанныеФормыСтруктура") Тогда
		ВсеСтроки = ОбъектДокумента.ПараметрыПодключенияОблачнойПодписи.НайтиСтроки(Новый Структура("Параметр", СсылкаПараметра));
	Иначе
		ВсеСтроки = ОбъектДокумента.НайтиСтроки(Новый Структура("Параметр", СсылкаПараметра));
	КонецЕсли;
	
	НашлиСтроку = Новый Структура("ЗначениеСсылка, ЗначениеБулево, ЗначениеСтрока", Неопределено, Ложь, "");
	
	Если ВсеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НашлиСтроку, ВсеСтроки[0]);
	КонецЕсли;
	
	ТипПараметра = ТипПараметраОблачнойПодписи(СсылкаПараметра);
	Если ТипПараметра = Тип("Булево") Тогда
		Результат = НашлиСтроку.ЗначениеБулево;
	ИначеЕсли ТипПараметра = Тип("Строка") Тогда
		Результат = НашлиСтроку.ЗначениеСтрока;
	Иначе
		Результат = НашлиСтроку.ЗначениеСсылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру для хранения информации об используемой облачной подписи в заявлениях.
//
// Параметры:
//	ОбъектДокумента - ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи, Структура, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//	Структура
//
Функция СведенияОблачнойПодписиЗаявления(ОбъектДокумента = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСервера", "");
	Результат.Вставить("НовыйЛогин", "");
	Результат.Вставить("ОтправкаКлючаМобильногоПриложения", Ложь);
	Результат.Вставить("ОтправкаКодаАктивации", Ложь);
	Результат.Вставить("ПодписьВозможна", Ложь);
	Результат.Вставить("СменитьКлючМобильногоПриложения", Ложь);
	Результат.Вставить("СменитьКлючМобильногоПриложенияАвтоматически", Ложь);
	Результат.Вставить("СменитьПароль", Ложь);
	Результат.Вставить("СоздатьУчетнуюЗапись", Ложь);
	Результат.Вставить("Телефон", "");
	Результат.Вставить("ЭлектроннаяПочта", "");
	Результат.Вставить("УчетнаяЗапись", Неопределено);
	Результат.Вставить("УчетнаяЗаписьДляВосстановления", Неопределено);
	Результат.Вставить("ТребуетИзменения", Ложь);
	Результат.Вставить("ОтправитьСПодписью", Ложь);
	Результат.Вставить("НовыйЛогинПроверен", Ложь);
	Результат.Вставить("ПоставляемыйСервер", Ложь);
	Результат.Вставить("ИсходнаяУчетнаяЗапись", Неопределено);
	Результат.Вставить("ИсходныйТелефон", "");
	
	Если ОбъектДокумента <> Неопределено Тогда
		РеквизитДокумента = ОбъектДокумента;
		Если ТипЗнч(ОбъектДокумента) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
			РеквизитДокумента = ОбъектДокумента.ПараметрыПодключенияОблачнойПодписи;
		КонецЕсли;
		Если ТипЗнч(РеквизитДокумента) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Результат, РеквизитДокумента);
		Иначе	
			Результат.ИдентификаторСервера = ПолучитьПараметрПодключения(РеквизитДокумента, "ИдентификаторСервера");
			Результат.СоздатьУчетнуюЗапись = ПолучитьПараметрПодключения(РеквизитДокумента, "СоздатьНовуюУчетнуюЗапись");
			Результат.УчетнаяЗапись = ПолучитьПараметрПодключения(РеквизитДокумента, "УчетнаяЗапись");
			Результат.НовыйЛогин = ПолучитьПараметрПодключения(РеквизитДокумента, "Логин");
			Результат.СменитьКлючМобильногоПриложения = ПолучитьПараметрПодключения(РеквизитДокумента, "СменитьКлючМобильногоПриложения");
			Результат.СменитьКлючМобильногоПриложенияАвтоматически = ПолучитьПараметрПодключения(РеквизитДокумента, "СменитьКлючМобильногоПриложенияАвтоматически");
			Результат.СменитьПароль = ПолучитьПараметрПодключения(РеквизитДокумента, "СменитьПароль");
			Результат.Телефон = ПолучитьПараметрПодключения(РеквизитДокумента, "Телефон");
			Результат.ЭлектроннаяПочта = ПолучитьПараметрПодключения(РеквизитДокумента, "ЭлектроннаяПоча");
			Результат.ОтправкаКлючаМобильногоПриложения = ПолучитьПараметрПодключения(РеквизитДокумента, "ПовторнаяОтправкаКлючаМобильногоПриложения");
			Результат.ОтправкаКодаАктивации = ПолучитьПараметрПодключения(РеквизитДокумента, "ПовторнаяОтправкаКодаАвторизации");
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ОтправкаКлючаМобильногоПриложения
		ИЛИ Результат.ОтправкаКодаАктивации
		ИЛИ Результат.СменитьКлючМобильногоПриложения
		ИЛИ Результат.СменитьКлючМобильногоПриложенияАвтоматически
		ИЛИ Результат.СменитьПароль
		ИЛИ (ЗначениеЗаполнено(Результат.НовыйЛогин) И Результат.СоздатьУчетнуюЗапись)
		ИЛИ ЗначениеЗаполнено(Результат.Телефон)
		ИЛИ ЗначениеЗаполнено(Результат.ЭлектроннаяПочта) Тогда
		Результат.ТребуетИзменения = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодсказкаПриВыбореСертификатаКазначейства() Экспорт

	Подсказка = Новый ФорматированнаяСтрока(
		НСтр("ru = 'В соответствии с Постановлением правительства РФ от 10 июля 2020 г. N 1018 руководители и сотрудники некоммерческих организаций, а также коммерческих, которым предоставляются средства из бюджетной системы РФ, должны получать сертификат в Федеральном казначействе. '"),
		Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее...'"),,,,"https://help.astral.ru/1c-o/poluchenie-elektronnoj-podpisi/v-federal-nom-kaznachejstve"));
		
	Возврат Подсказка;

КонецФункции

Функция ПодсказкаПриВыбореСертификатаФНС(ЭтоЮридическоеЛицо) Экспорт
	
	Если ЭтоЮридическоеЛицо Тогда
		Подсказка = НСтр("ru = 'Получение сертификата эл. подписи руководителями организаций в вашем городе из программы 1С временно недоступно. Получите сертификат в удостоверяющем центре ФНС или у его доверенного лица.'");
	Иначе
		Подсказка = НСтр("ru = 'Получение сертификата эл. подписи индивидуальными предпринимателями, нотариусами, адвокатами и главами КФХ в вашем городе из программы 1С временно недоступно. Получите сертификат в удостоверяющем центре ФНС или у его доверенного лица.'");
	КонецЕсли;
	
	Возврат Подсказка;

КонецФункции

Функция ПодсказкаПриБесшовномПолученииСертификатаВДУЦ(Форма) Экспорт

	УЦ = Форма.УЦ;
	
	Если УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС") Тогда
		
		ПроТокен = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Для отправки заявления понадобится '"),
			Новый ФорматированнаяСтрока(НСтр("ru = 'токен'"),,,,"e1cib/command/ОбщаяКоманда.ПояснитьПроТокен"),
			". ");
			
		Подробнее = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Подробнее о получении сертификата в инспекции ФНС читайте '"),
			Новый ФорматированнаяСтрока(НСтр("ru = 'здесь'"),,,,"https://help.astral.ru/1c-o/poluchenie-elektronnoj-podpisi/v-fns"),
			".");
		
		Если Форма.CryptoProCSPУстановлен Тогда
			
			Подсказка = Новый ФорматированнаяСтрока(
				ПроТокен,
				Символы.ПС,
				Подробнее);
				
		Иначе
			
			ПроCryptoPro = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Перед отправкой заявления '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'установите'"),,,,"e1cib/command/ОбщаяКоманда.УстановитьКриптоПроДляФНС"),
				НСтр("ru = ' КриптоПро CSP.'"));
				
			Подсказка = Новый ФорматированнаяСтрока(
				ПроТокен,
				Символы.ПС,
				ПроCryptoPro,
				Символы.ПС,
				Подробнее);
				
		КонецЕсли;
			
	Иначе
			
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Для получения сертификата эл. подписи необходимо провести идентификацию личности владельца. '"),
			Символы.ПС,
			Новый ФорматированнаяСтрока(НСтр("ru = 'Убедитесь'"),,,,"https://help.astral.ru/1c-o/poluchenie-elektronnoj-podpisi/u-doverennogo-litsa-uts-fns"),
			НСтр("ru = ' в возможности проведения идентификации в вашем регионе.'"));
			
	КонецЕсли;
		
	Возврат Подсказка;

КонецФункции

Функция ПодробнаяПодсказкаПриВыбореСертификатаФНС(ЭтоЮридическоеЛицо) Экспорт
	
	Если ЭтоЮридическоеЛицо Тогда
		Подсказка = НСтр("ru = 'В соответствии с ФЗ от 06.04.2011 N 63-ФЗ (ред. от 02.07.2021) ""Об электронной подписи"" руководители коммерческих организаций должны получать сертификат в удостоверяющем центре ФНС или у его доверенного лица.'");
	Иначе
		Подсказка = НСтр("ru = 'В соответствии с ФЗ от 06.04.2011 N 63-ФЗ (ред. от 02.07.2021) ""Об электронной подписи"" индивидуальные предприниматели, нотариусы, адвокаты и главы КФХ должны получать сертификат в удостоверяющем центре ФНС или у его доверенного лица.'");
	КонецЕсли;
	
	Возврат Подсказка;

КонецФункции

Функция ВидДокументаЗаявленияСкорректированный(ВидДокумента) Экспорт
	
	НовыйВид = ВидДокумента;
	
	Если ВидДокумента = "Заявление_на_подключение" 
		ИЛИ ВидДокумента = "Заявление_на_изменение" Тогда
		// xml-заявление
		НовыйВид = "Заявление";
	ИначеЕсли ВидДокумента = "Заявление" Тогда
		// Скан заявления для 1С:БС и ПСБ
		НовыйВид = "ЗаявлениеНаПодключение";
	ИначеЕсли ВидДокумента = "СвидетельствоОПостановкеНаУчет" Тогда
		НовыйВид = "ПроизвольныйДокумент";
	КонецЕсли;
			
	Возврат НовыйВид;
	
КонецФункции

Функция ЧастичноеПредставлениеТелефона(Телефон) Экспорт
		
	Представление = "";
	ТолькоЦифры = ЦифрыИзСтроки(Телефон, Истина);

	Если СтрДлина(ТолькоЦифры) = 10 Тогда
		Представление = СтрШаблон(
			"+7 %1 ***-**-%2", 
			Сред(ТолькоЦифры, 1, 3), 
			Сред(ТолькоЦифры, 9));
	КонецЕсли;
	
	Возврат Представление;

КонецФункции

Функция ЦифрыИзСтроки(Строка, ЭтоТелефон) Экспорт
		
	ТекстДляОбработки = СокрЛП(Строка); 
	Цифры = "";
	Для Индекс = 1 По СтрДлина(ТекстДляОбработки) Цикл
		ТекущийСимвол = Сред(ТекстДляОбработки, Индекс, 1);
		Если СтрНайти("0123456789", ТекущийСимвол) Тогда
			Цифры = Цифры + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоТелефон И СтрДлина(Цифры) = 11 Тогда
		Цифры = Сред(Цифры, 2);
	КонецЕсли;
	
	Возврат Цифры;

КонецФункции

Процедура ИзменитьОформлениеДокументов(Форма, СкрытьПринудительно = Ложь) Экспорт
	
	ЭтоФормаЗаявления = ЭтоФормаЗаявления(Форма);
	
	СкрытьДокументы = 
		ЭтоФормаЗаявления И НЕ ЗначениеЗаполнено(Форма.Организация) 
		ИЛИ СкрытьПринудительно;
	
	Элементы = Форма.Элементы;
	
	Если ЭтоФормаЗаявления Тогда
		Элементы.ГруппаСканов.Видимость = Ложь;
	КонецЕсли;
	
	Если СкрытьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДокументы = Ложь;
	Для каждого ТекущийВидДокумента Из ВидыДокументовПоФорме(Форма) Цикл
		
		ВидДокумента = ТекущийВидДокумента.Ключ;
		Описание 	 = ТекущийВидДокумента.Значение;
		
		Если Описание.Видимость Тогда
			ЕстьДокументы = Истина;
		КонецЕсли;
		
		Элементы["Группа" + ВидДокумента].Видимость 	= Описание.Видимость;
		Элементы["Заголовок" + ВидДокумента].Заголовок 	= Описание.Представление + ":";
		
		ИзменитьОформлениеДокумента(Форма, ВидДокумента);
		Если ЭтоФормаПервичногоЗаявления(Форма) И Описание.Видимость Тогда
			ИзменитьОформлениеДоверенности(Форма, ВидДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЭтоФормаЗаявления Тогда
		Элементы.ГруппаЗаголовокДляДокументов.Видимость = ЕстьДокументы;
		Элементы.ГруппаСканов.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеДоверенности(Форма, ВидДокумента) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ВидДокумента = "Доверенность" Тогда
		Подсказка = ДокументооборотСКОКлиентСервер.ИзменитьОформлениеРекомендацииДоверенностиДляФНС(
			Форма.ВладелецЭЦПТип, 
			Форма.ЭтоЮридическоеЛицо, 
			Форма.ПолучателиФНС);
		Подсказка = СтрЗаменить(Подсказка, "?", "");
		Элементы.УказательДоверенность.Подсказка = Строка(Подсказка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеДокумента(Форма, ВидДокумента) Экспорт
	
	Размер 		= 0;
	Количество  = 0;
	ИмяПервого  = "";
	
	Для каждого ФайлДокумента Из Форма.ФайлыДокументов Цикл
		
		ФайлДокумента = ФайлДокумента.Значение;
		Если ФайлДокумента.Документ = ВидДокумента Тогда
			Размер = Размер + ФайлДокумента.Размер;
			Количество = Количество + 1;
			ИмяПервого = ФайлДокумента.ИсходноеИмя;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументооборотСКОКлиентСервер.ИзменитьОформлениеДокумента(Форма, ВидДокумента, Размер, Количество, ИмяПервого);
	
КонецПроцедуры

Функция МобильныйУказанКорректно(Форма, ТихийРежим = Ложь, ТекстОшибки = "") Экспорт
	
	Корректный = Истина;
	
	Если Форма.ПолучатьУведомления Тогда
		ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(Форма.ТелефонМобильный);
		Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите новый номер мобильного телефона'");
			Если НЕ ТихийРежим Тогда
				СообщитьПользователю(ТекстОшибки,, "ТелефонМобильный");
			КонецЕсли;
			Корректный = Ложь;
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
			ТекстОшибки = НСтр("ru = 'Мобильный телефон должен иметь формат 
				|+7 XXX XXX-XX-XX'");
			Если НЕ ТихийРежим Тогда
				СообщитьПользователю(ТекстОшибки, ,"ТелефонМобильный");
			КонецЕсли;
			Корректный = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Корректный;
	
КонецФункции

Процедура СообщитьПользователю(
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) Экспорт
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщенияПользователю,
			КлючДанных,
			Поле,
			ПутьКДанным,
			Отказ);
	#Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщенияПользователю,
			КлючДанных,
			Поле,
			ПутьКДанным,
			Отказ);
	#КонецЕсли
			
КонецПроцедуры

Функция ИспользоватьСуществующий(Объект) Экспорт
	
	ЭтоФорма  = ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения");
	ЭтоСсылка = НЕ ЭтоФорма;
	
	ИспользуетсяСуществующий = Объект.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	
	Результат = 
		ИспользуетсяСуществующий 
		И (ЭтоФорма И ЭтоСменаСертификата(Объект) ИЛИ ЭтоСсылка);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНеобходимостьУстановкиГалки_ВключатьЛицензиюКриптоПроВСертификат(Форма) Экспорт
	
	Если Форма.СертификатДолженБытьПолученОтГосУЦ
		ИЛИ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ Тогда
		
		Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат = Ложь;
		Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Ложь;
		Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ЭтоКриптоПро = Форма.CryptoProCSPУстановлен
		И Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		
	ЭтоЛокальнаяУчетка = Форма.ЭтоПереходВКоробку ИЛИ НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса;
	
	#Если ВебКлиент Тогда
		ЭтоВеб = Истина;
	#ИначеЕсли Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ЭтоВеб = ОбщегоНазначения.ЭтоВебКлиент();
	#Иначе
		ЭтоВеб = Ложь;
	#КонецЕсли
	ЛицензиюНельзяВычислить =
		СтрНайти(Форма.ИмяФормы, "ВнешняяОбработка") > 0 
		ИЛИ ЭтоВеб;
		
	Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат = ЭтоКриптоПро И ЭтоЛокальнаяУчетка;
	Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Ложь;
	
	Если Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат Тогда
		
		Если Форма.ЛицензияКриптоПроВключенаВСертификат Тогда
  
			Если ЛицензиюНельзяВычислить
				ИЛИ Форма.СрокЛицензииКриптоПроКонечный Тогда
				
				Форма.ВключатьЛицензиюКриптоПроВСертификат = Истина;
			Иначе
				Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
				Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Истина;
			КонецЕсли;
			
		Иначе
			Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
			Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Истина;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодыФНСПрописью(Знач ТаблицаКодовФНС) Экспорт

	Результат = "";
	КоличествоКодовФНС = ТаблицаКодовФНС.Количество();
	Если КоличествоКодовФНС = 1 Тогда
		Результат = ТаблицаКодовФНС[0].КодПолучателя + ?(ТаблицаКодовФНС[0].КПП = "","" ,"-") + ТаблицаКодовФНС[0].КПП;
	ИначеЕсли КоличествоКодовФНС > 1 Тогда
		Результат = НесколькоНаправленийПрописью(КоличествоКодовФНС);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьКодыРосстатПрописью(Знач Получатели) Экспорт
	
	Результат = "";
	КоличествоКодовФСГС = Получатели.Количество();
	Если КоличествоКодовФСГС = 1 Тогда
		Результат = Получатели[0].КодПолучателя;
	ИначеЕсли КоличествоКодовФСГС > 1 Тогда
		Результат = НесколькоНаправленийПрописью(КоличествоКодовФСГС);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НесколькоНаправленийПрописью(Количество) Экспорт

	Результат = "";
	Подстрока1 = Строка(Количество);
	Подстрока2 = ДлительнаяОтправкаКлиентСервер.ПредметИсчисленияБезЧисла(
		Количество,
		НСтр("ru = 'направление'"),
		НСтр("ru = 'направления'"),
		НСтр("ru = 'направлений'"),
		"с");
	Результат = Подстрока1 + " " + Подстрока2;
	
	Возврат Результат;

КонецФункции

Процедура ОчиститьВключаемыйСертификат(Форма) Экспорт
	
	Форма.ВключаемыйСертификат = Неопределено;
	Форма.ВключаемыйСертификатОблачный = Ложь;
	Форма.ИдентификаторПолученияСпискаОблачныхСертификатов = "";
	Форма.ОблачныеСертификатыКалуги.Очистить();
	Форма.ЭтоСертификатДругогоУЦ = Ложь;
	
КонецПроцедуры

Процедура УточнитьРежимРаботыСКлючами(Форма) Экспорт
	
	ВыбратьРежимОблака = 
		Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса")
		И НЕ Форма.СертификатДолженБытьПолученОтГосУЦ;
	
	Если ВыбратьРежимОблака Тогда
		Форма.РежимРаботыСКлючами = 1;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина);
	Иначе
		Форма.РежимРаботыСКлючами = 2;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоРуководитель(Форма) Экспорт
	
	Возврат Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
КонецФункции

Функция ЭтоБухгалтер(Форма) Экспорт
	
	Возврат Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	
КонецФункции

Функция ЭтоДругойСотрудник(Форма) Экспорт
	
	Возврат Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	
КонецФункции

Процедура ОпределитьИзменениеВМестеХраненияКлючей(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Форма.ЭтоПереходВКоробку = Ложь;
	Форма.ЭтоПереходВОблако  = Ложь;
	
	ЕстьИзменение = Форма.ИзменитьМестоХранения ИЛИ ИспользоватьСуществующий(Форма);
	
	ВМоделиСервиса = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса");
	
	Если Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса
		ИЛИ Форма.ДоступнаЭлектроннаяОблачнаяПодпись Тогда
		
		Если Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака Тогда
			
			Если Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro")
				ИЛИ Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
				
				Форма.ЭтоПереходВКоробку = ЕстьИзменение;
				
			КонецЕсли;
			
		Иначе
			
			Если Форма.ВыбранноеМестоХраненияКлюча = ВМоделиСервиса Тогда
				Форма.ЭтоПереходВОблако  = ЕстьИзменение;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Переопределить =
			Форма.ВыбранноеМестоХраненияКлюча = Неопределено
			ИЛИ Форма.ВыбранноеМестоХраненияКлюча = ВМоделиСервиса;
		
		Если Переопределить Тогда
			ОпределитьВыбранноеМестоХраненияКлюча(Форма);
		КонецЕсли;
		
		Форма.ЭтоПереходВКоробку = Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака И ЕстьИзменение;
		
	КонецЕсли;
	
	СравнитьКриптопровайдера(Форма);
	
КонецПроцедуры

Процедура СравнитьКриптопровайдера(Форма)

	ИзменилсяКриптопровайдерЛокальнойУчетки = НЕ Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака 
		И Форма.ТипКриптопровайдераИсходный <> Форма.ВыбранноеМестоХраненияКлюча; 
	
	Форма.ТипКриптопровайдераИзменился = 
		(Форма.ЭтоПереходВКоробку 
		ИЛИ Форма.ЭтоПереходВОблако 
		ИЛИ ИзменилсяКриптопровайдерЛокальнойУчетки) 
		И Форма.ИзменитьМестоХранения;
	
КонецПроцедуры

Процедура ОпределитьВыбранноеМестоХраненияКлюча(Форма, ПринудительнаяМодель = Неопределено) Экспорт
	
	ВМоделиСервиса = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса");
	ЛокальныеКлючи = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ТолькоЛокальныеКлючи");
	VipNet         = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
	CryptoPro      = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
	CryptoProDSS   = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoProDSS");
	ПустаяСсылка   = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ПустаяСсылка");
	ЭтоПодписьОблака = КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(Форма.МестоХраненияКлюча);
	
	ПереключитьНаЛокальныеКлючи = 
		ПринудительнаяМодель = ЛокальныеКлючи
		ИЛИ ПринудительнаяМодель = VipNet
		ИЛИ ПринудительнаяМодель = CryptoPro;
	ПереключитьНаОблако = ПринудительнаяМодель = ВМоделиСервиса И Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	
	УстановленТолькоОдинКриптопровайдер = Форма.КомпонентаУстановлена 
		И (Форма.ViPNetCSPУстановлен ИЛИ Форма.CryptoProCSPУстановлен)
		И НЕ (Форма.ViPNetCSPУстановлен И Форма.CryptoProCSPУстановлен);
		
	ДоступенВыборОблака = 
		НЕ Форма.СертификатДолженБытьПолученОтГосУЦ
		И НЕ ПереключитьНаЛокальныеКлючи
		И (Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса 
		ИЛИ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса
		ИЛИ ЭтоПодписьОблака);
		
	Форма.ВыбранноеМестоХраненияКлюча = ПустаяСсылка;
	
	ЭтоОблако = 
		Форма.ЭтоУчетнаяЗаписьВМоделиСервиса 
		И ДоступенВыборОблака 
		И НЕ ПереключитьНаЛокальныеКлючи
		ИЛИ ПереключитьНаОблако;
		
	ЭтоОблачнаяПодпись = 
		ЭтоПодписьОблака 
		И Форма.ДоступнаЭлектроннаяОблачнаяПодпись
		И ДоступенВыборОблака
		И НЕ ПереключитьНаЛокальныеКлючи;

	Если ЭтоОблачнаяПодпись Тогда
			
		Форма.ВыбранноеМестоХраненияКлюча = CryptoProDSS;

	ИначеЕсли ЭтоОблако Тогда
			
		Форма.ВыбранноеМестоХраненияКлюча = ВМоделиСервиса;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина);
		
	ИначеЕсли УстановленТолькоОдинКриптопровайдер Тогда
		
		Если Форма.ViPNetCSPУстановлен Тогда
			Форма.ВыбранноеМестоХраненияКлюча = VipNet;
		ИначеЕсли Форма.CryptoProCSPУстановлен Тогда
			Форма.ВыбранноеМестоХраненияКлюча = CryptoPro;
		КонецЕсли;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
		
	ИначеЕсли ПереключитьНаЛокальныеКлючи И 
		(ПринудительнаяМодель = VipNet ИЛИ ПринудительнаяМодель = CryptoPro) Тогда
		
		Форма.ВыбранноеМестоХраненияКлюча = ПринудительнаяМодель;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбранныйКриптопровайдер(Форма) Экспорт
	
	Если Форма.CryptoProCSPУстановлен И НЕ Форма.ИгнорироватьКонфликт
		ИЛИ Форма.ИгнорироватьКонфликт И Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
		
	КонецЕсли;
	
КонецФункции

Процедура УдалитьТекущийВидДокументов(Форма, Документ) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементСписка Из Форма.ФайлыДокументов Цикл
		Если ЭлементСписка.Значение.Документ = Документ Тогда
			ЭлементыДляУдаления.Добавить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
		Форма.ФайлыДокументов.Удалить(ЭлементДляУдаления);
	КонецЦикла;
			
КонецПроцедуры

Процедура ДополнитьФайлыВидомДокумента(Файлы, Документ, Форма) Экспорт
	
	Для Каждого Файл Из Файлы Цикл
		Файл.Вставить("Документ", Документ);
		Форма.ФайлыДокументов.Добавить(Файл);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьМодифицированность(Форма) Экспорт
	
	ЕстьРеквизит = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма, 
		"ЗапретитьИзменение");
		
	Если ЕстьРеквизит И НЕ Форма.ЗапретитьИзменение ИЛИ НЕ ЕстьРеквизит Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьМодифицированность(Форма) Экспорт
	Форма.Модифицированность = Ложь;
КонецПроцедуры

Функция ОписаниеФайла(ПолноеИмя, Адрес) Экспорт
	
	Файл = Новый Файл(ПолноеИмя);
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Имя", 			Файл.Имя);
	// Для совместимости ДополнитьОписанияРазмерамиФайлов и ДобавитьФайлыСПредпросмотром
	ОписаниеФайла.Вставить("ИсходноеИмя", 	Файл.Имя);
	ОписаниеФайла.Вставить("Адрес", 		Адрес);
	
	ОписанияФайлов = Новый Массив;
	ОписанияФайлов.Добавить(ОписаниеФайла);
	
	ОписанияФайлов = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ДополнитьОписанияРазмерамиФайлов(ОписанияФайлов);
	Возврат ОписанияФайлов;
	
КонецФункции

Процедура ОчиститьФайл(Форма, ВидДокумента) Экспорт
	
	УстановитьМодифицированность(Форма);
	УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	ИзменитьОформлениеДокумента(Форма, ВидДокумента);
	
КонецПроцедуры

Процедура ОчиститьФайлыПриУстановкеНовогоВладельцаЭЦП(Форма) Экспорт
	
	// Работа с файлами
	ОчиститьФайл(Форма, "Паспорт");
	ОчиститьФайл(Форма, "СНИЛС");
	ОчиститьФайл(Форма, "ПодтверждениеПолномочий");
	ОчиститьФайл(Форма, "Заявление");
	ИзменитьОформлениеДокументов(Форма);
	
КонецПроцедуры

Процедура ПослеДобавленияСкана(Форма, ВидДокумента, ФайлыДокумента) Экспорт
	
	УстановитьМодифицированность(Форма);
	УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	ДополнитьФайлыВидомДокумента(ФайлыДокумента, ВидДокумента, Форма);
	ИзменитьОформлениеДокумента(Форма, ВидДокумента);
	
КонецПроцедуры

Процедура УдалитьВсеСканы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Очищаем файлы 
	Для каждого ТекущийВидДокумента Из ВидыДокументовПоФорме(Форма) Цикл
		ВидДокумента = ТекущийВидДокумента.Ключ;
		УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	КонецЦикла;
	
	ИзменитьОформлениеДокументов(Форма);
	
КонецПроцедуры

Функция ВидыДокументов_Шаблон() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ЭтоЭлектронноеПодписание", Ложь);
	Параметры.Вставить("ЭтоНулевка", Ложь);
	Параметры.Вставить("ВладелецЭЦПТип", Неопределено);
	Параметры.Вставить("ЭтоЮридическоеЛицо", Истина);
	Параметры.Вставить("ЭтоПервичноеЗаявление", Истина);
	Параметры.Вставить("ИспользоватьСуществующий", Ложь);
	Параметры.Вставить("ЭтоСтороннийУЦ", Ложь);
	Параметры.Вставить("ЭтоПереизданиеСертификата", Ложь);
	Параметры.Вставить("ЭтоРуководитель", Ложь);
	Параметры.Вставить("ЭтоБюджетополучатель", Ложь);
	Параметры.Вставить("ЭтоПолучениеЭПС2022Г", Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция ВидыДокументовПоФорме(Форма) Экспорт
	
	Если ЭтоФормаЗаявления(Форма) Тогда
		
		Параметры = ПараметрыПоФорме(Форма);
		Возврат ВидыДокументовВЗаявлении(Параметры);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ЭтоБанковскаяГарантия(Форма) Тогда
		
		Виды = Новый Структура;
		
		Описание = ОписаниеВидаДокумента();
		Описание.Видимость 	   = Истина;
		Описание.Представление = НСтр("ru = 'Файл банковской гарантии'");
		Описание.ОдинФайл 	   = Истина;
		
		Виды.Вставить("XML", Описание);
		
		Описание = ОписаниеВидаДокумента();
		Описание.Видимость 	   = Истина;
		Описание.Представление = НСтр("ru = 'Файл подписи'");
		Описание.ОдинФайл 	   = Истина;
		
		Виды.Вставить("Подпись", Описание);
		
		Возврат Виды;
		
	КонецЕСли;

КонецФункции

Функция ПараметрыПоФорме(Форма) Экспорт
	
	Параметры = ВидыДокументов_Шаблон();
	Параметры.ЭтоЭлектронноеПодписание 	= Форма.ЭтоЭлектронноеПодписание;
	Параметры.ЭтоНулевка 				= Форма.ЭтоРежимБесплатнойНулевойОтчетности ИЛИ Форма.ЭтоРежимОграниченнойФункциональности;
	Параметры.ВладелецЭЦПТип			= Форма.ВладелецЭЦПТип;
	Параметры.ЭтоЮридическоеЛицо		= Форма.ЭтоЮридическоеЛицо;
	Параметры.ЭтоПервичноеЗаявление	 	= ЭтоФормаПервичногоЗаявления(Форма);
	Параметры.ИспользоватьСуществующий	= ИспользоватьСуществующий(Форма);
	Параметры.ЭтоРуководитель			= ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	Параметры.ЭтоБюджетополучатель		= Форма.ЭтоБюджетополучатель;
	Параметры.ЭтоПолучениеЭПС2022Г		= Форма.ЭтоПолучениеЭПС2022Г;
	
	Если Параметры.ЭтоПервичноеЗаявление Тогда
		Параметры.ЭтоСтороннийУЦ = Форма.ЭтоСертификатДругогоУЦ;
	Иначе
		Параметры.ЭтоСтороннийУЦ = Форма.ПереиздатьСертификат И Форма.ЭтоСертификатДругогоУЦИсходный;
		Параметры.ЭтоПереизданиеСертификата = Форма.ПереиздатьСертификат;
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Функция ВидыДокументовПоВходящемуКонтексту(ВходящийКонтекст) Экспорт
	
	Параметры = ПараметрыПоВходящемуКонтексту(ВходящийКонтекст);
	Возврат ВидыДокументовВЗаявлении(Параметры);
		
КонецФункции

Функция ПараметрыПоВходящемуКонтексту(ВходящийКонтекст) Экспорт
	
	ДокументЗаявление = ВходящийКонтекст.ДокументЗаявление;
	
	Параметры = ВидыДокументов_Шаблон();
	Параметры.ЭтоЭлектронноеПодписание 	= ДокументЗаявление.ПодписатьЭП;
	Параметры.ВладелецЭЦПТип 			= ДокументЗаявление.ВладелецЭЦПТип;
	Параметры.ЭтоЮридическоеЛицо 		= ДокументЗаявление.ТипОрганизации;
	Параметры.ЭтоПервичноеЗаявление 	= ВходящийКонтекст.ЭтоЗаявлениеНаПодключение;
	Параметры.ЭтоНулевка 				= ВходящийКонтекст.ЭтоНулевка;
	Параметры.ИспользоватьСуществующий	= ВходящийКонтекст.ИспользоватьСуществующий;
	Параметры.ЭтоРуководитель			= ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(ДокументЗаявление);
	Параметры.ЭтоБюджетополучатель		= ДокументЗаявление.ЭтоБюджетополучатель;
	Параметры.ЭтоПолучениеЭПС2022Г		= ЭтоПолучениеЭПС2022Г(ДокументЗаявление.Дата);
	
	Если Параметры.ЭтоПервичноеЗаявление Тогда
		Параметры.ЭтоСтороннийУЦ = ДокументЗаявление.ЭтоСертификатДругогоУЦ;
	Иначе
		Параметры.ЭтоСтороннийУЦ = ЭтотПараметрИзменился(ДокументЗаявление, "УдостоверяющийЦентр");
		Параметры.ЭтоПереизданиеСертификата = ЭтотПараметрИзменился(ДокументЗаявление, "ПереизданиеСертификата");		
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Функция ЭтоПолучениеЭПС2022Г(Дата) Экспорт
	
	Возврат Дата >= Дата(2022, 1, 1);
	
КонецФункции
	
Функция ЭтотПараметрИзменился(Заявление, ИмяРеквизита) Экспорт
	
	ИзмененныйРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности." + ИмяРеквизита);
	СтруктураПоиска    = Новый Структура("ИзмененныйРеквизит", ИзмененныйРеквизит);
	Возврат Заявление.ИзменившиесяРеквизитыВторичногоЗаявления.НайтиСтроки(СтруктураПоиска).Количество() > 0;
	
КонецФункции

Функция ЭтоФормаПервичногоЗаявления(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоПервичноеЗаявление = ИмяФормы = "МастерФормированияЗаявкиНаПодключениеУпрощенное"; 
	Возврат ЭтоПервичноеЗаявление;
	
КонецФункции

Функция ЭтоФормаЗаявления(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоФормаЗаявления = СтрНайти(ИмяФормы, "МастерФормированияЗаявки"); 
	Возврат ЭтоФормаЗаявления;
	
КонецФункции

Функция ЭтоФормаВторичногоЗаявления(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоВторичноеЗаявление = ИмяФормы = "МастерФормированияЗаявкиНаИзменениеПараметровПодключения"; 
	Возврат ЭтоВторичноеЗаявление;
	
КонецФункции

Функция КраткоеИмяФормыПоПолному(Форма) Экспорт
	
	Подстроки = СтрРазделить(Форма.ИмяФормы, ".");
	Количество = Подстроки.Количество();
	ИмяФормы = Подстроки[Количество - 1];
	
	Возврат ИмяФормы;
	
КонецФункции

Функция ОписаниеВидаДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("Видимость", 			Истина);
	Описание.Вставить("Представление", 		"");
	Описание.Вставить("Постфикс", 			"");
	Описание.Вставить("ТолькоДляНулевки", 	Ложь);
	Описание.Вставить("ОдинФайл", 			Ложь);
	
	Возврат Описание;
	
КонецФункции

Функция ЭтоСертификатСтороннегоУЦПоФорме(Форма) Экспорт

	Параметры = ПараметрыПоФорме(Форма);
	ЭтоСертификатСтороннегоУЦ = ТребуетсяПриложитьДокументВоВторичном(Параметры);
	Возврат ЭтоСертификатСтороннегоУЦ;

КонецФункции

Функция ТребуетсяПриложитьДокументВоВторичном(Параметры)
	
	// Требуется в случае, если ранее использовали сертификат СУЦ, а теперь переходият на серт. КА
	// В этом случае при подключении документы не собирались, должны быть собраны при переиздании
	ЭтоВторичноеЗаявление = НЕ Параметры.ЭтоПервичноеЗаявление;
	
	ТребуетсяПриложить = 
		ЭтоВторичноеЗаявление
		И Параметры.ЭтоЭлектронноеПодписание 
		И Параметры.ЭтоСтороннийУЦ
		И НЕ Параметры.ИспользоватьСуществующий
		И НЕ СканыБудетСобиратьГосОрган(Параметры);
		
	Возврат ТребуетсяПриложить; 

КонецФункции

Функция ТребуетсяПриложитьДокументВПервичном(Параметры) Экспорт

	Возврат (Параметры.ЭтоНулевка ИЛИ Параметры.ЭтоЭлектронноеПодписание) 
		И Параметры.ЭтоПервичноеЗаявление
		И НЕ Параметры.ИспользоватьСуществующий 
		И НЕ СканыБудетСобиратьГосОрган(Параметры);
	
КонецФункции

Функция СканыБудетСобиратьГосОрган(Параметры) Экспорт

	СканыБудетСобиратьГосОрган = 
		Параметры.ЭтоПолучениеЭПС2022Г
		И (Параметры.ЭтоРуководитель
		ИЛИ Параметры.ЭтоБюджетополучатель);
		
	Возврат СканыБудетСобиратьГосОрган;
	
КонецФункции

Функция ТребуетсяПриложитьСканПаспортаВоВторичном(Параметры) Экспорт

	ЭтоВторичное = НЕ Параметры.ЭтоПервичноеЗаявление;
	
	ТребуетсяПриложить = 
		ЭтоВторичное
		И Параметры.ЭтоЭлектронноеПодписание
		И Параметры.ЭтоПереизданиеСертификата
		И НЕ Параметры.ИспользоватьСуществующий
		И НЕ СканыБудетСобиратьГосОрган(Параметры);
		
	Возврат ТребуетсяПриложить;
	
КонецФункции

Процедура ВидыДокументовВЗаявлении_ДобавитьПаспорт(Виды, Параметры) Экспорт
	
	// Паспорт
	Видимость = 
		ТребуетсяПриложитьДокументВоВторичном(Параметры)
		ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры)
		ИЛИ ТребуетсяПриложитьСканПаспортаВоВторичном(Параметры);
		
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость 	   = Видимость;
	Описание.Представление = НСтр("ru = 'Паспорт (разворот с фото)'");
	Описание.ОдинФайл 	   = Истина;
	
	Виды.Вставить("Паспорт", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьСНИЛС(Виды, Параметры) Экспорт
	
	Видимость = 
		ТребуетсяПриложитьДокументВоВторичном(Параметры) 
		ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
	
	// СНИЛС
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость		= Видимость;
	Описание.Представление 	= НСтр("ru = 'Свидетельство СНИЛС'");
	Описание.ОдинФайл 		= Истина;
	
	Виды.Вставить("СНИЛС", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьСвидетельствоОПостановкеНаУчет(Виды, Параметры) Экспорт
	
	ЭтоНулевка 				 = Параметры.ЭтоНулевка;
	ЭтоЭлектронноеПодписание = Параметры.ЭтоЭлектронноеПодписание;
	ИспользоватьСуществующий = Параметры.ИспользоватьСуществующий;
	ЭтоВторичноеЗаявление 	 = НЕ Параметры.ЭтоПервичноеЗаявление;
	
	Видимость = 
		ТребуетсяПриложитьДокументВоВторичном(Параметры) 
		ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
	
	// Постановка на учет в ФНС
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость			= Видимость;
	Описание.Представление 		= НСтр("ru = 'Свидетельство ИНН орг-ции'");
	Описание.ТолькоДляНулевки 	= Истина;
	
	Виды.Вставить("СвидетельствоОПостановкеНаУчет", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьПодтверждениеПолномочий(Виды, Параметры) Экспорт
	
	ВладелецЭЦПТип 			 = Параметры.ВладелецЭЦПТип;
	ЭтоЮридическоеЛицо 		 = Параметры.ЭтоЮридическоеЛицо;
	
	// Подтверждение полномочий
	Описание = ОписаниеВидаДокумента();
	
	ЭтоРуководитель = ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	Если ЭтоЮридическоеЛицо И НЕ ЭтоРуководитель Тогда
		
		Видимость = 
			ТребуетсяПриложитьДокументВоВторичном(Параметры)
			ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
		
		Описание.Видимость = Видимость;
		
	Иначе
		Описание.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоРуководитель Тогда
		Описание.Представление 	= НСтр("ru = 'Приказ о назначении'");
	Иначе
		Описание.Представление 	= НСтр("ru = 'Подтверждение полномочий'");
	КонецЕсли;
	
	Виды.Вставить("ПодтверждениеПолномочий", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьДоверенность(Виды, Параметры) Экспорт
	
	ВладелецЭЦПТип = Параметры.ВладелецЭЦПТип;
	
	// Доверенность
	Описание = ОписаниеВидаДокумента();
	
	ЭтоРуководитель = ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	Если НЕ ЭтоРуководитель Тогда
		
		Видимость = 
			ТребуетсяПриложитьДокументВоВторичном(Параметры)
			ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
			
		Описание.Видимость = Видимость;
		
	Иначе
		Описание.Видимость = Ложь;
	КонецЕсли;
	
	Описание.Представление 	= НСтр("ru = 'Доверенность'");
	
	Виды.Вставить("Доверенность", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьЗаявление(Виды, Параметры) Экспорт
	
	ЭтоНулевка 				 = Параметры.ЭтоНулевка;
	ЭтоПервичноеЗаявление    = Параметры.ЭтоПервичноеЗаявление;
	
	Видимость = ТребуетсяПриложитьДокументВПервичном(Параметры) И ЭтоНулевка;
			
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость			= Видимость;
	Описание.ТолькоДляНулевки 	= Истина;
	
	Если ЭтоПервичноеЗаявление Тогда
		Описание.Представление  = НСтр("ru = 'Заявление на подключение'");
	Иначе
		Описание.Представление  = НСтр("ru = 'Заявление на изменение'");
	КонецЕсли;

	Виды.Вставить("Заявление", Описание);
	
КонецПроцедуры

Функция ВидыДокументовВЗаявлении(Параметры) Экспорт
	
	Виды = Новый Структура;
	ВидыДокументовВЗаявлении_ДобавитьПаспорт(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьСНИЛС(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьСвидетельствоОПостановкеНаУчет(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьПодтверждениеПолномочий(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьДоверенность(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьЗаявление(Виды, Параметры);

	Возврат Виды;

КонецФункции

Функция ПодсказкаДляЭлектронногоПодписания(ДобавлятьОтступы = Истина) Экспорт
	
	Результат = Новый ФорматированнаяСтрока(НСтр("ru = 'Подписать заявление эл. подписью можно, если у организации для выбранного сотрудника 
                                                  |есть действующий сертификат и на компьютере установлен криптопровайдер. 
                                                  |При использовании эл. подписи некоторые документы можно будет не оформлять в бумажном виде.
                                                  |После отправки заявления, подписанного эл. подписью, будет создан новый закрытый ключ и сертификат.'"));
	
	Если ДобавлятьОтступы Тогда
		Результат = Новый ФорматированнаяСтрока(Результат, Символы.ПС, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт

	Элементы    = Форма.Элементы;
	ТекстОшибки = "";
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ВладелецЭП";
	
	Если ПустаяСтрока(Форма.ВладелецЭЦП) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
		
	КонецЕсли;
		
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьФИОВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт

	Элементы    = Форма.Элементы;
	ТекстОшибки = "";
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "УказательВладелецЭП";
	
	// Фамилия
	Если ПустаяСтрока(Форма.ВладелецЭЦПФамилия) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните фамилию владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПФамилия, 
			НСтр("ru = 'Фамилия владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	// Имя
	Если ПустаяСтрока(Форма.ВладелецЭЦПИмя) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните имя владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПИмя, 
			НСтр("ru = 'Имя владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	// Отчетство
	Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПОтчество, 
			НСтр("ru = 'Отчество владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьИННВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт

	РезультатПроверки = ДокументооборотСКОКлиентСервер.ПроверитьИННВладельцаЭП(Форма);
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьВладелецЭЦПСНИЛС(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ВладелецЭЦПСНИЛС";
	
	// СНИЛС
	СНИЛСБезРазделителей = СНИЛСБезРазделителей(Форма.ВладелецЭЦПСНИЛС);
	
	Если ПустаяСтрока(СНИЛСБезРазделителей) Тогда
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните СНИЛС владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
	Иначе
		
		Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(Форма.ВладелецЭЦПСНИЛС) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'");
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(Форма.ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'");
		КонецЕсли;
	КонецЕсли;

	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция СНИЛСБезРазделителей(СНИЛС) Экспорт

	СНИЛСТолькоЦифры = СтрЗаменить(СНИЛС, "-","");
	СНИЛСТолькоЦифры = СтрЗаменить(СНИЛСТолькоЦифры, " ","");
	
	Возврат СНИЛСТолькоЦифры;

КонецФункции

Функция ПроверитьИНН(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле     = "ИНН";
	РезультатПроверки.Реквизит = "ИННКомментарий";
	
	ИНН = СокрЛП(Форма.ИНН);
	
	// ИНН
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Укажите ИНН организации для начала подключения к 1С-Отчетности'");
		РезультатПроверки.Пустой	  = Истина;
		
	Иначе
		
		Если Форма.ЭтоЮридическоеЛицо И СтрДлина(ИНН) <> 10 Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'ИНН организации должен состоять из 10 цифр'");
			РезультатПроверки.Пустой	  = СтрДлина(ИНН) < 10;
			
		ИначеЕсли НЕ Форма.ЭтоЮридическоеЛицо И СтрДлина(ИНН) <> 12 Тогда
				
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'ИНН предпринимателя должен состоять из 12 цифр'");
			РезультатПроверки.Пустой	  = СтрДлина(ИНН) < 12;

		Иначе
			РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Форма.ЭтоЮридическоеЛицо, РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция СравниватьРеквизитыОрганизации(Форма) Экспорт
	
	ЭтоПолучениеЭПС2022Г     = Форма.ЭтоПолучениеЭПС2022Г;
	ЭтоРуководитель          = ЭтоРуководитель(Форма);
	
	Сравнивать =
		ЭтоПолучениеЭПС2022Г И ЭтоРуководитель 
		ИЛИ НЕ ЭтоПолучениеЭПС2022Г;
		
	Возврат Сравнивать;
		
КонецФункции

Функция РезультатПроверкиДанныхДляОтбораСертификатов(Форма, ВыводитьСообщения = Ложь) Экспорт
	
	РезультатФИО      = ПроверитьФИОВладельцаЭП(Форма, , ВыводитьСообщения);
	РезультатИННФЛ    = ПроверитьИННВладельцаЭП(Форма, , ВыводитьСообщения);
	РезультатСНИЛС    = ПроверитьВладелецЭЦПСНИЛС(Форма, , ВыводитьСообщения);
	РезультатИННЮЛ    = ПроверитьИНН(Форма, , ВыводитьСообщения);
	
	ЕстьОшибка = Ложь;
	ТекстОшибки = "";
		
	Результаты = Новый Массив;
	Результаты.Добавить(РезультатФИО);
	Результаты.Добавить(РезультатИННФЛ);
	Результаты.Добавить(РезультатСНИЛС);
	Результаты.Добавить(РезультатИННЮЛ);
	
	Для каждого Результат Из Результаты Цикл
		Если Результат.ЕстьОшибка Тогда
			ЕстьОшибка = Истина;
			ТекстОшибки = ТекстОшибки + Символы.ПС + "- " + Результат.ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибка", ЕстьОшибка);
	Результат.Вставить("ТекстОшибки", СокрЛП(ТекстОшибки));
		
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаОрганизациюПоФорме(Форма) Экспорт
	
	Возврат СсылкаНаОрганизацию(Форма.Организация);

КонецФункции

Функция СсылкаНаОрганизацию(Организация) Экспорт
	
	Возврат Новый ФорматированнаяСтрока(Строка(Организация),,,,ПолучитьНавигационнуюСсылку(Организация));

КонецФункции

Функция СсылкаНаВладельца(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
		ПодстрокаВладелец = Новый ФорматированнаяСтрока(Строка(Форма.ВладелецЭЦП),,,,ПолучитьНавигационнуюСсылку(Форма.ВладелецЭЦП));
	Иначе
		ПодстрокаВладелец = ФИОВладельца(Форма);
	КонецЕсли;
	
	Возврат ПодстрокаВладелец;

КонецФункции

Функция ФИОВладельца(Форма) Экспорт
	
	ФИО = Форма.ВладелецЭЦПФамилия + " " + Форма.ВладелецЭЦПИмя + " " + Форма.ВладелецЭЦПОтчество;
	ФИО = СокрЛП(ФИО);
	
	Возврат ФИО;

КонецФункции

Функция ПредставлениеОтбораСертификатов(Форма) Экспорт
	
	// Отбоp проверяется в методе ЭтоСертификатОрганизации
	
	Если ПроверятьИННОрганизации(Форма) Тогда
		Шаблон = 
		НСтр("ru = '- ИНН: %1
			       |- ФИО физ. лица: %2
			       |- ИНН физ. лица: %3
			       |- СНИЛС: %4'");
	Иначе
		Шаблон = 
		НСтр("ru = '- ФИО физ. лица: %2
			       |- ИНН физ. лица: %3
			       |- СНИЛС: %4'");
	КонецЕсли;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шаблон,
		СокрЛП(Форма.ИНН),
		ФИОВладельца(Форма),
		СокрЛП(Форма.ВладелецЭЦПИНН),
		СокрЛП(Форма.ВладелецЭЦПСНИЛС));
	
	Возврат Представление;

КонецФункции

Функция ПроверятьИННОрганизации(Форма) Экспорт
	
	ПроверятьИННОрганизации = 
		НЕ Форма.ЭтоПолучениеЭПС2022Г 
		ИЛИ Форма.ЭтоПолучениеЭПС2022Г И ЭтоРуководитель(Форма);
		
	Возврат ПроверятьИННОрганизации;
			
КонецФункции

Функция ТекстОшибкиНеНайденоНиОдногоСертификата(Форма, ДобавлятьВступление) Экспорт
	
	Если ДобавлятьВступление Тогда
		Вступление = ПодсказкаДляЭлектронногоПодписания();
	Иначе
		Вступление = "";
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверкиДанныхДляОтбораСертификатов(Форма);
	
	СсылкаНаОрганизацию = СсылкаНаОрганизациюПоФорме(Форма);
	
	ПодстрокаОрганизация = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Не найдено ни одного сертификата эл. подписи по организации '"),
		СсылкаНаОрганизацию);
		
	Если РезультатПроверки.ЕстьОшибка Тогда
		
		ТекстОшибки = РезультатПроверки.ТекстОшибки;

		ПолныйТекстОшибки = Новый ФорматированнаяСтрока(
			Вступление,
			ПодстрокаОрганизация,
			НСтр("ru = ' по причине:'"),
			Символы.ПС,
			Символы.ПС,
			ТекстОшибки,
			СсылкаНаВсеСертификаты());
		
	Иначе
	
		ПредставлениеОтбора = ПредставлениеОтбораСертификатов(Форма);
		
		ПолныйТекстОшибки = Новый ФорматированнаяСтрока(
			Вступление,
			ПодстрокаОрганизация,
			НСтр("ru = ' по данным:'"),
			Символы.ПС,
			Символы.ПС,
			ПредставлениеОтбора,
			СсылкаНаВсеСертификаты());
			
	КонецЕсли;
	
	Возврат ПолныйТекстОшибки;
				
КонецФункции

Функция СсылкаНаВсеСертификаты() Экспорт
	
	
	ПодстрокаКоманда = Новый ФорматированнаяСтрока(НСтр("ru = 'Все сертификаты'"),,,,"e1cib/command/ОбщаяКоманда.ПоказатьВсеЛичныеСертификаты");
				
	Подсказка = Новый ФорматированнаяСтрока(
		Символы.ПС,
		Символы.ПС,
		ПодстрокаКоманда);
		
	Возврат Подсказка;
	
КонецФункции

Функция ОшибкаПриПолученииСертификатаЧерезДУЦ() Экспорт
	
	ОписаниеОшибки = НСтр("ru = 'Подписание эл. подписью невозможно в случае получения сертификата руководителями организаций, индивидуальными предпринимателями, нотариусами, адвокатами и главами КФХ'");
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция ЭПВМоделиСервисаДоступнаЧерезДУЦ() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ИнициализироватьСпособПолученияСертификата(Форма, ЗаявлениеСозданоКопированием) Экспорт
	
	Если Форма.СертификатДолженБытьПолученОтГосУЦ
		ИЛИ Форма.ЭтоИнтеграцияСБанком Тогда 
		Форма.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	ИначеЕсли НЕ ЗаявлениеСозданоКопированием Тогда
		Форма.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИздатьНовый");
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеБюджтополучателя(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ЭтоФормаПервичногоЗаявления(Форма) Тогда
		Элемент = Элементы.ГруппаБюджетополучатель;
	Иначе
		Элемент = Элементы.ЭтоБюджетополучатель;
	КонецЕсли;
	
	Элемент.Видимость = Форма.ЭтоЮридическоеЛицо И НЕ Форма.ЭтоИнтеграцияСБанком;
	Элемент.Доступность = НЕ Форма.ЗапретитьИзменение;
	
КонецПроцедуры

Функция ЭтоСменаСертификата(Форма) Экспорт
	
	Если ЭтоФормаВторичногоЗаявления(Форма) Тогда
		ЭтоСменаСертификата = Форма.ПереиздатьСертификат;
	Иначе
		// В первичном всегда сертификат переиздается
		ЭтоСменаСертификата = Истина;
	КонецЕсли;
	
	Возврат ЭтоСменаСертификата;
	
КонецФункции

Функция ТекстЧерезСколькоЛетМесяцевНедельДней(ДатаОтсчета, ДатаЗавершения, ПрефиксЧисла, ПостфиксСуществительного) Экспорт
	
	Если ДатаЗавершения <= ДатаОтсчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГодОтсчета = Год(ДатаОтсчета);
	МесяцОтсчета = Месяц(ДатаОтсчета);
	ДеньОтсчета = День(ДатаОтсчета);
	ЧасОтсчета = Час(ДатаОтсчета);
	МинутаОтсчета = Минута(ДатаОтсчета);
	СекундаОтсчета = Секунда(ДатаОтсчета);
	
	ГодЗавершения = Год(ДатаЗавершения);
	МесяцЗавершения = Месяц(ДатаЗавершения);
	ДеньЗавершения = День(ДатаЗавершения);
	ЧасЗавершения = Час(ДатаЗавершения);
	МинутаЗавершения = Минута(ДатаЗавершения);
	СекундаЗавершения = Секунда(ДатаЗавершения);
	
	РазницаВГодах = ГодЗавершения - ГодОтсчета;
	РазницаВМесяцах = МесяцЗавершения - МесяцОтсчета;
	РазницаВДнях = ДеньЗавершения - ДеньОтсчета;
	РазницаВЧасах = ЧасЗавершения - ЧасОтсчета;
	РазницаВМинутах = МинутаЗавершения - МинутаОтсчета;
	РазницаВСекундах = СекундаЗавершения - СекундаОтсчета;
	
	Если РазницаВСекундах < 0 Тогда
		РазницаВМинутах = РазницаВМинутах - 1;
		РазницаВСекундах = РазницаВСекундах + 60;
	КонецЕсли;
	
	Если РазницаВМинутах < 0 Тогда
		РазницаВЧасах = РазницаВЧасах - 1;
		РазницаВМинутах = РазницаВМинутах + 60;
	КонецЕсли;
	
	Если РазницаВЧасах < 0 Тогда
		РазницаВДнях = РазницаВДнях - 1;
		РазницаВЧасах = РазницаВЧасах + 24;
	КонецЕсли;
	
	Если РазницаВДнях < 0 Тогда
		
		РазницаВМесяцах = РазницаВМесяцах - 1;
		Если МесяцЗавершения = 3 Тогда
			// берем год отсчета, в который существуют все дни месяца, например, с 29.02.2008 по 1.03.2009
			// прошло 1 год 1 день: c 29.02.2008 по 1.03.2008 прошел 1 день, далее 1 год
			Если (ГодОтсчета % 4 = 0) И ((ГодОтсчета % 100 <> 0) ИЛИ (ГодОтсчета % 400 = 0)) Тогда
				РазницаВДнях = РазницаВДнях + 29;
			Иначе
				РазницаВДнях = РазницаВДнях + 28;
			КонецЕсли;
			
		ИначеЕсли (МесяцЗавершения = 5) ИЛИ (МесяцЗавершения = 7) ИЛИ (МесяцЗавершения = 10)
			ИЛИ (МесяцЗавершения = 12) Тогда
			РазницаВДнях = РазницаВДнях + 30;
			
		Иначе
			РазницаВДнях = РазницаВДнях + 31;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазницаВМесяцах < 0 Тогда
		РазницаВМесяцах = РазницаВМесяцах + 12;
		РазницаВГодах = РазницаВГодах - 1;
	КонецЕсли;
	РазницаВНеделях = Цел(РазницаВДнях / 7);
	РазницаВДнях = РазницаВДнях % 7;
	
	Результат = "";
	Если РазницаВГодах > 0 Тогда
		Результат = ПрефиксЧисла + ЧислоССуществительным(РазницаВГодах, НСтр("ru='год'"), НСтр("ru='года'"), НСтр("ru='лет'")) + ПостфиксСуществительного;
	КонецЕсли;
	
	Если РазницаВМесяцах > 0 Тогда
		НомерМесяца = ЧислоССуществительным(РазницаВМесяцах, НСтр("ru='месяц'"), НСтр("ru='месяца'"), НСтр("ru='месяцев'"));
		Разделитель = ?(РазницаВНеделях = 0 И РазницаВДнях = 0, " " + НСтр("ru='и'") + " ", ", ");
		Результат = СоединитьЧерез(Результат, Разделитель, ПрефиксЧисла + НомерМесяца + ПостфиксСуществительного);
	КонецЕсли;
	
	Если РазницаВНеделях > 0 Тогда
		НомерНедели = ЧислоССуществительным(РазницаВНеделях, НСтр("ru='неделю'"), НСтр("ru='недели'"), НСтр("ru='недель'"));
		Разделитель = ?(РазницаВДнях = 0, " " + НСтр("ru='и'") + " ", ", ");
		Результат = СоединитьЧерез(Результат, Разделитель, ПрефиксЧисла + НомерНедели + ПостфиксСуществительного);
	КонецЕсли;
	
	Если РазницаВДнях > 0 Тогда
		НомерДня = ЧислоССуществительным(РазницаВДнях, НСтр("ru='день'"), НСтр("ru='дня'"), НСтр("ru='дней'"));
		Результат = СоединитьЧерез(Результат, " " + НСтр("ru='и'") + " ", ПрефиксЧисла + НомерДня + ПостфиксСуществительного);
	ИначеЕсли (РазницаВДнях = 0) И (Результат = "") Тогда
		
		Если (РазницаВЧасах > 0) ИЛИ (РазницаВМинутах > 0) Тогда
			Если РазницаВЧасах > 0 Тогда
				НомерЧаса = ЧислоССуществительным(РазницаВЧасах, НСтр("ru='час'"), НСтр("ru='часа'"), НСтр("ru='часов'"));
				Результат = ПрефиксЧисла + НомерЧаса + ПостфиксСуществительного;
			КонецЕсли;
			Если РазницаВМинутах > 0 Тогда
				НомерМинуты = ЧислоССуществительным(РазницаВМинутах, НСтр("ru='минуту'"), НСтр("ru='минуты'"), НСтр("ru='минут'"));
				Результат = СоединитьЧерез(Результат, " " + НСтр("ru='и'") + " ", ПрефиксЧисла + НомерМинуты + ПостфиксСуществительного);
			КонецЕсли;
		Иначе
			НомерСекунды = ЧислоССуществительным(РазницаВСекундах, НСтр("ru='секунду'"), НСтр("ru='секунды'"), НСтр("ru='секунд'"));
			Результат = ПрефиксЧисла + НомерСекунды + ПостфиксСуществительного;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЧислоССуществительным(
		Количество, 
		ИменительныйИлиВинительныйПадежЕдинственноеЧисло, 
		РодительныйПадежЕдинственноеЧисло, 
		РодительныйПадежМножественноеЧисло)
	
	ОстатокДеленияКоличестваНа100 = Количество % 100;
	ОстатокДеленияКоличестваНа10 = Количество % 10;
	
	Если (ОстатокДеленияКоличестваНа10 = 1) И (ОстатокДеленияКоличестваНа100 <> 11) Тогда
		Возврат Строка(Количество) + " " + ИменительныйИлиВинительныйПадежЕдинственноеЧисло;
		
	ИначеЕсли (ОстатокДеленияКоличестваНа10 >= 2) И (ОстатокДеленияКоличестваНа10 <= 4) И ((ОстатокДеленияКоличестваНа100 < 12) ИЛИ (ОстатокДеленияКоличестваНа100 > 14)) Тогда
		Возврат Строка(Количество) + " " + РодительныйПадежЕдинственноеЧисло;
		
	Иначе
		Возврат Строка(Количество) + " " + РодительныйПадежМножественноеЧисло;
	КонецЕсли;
	
КонецФункции

Функция СоединитьЧерез(Строка1, Разделитель, Строка2)
	
	Если ПустаяСтрока(Строка(Строка1)) Тогда
		Возврат Строка2;
	ИначеЕсли ПустаяСтрока(Строка(Строка2)) Тогда
		Возврат Строка1;
	Иначе
		Возврат Строка1 + Разделитель + Строка2;
	КонецЕсли;
	
КонецФункции

Функция ЭтоОблако(Форма) Экспорт
	
	Если ЭтоФормаПервичногоЗаявления(Форма) Тогда
		ЭтоОблако = Форма.РежимРаботыСКлючами = 1;
	Иначе

		Если Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
			ЭтоОблако = 
				Форма.ЭтоПереходВОблако 
				ИЛИ КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(Форма.МестоХраненияКлюча) И НЕ Форма.ЭтоПереходВКоробку
				ИЛИ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ Форма.ЭтоПереходВКоробку 
				ИЛИ ИспользоватьСуществующий(Форма) И Форма.ВключаемыйСертификатОблачный;
		Иначе
			ЭтоОблако = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ЭтоОблако;
	
КонецФункции

Процедура ПроверитьВключаемыйСертификат(Форма, МастерДалее) Экспорт
	
	ЭтоЗаявленияНаИзменение = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма);
	
	Проверить = 
		ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма)
		И (ЭтоЗаявленияНаИзменение И Форма.ПереиздатьСертификат
		ИЛИ НЕ ЭтоЗаявленияНаИзменение);
	
	Если Проверить Тогда
		
		Если Форма.ВключаемыйСертификат = Неопределено Тогда
		
			МастерДалее = Ложь;
			ТекстОшибки = НСтр("ru = 'Выберите сертификат, либо переключитесь в режим получения нового сертификата'");
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки,,,"УказательВключаемыйСертификат"); 
			
		ИначеЕсли Форма.ВключаемыйСертификатОблачный И НЕ Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		
			МастерДалее = Ложь;
			ТекстОшибки = НСтр("ru = 'Выбран сертификат из программы, но эта электронная подпись недоступна. Выберите локальный сертификат, либо переключитесь в режим получения нового сертификата'");
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки,,,"УказательВключаемыйСертификат");

		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьУЦПоУмолчанию(Форма) Экспорт
	
	Если ЭтоРуководитель(Форма) И НЕ ИспользоватьСуществующий(Форма) Тогда
		Если ЭтоОблако(Форма) Тогда
			Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр");
		ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(Форма.МестоХраненияКлюча) Тогда
			Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр");
		Иначе
			Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС");
		КонецЕсли;
	Иначе
		Форма.УЦ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановленViPNet(Форма) Экспорт
	
	ЭтоРежимТестирования = ДокументооборотСКОКлиентСервер.ИспользуетсяРежимТестирования();
	
	УстановленViPNet =
		НЕ ЭтоОблако(Форма)
		И Форма.ViPNetCSPУстановлен 
		И НЕ Форма.CryptoProCSPУстановлен 
		И НЕ ЭтоРежимТестирования;
		
	Возврат УстановленViPNet;
		
КонецФункции

Функция ЭтоПолучениеСертификатВКА(Форма) Экспорт

	 ПолучениеВКА =
		НЕ ЭтоРуководитель(Форма) // Получат сертификат в ФНС
		И НЕ Форма.ЭтоБюджетополучатель // Получат сертификат в ФК
		И НЕ ИспользоватьСуществующий(Форма);
		
	Возврат ПолучениеВКА;
		
КонецФункции

Процедура ИзменитьОформлениеУЦ(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Ошибка
	РезультатПроверки = ПроверитьУЦ(Форма,, Ложь);
	Элементы.ПроверкаУЦ.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
	
	// Подсказка
	Элемент = Элементы.ГруппаЗначенияУЦ;
	ОтобразитьПодсказку = 
		Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ 
		И НЕ ИспользоватьСуществующий(Форма);
		
	Если ОтобразитьПодсказку Тогда
		ТекстПодсказки = ПодсказкаПриБесшовномПолученииСертификатаВДУЦ(Форма);
		Элемент.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	// Видимость
	Элементы.ГруппаУЦ.Видимость = НужноВыбратьУЦ(Форма);
	Элементы.УЦ.Доступность = НЕ Форма.ЗапретитьИзменение;
	
КонецПроцедуры

Функция НужноВыбратьУЦ(Форма)

	Возврат ЭтоРуководитель(Форма)
		И ЭтоСменаСертификата(Форма)
		И НЕ ИспользоватьСуществующий(Форма)
		И НЕ Форма.ЭтоИнтеграцияСБанком;

КонецФункции

Функция ПриViPNetВыбралиУЦФНС(Форма) Экспорт
	
	ЭтоФНС = Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС");
	ЭтоРежимТестирования = ДокументооборотСКОКлиентСервер.ИспользуетсяРежимТестирования();
	
	ВыбралиУЦФНС = ЭтоФНС И УстановленViPNet(Форма);

	Возврат ВыбралиУЦФНС;
	
КонецФункции

Функция ПроверитьУЦ(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Реквизит  = "ПроверкаУЦ";
	РезультатПроверки.Поле 		= "УЦ";
	
	Если НужноВыбратьУЦ(Форма) Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.УЦ) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Выберите место, где будете получать сертификат'");
			РезультатПроверки.Пустой	  = Истина;
		КонецЕсли;
		
		НадоСменитьКриптопровайдер = ПриViPNetВыбралиУЦФНС(Форма);
			
		Если НадоСменитьКриптопровайдер Тогда
			
			ТекстОшибки = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Недоступно при использовании ViPNet CSP. '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее...'"),,,,"Подробнее"));
				
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
		ЭтоФНС = Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС");
		
		Если ЭтоФНС И НЕ Форма.CryptoProCSPУстановлен И ВыводитьСообщения Тогда
			
			ТекстОшибки = Новый ФорматированнаяСтрока(
			    НСтр("ru = 'Для получения сертификата эл. подписи в ФНС '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'установите'"),,,,"e1cib/command/ОбщаяКоманда.УстановитьКриптоПроДляФНС"),
				НСтр("ru = ' КриптоПро CSP.'"));
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
		Если ЭтоФНС И Форма.CryptoProCSPУстановлен И Форма.ЛицензииКриптоПроИстекла Тогда
			
			ТекстОшибки = Новый ФорматированнаяСтрока(
			    НСтр("ru = 'Лицензия на КриптоПро CSP истекла. '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'Приобретите'"),,,,"https://1c-report.ru/vse-dlya-podpisi"),
				НСтр("ru = ' лицензию на КриптоПро CSP'"));
				
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
		
КонецФункции

// Формирует контекст места хранения ключа по переданным параметрам.
// 
Функция ОпределитьМестоХраненияКлюча(ВыбранноеМестоХраненияКлюча, УчетнаяЗаписьОблачнойПодписи) Экспорт
	
	Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
	
	Если ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoProHSM") Тогда
		Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина);
	ИначеЕсли ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoProDSS")
		ИЛИ ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись") Тогда
		Результат = КриптографияЭДКОКлиентСервер.ОпределитьМестоХраненияКлюча(ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись"), УчетнаяЗаписьОблачнойПодписи);
	ИначеЕсли ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса") Тогда
		Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина);
	ИначеЕсли ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ПустаяСсылка") Тогда
		Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
	КонецЕсли;
				
	Возврат Результат;
	
КонецФункции

// Описывает допустимые типы значения для указанного вида значения параметра облачной подписи
//
// Параметры:
//	ВидПараметра - ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи, Строка
//
// Возвращаемое значение:
//	Тип, Строка
//
Функция ТипПараметраОблачнойПодписи(ВидПараметра)
	
	СсылкаПараметра = ПолучитьВидПараметраОблачнойПодписи(ВидПараметра);
	
	Если СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ИдентификаторСервера")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.Логин")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.Телефон")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ЭлектроннаяПочта") Тогда
		Результат = Тип("Строка");
		
	ИначеЕсли СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ПовторнаяОтправкаКлючаМобильногоПриложения")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ПовторнаяОтправкаКодаАвторизации")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.СменитьКлючМобильногоПриложения")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.СменитьКлючМобильногоПриложенияАвтоматически")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.СменитьПароль")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.СоздатьНовуюУчетнуюЗапись") Тогда
		Результат = Тип("Булево");
		
	ИначеЕсли СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.УчетнаяЗапись") Тогда
		Результат = "Ссылка";
		
	Иначе
		Результат = Тип("Строка");
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Проверяет и формирует ссылку на перечесление
//
// Параметры:
//	ВидПараметра - ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи, Строка
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи
//
Функция ПолучитьВидПараметраОблачнойПодписи(ВидПараметра)
	
	Если ТипЗнч(ВидПараметра) = Тип("ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи") Тогда
		Результат = ВидПараметра;
	ИначеЕсли ТипЗнч(ВидПараметра) = Тип("Строка") И СтрНайти(ВидПараметра, ".") > 0 Тогда
		Результат = ПредопределенноеЗначение(ВидПараметра);
	ИначеЕсли ТипЗнч(ВидПараметра) = Тип("Строка") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи." + ВидПараметра);
	Иначе
		Результат = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ПустаяСсылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти