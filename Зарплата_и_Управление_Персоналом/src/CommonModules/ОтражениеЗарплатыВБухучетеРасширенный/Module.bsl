////////////////////////////////////////////////////////////////////////////////
// Отражение зарплаты в бухгалтерском учете.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру с настройкой бухучета сотрудника на указанную дату.
//
// Параметры:
//  Сотрудник - Тип СправочникСсылка.Сотрудник
//  ДатаАктуальности - Тип Дата, дата на которую получаем способ отражения.
//
// Возвращаемое значение: Структура, ключи СпособОтраженияЗарплатыВБухучете, ОтношениеКЕНВД, Период
//		СпособОтраженияЗарплатыВБухучете, тип Справочник.СпособыОтраженияЗарплатыВБухУчете
//		ОтношениеКЕНВД, тип Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.
//		Период, дата на которую установлено значение.
//
Функция НастройкаБухучетаЗарплатыСотрудника(Сотрудник, ДатаАктуальности) Экспорт
	
	БухучетСотрудника = Новый Структура("СтатьяФинансирования, СтатьяРасходов, СпособОтраженияЗарплатыВБухучете, ОтношениеКЕНВД, Период");
	БухучетСотрудника.СтатьяФинансирования = Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка();
	БухучетСотрудника.СтатьяРасходов = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	БухучетСотрудника.СпособОтраженияЗарплатыВБухучете = Справочники.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка();
	БухучетСотрудника.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка();
	БухучетСотрудника.Период = Дата(1,1,1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ДатаАктуальности);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетЗарплатыСотрудников.Период,
	|	ВЫБОР
	|		КОГДА БухучетЗарплатыСотрудников.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетЗарплатыСотрудников.ДействуетДо <= &ДатаСреза
	|			ТОГДА БухучетЗарплатыСотрудников.СтатьяФинансированияПоОкончании
	|		ИНАЧЕ БухучетЗарплатыСотрудников.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА БухучетЗарплатыСотрудников.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетЗарплатыСотрудников.ДействуетДо <= &ДатаСреза
	|			ТОГДА БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучетеПоОкончании
	|		ИНАЧЕ БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА БухучетЗарплатыСотрудников.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетЗарплатыСотрудников.ДействуетДо <= &ДатаСреза
	|			ТОГДА БухучетЗарплатыСотрудников.ОтношениеКЕНВДПоОкончании
	|		ИНАЧЕ БухучетЗарплатыСотрудников.ОтношениеКЕНВД
	|	КОНЕЦ КАК ОтношениеКЕНВД
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыСотрудников.СрезПоследних(&ДатаСреза, Сотрудник = &Сотрудник) КАК БухучетЗарплатыСотрудников";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(БухучетСотрудника, Выборка);
	КонецЕсли;
	
	Возврат БухучетСотрудника;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf2d-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.БухучетНачисленийСотрудников);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbeee-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПереносЗатратНаПерсоналМеждуСтатьями);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfa7-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РаспределениеОсновногоЗаработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаНачисленийУдержанийПередЗаписью

Процедура УдержаниеПередЗаписью(ВидРасчетаОбъект) Экспорт
	
	УстановитьОчередностьОтраженияВУчете(ВидРасчетаОбъект);
	
	// Уточнение стратегии отражения в бухучете.
	СтратегияОтраженияВУчетеПоБазе = ВидРасчетаОбъект.КатегорияУдержания = Перечисления.КатегорииУдержаний.ИсполнительныйЛист
		Или ВидРасчетаОбъект.КатегорияУдержания = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента
		Или РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ВидРасчетаОбъект.Показатели, "РасчетнаяБаза");
		
	Если СтратегияОтраженияВУчетеПоБазе И ВидРасчетаОбъект.СтратегияОтраженияВУчете <> Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам Тогда
		ВидРасчетаОбъект.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам;
	ИначеЕсли Не СтратегияОтраженияВУчетеПоБазе И ВидРасчетаОбъект.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам Тогда
		ВидРасчетаОбъект.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоФактическимНачислениям;
	КонецЕсли;
	
	ВидРасчетаОбъект.ДоступнаСтратегияОтраженияКакЗаданоВидуРасчета = Не СтратегияОтраженияВУчетеПоБазе;
	
	// Уточнение значения свойства ЯвляетсяОснованиемОформленияКассовогоЧека.
	Если ВидРасчетаОбъект.ЯвляетсяОснованиемОформленияКассовогоЧека Тогда
		МожетЯвляетсяОснованием = ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.УдержаниеМожетЯвляетсяОснованиемОформленияКассовогоЧека(ВидРасчетаОбъект.КатегорияУдержания, ВидРасчетаОбъект.ВидОперацииПоЗарплате);
		Если Не МожетЯвляетсяОснованием Тогда
			ВидРасчетаОбъект.ЯвляетсяОснованиемОформленияКассовогоЧека = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет реквизит ОчередностьОтраженияВУчете для начислений и удержаний.
//
Процедура УстановитьОчередностьОтраженияВУчете(ВидРасчетаОбъект) Экспорт 

	Если ВидРасчетаОбъект.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам Тогда 
		ВидРасчетаОбъект.ОчередностьОтраженияВУчете = ВидРасчетаОбъект.ОчередностьРасчета;
	Иначе 
		ВидРасчетаОбъект.ОчередностьОтраженияВУчете = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьСтратегиюОтраженияВУчетеНачисления(ВидРасчетаОбъект) Экспорт

	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ИспользуетсяЕНВД = ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД");
	
	Если РаботаВБюджетномУчреждении И ВидРасчетаОбъект.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом Тогда
		ВидРасчетаОбъект.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка();
	КонецЕсли;
	
	// Для оплаты дней ухода игнорируем статью расходов при вычислении стратегии отражения в бухучете.
	ЭтоОплатаДнейУходаЗаДетьмиИнвалидами = ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами
						Или ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами;
	
	СтратегияОтраженияВУчете = ВидРасчетаОбъект.СтратегияОтраженияВУчете;
	СтатьяФинансирования = ВидРасчетаОбъект.СтатьяФинансирования;
	СтатьяРасходов = ВидРасчетаОбъект.СтатьяРасходов;
	СпособОтраженияЗарплатыВБухучете = ВидРасчетаОбъект.СпособОтраженияЗарплатыВБухучете;
	ОтношениеКЕНВД = ВидРасчетаОбъект.ОтношениеКЕНВД;
	
	СтатьяФинансированияЗаполнена = ИспользоватьСтатьиФинансирования И Не СтатьяФинансирования.Пустая();
	СтатьяРасходовЗаполнена = РаботаВБюджетномУчреждении И Не ЭтоОплатаДнейУходаЗаДетьмиИнвалидами И Не СтатьяРасходов.Пустая();
	СпособОтраженияЗаполнен = Не СпособОтраженияЗарплатыВБухучете.Пустая();
	ОтношениеКЕНВДЗаполнено = ИспользуетсяЕНВД И Не ОтношениеКЕНВД.Пустая();
	НастройкаЗаполнена = СпособОтраженияЗаполнен Или ОтношениеКЕНВДЗаполнено Или СтатьяФинансированияЗаполнена Или СтатьяРасходовЗаполнена;
	
	ЭтоПособиеЗаСчетФСС 	= УчетПособийСоциальногоСтрахованияРасширенный.НачислениеЯвляетсяПособиемЗаСчетФСС(ВидРасчетаОбъект);
	НачислениеБезОплаты 	= ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.КатегорияНачисленийБезОплаты(ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени);
	ОплатаПоСреднему    	= ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.НачислениеОплатаПоСреднемуОбщий(ВидРасчетаОбъект);
	ОплатаПоСохраняемомуДС 	= ВидРасчетаОбъект.Рассчитывается И ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.КатегорияНачисленийПоСохраняемомуДС(ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени);
	
	Если СтратегияОтраженияВУчете.Пустая() Тогда
		// Начальное заполнение стратегии.
		Если ЭтоПособиеЗаСчетФСС Тогда
			СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		ИначеЕсли НачислениеБезОплаты Тогда
			СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		ИначеЕсли НастройкаЗаполнена Тогда
			СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета;
		Иначе
			СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		КонецЕсли;
	ИначеЕсли Не НастройкаЗаполнена И СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета Тогда
		СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
	ИначеЕсли НастройкаЗаполнена Тогда
		СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета;
	ИначеЕсли СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазеСреднегоЗаработка Тогда
		
		Если НЕ ЭтоПособиеЗаСчетФСС И Не ОплатаПоСреднему
				И НЕ ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя Тогда
			СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		КонецЕсли;	
		
	ИначеЕсли СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам Тогда	
		
		Если Не ОплатаПоСохраняемомуДС И ЭтоПособиеЗаСчетФСС Или ОплатаПоСреднему
				Или ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя Тогда
			СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		Иначе
			
			БазаДоступна = ОплатаПоСохраняемомуДС Или ВидРасчетаОбъект.ТребуетсяРасчетБазы
			И ВидРасчетаОбъект.СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка
			И ВидРасчетаОбъект.СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС
			И ВидРасчетаОбъект.СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни
			И ВидРасчетаОбъект.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
			
			Если Не БазаДоступна Тогда
				СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкаЗаполнена И СтратегияОтраженияВУчете <> Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета Тогда
		ВидРасчетаОбъект.СтатьяФинансирования 				= Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка();
		ВидРасчетаОбъект.СтатьяРасходов 					= Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
		ВидРасчетаОбъект.СпособОтраженияЗарплатыВБухучете 	= Справочники.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка();
		ВидРасчетаОбъект.ОтношениеКЕНВД 					= Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка();
	КонецЕсли;
	
	ВидРасчетаОбъект.СтратегияОтраженияВУчете = СтратегияОтраженияВУчете;
	
КонецПроцедуры

Процедура УточнитьВидОперацииПоЗарплатеНачисления(ВидРасчетаОбъект) Экспорт
	
	Если ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска
		Или ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска Тогда
		
		ОтпускЯвляетсяЕжегодным = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРасчетаОбъект.ВидОтпуска,"ОтпускЯвляетсяЕжегодным");
		Если ОтпускЯвляетсяЕжегодным <> Неопределено И ОтпускЯвляетсяЕжегодным И ВидРасчетаОбъект.ВидОперацииПоЗарплате <> Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск Тогда
			ВидРасчетаОбъект.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск;
		КонецЕсли;
	ИначеЕсли ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска
		Или ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска Тогда
		
		ОтпускЯвляетсяЕжегодным = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРасчетаОбъект.ВидОтпуска,"ОтпускЯвляетсяЕжегодным");
		Если ОтпускЯвляетсяЕжегодным <> Неопределено И ОтпускЯвляетсяЕжегодным И ВидРасчетаОбъект.ВидОперацииПоЗарплате <> Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска Тогда
			ВидРасчетаОбъект.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеКоллекцийПоБазеПоУмолчанию

// Заполняет в переданной таблице БазаПоУмолчанию поля бухучета, 
// по каждому сотруднику в таблице только одна строка.
//
// Параметры:
// 	БазаПоУмолчанию - ТаблицаЗначений - содержит колонки
// 			* Сотрудник
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 			* СтатьяФинансирования
// 			* СтатьяРасходов
// Организация - СправочникСсылка.Организации
// Период - Дата.
//
Процедура ДополнитьБазуУдержанийПоУмолчаниюСтатьями(БазаПоУмолчанию, Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	// Настройки бухучета получаем по состоянию на конец месяца.
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.УстановитьПараметр("БазаПоУмолчанию", БазаПоУмолчанию);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	БазаПоУмолчанию.Сотрудник КАК Сотрудник,
	|	БазаПоУмолчанию.Подразделение КАК Подразделение,
	|	БазаПоУмолчанию.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&БазаПоУмолчанию КАК БазаПоУмолчанию";
	Запрос.Выполнить();
	
	СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяОплатаТруда());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОБухучете.Сотрудник КАК Сотрудник,
	|	СведенияОБухучете.СтатьяФинансирования КАК СтатьяФинансирования,
	|	&СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК СведенияОБухучете
	|		ПО Сотрудники.Сотрудник = СведенияОБухучете.Сотрудник";
	Выборка = Запрос.Выполнить().Выбрать();
	
	БухучетСтрок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		БухучетСтроки = Новый Структура("СтатьяФинансирования,СтатьяРасходов");
		ЗаполнитьЗначенияСвойств(БухучетСтроки, Выборка);
		БухучетСтрок.Вставить(Выборка.Сотрудник, БухучетСтроки);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из БазаПоУмолчанию Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, БухучетСтрок[СтрокаТЗ.Сотрудник]);
	КонецЦикла;

КонецПроцедуры

// Заполняет в переданной коллекции строк поля бухучета. 
//
// Параметры:
// 	КоллекцияСтрокВзносов - Массив - содержит ссылки на строки таблицы значений
// 					со структурой см ОтражениеЗарплатыВБухучете.НоваяТаблицыОтражениеВУчетеСтраховыеВзносы
// Организация - СправочникСсылка.Организации
// Период - Дата.
//
Процедура РаспределитьВзносыПоБазеПоУмолчанию(КоллекцияСтрокВзносов, Организация, Период) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	
	// Настройки бухучета получаем по состоянию на конец месяца.
	ПериодВТаблицу = КонецМесяца(Период);
	Для каждого СтрокаТЗ Из КоллекцияСтрокВзносов Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Период = ПериодВТаблицу;
	КонецЦикла;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВТ, Таблица, "ВТСотрудники");
	
	СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(МенеджерВТ, "ВТСотрудники");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяОплатаТруда());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиВзносов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	ВТСотрудники КАК СтрокиВзносов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
	|		ПО СтрокиВзносов.ИдентификаторСтроки = НастройкиБухучета.ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	БухучетСтрок = Новый Соответствие;
	ПоляБухучета = "СпособОтраженияЗарплатыВБухучете";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ПоляБухучета = ПоляБухучета + ",СтатьяФинансирования";
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		ПоляБухучета = ПоляБухучета + ",СтатьяРасходов";
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		БухучетСтроки = Новый Структура(ПоляБухучета);
		ЗаполнитьЗначенияСвойств(БухучетСтроки, Выборка);
		БухучетСтрок.Вставить(Выборка.ИдентификаторСтроки, БухучетСтроки);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из КоллекцияСтрокВзносов Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, БухучетСтрок[СтрокаТЗ.ИдентификаторСтроки]);
	КонецЦикла;	
	
КонецПроцедуры

// Распределяет сведения о доходах по статьям по базе по умолчанию.
//
// Параметры:
// 	СведенияОДоходах - ТаблицаЗначений - должна содержать колонки
// 			* ИдентификаторСтроки
// 			* Организация
// 			* Сотрудник
// 			* Период
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 			* Начисление
// 	РезультатРаспределения - ТаблицаЗначений - в таблицу помещаются результаты распределения.
//
Процедура РаспределитьСведенияОДоходахПоСтатьямиПоБазеПоУмолчанию(СведенияОДоходах, РезультатРаспределения) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	
	Для каждого СтрокаТЗ Из СведенияОДоходах Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВТ, Таблица, "ВТСотрудники");
	
	СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(МенеджерВТ, "ВТСотрудники");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования
	|ИЗ
	|	ВТСотрудники КАК СведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
	|		ПО СведенияОДоходах.ИдентификаторСтроки = НастройкиБухучета.ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	БухучетСтрок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		БухучетСтрок.Вставить(Выборка.ИдентификаторСтроки, Выборка.СтатьяФинансирования);
	КонецЦикла;
	
	РаботаВХозрасчетнойОрганизации = ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации");
	СтатьяОплатаТруда = СтатьяОплатаТруда();
	
	Если РаботаВХозрасчетнойОрганизации Тогда
		НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
		ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из СведенияОДоходах Цикл
		НоваяСтрока = РезультатРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.СтатьяФинансирования = БухучетСтрок[СтрокаТЗ.ИдентификаторСтроки];
		Если Не РаботаВХозрасчетнойОрганизации Тогда
			НоваяСтрока.СтатьяРасходов = СтатьяОплатаТруда;
		Иначе
			
			ВидОперации = НачислениеУдержаниеВидОперации[СтрокаТЗ.Начисление];
			Если ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
				СтатьяРасходов = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды];
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам 
				Или ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов Тогда
				СтатьяРасходов = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
			Иначе
				СтатьяРасходов = СтатьяОплатаТруда;
			КонецЕсли;
			
			НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
			
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

// Возвращает настройки бухучета сотрудника для распределения по умолчанию.
//
// Параметры:
// 	Сотрудник - СправочникСсылка.Сотрудники.
// 	ДатаАктуальности - Дата - дата на которую получаются настройки.
//
// Возвращаемое значение:
// 	Структура - свойства структуры
// 			*СтатьяФинансирования
// 			*СтатьяРасходов
// 			*СпособОтраженияЗарплатыВБухучете
// 			*ОтношениеКЕНВД
// 			*ОблагаетсяЕНВД
//
Функция БухучетСотрудникаПоУмолчанию(Сотрудник, ДатаАктуальности) Экспорт
	
	БухучетПоУмолчанию = Новый Структура("СтатьяФинансирования,СпособОтраженияЗарплатыВБухучете,СтатьяРасходов,ОтношениеКЕНВД,ОблагаетсяЕНВД");
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "Организация,Подразделение,ТерриторияВыполненияРаботВОрганизации", ДатаАктуальности);
	КадровыеДанные = КадровыеДанные.Скопировать(,"Сотрудник,Период,Организация,Подразделение,ТерриторияВыполненияРаботВОрганизации");
	КадровыеДанные.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ИмяИсходнойВТ = "ВТСотрудники";
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВТ, КадровыеДанные, ИмяИсходнойВТ);
	
	СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(МенеджерВТ, ИмяИсходнойВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ВЫБОР
	|		КОГДА НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД
	|ИЗ
	|	ВТНастройкиБухучета КАК НастройкиБухучета";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПоляБухучета = "СпособОтраженияЗарплатыВБухучете,ОтношениеКЕНВД,ОблагаетсяЕНВД";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ПоляБухучета = ПоляБухучета + ",СтатьяФинансирования";
	КонецЕсли;

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(БухучетПоУмолчанию, Выборка, ПоляБухучета);
		Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
			БухучетПоУмолчанию.СтатьяРасходов = СтатьяОплатаТруда();
		КонецЕсли;
	КонецЕсли;
	
	Возврат БухучетПоУмолчанию;

КонецФункции

// Возвращает настройки бухучета организации.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации.
// 	ДатаАктуальности - Дата - дата на которую получаются настройки.
//
// Возвращаемое значение:
// 	Структура - свойства структуры
// 			*СтатьяФинансирования
// 			*СтатьяРасходов
// 			*СпособОтраженияЗарплатыВБухучете
// 			*ОтношениеКЕНВД
// 			*ОблагаетсяЕНВД
//
Функция БухучетОрганизации(Организация, ДатаАктуальности) Экспорт

	БухучетПоУмолчанию = Новый Структура("СтатьяФинансирования,СпособОтраженияЗарплатыВБухучете,СтатьяРасходов,ОтношениеКЕНВД,ОблагаетсяЕНВД");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ВЫБОР
	|		КОГДА НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних(&ДатаАктуальности, Организация = &Организация) КАК НастройкиБухучета";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПоляБухучета = "СпособОтраженияЗарплатыВБухучете,ОтношениеКЕНВД,ОблагаетсяЕНВД";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ПоляБухучета = ПоляБухучета + ",СтатьяФинансирования";
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(БухучетПоУмолчанию, Выборка, ПоляБухучета);
	КонецЕсли;
	
	Возврат БухучетПоУмолчанию;

КонецФункции

// Распределяет по статьям финансирования начисления ПризПодарок.
// Результат помещается во временную таблицу: ВТРаспределениеПризПодарокПоСтатьям.
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу ВТНачисленияДляРаспределения.
// 	НастройкиИзДокумента - ТаблицаЗначений - см НоваяТаблицаБухучетЗарплатыПервичныхДокументов,
// 								содержит одну строку с настройками бухучета, указанными в документе.
// 	Организация - СправочникСсылка.Организации.
// 	Период - Дата.
//
Процедура СоздатьВТРаспределениеПризПодарокПоСтатьям(МенеджерВТ, НастройкиИзДокумента, Организация, Период) Экспорт
	
	УдалитьВТ = Новый Массив;
	
	ПрименяетсяЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, Период);
	
	СтатьяФинансирования 			 = НастройкиИзДокумента[0].СтатьяФинансирования;
	СпособОтраженияЗарплатыВБухучете = НастройкиИзДокумента[0].СпособОтраженияЗарплатыВБухучете;
	ТребуетсяБухучетПоУмолчанию =  Не ЗначениеЗаполнено(СтатьяФинансирования) Или Не ЗначениеЗаполнено(СпособОтраженияЗарплатыВБухучете);
	
	ОблагаетсяЕНВД = Ложь;
	Если ПрименяетсяЕНВД Тогда
		ОтношениеКЕНВД = НастройкиИзДокумента[0].ОтношениеКЕНВД;
		ОблагаетсяЕНВД = (ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД);
	КонецЕсли;
	
	СтатьяРасходов = НастройкиИзДокумента[0].СтатьяРасходов;
	Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда
		СтатьяРасходов = СтатьяОплатаТруда();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("СтатьяФинансирования", СтатьяФинансирования);
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	Запрос.УстановитьПараметр("СпособОтраженияЗарплатыВБухучете", СпособОтраженияЗарплатыВБухучете);
	Запрос.УстановитьПараметр("ОблагаетсяЕНВД", ОблагаетсяЕНВД);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	&Период КАК Период,
	|	Таблица.Сумма КАК Сумма,
	|	&СтатьяФинансирования КАК СтатьяФинансирования,
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	&СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	&ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
	|ПОМЕСТИТЬ ВТРаспределениеПризПодарокПоСтатьям
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Таблица";
	
	Если Не ТребуетсяБухучетПоУмолчанию Тогда
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРаспределениеПризПодарокПоСтатьям", "ВТСотрудникиПризПодарок");
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиПризПодарок");
	
	СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(МенеджерВТ, "ВТСотрудникиПризПодарок");
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Начисления.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|			ТОГДА НастройкиБухучета.СтатьяФинансирования
	|		ИНАЧЕ Начисления.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА Начисления.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|			ТОГДА НастройкиБухучета.СпособОтраженияЗарплатыВБухучете
	|		ИНАЧЕ Начисления.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
	|ПОМЕСТИТЬ ВТРаспределениеПризПодарокПоСтатьям
	|ИЗ
	|	ВТСотрудникиПризПодарок КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
	|		ПО Начисления.Сотрудник = НастройкиБухучета.Сотрудник
	|			И Начисления.Подразделение = НастройкиБухучета.Подразделение
	|			И Начисления.ТерриторияВыполненияРаботВОрганизации = НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации";
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвижений

Процедура СформироватьДвиженияБухучетНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания, РезультатыРасчетаНДФЛ, ЗаписыватьДвижения = Ложь) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Возврат;
	КонецЕсли;
	
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	Если Начисления <> НеОпределено Тогда
		
		ВидыДоходаИсполнительногоПроизводства = УчетНачисленнойЗарплаты.ВидыДоходовИсполнительногоПроизводстваНачислений();
		
		Для Каждого Строка Из Начисления Цикл
			
			НоваяСтрока = Движения.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ВидОперации			= НачислениеУдержаниеВидОперации[НоваяСтрока.НачислениеУдержание];
			Если Не ЗначениеЗаполнено(НоваяСтрока.ТерриторияВыполненияРаботВОрганизации) Тогда
				НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = НоваяСтрока.Подразделение;
			КонецЕсли;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			НоваяСтрока.ВидДоходаИсполнительногоПроизводства = ВидыДоходаИсполнительногоПроизводства[Строка.Начисление];
			
		КонецЦикла;
		
		Движения.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если Удержания <> НеОпределено Тогда
		
		Для Каждого Строка Из Удержания Цикл
			
			НоваяСтрока = Движения.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			ВидОперации = НачислениеУдержаниеВидОперации[НоваяСтрока.НачислениеУдержание];
			Если ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты Тогда
				ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты;
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента Тогда
				ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты;
			КонецЕсли;
			
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ВидОперации			= ВидОперации;
			
			Если Строка.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
					Или Строка.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
			Иначе
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			КонецЕсли
			
		КонецЦикла;
		
		Движения.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;

	Если РезультатыРасчетаНДФЛ <> НеОпределено Тогда
		
		Для Каждого Строка Из РезультатыРасчетаНДФЛ Цикл
			
			НоваяСтрока = Движения.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ВидОперации			= НачислениеУдержаниеВидОперации[НоваяСтрока.НачислениеУдержание];
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации 	= Строка.Подразделение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты 		= Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			НоваяСтрока.НачислениеУдержание 					= Строка.ВидУдержания;
			
		КонецЦикла;
		
		Движения.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Записать();
		Движения.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в коллекцию движений запись о бухучете планового начисления.
// 
// Параметры:
//			Движения,
//			БухучетПлановыхНачислений - Коллекция записей c полями,
//				Обязательные:
//				- Период
//				- Сотрудник
//				- Организация
//				- Начисление
//				- Используется - булево
//				Необязательные:
//				- СпособОтраженияЗарплатыВБухучете - если не заполнено, то подбирается автоматически.
//				- СтатьяФинансирования - если не заполнено, то подбирается автоматически.
//				- СтатьяЗатрат - если не заполнено, то подбирается автоматически.
//				- ОтношениеКЕНВД - если не заполнено, то подбирается автоматически
//				- ДействуетДо.
//
Процедура СформироватьДвиженияБухучетПлановыхНачислений(Движения, БухучетПлановыхНачислений) Экспорт
		
	Для каждого ОтражениеНачисления Из БухучетПлановыхНачислений Цикл
		НоваяЗапись = Движения.БухучетПлановыхНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтражениеНачисления);
		Движения.БухучетПлановыхНачислений.Записывать = Истина;
	КонецЦикла;
	
	Если Движения.БухучетПлановыхНачислений.Записывать Тогда
		Движения.БухучетПлановыхНачислений.Записать();
		Движения.БухучетПлановыхНачислений.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запись о бухучете зарплаты по документу основанию.
//
Процедура ЗарегистрироватьБухучетЗарплатыПервичныхДокументов(БухучетЗарплаты) Экспорт
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыПервичныхДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(БухучетЗарплаты.ДокументОснование);
	
	Для каждого СтрокаТаблицы Из БухучетЗарплаты.ТаблицаБухучетЗарплаты Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Добавляет в коллекцию движений запись о бухучете планового удержания.
// 
// Параметры:
//			Движения,
//			БухучетПлановыхУдержаний - Коллекция записей c полями.
//
Процедура СформироватьДвиженияБухучетПлановыхУдержаний(Движения, БухучетПлановыхУдержаний) Экспорт
		
	Для каждого Строка Из БухучетПлановыхУдержаний Цикл
		НоваяЗапись = Движения.БухучетПлановыхУдержаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
		Движения.БухучетПлановыхУдержаний.Записывать = Истина;
	КонецЦикла;
	
	Если Движения.БухучетПлановыхУдержаний.Записывать Тогда
		Движения.БухучетПлановыхУдержаний.Записать();
		Движения.БухучетПлановыхУдержаний.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные для проведения плановых удержаний для многосотрудникового документа.
//
// Параметры:
//		ДанныеДляПроведения - Структура, описанная в СоздатьДанныеДляРегистрацииПлановыхУдержаний.
//		Документ - Ссылка на документ.
//
Функция ДанныеДляРегистрацииБухучетаПлановыхУдержаний(ДокументСсылка) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.Организация КАК Организация,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.ДатаНачала КАК Период,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.Ссылка.Удержание,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.Ссылка.СтатьяФинансирования,
	|	ДокументУдержания.Ссылка.СтатьяРасходов
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.Период,
	|	МАКСИМУМ(БухучетПлановыхУдержаний.Период) КАК ПериодРегистра
	|ПОМЕСТИТЬ ВТМаксимальныеПериоды
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхУдержаний КАК БухучетПлановыхУдержаний
	|		ПО ДанныеДокумента.ДокументОснование = БухучетПлановыхУдержаний.ДокументОснование
	|			И ДанныеДокумента.ФизическоеЛицо = БухучетПлановыхУдержаний.ФизическоеЛицо
	|			И ДанныеДокумента.Период > БухучетПлановыхУдержаний.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериоды.ФизическоеЛицо,
	|	МаксимальныеПериоды.Период,
	|	ВЫБОР
	|		КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетПлановыхУдержаний.ДействуетДо < МаксимальныеПериоды.Период
	|			ТОГДА БухучетПлановыхУдержаний.СтатьяФинансированияПоОкончании
	|		ИНАЧЕ БухучетПлановыхУдержаний.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|				И БухучетПлановыхУдержаний.ДействуетДо < МаксимальныеПериоды.Период
	|			ТОГДА БухучетПлановыхУдержаний.СтатьяРасходовПоОкончании
	|		ИНАЧЕ БухучетПлановыхУдержаний.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТЗначенияПоОкончании
	|ИЗ
	|	ВТМаксимальныеПериоды КАК МаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхУдержаний КАК БухучетПлановыхУдержаний
	|		ПО МаксимальныеПериоды.ФизическоеЛицо = БухучетПлановыхУдержаний.ФизическоеЛицо
	|			И МаксимальныеПериоды.ДокументОснование = БухучетПлановыхУдержаний.ДокументОснование
	|			И МаксимальныеПериоды.ПериодРегистра = БухучетПлановыхУдержаний.Период
	|ГДЕ
	|	ВЫБОР
	|			КОГДА БухучетПлановыхУдержаний.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И БухучетПлановыхУдержаний.ДействуетДо < МаксимальныеПериоды.Период
	|				ТОГДА БухучетПлановыхУдержаний.ИспользуетсяПоОкончании
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.ДействуетДо,
	|	ДанныеДокумента.Удержание,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.СтатьяФинансирования,
	|	ДанныеДокумента.СтатьяРасходов,
	|	ЗначенияПоОкончании.СтатьяФинансирования КАК СтатьяФинансированияПоОкончании,
	|	ЗначенияПоОкончании.СтатьяРасходов КАК СтатьяРасходовПоОкончании,
	|	ВЫБОР
	|		КОГДА ЗначенияПоОкончании.СтатьяФинансирования ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользуетсяПоОкончании
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоОкончании КАК ЗначенияПоОкончании
	|		ПО ДанныеДокумента.ФизическоеЛицо = ЗначенияПоОкончании.ФизическоеЛицо
	|			И ДанныеДокумента.Период = ЗначенияПоОкончании.Период";
	
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("Удержания") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументУдержания.Ссылка.", "ДокументУдержания.");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаУдержанийДокумента", ИмяДокумента);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаУдержанийДокумента", ИмяДокумента + ".Удержания");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Для плановых начислений, которые прекращаются навсегда в регистре БухучетПлановыхНачислений регистрируется прекращение
// действия настроек бухучета для этого начисления.
//
Процедура ПлановыеНачисленияПриЗаписи(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПлановыеНачисления = НаборЗаписей.Выгрузить();
	ПлановыеНачисления = ПлановыеНачисления.Скопировать(Новый Структура("Используется,ДействуетДо",Ложь,Дата(1,1,1)));
	Если ПлановыеНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПлановыеНачисления", ПлановыеНачисления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Период КАК Период,
	|	ПлановыеНачисления.Регистратор КАК Регистратор,
	|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|	ПлановыеНачисления.Начисление КАК Начисление,
	|	ПлановыеНачисления.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТПлановыеНачисления
	|ИЗ
	|	&ПлановыеНачисления КАК ПлановыеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, ДЕНЬ) КАК Период,
	|	БухучетПлановыхНачислений.Сотрудник КАК Сотрудник,
	|	БухучетПлановыхНачислений.Организация КАК Организация,
	|	БухучетПлановыхНачислений.Начисление КАК Начисление,
	|	БухучетПлановыхНачислений.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(БухучетПлановыхНачислений.Период) КАК ПериодРегистра
	|ПОМЕСТИТЬ ВТДатыПоследнихДвижений
	|ИЗ
	|	ВТПлановыеНачисления КАК ПлановыеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхНачислений КАК БухучетПлановыхНачислений
	|		ПО ПлановыеНачисления.Сотрудник = БухучетПлановыхНачислений.Сотрудник
	|			И ПлановыеНачисления.Начисление = БухучетПлановыхНачислений.Начисление
	|			И ПлановыеНачисления.ДокументОснование = БухучетПлановыхНачислений.ДокументОснование
	|			И (НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, ДЕНЬ) >= БухучетПлановыхНачислений.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисления.Регистратор,
	|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, ДЕНЬ),
	|	БухучетПлановыхНачислений.Сотрудник,
	|	БухучетПлановыхНачислений.Организация,
	|	БухучетПлановыхНачислений.Начисление,
	|	БухучетПлановыхНачислений.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДвижений.Регистратор КАК Регистратор,
	|	ДатыПоследнихДвижений.Период КАК Период,
	|	БухучетПлановыхНачислений.Сотрудник КАК Сотрудник,
	|	БухучетПлановыхНачислений.Организация КАК Организация,
	|	БухучетПлановыхНачислений.Начисление КАК Начисление,
	|	БухучетПлановыхНачислений.ДокументОснование КАК ДокументОснование,
	|	ЛОЖЬ КАК Используется
	|ИЗ
	|	ВТДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхНачислений КАК БухучетПлановыхНачислений
	|		ПО ДатыПоследнихДвижений.ПериодРегистра = БухучетПлановыхНачислений.Период
	|			И (НЕ БухучетПлановыхНачислений.НеИзменятьПриОтменеНачисления)
	|			И ДатыПоследнихДвижений.Период <> БухучетПлановыхНачислений.Период
	|			И ДатыПоследнихДвижений.Сотрудник = БухучетПлановыхНачислений.Сотрудник
	|			И ДатыПоследнихДвижений.Организация = БухучетПлановыхНачислений.Организация
	|			И ДатыПоследнихДвижений.Начисление = БухучетПлановыхНачислений.Начисление
	|			И ДатыПоследнихДвижений.ДокументОснование = БухучетПлановыхНачислений.ДокументОснование
	|			И (БухучетПлановыхНачислений.Используется)
	|			И (БухучетПлановыхНачислений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	
	БухучетПлановыхНачислений = РегистрыСведений.БухучетПлановыхНачислений.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(БухучетПлановыхНачислений.Добавить(), Выборка);
		Регистратор = Выборка.Регистратор;
	КонецЦикла;
	БухучетПлановыхНачислений.Отбор.Регистратор.Установить(Регистратор);
	БухучетПлановыхНачислений.Записать();

КонецПроцедуры

Процедура СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения, СтрокаСписокТаблиц) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(СтрокаСписокТаблиц, "НачисленныйНДФЛ") > 0 Тогда
		
		Если ДанныеДляПроведения.НачисленияУдержания = Неопределено Или ДанныеДляПроведения.НачисленияУдержания.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВидыОсобыхНачисленийИУдержанийНДФЛ = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ();
		НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
		
		Для каждого СтрокаТЗ Из ДанныеДляПроведения.НачисленияУдержания Цикл
		
			Если ВидыОсобыхНачисленийИУдержанийНДФЛ.Найти(СтрокаТЗ.НачислениеУдержание) <> Неопределено Тогда
				 
				Движения.БухучетНачисленияУдержанияПоСотрудникам.Записывать = Истина;
				
				НоваяСтрока = Движения.БухучетНачисленияУдержанияПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[НоваяСтрока.НачислениеУдержание];
				
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли; 

КонецПроцедуры

Процедура ДанныеДляПроведенияСоздатьВТНачисленияСтраховыеВзносы(МенеджерВременныхТаблиц, РеквизитыДляПроведения, ИмяВТНачисленияСтраховыеВзносы) Экспорт

	Организация = РеквизитыДляПроведения.Организация;
	ПериодРегистрации = РеквизитыДляПроведения.МесяцНачисления;
	
	УдалитьВТ = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		ОплатаТруда = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
		РасчетыСКонтрагентами = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	Иначе
		ОплатаТруда = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
		РасчетыСКонтрагентами = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МесяцНачисления", ПериодРегистрации);
	Запрос.УстановитьПараметр("ОплатаТруда", ОплатаТруда);
	Запрос.УстановитьПараметр("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленийПоДоговорам.Договор КАК Договор,
	|	ЕСТЬNULL(ПлановыеНачисленияПоДоговорам.КодДоходаСтраховыеВзносы, ЕСТЬNULL(УсловияДоговораГПХ.КодДоходаСтраховыеВзносы, УсловияДоговораОпеки.КодДоходаСтраховыеВзносы)) КАК КодДоходаСтраховыеВзносы,
	|	ЕСТЬNULL(ПлановыеНачисленияПоДоговорам.ЗаключенСоСтудентомРаботающимВСтудотряде, УсловияДоговораГПХ.ЗаключенСоСтудентомРаботающимВСтудотряде) КАК ЗаключенСоСтудентомРаботающимВСтудотряде,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлановыеНачисленияПоДоговорам.СтатьяРасходов, УсловияДоговораГПХ.СтатьяРасходов) = &РасчетыСКонтрагентами
	|			ТОГДА &РасчетыСКонтрагентами
	|		ИНАЧЕ &ОплатаТруда
	|	КОНЕЦ КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТДанныеДоговоров
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленийПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияПоДоговорам КАК ПлановыеНачисленияПоДоговорам
	|		ПО НачисленийПоДоговорам.Договор = ПлановыеНачисленияПоДоговорам.ДоговорАкт
	|			И (ПлановыеНачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|		ПО НачисленийПоДоговорам.Договор = УсловияДоговораГПХ.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораОпеки КАК УсловияДоговораОпеки
	|		ПО НачисленийПоДоговорам.Договор = УсловияДоговораОпеки.Договор";
	Запрос.Выполнить();
	
	ПрименяетсяЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, ПериодРегистрации);
	Если Не ПрименяетсяЕНВД Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиНачисленийПоДоговорам.Сотрудник,
		|	ЗаписиНачисленийПоДоговорам.Подразделение,
		|	ЗаписиНачисленийПоДоговорам.Начисление,
		|	ЗаписиНачисленийПоДоговорам.Сумма КАК СуммаДохода,
		|	ЗаписиНачисленийПоДоговорам.СкидкаПоВзносам КАК СуммаВычетаВзносы,
		|	ЗаписиНачисленийПоДоговорам.ДатаНачала,
		|	ЛОЖЬ КАК ОблагаетсяЕНВД,
		|	ЕСТЬNULL(ДанныеДоговоров.КодДоходаСтраховыеВзносы, ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ)) КАК КодДоходаСтраховыеВзносы,
		|	ЕСТЬNULL(ДанныеДоговоров.ЗаключенСоСтудентомРаботающимВСтудотряде, ЛОЖЬ) КАК ЗаключенСоСтудентомРаботающимВСтудотряде
		|ПОМЕСТИТЬ ВТНачисленияСтраховыеВзносы
		|ИЗ
		|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачисленийПоДоговорам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДоговоров КАК ДанныеДоговоров
		|		ПО ЗаписиНачисленийПоДоговорам.Договор = ДанныеДоговоров.Договор";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияСтраховыеВзносы", ИмяВТНачисленияСтраховыеВзносы);
		Запрос.Выполнить();
		
	Иначе
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
			
			// Сведения о бухучете договоров есть во временной таблице ВТНачисленияПоДоговорамСРаспределением.
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияПоДоговорамСРаспределением.Договор,
			|	НачисленияПоДоговорамСРаспределением.ОблагаетсяЕНВД,
			|	СУММА(НачисленияПоДоговорамСРаспределением.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ВТНачисленияСЕНВД
			|ИЗ
			|	ВТНачисленияПоДоговорамСРаспределением КАК НачисленияПоДоговорамСРаспределением
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияПоДоговорамСРаспределением.Договор,
			|	НачисленияПоДоговорамСРаспределением.ОблагаетсяЕНВД";
			Запрос.Выполнить();
			УдалитьВТ.Добавить("ВТНачисленияСЕНВД");
			
		Иначе
			
			ОтражениеЗарплатыВУчете.СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВременныхТаблиц);
			// Поле ТерриторияВыполненияРаботВОрганизации имеет пустое значение, для вычисления доли ЕНВД это допустимо.
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаписиНачисленийПоДоговорам.Организация КАК Организация,
			|	ЗаписиНачисленийПоДоговорам.ПериодРегистрации КАК ПериодРегистрации,
			|	ЗаписиНачисленийПоДоговорам.ДокументСсылка КАК ДокументСсылка,
			|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки,
			|	ЗаписиНачисленийПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ЗаписиНачисленийПоДоговорам.Сотрудник КАК Сотрудник,
			|	ЗаписиНачисленийПоДоговорам.Подразделение КАК Подразделение,
			|	ЗаписиНачисленийПоДоговорам.Начисление КАК Начисление,
			|	ЗаписиНачисленийПоДоговорам.Сумма КАК Сумма,
			|	ЗаписиНачисленийПоДоговорам.СкидкаПоВзносам КАК СкидкаПоВзносам,
			|	ЗаписиНачисленийПоДоговорам.КодДохода КАК КодДохода,
			|	ЗаписиНачисленийПоДоговорам.КодВычета КАК КодВычета,
			|	ЗаписиНачисленийПоДоговорам.Договор КАК Договор,
			|	ЗаписиНачисленийПоДоговорам.ДокументОснование КАК ДокументОснование,
			|	ЗаписиНачисленийПоДоговорам.ДатаНачала КАК ДатаНачала,
			|	ЗаписиНачисленийПоДоговорам.ДатаОкончания КАК ДатаОкончания,
			|	ЗаписиНачисленийПоДоговорам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
			|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЕСТЬNULL(НачисленияВидОперации.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)) КАК ВидОперации
			|ПОМЕСТИТЬ ВТНачисленияПоДоговорамГПХ
			|ИЗ
			|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачисленийПоДоговорам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК НачисленияВидОперации
			|		ПО ЗаписиНачисленийПоДоговорам.Начисление = НачисленияВидОперации.НачислениеУдержание";
			Запрос.Выполнить();
			УдалитьВТ.Добавить("ВТНачисленияПоДоговорамГПХ");
			
			ИсходныеДанные = ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете();
			ИсходныеДанные.МенеджерВременныхТаблиц 		= МенеджерВременныхТаблиц;
			ИсходныеДанные.ИмяВТНачисления		 		= "ВТНачисленияПоДоговорамГПХ";
			ИсходныеДанные.МесяцНачисления 				= ПериодРегистрации;
			ИсходныеДанные.Организация 					= Организация;
			ПолучитьБухучетНачисленийПоДоговорамСоздатьВТ(ИсходныеДанные, "ВТБухучетНачисленийПоДоговорам");
			УдалитьВТ.Добавить("ВТБухучетНачисленийПоДоговорам");
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияПоДоговорамСРаспределением.ДокументОснование КАК Договор,
			|	НачисленияПоДоговорамСРаспределением.ОблагаетсяЕНВД,
			|	СУММА(НачисленияПоДоговорамСРаспределением.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ВТНачисленияСЕНВД
			|ИЗ
			|	ВТБухучетНачисленийПоДоговорам КАК НачисленияПоДоговорамСРаспределением
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияПоДоговорамСРаспределением.ДокументОснование,
			|	НачисленияПоДоговорамСРаспределением.ОблагаетсяЕНВД";
			Запрос.Выполнить();
			УдалитьВТ.Добавить("ВТНачисленияСЕНВД");
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиНачислений.Сотрудник,
		|	ЗаписиНачислений.Подразделение,
		|	ЗаписиНачислений.Начисление,
		|	ЗаписиНачислений.ДатаНачала,
		|	ЕСТЬNULL(НачисленияСЕНВД.ОблагаетсяЕНВД, ЛОЖЬ) КАК ОблагаетсяЕНВД,
		|	ЕСТЬNULL(НачисленияСЕНВД.Сумма, 0) КАК СуммаДохода,
		|	ВЫБОР
		|		КОГДА НачисленияСЕНВД.ОблагаетсяЕНВД ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА ЗаписиНачислений.Сумма = 0
		|			ТОГДА 0
		|		КОГДА ЗаписиНачислений.Сумма = НачисленияСЕНВД.Сумма
		|			ТОГДА ЗаписиНачислений.СкидкаПоВзносам
		|		КОГДА НачисленияСЕНВД.ОблагаетсяЕНВД
		|			ТОГДА ВЫРАЗИТЬ(ЗаписиНачислений.СкидкаПоВзносам * (ВЫРАЗИТЬ(НачисленияСЕНВД.Сумма / ЗаписиНачислений.Сумма КАК ЧИСЛО(25, 10))) КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаписиНачислений.СкидкаПоВзносам - (ВЫРАЗИТЬ(ЗаписиНачислений.СкидкаПоВзносам * (ВЫРАЗИТЬ((ЗаписиНачислений.Сумма - НачисленияСЕНВД.Сумма) / ЗаписиНачислений.Сумма КАК ЧИСЛО(25, 10))) КАК ЧИСЛО(15, 2)))
		|	КОНЕЦ КАК СуммаВычетаВзносы,
		|	ЕСТЬNULL(ДанныеДоговоров.КодДоходаСтраховыеВзносы, ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ)) КАК КодДоходаСтраховыеВзносы,
		|	ЕСТЬNULL(ДанныеДоговоров.ЗаключенСоСтудентомРаботающимВСтудотряде, ЛОЖЬ) КАК ЗаключенСоСтудентомРаботающимВСтудотряде
		|ПОМЕСТИТЬ ВТНачисленияСтраховыеВзносы
		|ИЗ
		|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСЕНВД КАК НачисленияСЕНВД
		|		ПО ЗаписиНачислений.Договор = НачисленияСЕНВД.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДоговоров КАК ДанныеДоговоров
		|		ПО ЗаписиНачислений.Договор = ДанныеДоговоров.Договор";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияСтраховыеВзносы", ИмяВТНачисленияСтраховыеВзносы);
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура СформироватьДвиженияКоэффициентыРаспределенияСреднегоЗаработка(Движения, КоэффициентыРаспределенияСреднегоЗаработка) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Возврат;
	КонецЕсли;
	
	Если КоэффициентыРаспределенияСреднегоЗаработка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из КоэффициентыРаспределенияСреднегоЗаработка Цикл
		НоваяЗапись = Движения.КоэффициентыРаспределенияСреднегоЗаработка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЗ);
		Движения.КоэффициентыРаспределенияСреднегоЗаработка.Записывать = Истина;
	КонецЦикла;

КонецПроцедуры

// Добавляет запись о бухучете зарплаты по документу основанию.
//
Процедура ОбновитьСведенияОБухучетеЗарплатыСотрудников(ДокументОбъект, НеРегистрироватьБухучет, ИмяТаблицы, ИмяПоляПериод, ИмяПоляДействуетДо, НетПоляЕНВД = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.Ссылка);
		
	Если НеРегистрироватьБухучет Или Не ДокументОбъект.Проведен Тогда
		
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
			// "Включение" записей исправленного документа.
			НаборИсправленныхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудниковИсправления.СоздатьНаборЗаписей();
			НаборИсправленныхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборИсправленныхЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.ИсправленныйДокумент);
			НаборИсправленныхЗаписей.Прочитать();
			Если НаборИсправленныхЗаписей.Количество()>0 Тогда
				НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.ИсправленныйДокумент);
				Для каждого ЗаписьНабора Из НаборИсправленныхЗаписей Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора);
					НоваяЗапись.Период = ЗаписьНабора.ПериодИзмерение;
				КонецЦикла;
				НаборЗаписей.Записать();
				НаборИсправленныхЗаписей.Очистить();
				НаборИсправленныхЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("ЕстьЕНВД", ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВДВБюджетномУчреждении"));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.ДатаНачала КАК Период,
		|	Таблица.ДатаОкончания КАК ДействуетДо,
		|	Таблица.Сотрудник КАК Сотрудник,
		|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Таблица.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
		|	&Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТНастройкиБухучета
		|ИЗ
		|	#Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеПериоды.Сотрудник КАК Сотрудник,
		|	МаксимальныеПериоды.Период КАК Период,
		|	ВЫБОР
		|		КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И БухучетЗарплаты.ДействуетДо <= МаксимальныеПериоды.Период
		|			ТОГДА БухучетЗарплаты.СтатьяФинансированияПоОкончании
		|		ИНАЧЕ БухучетЗарплаты.СтатьяФинансирования
		|	КОНЕЦ КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И БухучетЗарплаты.ДействуетДо <= МаксимальныеПериоды.Период
		|			ТОГДА БухучетЗарплаты.СпособОтраженияЗарплатыВБухучетеПоОкончании
		|		ИНАЧЕ БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете
		|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
		|	ВЫБОР
		|		КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И БухучетЗарплаты.ДействуетДо <= МаксимальныеПериоды.Период
		|			ТОГДА БухучетЗарплаты.ОтношениеКЕНВДПоОкончании
		|		ИНАЧЕ БухучетЗарплаты.ОтношениеКЕНВД
		|	КОНЕЦ КАК ОтношениеКЕНВД
		|ПОМЕСТИТЬ ВТЗначенияПоОкончании
		|ИЗ
		|	(ВЫБРАТЬ
		|		НастройкиБухучета.Сотрудник КАК Сотрудник,
		|		НастройкиБухучета.Период КАК Период,
		|		МАКСИМУМ(БухучетЗарплатыСотрудников.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТНастройкиБухучета КАК НастройкиБухучета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
		|			ПО НастройкиБухучета.Период > БухучетЗарплатыСотрудников.Период
		|				И НастройкиБухучета.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
		|				И (НастройкиБухучета.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НастройкиБухучета.Сотрудник,
		|		НастройкиБухучета.Период) КАК МаксимальныеПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплаты
		|		ПО МаксимальныеПериоды.Сотрудник = БухучетЗарплаты.Сотрудник
		|			И МаксимальныеПериоды.ПериодРегистра = БухучетЗарплаты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиБухучета.Период КАК Период,
		|	НастройкиБухучета.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА НЕ БухучетСотрудников.Период ЕСТЬ NULL
		|				И БухучетСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РучнаяКорректировка,
		|	ВЫБОР
		|		КОГДА НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|				ИЛИ НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|				ИЛИ &ЕстьЕНВД
		|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БухучетВДокументеЗадан,
		|	БухучетСотрудников.ДокументОснование КАК ДокументОснованиеСтарый
		|ИЗ
		|	ВТНастройкиБухучета КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетСотрудников
		|		ПО НастройкиБухучета.Период = БухучетСотрудников.Период
		|			И НастройкиБухучета.Сотрудник = БухучетСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиБухучета.Период КАК Период,
		|	НастройкиБухучета.Сотрудник КАК Сотрудник,
		|	НастройкиБухучета.ДокументОснование КАК ДокументОснование,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НастройкиБухучета.ДействуетДо КАК ДействуетДо,
		|	ЗначенияПоОкончании.СтатьяФинансирования КАК СтатьяФинансированияПоОкончании,
		|	ЗначенияПоОкончании.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучетеПоОкончании,
		|	ЗначенияПоОкончании.ОтношениеКЕНВД КАК ОтношениеКЕНВДПоОкончании
		|ИЗ
		|	ВТНастройкиБухучета КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоОкончании КАК ЗначенияПоОкончании
		|		ПО НастройкиБухучета.Период = ЗначенияПоОкончании.Период
		|			И НастройкиБухучета.Сотрудник = ЗначенияПоОкончании.Сотрудник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|					ИЛИ НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|					ИЛИ &ЕстьЕНВД
		|						И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"#Таблица",ИмяТаблицы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Таблица.ДатаНачала",ИмяПоляПериод);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Таблица.ДатаОкончания",?(ИмяПоляДействуетДо = Неопределено,"ДАТАВРЕМЯ(1, 1, 1)",ИмяПоляДействуетДо));
		Если НетПоляЕНВД Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Таблица.ОтношениеКЕНВД","ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)");
		КонецЕсли;
		Результат = Запрос.ВыполнитьПакет();
		
		Выборка = Результат[Результат.ВГраница()-1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.БухучетВДокументеЗадан И Выборка.ДокументОснованиеСтарый = ДокументОбъект.Ссылка Тогда
				// Очистка записей если в документе очистили бухучет.
				НаборОчищаемыхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
				НаборОчищаемыхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборОчищаемыхЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.Ссылка);
				НаборОчищаемыхЗаписей.Записать();
			ИначеЕсли Выборка.БухучетВДокументеЗадан И Выборка.РучнаяКорректировка Тогда
				// Очистка записей если есть ручная корректировка.
				НаборОчищаемыхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
				НаборОчищаемыхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборОчищаемыхЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборОчищаемыхЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборОчищаемыхЗаписей.Записать();	
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) И Выборка.ДокументОснованиеСтарый = ДокументОбъект.ИсправленныйДокумент Тогда
				// "Выключение" записей исправленного документа.
				НаборОчищаемыхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
				НаборОчищаемыхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборОчищаемыхЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.ИсправленныйДокумент);
				НаборОчищаемыхЗаписей.Прочитать();
				Если НаборОчищаемыхЗаписей.Количество()>0 Тогда
					НаборИсправленныхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудниковИсправления.СоздатьНаборЗаписей();
					НаборИсправленныхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
					НаборИсправленныхЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.ИсправленныйДокумент);
					Для каждого ЗаписьНабора Из НаборОчищаемыхЗаписей Цикл
						НоваяЗапись = НаборИсправленныхЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора);
						НоваяЗапись.ПериодИзмерение = ЗаписьНабора.Период;
					КонецЦикла;
					НаборИсправленныхЗаписей.Записать();
					НаборОчищаемыхЗаписей.Очистить();				
					НаборОчищаемыхЗаписей.Записать();	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Выборка = Результат[Результат.ВГраница()].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);	
		КонецЦикла;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать();
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запись о бухучете зарплаты по документу основанию.
//
Процедура ОбновитьСведенияОБухучетеЗарплатыСотрудниковСписок(ДокументОбъект, Параметры) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.Ссылка);
		
	Если Параметры.НеРегистрироватьБухучет Или Не ДокументОбъект.Проведен Тогда
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
			// "Включение" записей исправленного документа.
			НаборИсправленныхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудниковИсправления.СоздатьНаборЗаписей();
			НаборИсправленныхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборИсправленныхЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.ИсправленныйДокумент);
			НаборИсправленныхЗаписей.Прочитать();
			Если НаборИсправленныхЗаписей.Количество()>0 Тогда
				НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.ИсправленныйДокумент);
				Для каждого ЗаписьНабора Из НаборИсправленныхЗаписей Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора);
					НоваяЗапись.Период = ЗаписьНабора.ПериодИзмерение;
				КонецЦикла;
				НаборЗаписей.Записать();
				НаборИсправленныхЗаписей.Очистить();
				НаборИсправленныхЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("ЕстьЕНВД", ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВДВБюджетномУчреждении"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Сотрудник КАК Сотрудник,
		|	Таблица.ДатаНачала КАК Период,
		|	Таблица.ДатаОкончания КАК ДействуетДо,
		|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Таблица.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	&Ссылка КАК ДокументОснование,
		|	Таблица.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1) КАК ЕстьОкончание
		|ПОМЕСТИТЬ ВТНастройкиБухучета
		|ИЗ
		|	#Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|	И &РегистрироватьБухучет";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"#Таблица", Параметры.ИмяТаблицы);
		Если ЗначениеЗаполнено(Параметры.ИмяПоляРегистрироватьБухучет) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РегистрироватьБухучет", Параметры.ИмяПоляРегистрироватьБухучет);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&РегистрироватьБухучет", "ИСТИНА");
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Таблица.ДатаНачала", Параметры.ИмяПоляПериод);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Таблица.ДатаОкончания",?(Параметры.ИмяПоляДействуетДо = Неопределено,"ДАТАВРЕМЯ(1, 1, 1)",Параметры.ИмяПоляДействуетДо));
		Если Параметры.НетПоляЕНВД Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Таблица.ОтношениеКЕНВД","ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)");
		КонецЕсли;
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МаксимальныеПериоды.Сотрудник КАК Сотрудник,
		|	МаксимальныеПериоды.Период КАК Период,
		|	ВЫБОР
		|		КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И БухучетЗарплаты.ДействуетДо <= МаксимальныеПериоды.Период
		|			ТОГДА БухучетЗарплаты.СтатьяФинансированияПоОкончании
		|		ИНАЧЕ БухучетЗарплаты.СтатьяФинансирования
		|	КОНЕЦ КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И БухучетЗарплаты.ДействуетДо <= МаксимальныеПериоды.Период
		|			ТОГДА БухучетЗарплаты.СпособОтраженияЗарплатыВБухучетеПоОкончании
		|		ИНАЧЕ БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете
		|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
		|	ВЫБОР
		|		КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|				И БухучетЗарплаты.ДействуетДо <= МаксимальныеПериоды.Период
		|			ТОГДА БухучетЗарплаты.ОтношениеКЕНВДПоОкончании
		|		ИНАЧЕ БухучетЗарплаты.ОтношениеКЕНВД
		|	КОНЕЦ КАК ОтношениеКЕНВД
		|ПОМЕСТИТЬ ВТЗначенияПоОкончании
		|ИЗ
		|	(ВЫБРАТЬ
		|		НастройкиБухучета.Сотрудник КАК Сотрудник,
		|		НастройкиБухучета.Период КАК Период,
		|		МАКСИМУМ(БухучетЗарплатыСотрудников.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТНастройкиБухучета КАК НастройкиБухучета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
		|			ПО НастройкиБухучета.Период > БухучетЗарплатыСотрудников.Период
		|				И НастройкиБухучета.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
		|				И (НастройкиБухучета.ЕстьОкончание)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НастройкиБухучета.Сотрудник,
		|		НастройкиБухучета.Период) КАК МаксимальныеПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплаты
		|		ПО МаксимальныеПериоды.Сотрудник = БухучетЗарплаты.Сотрудник
		|			И МаксимальныеПериоды.ПериодРегистра = БухучетЗарплаты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиБухучета.Период КАК Период,
		|	НастройкиБухучета.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА НЕ БухучетСотрудников.Период ЕСТЬ NULL
		|				И БухучетСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РучнаяКорректировка,
		|	ВЫБОР
		|		КОГДА НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|				ИЛИ НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|				ИЛИ &ЕстьЕНВД
		|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БухучетВДокументеЗадан,
		|	БухучетСотрудников.ДокументОснование КАК ДокументОснованиеСтарый
		|ИЗ
		|	ВТНастройкиБухучета КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетСотрудников
		|		ПО НастройкиБухучета.Период = БухучетСотрудников.Период
		|			И НастройкиБухучета.Сотрудник = БухучетСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиБухучета.Период КАК Период,
		|	НастройкиБухучета.Сотрудник КАК Сотрудник,
		|	НастройкиБухучета.ДокументОснование КАК ДокументОснование,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НастройкиБухучета.ДействуетДо КАК ДействуетДо,
		|	ЗначенияПоОкончании.СтатьяФинансирования КАК СтатьяФинансированияПоОкончании,
		|	ЗначенияПоОкончании.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучетеПоОкончании,
		|	ЗначенияПоОкончании.ОтношениеКЕНВД КАК ОтношениеКЕНВДПоОкончании
		|ИЗ
		|	ВТНастройкиБухучета КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоОкончании КАК ЗначенияПоОкончании
		|		ПО НастройкиБухучета.Период = ЗначенияПоОкончании.Период
		|			И НастройкиБухучета.Сотрудник = ЗначенияПоОкончании.Сотрудник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|					ИЛИ НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|					ИЛИ &ЕстьЕНВД
		|						И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		Результат = Запрос.ВыполнитьПакет();
		
		Выборка = Результат[Результат.ВГраница()-1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.БухучетВДокументеЗадан И Выборка.ДокументОснованиеСтарый = ДокументОбъект.Ссылка Тогда
				// Очистка записей если в документе очистили бухучет.
				НаборОчищаемыхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
				НаборОчищаемыхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборОчищаемыхЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.Ссылка);
				НаборОчищаемыхЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборОчищаемыхЗаписей.Записать();
			ИначеЕсли Выборка.БухучетВДокументеЗадан И Выборка.РучнаяКорректировка Тогда
				// Очистка записей если есть ручная корректировка.
				НаборОчищаемыхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
				НаборОчищаемыхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборОчищаемыхЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборОчищаемыхЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборОчищаемыхЗаписей.Записать();
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) И Выборка.ДокументОснованиеСтарый = ДокументОбъект.ИсправленныйДокумент Тогда
				// "Выключение" записей исправленного документа.
				НаборОчищаемыхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
				НаборОчищаемыхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборОчищаемыхЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.ИсправленныйДокумент);
				НаборОчищаемыхЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборОчищаемыхЗаписей.Прочитать();
				Если НаборОчищаемыхЗаписей.Количество()>0 Тогда
					НаборИсправленныхЗаписей = РегистрыСведений.БухучетЗарплатыСотрудниковИсправления.СоздатьНаборЗаписей();
					НаборИсправленныхЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
					НаборИсправленныхЗаписей.Отбор.ДокументОснование.Установить(ДокументОбъект.ИсправленныйДокумент);
					НаборИсправленныхЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
					Для каждого ЗаписьНабора Из НаборОчищаемыхЗаписей Цикл
						НоваяЗапись = НаборИсправленныхЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора);
						НоваяЗапись.ПериодИзмерение = ЗаписьНабора.Период;
					КонецЦикла;
					НаборИсправленныхЗаписей.Записать();
					НаборОчищаемыхЗаписей.Очистить();
					НаборОчищаемыхЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Выборка = Результат[Результат.ВГраница()].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать();
		Иначе
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРегистрацииБухучетаСотрудниковСписком() Экспорт

	ПараметрыОбновленияБухучета = Новый Структура("
	|НеРегистрироватьБухучет,
	|ИмяТаблицы,
	|ИмяПоляПериод,
	|ИмяПоляДействуетДо,
	|ИмяПоляРегистрироватьБухучет,
	|НетПоляЕНВД");
	
	ПараметрыОбновленияБухучета.НетПоляЕНВД = Истина;
	
	Возврат ПараметрыОбновленияБухучета;
	
КонецФункции

Процедура СформироватьДвиженияКоэффициентыРаспределенияДенежногоСодержания(Движения, КоэффициентыРаспределенияДенежногоСодержания) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.СформироватьДвиженияКоэффициентыРаспределенияДенежногоСодержания(Движения, КоэффициентыРаспределенияДенежногоСодержания);
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения
//		Начисления - регистрируемые начисления.
//		Удержания  - регистрируемые удержания.
//		РезультатыРасчетаНДФЛ - таблица с НДФЛ.
//		ЗаписыватьДвижения - тип Булево, признак того, что движения необходимо записать
//
Процедура ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведения, Отказ, Начисления, Удержания, РезультатыРасчетаНДФЛ, ЗаписыватьДвижения = Ложь) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	ВыплатитьКакАванс 	= ДанныеДляПроведения.ВыплатитьКакАванс;
	ДниОтпускаАвансом 	= ДанныеДляПроведения.ДниОтпускаАвансом;
	
	ДанныеМежрасчетногоПериода = ?(ПорядокВыплаты = Неопределено, Ложь, РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты));
	
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	Если Начисления <> НеОпределено Тогда
		
		ВидыДоходаИсполнительногоПроизводства = УчетНачисленнойЗарплаты.ВидыДоходовИсполнительногоПроизводстваНачислений();
		
		ВыделятьДниОтпускаАвансом = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") И ДниОтпускаАвансом <> Неопределено И ДниОтпускаАвансом.Количество() > 0;
		
		Если ВыделятьДниОтпускаАвансом Тогда
			ТаблицаНачислений = Начисления.Скопировать();
			ЗаполнитьВидОперацииВНачислениях(ТаблицаНачислений, НачислениеУдержаниеВидОперации, ДниОтпускаАвансом);
		Иначе
			ТаблицаНачислений = Начисления;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаНачислений Цикл
			
			НоваяСтрока = Движения.БухучетНачисленияУдержанияПоСотрудникам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ПериодДействия		= НачалоМесяца(НоваяСтрока.ДатаНачала);
			НоваяСтрока.ДанныеМежрасчетногоПериода  = ДанныеМежрасчетногоПериода;
			НоваяСтрока.УчитыватьВРаспределенииНДФЛ = ВыплатитьКакАванс;
			Если Не ВыделятьДниОтпускаАвансом Тогда
				НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[Строка.Начисление];
			КонецЕсли;
			
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ПодразделениеУчетаЗатрат) Тогда
				НоваяСтрока.ПодразделениеУчетаЗатрат = НоваяСтрока.Подразделение;
			КонецЕсли;
			
			НоваяСтрока.ВидДоходаИсполнительногоПроизводства = ВидыДоходаИсполнительногоПроизводства[Строка.Начисление];
			
		КонецЦикла;
		
		Движения.БухучетНачисленияУдержанияПоСотрудникам.Записывать = Истина;
		
	КонецЕсли;
	
	Если Удержания <> НеОпределено Тогда
		
		Для Каждого Строка Из Удержания Цикл
			
			НоваяСтрока = Движения.БухучетНачисленияУдержанияПоСотрудникам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание = Строка.Удержание;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			НоваяСтрока.ВидОперации			= НачислениеУдержаниеВидОперации[НоваяСтрока.НачислениеУдержание];
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			
			Если Строка.Удержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
					Или Строка.Удержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
			Иначе
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			КонецЕсли
			
		КонецЦикла;
		
		Движения.БухучетНачисленияУдержанияПоСотрудникам.Записывать = Истина;
		
	КонецЕсли;

	Если РезультатыРасчетаНДФЛ <> НеОпределено Тогда
		
		Для Каждого Строка Из РезультатыРасчетаНДФЛ Цикл
			
			НоваяСтрока = Движения.БухучетНачисленияУдержанияПоСотрудникам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Подразделение							= Строка.ПодразделениеСотрудника;
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации 	= Строка.Подразделение;
			
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание = Строка.ВидУдержания;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ВидОперации			= НачислениеУдержаниеВидОперации[НоваяСтрока.НачислениеУдержание];
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			НоваяСтрока.ДатаПолученияДохода = Строка.МесяцНалоговогоПериода;
			
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
		КонецЦикла;
		
		Движения.БухучетНачисленияУдержанияПоСотрудникам.Записывать = Истина;
		
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.БухучетНачисленияУдержанияПоСотрудникам.Записать();
		Движения.БухучетНачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидОперацииВНачислениях(Начисления, НачислениеУдержаниеВидОперации, ДниОтпускаАвансом)

	Начисления.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	
	НачисленияОтпуска = Начисления.СкопироватьКолонки();
	ПрочиеНачисления  = Начисления.СкопироватьКолонки();
	
	Отбор = Новый Структура("Начисление,Сторно");
	
	Для каждого СтрокаТЗ Из Начисления Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		
		НайденныеСтроки = ДниОтпускаАвансом.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НачисленияОтпуска.Добавить(), СтрокаТЗ);
		Иначе
			НоваяСтрока = ПрочиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[СтрокаТЗ.Начисление];
		КонецЕсли;
		
	КонецЦикла;
	
	Начисления = ПрочиеНачисления;
	
	Если НачисленияОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура("Начисление,Сторно");
	ОтборПоПериоду = Новый Структура("Начисление,Сторно,ДатаНачала");
	
	Для каждого СтрокаТЗ Из ДниОтпускаАвансом Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		
		СтрокиОтпуска = НачисленияОтпуска.Скопировать(Отбор);
		СтрокиОтпуска.Свернуть("ДатаНачала,ОплаченоДней");
		СтрокиОтпуска.Сортировать("ДатаНачала Убыв");
		
		ОсталосьДнейАвансом = СтрокаТЗ.КоличествоДнейАвансом;
		Для каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
			
			ОплаченоДней = ?(СтрокаТЗ.Сторно, -СтрокаОтпуска.ОплаченоДней, СтрокаОтпуска.ОплаченоДней);
			
			Если ОсталосьДнейАвансом = 0 Тогда
				ДоляАванса = 0;
			ИначеЕсли ОплаченоДней <= ОсталосьДнейАвансом Тогда
				ОсталосьДнейАвансом = ОсталосьДнейАвансом - ОплаченоДней;
				ДоляАванса = 1;
			Иначе
				ДоляАванса = ОсталосьДнейАвансом / ОплаченоДней;
				ОсталосьДнейАвансом = 0;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтборПоПериоду, СтрокаТЗ);
			ОтборПоПериоду.ДатаНачала = СтрокаОтпуска.ДатаНачала;
			
			СтрокиДляРаспределения = НачисленияОтпуска.Скопировать(ОтборПоПериоду);
			
			Для каждого СтрокаРаспределения Из СтрокиДляРаспределения Цикл
				
				НоваяСтрока = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				Если ДоляАванса = 0 Тогда
					НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[Отбор.Начисление];
				ИначеЕсли ДоляАванса = 1 Тогда
					НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускАвансом;
				Иначе
					
					НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускАвансом;
					СуммаАвансом = Окр(НоваяСтрока.Сумма * ДоляАванса, 2);
					НоваяСтрока.Сумма = СуммаАвансом;
					
					НоваяСтрока = Начисления.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
					НоваяСтрока.ВидОперации = НачислениеУдержаниеВидОперации[Отбор.Начисление];
					НоваяСтрока.Сумма = НоваяСтрока.Сумма - СуммаАвансом;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// Формирует сторно записи отменяющие движения исправленного документа по регистрам подсистемы.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент	 - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  Записывать				 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, Записывать = Ложь) Экспорт
	
	ТолькоИзолироватьНаборы = Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	
	ИмяУчета = "ОтражениеЗарплатыВБухучете";
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	Набор = Неопределено;
	
	// Сторнирование универсальными алгоритмами.
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		Если ДвиженияВСтруктуре Тогда 
			Движения.Свойство(МетаданныеРегистра.Имя, Набор);
		Иначе 
			Набор = Движения.Найти(МетаданныеРегистра.Имя);
		КонецЕсли;
		
		Если Набор = Неопределено Или Не ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Или ТолькоИзолироватьНаборы Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьБухучетРабочегоВремениСотрудников(Движения, ПериодРегистрации, ДокументОснование, БухучетДанныхОВремени) Экспорт
	
	Если БухучетДанныхОВремени.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из БухучетДанныхОВремени Цикл
		
		Если Не ЗначениеЗаполнено(Строка.СпособОтраженияЗарплатыВБухучете)
			И Не ЗначениеЗаполнено(Строка.СтатьяФинансирования)
			И Не ЗначениеЗаполнено(Строка.СтатьяРасходов)
			И Не ЗначениеЗаполнено(Строка.ОтношениеКЕНВД) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.БухучетРабочегоВремениСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации 	= ПериодРегистрации;
		НоваяСтрока.ДокументОснование 	= ДокументОснование;
		НоваяСтрока.ВидУчетаВремени 	= Строка.ВидВремени;
		НоваяСтрока.Часы 				= Строка.Часов;
		
		Движения.БухучетРабочегоВремениСотрудников.Записывать = Истина;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьСведенияОВзносахДаннымиБухучета(Движения, Организация, ПериодРегистрации, Ссылка, МенеджерВременныхТаблиц, ИмяВременнойТаблицы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Прочитаем уже зарегистрированные данные о бухучете начислений.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица";
	МассивФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	// Получаем уже зарегистрированные сведения о бухучете начислений всех сотрудников по физическим лицам из массива МассивФизическихЛиц,
	// без учета регистратора, указанного в параметре Ссылка.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИсключаемыйРегистратор", Ссылка);
	ДополнительныеПараметры.Вставить("ФизическиеЛица", МассивФизическихЛиц);
	БухучетНачислений = БухучетНачисленийПоСтатьям(Организация, ПериодРегистрации, ДополнительныеПараметры);
	
	БухучетНачисленияУдержанияПоСотрудникам = Неопределено;
	БухучетНачисленияУдержанияПоКонтрагентамАкционерам = Неопределено;  
	
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		Движения.Свойство("БухучетНачисленияУдержанияПоСотрудникам", БухучетНачисленияУдержанияПоСотрудникам);
		Движения.Свойство("БухучетНачисленияУдержанияПоКонтрагентамАкционерам", БухучетНачисленияУдержанияПоКонтрагентамАкционерам);
	Иначе
		БухучетНачисленияУдержанияПоСотрудникам = Движения.Найти("БухучетНачисленияУдержанияПоСотрудникам");
		БухучетНачисленияУдержанияПоКонтрагентамАкционерам = Движения.Найти("БухучетНачисленияУдержанияПоКонтрагентамАкционерам");
	КонецЕсли;
	
	Если БухучетНачисленияУдержанияПоСотрудникам <> Неопределено Тогда
		
		Для каждого СтрокаКоллекции Из БухучетНачисленияУдержанияПоСотрудникам Цикл
			
			Если ЗначениеЗаполнено(СтрокаКоллекции.Организация) И (СтрокаКоллекции.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено
				Или СтрокаКоллекции.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы)
				Или СтрокаКоллекции.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно
				И (СтрокаКоллекции.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов
				Или ТипЗнч(СтрокаКоллекции.НачислениеУдержание) = Тип("ПланВидовРасчетаСсылка.Начисления")) Тогда
				
				НоваяСтрока = БухучетНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.Начисление = СтрокаКоллекции.НачислениеУдержание;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если БухучетНачисленияУдержанияПоКонтрагентамАкционерам <> Неопределено Тогда
		
		Для каждого СтрокаКоллекции Из БухучетНачисленияУдержанияПоКонтрагентамАкционерам Цикл
			Если ЗначениеЗаполнено(СтрокаКоллекции.Организация) И СтрокаКоллекции.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
				НоваяСтрока = БухучетНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.Начисление = СтрокаКоллекции.НачислениеУдержание;
				НоваяСтрока.ДатаНачала = СтрокаКоллекции.Период;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация, 
	|	*
	|ИЗ
	|	ВТРасширенныеСведенияОВзносах КАК СведенияОВзносах"
	 + Символы.ПС + "ГДЕ" + Символы.ПС + СтрЗаменить(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина, "СведенияОВзносах"), ",", " <> 0 ИЛИ ") + " <> 0";
	
	ТаблицаВзносов = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеВзносовПоТаблице(Запрос.Выполнить().Выгрузить());
	БухучетВзносов = ОтражениеЗарплатыВБухучете.БухучетСтраховыхВзносов(Организация, ПериодРегистрации, ТаблицаВзносов, БухучетНачислений);
	
	// Помещаем в переданный параметр имя временной таблицы.
	ИмяВременнойТаблицы = "ВТСтраховыеВзносыПоИсточникамФинансирования";
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, БухучетВзносов, ИмяВременнойТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеМенеджераРасчетов

// Выполняет отражение начислений в бухучете, создает временную таблицу с именем указанным в ИсходныеДанные - ИмяВТБухучетНачислений.
//
// Параметры:
// 		ИсходныеДанные - структура, см ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете
//			Организация
//			МесяцНачисления
//			МенеджерВременныхТаблиц 	- менеджер временных таблиц, содержит таблицу с начислениями, имя ВТ в значении ИмяВТНачисленияИсходная 
//			РаботаВБюджетномУчреждении 	- Булево, значение ФО РаботаВБюджетномУчреждении
//			ИспользоватьСтатьиФинансирования  - Булево, значение ФО ИспользоватьСтатьиФинансирования
//			ДокументСсылка
//
//			ИмяВТБухучетНачислений - имя ВТ в которую будут помещены результаты отражения в бухучете 
//					ИдентификаторСтроки
//					Сотрудник
//					ФизическоеЛицо
//					Подразделение
//					ПодразделениеУчетаЗатрат
//					СпособОтраженияЗарплатыВБухучете
//					СтатьяФинансирования
//					СтатьяРасходов
//					Сумма
//					ОблагаетсяЕНВД
//					ДатаНачала
//					Начисление
//					Территория
//					КодСтатьиФинансирования
//					МестоПолученияДохода
//
//			ИмяВТНачисленияИсходная - имя ВТ с начислениями для получения бухучета, содержит поля
//					ПериодРегистрации
//					Организация
//					Сотрудник
//					ФизическоеЛицо
//					Подразделение
//					ТерриторияВыполненияРаботВОрганизации
//					ДатаНачала
//					ДатаОкончания
//					Начисление
//					ДокументОснование
//					ИдентификаторСтроки
//					Сумма
//					Сторно
//					ФиксСторно
//					ВидОперации
//					МестоПолученияДохода
//
//			СтрокиБухучетСторноНачислений - соответствие
//					Ключ	 - ИдентификаторСтроки
//					Значение - таблица значений бухучетом, описание см НоваяТаблицаРаспределениеРезультатовНачислений().
//
//			СтрокиКоэффициентыСреднегоЗаработка - соответствие
//					Ключ	 - ИдентификаторСтроки
//					Значение - таблица значений с коэффициентами распределения, описание см НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка().
//
//			КоэффициентыСреднегоЗаработкаДокумента - Соответствие
//					Ключ	 - Перечисления.СпособыРасчетаНачислений
//					Значение - таблица значений с коэффициентами распределения, описание см НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка().
//	
//			КоэффициентыСреднегоЗаработкаФССДокумента - таблица значений с коэффициентами распределения, описание см НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка().
//
//			БухучетПервичногоДокумента - таблица значений, описание см НоваяТаблицаБухучетЗарплатыПервичныхДокументов().
//
// Возвращаемое значение: таблица значений с бухучетом начислений
//		описание таблицы см НоваяТаблицаРаспределениеРезультатовНачислений().
//
Функция ВыполнитьОтражениеНачисленийВБухучете(ИсходныеДанные) Экспорт
	
	// В случае если отражение в бухучете выполняется сразу при расчете
	// уточним отражение в бухучете для учтенных ранее начисленных сумм.
	РаспределятьРанееНачисленныеСуммы = (ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата")
												И ИсходныеДанные.МенеджерРасчетаЗарплаты <> Неопределено);
	
	УдалитьВТ = Новый Массив;
	
	ИмяВТБухучетНачислений 	= ИсходныеДанные.ИмяВТБухучетНачислений;
	МенеджерВременныхТаблиц = ИсходныеДанные.МенеджерВременныхТаблиц;
	ИмяВТНачисления			= ИсходныеДанные.ИмяВТНачисления;
	СтрокиБухучетСторноНачислений = ИсходныеДанные.СтрокиБухучетСторноНачислений;
	
	СоздатьВТБухучетНачисленийСторно(МенеджерВременныхТаблиц, ИмяВТНачисления, СтрокиБухучетСторноНачислений);
	УдалитьВТ.Добавить("ВТБухучетНачисленийСторно");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если РаспределятьРанееНачисленныеСуммы Тогда
		СоздатьВТБухучетКорректировкаРанееВыполненногоНачисления(ИсходныеДанные);
	Иначе
		СоздатьПустуюВТБухучетНачислений(Запрос, "ВТБухучетКорректировкаРанееВыполненногоНачисления");
	КонецЕсли;
	УдалитьВТ.Добавить("ВТБухучетКорректировкаРанееВыполненногоНачисления");
	
	Запрос.УстановитьПараметр("РаспределятьРанееНачисленныеСуммы", РаспределятьРанееНачисленныеСуммы);
	
	// Входная таблица ВТНачисленияДляОтраженияВБухучет содержит поля идентификаторов строк.
	// ИдентификаторСтроки - уникальный в пределах этой таблицы идентификатор строки.
	// ИдентификаторСтрокиБухучет - идентификатор строки таблицы начислений менеджера, используется для
	// помещения результатов распределения в таблицу начислений менеджера, может быть не уникальным
	// в пределах этой таблицы, когда ведется учет по территориям.
	// ИдентификаторСтрокиНачисления - идентификатор строки таблицы начислений менеджера, используемый
	// в алгоритмах расчета менеджера.
	// В выходной таблице ИмяВТБухучетНачислений поле ИдентификаторСтроки будет содержать данные из поля ИдентификаторСтрокиБухучет.
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияДляРаспределения.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияДляРаспределения.Организация КАК Организация,
	|	НачисленияДляРаспределения.Сотрудник КАК Сотрудник,
	|	НачисленияДляРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДляРаспределения.Подразделение КАК Подразделение,
	|	НачисленияДляРаспределения.Начисление КАК Начисление,
	|	НачисленияДляРаспределения.ДатаНачала КАК ДатаНачала,
	|	НачисленияДляРаспределения.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияДляРаспределения.РанееНачислено КАК РанееНачислено,
	|	НачисленияДляРаспределения.ДокументОснование КАК ДокументОснование,
	|	НачисленияДляРаспределения.ИдентификаторСтрокиБухучет КАК ИдентификаторСтрокиБухучет,
	|	НачисленияДляРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияДляРаспределения.ИдентификаторСтрокиНачисления КАК ИдентификаторСтрокиНачисления,
	|	НачисленияДляРаспределения.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияДляРаспределения.Сторно КАК Сторно,
	|	НачисленияДляРаспределения.ФиксСторно КАК ФиксСторно,
	|	НачисленияДляРаспределения.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА &РаспределятьРанееНачисленныеСуммы
	|				И ЕСТЬNULL(Начисления.СтратегияОтраженияВУчете, ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)
	|			ТОГДА НачисленияДляРаспределения.Сумма + НачисленияДляРаспределения.РанееНачислено
	|		ИНАЧЕ НачисленияДляРаспределения.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &РаспределятьРанееНачисленныеСуммы
	|				И ЕСТЬNULL(Начисления.СтратегияОтраженияВУчете, ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)
	|				И НачисленияДляРаспределения.РанееНачислено <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РанееНачисленныеДанные,
	|	НачисленияДляРаспределения.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента
	|ПОМЕСТИТЬ ВТНачисленияДляРаспределения
	|ИЗ
	|	ВТНачисленияДляОтраженияВБухучете КАК НачисленияДляРаспределения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетНачисленийСторно КАК БухучетНачисленийСторно
	|		ПО НачисленияДляРаспределения.ИдентификаторСтроки = БухучетНачисленийСторно.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетКорректировкаРанееВыполненногоНачисления КАК БухучетКорректировка
	|		ПО НачисленияДляРаспределения.ИдентификаторСтроки = БухучетКорректировка.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДляРаспределения.Начисление = Начисления.Ссылка
	|ГДЕ
	|	БухучетНачисленийСторно.ИдентификаторСтроки ЕСТЬ NULL
	|	И БухучетКорректировка.ИдентификаторСтроки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДляРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияДляРаспределения.ИдентификаторСтрокиНачисления КАК ИдентификаторСтрокиНачисления,
	|	НачисленияДляРаспределения.Сотрудник КАК Сотрудник,
	|	НачисленияДляРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДляРаспределения.Подразделение КАК Подразделение,
	|	НачисленияДляРаспределения.Начисление КАК Начисление,
	|	НачисленияДляРаспределения.ДатаНачала КАК ДатаНачала,
	|	СУММА(НачисленияДляРаспределения.РанееНачислено) КАК РанееНачислено,
	|	НачисленияДляРаспределения.ТерриторияВыполненияРаботВОрганизации КАК Территория
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК НачисленияДляРаспределения
	|ГДЕ
	|	НачисленияДляРаспределения.РанееНачисленныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДляРаспределения.ИдентификаторСтроки,
	|	НачисленияДляРаспределения.ИдентификаторСтрокиНачисления,
	|	НачисленияДляРаспределения.Сотрудник,
	|	НачисленияДляРаспределения.ФизическоеЛицо,
	|	НачисленияДляРаспределения.Подразделение,
	|	НачисленияДляРаспределения.Начисление,
	|	НачисленияДляРаспределения.ДатаНачала,
	|	НачисленияДляРаспределения.ТерриторияВыполненияРаботВОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
	ТаблицаРанееНачислено = Запрос.Выполнить().Выгрузить();
	
	УдалитьВТ.Добавить("ВТНачисленияДляРаспределения");
	
	ИсходныеДанные.ИмяВТНачисления = "ВТНачисленияДляРаспределения";
	ПолучитьБухучетНачисленийБезДоговоровСоздатьВТ(ИсходныеДанные, "ВТБухучетНачисленийВыходнаяТаблица");
	УдалитьВТ.Добавить("ВТБухучетНачисленийВыходнаяТаблица");
	
	Если ТаблицаРанееНачислено.Количество() > 0 Тогда
		СоздатьВТБухучетНачисленийРанееНачислено(ТаблицаРанееНачислено, ИсходныеДанные);
	Иначе
		СоздатьПустуюВТБухучетНачислений(Запрос, "ВТБухучетНачисленийРанееНачислено");
	КонецЕсли;
	УдалитьВТ.Добавить("ВТБухучетНачисленийРанееНачислено");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтрокиБухучет КАК ИдентификаторСтроки,
	|	Начисления.МестоПолученияДохода КАК МестоПолученияДохода,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК Территория,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Сумма КАК ИсходнаяСумма,
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(БухучетНачислений.Сумма) КАК Сумма,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА БухучетНачислений.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА Начисления.Подразделение
	|		ИНАЧЕ БухучетНачислений.ПодразделениеУчетаЗатрат
	|	КОНЕЦ КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	ЕСТЬNULL(СтатьиФинансированияЗарплата.Код, """") КАК КодСтатьиФинансирования
	|ПОМЕСТИТЬ ИмяВТБухучетНачислений
	|ИЗ
	|	(ВЫБРАТЬ
	|		БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		БухучетНачислений.Сотрудник КАК Сотрудник,
	|		БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|		БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|		БухучетНачислений.Сумма КАК Сумма,
	|		БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|		БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|		БухучетНачислений.Начисление КАК Начисление
	|	ИЗ
	|		ВТБухучетНачисленийВыходнаяТаблица КАК БухучетНачислений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БухучетНачислений.ИдентификаторСтроки,
	|		БухучетНачислений.Сотрудник,
	|		БухучетНачислений.ФизическоеЛицо,
	|		БухучетНачислений.Подразделение,
	|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачислений.СтатьяФинансирования,
	|		БухучетНачислений.СтатьяРасходов,
	|		БухучетНачислений.Сумма,
	|		БухучетНачислений.ОблагаетсяЕНВД,
	|		БухучетНачислений.ДатаНачала,
	|		БухучетНачислений.Начисление
	|	ИЗ
	|		ВТБухучетНачисленийСторно КАК БухучетНачислений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БухучетНачислений.ИдентификаторСтроки,
	|		БухучетНачислений.Сотрудник,
	|		БухучетНачислений.ФизическоеЛицо,
	|		БухучетНачислений.ПодразделениеУчетаЗатрат,
	|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачислений.СтатьяФинансирования,
	|		БухучетНачислений.СтатьяРасходов,
	|		БухучетНачислений.Сумма,
	|		БухучетНачислений.ОблагаетсяЕНВД,
	|		БухучетНачислений.ДатаНачала,
	|		БухучетНачислений.Начисление
	|	ИЗ
	|		ВТБухучетНачисленийРанееНачислено КАК БухучетНачислений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БухучетНачислений.ИдентификаторСтроки,
	|		БухучетНачислений.Сотрудник,
	|		БухучетНачислений.ФизическоеЛицо,
	|		БухучетНачислений.ПодразделениеУчетаЗатрат,
	|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачислений.СтатьяФинансирования,
	|		БухучетНачислений.СтатьяРасходов,
	|		БухучетНачислений.Сумма,
	|		БухучетНачислений.ОблагаетсяЕНВД,
	|		БухучетНачислений.ДатаНачала,
	|		БухучетНачислений.Начисление
	|	ИЗ
	|		ВТБухучетКорректировкаРанееВыполненногоНачисления КАК БухучетНачислений) КАК БухучетНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансированияЗарплата
	|		ПО БухучетНачислений.СтатьяФинансирования = СтатьиФинансированияЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|		ПО БухучетНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо,
	|	БухучетНачислений.ОблагаетсяЕНВД,
	|	БухучетНачислений.ДатаНачала,
	|	БухучетНачислений.Начисление,
	|	Начисления.Подразделение,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.МестоПолученияДохода,
	|	Начисления.Сумма,
	|	Начисления.ИдентификаторСтрокиБухучет,
	|	ЕСТЬNULL(СтатьиФинансированияЗарплата.Код, """"),
	|	ВЫБОР
	|		КОГДА БухучетНачислений.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА Начисления.Подразделение
	|		ИНАЧЕ БухучетНачислений.ПодразделениеУчетаЗатрат
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(БухучетНачислений.Сумма) <> 0
	|		ИЛИ СУММА(БухучетНачислений.Сумма) = 0
	|			И Начисления.Сумма = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.Сумма КАК Результат,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.Территория КАК Территория,
	|	БухучетНачислений.КодСтатьиФинансирования КАК КодСтатьиФинансирования,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат
	|ИЗ
	|	ИмяВТБухучетНачислений КАК БухучетНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	БухучетНачислений.ИдентификаторСтроки,
	|	БухучетНачислений.Территория,
	|	БухучетНачислений.СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ОблагаетсяЕНВД";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВТБухучетНачислений", ИмяВТБухучетНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
	
	БухучетНачислений = Запрос.Выполнить().Выгрузить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат БухучетНачислений;

КонецФункции

// Выполняет отражение начислений по договорам ГПХ в бухучете, создает временную таблицу с именем указанным в
// ИсходныеДанные - ИмяВТБухучетНачислений.
//
// Параметры:
// 		ИсходныеДанные - структура, см ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете.
//
// Возвращаемое значение: таблица значений с бухучетом начислений
//		описание таблицы см НоваяТаблицаРаспределениеРезультатовНачислений().
//
Функция ВыполнитьОтражениеНачисленийПоДоговорамВБухучете(ИсходныеДанные) Экспорт

	ИмяВТБухучетНачислений  = ИсходныеДанные.ИмяВТБухучетНачислений;
	МенеджерВременныхТаблиц = ИсходныеДанные.МенеджерВременныхТаблиц;
	
	УдалитьВТ = Новый Массив;
	
	// Входная таблица ИсходныеДанные.ИмяВТНачисления содержит поля идентификаторов строк.
	// ИдентификаторСтроки - уникальный в пределах этой таблицы идентификатор строки.
	// ИдентификаторСтрокиБухучет - идентификатор строки таблицы начислений менеджера, используется для
	// 		помещения результатов распределения в таблицу начислений менеджера, может быть не уникальным
	// 		в пределах этой таблицы, когда ведется учет по территориям.
	// В выходной таблице ИмяВТБухучетНачислений поле ИдентификаторСтроки будет содержать данные из поля ИдентификаторСтрокиБухучет.
		
	ПолучитьБухучетНачисленийПоДоговорамСоздатьВТ(ИсходныеДанные, "ВТБухучетНачисленийПоДоговорамВременная");
	УдалитьВТ.Добавить("ВТБухучетНачисленийПоДоговорамВременная");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.МестоПолученияДохода КАК МестоПолученияДохода,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК Территория,
	|	Начисления.ИдентификаторСтрокиБухучет КАК ИдентификаторСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ВидОперации КАК ВидОперации,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА Начисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ Начисления.ДатаНачала < Начисления.ПериодРегистрации
	|			ТОГДА Начисления.ПериодРегистрации
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодПринятияРасходов,
	|	ВЫБОР
	|		КОГДА БухучетНачислений.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА Начисления.Подразделение
	|		ИНАЧЕ БухучетНачислений.ПодразделениеУчетаЗатрат
	|	КОНЕЦ КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.Сумма КАК Сумма,
	|	ЕСТЬNULL(СтатьиФинансированияЗарплата.Код, """") КАК КодСтатьиФинансирования
	|ПОМЕСТИТЬ ВТБухучетНачисленийВыходнаяТаблица
	|ИЗ
	|	ВТБухучетНачисленийПоДоговорамВременная КАК БухучетНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансированияЗарплата
	|		ПО БухучетНачислений.СтатьяФинансирования = СтатьиФинансированияЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|		ПО БухучетНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.Сумма КАК Результат,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.Территория КАК Территория,
	|	БухучетНачислений.КодСтатьиФинансирования КАК КодСтатьиФинансирования
	|ИЗ
	|	ВТБухучетНачисленийВыходнаяТаблица КАК БухучетНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	БухучетНачислений.ИдентификаторСтроки,
	|	БухучетНачислений.Территория,
	|	БухучетНачислений.СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ОблагаетсяЕНВД";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийВыходнаяТаблица", ИмяВТБухучетНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИсходныеДанные.ИмяВТНачисления);
	
	БухучетНачисленийПоДоговорам = Запрос.Выполнить().Выгрузить();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат БухучетНачисленийПоДоговорам;

КонецФункции

// Выполняет отражение НДФЛ и КорректировокВыплаты в бухучете
//
// Параметры:
// 		ИсходныеДанные - структура, см ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете
//				* МенеджерВременныхТаблиц
//				* ИмяВТБухучетНачислений
//				* ОкончательныйРасчет
//				* ПериодРегистрации
//				* Организация
//				* ИсключаемыйРегистратор
//				* РезультатРасчетаНДФЛ, описание см НоваяТаблицаРезультатРасчетаНДФЛ
//				* НДФЛКЗачету, описание см НоваяТаблицаКорректировкиВыплаты
//				* НДФЛЗачтено, описание см НоваяТаблицаКорректировкиВыплаты.
//
// Возвращаемое значение: структура с ключами
//		БухучетНДФЛ - Таблица значений, описание см в  ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний()
//		БухучетКорректировкиВыплаты - Таблица значений, описание см в  ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний().
//
Функция ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете(ИсходныеДанные) Экспорт

	БухучетНДФЛ 				 = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	БухучетКорректировкиВыплаты  = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	МенеджерВременныхТаблиц = ИсходныеДанные.МенеджерВременныхТаблиц;
	ИмяВТБухучетНачислений 	= ИсходныеДанные.ИмяВТБухучетНачислений;
	ОкончательныйРасчет		= ИсходныеДанные.ОкончательныйРасчет;
	ПериодРегистрации       = ИсходныеДанные.МесяцНачисления;
	Организация      		= ИсходныеДанные.Организация;
	ИсключаемыйРегистратор  = ИсходныеДанные.ИсключаемыйРегистратор;
	РегистраторыНДФЛОбновленияБухучета 	= ИсходныеДанные.РегистраторыУдержанийОбновленияБухучета;
	ОснованияУчтенныеПриРасчетеНДФЛ 	= ИсходныеДанные.ОснованияУчтенныеПриРасчетеНДФЛ;
	
	РезультатРасчетаНДФЛ 	= ИсходныеДанные.РезультатРасчетаНДФЛ;
	НДФЛКЗачету		 		= ИсходныеДанные.НДФЛКЗачету;
	НДФЛЗачтено		 		= ИсходныеДанные.НДФЛЗачтено;
	
	УдалитьВТ = Новый Массив;
	
	Если РезультатРасчетаНДФЛ.Количество() > 0 Или НДФЛКЗачету.Количество() > 0 Тогда
		
		// Если переданы основания, создаем временную таблицу ВТУсловияОтбораДляРаспределенияНДФЛ.
		Если ОснованияУчтенныеПриРасчетеНДФЛ <> Неопределено
			И ПериодРегистрации >= ОтражениеЗарплатыВУчете.ДатаНачалаИспользованияОснованийВРаспределенииНДФЛ() Тогда
			ОтражениеЗарплатыВУчете.СоздатьВТУсловияОтбораДляРаспределенияНДФЛ(МенеджерВременныхТаблиц, ОснованияУчтенныеПриРасчетеНДФЛ, ИсключаемыйРегистратор);
			УдалитьВТ.Добавить("ВТУсловияОтбораДляРаспределенияНДФЛ");
		КонецЕсли;
		
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(РезультатРасчетаНДФЛ, "ФизическоеЛицо", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(НДФЛКЗачету, "ФизическоеЛицо", Истина), Истина);
		
		УдержанияМассив = ОбщегоНазначения.ВыгрузитьКолонку(РезультатРасчетаНДФЛ, "ВидУдержания", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдержанияМассив, ОбщегоНазначения.ВыгрузитьКолонку(НДФЛКЗачету, "ВидУдержания", Истина), Истина);
		
		// Получение данных для распределения, ДанныеДляРаспределенияНДФЛ - структура
		// БазаВсеНачисления - таблица значений с базовыми начислениями
		// УжеУдержано - таблица значений, содержит данные об уже выполненных удержаниях по физическому лиц
		// в менеджере временных таблиц будет создана таблица ВТРаспределениеНачисленийДляБазыНДФЛ для получения базы НДФЛ.
		
		ПараметрыРаспределения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияНДФЛ();
		ПараметрыРаспределения.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ПараметрыРаспределения.Организация = Организация;
		ПараметрыРаспределения.ПериодРегистрации = ПериодРегистрации;
		ПараметрыРаспределения.МассивФизическихЛиц = ФизическиеЛицаМассив;
		ПараметрыРаспределения.МассивУдержаний = УдержанияМассив;
		ПараметрыРаспределения.ИсключаемыйРегистратор = ИсключаемыйРегистратор;
		ПараметрыРаспределения.ОкончательныйРасчет = ОкончательныйРасчет;
		ПараметрыРаспределения.РегистраторыНДФЛОбновленияБухучета = РегистраторыНДФЛОбновленияБухучета;
		ПараметрыРаспределения.ИмяВТДанныеТекущегоДокумента = ИмяВТБухучетНачислений;
		
		ДанныеДляРаспределенияНДФЛ = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияНДФЛ(ПараметрыРаспределения);
		УдалитьВТ.Добавить("ВТРаспределениеНачисленийДляБазыНДФЛ");
		
		БазаВсеНачисления = ДанныеДляРаспределенияНДФЛ.БазаВсеНачисления;
		СтрокиУжеУдержано = ДанныеДляРаспределенияНДФЛ.СтрокиУжеУдержано;
		
		СведенияОДоходахНДФЛ = Неопределено;
		Если ИсходныеДанные.ЗасчитыватьДанныеАвансовНДФЛ И ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРегистрНакопления_СведенияОДоходахНДФЛ") Тогда
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТРегистрНакопления_СведенияОДоходахНДФЛ КАК СведенияОДоходах";
			СведенияОДоходахНДФЛ = Запрос.Выполнить().Выгрузить();
			СведенияОДоходахНДФЛ.Индексы.Добавить("ЗарегистрированоПриНачисленииАванса");
			СведенияОДоходахНДФЛБезАваносов = СведенияОДоходахНДФЛ.Скопировать(Новый Структура("ЗарегистрированоПриНачисленииАванса", Дата(1,1,1,0,0,0)));
			ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТРегистрНакопления_СведенияОДоходахНДФЛ");
			ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, СведенияОДоходахНДФЛБезАваносов, "ВТРегистрНакопления_СведенияОДоходахНДФЛ");
			СведенияОДоходахНДФЛБезАваносов = Неопределено;
		КонецЕсли;
		БазаРасчетаНДФЛ = ОтражениеЗарплатыВУчете.БазаДляРаспределенияНДФЛ(ПараметрыРаспределения);
		Если СведенияОДоходахНДФЛ <> Неопределено Тогда
			ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТРегистрНакопления_СведенияОДоходахНДФЛ");
			ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, СведенияОДоходахНДФЛ, "ВТРегистрНакопления_СведенияОДоходахНДФЛ");	
		КонецЕсли;
		
		// бухучет НДФЛ
		БухучетНДФЛ = ОтражениеЗарплатыВУчете.НДФЛПоРабочимМестамИСтатьям(РезультатРасчетаНДФЛ, БазаРасчетаНДФЛ, БазаВсеНачисления,
									СтрокиУжеУдержано, Организация, ПериодРегистрации);
									
		// бухучет НДФЛКЗачету
		БухучетНДФЛКЗачету = ОтражениеЗарплатыВУчете.КорректировкиВыплатыПоРабочимМестамИСтатьям(НДФЛКЗачету, БазаРасчетаНДФЛ, БазаВсеНачисления,
									Организация, ПериодРегистрации);
									
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(БухучетНДФЛКЗачету, БухучетКорректировкиВыплаты);
		
	КонецЕсли;
	
	Если НДФЛЗачтено.Количество()>0 Тогда
		
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛЗачтено, "ФизическоеЛицо", Истина);
		УдержанияМассив 	 = Новый Массив;
		
		// Получение данных для распределения, ДанныеДляРаспределения - структура
		// БазаВсеНачисления - таблица значений с базовыми начислениями
		// УжеУдержано - таблица значений, содержит данные об уже выполненных удержаниях по физическому лиц.
		ПараметрыПолученияДанных = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровПолученияДанныхДляРаспределенияУдержаний();
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных ,ИсходныеДанные, "МенеджерВременныхТаблиц,Организация,ОкончательныйРасчет");
		ПараметрыПолученияДанных.ПериодРегистрации = ПериодРегистрации;
		ПараметрыПолученияДанных.ИмяВТДанныеТекущегоДокумента = ИмяВТБухучетНачислений;
		
		ИсключаемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсключаемыйРегистратор);
		Если РегистраторыНДФЛОбновленияБухучета <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеРегистраторы, РегистраторыНДФЛОбновленияБухучета);
		КонецЕсли;

		ДанныеДляРаспределения = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияУдержаний(ФизическиеЛицаМассив, УдержанияМассив, ИсключаемыеРегистраторы, ПараметрыПолученияДанных);
		БазаВсеНачисления = ДанныеДляРаспределения.БазовыеНачисления;
		
		// КорректировкиВыплаты могут служить базой для распределения, нужно переименовать колонку "КорректировкаВыплаты".
		БазаРасчетаНДФЛ = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(Организация, ПериодРегистрации, ФизическиеЛицаМассив, ИсключаемыйРегистратор);
		БазаРасчетаНДФЛ.Колонки.СуммаКорректировки.Имя = "Сумма";
		
		БухучетНДФЛЗачтено = ОтражениеЗарплатыВУчете.КорректировкиВыплатыПоРабочимМестамИСтатьям(НДФЛЗачтено, БазаРасчетаНДФЛ, БазаВсеНачисления,
									Организация, ПериодРегистрации);
									
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(БухучетНДФЛЗачтено, БухучетКорректировкиВыплаты);
		
	КонецЕсли;
	
	// сортировка результатов
	УпорядочитьТаблицуРаспределениеУдержаний(БухучетНДФЛ);
	УпорядочитьТаблицуРаспределениеУдержаний(БухучетКорректировкиВыплаты);
	
	// заполним колонку КодСтатьиФинансирования в таблицах
	КодыСтатейФинансирования = КодыСтатейФинансирования();
	ЗаполнитьКодСтатьиФинансирования(БухучетКорректировкиВыплаты, КодыСтатейФинансирования);
	ЗаполнитьКодСтатьиФинансирования(БухучетНДФЛ, КодыСтатейФинансирования);
	
	РезультатыОтраженияВБухучете = Новый Структура("БухучетНДФЛ,БухучетКорректировкиВыплаты");
	РезультатыОтраженияВБухучете.БухучетНДФЛ 				 = БухучетНДФЛ;
	РезультатыОтраженияВБухучете.БухучетКорректировкиВыплаты = БухучетКорректировкиВыплаты;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат РезультатыОтраженияВБухучете;
	
КонецФункции

// Выполняет отражение удержаний и займов в бухучете
//
// Параметры:
// 		ИсходныеДанные - структура, см ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете
//				* МенеджерВременныхТаблиц
//				* ИмяВТБухучетНачислений
//				* ОкончательныйРасчет
//				* ПериодРегистрации
//				* Организация
//				* ИсключаемыйРегистратор
//				* ТаблицаУдержаний, описание см ОтражениеЗарплатыВУчете.НоваяТаблицаРезультатРасчетаУдержаний
//				* ТаблицаЗаймов, описание см ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатПогашениеЗаймов.
//
// Возвращаемое значение: структура с ключами
//		БухучетУдержаний - Таблица значений, описание см в  ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний()
//		БухучетЗаймов    - Таблица значений, описание см в  ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний().
//
Функция ВыполнитьОтражениеУдержанийИЗаймовВБухучете(ИсходныеДанные) Экспорт

	БухучетУдержаний  = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	БухучетЗаймов 	  = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	МенеджерВременныхТаблиц = ИсходныеДанные.МенеджерВременныхТаблиц;
	ИмяВТБухучетНачислений 	= ИсходныеДанные.ИмяВТБухучетНачислений;
	ОкончательныйРасчет		= ИсходныеДанные.ОкончательныйРасчет;
	ПериодРегистрации       = ИсходныеДанные.МесяцНачисления;
	Организация      		= ИсходныеДанные.Организация;
	ИсключаемыйРегистратор  = ИсходныеДанные.ИсключаемыйРегистратор;
	РегистраторыУдержанийОбновленияБухучета = ИсходныеДанные.РегистраторыУдержанийОбновленияБухучета;
	
	ТаблицаУдержаний = ИсходныеДанные.ТаблицаУдержаний;
	ТаблицаЗаймов	 = ИсходныеДанные.ТаблицаЗаймов;
	
	// Получение данных учета для распределения
	// БазовыеНачисления - таблица значений с базовыми начислениями
	// УжеУдержано - таблица значений, содержит данные об уже выполненных удержаниях по физическому лицу.
	
	ФизическиеЛицаМассив = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаймов, "ФизическоеЛицо", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУдержаний, "ФизическоеЛицо", Истина), Истина);
	
	УдержанияМассив 	 = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдержанияМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУдержаний, "ВидУдержания", Истина), Истина);
	
	// Получение данных для распределения, ДанныеДляРаспределения - структура
	// БазаВсеНачисления - таблица значений с базовыми начислениями
	// УжеУдержано - таблица значений, содержит данные об уже выполненных удержаниях по физическому лиц.
	ПараметрыПолученияДанных = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровПолученияДанныхДляРаспределенияУдержаний();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных ,ИсходныеДанные, "МенеджерВременныхТаблиц,Организация,ОкончательныйРасчет,РегистраторыУдержанийОбновленияБухучета");
	ПараметрыПолученияДанных.ПериодРегистрации = ПериодРегистрации;
	ПараметрыПолученияДанных.ИмяВТДанныеТекущегоДокумента = ИмяВТБухучетНачислений;
	
	ИсключаемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсключаемыйРегистратор);
	
	ДанныеДляРаспределения = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияУдержаний(ФизическиеЛицаМассив, УдержанияМассив, ИсключаемыеРегистраторы, ПараметрыПолученияДанных);
	
	БазовыеНачисления = ДанныеДляРаспределения.БазовыеНачисления;
	БазовыеНачисления.Индексы.Добавить("ФизическоеЛицо");
	
	СтрокиУжеУдержано = ДанныеДляРаспределения.СтрокиУжеУдержано;
	
	// ТаблицаЗаймов
	ПараметрыРаспределения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияУдержаний();
	ПараметрыРаспределения.Организация 		 = Организация;
	ПараметрыРаспределения.ПериодРегистрации = ПериодРегистрации;
	БухучетЗаймов = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(ТаблицаЗаймов, БазовыеНачисления, Новый Соответствие, ПараметрыРаспределения);
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		// Уточним статью расходов.
		Для каждого СтрокаТЗ Из БухучетЗаймов Цикл
			Если СтрокаТЗ.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
				СтрокаТЗ.СтатьяРасходов = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ТаблицаУдержаний
	ДополнительныеПараметры = ОтражениеЗарплатыВУчетеРасширенный.ОписаниеИсходныхДанныхДляРаспределенияУдержаний();
	ДополнительныеПараметры.БазовыеНачисления = БазовыеНачисления;
	ДополнительныеПараметры.СтрокиУжеУдержаноПоФизическимЛицам = СтрокиУжеУдержано;
	ДополнительныеПараметры.ТаблицаУдержаний = ТаблицаУдержаний;
	ДополнительныеПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДополнительныеПараметры.Организация = Организация;
	ДополнительныеПараметры.ПериодРегистрации = ПериодРегистрации;
	ДополнительныеПараметры.ВидыНачисленийДополненияРасчетнойБазы = ИсходныеДанные.ВидыНачисленийДополненияРасчетнойБазы;
	ДополнительныеПараметры.ОкончательныйРасчет = ОкончательныйРасчет;
	ОтражениеЗарплатыВУчетеРасширенный.ВыполнитьРаспределениеУдержаний(БухучетУдержаний, ДополнительныеПараметры);
	
	// сортировка результатов
	УпорядочитьТаблицуРаспределениеУдержаний(БухучетУдержаний);
	УпорядочитьТаблицуРаспределениеУдержаний(БухучетЗаймов);
	
	// заполним колонку КодСтатьиФинансирования в таблицах
	КодыСтатейФинансирования = КодыСтатейФинансирования();
	ЗаполнитьКодСтатьиФинансирования(БухучетУдержаний, КодыСтатейФинансирования);
	ЗаполнитьКодСтатьиФинансирования(БухучетЗаймов, КодыСтатейФинансирования);
	
	РезультатыОтраженияВБухучете = Новый Структура("БухучетУдержаний,БухучетЗаймов");
	РезультатыОтраженияВБухучете.БухучетУдержаний  = БухучетУдержаний;
	РезультатыОтраженияВБухучете.БухучетЗаймов 	   = БухучетЗаймов;
	
	Возврат РезультатыОтраженияВБухучете;

КонецФункции

// Создает временную таблицу с именем ИмяВТ помещая в нее содержимое таблицы значений
//	Параметры
//		МенеджерВременныхТаблиц - менеджер временных таблиц
//		БухучетНачислений - таблица значений, описание см НоваяТаблицаБухучетНачислений()
//		ИмяВТ - строка, имя создаваемой временной таблицы.
//
Процедура СоздатьВТБухучетНачисленийПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, БухучетНачислений, ИмяВТ) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если БухучетНачислений.Количество() = 0 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК ИдентификаторСтроки,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК МестоПолученияДохода,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
		|	0 КАК Сумма,
		|	ЛОЖЬ КАК ОблагаетсяЕНВД,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодДействия,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
		|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК Территория
		|ПОМЕСТИТЬ ВТБухучетНачисленийВыходнаяТаблица";
		
	Иначе
		
		ВидыДоходовИсполнительногоПроизводства = УчетНачисленнойЗарплаты.ВидыДоходовИсполнительногоПроизводстваНачислений();
		БухучетНачислений.Колонки.Добавить("ВидДохода",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
		Для каждого СтрокаТЗ Из БухучетНачислений Цикл
			СтрокаТЗ.ВидДохода = ВидыДоходовИсполнительногоПроизводства[СтрокаТЗ.Начисление];
		КонецЦикла;
		
		Запрос.УстановитьПараметр("БухучетНачислений", БухучетНачислений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БухучетНачислений.Организация КАК Организация,
		|	БухучетНачислений.Сотрудник КАК Сотрудник,
		|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БухучетНачислений.Подразделение КАК Подразделение,
		|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачислений.МестоПолученияДохода КАК МестоПолученияДохода,
		|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачислений.ВидДохода КАК ВидДоходаИсполнительногоПроизводства,
		|	БухучетНачислений.Сумма КАК Сумма,
		|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
		|	БухучетНачислений.ДатаОкончания КАК ДатаОкончания,
		|	БухучетНачислений.ПериодДействия КАК ПериодДействия,
		|	БухучетНачислений.Начисление КАК Начисление,
		|	БухучетНачислений.Территория КАК Территория
		|ПОМЕСТИТЬ ВТБухучетНачисленийВыходнаяТаблица
		|ИЗ
		|	&БухучетНачислений КАК БухучетНачислений";
		
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийВыходнаяТаблица", ИмяВТ);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТБухучетВсехНачисленийДляБухучетаУдержанийНДФЛ(МенеджерВременныхТаблиц, ПараметрыБухучета) Экспорт
	
	ВидыДоходовИсполнительногоПроизводства = УчетНачисленнойЗарплаты.ВидыДоходовИсполнительногоПроизводстваНачислений();
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	ОтражениеЗарплатыВУчетеРасширенный.ДополнитьМассивТиповНачисления(МассивТиповНачисления);

	ВидыДоходовНачислений = Новый ТаблицаЗначений;
	ВидыДоходовНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов(МассивТиповНачисления));
	ВидыДоходовНачислений.Колонки.Добавить("ВидДохода",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
	
	Для Каждого Элемент Из ВидыДоходовИсполнительногоПроизводства Цикл
		ВидДоходаНачисления = ВидыДоходовНачислений.Добавить();
		ВидДоходаНачисления.Начисление = Элемент.Ключ;
		ВидДоходаНачисления.ВидДохода  = Элемент.Значение;
	КонецЦикла;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ВидыДоходовНачислений, "ВТВидыДоходовНачислений");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.МестоПолученияДохода КАК МестоПолученияДохода,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.Сумма КАК Сумма,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	БухучетНачислений.Территория КАК Территория,
	|	ВидыДоходовНачислений.ВидДохода КАК ВидДоходаИсполнительногоПроизводства
	|ПОМЕСТИТЬ ВТБухучетНачисленийВыходнаяТаблица
	|ИЗ
	|	ВТБухучетНачисленийВходнаяТаблица КАК БухучетНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоходовНачислений КАК ВидыДоходовНачислений
	|		ПО БухучетНачислений.Начисление = ВидыДоходовНачислений.Начисление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо,
	|	БухучетНачислений.Подразделение,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.МестоПолученияДохода,
	|	БухучетНачислений.ДатаНачала,
	|	БухучетНачислений.СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов,
	|	БухучетНачислений.Сумма,
	|	БухучетНачислений.Начисление,
	|	БухучетНачислений.Территория,
	|	ВидыДоходовНачислений.ВидДохода
	|ИЗ
	|	ВТБухучетНачисленийПоДоговорамВходнаяТаблица КАК БухучетНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоходовНачислений КАК ВидыДоходовНачислений
	|		ПО БухучетНачислений.Начисление = ВидыДоходовНачислений.Начисление";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийВходнаяТаблица", ПараметрыБухучета.ИмяВТБухучетНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийПоДоговорамВходнаяТаблица", ПараметрыБухучета.ИмяВТБухучетНачисленийПоДоговорам);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийВыходнаяТаблица", ПараметрыБухучета.ИмяВТБухучетВсехНачислений);
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц,"ВТВидыДоходовНачислений")
	
КонецПроцедуры

// Возвращает строку с идентификаторами колонок таблицы значений,
// исключая служебную колонку ИдентификаторСтроки.
//
// Параметры
//		ТаблицаРаспределения - таблица значений.
//
Функция СтрокаКолонокРаспределенияБезИдентификатораСтроки(ТаблицаРаспределения) Экспорт

	Колонки = "";
	Для Каждого Колонка Из ТаблицаРаспределения.Колонки Цикл
		Если Колонка.Имя = "ИдентификаторСтроки" Тогда
			Продолжить;
		КонецЕсли;
		Колонки = Колонки + "," + Колонка.Имя;
	КонецЦикла;
	Колонки = Сред(Колонки, 2);
	
	Возврат Колонки;

КонецФункции

Функция НоваяТаблицаНачисленияДляБухучета() Экспорт

	ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
	МассивТиповНачислениеУдержание = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Измерения.НачислениеУдержание.Тип.Типы();
	МассивТиповДокументОснование   = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Реквизиты.ДокументОснование.Тип.Типы();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7,0)));
	Таблица.Колонки.Добавить("ИдентификаторСтрокиНачисления", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7,0)));
	Таблица.Колонки.Добавить("Организация", 		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",  			Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение",		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Начисление", 			Новый ОписаниеТипов(МассивТиповНачислениеУдержание));
	Таблица.Колонки.Добавить("Результат",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("РанееНачислено",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ПериодРегистрации",	ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ПериодДействия", 		ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаНачала", 			ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаОкончания", 		ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДокументОснование", 	Новый ОписаниеТипов(МассивТиповДокументОснование));
	Таблица.Колонки.Добавить("Территория",			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("МестоПолученияДохода",Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("Сторно", 				Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФиксСторно", 			Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("КорректировкаРанееВыполненногоНачисления", 			Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ВидОперации", 		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("РассчитыватьПоРазовымНачислениямДокумента", Новый ОписаниеТипов("Булево"));
		
	Возврат Таблица;

КонецФункции

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступноЧтениеБухучетаЗарплатыТерриторийВыполненияРабот() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.БухучетЗарплатыТерриторийВыполненияРабот);
	
КонецФункции

Функция ДоступноИзменениеБухучетаЗарплатыТерриторийВыполненияРабот() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.БухучетЗарплатыТерриторийВыполненияРабот);
	
КонецФункции

Функция ДоступноИзменениеБухучетаЗарплатыПодразделений() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.БухучетЗарплатыПодразделений);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ЗаполнитьБухучетНовойОрганизацииПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьСтатьиФинансированияЗарплата.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаВБюджетномУчреждении = Константы.РаботаВБюджетномУчреждении.Получить();
	РаботаВХозрасчетнойОрганизации = Константы.РаботаВХозрасчетнойОрганизации.Получить();
	
	ЗаписьПоУмолчанию = Неопределено;
	Если РаботаВБюджетномУчреждении И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		ЗаписьПоУмолчанию = Модуль.БухучетОрганизацииПоУмолчанию();
	ИначеЕсли РаботаВХозрасчетнойОрганизации И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетХозрасчетныхОрганизаций");
		ЗаписьПоУмолчанию = Модуль.БухучетОрганизацииПоУмолчанию();	
	КонецЕсли;
	
	Если ЗаписьПоУмолчанию = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	НаборЗаписей.Отбор.Организация.Установить(Источник.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьПоУмолчанию);
		НоваяЗапись.Организация = Источник.Ссылка;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьВидОперацииПоЗарплатеЕжегодныйОтпускПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОтпуска", Источник.Ссылка);
	Запрос.УстановитьПараметр("ОтпускЯвляетсяЕжегодным", Источник.ОтпускЯвляетсяЕжегодным);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КомпенсацияОтпуска
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидОтпуска = &ВидОтпуска
	|	И (&ОтпускЯвляетсяЕжегодным
	|				И НЕ Начисления.ВидОперацииПоЗарплате В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска))
	|			ИЛИ НЕ &ОтпускЯвляетсяЕжегодным
	|				И Начисления.ВидОперацииПоЗарплате В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска)))";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Источник.ОтпускЯвляетсяЕжегодным Тогда
			ВидОперации = ?(Выборка.КомпенсацияОтпуска,Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска,Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск);
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход;
		КонецЕсли;
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидРасчетаОбъект.ВидОперацииПоЗарплате = ВидОперации;
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкиСистемыНалогообложенияПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	УстановитьИспользованиеЕНВД();
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВБухучетеНачисленийКонтрагентов

// Возвращает структуру с описанием исходных данных для отражения начислений контрагентов в бухучете.
//
// Возвращаемое значение:
//  Структура - Ключ содержит имя параметра.
//
Функция ОписаниеИсходныхДанныхДляОтраженияНачисленийКонтрагентовВБухучете() Экспорт

	Параметры = Новый Структура(
	"Организация,
	|МесяцНачисления,
	|Подразделение,
	|Начисление,
	|БухучетПервичногоДокумента,
	|КоэффициентыРаспределения,
	|ТаблицаНачислений");
	
	Параметры.БухучетПервичногоДокумента = НоваяТаблицаБухучетЗарплатыПервичныхДокументов();
	
	Возврат Параметры;
	
КонецФункции

// Выполняет отражение начислений контрагентов в бухучете.
//
// Параметры:
//   ИсходныеДанные - структура, см ОписаниеИсходныхДанныхДляОтраженияНачисленийКонтрагентовВБухучете
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с бухучетом начислений,
//		описание таблицы см НоваяТаблицаРаспределениеРезультатовНачислений().
//
Функция ОтражениеНачисленийКонтрагентовВБухучете(ИсходныеДанные) Экспорт

	Организация					= ИсходныеДанные.Организация;
	МесяцНачисления				= ИсходныеДанные.МесяцНачисления;
	Подразделение				= ИсходныеДанные.Подразделение;
	Начисление 					= ИсходныеДанные.Начисление;
	БухучетПервичногоДокумента	= ИсходныеДанные.БухучетПервичногоДокумента;
	КоэффициентыРаспределения 	= ИсходныеДанные.КоэффициентыРаспределения;
	ТаблицаНачислений 			= ИсходныеДанные.ТаблицаНачислений;
	
	РаботаВХозрасчетнойОрганизации = ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	ЕстьЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, МесяцНачисления);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Бухучет.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Бухучет.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Бухучет.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ВЫБОР
	|		КОГДА Бухучет.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК Бухучет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Бухучет.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Бухучет.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Бухучет.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Бухучет.ИдентификаторСтроки) КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА Бухучет.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД
	|ИЗ
	|	(ВЫБРАТЬ
	|		Бухучет.СтатьяФинансирования КАК СтатьяФинансирования,
	|		Бухучет.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		Бухучет.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|		Бухучет.ИдентификаторСтроки КАК ИдентификаторСтроки
	|	ИЗ
	|		РегистрСведений.БухучетЗарплатыПодразделений.СрезПоследних(&ДатаСреза, Подразделение = &Подразделение) КАК Бухучет) КАК Бухучет
	|
	|СГРУППИРОВАТЬ ПО
	|	Бухучет.СпособОтраженияЗарплатыВБухучете,
	|	Бухучет.СтатьяФинансирования,
	|	Бухучет.ОтношениеКЕНВД
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Бухучет.ИдентификаторСтроки) = 1";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	НастройкиБухучетаПоУмолчанию = Новый Структура("СтатьяФинансирования,СпособОтраженияЗарплатыВБухучете,ОблагаетсяЕНВД,ОтношениеКЕНВД");
	
	ВыборкаПодразделение = РезультатЗапроса[1].Выбрать();
	ВыборкаПодразделение.Следующий();
	ЗаполнитьЗначенияСвойств(НастройкиБухучетаПоУмолчанию, ВыборкаПодразделение);
	
	ВыборкаОрганизация = РезультатЗапроса[0].Выбрать();
	ВыборкаОрганизация.Следующий();
	
	Если Не ЗначениеЗаполнено(НастройкиБухучетаПоУмолчанию.СпособОтраженияЗарплатыВБухучете) Тогда
		НастройкиБухучетаПоУмолчанию.СпособОтраженияЗарплатыВБухучете = ВыборкаОрганизация.СпособОтраженияЗарплатыВБухучете;
	КонецЕсли;
	
	ПоляБухучета = "СпособОтраженияЗарплатыВБухучете,СтатьяРасходов";
	Если ИспользоватьСтатьиФинансирования Тогда
		ПоляБухучета = ПоляБухучета + ",СтатьяФинансирования";
		Если Не ЗначениеЗаполнено(НастройкиБухучетаПоУмолчанию.СтатьяФинансирования) Тогда
			НастройкиБухучетаПоУмолчанию.СтатьяФинансирования = ВыборкаОрганизация.СтатьяФинансирования;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьЕНВД Тогда
		ПоляБухучета = ПоляБухучета + ",ОблагаетсяЕНВД";
		Если Не ЗначениеЗаполнено(НастройкиБухучетаПоУмолчанию.ОтношениеКЕНВД) Тогда
			НастройкиБухучетаПоУмолчанию.ОблагаетсяЕНВД = ВыборкаОрганизация.ОблагаетсяЕНВД;
		КонецЕсли;
	КонецЕсли;
	БухучетПоУмолчанию = Новый Структура(ПоляБухучета);
	ЗаполнитьЗначенияСвойств(БухучетПоУмолчанию, НастройкиБухучетаПоУмолчанию);
	БухучетПоУмолчанию.СтатьяРасходов = СтатьяОплатаТруда();
	
	// Статья расходов по умолчанию, если РаботаВХозрасчетнойОрганизации передается из документа иначе определяется видом начисления.
	СтатьяРасходовПоУмолчанию = Неопределено;
	Если Не РаботаВХозрасчетнойОрганизации Тогда
		СтатьиРасходовПоВидамНачислений = Новый Соответствие;
		СтатьиРасходовНачисленийБюджет(Новый МенеджерВременныхТаблиц, Организация, МесяцНачисления, СтатьиРасходовПоВидамНачислений);
		СтатьяРасходовПоУмолчанию = СтатьиРасходовПоВидамНачислений[Начисление];
	КонецЕсли;
	
	// Настройки бухучета указанные в документе.
	КолонкиБухучетаДокумента = "";
	НастройкиБухучетДокумента = Новый Структура(ПоляБухучета);
	НайденныеСтроки = БухучетПервичногоДокумента.НайтиСтроки(Новый Структура("НачислениеУдержание", Начисление));
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		КолонкиБухучет = Новый Массив;
		Если ИспользоватьСтатьиФинансирования И ЗначениеЗаполнено(НайденныеСтроки[0].СтатьяФинансирования) Тогда
			КолонкиБухучет.Добавить("СтатьяФинансирования");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныеСтроки[0].СпособОтраженияЗарплатыВБухучете) Тогда
			КолонкиБухучет.Добавить("СпособОтраженияЗарплатыВБухучете");
		КонецЕсли;
		
		Если ЕстьЕНВД И ЗначениеЗаполнено(НайденныеСтроки[0].ОтношениеКЕНВД) Тогда
			НастройкиБухучетДокумента.ОблагаетсяЕНВД = (НайденныеСтроки[0].ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныеСтроки[0].СтатьяРасходов) Тогда
			Если РаботаВХозрасчетнойОрганизации Тогда
				СтатьяРасходовПоУмолчанию = НайденныеСтроки[0].СтатьяРасходов;
			Иначе
				КолонкиБухучет.Добавить("СтатьяРасходов");
			КонецЕсли;
		КонецЕсли;
		
		КолонкиБухучетаДокумента = СтрСоединить(КолонкиБухучет, ",");
		
		Если Не ПустаяСтрока(КолонкиБухучетаДокумента) Тогда
			ЗаполнитьЗначенияСвойств(НастройкиБухучетДокумента, НайденныеСтроки[0], КолонкиБухучетаДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаБухучетНачислений = НоваяТаблицаРаспределениеРезультатовНачислений();
	РаспределятьПоКоэффициентам = (КоэффициентыРаспределения <> Неопределено И КоэффициентыРаспределения.Количество() > 0);
	Если РаспределятьПоКоэффициентам Тогда
		ПоляКоэффициентов = ПоляБухучета + ",ФизическоеЛицо,ПодразделениеУчетаЗатрат";
		КоэффициентыРаспределения.Свернуть(ПоляКоэффициентов, "Коэффициент");
	КонецЕсли;
	
	ОтборКоэффициентов = Новый Структура("ФизическоеЛицо");
	
	Для каждого СтрокаТЗ Из ТаблицаНачислений Цикл
		
		НоваяСтрокаБухучета = ТаблицаБухучетНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаБухучета, СтрокаТЗ);
		НоваяСтрокаБухучета.Результат = СтрокаТЗ.Сумма;
		
		// Настройки бухучета по умолчанию.
		ЗаполнитьЗначенияСвойств(НоваяСтрокаБухучета, БухучетПоУмолчанию);
		
		Если ЗначениеЗаполнено(СтатьяРасходовПоУмолчанию) Тогда
			НоваяСтрокаБухучета.СтатьяРасходов = СтатьяРасходовПоУмолчанию;
		КонецЕсли;
		
		Если Не ПустаяСтрока(КолонкиБухучетаДокумента) Тогда
			// Задан бухучет в документе.
			ЗаполнитьЗначенияСвойств(НоваяСтрокаБухучета, НастройкиБухучетДокумента, КолонкиБухучетаДокумента);
			
		ИначеЕсли СтрокаТЗ.Сумма <> 0 И РаспределятьПоКоэффициентам Тогда
			
			ЗаполнитьЗначенияСвойств(ОтборКоэффициентов, СтрокаТЗ);
			СтрокиРаспределения = КоэффициентыРаспределения.НайтиСтроки(ОтборКоэффициентов);
			
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения,"Коэффициент");
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаТЗ.Сумма, Коэффициенты);
			
			Если Результаты <> Неопределено Тогда
				
				Индекс = 0;
				Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					
					СтрокаБухучета = ТаблицаБухучетНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаБухучета, НоваяСтрокаБухучета);
					
					СтрокаБухучета.Результат = Результаты[Индекс];
					
					Если ИспользоватьСтатьиФинансирования И ЗначениеЗаполнено(СтрокаРаспределения.СтатьяФинансирования) Тогда
						СтрокаБухучета.СтатьяФинансирования = СтрокаРаспределения.СтатьяФинансирования;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаРаспределения.СпособОтраженияЗарплатыВБухучете) Тогда
						СтрокаБухучета.СпособОтраженияЗарплатыВБухучете = СтрокаРаспределения.СпособОтраженияЗарплатыВБухучете;
					КонецЕсли;
					
					Если Не РаботаВХозрасчетнойОрганизации И Не ЗначениеЗаполнено(СтатьяРасходовПоУмолчанию) И ЗначениеЗаполнено(СтрокаРаспределения.СтатьяРасходов) Тогда
						// Заменяем статью расходов если не задана статья по умолчанию.
						СтрокаБухучета.СтатьяРасходов = СтрокаРаспределения.СтатьяРасходов;
					КонецЕсли;
					
					Если ЕстьЕНВД  Тогда
						СтрокаБухучета.ОблагаетсяЕНВД = СтрокаРаспределения.ОблагаетсяЕНВД;
					КонецЕсли;
					
					СтрокаБухучета.ПодразделениеУчетаЗатрат = СтрокаРаспределения.ПодразделениеУчетаЗатрат;
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
				ТаблицаБухучетНачислений.Удалить(НоваяСтрокаБухучета);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		КодыСтатейФинансирования = КодыСтатейФинансирования();
		Для каждого СтрокаТЗ Из ТаблицаБухучетНачислений Цикл
			СтрокаТЗ.КодСтатьиФинансирования = КодыСтатейФинансирования[СтрокаТЗ.СтатьяФинансирования];
		КонецЦикла;
	КонецЕсли;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаБухучетНачислений);
	
	Возврат ТаблицаБухучетНачислений;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеЕНВД

// Создает временную таблицу с данными ЕНВД.
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу ВТНачисления с полями
// 				* Сотрудник
// 				* ДатаНачала
// 				* Подразделения
// 				* ТерриторияВыполненияРаботВОрганизации
// 	Организация - СправочникСсылка.Организации.
// 	Период - Дата.
//
Процедура СоздатьВТНачисленияСДаннымиЕНВДПоЕжемесячнойДоле(МенеджерВТ, Организация, Период) Экспорт
	
	ЕжемесячнаяДоляЕНВД = 0;
	ПроцентЕНВД = ОтражениеЗарплатыВБухучете.ПроцентЕНВД(Организация, Период);
	Если ПроцентЕНВД = 100 Тогда
		ЕжемесячнаяДоляЕНВД = 1;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЕжемесячнаяДоляЕНВД", ЕжемесячнаяДоляЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ДатаНачала КАК Период,
	|	&Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудникиДляПолученияНастроек
	|ИЗ
	|	ВТНачисления КАК Начисления";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиДляПолученияНастроек");
	
	СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(МенеджерВТ, "ВТСотрудникиДляПолученияНастроек");
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|			ТОГДА &ЕжемесячнаяДоляЕНВД
	|		КОГДА НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЕНВД
	|ПОМЕСТИТЬ ВТНачисленияСДаннымиЕНВД
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
	|		ПО Начисления.Сотрудник = НастройкиБухучета.Сотрудник
	|			И Начисления.Подразделение = НастройкиБухучета.Подразделение
	|			И Начисления.ДатаНачала = НастройкиБухучета.Период
	|			И Начисления.ТерриторияВыполненияРаботВОрганизации = НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
КонецПроцедуры

// Выполняет проверку необходимости регистрации процента ЕНВД перед расчетом страховых взносов.
// Проверяется наличие настроек отношения к ЕНВД как "определяется ежемесячно процентом". 
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу начислений с именем ИмяИсходнойВТ с полями
// 				* Сотрудник
// 				* Период
// 				* Подразделения
// 				* ТерриторияВыполненияРаботВОрганизации
// 				* Начисление
// 	ИмяИсходнойВТ - Строка - имя временной таблицы с начислениями сотрудников.
// 	ИменаПолейВТ - Строка - имена полей сотрудник и период, через запятую, в таблице с именем ИмяИсходнойВТ.
// 	Организация - СправочникСсылка.Организации.
// 	Период - Дата.
//
Функция ТребуетсяРегистрацияПроцентаЕНВД(МенеджерВТ, ИмяИсходнойВТ, Организация, Период) Экспорт
	
	УдалитьВТ = Новый Массив;
	
	// Подготовим временную таблицу для получения настроек бухучета.
	Параметры = ПараметрыПолученияНастроекБухучета();
	Параметры.ИмяПоляПериод 	= "ДатаНачала";
	СоздатьВТИсходнаяТаблицаДляНастроекБухучета(МенеджерВТ, ИмяИсходнойВТ, Период, Параметры);
	УдалитьВТ.Добавить("ВТИсходнаяТаблицаДляНастроекБухучета");
	
	// Настройки получаем с учетом зарегистрированных распределений основного заработка.
	СоздатьВТНастройкиБухучета(МенеджерВТ, Организация, Период, Истина);
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	УдалитьВТ.Добавить("ВТНастройкиБухучетаПоУмолчанию");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(НастройкиНачислений.ОтношениеКЕНВД, ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|				ТОГДА НастройкиБухучета.ОтношениеКЕНВД
	|			ИНАЧЕ НастройкиНачислений.ОтношениеКЕНВД
	|		КОНЕЦ КАК ОтношениеКЕНВД
	|	ИЗ
	|		ИмяВременнойТаблицы КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
	|			ПО Таблица.Сотрудник = НастройкиБухучета.Сотрудник
	|				И Таблица.Подразделение = НастройкиБухучета.Подразделение
	|				И Таблица.ТерриторияВыполненияРаботВОрганизации = НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации
	|				И Таблица.ДатаНачала = НастройкиБухучета.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК НастройкиНачислений
	|			ПО Таблица.Начисление = НастройкиНачислений.Ссылка
	|				И (НастройкиНачислений.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета))) КАК НастройкиБухучета
	|ГДЕ
	|	НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяИсходнойВТ);
	Результат = Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
	Возврат Не Результат.Пустой();

КонецФункции

#КонецОбласти

#Область КонструкторыСлужебногоПрограммногоИнтерфейса

Функция НоваяТаблицаБухучетЗарплатыПервичныхДокументов() Экспорт
	
	МассивТиповНачисленияУдержания = Новый Массив;
	МассивТиповНачисленияУдержания.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисленияУдержания.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	МассивТиповНачисленияУдержания.Добавить(Тип("ПланВидовРасчетаСсылка.Удержания"));
	МассивТиповНачисленияУдержания.Добавить(Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам"));
	МассивТиповНачисленияУдержания.Добавить(Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
	МассивТиповДокументОснование = Метаданные.РегистрыСведений.БухучетЗарплатыПервичныхДокументов.Измерения.ДокументОснование.Тип.Типы();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ДокументОснование",  Новый ОписаниеТипов(МассивТиповДокументОснование));
	Таблица.Колонки.Добавить("НачислениеУдержание",  Новый ОписаниеТипов(МассивТиповНачисленияУдержания));  
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете",  Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	Таблица.Колонки.Добавить("ОтношениеКЕНВД",  Новый ОписаниеТипов("ПеречислениеСсылка.ОтношениеКЕНВДЗатратНаЗарплату"));
	Таблица.Колонки.Добавить("СтатьяФинансирования",  Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",  Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	Возврат Таблица;
КонецФункции

Функция ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете() Экспорт

	Параметры = Новый Структура(
	"Организация,
	|МесяцНачисления,
	|МенеджерВременныхТаблиц,
	|МенеджерКадровогоУчета,
	|ИмяВТБухучетНачислений,
	|ИмяВТНачисления,
	|СтрокиБухучетСторноНачислений,
	|БухучетПервичногоДокумента,
	|ИсключаемыйРегистратор,
	|СтрокиКоэффициентыСреднегоЗаработка,
	|СтрокиКоэффициентыСохраняемогоДС,
	|КоэффициентыСреднегоЗаработкаДокумента,
	|КоэффициентыСреднегоЗаработкаФССДокумента,
	|КоэффициентыРаспределенияДенежногоСодержания,
	|ВидыОперацийРасходыФСС,
	|МенеджерДанныхУчетаВремени,
	|РаспределениеСохраняемогоДС,
	|СоответствиеСотрудников,
	|ДатаНачалаДляБухучета,
	|МенеджерРасчетаЗарплаты,
	|РегистраторТекущегоРасчета,
	|ИсточникДанныхОДатахНачислений");
	
	Параметры.СтрокиБухучетСторноНачислений = Новый Соответствие;
	Параметры.БухучетПервичногоДокумента 	= НоваяТаблицаБухучетЗарплатыПервичныхДокументов();
	Параметры.СтрокиКоэффициентыСреднегоЗаработка 		= Новый Соответствие;
	Параметры.КоэффициентыСреднегоЗаработкаДокумента 	= Новый Соответствие;
	Параметры.КоэффициентыСреднегоЗаработкаФССДокумента = НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка();
	Параметры.ИмяВТНачисления 				= "ВТНачисленияДляРаспределения";
	Параметры.РаспределениеСохраняемогоДС 	= Ложь;
	Параметры.СоответствиеСотрудников 	  	= Новый Соответствие;
	Параметры.ДатаНачалаДляБухучета 		= Дата(0001,1,1);
	
	// Объект в котором есть метод ДатыНачисленийОплачивающихВидыВремени,
	Параметры.ИсточникДанныхОДатахНачислений = Неопределено;
	
	// Виды операций, которые обрабатываются при получении бухучета как расходы ФСС.
	ВидыОперацийРасходыФСС = Новый Массив;
	ВидыОперацийРасходыФСС.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС); 
	ВидыОперацийРасходыФСС.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	ВидыОперацийРасходыФСС.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение);
	
	Параметры.ВидыОперацийРасходыФСС = ВидыОперацийРасходыФСС;
	
	Возврат Параметры;	

КонецФункции 

Функция ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете() Экспорт

	Параметры = Новый Структура(
	"Организация,
	|МесяцНачисления,
	|МенеджерВременныхТаблиц,
	|ИмяВТБухучетНачислений,
	|ОкончательныйРасчет,
	|ИсключаемыйРегистратор,
	|ВидыНачисленийДополненияРасчетнойБазы,
	|ТаблицаУдержаний,
	|ТаблицаЗаймов,
	|РезультатРасчетаНДФЛ,
	|НДФЛКЗачету,
	|НДФЛЗачтено,
	|РегистраторыУдержанийОбновленияБухучета,
	|ОснованияУчтенныеПриРасчетеНДФЛ,
	|ЗасчитыватьДанныеАвансовНДФЛ");
	
	Возврат Параметры;	

КонецФункции

Функция НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СтатьяФинансирования", 			 Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", 					 Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", 					 Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Коэффициент", 		 			 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаРаспределениеРезультатовНачислений() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Территория", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("КодСтатьиФинансирования", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(3)));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаБухучетНачислений() Экспорт

	ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	МассивТиповНачисления.Добавить(Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам"));
	МассивТиповНачисления.Добавить(Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7,0)));
	Таблица.Колонки.Добавить("Организация",  						Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", 						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",  							Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", 						Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Начисление", 							Новый ОписаниеТипов(МассивТиповНачисления));
	Таблица.Колонки.Добавить("ДатаНачала", 							ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаОкончания", 						ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ПериодДействия", 						ОписаниеТипаДата);
	Таблица.Колонки.Добавить("Территория",							Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("МестоПолученияДохода", 				Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("СтатьяФинансирования",				Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",  					Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД",						Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	
	Таблица.Колонки.Добавить("Сумма", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("Результат",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаКоэффициентыРаспределенияСохраняемогоДС() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник", 						 Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("НазначениеРасчета", 				 Новый ОписаниеТипов("ПеречислениеСсылка.НазначениеРасчетаСохраняемогоДенежногоСодержания"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", 		 Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", 			 Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", 					 Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", 					 Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Коэффициент", 		 			 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат Таблица;

КонецФункции

// Конструктор структуры параметров используемых при вызове метода заполнения
// документов ОтражениеЗарплатыВБухучете.
//
// Возвращаемое значение:
//	Структура
//
Функция ПараметрыДляЗаполненияТаблицДокумента() Экспорт

	Параметры = Новый Структура("
	|Организация,
	|ПериодРегистрации,
	|ДокументСсылка,
	|СтатьиФинансирования,
	|Подразделение");
	
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ПроверкаРаспределенияПоИсточникамФинансирования

// Выполняет проверку заполнения полей в результатах распределения по статьям, если есть ошибки заполнения,
// значению параметра Отказ буден установлено Истина.
// Вызывается из обработчиков проверки заполнения объектов.
//
// Параметры
// 			ДокументОбъект - ДокументОбъект - документ, табличные части которого проверяются.
// 			ИменаТаблиц - Строка - имена табличных частей документа для проверки, например "Начисления,НачисленияПерерасчет,Удержания,НДФЛ".
// 			Отказ - Булево - если есть ошибки заполнение, параметру будет установлено значение Истина.
// 			ВидНачисленияВШапке - ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний, 
// 								ПланВидовРасчетаСсылка.Удержания, ПланВидовРасчетаСсылка.Начисления,
// 								СправочникСсылка.ВидыВыплатБывшимСотрудникам,
// 								СправочникСсылка.ВидыПрочихДоходовФизическихЛиц - необязательный.
//
Процедура ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(ДокументОбъект, ИменаТаблиц, Отказ, ВидНачисленияВШапке = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Возврат;
	КонецЕсли;
	
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	ТаблицаРезультатовПроверки = Новый ТаблицаЗначений;
	ТаблицаРезультатовПроверки.Колонки.Добавить("ИмяТаблицы",  Новый ОписаниеТипов("Строка"));
	ТаблицаРезультатовПроверки.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число"));
	ТаблицаРезультатовПроверки.Колонки.Добавить("ЕстьОшибкиЗаполнения",  Новый ОписаниеТипов("Булево"));
	ТаблицаРезультатовПроверки.Колонки.Добавить("ЕстьОшибкиРаспределения",  Новый ОписаниеТипов("Булево"));
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	ИменаТаблицРаспределенияРезультатов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблиц, ",", Истина, Истина);
	
	Для Каждого ИмяТаблицыНачисленийУдержаний Из ИменаТаблицРаспределенияРезультатов Цикл
		
		ИмяТаблицыРаспределениеРезультатовРасчета = ИмяТаблицыДляРаспределенияРезультата(ИмяТаблицыНачисленийУдержаний);
		ТаблицаРаспределенияРезультатовИзХранилища = ДокументОбъект[ИмяТаблицыРаспределениеРезультатовРасчета];
		
		ИмяРеквизитаИдентификаторСтроки = ИмяРеквизитаИдентификаторСтрокиПоИмениТаблицы(ИмяТаблицыНачисленийУдержаний);
		
		Для каждого СтрокаТЧ Из ДокументОбъект[ИмяТаблицыНачисленийУдержаний] Цикл
			
			Отбор = Новый Структура("ИдентификаторСтроки", СтрокаТЧ[ИмяРеквизитаИдентификаторСтроки]);
			РезультатыРаспределения = ТаблицаРаспределенияРезультатовИзХранилища.НайтиСтроки(Отбор);
			
			РезультатПроверкиСтроки = ПроверитьРезультатыРаспределенияНачисленийУдержанийВСтрокеОбъекта(
				СтрокаТЧ, РезультатыРаспределения, ИмяТаблицыНачисленийУдержаний, НачислениеУдержаниеВидОперации, РаботаВБюджетномУчреждении, ВидНачисленияВШапке);
			
			Если РезультатПроверкиСтроки.ЕстьОшибкиЗаполнения Или РезультатПроверкиСтроки.ЕстьОшибкиРаспределения Тогда
				
				НоваяСтрока = ТаблицаРезультатовПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПроверкиСтроки);
				НоваяСтрока.НомерСтроки = СтрокаТЧ.НомерСтроки;
				НоваяСтрока.ИмяТаблицы  = ИмяТаблицыНачисленийУдержаний;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаРезультатовПроверки.Количество() > 0 Тогда
		
		МаксимальноСообщений = 10;
		ВыводимыхСообщений = 0;
		НевыводимыхСообщений = 0;
		
		МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
		ПредставленияТаблиц = Новый Соответствие;
		
		Для каждого СтрокаТаблицы Из ТаблицаРезультатовПроверки Цикл
			
			Отказ = Истина;
			
			ПредставлениеТаблицы = ПредставленияТаблиц.Получить(СтрокаТаблицы.ИмяТаблицы);
			Если ПредставлениеТаблицы = Неопределено Тогда
				
				ПредставлениеТаблицы = МетаданныеДокумента.ТабличныеЧасти.Найти(СтрокаТаблицы.ИмяТаблицы).Синоним;
				ПредставленияТаблиц.Вставить(СтрокаТаблицы.ИмяТаблицы, ПредставлениеТаблицы);
				
			КонецЕсли;
			
			Если ВыводимыхСообщений > МаксимальноСообщений Тогда
				НевыводимыхСообщений = НевыводимыхСообщений + 1;
			Иначе
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'В строке %1 таблицы %2 обнаружены незаполненные поля при распределении результата'"),
						СтрокаТаблицы.НомерСтроки,
						ПредставлениеТаблицы),, 
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						СтрШаблон("Объект.%1", СтрокаТаблицы.ИмяТаблицы),
						СтрокаТаблицы.НомерСтроки,
						"КомандаРедактированияРаспределения"),, 
					Отказ);
				ВыводимыхСообщений = ВыводимыхСообщений + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗначенияСтатейРасходовПоУмолчанию

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата
//	соответствующий способу расчетов ОплатаТруда.
Функция СтатьяОплатаТруда() Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		ОплатаТруда = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	Иначе
		ОплатаТруда = СтатьяРасходов211();
	КонецЕсли;
	
	Возврат ОплатаТруда;
	
КонецФункции

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата с кодом 211.
Функция СтатьяРасходов211() Экспорт
	
	Статья211 = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Статья211 = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("211");
	КонецЕсли;

	Возврат Статья211;
	
КонецФункции

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата с кодом 212.
Функция СтатьяРасходов212() Экспорт
	
	Статья = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Статья = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("212");
	КонецЕсли;

	Возврат Статья;
	
КонецФункции

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата с кодом 213.
Функция СтатьяРасходов213() Экспорт
	
	Статья213 = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Статья213 = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("213");
	КонецЕсли;
	
	Возврат Статья213;
	
КонецФункции 

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата с кодом 266.
Функция СтатьяРасходов266() Экспорт
	
	Статья = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Статья = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("266");
	КонецЕсли;

	Возврат Статья;
	
КонецФункции

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата с кодом 264.
Функция СтатьяРасходов264() Экспорт
	
	Статья = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Статья = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("264");
	КонецЕсли;

	Возврат Статья;
	
КонецФункции

// Возвращает статью расходов, которая используется по умолчанию для 
//	сохраняемого заработка на период трудоустройства.
//
// Параметры:
//  ПериодРегистрации - дата, на которую определяется статья.
//
// Возвращаемое значение:
//   Статья расходов - тип СправочникСсылка.СтатьиРасходовЗарплата.
//
Функция СтатьяРасходовДляСохраняемогоЗаработкаНаПериодТрудоустройства(ПериодРегистрации) Экспорт

	Если СтатьиРасходовПоПриказу209нПрименяются(ПериодРегистрации) Тогда
		Возврат СтатьяРасходов264();
	Иначе
		Возврат СтатьяРасходов211();
	КонецЕсли;
	
КонецФункции

// Возвращает статью расходов, которая используется по умолчанию для 
//	компенсации за задержку зарплаты в бюджетных учреждениях.
//
// Параметры:
//  ПериодРегистрации - дата, на которую определяется статья.
//
// Возвращаемое значение:
//   Статья расходов - тип СправочникСсылка.СтатьиРасходовЗарплата.
//
Функция СтатьяРасходовДляКомпенсацииЗаЗадержкуЗарплаты(ПериодРегистрации) Экспорт

	Если Не ЗначениеЗаполнено(ПериодРегистрации) Или ПериодРегистрации >= ДатаПриказа222н() Тогда
		Возврат СтатьяРасходов296();
	Иначе
		Возврат СтатьяРасходов290();
	КонецЕсли;
	
КонецФункции

// Возвращает статью расходов, которая используется по умолчанию для 
//	пособия на погребение, выплачиваемое стороннему лицу.
//
// Параметры:
//  ПериодРегистрации - дата, на которую определяется статья.
//
// Возвращаемое значение:
//   Статья расходов - тип СправочникСсылка.СтатьиРасходовЗарплата.
//
Функция СтатьяРасходовДляПособияНаПогребение(ПериодРегистрации) Экспорт

	Если Не ЗначениеЗаполнено(ПериодРегистрации) Или ПериодРегистрации >= ДатаПриказа222н() Тогда
		Возврат СтатьяРасходов265();
	Иначе
		Возврат СтатьяРасходов213();
	КонецЕсли;	

КонецФункции

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата
//	соответствующий способу расчетов РасчетыСКонтрагентами.
Функция СтатьяРасчетыСКонтрагентами() Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		РасчетыСКонтрагентами = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	Иначе
		РасчетыСКонтрагентами = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	КонецЕсли;
	
	Возврат РасчетыСКонтрагентами;
	
КонецФункции

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата
//	соответствующий способу расчетов ПрочиеРасчетыСПерсоналом.
Функция СтатьяПрочиеРасчетыСПерсоналом() Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		ПрочиеРасчетыСПерсоналом = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ПрочиеРасчетыСПерсоналом];
	Иначе
		ПрочиеРасчетыСПерсоналом = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПрочиеРасчетыСПерсоналом;
	
КонецФункции

#КонецОбласти

#Область Прочие

Процедура СвернутьТаблицуКоэффициентовРаспределенияСреднегоЗаработка(ТаблицаКоэффициентов) Экспорт

	ТаблицаКоэффициентов.Свернуть("СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете,ОблагаетсяЕНВД", "Коэффициент");

КонецПроцедуры

// Создает временную таблицу ВТФинансированиеПоДокументам.
// Используется при обновлении учета НДФЛ.
//
//	Параметры
//		МенеджерВременныхТаблиц, менеджер временных таблиц, содержит ВТ ВТДокументыКОбработке с полями
//			* Регистратор
//		ТипыДокументов, массив, содержит типы документов к обработке.
//
//	Временная таблица ВТФинансированиеПоДокументам содержит поля
//			* Регистратор
//			* СтатьяФинансирования
//			* СтатьяРасходов
//
Процедура СоздатьВТФинансированиеПоДокументам(МенеджерВременныхТаблиц, ТипыДокументов) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДокументовСФинансированием = Новый Массив;
	Для каждого ТипДокумента Из ТипыДокументов Цикл
		МдДокумент = Метаданные.НайтиПоТипу(ТипДокумента);
		Если МдДокумент.Реквизиты.Найти("СтатьяФинансирования") <> Неопределено
			И МдДокумент.Реквизиты.Найти("СтатьяРасходов") <> Неопределено Тогда
			ТипыДокументовСФинансированием.Добавить(ТипДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипыДокументовСФинансированием.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументовСФинансированием);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыКОбработке.Регистратор КАК Регистратор,
	|	ДокументыКОбработке.Регистратор.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДокументыКОбработке.Регистратор.СтатьяРасходов КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТФинансированиеПоДокументам
	|ИЗ
	|	ВТДокументыКОбработке КАК ДокументыКОбработке
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДокументыКОбработке.Регистратор) В (&ТипыДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодтверждениеВыплатыДоходов.Ссылка,
	|	ПодтверждениеВыплатыДоходов.Ведомость.СтатьяФинансирования,
	|	ПодтверждениеВыплатыДоходов.Ведомость.СтатьяРасходов
	|ИЗ
	|	Документ.ПодтверждениеВыплатыДоходов КАК ПодтверждениеВыплатыДоходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ПодтверждениеВыплатыДоходов.Ссылка = ДокументыКОбработке.Регистратор";
	Запрос.Выполнить();

КонецПроцедуры

// Формирует таблицу значений с коэффициентами распределения сохраняемого денежного содержания
// Параметры
//		РаспределениеСохраняемыхНачислений - Коллекция, содержит результаты распределения начислений,
//											сохраняемых при расчете сохраняемого ДС
//			* Начисление
//			* РаспределениеПоСтатьям - ТаблицаЗначений, структура см НоваяТаблицаРаспределениеРезультатовНачислений
//			* Сотрудник
//		НачисленияДляРаспределения - ТаблицаЗначений, содержит начисления, учитываемые по фактическим начислениям, а также строки с 
//							с результатами расчета РК и СН
//			* Начисление
//			* Результат
//			* Сотрудник
//			* Подразделение
//		НазначениеРасчета
//		Организация
//		ПериодРасчета
//		ДатаНачалаСобытия
//
//	Возвращаемое значение - ТаблицаЗначений, описание см НоваяТаблицаКоэффициентыРаспределенияСохраняемогоДС
//
Функция ТаблицаКоэффициентовРаспределенияСохраняемогоДС(РаспределениеСохраняемыхНачислений, НачисленияДляРаспределения, НазначениеРасчета, Организация, ПериодРасчета, ДатаНачалаСобытия) Экспорт
	
	ТаблицаКоэффициентов = НоваяТаблицаКоэффициентыРаспределенияСохраняемогоДС();
	ТаблицаКоэффициентов.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаКоэффициентов.Колонки.Коэффициент.Имя = "Результат";
	
	// Переносим в таблицу результаты распределения сохраняемых начислений.
	Для каждого СтрокаТЗ Из РаспределениеСохраняемыхНачислений Цикл
		
		Если СтрокаТЗ.РаспределениеПоСтатьям <> Неопределено Тогда
			
			Для каждого СтрокаРаспределения Из СтрокаТЗ.РаспределениеПоСтатьям Цикл
			
				НоваяСтрока = ТаблицаКоэффициентов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.Сотрудник 			= СтрокаТЗ.Сотрудник;
				НоваяСтрока.Начисление 			= СтрокаТЗ.Начисление;
				НоваяСтрока.НазначениеРасчета 	= НазначениеРасчета;
			
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаКоэффициентов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Заполним соответствие базовых в.р. для РК и СН, при условии, что стратегия отражения в бухучете - ПоБазовымРасчетам.
	БазовыеВидыРасчета = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияБазовыеВидыРасчета.Ссылка КАК Ссылка,
	|	НачисленияБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
	|ГДЕ
	|	НачисленияБазовыеВидыРасчета.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
	|	И НачисленияБазовыеВидыРасчета.Ссылка.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ОсновнойВР = Выборка.Ссылка;
		БазовыеВР = Новый Массив;
		Пока Выборка.Следующий() Цикл
			БазовыеВР.Добавить(Выборка.ВидРасчета);
		КонецЦикла;
		БазовыеВидыРасчета.Вставить(ОсновнойВР, БазовыеВР);
	КонецЦикла;
	
	ТаблицаРКиСН = НачисленияДляРаспределения.СкопироватьКолонки();
	
	Начисления = ОтражениеЗарплатыВУчете.НоваяТаблицаНачислений();
	
	ИдентификаторСтроки = 1;
	ПериодДействия = НачалоМесяца(ДатаНачалаСобытия);
	ДатаОкончания = КонецМесяца(ДатаНачалаСобытия);
	Для каждого СтрокаТЗ Из НачисленияДляРаспределения Цикл
		
		Если БазовыеВидыРасчета[СтрокаТЗ.Начисление] <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаРКиСН.Добавить(), СтрокаТЗ);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Организация 		= Организация;
		НоваяСтрока.ПериодДействия 		= ПериодДействия;
		НоваяСтрока.ДатаНачала 			= ДатаНачалаСобытия;
		НоваяСтрока.ДатаОкончания 		= ДатаОкончания;
		НоваяСтрока.Сумма 				= СтрокаТЗ.Результат;
		НоваяСтрока.ВидОперации 		= Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход;
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	
	Если Начисления.Количество() > 0 Тогда
		
		БухучетНачислений = БухучетНачислений(Организация, ПериодДействия, Начисления);
		ОтражениеЗарплатыВУчете.СвернутьТаблицу(БухучетНачислений);
		СтатьяРасходов211 = СтатьяРасходов211();
		
		Для каждого СтрокаТЗ Из БухучетНачислений Цикл
			НоваяСтрока = ТаблицаКоэффициентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Результат = СтрокаТЗ.Сумма;
			НоваяСтрока.НазначениеРасчета = НазначениеРасчета;
			НоваяСтрока.СтатьяРасходов = СтатьяРасходов211;
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаРКиСН Из ТаблицаРКиСН Цикл
		
		БазовыеВР = БазовыеВидыРасчета[СтрокаРКиСН.Начисление];
		ТаблицаРаспределения = ТаблицаКоэффициентов.СкопироватьКолонки();
		Для каждого СтрокаТЗ Из ТаблицаКоэффициентов Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.Начисление) И БазовыеВР.Найти(СтрокаТЗ.Начисление) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТаблицаРаспределения.Добавить(), СтрокаТЗ);
		КонецЦикла;
		
		ТаблицаРаспределения.Свернуть("ПодразделениеУчетаЗатрат,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете,ОблагаетсяЕНВД","Результат");
		Если ТаблицаРаспределения.Количество() > 0 Тогда
			ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаРКиСН.Результат, ТаблицаРаспределения, "Результат");
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из ТаблицаРаспределения Цикл
			НоваяСтрока = ТаблицаКоэффициентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.НазначениеРасчета = НазначениеРасчета;
			НоваяСтрока.Сотрудник = СтрокаРКиСН.Сотрудник;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаКоэффициентов.Колонки.Удалить("Начисление");
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаКоэффициентов);
	ТаблицаКоэффициентов.Колонки.Результат.Имя = "Коэффициент";
	
	Возврат ТаблицаКоэффициентов;

КонецФункции

// Формирует массив видов операций по зарплате, для которых не заполняется
// способ отражения зарплаты в бухучете.
//
// Возвращаемое значение:
// 	Массив
//
Функция ВидыОперацийПоЗарплатеБезСпособаОтражения() Экспорт

	РасходыБезСпособаОтражения = Новый Массив;
	РасходыБезСпособаОтражения.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
	РасходыБезСпособаОтражения.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	РасходыБезСпособаОтражения.Добавить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты);
	РасходыБезСпособаОтражения.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение);
	
	Возврат РасходыБезСпособаОтражения;

КонецФункции

// Функция определяет состав видов особых начислений, 
//	включаемых в состав расчетной базы.
//
Функция ВидыНачисленийДополненияРасчетнойБазыУдержаний() Экспорт
	
	ВидыНачислений = Новый Массив;
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов);
	
	Возврат ВидыНачислений;
	
КонецФункции

// Создает временную таблицу ВТСведенияОБухучетеЗарплатыСотрудников.
//
//	Параметры
//		МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу с именем, указанным в параметре ИмяВТ с полями
//			* Организация
//			* Подразделение
//			* ТерриторияВыполненияРаботВОрганизации
//			* Сотрудник
//			* Период
//		ИмяВТ - Строка - имя временной таблицы.
//
//	Временная таблица ВТСведенияОБухучетеЗарплатыСотрудников содержит поля
//			* Организация
//			* Подразделение
//			* ТерриторияВыполненияРаботВОрганизации
//			* Сотрудник
//			* Период
//			* СтатьяФинансирования
//			* СтатьяРасходов
//			* СпособОтраженияЗарплатыВБухучете
//			* ОтношениеКЕНВД
//
Процедура СоздатьВТСведенияОБухучетеЗарплатыСотрудников(МенеджерВТ, ИмяВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Организация КАК Организация,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Период КАК Период,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТИсходнаяТаблица
	|ИЗ
	|	ИмяВременнойТаблицы КАК Таблица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВТ);
	Запрос.Выполнить();
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТИсходнаяТаблица");
	
	// В менеджере будут таблицы с настройками.
	ИменаВременныхТаблиц = Новый Массив;
	ПрочитатьНастройкиБухучетаСоздатьВременныеТаблицы(МенеджерВТ, "ВТИсходнаяТаблица", ИменаВременныхТаблиц);
	// Получим итоговую таблицу без учета распределения.
	ИмяИтоговойТаблицы = "ВТСведенияОБухучетеЗарплатыСотрудниковВременная";
	СоздатьВТНастройкиБухучетаБезУчетаНастроекРаспределения(МенеджерВТ, "ВТИсходнаяТаблица", ИмяИтоговойТаблицы);
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, ИменаВременныхТаблиц);
	
	Запрос.УстановитьПараметр("СтатьяОплатаТруда", СтатьяОплатаТруда());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СтатьяОплатаТруда КАК СтатьяРасходов,
	|	&ПоляТаблицы КАК ПоляТаблицы
	|ПОМЕСТИТЬ ВТСведенияОБухучетеЗарплатыСотрудников
	|ИЗ
	|	ВТСведенияОБухучетеЗарплатыСотрудниковВременная КАК Таблица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы КАК ПоляТаблицы", "*");
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСведенияОБухучетеЗарплатыСотрудниковВременная");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
КонецПроцедуры

// Создает временную таблицу ВТНастройкиБухучетаСотрудниковДляАванса.
//
//	Параметры
//		МенеджерВТ - МенеджерВременныхТаблиц - в него помещается временная таблица ВТНастройкиБухучетаСотрудниковДляАванса.
//		Организация - СправочникСсылка.Организации
//		Период - Дата - определяет месяц, для которого получаются данные, любая дата месяца
//		Сотрудники - Массив
//
//	Временная таблица ВТНастройкиБухучетаСотрудников содержит поля
// 			* Организация
// 			* Сотрудник
// 			* Подразделение
// 			* СтатьяФинансирования
// 			* СтатьяРасходов
// 			* ДоляРаспределения
//
Процедура СоздатьВТНастройкиБухучетаСотрудниковДляАванса(МенеджерВТ, Организация, Период, Сотрудники) Экспорт
	
	КадровыеДанныеСтрока = "Подразделение,ТерриторияВыполненияРаботВОрганизации";
	ТаблицаСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, КадровыеДанныеСтрока, КонецМесяца(Период));
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Период КАК Период,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Таблица.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиДляАванса
	|ИЗ
	|	&ТаблицаСотрудников КАК Таблица";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиДляАванса");
	
	СоздатьВТНастройкиБухучетаСотрудников(Организация, Период, МенеджерВТ, "ВТСотрудникиДляАванса");
	УдалитьВТ.Добавить("ВТНастройкиБухучетаСотрудников");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиБухучета.Организация КАК Организация,
	|	НастройкиБухучета.Сотрудник КАК Сотрудник,
	|	НастройкиБухучета.Подразделение КАК Подразделение,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НастройкиБухучета.ДоляРаспределения) КАК ДоляРаспределения
	|ПОМЕСТИТЬ ВТНастройкиБухучетаСотрудниковДляАванса
	|ИЗ
	|	ВТНастройкиБухучетаСотрудников КАК НастройкиБухучета
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиБухучета.Организация,
	|	НастройкиБухучета.СтатьяФинансирования,
	|	НастройкиБухучета.СтатьяРасходов,
	|	НастройкиБухучета.Сотрудник,
	|	НастройкиБухучета.Подразделение";
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДанныеДляОтраженияЗарплатыВБухучете

// Расширенная реализация одноименной функции программного интерфейса,
// описание см ОтражениеЗарплатыВБухучете.ДанныеДляОтраженияЗарплатыВБухучете.
//
Функция ДанныеДляОтраженияЗарплатыВБухучете(Организация, ПериодРегистрации) Экспорт

	ДанныеДляОтражения = ОтражениеЗарплатыВБухучете.НоваяСтруктураДанныеДляОтраженияЗарплатыВБухучете();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		БухучетНачислений 	= БухучетНачисленийПоСтатьям(Организация, ПериодРегистрации);
		БухучетВзносов 		= БухучетВзносовПоСтатьям(Организация, ПериодРегистрации);
		ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы 	= БухучетНачисленийИВзносов(БухучетНачислений, БухучетВзносов);
		БухучетНачислений 	= Неопределено;
		БухучетВзносов 		= Неопределено;
		
		ДанныеДляОтражения.НачисленныйНДФЛ 		= БухучетНДФЛПоСтатьям(Организация, ПериодРегистрации);
		ДанныеДляОтражения.УдержаннаяЗарплата 	= БухучетУдержанийПоСтатьям(Организация, ПериодРегистрации);
		
	Иначе
		
		ТаблицаНачислений = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНачислений(Организация, ПериодРегистрации);
		БухучетНачислений = БухучетНачислений(Организация, ПериодРегистрации, ТаблицаНачислений);
		ТаблицаНачислений 	= Неопределено;
		
		ТаблицаВзносов = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеВзносов(Организация, ПериодРегистрации);
		БухучетВзносов = ОтражениеЗарплатыВБухучете.БухучетСтраховыхВзносов(Организация, ПериодРегистрации, ТаблицаВзносов, БухучетНачислений);
		ТаблицаВзносов 		= Неопределено;
		
		ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы = БухучетНачисленийИВзносов(БухучетНачислений, БухучетВзносов);
		БухучетНачислений 	= Неопределено;
		БухучетВзносов 		= Неопределено;
		
		ТаблицаНДФЛ = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНДФЛ(Организация, ПериодРегистрации);
		ДанныеДляОтражения.НачисленныйНДФЛ = ОтражениеЗарплатыВБухучете.БухучетНДФЛ(ТаблицаНДФЛ);
		ТаблицаНДФЛ = Неопределено;
		
		ТаблицаУдержаний = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеУдержаний(Организация, ПериодРегистрации);
		ДанныеДляОтражения.УдержаннаяЗарплата = БухучетУдержаний(ТаблицаУдержаний, ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы);
		
	КонецЕсли;
	
	Возврат ДанныеДляОтражения;

КонецФункции

// Формирует данные для заполнения таблиц документа ОтражениеЗарплатыВБухучете.
//
// Параметры:
// 		ПараметрыДляЗаполнения - Структура - описание см ПараметрыДляЗаполненияТаблицДокумента
//
// Возвращаемое значение:
// 		Структура
//			* НачисленнаяЗарплатаИВзносы - ТаблицаЗначений - соответствует структуре ТЧ НачисленнаяЗарплатаИВзносы
//			* НачисленныйНДФЛ - ТаблицаЗначений - соответствует структуре ТЧ НачисленныйНДФЛ
//			* УдержаннаяЗарплата - ТаблицаЗначений - соответствует структуре ТЧ УдержаннаяЗарплата
//			* ВыплатаОтпусковЗаСчетРезерва - ТаблицаЗначений - соответствует структуре ТЧ ВыплатаОтпусковЗаСчетРезерва
//
Функция ДанныеДляЗаполненияТаблицДокумента(ПараметрыДляЗаполнения) Экспорт
	
	Организация 	 	= ПараметрыДляЗаполнения.Организация;
	ПериодРегистрации 	= ПараметрыДляЗаполнения.ПериодРегистрации;
	ДокументСсылка 		= ПараметрыДляЗаполнения.ДокументСсылка;
	
	РезультатЗаполнения = ДанныеДляОтраженияЗарплатыВБухучете(Организация, ПериодРегистрации);
	РезультатЗаполнения.Вставить("ВыплатаОтпусковЗаСчетРезерва", ОтражениеЗарплатыВБухучете.НоваяТаблицаНачисленныеОтпуска());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		НастройкиРезервовОтпусков = МодульРезервОтпусков.НастройкиРезервовОтпусков(Организация, ПериодРегистрации);
		Если НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ Тогда
			ПараметрыДляСписанияРасходов = МодульРезервОтпусков.ПараметрыДляСписанияРасходовПоОплатеОтпуска();
			ПараметрыДляСписанияРасходов.Организация 						= Организация;
			ПараметрыДляСписанияРасходов.ПериодРегистрации 					= ПериодРегистрации;
			ПараметрыДляСписанияРасходов.НачисленнаяЗарплатаИВзносы 		= РезультатЗаполнения.НачисленнаяЗарплатаИВзносы;
			ПараметрыДляСписанияРасходов.НачисленныеОтпуска 			 	= РезультатЗаполнения.ВыплатаОтпусковЗаСчетРезерва;
			ПараметрыДляСписанияРасходов.УчитыватьОперацииТекущегоМесяца 	= Ложь;
			МодульРезервОтпусков.СписатьРасходыПоОтпускамЗаСчетОценочныхОбязательств(ПараметрыДляСписанияРасходов);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ДополнитьДанныеДокументаМестомВСтруктуреПредприятия(РезультатЗаполнения, "НачисленнаяЗарплатаИВзносы,УдержаннаяЗарплата");
	КонецЕсли;
	
	// Таблицы в данных заполнения содержат различные вспомогательные колонки.
	// Приведем структуру таблиц к структуре табличных частей документа.
	ОтражениеЗарплатыВБухучете.ПривестиРезультатыЗаполненияКСтруктуреТаблицДокумента(РезультатЗаполнения, ДокументСсылка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасчетовЗарплатыВБухучете");
		Модуль.ОтобратьРезультатыЗаполненияТаблицДокумента(РезультатЗаполнения, ПараметрыДляЗаполнения);
	КонецЕсли;
	
	ОтражениеЗарплатыВБухучете.СвернутьДанныеДляОтраженияЗарплатыВБухучете(РезультатЗаполнения, "");
	ОтражениеЗарплатыВБухучете.УпорядочитьДанныеДляОтраженияЗарплатыВБухучете(РезультатЗаполнения);
	
	Возврат РезультатЗаполнения;

КонецФункции

Функция БухучетНачислений(Организация, Период, ТаблицаНачислений)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ПериодРегистрации", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	&Организация КАК Организация,
	|	НачисленияДляРаспределения.Сотрудник КАК Сотрудник,
	|	НачисленияДляРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДляРаспределения.Подразделение КАК Подразделение,
	|	НачисленияДляРаспределения.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияДляРаспределения.Начисление КАК Начисление,
	|	НачисленияДляРаспределения.ВидОперации КАК ВидОперации,
	|	НачисленияДляРаспределения.ДатаНачала КАК ДатаНачала,
	|	НачисленияДляРаспределения.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияДляРаспределения.Сумма КАК Сумма,
	|	НачисленияДляРаспределения.ДокументОснование КАК ДокументОснование,
	|	НачисленияДляРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияДляРаспределения.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорамГПХ
	|ИЗ
	|	&ТаблицаНачислений КАК НачисленияДляРаспределения
	|ГДЕ
	|	НачисленияДляРаспределения.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	&Организация КАК Организация,
	|	НачисленияДляРаспределения.Сотрудник КАК Сотрудник,
	|	НачисленияДляРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДляРаспределения.Подразделение КАК Подразделение,
	|	НачисленияДляРаспределения.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияДляРаспределения.ВидОперации КАК ВидОперации,
	|	НачисленияДляРаспределения.Начисление КАК Начисление,
	|	НачисленияДляРаспределения.ДатаНачала КАК ДатаНачала,
	|	НачисленияДляРаспределения.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияДляРаспределения.Сумма КАК Сумма,
	|	НачисленияДляРаспределения.ДокументОснование КАК ДокументОснование,
	|	НачисленияДляРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияДляРаспределения.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ЛОЖЬ КАК Сторно,
	|	ЛОЖЬ КАК ФиксСторно,
	|	ЛОЖЬ КАК РассчитыватьПоРазовымНачислениямДокумента
	|ПОМЕСТИТЬ ВТНачисленияБезДоговоровГПХ
	|ИЗ
	|	&ТаблицаНачислений КАК НачисленияДляРаспределения
	|ГДЕ
	|	НЕ НачисленияДляРаспределения.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	ВТНачисленияБезДоговоровГПХ КАК Таблица";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.ВГраница();
	
	ИсходныеДанные = ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете();
	ИсходныеДанные.Организация    			  = Организация;
	ИсходныеДанные.МесяцНачисления 			  = Период;
	ИсходныеДанные.МенеджерВременныхТаблиц    = Запрос.МенеджерВременныхТаблиц;
	
	ИменаВТ = Новый Массив;
	// ВТБухучетНачисленияПоДоговорамГПХ
	Если Не РезультатЗапроса[КоличествоРезультатов-1].Пустой() Тогда
		ИсходныеДанные.ИмяВТНачисления = "ВТНачисленияПоДоговорамГПХ";
		ПолучитьБухучетНачисленийПоДоговорамСоздатьВТ(ИсходныеДанные, "ВТБухучетНачисленияПоДоговорамГПХ");
		ИменаВТ.Добавить("ВТБухучетНачисленияПоДоговорамГПХ");
	КонецЕсли;
	
	// ВТБухучетНачисленияБезДоговоровГПХ
	Если Не РезультатЗапроса[КоличествоРезультатов].Пустой() Тогда
		ИсходныеДанные.ИмяВТНачисления = "ВТНачисленияБезДоговоровГПХ";
		ПолучитьБухучетНачисленийБезДоговоровСоздатьВТ(ИсходныеДанные, "ВТБухучетНачисленияБезДоговоровГПХ");
		ИменаВТ.Добавить("ВТБухучетНачисленияБезДоговоровГПХ");
	КонецЕсли;
	
	БухучетНачислений = НоваяТаблицаДанныеДляОтраженияВБухучетеНачислений();
	
	Для каждого ИмяВТ Из ИменаВТ Цикл
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ВидОперации КАК ВидОперации,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА Начисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ Начисления.ДатаНачала < Начисления.ПериодРегистрации
		|			ТОГДА Начисления.ПериодРегистрации
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
		|	КОНЕЦ КАК ПериодПринятияРасходов,
		|	ВЫБОР
		|		КОГДА БухучетНачислений.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА Начисления.Подразделение
		|		ИНАЧЕ БухучетНачислений.ПодразделениеУчетаЗатрат
		|	КОНЕЦ КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БухучетНачислений.Сумма КАК Сумма
		|ИЗ
		|	ВТБухучетНачислений КАК БухучетНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО БухучетНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачислений", ИмяВТ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", СтрЗаменить(ИмяВТ,"Бухучет",""));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(БухучетНачислений.Добавить(), Выборка);
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат БухучетНачислений;
	
КонецФункции

Функция БухучетУдержаний(ТаблицаУдержаний, ТаблицаНачислений)
	
	НоваяТаблицаУдержаний = ОтражениеЗарплатыВБухучете.НоваяТаблицаБухучетУдержаннаяЗарплата();
	НастройкиУдержаний = ОписаниеУдержанийДляОформленияКассовогоЧека();
	
	Начисления = ТаблицаНачислений.Скопировать(,"Сотрудник,Подразделение,ПодразделениеУчетаЗатрат,Сумма");
	Начисления.Свернуть("Сотрудник,Подразделение,ПодразделениеУчетаЗатрат","Сумма");
	
	БазаНачислений = Начисления.СкопироватьКолонки();
	Для каждого СтрокаТЗ Из Начисления Цикл
		Если СтрокаТЗ.Подразделение <> СтрокаТЗ.ПодразделениеУчетаЗатрат
					И ЗначениеЗаполнено(СтрокаТЗ.ПодразделениеУчетаЗатрат) Тогда
			ЗаполнитьЗначенияСвойств(БазаНачислений.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	БазаНачислений.Индексы.Добавить("Сотрудник,Подразделение");
	ОтборСтрок = Новый Структура("Сотрудник,Подразделение");
	
	Для каждого СтрокаТЗ Из ТаблицаУдержаний Цикл
	
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТЗ);
		СтрокиБазы = БазаНачислений.НайтиСтроки(ОтборСтрок);
		
		ЯвляетсяОснованиемОформленияКассовогоЧека = Ложь;
		ОписаниеУдержанияДляЧека = "";
		Если НастройкиУдержаний[СтрокаТЗ.Удержание] <> Неопределено Тогда
			ЯвляетсяОснованиемОформленияКассовогоЧека = Истина;
			ОписаниеУдержанияДляЧека = НастройкиУдержаний[СтрокаТЗ.Удержание];
		КонецЕсли;
		
		Если СтрокиБазы.Количество() = 0 Тогда
			
			НоваяСтрока = НоваяТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ПодразделениеУчетаЗатрат = НоваяСтрока.Подразделение;
			НоваяСтрока.ЯвляетсяОснованиемОформленияКассовогоЧека = ЯвляетсяОснованиемОформленияКассовогоЧека;
			НоваяСтрока.ОписаниеУдержанияДляЧека = ОписаниеУдержанияДляЧека;
			
		Иначе
			
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиБазы,"Сумма");
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаТЗ.Сумма, Коэффициенты);
			
			Если Результаты = Неопределено Тогда
				
				НоваяСтрока = НоваяТаблицаУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ПодразделениеУчетаЗатрат = НоваяСтрока.Подразделение;
				НоваяСтрока.ЯвляетсяОснованиемОформленияКассовогоЧека = ЯвляетсяОснованиемОформленияКассовогоЧека;
				НоваяСтрока.ОписаниеУдержанияДляЧека = ОписаниеУдержанияДляЧека;
				
			Иначе
				
				Индекс = 0;
				Для Каждого СтрокаБазы Из СтрокиБазы Цикл
					
					НоваяСтрока = НоваяТаблицаУдержаний.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.Сумма = Результаты[Индекс];
					НоваяСтрока.ПодразделениеУчетаЗатрат = СтрокаБазы.ПодразделениеУчетаЗатрат;
					НоваяСтрока.ЯвляетсяОснованиемОформленияКассовогоЧека = ЯвляетсяОснованиемОформленияКассовогоЧека;
					НоваяСтрока.ОписаниеУдержанияДляЧека = ОписаниеУдержанияДляЧека;
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(НоваяТаблицаУдержаний);
	
	Возврат НоваяТаблицаУдержаний;
	
КонецФункции 

Функция БухучетНачисленийПоСтатьям(Организация, Период, ДополнительныеПараметры = Неопределено)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ОтражениеЗарплатыВУчете.СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(Период));
	Запрос.УстановитьПараметр("РаботаВБюджетномУчреждении", ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"));
	
	УсловиеПоСотрудникам = "ИСТИНА";
	УсловиеПоФизическимЛицам = "ИСТИНА";
	ИсключаемыйРегистратор = Неопределено;
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ДополнительныеПараметры.Свойство("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		
		Сотрудники = Неопределено;
		ДополнительныеПараметры.Свойство("Сотрудники", Сотрудники);
		Если Сотрудники <> Неопределено Тогда
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
			УсловиеПоСотрудникам = "БухучетНачислений.Сотрудник В(&Сотрудники)";
		КонецЕсли;
		
		ФизическиеЛица = Неопределено;
		ДополнительныеПараметры.Свойство("ФизическиеЛица", ФизическиеЛица);
		Если ФизическиеЛица <> Неопределено Тогда
			Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
			УсловиеПоФизическимЛицам = "БухучетНачислений.ФизическоеЛицо В(&ФизическиеЛица)";
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.НачислениеУдержание КАК Начисление,
	|	БухучетНачислений.ВидОперации КАК ВидОперации,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	|	СУММА(БухучетНачислений.ОтпускАвансом) КАК ОтпускАвансом,
	|	БухучетНачислений.ДокументОснование КАК ДокументОснование,
	|	СУММА(БухучетНачислений.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА БухучетНачислений.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ БухучетНачислений.ДатаНачала < &НачалоПериода
	|				ТОГДА &НачалоПериода
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(БухучетНачислений.ДатаНачала, МЕСЯЦ)
	|		КОНЕЦ КАК ПериодПринятияРасходов,
	|		БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БухучетНачислений.Сотрудник КАК Сотрудник,
	|		БухучетНачислений.Подразделение КАК Подразделение,
	|		БухучетНачислений.НачислениеУдержание КАК НачислениеУдержание,
	|		ВЫБОР
	|			КОГДА &РаботаВБюджетномУчреждении
	|					И БухучетНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускАвансом)
	|				ТОГДА НачислениеУдержаниеВидОперации.ВидОперации
	|			ИНАЧЕ БухучетНачислений.ВидОперации
	|		КОНЕЦ КАК ВидОперации,
	|		ВЫБОР
	|			КОГДА БухучетНачислений.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				ТОГДА БухучетНачислений.Подразделение
	|			ИНАЧЕ БухучетНачислений.ПодразделениеУчетаЗатрат
	|		КОНЕЦ КАК ПодразделениеУчетаЗатрат,
	|		БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ВЫБОР
	|			КОГДА НЕ &РаботаВБюджетномУчреждении
	|					И БухучетНачислений.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ИНАЧЕ БухучетНачислений.СтатьяРасходов
	|		КОНЕЦ КАК СтатьяРасходов,
	|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|		БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|		БухучетНачислений.ДокументОснование КАК ДокументОснование,
	|		БухучетНачислений.Сумма КАК Сумма,
	|		ВЫБОР
	|			КОГДА &РаботаВБюджетномУчреждении
	|					И БухучетНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускАвансом)
	|				ТОГДА БухучетНачислений.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОтпускАвансом
	|	ИЗ
	|		РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачислений
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК НачислениеУдержаниеВидОперации
	|			ПО БухучетНачислений.НачислениеУдержание = НачислениеУдержаниеВидОперации.НачислениеУдержание
	|	ГДЕ
	|		БухучетНачислений.Организация = &Организация
	|		И БухучетНачислений.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И (БухучетНачислений.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы))
	|				ИЛИ БухучетНачислений.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|					И (БухучетНачислений.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|						ИЛИ БухучетНачислений.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов)))
	|		И БухучетНачислений.Регистратор <> &ИсключаемыйРегистратор
	|		И &УсловиеПоСотрудникам
	|		И &УсловиеПоФизическимЛицам
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА БухучетНачислений.Период = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ БухучетНачислений.Период < &НачалоПериода
	|				ТОГДА &НачалоПериода
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(БухучетНачислений.Период, МЕСЯЦ)
	|		КОНЕЦ,
	|		БухучетНачислений.ФизическоеЛицо,
	|		БухучетНачислений.Сотрудник,
	|		БухучетНачислений.Подразделение,
	|		БухучетНачислений.НачислениеУдержание,
	|		БухучетНачислений.ВидОперации,
	|		БухучетНачислений.Подразделение,
	|		БухучетНачислений.СтатьяФинансирования,
	|		БухучетНачислений.СтатьяРасходов,
	|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачислений.ОблагаетсяЕНВД,
	|		БухучетНачислений.Период,
	|		БухучетНачислений.ДокументОснование,
	|		БухучетНачислений.Сумма,
	|		0
	|	ИЗ
	|		РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам КАК БухучетНачислений
	|	ГДЕ
	|		БухучетНачислений.Организация = &Организация
	|		И БухучетНачислений.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И БухучетНачислений.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|		И БухучетНачислений.Регистратор <> &ИсключаемыйРегистратор
	|		И &УсловиеПоСотрудникам
	|		И &УсловиеПоФизическимЛицам) КАК БухучетНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачислений.СтатьяРасходов,
	|	БухучетНачислений.ОблагаетсяЕНВД,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ДатаНачала,
	|	БухучетНачислений.НачислениеУдержание,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.ПериодПринятияРасходов,
	|	БухучетНачислений.ФизическоеЛицо,
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.Подразделение,
	|	БухучетНачислений.ВидОперации,
	|	БухучетНачислений.СтатьяФинансирования,
	|	БухучетНачислений.ДокументОснование
	|
	|ИМЕЮЩИЕ
	|	СУММА(БухучетНачислений.Сумма) <> 0";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотрудникам", УсловиеПоСотрудникам);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоФизическимЛицам", УсловиеПоФизическимЛицам);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция БухучетУдержанийПоСтатьям(Организация, ПериодРегистрации)

	БухучетУдержаний = ОтражениеЗарплатыВБухучете.НоваяТаблицаБухучетУдержаннаяЗарплата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(ПериодРегистрации));
	ВидыОсобыхНачисленийИУдержанийНДФЛ = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ();
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БухучетУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетУдержаний.Сотрудник КАК Сотрудник,
	|	БухучетУдержаний.ВидОперации КАК ВидОперации,
	|	БухучетУдержаний.Подразделение КАК Подразделение,
	|	БухучетУдержаний.ДатаНачала КАК ДатаНачала,
	|	БухучетУдержаний.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетУдержаний.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетУдержаний.Контрагент КАК Контрагент,
	|	СУММА(БухучетУдержаний.Сумма) КАК Сумма,
	|	БухучетУдержаний.ЯвляетсяОснованиемОформленияКассовогоЧека КАК ЯвляетсяОснованиемОформленияКассовогоЧека,
	|	БухучетУдержаний.ОписаниеУдержанияДляЧека КАК ОписаниеУдержанияДляЧека
	|ИЗ
	|	(ВЫБРАТЬ
	|		БухучетУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БухучетУдержаний.Сотрудник КАК Сотрудник,
	|		БухучетУдержаний.ВидОперации КАК ВидОперации,
	|		БухучетУдержаний.Подразделение КАК Подразделение,
	|		БухучетУдержаний.ДатаНачала КАК ДатаНачала,
	|		ВЫБОР
	|			КОГДА БухучетУдержаний.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				ТОГДА БухучетУдержаний.Подразделение
	|			ИНАЧЕ БухучетУдержаний.ПодразделениеУчетаЗатрат
	|		КОНЕЦ КАК ПодразделениеУчетаЗатрат,
	|		БухучетУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
	|		БухучетУдержаний.СтатьяРасходов КАК СтатьяРасходов,
	|		БухучетУдержаний.Контрагент КАК Контрагент,
	|		БухучетУдержаний.Сумма КАК Сумма,
	|		ЕСТЬNULL(Удержания.ЯвляетсяОснованиемОформленияКассовогоЧека, ЛОЖЬ) КАК ЯвляетсяОснованиемОформленияКассовогоЧека,
	|		ВЫБОР
	|			КОГДА Удержания.ЯвляетсяОснованиемОформленияКассовогоЧека = ИСТИНА
	|				ТОГДА Удержания.Наименование
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ОписаниеУдержанияДляЧека
	|	ИЗ
	|		РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетУдержаний
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|			ПО БухучетУдержаний.НачислениеУдержание = Удержания.Ссылка
	|	ГДЕ
	|		БухучетУдержаний.Организация = &Организация
	|		И БухучетУдержаний.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И БухучетУдержаний.Сумма <> 0
	|		И (БухучетУдержаний.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|					И НЕ БухучетУдержаний.НачислениеУдержание В (&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|				ИЛИ БухучетУдержаний.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БухучетУдержаний.ФизическоеЛицо,
	|		БухучетУдержаний.Сотрудник,
	|		БухучетУдержаний.ВидОперации,
	|		БухучетУдержаний.Подразделение,
	|		&НачалоПериода,
	|		БухучетУдержаний.Подразделение,
	|		БухучетУдержаний.СтатьяФинансирования,
	|		БухучетУдержаний.СтатьяРасходов,
	|		БухучетУдержаний.Контрагент,
	|		БухучетУдержаний.Сумма,
	|		ЕСТЬNULL(Удержания.ЯвляетсяОснованиемОформленияКассовогоЧека, ЛОЖЬ),
	|		ВЫБОР
	|			КОГДА Удержания.ЯвляетсяОснованиемОформленияКассовогоЧека = ИСТИНА
	|				ТОГДА Удержания.Наименование
	|			ИНАЧЕ """"
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам КАК БухучетУдержаний
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|			ПО БухучетУдержаний.НачислениеУдержание = Удержания.Ссылка
	|	ГДЕ
	|		БухучетУдержаний.Организация = &Организация
	|		И БухучетУдержаний.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И БухучетУдержаний.Сумма <> 0
	|		И (БухучетУдержаний.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|					И НЕ БухучетУдержаний.НачислениеУдержание В (&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|				ИЛИ БухучетУдержаний.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму))) КАК БухучетУдержаний
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетУдержаний.Подразделение,
	|	БухучетУдержаний.ВидОперации,
	|	БухучетУдержаний.ПодразделениеУчетаЗатрат,
	|	БухучетУдержаний.СтатьяРасходов,
	|	БухучетУдержаний.Контрагент,
	|	БухучетУдержаний.ЯвляетсяОснованиемОформленияКассовогоЧека,
	|	БухучетУдержаний.СтатьяФинансирования,
	|	БухучетУдержаний.ОписаниеУдержанияДляЧека,
	|	БухучетУдержаний.ДатаНачала,
	|	БухучетУдержаний.Сотрудник,
	|	БухучетУдержаний.ФизическоеЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(БухучетУдержаний.Сумма) <> 0";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(БухучетУдержаний.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат БухучетУдержаний;

КонецФункции

Функция БухучетНДФЛПоСтатьям(Организация, ПериодРегистрации)
	
	БухучетНДФЛ = ОтражениеЗарплатыВБухучете.НоваяТаблицаБухучетНачисленныйНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	ВидыОсобыхНачисленийИУдержанийНДФЛ = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ(Истина);
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ВидыОсобыхНачисленийИУдержанийНДФЛ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БухучетНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНДФЛ.Сотрудник КАК Сотрудник,
	|	БухучетНДФЛ.ВидОперации КАК ВидОперации,
	|	БухучетНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНДФЛ.Сумма КАК Сумма,
	|	БухучетНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.КодПоОКАТО, """") КАК КодПоОКАТО,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.КодПоОКТМО, """") КАК КодПоОКТМО,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.КПП, """") КАК КПП,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, """") КАК КодНалоговогоОргана
	|ИЗ
	|	(ВЫБРАТЬ
	|		БухучетНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БухучетНДФЛ.Сотрудник КАК Сотрудник,
	|		БухучетНДФЛ.ВидОперации КАК ВидОперации,
	|		БухучетНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
	|		БухучетНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|		СУММА(БухучетНДФЛ.Сумма) КАК Сумма,
	|		БухучетНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|	ИЗ
	|		РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНДФЛ
	|	ГДЕ
	|		БухучетНДФЛ.Организация = &Организация
	|		И БухучетНДФЛ.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И БухучетНДФЛ.НачислениеУдержание В(&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		БухучетНДФЛ.ФизическоеЛицо,
	|		БухучетНДФЛ.СтатьяРасходов,
	|		БухучетНДФЛ.СтатьяФинансирования,
	|		БухучетНДФЛ.ВидОперации,
	|		БухучетНДФЛ.Сотрудник,
	|		БухучетНДФЛ.РегистрацияВНалоговомОргане
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(БухучетНДФЛ.Сумма) <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БухучетНДФЛ.ФизическоеЛицо,
	|		БухучетНДФЛ.Сотрудник,
	|		БухучетНДФЛ.ВидОперации,
	|		БухучетНДФЛ.СтатьяФинансирования,
	|		БухучетНДФЛ.СтатьяРасходов,
	|		СУММА(БухучетНДФЛ.Сумма),
	|		БухучетНДФЛ.РегистрацияВНалоговомОргане
	|	ИЗ
	|		РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам КАК БухучетНДФЛ
	|	ГДЕ
	|		БухучетНДФЛ.Организация = &Организация
	|		И БухучетНДФЛ.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И БухучетНДФЛ.НачислениеУдержание В(&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		БухучетНДФЛ.ФизическоеЛицо,
	|		БухучетНДФЛ.СтатьяРасходов,
	|		БухучетНДФЛ.СтатьяФинансирования,
	|		БухучетНДФЛ.ВидОперации,
	|		БухучетНДФЛ.Сотрудник,
	|		БухучетНДФЛ.РегистрацияВНалоговомОргане
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(БухучетНДФЛ.Сумма) <> 0) КАК БухучетНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО БухучетНДФЛ.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(БухучетНДФЛ.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат БухучетНДФЛ;
	
КонецФункции

Функция БухучетВзносовПоСтатьям(Организация, Период, Сотрудники = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(Организация);
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ОтражениеЗарплатыВУчете.СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(Период));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтраховыеВзносы.Подразделение КАК Подразделение,
	|	СтраховыеВзносы.Начисление КАК Начисление,
	|	НачислениеУдержаниеВидОперации.ВидОперации КАК ВидОперации,
	|	СУММА(0) КАК СтраховыеВзносы,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносы.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА СтраховыеВзносы.Подразделение
	|		ИНАЧЕ СтраховыеВзносы.ПодразделениеУчетаЗатрат
	|	КОНЕЦ КАК ПодразделениеУчетаЗатрат,
	|	СтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СтраховыеВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтраховыеВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	СтраховыеВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносы.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СтраховыеВзносы.ДатаНачала < &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СтраховыеВзносы.ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодПринятияРасходов,
	|	СтраховыеВзносы.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК НачислениеУдержаниеВидОперации
	|		ПО СтраховыеВзносы.Начисление = НачислениеУдержаниеВидОперации.НачислениеУдержание
	|ГДЕ
	|	СтраховыеВзносы.Организация = &Организация
	|	И СтраховыеВзносы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &УсловиеПоСотрудникам
	|
	|СГРУППИРОВАТЬ ПО
	|	СтраховыеВзносы.ФизическоеЛицо,
	|	НачислениеУдержаниеВидОперации.ВидОперации,
	|	СтраховыеВзносы.ОблагаетсяЕНВД,
	|	СтраховыеВзносы.СтатьяФинансирования,
	|	СтраховыеВзносы.СтатьяРасходов,
	|	СтраховыеВзносы.СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносы.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СтраховыеВзносы.ДатаНачала < &НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СтраховыеВзносы.ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ,
	|	СтраховыеВзносы.Подразделение,
	|	СтраховыеВзносы.Начисление,
	|	СтраховыеВзносы.ДатаНачала,
	|	СтраховыеВзносы.Сотрудник,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносы.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА СтраховыеВзносы.Подразделение
	|		ИНАЧЕ СтраховыеВзносы.ПодразделениеУчетаЗатрат
	|	КОНЕЦ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеПоСотрудникам", ?(Сотрудники = Неопределено,"","И СтраховыеВзносы.Сотрудник В(&Сотрудники)"));
	
	ТекстПолейВзносов = "";
	Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина)) Цикл
		ТекстПолейВзносов = ТекстПолейВзносов + "СУММА(СтраховыеВзносы." + ИмяПоля + ") КАК " + ИмяПоля + "," + Символы.ПС;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СУММА(0) КАК СтраховыеВзносы,", ТекстПолейВзносов);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция БухучетНачисленийИВзносов(БухучетНачислений, БухучетВзносов)
	
	НачислениеВидТрудаДляНУ = ОтражениеЗарплатыВБухучете.НачислениеВидНачисленияОплатыТрудаДляНУ();
	
	Таблица = ОтражениеЗарплатыВБухучете.НоваяТаблицаБухучетНачисленнаяЗарплатаИВзносы();
	Таблица.Колонки.Добавить("ОтпускАвансом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для каждого СтрокаТЗ Из БухучетНачислений Цикл
		Если СтрокаТЗ.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников
			Или СтрокаТЗ.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из БухучетВзносов Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(Таблица);
	
	СтрокиОтпускаАвансом = Новый Массив;
	Для каждого СтрокаТЗ Из Таблица Цикл
		
		СтрокаТЗ.ВидНачисленияОплатыТрудаДляНУ = НачислениеВидТрудаДляНУ[СтрокаТЗ.Начисление];
		
		Если СтрокаТЗ.ОтпускАвансом <> 0 И СтрокаТЗ.Сумма <> 0 Тогда
			СтрокиОтпускаАвансом.Добавить(СтрокаТЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляВзносов = СтрРазделить(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина), ",");
	Для каждого СтрокаТЗ Из СтрокиОтпускаАвансом Цикл
		
		ДополнительнаяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаТЗ);
		
		ДополнительнаяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускАвансом;
		
		ДоляАванса = СтрокаТЗ.ОтпускАвансом/СтрокаТЗ.Сумма;
		СтрокаТЗ.Сумма = СтрокаТЗ.Сумма - СтрокаТЗ.ОтпускАвансом;
		ДополнительнаяСтрока.Сумма = СтрокаТЗ.ОтпускАвансом;
		
		Для каждого ПолеВзносов Из ПоляВзносов Цикл
			
			СуммаВзносаАванс = Окр(СтрокаТЗ[ПолеВзносов] * ДоляАванса, 2);
			СуммаВзноса = СтрокаТЗ[ПолеВзносов] - СуммаВзносаАванс;
			
			СтрокаТЗ[ПолеВзносов] = СуммаВзноса;
			ДополнительнаяСтрока[ПолеВзносов] = СуммаВзносаАванс;
			
		КонецЦикла;
		
	КонецЦикла;
		
	Таблица.Колонки.Удалить("ОтпускАвансом");
		
	Возврат Таблица;
	
КонецФункции

Функция ОписаниеУдержанийДляОформленияКассовогоЧека()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьОснованияОформленияКассовогоЧека", ПолучитьФункциональнуюОпцию("ИспользоватьУдержанияЯвляющиесяОснованиемОформленияКассовогоЧека"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОснованияОформленияКассовогоЧека
	|			ТОГДА Удержания.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОписаниеУдержанияДляЧека
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИспользоватьОснованияОформленияКассовогоЧека
	|				ТОГДА Удержания.ЯвляетсяОснованиемОформленияКассовогоЧека
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Настройки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Настройки.Вставить(Выборка.Ссылка, Выборка.ОписаниеУдержанияДляЧека);
	КонецЦикла;
	
	Возврат Настройки;

КонецФункции

#КонецОбласти

#Область ПолучениеНастроекБухучета

// Получает настройки бухучета по умолчанию, которые будут использоваться для распределения
// результатов расчета по  т.н. "по базе по умолчанию", когда нет точных сведений
// для распределения результатов, но поля бухучета необходимо заполнить ожидаемыми значениями.
// Результат помещается во временную таблицу ВТНастройкиБухучета.
// Настройки получаются из всех мест хранения с учетом приоритетов, если в настройках указано распределение,
// оно игнорируется, т.е. каждой строке входной таблицы соответствует одна строка выходной таблицы.
//
// Поля таблицы ВТНастройкиБухучета
// 			* ИдентификаторСтроки
// 			* Организация
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 			* Сотрудник
// 			* Период
// 			* СтатьяФинансирования
// 			* СпособОтраженияЗарплатыВБухучете
// 			* ОтношениеКЕНВД
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу с именем, указанном в параметре ИмяИсходнойВТ.
// 			Таблица должна содержать поля:
// 			* Организация
// 			* Сотрудник
// 			* Период
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 			* ИдентификаторСтроки
// 	ИмяИсходнойВТ - Строка - имя временной таблицы для получения настроек.
//
Процедура СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(МенеджерВТ, ИмяИсходнойВТ)
	
	ИменаВТСПромежуточнымиРезультатами = Новый Массив;
	ПрочитатьНастройкиБухучетаСоздатьВременныеТаблицы(МенеджерВТ, ИмяИсходнойВТ, ИменаВТСПромежуточнымиРезультатами);
	
	ИмяИтоговойТаблицы = "ВТНастройкиБухучета";
	СоздатьВТНастройкиБухучетаБезУчетаНастроекРаспределения(МенеджерВТ, ИмяИсходнойВТ, ИмяИтоговойТаблицы);
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, ИменаВТСПромежуточнымиРезультатами);

КонецПроцедуры

// Создает временную таблицу ВТИсходнаяТаблицаДляНастроекБухучета, для получения "полных" настроек бухучета,
// в т.ч. учитывающих настройки бухучета заданные в виде распределения.
// Временная таблица ВТИсходнаяТаблицаДляНастроекБухучета содержит поля:
// 					* Организация
// 					* Подразделение
// 					* ТерриторияВыполненияРаботВОрганизации
// 					* Сотрудник
// 					* ИсходныйПериод - значение соответствует полю Период из таблицы ИмяИсходнойВТ.
// 					* Период - значение поля Период из таблицы ИмяИсходнойВТ, ограниченное значением из параметра Период.
// 					* ИдентификаторСтроки
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит временную таблицу с именем ИмяИсходнойВТ,
// 					должна содержать поля:
// 					* Сотрудник - имя поля может уточняться
// 					* Период - имя поля может уточняться
// 					может содержать поля:
// 					* Организация
// 					* Подразделение
// 					* ТерриторияВыполненияРаботВОрганизации
// 	ИмяИсходнойВТ - Строка - имя входной временной таблицы
// 	Период - Дата - определяет период, для которого получаются настройки,
// 					что бы не учитывать данные будущих периодов.
// Параметры - Структура - не обязательный, может содержать свойства:
// 					* ИмяПоляСотрудник - уточняет имя поля Сотрудник во временной таблице с именем ИмяИсходнойВТ.
// 					* ИмяПоляПериод - уточняет имя поля Период во временной таблице с именем ИмяИсходнойВТ.
// 					* Организация - передается Организация, если во временной таблице отсутствует поле Организация.
// 					* Подразделение - передается Подразделение, если во временной таблице отсутствует поле Подразделение.
// 					* ТерриторияВыполненияРаботВОрганизации - передается ТерриторияВыполненияРаботВОрганизации,
//						если во временной таблице отсутствует поле ТерриторияВыполненияРаботВОрганизации.
//
Процедура СоздатьВТИсходнаяТаблицаДляНастроекБухучета(МенеджерВТ, ИмяИсходнойВТ, Период, Параметры = Неопределено)
	
	ИмяПоляСотрудник 	= Неопределено;
	ИмяПоляПериод 		= Неопределено;
	Организация 		= Неопределено;
	Подразделение 		= Неопределено;
	ТерриторияВыполненияРаботВОрганизации = Неопределено;
	
	Если Параметры <> Неопределено Тогда
		Параметры.Свойство("ИмяПоляСотрудник", 	ИмяПоляСотрудник);
		Параметры.Свойство("ИмяПоляПериод", 	ИмяПоляПериод);
		Параметры.Свойство("Организация", 		Организация);
		Параметры.Свойство("Подразделение", 	Подразделение);
		Параметры.Свойство("ТерриторияВыполненияРаботВОрганизации", ТерриторияВыполненияРаботВОрганизации);
	КонецЕсли;
	
	ИмяПоляСотрудник = ?(ИмяПоляСотрудник = Неопределено, "Сотрудник", ИмяПоляСотрудник);
	ИмяПоляСотрудник = "Таблица." + ИмяПоляСотрудник;
	
	ИмяПоляПериод = ?(ИмяПоляПериод = Неопределено, "Период", ИмяПоляПериод);
	ИмяПоляПериод = "Таблица." + ИмяПоляПериод;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Если Организация = Неопределено Тогда
		ИмяПоляОрганизация = "Таблица.Организация";
	Иначе
		ИмяПоляОрганизация = "&Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если Подразделение = Неопределено Тогда
		ИмяПоляПодразделение = "Таблица.Подразделение";
	Иначе
		ИмяПоляПодразделение = "&Подразделение";
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	КонецЕсли;
	
	Если ТерриторияВыполненияРаботВОрганизации = Неопределено Тогда
		ИмяПоляТерритория = "Таблица.ТерриторияВыполненияРаботВОрганизации";
	Иначе
		ИмяПоляТерритория = "&ТерриторияВыполненияРаботВОрганизации";
		Запрос.УстановитьПараметр("ТерриторияВыполненияРаботВОрганизации", ТерриторияВыполненияРаботВОрганизации);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Период));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ИмяПоляОрганизация КАК Организация,
	|	&ИмяПоляПодразделение КАК Подразделение,
	|	&ИмяПоляТерритория КАК ТерриторияВыполненияРаботВОрганизации,
	|	&ИмяПоляСотрудник КАК Сотрудник,
	|	&ИмяПоляПериод КАК ИсходныйПериод,
	|	ВЫБОР
	|		КОГДА &ИмяПоляПериод > &ОкончаниеПериода
	|			ТОГДА &ОкончаниеПериода
	|		ИНАЧЕ &ИмяПоляПериод
	|	КОНЕЦ КАК Период,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТИсходнаяТаблицаДляНастроекБухучета
	|ИЗ
	|	ИмяВременнойТаблицы КАК Таблица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", 	ИмяИсходнойВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляСотрудник", 		ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляПериод", 			ИмяПоляПериод);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляПодразделение", 	ИмяПоляПодразделение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляТерритория", 		ИмяПоляТерритория);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляОрганизация", 	ИмяПоляОрганизация);
	Запрос.Выполнить();

КонецПроцедуры

// Получает настройки бухучета и помещает их во временные таблицы.
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу с именем ИмяИсходнойВТ.
// 	ИмяИсходнойВТ - Строка - имя временной таблицы.
// 	ИменаТаблицСНастройкамиБухучета - Массив - в массив будут помещены имена временных таблиц с настройками,
// 						используется для быстрого уничтожения этих таблиц.
//
Процедура ПрочитатьНастройкиБухучетаСоздатьВременныеТаблицы(МенеджерВТ, ИмяИсходнойВТ, ИменаТаблицСНастройкамиБухучета)
	
	ИменаТаблицСНастройкамиБухучета.Добавить("ВТБухучетОрганизаций");
	ИменаТаблицСНастройкамиБухучета.Добавить("ВТБухучетПодразделений");
	ИменаТаблицСНастройкамиБухучета.Добавить("ВТБухучетПодразделенийСРаспределением");
	ИменаТаблицСНастройкамиБухучета.Добавить("ВТБухучетТерриторий");
	ИменаТаблицСНастройкамиБухучета.Добавить("ВТБухучетТерриторийСРаспределением");
	ИменаТаблицСНастройкамиБухучета.Добавить("ВТБухучетСотрудников");
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Бухучет организации.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Организация КАК Организация,
	|	Таблица.Период КАК Период
	|ПОМЕСТИТЬ ВТОтборОрганизаций
	|ИЗ
	|	ВТИсходнаяТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериоды.Организация КАК Организация,
	|	МаксимальныеПериоды.Период КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	БухучетЗарплаты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплаты.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ЛОЖЬ КАК ПодразделениеУчетаЗатратЗаполнено,
	|	БухучетЗарплаты.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансированияЗаполнена,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
	|	БухучетЗарплаты.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВДЗаполнено
	|ПОМЕСТИТЬ ВТБухучетОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Организация КАК Организация,
	|		Таблица.Период КАК Период,
	|		МАКСИМУМ(БухучетЗарплаты.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТОтборОрганизаций КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплаты
	|			ПО Таблица.Организация = БухучетЗарплаты.Организация
	|				И Таблица.Период >= БухучетЗарплаты.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Организация,
	|		Таблица.Период) КАК МаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплаты
	|		ПО МаксимальныеПериоды.Организация = БухучетЗарплаты.Организация
	|			И МаксимальныеПериоды.ПериодРегистра = БухучетЗарплаты.Период
	|ГДЕ
	|	НЕ(БухучетЗарплаты.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|				И БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|				И БухучетЗарплаты.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организаций.Организация КАК Организация
	|ИЗ
	|	ВТОтборОрганизаций КАК Организаций";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходнаяТаблица", ИмяИсходнойВТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Организация = Выборка.Организация;
	
	УдалитьВТ.Добавить("ВТОтборОрганизаций");
	
	ИспользоватьОбособленныеТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", Организация));
	
	// Бухучет подразделений.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.Период КАК Период
	|ПОМЕСТИТЬ ВТОтборПодразделений
	|ИЗ
	|	ВТИсходнаяТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериоды.Подразделение КАК Подразделение,
	|	МаксимальныеПериоды.Период КАК Период,
	|	БухучетЗарплаты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплаты.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ВЫБОР
	|		КОГДА БухучетЗарплаты.ДоляРаспределения = 0
	|			ТОГДА 1
	|		ИНАЧЕ БухучетЗарплаты.ДоляРаспределения
	|	КОНЕЦ КАК ДоляРаспределения,
	|	БухучетЗарплаты.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТБухучетПодразделенийВесь
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Подразделение КАК Подразделение,
	|		Таблица.Период КАК Период,
	|		МАКСИМУМ(БухучетЗарплаты.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТОтборПодразделений КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыПодразделений КАК БухучетЗарплаты
	|			ПО Таблица.Подразделение = БухучетЗарплаты.Подразделение
	|				И Таблица.Период >= БухучетЗарплаты.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Подразделение,
	|		Таблица.Период) КАК МаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыПодразделений КАК БухучетЗарплаты
	|		ПО МаксимальныеПериоды.Подразделение = БухучетЗарплаты.Подразделение
	|			И МаксимальныеПериоды.ПериодРегистра = БухучетЗарплаты.Период
	|ГДЕ
	|	НЕ(БухучетЗарплаты.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|				И БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|				И БухучетЗарплаты.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Бухучет.Подразделение КАК Подразделение,
	|	Бухучет.Период КАК Период,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Бухучет.ИдентификаторСтроки) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТБухучетПодразделенийСтрокиСРаспределением
	|ИЗ
	|	ВТБухучетПодразделенийВесь КАК Бухучет
	|
	|СГРУППИРОВАТЬ ПО
	|	Бухучет.Подразделение,
	|	Бухучет.Период
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Бухучет.ИдентификаторСтроки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетПодразделений.Подразделение КАК Подразделение,
	|	БухучетПодразделений.Период КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	БухучетПодразделений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетПодразделений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетПодразделений.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ЛОЖЬ КАК ПодразделениеУчетаЗатратЗаполнено,
	|	БухучетПодразделений.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансированияЗаполнена,
	|	БухучетПодразделений.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
	|	БухучетПодразделений.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВДЗаполнено
	|ПОМЕСТИТЬ ВТБухучетПодразделений
	|ИЗ
	|	ВТБухучетПодразделенийВесь КАК БухучетПодразделений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетПодразделенийСтрокиСРаспределением КАК СтрокиСРаспределением
	|		ПО БухучетПодразделений.Подразделение = СтрокиСРаспределением.Подразделение
	|			И БухучетПодразделений.Период = СтрокиСРаспределением.Период
	|ГДЕ
	|	СтрокиСРаспределением.КоличествоСтрок ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетПодразделений.Подразделение КАК Подразделение,
	|	БухучетПодразделений.Период КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	БухучетПодразделений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетПодразделений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетПодразделений.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	БухучетПодразделений.ДоляРаспределения КАК ДоляРаспределения,
	|	ЛОЖЬ КАК ПодразделениеУчетаЗатратЗаполнено,
	|	БухучетПодразделений.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансированияЗаполнена,
	|	БухучетПодразделений.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
	|	БухучетПодразделений.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВДЗаполнено
	|ПОМЕСТИТЬ ВТБухучетПодразделенийСРаспределением
	|ИЗ
	|	ВТБухучетПодразделенийВесь КАК БухучетПодразделений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетПодразделенийСтрокиСРаспределением КАК СтрокиСРаспределением
	|		ПО БухучетПодразделений.Подразделение = СтрокиСРаспределением.Подразделение
	|			И БухучетПодразделений.Период = СтрокиСРаспределением.Период";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходнаяТаблица", ИмяИсходнойВТ);
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТОтборПодразделений");
	УдалитьВТ.Добавить("ВТБухучетПодразделенийВесь");
	УдалитьВТ.Добавить("ВТБухучетПодразделенийСтрокиСРаспределением");
	
	// Бухучет территорий.
	Если Не ИспользоватьОбособленныеТерритории Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК ТерриторияВыполненияРаботВОрганизации,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВД,
		|	ЛОЖЬ КАК ПодразделениеУчетаЗатратЗаполнено,
		|	ЛОЖЬ КАК СтатьяФинансированияЗаполнена,
		|	ЛОЖЬ КАК СпособОтраженияЗаполнен,
		|	ЛОЖЬ КАК ОтношениеКЕНВДЗаполнено
		|ПОМЕСТИТЬ ВТБухучетТерриторий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК ТерриторияВыполненияРаботВОрганизации,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВД,
		|	0 КАК ДоляРаспределения,
		|	ЛОЖЬ КАК ПодразделениеУчетаЗатратЗаполнено,
		|	ЛОЖЬ КАК СтатьяФинансированияЗаполнена,
		|	ЛОЖЬ КАК СпособОтраженияЗаполнен,
		|	ЛОЖЬ КАК ОтношениеКЕНВДЗаполнено
		|ПОМЕСТИТЬ ВТБухучетТерриторийСРаспределением";
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	Таблица.Период КАК Период
		|ПОМЕСТИТЬ ВТОтборТерриторий
		|ИЗ
		|	ВТИсходнаяТаблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеПериоды.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	МаксимальныеПериоды.Период КАК Период,
		|	БухучетЗарплаты.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплаты.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ВЫБОР
		|		КОГДА БухучетЗарплаты.ДоляРаспределения = 0
		|			ТОГДА 1
		|		ИНАЧЕ БухучетЗарплаты.ДоляРаспределения
		|	КОНЕЦ КАК ДоляРаспределения,
		|	БухучетЗарплаты.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТБухучетТерриторийВесь
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|		Таблица.Период КАК Период,
		|		МАКСИМУМ(БухучетЗарплаты.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТОтборТерриторий КАК Таблица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыТерриторийВыполненияРабот КАК БухучетЗарплаты
		|			ПО Таблица.ТерриторияВыполненияРаботВОрганизации = БухучетЗарплаты.ТерриторияВыполненияРабот
		|				И Таблица.Период >= БухучетЗарплаты.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Таблица.ТерриторияВыполненияРаботВОрганизации,
		|		Таблица.Период) КАК МаксимальныеПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыТерриторийВыполненияРабот КАК БухучетЗарплаты
		|		ПО МаксимальныеПериоды.ТерриторияВыполненияРаботВОрганизации = БухучетЗарплаты.ТерриторияВыполненияРабот
		|			И МаксимальныеПериоды.ПериодРегистра = БухучетЗарплаты.Период
		|ГДЕ
		|	НЕ(БухучетЗарплаты.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|				И БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|				И БухучетЗарплаты.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Бухучет.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	Бухучет.Период КАК Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Бухучет.ИдентификаторСтроки) КАК КоличествоСтрок
		|ПОМЕСТИТЬ ВТБухучетТерриторийСтрокиСРаспределением
		|ИЗ
		|	ВТБухучетТерриторийВесь КАК Бухучет
		|
		|СГРУППИРОВАТЬ ПО
		|	Бухучет.ТерриторияВыполненияРаботВОрганизации,
		|	Бухучет.Период
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Бухучет.ИдентификаторСтроки) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетТерриторий.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	БухучетТерриторий.Период КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	БухучетТерриторий.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетТерриторий.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетТерриторий.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ЛОЖЬ КАК ПодразделениеУчетаЗатратЗаполнено,
		|	БухучетТерриторий.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансированияЗаполнена,
		|	БухучетТерриторий.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
		|	БухучетТерриторий.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВДЗаполнено
		|ПОМЕСТИТЬ ВТБухучетТерриторий
		|ИЗ
		|	ВТБухучетТерриторийВесь КАК БухучетТерриторий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетТерриторийСтрокиСРаспределением КАК СтрокиСРаспределением
		|		ПО БухучетТерриторий.ТерриторияВыполненияРаботВОрганизации = СтрокиСРаспределением.ТерриторияВыполненияРаботВОрганизации
		|			И БухучетТерриторий.Период = СтрокиСРаспределением.Период
		|ГДЕ
		|	СтрокиСРаспределением.КоличествоСтрок ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетТерриторий.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	БухучетТерриторий.Период КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	БухучетТерриторий.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетТерриторий.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетТерриторий.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	БухучетТерриторий.ДоляРаспределения КАК ДоляРаспределения,
		|	ЛОЖЬ КАК ПодразделениеУчетаЗатратЗаполнено,
		|	БухучетТерриторий.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансированияЗаполнена,
		|	БухучетТерриторий.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
		|	БухучетТерриторий.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВДЗаполнено
		|ПОМЕСТИТЬ ВТБухучетТерриторийСРаспределением
		|ИЗ
		|	ВТБухучетТерриторийВесь КАК БухучетТерриторий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетТерриторийСтрокиСРаспределением КАК СтрокиСРаспределением
		|		ПО БухучетТерриторий.ТерриторияВыполненияРаботВОрганизации = СтрокиСРаспределением.ТерриторияВыполненияРаботВОрганизации
		|			И БухучетТерриторий.Период = СтрокиСРаспределением.Период";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходнаяТаблица", ИмяИсходнойВТ);
		Запрос.Выполнить();
		
		УдалитьВТ.Добавить("ВТОтборТерриторий");
		УдалитьВТ.Добавить("ВТБухучетТерриторийВесь");
		УдалитьВТ.Добавить("ВТБухучетТерриторийСтрокиСРаспределением");
		
	КонецЕсли;
	
	// Бухучет Сотрудников.
	// В запросе используем условие
	// БухучетЗарплаты.ДействуетДо < МаксимальныеПериоды.Период.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Период КАК Период
	|ПОМЕСТИТЬ ВТОтборСотрудников
	|ИЗ
	|	ВТИсходнаяТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетЗарплаты.Сотрудник КАК Сотрудник,
	|	БухучетЗарплаты.Период КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	БухучетЗарплаты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплаты.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ЛОЖЬ КАК ПодразделениеУчетаЗатратЗаполнено,
	|	БухучетЗарплаты.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансированияЗаполнена,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
	|	БухучетЗарплаты.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВДЗаполнено
	|ПОМЕСТИТЬ ВТБухучетСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МаксимальныеПериоды.Сотрудник КАК Сотрудник,
	|		МаксимальныеПериоды.Период КАК Период,
	|		ВЫБОР
	|			КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И БухучетЗарплаты.ДействуетДо < МаксимальныеПериоды.Период
	|				ТОГДА БухучетЗарплаты.СтатьяФинансированияПоОкончании
	|			ИНАЧЕ БухучетЗарплаты.СтатьяФинансирования
	|		КОНЕЦ КАК СтатьяФинансирования,
	|		ВЫБОР
	|			КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И БухучетЗарплаты.ДействуетДо < МаксимальныеПериоды.Период
	|				ТОГДА БухучетЗарплаты.СпособОтраженияЗарплатыВБухучетеПоОкончании
	|			ИНАЧЕ БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете
	|		КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|		ВЫБОР
	|			КОГДА БухучетЗарплаты.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И БухучетЗарплаты.ДействуетДо <= МаксимальныеПериоды.Период
	|				ТОГДА БухучетЗарплаты.ОтношениеКЕНВДПоОкончании
	|			ИНАЧЕ БухучетЗарплаты.ОтношениеКЕНВД
	|		КОНЕЦ КАК ОтношениеКЕНВД
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Таблица.Сотрудник КАК Сотрудник,
	|			Таблица.Период КАК Период,
	|			МАКСИМУМ(БухучетЗарплаты.Период) КАК ПериодРегистра
	|		ИЗ
	|			ВТОтборСотрудников КАК Таблица
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплаты
	|				ПО Таблица.Сотрудник = БухучетЗарплаты.Сотрудник
	|					И Таблица.Период >= БухучетЗарплаты.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Таблица.Сотрудник,
	|			Таблица.Период) КАК МаксимальныеПериоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплаты
	|			ПО МаксимальныеПериоды.Сотрудник = БухучетЗарплаты.Сотрудник
	|				И МаксимальныеПериоды.ПериодРегистра = БухучетЗарплаты.Период) КАК БухучетЗарплаты
	|ГДЕ
	|	НЕ(БухучетЗарплаты.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|				И БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|				И БухучетЗарплаты.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходнаяТаблица", ИмяИсходнойВТ);
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТОтборСотрудников");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
КонецПроцедуры

// Объединяет настройки бухучета в одну таблицу, используются таблицы, полученные в ПрочитатьНастройкиБухучетаСоздатьВременныеТаблицы.
// Выходная таблица содержит поля:
// 		* Организация
// 		* Подразделение
// 		* ТерриторияВыполненияРаботВОрганизации
// 		* Сотрудник
// 		* Период
// 		* ИдентификаторСтроки
// 		* СтатьяФинансирования
// 		* СпособОтраженияЗарплатыВБухучете
// 		* ОтношениеКЕНВД
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу с именем ИмяИсходнойВТ.
// 	ИмяИсходнойВТ - Строка - имя временной таблицы.
// 	ИмяИтоговойТаблицы- Строка - имя временной таблицы, в которую будет помещен результат.
//
Процедура СоздатьВТНастройкиБухучетаБезУчетаНастроекРаспределения(МенеджерВТ, ИмяИсходнойВТ, ИмяИтоговойТаблицы)
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БухучетСотрудников.ПодразделениеУчетаЗатратЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетСотрудников.ПодразделениеУчетаЗатрат
	|		КОГДА ЕСТЬNULL(БухучетТерриторий.ПодразделениеУчетаЗатратЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетТерриторий.ПодразделениеУчетаЗатрат
	|		КОГДА ЕСТЬNULL(БухучетПодразделений.ПодразделениеУчетаЗатратЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетПодразделений.ПодразделениеУчетаЗатрат
	|		КОГДА ЕСТЬNULL(БухучетОрганизаций.ПодразделениеУчетаЗатратЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетОрганизаций.ПодразделениеУчетаЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК ПодразделениеУчетаЗатрат,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БухучетСотрудников.СтатьяФинансированияЗаполнена, ЛОЖЬ)
	|			ТОГДА БухучетСотрудников.СтатьяФинансирования
	|		КОГДА ЕСТЬNULL(БухучетТерриторий.СтатьяФинансированияЗаполнена, ЛОЖЬ)
	|			ТОГДА БухучетТерриторий.СтатьяФинансирования
	|		КОГДА ЕСТЬNULL(БухучетПодразделений.СтатьяФинансированияЗаполнена, ЛОЖЬ)
	|			ТОГДА БухучетПодразделений.СтатьяФинансирования
	|		КОГДА ЕСТЬNULL(БухучетОрганизаций.СтатьяФинансированияЗаполнена, ЛОЖЬ)
	|			ТОГДА БухучетОрганизаций.СтатьяФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БухучетСотрудников.СпособОтраженияЗаполнен, ЛОЖЬ)
	|			ТОГДА БухучетСотрудников.СпособОтраженияЗарплатыВБухучете
	|		КОГДА ЕСТЬNULL(БухучетТерриторий.СпособОтраженияЗаполнен, ЛОЖЬ)
	|			ТОГДА БухучетТерриторий.СпособОтраженияЗарплатыВБухучете
	|		КОГДА ЕСТЬNULL(БухучетПодразделений.СпособОтраженияЗаполнен, ЛОЖЬ)
	|			ТОГДА БухучетПодразделений.СпособОтраженияЗарплатыВБухучете
	|		КОГДА ЕСТЬNULL(БухучетОрганизаций.СпособОтраженияЗаполнен, ЛОЖЬ)
	|			ТОГДА БухучетОрганизаций.СпособОтраженияЗарплатыВБухучете
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БухучетСотрудников.ОтношениеКЕНВДЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетСотрудников.ОтношениеКЕНВД
	|		КОГДА ЕСТЬNULL(БухучетТерриторий.ОтношениеКЕНВДЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетТерриторий.ОтношениеКЕНВД
	|		КОГДА ЕСТЬNULL(БухучетПодразделений.ОтношениеКЕНВДЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетПодразделений.ОтношениеКЕНВД
	|		КОГДА ЕСТЬNULL(БухучетОрганизаций.ОтношениеКЕНВДЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетОрганизаций.ОтношениеКЕНВД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|	КОНЕЦ КАК ОтношениеКЕНВД
	|ПОМЕСТИТЬ ВТНастройкиБухучетаБезРаспределения
	|ИЗ
	|	ВТИсходнаяТаблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетСотрудников КАК БухучетСотрудников
	|		ПО Таблица.Сотрудник = БухучетСотрудников.Сотрудник
	|			И Таблица.Период = БухучетСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетПодразделений КАК БухучетПодразделений
	|		ПО Таблица.Подразделение = БухучетПодразделений.Подразделение
	|			И Таблица.Период = БухучетПодразделений.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетТерриторий КАК БухучетТерриторий
	|		ПО Таблица.ТерриторияВыполненияРаботВОрганизации = БухучетТерриторий.ТерриторияВыполненияРаботВОрганизации
	|			И Таблица.Период = БухучетТерриторий.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетОрганизаций КАК БухучетОрганизаций
	|		ПО Таблица.Организация = БухучетОрганизаций.Организация
	|			И Таблица.Период = БухучетОрганизаций.Период";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходнаяТаблица", ИмяИсходнойВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНастройкиБухучетаБезРаспределения", ИмяИтоговойТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Получает настройки распределения основного заработка сотрудников.
// Результат помещается во временную таблицу ВТБухучетСотрудниковЕжемесячноеРаспределение
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит временную таблицу с
// 					именем, указанном в параметре ИмяИсходнойВТ, таблица содержит поля:
// 					* Организация
// 					* Сотрудник
// 					* Период
// 	ИмяИсходнойВТ - Строка - имя временной таблицы.
//
Процедура СоздатьВТБухучетСотрудниковЕжемесячноеРаспределение(МенеджерВТ, ИмяИсходнойВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Организация КАК Организация,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Период КАК Период
	|ПОМЕСТИТЬ ВТОтборСотрудников
	|ИЗ
	|	ВТИсходнаяТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Период КАК Период,
	|	РаспределениеОсновногоЗаработка.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеОсновногоЗаработка.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА РаспределениеОсновногоЗаработка.ОблагаетсяЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	РаспределениеОсновногоЗаработка.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	РаспределениеОсновногоЗаработка.ДоляРаспределения КАК ДоляРаспределения
	|ПОМЕСТИТЬ ВТБухучетСотрудниковЕжемесячноеРаспределение
	|ИЗ
	|	ВТОтборСотрудников КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетРаспределениеОсновногоЗаработка КАК РаспределениеОсновногоЗаработка
	|		ПО Таблица.Сотрудник = РаспределениеОсновногоЗаработка.Сотрудник
	|			И Таблица.Организация = РаспределениеОсновногоЗаработка.Организация
	|			И (Таблица.Период МЕЖДУ РаспределениеОсновногоЗаработка.ПериодРегистрации И КОНЕЦПЕРИОДА(РаспределениеОсновногоЗаработка.ПериодРегистрации, МЕСЯЦ))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсходнаяТаблица", ИмяИсходнойВТ);
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, "ВТОтборСотрудников");
	
КонецПроцедуры

// Получает настройки бухучета, которые будут использоваться для распределения.
// Учитываются настройки заданные в виде распределения.
// Результат помещается в таблицы ВТНастройкиБухучетаПоУмолчанию и ВТНастройкиБухучета.
// Таблица ВТНастройкиБухучетаПоУмолчанию содержит настройки, полученные без учета настроек распределения.
// Таблица ВТНастройкиБухучета содержит настройки, полученные с учетом настроек распределения.
// Таблицы содержат поля:
// 			* Организация
// 			* Сотрудник
// 			* Период
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 			* СтатьяФинансирования
// 			* СпособОтраженияЗарплатыВБухучете
// 			* ОтношениеКЕНВД
// 			* ДоляРаспределения
// 			* СтрокаСРаспределением
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу с именем ВТИсходнаяТаблицаДляНастроекБухучета.
// 			Таблица должна содержать поля:
// 			* Организация
// 			* Сотрудник
// 			* Период
// 			* ИсходныйПериод
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 			* ИдентификаторСтроки
// 	Организация - СправочникСсылка.Организация.
// 	Период - Дата.
// 	УчитыватьЕжемесячноеРаспределение - Булево - определяет необходимость учета настроек
// 							распределения основного заработка сотрудников.
//
Процедура СоздатьВТНастройкиБухучета(МенеджерВТ, Организация, Период, УчитыватьЕжемесячноеРаспределение)
	
	УдалитьВТ = Новый Массив;
	
	// Имя временной таблицы с исходами данными для получения настроек,
	// таблица создается в СоздатьВТИсходнаяТаблицаДляНастроекБухучета.
	// МенеджерВТ содержит эту таблицу
	ИмяВТИсходнаяТаблица = "ВТИсходнаяТаблицаДляНастроекБухучета";
	
	// Массив будет содержать имена таблиц с прочитанными настройками бухучета
	// заданными для организации, подразделений, территорий, сотрудников.
	// Используется для уничтожения этих таблиц по окончании работы метода.
	ИменаТаблицСНастройкамиБухучета = Новый Массив;
	ПрочитатьНастройкиБухучетаСоздатьВременныеТаблицы(МенеджерВТ, ИмяВТИсходнаяТаблица, ИменаТаблицСНастройкамиБухучета);
	
	// Создание таблицы с настройками бухучета без учета настроек распределения.
	ИмяВТНастройкиБухучетаБезРаспределения = "ВТНастройкиБухучетаБезРаспределения";
	СоздатьВТНастройкиБухучетаБезУчетаНастроекРаспределения(МенеджерВТ, ИмяВТИсходнаяТаблица, ИмяВТНастройкиБухучетаБезРаспределения);
	УдалитьВТ.Добавить(ИмяВТНастройкиБухучетаБезРаспределения);
	
	ПрименяетсяЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, Период);
	ИспользоватьСтатьиФинансирования   = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	ИспользоватьОбособленныеТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", Организация));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПрименяетсяЕНВД", ПрименяетсяЕНВД);
	Запрос.УстановитьПараметр("ИспользоватьСтатьиФинансирования", ИспользоватьСтатьиФинансирования);
	
	// ВТНастройкиБухучетаПоУмолчанию
	// Создание таблицы с настройками "по умолчанию".
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Организация КАК Организация,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.ИсходныйПериод КАК Период,
	|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|			ТОГДА НастройкиБухучета.СтатьяФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ПрименяетсяЕНВД
	|			ТОГДА НастройкиБухучета.ОтношениеКЕНВД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	1 КАК ДоляРаспределения,
	|	ЛОЖЬ КАК СтрокаСРаспределением
	|ПОМЕСТИТЬ ВТНастройкиБухучетаПоУмолчанию
	|ИЗ
	|	ВТИсходнаяТаблицаДляНастроекБухучета КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаБезРаспределения КАК НастройкиБухучета
	|		ПО Таблица.ИдентификаторСтроки = НастройкиБухучета.ИдентификаторСтроки";
	Запрос.Выполнить();
	
	ЗаданоРаспределениеВПодразделениях = ЗарплатаКадры.ВТСодержитСтроки(МенеджерВТ, "ВТБухучетПодразделенийСРаспределением");
	ЗаданоРаспределениеВТерриториях    = ЗарплатаКадры.ВТСодержитСтроки(МенеджерВТ, "ВТБухучетТерриторийСРаспределением");
	
	// Определим необходимость учета настроек распределения основного заработка.
	ЗаданоЕжемесячноеРаспределениеСотрудников = Ложь;
	Если УчитыватьЕжемесячноеРаспределение Тогда
		СоздатьВТБухучетСотрудниковЕжемесячноеРаспределение(МенеджерВТ, ИмяВТИсходнаяТаблица);
		УдалитьВТ.Добавить("ВТБухучетСотрудниковЕжемесячноеРаспределение");
		ЗаданоЕжемесячноеРаспределениеСотрудников = ЗарплатаКадры.ВТСодержитСтроки(МенеджерВТ, "ВТБухучетСотрудниковЕжемесячноеРаспределение");
	КонецЕсли;
	
	// Если в настройках бухучета не используется распределение, 
	// в качестве таблицы с "полными" настройками используем таблицу с распределением "по умолчанию".
	Если НЕ ЗаданоЕжемесячноеРаспределениеСотрудников И Не ЗаданоРаспределениеВПодразделениях И Не ЗаданоРаспределениеВТерриториях Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Организация КАК Организация,
		|	Таблица.Подразделение КАК Подразделение,
		|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	Таблица.Сотрудник КАК Сотрудник,
		|	Таблица.Период КАК Период,
		|	Таблица.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Таблица.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	Таблица.ДоляРаспределения КАК ДоляРаспределения,
		|	Таблица.СтрокаСРаспределением КАК СтрокаСРаспределением
		|ПОМЕСТИТЬ ВТНастройкиБухучета
		|ИЗ
		|	ВТНастройкиБухучетаПоУмолчанию КАК Таблица";
		Запрос.Выполнить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдалитьВТ, ИменаТаблицСНастройкамиБухучета);
		ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиБухучета = Новый ТаблицаЗначений;
	НастройкиБухучета.Колонки.Добавить("ИдентификаторСтроки", 					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	НастройкиБухучета.Колонки.Добавить("Организация", 							Новый ОписаниеТипов("СправочникСсылка.Организации"));
	НастройкиБухучета.Колонки.Добавить("Подразделение", 						Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НастройкиБухучета.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	НастройкиБухучета.Колонки.Добавить("Сотрудник", 							Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НастройкиБухучета.Колонки.Добавить("Период", 								Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	НастройкиБухучета.Колонки.Добавить("ПодразделениеУчетаЗатрат", 				Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НастройкиБухучета.Колонки.Добавить("СтатьяФинансирования",					Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	НастройкиБухучета.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", 		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	НастройкиБухучета.Колонки.Добавить("ОтношениеКЕНВД",						Новый ОписаниеТипов("ПеречислениеСсылка.ОтношениеКЕНВДЗатратНаЗарплату"));
	НастройкиБухучета.Колонки.Добавить("ДоляРаспределения", 					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 3)));
	НастройкиБухучета.Колонки.Добавить("СтрокаСРаспределением",					Новый ОписаниеТипов("Булево"));
	НастройкиБухучета.Колонки.Добавить("ПодразделениеУчетаЗатратЗаполнено",		Новый ОписаниеТипов("Булево"));
	НастройкиБухучета.Колонки.Добавить("СтатьяФинансированияЗаполнена",			Новый ОписаниеТипов("Булево"));
	НастройкиБухучета.Колонки.Добавить("СпособОтраженияЗаполнен",				Новый ОписаниеТипов("Булево"));
	НастройкиБухучета.Колонки.Добавить("ОтношениеКЕНВДЗаполнено",				Новый ОписаниеТипов("Булево"));

	ОбработанныеСтроки = Новый Соответствие;
	
	СвойстваИсключения = "";
	Если Не ПрименяетсяЕНВД Тогда
		СвойстваИсключения = "ОтношениеКЕНВД";
	КонецЕсли;
	Если Не ИспользоватьСтатьиФинансирования Тогда
		СвойстваИсключения = СвойстваИсключения + ?(ПустаяСтрока(СвойстваИсключения),"СтатьяФинансирования",",СтатьяФинансирования");
	КонецЕсли;
	
	// Получаем настройки с учетом приоритетов.
	
	// 1. Настройка распределения основного заработка сотрудников.
	// 2. Бухучет задан в настройках сотрудника.
	// 3. Бухучет задан в настройках территории.
	// 4. Бухучет задан в настройках подразделения.
	
	РаспределениеБезАналитики = Новый Массив;
	Если ЗаданоЕжемесячноеРаспределениеСотрудников Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ИсходнаяТаблица.Организация КАК Организация,
		|	ИсходнаяТаблица.Подразделение КАК Подразделение,
		|	ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	ИсходнаяТаблица.Сотрудник КАК Сотрудник,
		|	ИсходнаяТаблица.ИсходныйПериод КАК Период,
		|	СтрокиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	СтрокиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СтрокиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	СтрокиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	СтрокиБухучета.ПодразделениеУчетаЗатрат <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатратЗаполнено,
		|	НЕ &ИспользоватьСтатьиФинансирования
		|		ИЛИ СтрокиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансированияЗаполнена,
		|	СтрокиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
		|	ИСТИНА КАК ОтношениеКЕНВДЗаполнено,
		|	СтрокиБухучета.ДоляРаспределения КАК ДоляРаспределения,
		|	ИСТИНА КАК СтрокаСРаспределением
		|ИЗ
		|	ВТИсходнаяТаблицаДляНастроекБухучета КАК ИсходнаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетСотрудниковЕжемесячноеРаспределение КАК СтрокиБухучета
		|		ПО ИсходнаяТаблица.Сотрудник = СтрокиБухучета.Сотрудник
		|			И ИсходнаяТаблица.Период = СтрокиБухучета.Период";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = НастройкиБухучета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,СвойстваИсключения);
			
			ОбработанныеСтроки.Вставить(Выборка.ИдентификаторСтроки, Истина);
			
			Если Не Выборка.СпособОтраженияЗаполнен 
				Или Не Выборка.СтатьяФинансированияЗаполнена
				Или Не Выборка.ОтношениеКЕНВДЗаполнено Тогда
				РаспределениеБезАналитики.Добавить(НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// УсловиеЗаданБухучет
	// Определим условия для отбора строк с настройками в зависимости от настроек программы.
	УсловиеЗаданБухучет = "СтрокиБухучета.СпособОтраженияЗаполнен";
	Если ИспользоватьСтатьиФинансирования Тогда
		УсловиеЗаданБухучет = УсловиеЗаданБухучет + " ИЛИ СтрокиБухучета.СтатьяФинансированияЗаполнена";
	КонецЕсли;
	Если ПрименяетсяЕНВД Тогда
		УсловиеЗаданБухучет = УсловиеЗаданБухучет + " ИЛИ СтрокиБухучета.ОтношениеКЕНВДЗаполнено";
	КонецЕсли;
	
	// Настройки сотрудников.
	СотрудникиБезАналитики = Новый Массив;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ИсходнаяТаблица.Организация КАК Организация,
	|	ИсходнаяТаблица.Подразделение КАК Подразделение,
	|	ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ИсходнаяТаблица.Сотрудник КАК Сотрудник,
	|	ИсходнаяТаблица.ИсходныйПериод КАК Период,
	|	СтрокиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	СтрокиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтрокиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СтрокиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	СтрокиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
	|	НЕ &ИспользоватьСтатьиФинансирования
	|		ИЛИ СтрокиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
	|	СтрокиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
	|	НЕ &ПрименяетсяЕНВД
	|		ИЛИ СтрокиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено,
	|	1 КАК ДоляРаспределения,
	|	ЛОЖЬ КАК СтрокаСРаспределением
	|ИЗ
	|	ВТИсходнаяТаблицаДляНастроекБухучета КАК ИсходнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетСотрудников КАК СтрокиБухучета
	|		ПО ИсходнаяТаблица.Сотрудник = СтрокиБухучета.Сотрудник
	|			И ИсходнаяТаблица.Период = СтрокиБухучета.Период
	|			И (&УсловиеЗаданБухучет)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗаданБухучет", УсловиеЗаданБухучет);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбработанныеСтроки[Выборка.ИдентификаторСтроки] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НастройкиБухучета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,СвойстваИсключения);
		
		ОбработанныеСтроки.Вставить(Выборка.ИдентификаторСтроки, Истина);
		
		Если Не Выборка.СпособОтраженияЗаполнен 
			Или Не Выборка.СтатьяФинансированияЗаполнена
			Или Не Выборка.ОтношениеКЕНВДЗаполнено Тогда
			СотрудникиБезАналитики.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ТерриторииБезАналитики = Новый Массив;
	Если ИспользоватьОбособленныеТерритории Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ИсходнаяТаблица.Организация КАК Организация,
		|	ИсходнаяТаблица.Подразделение КАК Подразделение,
		|	ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	ИсходнаяТаблица.Сотрудник КАК Сотрудник,
		|	ИсходнаяТаблица.ИсходныйПериод КАК Период,
		|	СтрокиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	СтрокиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СтрокиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	СтрокиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	СтрокиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
		|	НЕ &ИспользоватьСтатьиФинансирования
		|		ИЛИ СтрокиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
		|	СтрокиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
		|	НЕ &ПрименяетсяЕНВД
		|		ИЛИ СтрокиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено,
		|	1 КАК ДоляРаспределения,
		|	ЛОЖЬ КАК СтрокаСРаспределением
		|ИЗ
		|	ВТИсходнаяТаблицаДляНастроекБухучета КАК ИсходнаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетТерриторий КАК СтрокиБухучета
		|		ПО ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации = СтрокиБухучета.ТерриторияВыполненияРаботВОрганизации
		|			И ИсходнаяТаблица.Период = СтрокиБухучета.Период
		|			И (&УсловиеЗаданБухучет)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗаданБухучет", УсловиеЗаданБухучет);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ОбработанныеСтроки[Выборка.ИдентификаторСтроки] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НастройкиБухучета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,СвойстваИсключения);
			
			ОбработанныеСтроки.Вставить(Выборка.ИдентификаторСтроки, Истина);
			
			Если Не Выборка.СпособОтраженияЗаполнен 
				Или Не Выборка.СтатьяФинансированияЗаполнена
				Или Не Выборка.ОтношениеКЕНВДЗаполнено Тогда
				ТерриторииБезАналитики.Добавить(НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаданоРаспределениеВТерриториях Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИсходнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ИсходнаяТаблица.Организация КАК Организация,
			|	ИсходнаяТаблица.Подразделение КАК Подразделение,
			|	ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
			|	ИсходнаяТаблица.Сотрудник КАК Сотрудник,
			|	ИсходнаяТаблица.ИсходныйПериод КАК Период,
			|	СтрокиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	СтрокиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
			|	СтрокиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	СтрокиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	СтрокиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
			|	НЕ &ИспользоватьСтатьиФинансирования
			|		ИЛИ СтрокиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
			|	СтрокиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
			|	НЕ &ПрименяетсяЕНВД
			|		ИЛИ СтрокиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено,
			|	СтрокиБухучета.ДоляРаспределения КАК ДоляРаспределения,
			|	ИСТИНА КАК СтрокаСРаспределением
			|ИЗ
			|	ВТИсходнаяТаблицаДляНастроекБухучета КАК ИсходнаяТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетТерриторийСРаспределением КАК СтрокиБухучета
			|		ПО ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации = СтрокиБухучета.ТерриторияВыполненияРаботВОрганизации
			|			И ИсходнаяТаблица.Период = СтрокиБухучета.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИдентификаторСтроки";
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
				
				Если ОбработанныеСтроки[Выборка.ИдентификаторСтроки] = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				ОбработанныеСтроки.Вставить(Выборка.ИдентификаторСтроки, Истина);
				
				Пока Выборка.Следующий() Цикл
					
					НоваяСтрока = НастройкиБухучета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,СвойстваИсключения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодразделенияБезАналитики = Новый Массив;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ИсходнаяТаблица.Организация КАК Организация,
	|	ИсходнаяТаблица.Подразделение КАК Подразделение,
	|	ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ИсходнаяТаблица.Сотрудник КАК Сотрудник,
	|	ИсходнаяТаблица.ИсходныйПериод КАК Период,
	|	СтрокиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	СтрокиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтрокиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СтрокиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	СтрокиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
	|	НЕ &ИспользоватьСтатьиФинансирования
	|		ИЛИ СтрокиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
	|	СтрокиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
	|	НЕ &ПрименяетсяЕНВД
	|		ИЛИ СтрокиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено,
	|	1 КАК ДоляРаспределения,
	|	ЛОЖЬ КАК СтрокаСРаспределением
	|ИЗ
	|	ВТИсходнаяТаблицаДляНастроекБухучета КАК ИсходнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетПодразделений КАК СтрокиБухучета
	|		ПО ИсходнаяТаблица.Подразделение = СтрокиБухучета.Подразделение
	|			И ИсходнаяТаблица.Период = СтрокиБухучета.Период
	|			И (&УсловиеЗаданБухучет)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗаданБухучет", УсловиеЗаданБухучет);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбработанныеСтроки[Выборка.ИдентификаторСтроки] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НастройкиБухучета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,СвойстваИсключения);
		
		ОбработанныеСтроки.Вставить(Выборка.ИдентификаторСтроки, Истина);
		
		Если Не Выборка.СпособОтраженияЗаполнен 
			Или Не Выборка.СтатьяФинансированияЗаполнена
			Или Не Выборка.ОтношениеКЕНВДЗаполнено Тогда
			ПодразделенияБезАналитики.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаданоРаспределениеВПодразделениях Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ИсходнаяТаблица.Организация КАК Организация,
		|	ИсходнаяТаблица.Подразделение КАК Подразделение,
		|	ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	ИсходнаяТаблица.Сотрудник КАК Сотрудник,
		|	ИсходнаяТаблица.ИсходныйПериод КАК Период,
		|	СтрокиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	СтрокиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СтрокиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	СтрокиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	СтрокиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
		|	НЕ &ИспользоватьСтатьиФинансирования
		|		ИЛИ СтрокиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
		|	СтрокиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
		|	НЕ &ПрименяетсяЕНВД
		|		ИЛИ СтрокиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено,
		|	СтрокиБухучета.ДоляРаспределения КАК ДоляРаспределения,
		|	ИСТИНА КАК СтрокаСРаспределением
		|ИЗ
		|	ВТИсходнаяТаблицаДляНастроекБухучета КАК ИсходнаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетПодразделенийСРаспределением КАК СтрокиБухучета
		|		ПО ИсходнаяТаблица.Подразделение = СтрокиБухучета.Подразделение
		|			И ИсходнаяТаблица.Период = СтрокиБухучета.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
			
			Если ОбработанныеСтроки[Выборка.ИдентификаторСтроки] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеСтроки.Вставить(Выборка.ИдентификаторСтроки, Истина);
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = НастройкиБухучета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,СвойстваИсключения);
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ДополнитьАналитику = РаспределениеБезАналитики.Количество() > 0
			Или СотрудникиБезАналитики.Количество() > 0
			Или ТерриторииБезАналитики.Количество() > 0
			Или ПодразделенияБезАналитики.Количество() > 0;
	
	Если ДополнитьАналитику Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	НастройкиБухучета.Период КАК Период,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	НастройкиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
		|	НастройкиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
		|	НастройкиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
		|	НастройкиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено
		|ИЗ
		|	ВТБухучетТерриторий КАК НастройкиБухучета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	ТерриторияВыполненияРаботВОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	НастройкиБухучета.Период КАК Период,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	НастройкиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
		|	НастройкиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
		|	НастройкиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
		|	НастройкиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено,
		|	НастройкиБухучета.ДоляРаспределения КАК ДоляРаспределения
		|ИЗ
		|	ВТБухучетТерриторийСРаспределением КАК НастройкиБухучета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	ТерриторияВыполненияРаботВОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиБухучета.Подразделение КАК Подразделение,
		|	НастройкиБухучета.Период КАК Период,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	НастройкиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
		|	НастройкиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
		|	НастройкиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
		|	НастройкиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено
		|ИЗ
		|	ВТБухучетПодразделений КАК НастройкиБухучета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиБухучета.Подразделение КАК Подразделение,
		|	НастройкиБухучета.Период КАК Период,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	НастройкиБухучета.ПодразделениеУчетаЗатратЗаполнено КАК ПодразделениеУчетаЗатратЗаполнено,
		|	НастройкиБухучета.СтатьяФинансированияЗаполнена КАК СтатьяФинансированияЗаполнена,
		|	НастройкиБухучета.СпособОтраженияЗаполнен КАК СпособОтраженияЗаполнен,
		|	НастройкиБухучета.ОтношениеКЕНВДЗаполнено КАК ОтношениеКЕНВДЗаполнено,
		|	НастройкиБухучета.ДоляРаспределения КАК ДоляРаспределения
		|ИЗ
		|	ВТБухучетПодразделенийСРаспределением КАК НастройкиБухучета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ИСТИНА КАК ПодразделениеУчетаЗатратЗаполнено,
		|	ИСТИНА КАК СтатьяФинансированияЗаполнена,
		|	ИСТИНА КАК СпособОтраженияЗаполнен,
		|	ИСТИНА КАК ОтношениеКЕНВДЗаполнено
		|ИЗ
		|	ВТНастройкиБухучетаБезРаспределения КАК НастройкиБухучета";
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ПараметрыДополнения = Новый Структура("
		|БухучетТерриторий,
		|БухучетТерриторийСРаспределением,
		|БухучетПодразделений,
		|БухучетПодразделенийСРаспределением,
		|БухучетПоУмолчанию,
		|ОтборПоТерритории,
		|ОтборПоПодразделению,
		|ОтборПоУмолчанию,
		|УчитыватьТерритории,
		|УчитыватьПодразделения");
		
		ПараметрыДополнения.БухучетТерриторий 					= РезультатЗапроса[0].Выгрузить();
		ПараметрыДополнения.БухучетТерриторийСРаспределением 	= РезультатЗапроса[1].Выгрузить();
		ПараметрыДополнения.БухучетПодразделений 				= РезультатЗапроса[2].Выгрузить();
		ПараметрыДополнения.БухучетПодразделенийСРаспределением = РезультатЗапроса[3].Выгрузить();
		ПараметрыДополнения.БухучетПоУмолчанию 					= РезультатЗапроса[4].Выгрузить();
		
		ПараметрыДополнения.БухучетТерриторий.Индексы.Добавить("Период,ТерриторияВыполненияРаботВОрганизации");
		ПараметрыДополнения.БухучетТерриторийСРаспределением.Индексы.Добавить("Период,ТерриторияВыполненияРаботВОрганизации");
		ПараметрыДополнения.ОтборПоТерритории 		= Новый Структура("Период,ТерриторияВыполненияРаботВОрганизации");
		
		ПараметрыДополнения.БухучетПодразделений.Индексы.Добавить("Период,Подразделение");
		ПараметрыДополнения.БухучетПодразделенийСРаспределением.Индексы.Добавить("Период,Подразделение");
		ПараметрыДополнения.ОтборПоПодразделению 	= Новый Структура("Период,Подразделение");
		
		ПараметрыДополнения.БухучетПоУмолчанию.Индексы.Добавить("ИдентификаторСтроки");
		ПараметрыДополнения.ОтборПоУмолчанию = Новый Структура("ИдентификаторСтроки");
		
		ПараметрыДополнения.УчитыватьТерритории    = ИспользоватьОбособленныеТерритории;
		ПараметрыДополнения.УчитыватьПодразделения = Истина;
		
		Для каждого СтрокаТЗ Из РаспределениеБезАналитики Цикл
			ЗаполнитьПустыеНастройкиБухучета(НастройкиБухучета, СтрокаТЗ, ПараметрыДополнения);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из СотрудникиБезАналитики Цикл
			ЗаполнитьПустыеНастройкиБухучета(НастройкиБухучета, СтрокаТЗ, ПараметрыДополнения);
		КонецЦикла;
		
		ПараметрыДополнения.УчитыватьТерритории = Ложь;
		Для каждого СтрокаТЗ Из ТерриторииБезАналитики Цикл
			ЗаполнитьПустыеНастройкиБухучета(НастройкиБухучета, СтрокаТЗ, ПараметрыДополнения);
		КонецЦикла;
		
		ПараметрыДополнения.УчитыватьПодразделения = Ложь;
		Для каждого СтрокаТЗ Из ПодразделенияБезАналитики Цикл
			ЗаполнитьПустыеНастройкиБухучета(НастройкиБухучета, СтрокаТЗ, ПараметрыДополнения);
		КонецЦикла;
		
	КонецЕсли;
	
	// Бухучет по умолчанию для оставшихся строк.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ИсходнаяТаблица.Организация КАК Организация,
	|	ИсходнаяТаблица.Подразделение КАК Подразделение,
	|	ИсходнаяТаблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ИсходнаяТаблица.Сотрудник КАК Сотрудник,
	|	ИсходнаяТаблица.ИсходныйПериод КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	СтрокиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтрокиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СтрокиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	1 КАК ДоляРаспределения,
	|	ЛОЖЬ КАК СтрокаСРаспределением
	|ИЗ
	|	ВТИсходнаяТаблицаДляНастроекБухучета КАК ИсходнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаБезРаспределения КАК СтрокиБухучета
	|		ПО ИсходнаяТаблица.ИдентификаторСтроки = СтрокиБухучета.ИдентификаторСтроки";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбработанныеСтроки[Выборка.ИдентификаторСтроки] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НастройкиБухучета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,СвойстваИсключения);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдалитьВТ, ИменаТаблицСНастройкамиБухучета);
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВТ, НастройкиБухучета, "ВТНастройкиБухучета");
	
КонецПроцедуры

Процедура ЗаполнитьПустыеНастройкиБухучета(НастройкиБухучета, СтрокаТЗ, Параметры)
	
	Если Параметры.УчитыватьТерритории Тогда
		
		// Подбор свойства в настройках территорий.
		ЗаполнитьЗначенияСвойств(Параметры.ОтборПоТерритории, СтрокаТЗ);
		
		НайденныеСтроки = Параметры.БухучетТерриторий.НайтиСтроки(Параметры.ОтборПоТерритории);
		ЗаполнитьАналитикуПоСтрокеНастроек(НайденныеСтроки, СтрокаТЗ);
		
		Если СтрокаТЗ.СтатьяФинансированияЗаполнена И СтрокаТЗ.СпособОтраженияЗаполнен И СтрокаТЗ.ОтношениеКЕНВДЗаполнено Тогда
			Возврат;
		КонецЕсли;
		
		НайденныеСтроки = Параметры.БухучетТерриторийСРаспределением.НайтиСтроки(Параметры.ОтборПоТерритории);
		Если НайденныеСтроки.Количество() > 0 Тогда
			// В настройках распределения заполнены все свойства.
			ЗаполнитьАналитикуПоСтрокамНастроек(НастройкиБухучета, НайденныеСтроки, СтрокаТЗ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.УчитыватьПодразделения Тогда
		
		// Подбор свойства в настройках Подразделений.
		ЗаполнитьЗначенияСвойств(Параметры.ОтборПоПодразделению, СтрокаТЗ);
		
		НайденныеСтроки = Параметры.БухучетПодразделений.НайтиСтроки(Параметры.ОтборПоПодразделению);
		ЗаполнитьАналитикуПоСтрокеНастроек(НайденныеСтроки, СтрокаТЗ);
		
		Если СтрокаТЗ.СтатьяФинансированияЗаполнена И СтрокаТЗ.СпособОтраженияЗаполнен И СтрокаТЗ.ОтношениеКЕНВДЗаполнено Тогда
			Возврат;
		КонецЕсли;
		
		НайденныеСтроки = Параметры.БухучетПодразделенийСРаспределением.НайтиСтроки(Параметры.ОтборПоПодразделению);
		Если НайденныеСтроки.Количество() > 0 Тогда
			// В настройках распределения заполнены все свойства.
			ЗаполнитьАналитикуПоСтрокамНастроек(НастройкиБухучета, НайденныеСтроки, СтрокаТЗ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Подбор свойства по таблицы по умолчанию.
	ЗаполнитьЗначенияСвойств(Параметры.ОтборПоУмолчанию, СтрокаТЗ);
	
	НайденныеСтроки = Параметры.БухучетПоУмолчанию.НайтиСтроки(Параметры.ОтборПоУмолчанию);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьАналитикуПоСтрокеНастроек(НайденныеСтроки, СтрокаТЗ);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьАналитикуПоСтрокеНастроек(НайденныеСтроки, СтрокаТЗ)

	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Если Не СтрокаТЗ.ПодразделениеУчетаЗатратЗаполнено И НайденныеСтроки[0].ПодразделениеУчетаЗатратЗаполнено Тогда
			СтрокаТЗ.ПодразделениеУчетаЗатрат = НайденныеСтроки[0].ПодразделениеУчетаЗатрат;
			СтрокаТЗ.ПодразделениеУчетаЗатратЗаполнено = Истина;
		КонецЕсли;
		
		Если Не СтрокаТЗ.СтатьяФинансированияЗаполнена И НайденныеСтроки[0].СтатьяФинансированияЗаполнена Тогда
			СтрокаТЗ.СтатьяФинансирования = НайденныеСтроки[0].СтатьяФинансирования;
			СтрокаТЗ.СтатьяФинансированияЗаполнена = Истина;
		КонецЕсли;
		
		Если Не СтрокаТЗ.СпособОтраженияЗаполнен И НайденныеСтроки[0].СпособОтраженияЗаполнен Тогда
			СтрокаТЗ.СпособОтраженияЗарплатыВБухучете = НайденныеСтроки[0].СпособОтраженияЗарплатыВБухучете;
			СтрокаТЗ.СпособОтраженияЗаполнен = Истина;
		КонецЕсли;
		
		Если Не СтрокаТЗ.ОтношениеКЕНВДЗаполнено И НайденныеСтроки[0].ОтношениеКЕНВДЗаполнено Тогда
			СтрокаТЗ.ОтношениеКЕНВД = НайденныеСтроки[0].ОтношениеКЕНВД;
			СтрокаТЗ.ОтношениеКЕНВДЗаполнено = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьАналитикуПоСтрокамНастроек(НастройкиБухучета, НайденныеСтроки, СтрокаТЗ)

	// Исходная строка уже является строкой с распределением.
	РаспределятьДолю = СтрокаТЗ.СтрокаСРаспределением;
	Если РаспределятьДолю Тогда
		ДоляРаспределенияИсходная = СтрокаТЗ.ДоляРаспределения;
		СтрокиДляРаспределения = Новый Массив;
		СтрокиДляРаспределения.Добавить(СтрокаТЗ);
		Коэффициенты = Новый Массив;
		Коэффициенты.Добавить(НайденныеСтроки[0].ДоляРаспределения);
	КонецЕсли;
	
	// сначала добавим дополнительные строки
	Для Индекс = 1 По НайденныеСтроки.ВГраница()  Цикл
		
		ДополнительнаяСтрока = НастройкиБухучета.Добавить();
		ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаТЗ);
		
		Если Не ДополнительнаяСтрока.ПодразделениеУчетаЗатратЗаполнено Тогда
			ДополнительнаяСтрока.ПодразделениеУчетаЗатрат = НайденныеСтроки[Индекс].ПодразделениеУчетаЗатрат;
			ДополнительнаяСтрока.ПодразделениеУчетаЗатратЗаполнено = Истина;
		КонецЕсли;
		
		Если Не ДополнительнаяСтрока.СтатьяФинансированияЗаполнена  Тогда
			ДополнительнаяСтрока.СтатьяФинансирования = НайденныеСтроки[Индекс].СтатьяФинансирования;
			ДополнительнаяСтрока.СтатьяФинансированияЗаполнена = Истина;
		КонецЕсли;
		
		Если Не ДополнительнаяСтрока.СпособОтраженияЗаполнен Тогда
			ДополнительнаяСтрока.СпособОтраженияЗарплатыВБухучете = НайденныеСтроки[Индекс].СпособОтраженияЗарплатыВБухучете;
			ДополнительнаяСтрока.СпособОтраженияЗаполнен = Истина;
		КонецЕсли;
		
		Если Не ДополнительнаяСтрока.ОтношениеКЕНВДЗаполнено Тогда
			ДополнительнаяСтрока.ОтношениеКЕНВД = НайденныеСтроки[Индекс].ОтношениеКЕНВД;
			ДополнительнаяСтрока.ОтношениеКЕНВДЗаполнено = Истина;
		КонецЕсли;
		
		ДополнительнаяСтрока.ДоляРаспределения = НайденныеСтроки[Индекс].ДоляРаспределения;
		ДополнительнаяСтрока.СтрокаСРаспределением = Истина;
		
		Если РаспределятьДолю Тогда
			СтрокиДляРаспределения.Добавить(ДополнительнаяСтрока);
			Коэффициенты.Добавить(ДополнительнаяСтрока.ДоляРаспределения);
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним аналитику в переданной строке СтрокаТЗ
	Если Не СтрокаТЗ.ПодразделениеУчетаЗатратЗаполнено Тогда
			СтрокаТЗ.ПодразделениеУчетаЗатрат = НайденныеСтроки[0].ПодразделениеУчетаЗатрат;
			СтрокаТЗ.ПодразделениеУчетаЗатратЗаполнено = Истина;
		КонецЕсли;
	Если Не СтрокаТЗ.СтатьяФинансированияЗаполнена Тогда
		СтрокаТЗ.СтатьяФинансирования = НайденныеСтроки[0].СтатьяФинансирования;
		СтрокаТЗ.СтатьяФинансированияЗаполнена = Истина;
	КонецЕсли;
	Если Не СтрокаТЗ.СпособОтраженияЗаполнен Тогда
		СтрокаТЗ.СпособОтраженияЗарплатыВБухучете = НайденныеСтроки[0].СпособОтраженияЗарплатыВБухучете;
		СтрокаТЗ.СпособОтраженияЗаполнен = Истина;
	КонецЕсли;
	Если Не СтрокаТЗ.ОтношениеКЕНВДЗаполнено Тогда
		СтрокаТЗ.ОтношениеКЕНВД = НайденныеСтроки[0].ОтношениеКЕНВД;
		СтрокаТЗ.ОтношениеКЕНВДЗаполнено = Истина;
	КонецЕсли;
	СтрокаТЗ.ДоляРаспределения 		= НайденныеСтроки[0].ДоляРаспределения;
	СтрокаТЗ.СтрокаСРаспределением 	= Истина;
	
	Если РаспределятьДолю Тогда
		
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ДоляРаспределенияИсходная, Коэффициенты);
		
		Индекс = 0;
		Для Каждого СтрокаРаспределения Из СтрокиДляРаспределения Цикл
			СтрокаРаспределения.ДоляРаспределения = Результаты[Индекс];
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ПараметрыПолученияНастроекБухучета()

	ПараметрыПолученияНастроек = Новый Структура("
	|ИмяПоляСотрудник,
	|ИмяПоляПериод,
	|Организация,
	|Подразделение,
	|ТерриторияВыполненияРаботВОрганизации");
	
	Возврат ПараметрыПолученияНастроек;

КонецФункции

// Создает временную таблицу ВТНастройкиБухучетаСотрудников.
//
//	Параметры
//		Организация - СправочникСсылка.Организации
//		Период - Дата - определяет месяц, для которого получаются данные, любая дата месяца
//		МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу с именем, указанным в параметре ИмяВТ с полями
//			* Организация
//			* Подразделение
//			* ТерриторияВыполненияРаботВОрганизации
//			* Сотрудник
//			* Период
//		ИмяВТ - Строка - имя временной таблицы.
//
//	Временная таблица ВТНастройкиБухучетаСотрудников содержит поля
// 			* Организация
// 			* Сотрудник
// 			* Период
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 			* СтатьяФинансирования
// 			* СпособОтраженияЗарплатыВБухучете
// 			* ОблагаетсяЕНВД
// 			* ДоляРаспределения
//
Процедура СоздатьВТНастройкиБухучетаСотрудников(Организация, Период, МенеджерВТ, ИмяВТ)
	
	УдалитьВТ = Новый Массив;
	
	// Подготовка временной таблицы ВТИсходнаяТаблицаДляНастроекБухучета для получения настроек бухучета.
	СоздатьВТИсходнаяТаблицаДляНастроекБухучета(МенеджерВТ, ИмяВТ, Период);
	УдалитьВТ.Добавить("ВТИсходнаяТаблицаДляНастроекБухучета");
	
	// ВТНастройкиБухучета и ВТНастройкиБухучетаПоУмолчанию
	// Получение настроек бухучета с учетом зарегистрированного распределения основного заработка сотрудников.
	СоздатьВТНастройкиБухучета(МенеджерВТ, Организация, Период, Истина);
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	УдалитьВТ.Добавить("ВТНастройкиБухучетаПоУмолчанию");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("СтатьяОплатаТруда", СтатьяОплатаТруда());
	Запрос.УстановитьПараметр("ПрименяетсяЕНВД", ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, Период));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Организация КАК Организация,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Период КАК Период,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	&СтатьяОплатаТруда КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА &ПрименяетсяЕНВД
	|				И Таблица.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД,
	|	Таблица.ДоляРаспределения КАК ДоляРаспределения
	|ПОМЕСТИТЬ ВТНастройкиБухучетаСотрудников
	|ИЗ
	|	ВТНастройкиБухучета КАК Таблица";
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область БухучетНачислений

Функция АктуальныеСтатьиФинансирования(Организация, ПериодРегистрации)
	
	СоответствиеСтатьей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиФинансированияЗарплата.Ссылка КАК СтатьяФинансирования,
	|	ЕСТЬNULL(АктуальнаяСтатья.СтатьяФинансирования, СтатьиФинансированияЗарплата.Ссылка) КАК АктуальнаяСтатьяФинансирования
	|ИЗ
	|	Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансированияЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатьяФинансированияДляЗаменыУстаревшейАналитикиВБухучете.СрезПоследних(&ПериодРегистрации, Организация = &Организация) КАК АктуальнаяСтатья
	|		ПО (СтатьиФинансированияЗарплата.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (СтатьиФинансированияЗарплата.ДатаОкончания < &ПериодРегистрации)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеСтатьей.Вставить(Выборка.СтатьяФинансирования, Выборка.АктуальнаяСтатьяФинансирования);
	КонецЦикла;
	
	Возврат СоответствиеСтатьей;

КонецФункции

Функция АктуальныеСпособыОтражения(Организация, ПериодРегистрации)
	
	СоответствиеСпособовОтражения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыОтражения.Ссылка КАК СпособОтраженияЗарплатыВБухучете,
	|	ЕСТЬNULL(АктуальныйСпособОтражения.СпособОтраженияЗарплатыВБухучете, СпособыОтражения.Ссылка) КАК АктуальныйСпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособыОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОтраженияДляЗаменыУстаревшейАналитикиВБухучете.СрезПоследних(&ПериодРегистрации, Организация = &Организация) КАК АктуальныйСпособОтражения
	|		ПО (СпособыОтражения.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (СпособыОтражения.ДатаОкончания < &ПериодРегистрации)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеСпособовОтражения.Вставить(Выборка.СпособОтраженияЗарплатыВБухучете, Выборка.АктуальныйСпособОтраженияЗарплатыВБухучете);
	КонецЦикла;
	
	Возврат СоответствиеСпособовОтражения;

КонецФункции

Функция РазрешенныеКатегорииНачисленийСтатьиФинансирования()

	РазрешенныеКатегории = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииНачислений.Ссылка КАК Ссылка,
	|	КатегорииНачислений.КатегорияНачисления КАК КатегорияНачисления
	|ИЗ
	|	Справочник.СтатьиФинансированияЗарплата.КатегорииНачислений КАК КатегорииНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		КатегорииНачислений = Новый Массив;
		Пока Выборка.Следующий() Цикл
			КатегорииНачислений.Добавить(Выборка.КатегорияНачисления);
		КонецЦикла;
		РазрешенныеКатегории.Вставить(Выборка.Ссылка, КатегорииНачислений);
	КонецЦикла;
	
	Возврат РазрешенныеКатегории;

КонецФункции

Функция СтатьиФинансированияЗамены(ПериодРегистрации)

	СтатьиДляЗамены = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиФинансирования.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтатьиФинансирования.СтатьяФинансированияДляЗамены КАК СтатьяФинансированияДляЗамены
	|ИЗ
	|	РегистрСведений.СтатьиФинансированияБазыСреднегоЗаработка.СрезПоследних(&ПериодРегистрации, ) КАК СтатьиФинансирования";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтатьиДляЗамены.Вставить(Выборка.СтатьяФинансирования, Выборка.СтатьяФинансированияДляЗамены);
	КонецЦикла;
	
	Возврат СтатьиДляЗамены;

КонецФункции

Функция СтатьяИспользуетсяВБазеСреднего(ПериодРегистрации)

	НастройкиСтатей = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиФинансирования.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СтатьиФинансирования.ИспользованиеВБазеСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ИспользованиеСтатьиФинансированияВБазеСреднегоЗаработка.Используется)
	|				ИЛИ СтатьиФинансирования.ИспользованиеВБазеСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ИспользованиеСтатьиФинансированияВБазеСреднегоЗаработка.ПустаяСсылка)
	|				ИЛИ СтатьиФинансированияБазыСреднего.СтатьяФинансированияДляЗамены ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатьиФинансированияБазыСреднегоЗаработка.СрезПоследних(&ПериодРегистрации, ) КАК СтатьиФинансированияБазыСреднего
	|		ПО СтатьиФинансирования.Ссылка = СтатьиФинансированияБазыСреднего.СтатьяФинансирования";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкиСтатей.Вставить(Выборка.Ссылка, Выборка.Используется);
	КонецЦикла;
	
	Возврат НастройкиСтатей;

КонецФункции

Процедура СтатьиРасходовНачисленийБюджет(МенеджерВТ, Организация, ПериодРегистрации, СтатьиРасходовПоВидамНачислений)
	
	ВидыОперацийРасходыФСС = Новый Массив;
	ВидыОперацийРасходыФСС.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС); 
	ВидыОперацийРасходыФСС.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	ВидыОперацийРасходыФСС.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Статья213", СтатьяРасходов213());
	Запрос.УстановитьПараметр("Статья211", СтатьяРасходов211());
	Запрос.УстановитьПараметр("РасходыФСС", ВидыОперацийРасходыФСС);
	
	УдалитьВТ = Новый Массив;
	
	Если Не СтатьиРасходовПоПриказу209нПрименяются(ПериодРегистрации) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление,
		|	ВЫБОР
		|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
		|				И Начисления.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА &Статья211
		|		КОГДА Начисления.ВидОперацииПоЗарплате В (&РасходыФСС)
		|			ТОГДА &Статья213
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяРасходов
		|ПОМЕСТИТЬ ВТСтатьиРасходовБюджетПоВидамНачислений
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления";
		Запрос.Выполнить();
		
	Иначе
		
		ПрямыеВыплатыПособий = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Организация, ПериодРегистрации);
		
		СохраняемыйЗаработок = Новый Массив;
		СохраняемыйЗаработок.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыВыплатБывшимСотрудникам.СохраняемыйЗаработокНаВремяТрудоустройства"));
		СохраняемыйЗаработок.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыВыплатБывшимСотрудникам.СохраняемоеДенежноеСодержаниеНаПериодТрудоустройства"));
		
		Запрос.УстановитьПараметр("СохраняемыйЗаработок", СохраняемыйЗаработок);
		Запрос.УстановитьПараметр("Статья264", СтатьяРасходов264());
		Запрос.УстановитьПараметр("Статья266", СтатьяРасходов266());
		Запрос.УстановитьПараметр("ПрямыеВыплатыПособий", ПрямыеВыплатыПособий);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВыплатБывшимСотрудникам.Ссылка КАК Начисление,
		|	&Статья264 КАК СтатьяРасходов
		|ПОМЕСТИТЬ ВТСтатьиРасходовБюджетПоВидамНачислений
		|ИЗ
		|	Справочник.ВидыВыплатБывшимСотрудникам КАК ВидыВыплатБывшимСотрудникам
		|ГДЕ
		|	ВидыВыплатБывшимСотрудникам.Ссылка В(&СохраняемыйЗаработок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ВЫБОР
		|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие))
		|				И Начисления.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА &Статья266
		|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами))
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ &ПрямыеВыплатыПособий
		|							ИЛИ Начисления.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|						ТОГДА &Статья213
		|					ИНАЧЕ Начисления.СтатьяРасходов
		|				КОНЕЦ
		|		КОГДА Начисления.ВидОперацииПоЗарплате В (&РасходыФСС)
		|			ТОГДА &Статья213
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|	КОНЕЦ
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления";
		Запрос.Выполнить();
		
	КонецЕсли;
	УдалитьВТ.Добавить("ВТСтатьиРасходовБюджетПоВидамНачислений");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Начисление КАК Начисление,
	|	ВЫБОР
	|		КОГДА НЕ СтатьиПоВидамНачислений.СтатьяРасходов ЕСТЬ NULL
	|			ТОГДА СтатьиПоВидамНачислений.СтатьяРасходов
	|		КОГДА Начисления.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА Начисления.СтатьяРасходов
	|		ИНАЧЕ &Статья211
	|	КОНЕЦ КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТСтатьиРасходовНачисленийБюджетПоУмолчанию
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.Ссылка КАК Начисление,
	|		Начисления.СтатьяРасходов КАК СтатьяРасходов
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыВыплатБывшимСотрудникам.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	ИЗ
	|		Справочник.ВидыВыплатБывшимСотрудникам КАК ВидыВыплатБывшимСотрудникам
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыПрочихДоходовФизическихЛиц.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	ИЗ
	|		Справочник.ВидыПрочихДоходовФизическихЛиц КАК ВидыПрочихДоходовФизическихЛиц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыОсобыхНачисленийИУдержаний.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	ИЗ
	|		Перечисление.ВидыОсобыхНачисленийИУдержаний КАК ВидыОсобыхНачисленийИУдержаний) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовБюджетПоВидамНачислений КАК СтатьиПоВидамНачислений
	|		ПО Начисления.Начисление = СтатьиПоВидамНачислений.Начисление
	|			И (СтатьиПоВидамНачислений.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиПоВидамНачислений.Начисление КАК Начисление,
	|	СтатьиПоВидамНачислений.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	ВТСтатьиРасходовБюджетПоВидамНачислений КАК СтатьиПоВидамНачислений
	|ГДЕ
	|	СтатьиПоВидамНачислений.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)";
	
	СтатьиРасходовПоВидамНачислений = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтатьиРасходовПоВидамНачислений.Вставить(Выборка.Начисление, Выборка.СтатьяРасходов);
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
КонецПроцедуры

// Получает настройки начислений для алгоритмов бухучета.
// Данные помещаются в таблицу ВТНастройкиНачислений.
//
Процедура СоздатьВТНастройкиНачисленийДляБухучета(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление,
	|	Начисления.ИспользуетСдельныйЗаработок
	|		И Начисления.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоСдельномуЗаработку) КАК ИспользуетСдельныйЗаработок,
	|	Начисления.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц КАК ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПособиеПоУходуЗаРебенкомДоПолутораЛет,
	|	Начисления.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам) КАК БухучетПоБазовымРасчетам,
	|	Начисления.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазеСреднегоЗаработка) КАК БухучетПоБазеСреднегоЗаработка,
	|	Начисления.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоФактическимНачислениям) КАК БухучетПоФактическимНачислениям,
	|	Начисления.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета) КАК БухучетУказанВНачислении,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|			ТОГДА Начисления.СтатьяФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА &РаботаВБюджетномУчреждении
	|			ТОГДА Начисления.СтатьяРасходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРасходов,
	|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|			ТОГДА Начисления.ОтношениеКЕНВД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	Начисления.ОчередностьОтраженияВУчете КАК ОчередностьОтраженияВУчете,
	|	ВЫБОР
	|		КОГДА Начисления.ВидОперацииПоЗарплате В (&РасходыФСС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРасходыФСС,
	|	Начисления.ИспользуетСреднийЗаработокОбщий КАК ИспользуетСреднийЗаработокОбщий,
	|	ВЫБОР
	|		КОГДА Начисления.ВидОтпуска.СпособРасчетаОтпуска В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхДнях), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням)
	|		КОГДА Начисления.ВидОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПустаяСсылка)
	|	КОНЕЦ КАК СпособРасчетаПоСреднемуЗаработку,
	|	Начисления.КодДоходаСтраховыеВзносы.ВходитВБазуФСС КАК ВходитВБазуФСС,
	|	Начисления.ИспользуетБухучетПоказателей КАК ИспользуетБухучетПоказателей,
	|	&НазначениеРасчетаСохраняемогоДенежногоСодержания КАК НазначениеРасчетаСохраняемогоДенежногоСодержания,
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления
	|ПОМЕСТИТЬ ВТНастройкиНачислений
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	ОписаниеПоля = "НЕОПРЕДЕЛЕНО";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		// Уточнение получения поля НазначениеРасчетаСохраняемогоДенежногоСодержания.
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ОписаниеПоляНазначениеРасчетаСохраняемогоДенежногоСодержания(ОписаниеПоля);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НазначениеРасчетаСохраняемогоДенежногоСодержания", ОписаниеПоля);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПоказателиНачисленийОпределяющиеБухучет(Запрос)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияПоказатели.Ссылка КАК Начисление,
	|	НачисленияПоказатели.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТПоказателиНачисленийОпределяющиеБухучет
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|ГДЕ
	|	НачисленияПоказатели.ЗадаетБухучет";
	Запрос.Выполнить();

КонецПроцедуры

// Получение бухучета начислений, для которых определяется только доля ЕНВД
// по месячной доле сотрудника, это единовременные пособия ФСС, компенсация за задержку зарплаты.
// Вызывается только если выключен учет по статьям финансирования.
//
Функция СоздатьВТБухучетНачисленийЕНВДПоЕжемесячнойДоле(Запрос, ИмяВТНачисленияИсходная)
	
	ПрименяетсяЕНВД = Запрос.Параметры.ЕстьЕНВД;
	
	Если ПрименяетсяЕНВД Тогда
		
		СтрокиЕНВД = Новый ТаблицаЗначений;
		СтрокиЕНВД.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
		СтрокиЕНВД.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
		
		ПроцентЕНВД = Запрос.Параметры.ПроцентЕНВД;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(НастройкиБухучета.ОтношениеКЕНВД, ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)) КАК ОтношениеКЕНВД
		|ИЗ
		|	ВТНачисленияДляРаспределения КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаВсехСтрок КАК НастройкиБухучета
		|		ПО Начисления.ИдентификаторСтроки = НастройкиБухучета.ИдентификаторСтроки
		|ГДЕ
		|	Начисления.Начисление В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
			
			НоваяСтрока = СтрокиЕНВД.Добавить();
			НоваяСтрока.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
			
			ОблагаетсяЕНВД = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				Если ПроцентЕНВД = 100 И Выборка.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом Тогда
					СтрокаОблагаетсяЕНВД = Истина;
				ИначеЕсли Выборка.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД Тогда
					СтрокаОблагаетсяЕНВД = Истина;
				Иначе
					СтрокаОблагаетсяЕНВД = Ложь;
				КонецЕсли;
				ОблагаетсяЕНВД = ?(ОблагаетсяЕНВД = Неопределено, СтрокаОблагаетсяЕНВД, ОблагаетсяЕНВД И СтрокаОблагаетсяЕНВД);
			КонецЦикла;
			
			НоваяСтрока.ОблагаетсяЕНВД = ОблагаетсяЕНВД;
			
		КонецЦикла;
		
		Если СтрокиЕНВД.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтрокиЕНВД", СтрокиЕНВД);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиЕНВД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СтрокиЕНВД.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
		|ПОМЕСТИТЬ ВТСтрокиЕНВД
		|ИЗ
		|	&СтрокиЕНВД КАК СтрокиЕНВД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.Подразделение КАК ПодразделениеУчетаЗатрат,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	СтрокиЕНВД.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	Начисления.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТБухучетНачисленийЕНВДПоЕжемесячнойДоле
		|ИЗ
		|	ВТНачисленияДляРаспределения КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиЕНВД КАК СтрокиЕНВД
		|		ПО Начисления.ИдентификаторСтроки = СтрокиЕНВД.ИдентификаторСтроки";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
		Запрос.Выполнить();
		
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТСтрокиЕНВД");
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.Подразделение КАК ПодразделениеУчетаЗатрат,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЛОЖЬ КАК ОблагаетсяЕНВД,
		|	Начисления.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТБухучетНачисленийЕНВДПоЕжемесячнойДоле
		|ИЗ
		|	ВТНачисленияДляРаспределения КАК Начисления
		|ГДЕ
		|	Начисления.Начисление В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Бухучет.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ВТБухучетНачисленийЕНВДПоЕжемесячнойДоле КАК Бухучет";
	
	ЕстьТаблица = Не Запрос.Выполнить().Пустой();
	Если ЕстьТаблица Тогда
		// Зарегистрируем обработанные идентификаторы строк.
		ДополнитьВТОбработанныеСтроки(Запрос, "ВТБухучетНачисленийЕНВДПоЕжемесячнойДоле");
	Иначе
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТБухучетНачисленийЕНВДПоЕжемесячнойДоле");
	КонецЕсли;
	
	Возврат ЕстьТаблица;
	
КонецФункции

Функция СоздатьВТБухучетНачисленийСдельногоЗаработка(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияБюджет)
	
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	Запрос.УстановитьПараметр("ПоказательСдельногоЗаработка", ПоказательСдельногоЗаработка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
	|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО Начисления.Начисление = НастройкиНачислений.Начисление
	|			И (НастройкиНачислений.ИспользуетСдельныйЗаработок)
	|ГДЕ
	|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СУММА(ЗначенияПоказателей.Значение) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьСтатьиФинансирования
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|		ИНАЧЕ ЗначенияПоказателей.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ЗначенияПоказателей.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|			ТОГДА ЗначенияПоказателей.ОтношениеКЕНВД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	ЗначенияПоказателей.Подразделение КАК ПодразделениеУчетаЗатрат
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК СписокНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО СписокНачислений.Начисление = НастройкиНачислений.Начисление
	|			И (НастройкиНачислений.ИспользуетСдельныйЗаработок)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
	|		ПО СписокНачислений.Сотрудник = ЗначенияПоказателей.Сотрудник
	|			И (ЗначенияПоказателей.Показатель = &ПоказательСдельногоЗаработка)
	|			И (ЗначенияПоказателей.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка))
	|			И (НастройкиНачислений.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц
	|					И НАЧАЛОПЕРИОДА(ЗначенияПоказателей.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СписокНачислений.ДатаНачала, МЕСЯЦ)
	|				ИЛИ ЗначенияПоказателей.Период МЕЖДУ СписокНачислений.ДатаНачала И СписокНачислений.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокНачислений.ИдентификаторСтроки,
	|	ЗначенияПоказателей.СтатьяФинансирования,
	|	ЗначенияПоказателей.СпособОтраженияЗарплатыВБухучете,
	|	ЗначенияПоказателей.ОтношениеКЕНВД,
	|	ЗначенияПоказателей.Подразделение";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ТаблицаБухучет = НоваяТаблицаБухучетНачисленийПромежуточная();
	
	ТаблицаКоэффициентов = РезультатЗапроса[1].Выгрузить();
	ТаблицаКоэффициентов.Индексы.Добавить("ИдентификаторСтроки");
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	ВыборкаНачисления = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаНачисления.Следующий() Цикл
		
		Отбор.ИдентификаторСтроки = ВыборкаНачисления.ИдентификаторСтроки;
		
		ЗаполнитьЗначенияСвойств(Отбор, ВыборкаНачисления);
		СтрокиОтражения = ТаблицаКоэффициентов.НайтиСтроки(Отбор);
		Если СтрокиОтражения.Количество() = 0 Тогда
			// пропускаем эту строку, т.к. бухучет сдельного заработка не задан
			Продолжить;
		КонецЕсли;
		
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиОтражения,"Коэффициент");
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ВыборкаНачисления.Сумма, Коэффициенты);
		
		Если Результаты = Неопределено Тогда
			// пропускаем эту строку, т.к. бухучет сдельного заработка не удалось получить
			Продолжить;
		Иначе
			
			Индекс = 0;
			Для Каждого СтрокаОтражения Из СтрокиОтражения Цикл
				
				НоваяСтрока = ТаблицаБухучет.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачисления);
				
				НоваяСтрока.СтатьяФинансирования 				= СтрокаОтражения.СтатьяФинансирования;
				НоваяСтрока.СпособОтраженияЗарплатыВБухучете 	= СтрокаОтражения.СпособОтраженияЗарплатыВБухучете;
				НоваяСтрока.ПодразделениеУчетаЗатрат 			= СтрокаОтражения.ПодразделениеУчетаЗатрат;
				НоваяСтрока.ОблагаетсяЕНВД = ?(СтрокаОтражения.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД, Истина, Ложь);
				
				НоваяСтрока.Сумма = Результаты[Индекс];
				
				Если РаботаВБюджетномУчреждении Тогда
					НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(ВыборкаНачисления.Начисление, ПараметрыРаспределенияБюджет);
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаБухучет.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучет, "ВТБухучетНачисленийСдельногоЗаработка");
	// Зарегистрируем обработанные идентификаторы строк.
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТБухучетНачисленийСдельногоЗаработка");
	
	Возврат Истина;
		
КонецФункции

Функция СоздатьВТНачисленияПраздничныхСверхурочныхДляБухучета(Запрос, ИмяВТНачисленияИсходная, ИсточникДанныхОДатахНачислений, ПараметрыРаспределенияБюджет)

	УдалитьВТ = Новый Массив;
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	ВидыВремени.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПраздникиБезПовышеннойОплаты"));
	ВидыВремени.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	ВидыВремени.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты"));
	
	Запрос.УстановитьПараметр("ВидыВремениПраздничныхСверхурочных", ВидыВремени);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияВидыВремени.Ссылка КАК Ссылка,
	|	НачисленияВидыВремени.ВидВремени КАК ВидВремени
	|ПОМЕСТИТЬ ВТНачисленияПраздничныхСверхурочных
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВидыВремени КАК НачисленияВидыВремени
	|ГДЕ
	|	НачисленияВидыВремени.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете)
	|	И НачисленияВидыВремени.ВидВремени В(&ВидыВремениПраздничныхСверхурочных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокНачислений.Начисление КАК Начисление,
	|	СписокНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	СписокНачислений.Сотрудник КАК Сотрудник,
	|	СписокНачислений.ДатаНачала КАК ДатаНачала,
	|	СписокНачислений.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.ВидВремени КАК ВидУчетаВремени
	|ПОМЕСТИТЬ ВТСтрокиКОбработке
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК СписокНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
	|		ПО СписокНачислений.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПраздничныхСверхурочных КАК Начисления
	|		ПО СписокНачислений.Начисление = Начисления.Ссылка
	|ГДЕ
	|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
	|	И СписокНачислений.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиКОбработке.ПериодРегистрации КАК ПериодРегистрации,
	|	СтрокиКОбработке.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СтрокиКОбработке.Сотрудник КАК Сотрудник,
	|	СтрокиКОбработке.Начисление КАК Начисление,
	|	НАЧАЛОПЕРИОДА(СтрокиКОбработке.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	НастройкиБухучета.Дата КАК Дата,
	|	НастройкиБухучета.ВидУчетаВремени КАК ВидУчетаВремени,
	|	НастройкиБухучета.Часы КАК Часы,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СтатьяРасходов КАК СтатьяРасходов,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|					И НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|				ИЛИ &ЕстьЕНВД
	|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаАналитика
	|ИЗ
	|	ВТСтрокиКОбработке КАК СтрокиКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетРабочегоВремениСотрудников КАК НастройкиБухучета
	|		ПО СтрокиКОбработке.Сотрудник = НастройкиБухучета.Сотрудник
	|			И СтрокиКОбработке.ВидУчетаВремени = НастройкиБухучета.ВидУчетаВремени
	|			И СтрокиКОбработке.ПериодРегистрации >= НастройкиБухучета.ПериодРегистрации
	|			И (НастройкиБухучета.Дата МЕЖДУ СтрокиКОбработке.ДатаНачала И СтрокиКОбработке.ДатаОкончания)
	|			И (НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|				ИЛИ &ИспользоватьСтатьиФинансирования
	|					И НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|				ИЛИ &РаботаВБюджетномУчреждении
	|					И НастройкиБухучета.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				ИЛИ &ЕстьЕНВД
	|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	БухучетРабочегоВремени = Запрос.Выполнить().Выгрузить();
	УдалитьВТ.Добавить("ВТНачисленияПраздничныхСверхурочных");
	УдалитьВТ.Добавить("ВТСтрокиКОбработке");
	
	Если БухучетРабочегоВремени.Количество() = 0 Тогда
		// Бухучет не задан.
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат Ложь;
	КонецЕсли;
	
	// Идентификаторы строк, по которым требуется дополнить аналитику.
	Отбор = Новый Структура("НеЗаполненаАналитика", Истина);
	МассивСтрокБезАналитики = ОбщегоНазначения.ВыгрузитьКолонку(БухучетРабочегоВремени.Скопировать(Отбор),"ИдентификаторСтроки", Истина);
	ИдентификаторыСтрокБезАналитики = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(МассивСтрокБезАналитики);
	
	ПрименяетсяЕНВД = Запрос.Параметры.ЕстьЕНВД;
	ИспользоватьСтатьиФинансирования = Запрос.Параметры.ИспользоватьСтатьиФинансирования;
	РаботаВБюджетномУчреждении 		 = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	ПоляБухучета = "СпособОтраженияЗарплатыВБухучете";
	Если РаботаВБюджетномУчреждении Тогда
		ПоляБухучета = ПоляБухучета + ",СтатьяРасходов";
	КонецЕсли;
	Если ИспользоватьСтатьиФинансирования Тогда
		ПоляБухучета = ПоляБухучета + ",СтатьяФинансирования";
	КонецЕсли;
	Если ПрименяетсяЕНВД Тогда
		ПоляБухучета = ПоляБухучета + ",ОтношениеКЕНВД";
	КонецЕсли;
	
	// Получим фактически оплаченные дни по видам времени.
	ТаблицаЗапросаОплаченногоВремени = БухучетРабочегоВремени.Скопировать(,"ПериодРегистрации,ПериодДействия,Сотрудник,Начисление");
	ТаблицаЗапросаОплаченногоВремени.Свернуть("ПериодРегистрации,ПериодДействия,Сотрудник,Начисление");
	
	БухучетРабочегоВремени.Свернуть("ИдентификаторСтроки,Сотрудник,Начисление,Дата,ВидУчетаВремени,Часы,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете,ОтношениеКЕНВД");
	
	// Получим таблицу оплаченного времени - ТаблицаОплаченногоВремени.
	// колонки таблицы: Сотрудник, ПериодДействия, Начисление, Дата, ВидУчетаВремени.
	Если ИсточникДанныхОДатахНачислений = Неопределено Тогда
		ТаблицаОплаченногоВремени = РасчетЗарплатыРасширенный.ДатыНачисленийОплачивающихВидыВремени(ТаблицаЗапросаОплаченногоВремени);
	Иначе
		ТаблицаОплаченногоВремени = ИсточникДанныхОДатахНачислений.ДатыНачисленийОплачивающихВидыВремени(ТаблицаЗапросаОплаченногоВремени);
	КонецЕсли;
	
	ТаблицаБухучета = НоваяТаблицаНастройкиНачисленийДляБухучета();
	
	ИдентификаторыСтрок = ОбщегоНазначения.ВыгрузитьКолонку(БухучетРабочегоВремени, "ИдентификаторСтроки", Истина);
	Запрос.УстановитьПараметр("ОтборСтрок", ИдентификаторыСтрок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Подразделение КАК ПодразделениеУчетаЗатрат,
	|	Начисления.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|ГДЕ
	|	Начисления.ИдентификаторСтроки В(&ОтборСтрок)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	// В таблицу собираем строки начислений, для которых бухучет задан не для всех оплаченных дней.
	// Доля суммы, приходящаяся на такие дни будет отражена в бухучете по общим правилам.
	НеОбработанныеНачисления = ТаблицаНачислений.СкопироватьКолонки("ИдентификаторСтроки,Сумма");
	// В таблицу собираем идентификаторы строк тех начислений, которые полностью распределили,
	// эти строки будут помещены в таблицу ВТСтрокиКУдалению.
	ОбработанныеНачисления = НеОбработанныеНачисления.СкопироватьКолонки("ИдентификаторСтроки");
	
	ТаблицаНачислений.Индексы.Добавить("ИдентификаторСтроки");
	ОтборНачислений = Новый Структура("ИдентификаторСтроки");
	
	БухучетРабочегоВремени.Индексы.Добавить("ИдентификаторСтроки,Дата,ВидУчетаВремени");
	ОтборБухучета = Новый Структура("ИдентификаторСтроки,Дата,ВидУчетаВремени");
	
	ТаблицаОплаченногоВремени.Индексы.Добавить("Сотрудник,Начисление,ПериодДействия");
	ОтборОплаченныхДней = Новый Структура("Сотрудник,Начисление,ПериодДействия");
	
	// Оплаченные дни, по которым зарегистрирован бухучет.
	ОплаченныеДниСБухучетом = Новый Массив;
	// Оплаченные дни, по которым не зарегистрирован бухучет.
	ОплаченныеДниБезБухучета = Новый Массив;
	// Строки с бухучетом рабочего времени.
	СтрокиБазы = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		ОтборНачислений.ИдентификаторСтроки = ИдентификаторСтроки;
		ОтборБухучета.ИдентификаторСтроки   = ИдентификаторСтроки;
		
		СтрокиНачислений = ТаблицаНачислений.НайтиСтроки(ОтборНачислений);
		ДатаНачала 		= СтрокиНачислений[0].ДатаНачала;
		ДатаОкончания 	= СтрокиНачислений[0].ДатаОкончания;
		
		ОплаченныеДниСБухучетом.Очистить();
		ОплаченныеДниБезБухучета.Очистить();
		СтрокиБазы.Очистить();
		
		ВсегоЧасов = 0;
		РаспределятьПоЧасам = Истина;
		
		ЗаполнитьЗначенияСвойств(ОтборОплаченныхДней, СтрокиНачислений[0]);
		ОплаченныеДни = ТаблицаОплаченногоВремени.НайтиСтроки(ОтборОплаченныхДней);
		Для каждого СтрокаОплаченныйДень Из ОплаченныеДни Цикл
			
			Если СтрокаОплаченныйДень.Дата < ДатаНачала Или СтрокаОплаченныйДень.Дата > ДатаОкончания Тогда
				// день не в периоде начисления
				Продолжить;
			КонецЕсли;
			
			// Дополним отбор строк бухучета полями: Дата,ВидУчетаВремени.
			ЗаполнитьЗначенияСвойств(ОтборБухучета, СтрокаОплаченныйДень);
			СтрокиБухучет = БухучетРабочегоВремени.НайтиСтроки(ОтборБухучета);
			Если СтрокиБухучет.Количество() = 0 Тогда
				// Для оплаченного дня не задан бухучет по этому виду времени.
				ОплаченныеДниБезБухучета.Добавить(СтрокаОплаченныйДень.Дата);
			Иначе
				// Для оплаченного дня задан бухучет.
				ОплаченныеДниСБухучетом.Добавить(СтрокаОплаченныйДень.Дата);
				Для каждого СтрокаБухучета Из СтрокиБухучет Цикл
					СтрокиБазы.Добавить(СтрокаБухучета);
					ВсегоЧасов = ВсегоЧасов + СтрокаБухучета.Часы;
					Если СтрокаБухучета.Часы = 0 Тогда
						РаспределятьПоЧасам = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		ДнейОплаченоСБухучетом = ОплаченныеДниСБухучетом.Количество();
		Если ДнейОплаченоСБухучетом = 0 Тогда
			// У начисления нет оплаченных дней, для которых задан бухучет.
			Продолжить;
		КонецЕсли;
		
		// Распределение начислений.
		
		ДнейОплаченоБезБухучета = ОплаченныеДниБезБухучета.Количество();
		Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
			
			Сумма = СтрокаНачисления.Сумма;
			Если ДнейОплаченоБезБухучета > 0 Тогда
				// Сумма по строке, которую необходимо отразить в бухучете по общим правилам.
				СуммаБезРаспределения = ОКР(ДнейОплаченоБезБухучета/(ДнейОплаченоБезБухучета+ДнейОплаченоСБухучетом)*Сумма,2);
				// Добавим в таблицу строку начисления, которую необходимо отразить в бухучете по общим правилам.
				НоваяСтрока = НеОбработанныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				НоваяСтрока.Сумма = СуммаБезРаспределения;
				// Сумма строки начисления, которую необходимо распределить.
				Сумма = Сумма - СуммаБезРаспределения;
			Иначе
				// Добавим в таблицу строку, которая полностью обработана, для помещения в таблицу ВТОбработанныеСтроки.
				НоваяОбработаннаяСтрока = ОбработанныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяОбработаннаяСтрока, СтрокаНачисления);
			КонецЕсли;
			
			РаспределеннаяСумма = 0;
			Если РаспределятьПоЧасам Тогда
				СтоимостьДняЧаса = Сумма/ВсегоЧасов;
			Иначе
				СтоимостьДняЧаса = Сумма/ДнейОплаченоСБухучетом;
			КонецЕсли;
			
			КоличествоСтрокБазы = СтрокиБазы.ВГраница();
			Для Индекс = 0 По КоличествоСтрокБазы Цикл
				
				СтрокаБазы = СтрокиБазы[Индекс];
				Если Индекс = КоличествоСтрокБазы Тогда
					// Это последняя строка.
					СуммаДня = Сумма - РаспределеннаяСумма;
				Иначе
					Если РаспределятьПоЧасам Тогда
						СуммаДня = ОКР(СтоимостьДняЧаса * СтрокаБазы.Часы,2);
					Иначе
						СуммаДня = ОКР(СтоимостьДняЧаса, 2);
					КонецЕсли;
				КонецЕсли;
				РаспределеннаяСумма = РаспределеннаяСумма + СуммаДня;
				
				НоваяСтрока = ТаблицаБухучета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБазы, ПоляБухучета);
				НоваяСтрока.Сумма = СуммаДня;
				НоваяСтрока.НеЗаполненаАналитика = ИдентификаторыСтрокБезАналитики[НоваяСтрока.ИдентификаторСтроки] <> Неопределено;
				
				Если РаботаВБюджетномУчреждении Тогда
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
						НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаБухучета.Количество() = 0 Тогда
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат Ложь;
	Иначе
		
		// Свернем результаты, нулевые строки не удаляем.
		ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаБухучета, Ложь);
		
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучета, "ВТНачисленияПраздничныхСверхурочныхДляБухучета");
		Если ИдентификаторыСтрокБезАналитики.Количество() > 0 Тогда
			ДополнитьВТСтрокиБезАналитики(Запрос, "ВТНачисленияПраздничныхСверхурочныхДляБухучета");
		КонецЕсли;
		
		// Зарегистрируем идентификаторы полностью обработанных строк в таблице ВТОбработанныеСтроки.
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ОбработанныеНачисления, "ВТОбработанныеНачисления");
		УдалитьВТ.Добавить("ВТОбработанныеНачисления");
		ДополнитьВТОбработанныеСтроки(Запрос, "ВТОбработанныеНачисления");
		
		Если НеОбработанныеНачисления.Количество() > 0 Тогда
			
			Запрос.УстановитьПараметр("НеОбработанныеНачисления", НеОбработанныеНачисления);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	СписокНачислений.Сумма КАК Сумма
			|ПОМЕСТИТЬ ВТНеОбработанныеНачисления
			|ИЗ
			|	&НеОбработанныеНачисления КАК СписокНачислений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	СписокНачислений.Сумма КАК Сумма,
			|	&ПоляТаблицы КАК ПоляТаблицы
			|ПОМЕСТИТЬ ВТНачисленияВременная
			|ИЗ
			|	ВТНачисленияДляРаспределения КАК СписокНачислений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНачисленияДляРаспределения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НачисленияДляРаспределенияВременная.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ЕСТЬNULL(НеОбработанныеНачисления.Сумма, НачисленияДляРаспределенияВременная.Сумма) КАК Сумма,
			|	&ПоляТаблицы КАК ПоляТаблицы
			|ПОМЕСТИТЬ ВТНачисленияДляРаспределения
			|ИЗ
			|	ВТНачисленияВременная КАК НачисленияДляРаспределенияВременная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеОбработанныеНачисления КАК НеОбработанныеНачисления
			|		ПО НачисленияДляРаспределенияВременная.ИдентификаторСтроки = НеОбработанныеНачисления.ИдентификаторСтроки";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы КАК ПоляТаблицы", "*");
			Запрос.Выполнить();
			УдалитьВТ.Добавить("ВТНеОбработанныеНачисления");
			УдалитьВТ.Добавить("ВТНачисленияВременная");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьВТНачисленияПоПоказателямДляБухучета(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияБюджет)
	
	УдалитьВТ = Новый Массив;
	
	ИмяТаблицыБухучетПоказателей = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		ИмяТаблицыБухучетПоказателей = Модуль.ИмяТаблицыБухучетПоказателейДляЗапроса();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицыБухучетПоказателей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	ПоказателиОпределяющиеБухучет.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТПоказателиДляБухучета
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиНачисленийОпределяющиеБухучет КАК ПоказателиОпределяющиеБухучет
	|		ПО Начисления.Начисление = ПоказателиОпределяющиеБухучет.Начисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
	|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
	|ГДЕ
	|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТПоказателиДляБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ВТПоказателиДляБухучета КАК ВТПоказателиДляБухучета";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	Если Запрос.Выполнить().Пустой() Тогда
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТПоказателиДляБухучета");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиДляБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПоказателиДляБухучета.Организация КАК Организация,
	|	ПоказателиДляБухучета.Сотрудник КАК Сотрудник,
	|	ПоказателиДляБухучета.Показатель КАК Показатель,
	|	МАКСИМУМ(БухучетПоказателей.Период) КАК Период,
	|	ПоказателиДляБухучета.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТМаксимальныеПериоды
	|ИЗ
	|	ВТПоказателиДляБухучета КАК ПоказателиДляБухучета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаБухучетПоказателей КАК БухучетПоказателей
	|		ПО ПоказателиДляБухучета.Организация = БухучетПоказателей.Организация
	|			И ПоказателиДляБухучета.Сотрудник = БухучетПоказателей.Сотрудник
	|			И ПоказателиДляБухучета.Показатель = БухучетПоказателей.Показатель
	|			И ПоказателиДляБухучета.ДатаНачала >= БухучетПоказателей.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоказателиДляБухучета.ИдентификаторСтроки,
	|	ПоказателиДляБухучета.Организация,
	|	ПоказателиДляБухучета.Сотрудник,
	|	ПоказателиДляБухучета.Показатель,
	|	ПоказателиДляБухучета.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коэффициенты.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Коэффициенты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Коэффициенты.СтатьяРасходов КАК СтатьяРасходов,
	|	Коэффициенты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Коэффициенты.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	СУММА(Коэффициенты.Коэффициент) КАК Коэффициент
	|ПОМЕСТИТЬ ВТКоэффициенты
	|ИЗ
	|	(ВЫБРАТЬ
	|		МаксимальныеПериоды.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		БухучетПоказателей.СтатьяФинансирования КАК СтатьяФинансирования,
	|		БухучетПоказателей.СтатьяРасходов КАК СтатьяРасходов,
	|		БухучетПоказателей.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		БухучетПоказателей.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|		СУММА(БухучетПоказателей.Значение) КАК Коэффициент
	|	ИЗ
	|		ВТМаксимальныеПериоды КАК МаксимальныеПериоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаБухучетПоказателей КАК БухучетПоказателей
	|			ПО МаксимальныеПериоды.Организация = БухучетПоказателей.Организация
	|				И МаксимальныеПериоды.Сотрудник = БухучетПоказателей.Сотрудник
	|				И МаксимальныеПериоды.Показатель = БухучетПоказателей.Показатель
	|				И МаксимальныеПериоды.Период = БухучетПоказателей.Период
	|				И МаксимальныеПериоды.ДатаНачала <= БухучетПоказателей.ДатаОкончания
	|				И (БухучетПоказателей.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МаксимальныеПериоды.ИдентификаторСтроки,
	|		БухучетПоказателей.СтатьяФинансирования,
	|		БухучетПоказателей.СтатьяРасходов,
	|		БухучетПоказателей.СпособОтраженияЗарплатыВБухучете,
	|		БухучетПоказателей.ОтношениеКЕНВД
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МаксимальныеПериоды.ИдентификаторСтроки,
	|		БухучетПоказателей.СтатьяФинансирования,
	|		БухучетПоказателей.СтатьяРасходов,
	|		БухучетПоказателей.СпособОтраженияЗарплатыВБухучете,
	|		БухучетПоказателей.ОтношениеКЕНВД,
	|		СУММА(БухучетПоказателей.Значение)
	|	ИЗ
	|		ВТМаксимальныеПериоды КАК МаксимальныеПериоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаБухучетПоказателей КАК БухучетПоказателей
	|			ПО МаксимальныеПериоды.Организация = БухучетПоказателей.Организация
	|				И МаксимальныеПериоды.Сотрудник = БухучетПоказателей.Сотрудник
	|				И МаксимальныеПериоды.Показатель = БухучетПоказателей.Показатель
	|				И МаксимальныеПериоды.Период = БухучетПоказателей.Период
	|				И (БухучетПоказателей.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МаксимальныеПериоды.ИдентификаторСтроки,
	|		БухучетПоказателей.СтатьяФинансирования,
	|		БухучетПоказателей.СтатьяРасходов,
	|		БухучетПоказателей.СпособОтраженияЗарплатыВБухучете,
	|		БухучетПоказателей.ОтношениеКЕНВД) КАК Коэффициенты
	|
	|СГРУППИРОВАТЬ ПО
	|	Коэффициенты.СтатьяФинансирования,
	|	Коэффициенты.ИдентификаторСтроки,
	|	Коэффициенты.ОтношениеКЕНВД,
	|	Коэффициенты.СпособОтраженияЗарплатыВБухучете,
	|	Коэффициенты.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиКОбработке.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСтрокиКОбработке
	|ИЗ
	|	ВТКоэффициенты КАК СтрокиКОбработке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коэффициенты.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Коэффициенты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Коэффициенты.СтатьяРасходов КАК СтатьяРасходов,
	|	Коэффициенты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Коэффициенты.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	Коэффициенты.Коэффициент КАК Коэффициент
	|ИЗ
	|	ВТКоэффициенты КАК Коэффициенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиКОбработке КАК СтрокиКОбработке
	|		ПО Начисления.ИдентификаторСтроки = СтрокиКОбработке.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаВсехСтрокПоУмолчанию КАК НастройкиБухучетаПоУмолчанию
	|		ПО Начисления.ИдентификаторСтроки = НастройкиБухучетаПоУмолчанию.ИдентификаторСтроки";
	
	УдалитьВТ.Добавить("ВТПоказателиДляБухучета");
	УдалитьВТ.Добавить("ВТМаксимальныеПериоды");
	УдалитьВТ.Добавить("ВТКоэффициенты");
	УдалитьВТ.Добавить("ВТСтрокиКОбработке");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаБухучетПоказателей", ИмяТаблицыБухучетПоказателей);
	
	УстановитьПривилегированныйРежим(Истина); // Для чтения из РС #ТаблицаБухучетПоказателей.
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	КоличествоРезультатов = РезультатыЗапроса.ВГраница();
	
	Если РезультатыЗапроса[КоличествоРезультатов].Пустой() Тогда
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаБухучет = НоваяТаблицаНастройкиНачисленийДляБухучета();
	
	ЕстьЕНВД = Запрос.Параметры.ЕстьЕНВД;
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	ТаблицаКоэффициентов = РезультатыЗапроса[КоличествоРезультатов-1].Выгрузить();
	ТаблицаКоэффициентов.Индексы.Добавить("ИдентификаторСтроки");
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	ВыборкаНачисления = РезультатыЗапроса[КоличествоРезультатов].Выбрать();
	Пока ВыборкаНачисления.Следующий() Цикл
		
		Отбор.ИдентификаторСтроки = ВыборкаНачисления.ИдентификаторСтроки;
		
		ЗаполнитьЗначенияСвойств(Отбор, ВыборкаНачисления);
		СтрокиОтражения = ТаблицаКоэффициентов.НайтиСтроки(Отбор);
		Если СтрокиОтражения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиОтражения,"Коэффициент");
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ВыборкаНачисления.Сумма, Коэффициенты);
		
		Если Результаты = Неопределено Тогда
			
			НоваяСтрока = ТаблицаБухучет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачисления);
			НоваяСтрока.НеЗаполненаАналитика = Истина;
			Если РаботаВБюджетномУчреждении Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(ВыборкаНачисления.Начисление, ПараметрыРаспределенияБюджет);
			КонецЕсли;
			
		Иначе
			
			Индекс = 0;
			Для Каждого СтрокаОтражения Из СтрокиОтражения Цикл
				
				НоваяСтрока = ТаблицаБухучет.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачисления);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтражения);
				НоваяСтрока.Сумма = Результаты[Индекс];
				
				Если Не ЗначениеЗаполнено(СтрокаОтражения.СтатьяФинансирования) Или Не ЗначениеЗаполнено(СтрокаОтражения.СпособОтраженияЗарплатыВБухучете) Тогда
					НоваяСтрока.НеЗаполненаАналитика = Истина;
				КонецЕсли;
				
				Если РаботаВБюджетномУчреждении Тогда
					НоваяСтрока.СтатьяРасходов = СтрокаОтражения.СтатьяРасходов;
					Если Не ЗначениеЗаполнено(СтрокаОтражения.СтатьяРасходов) Тогда
						НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(ВыборкаНачисления.Начисление, ПараметрыРаспределенияБюджет);
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьЕНВД Тогда
					НоваяСтрока.ОблагаетсяЕНВД = ?(СтрокаОтражения.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД, Истина, Ложь);
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучет, "ВТНачисленияПоПоказателямДляБухучета");
	
	// Зарегистрируем обработанные идентификаторы строк.
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТНачисленияПоПоказателямДляБухучета");
	ДополнитьВТСтрокиБезАналитики(Запрос, "ВТНачисленияПоПоказателямДляБухучета");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьВТНачисленияПоДокументамДляБухучета(Запрос, ИмяВТНачисленияИсходная)
	
	УдалитьВТ = Новый Массив;
	
	ИспользоватьСтатьиФинансирования = Запрос.Параметры.ИспользоватьСтатьиФинансирования;
	
	Если Не ИспользоватьСтатьиФинансирования Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.Сумма КАК Сумма,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ВЫБОР
		|		КОГДА &ЕстьЕНВД
		|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаАналитика
		|ПОМЕСТИТЬ ВТНачисленияПоДокументамДляБухучета
		|ИЗ
		|	ВТНачисленияДляРаспределения КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
		|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыПервичныхДокументов КАК НастройкиБухучета
		|		ПО Начисления.Начисление = НастройкиБухучета.НачислениеУдержание
		|			И Начисления.ДокументОснование = НастройкиБухучета.ДокументОснование
		|			И (НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|				ИЛИ &ЕстьЕНВД
		|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))
		|ГДЕ
		|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	ВТНачисленияПоДокументамДляБухучета КАК Таблица";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
		НетНастройки = Запрос.Выполнить().Пустой();
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БухучетПервичныхДокументов.ДокументОснование КАК ДокументОснование,
		|	БухучетПервичныхДокументов.НачислениеУдержание КАК Начисление,
		|	БухучетПервичныхДокументов.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетПервичныхДокументов.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетПервичныхДокументов.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетПервичныхДокументов.ОтношениеКЕНВД КАК ОтношениеКЕНВД
		|ПОМЕСТИТЬ ВТБухучетПервичногоДокументаПараметр
		|ИЗ
		|	&БухучетПервичногоДокумента КАК БухучетПервичныхДокументов";
		Запрос.Выполнить();
		УдалитьВТ.Добавить("ВТБухучетПервичногоДокументаПараметр");
		
		РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
		Если РаботаВБюджетномУчреждении Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.Сумма КАК Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
			|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
			|	ВЫБОР
			|		КОГДА НастройкиБухучета.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
			|			ТОГДА СтатьиРасходовПоУмолчанию.СтатьяРасходов
			|		ИНАЧЕ НастройкиБухучета.СтатьяРасходов
			|	КОНЕЦ КАК СтатьяРасходов,
			|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	ВЫБОР
			|		КОГДА НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|				ИЛИ &ЕстьЕНВД
			|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НеЗаполненаАналитика
			|ПОМЕСТИТЬ ВТНачисленияПоДокументамДляБухучета
			|ИЗ
			|	ВТНачисленияДляРаспределения КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
			|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетПервичногоДокументаПараметр КАК НастройкиБухучета
			|		ПО Начисления.Начисление = НастройкиБухучета.Начисление
			|			И Начисления.ДокументОснование = НастройкиБухучета.ДокументОснование
			|			И (НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
			|				ИЛИ &ЕстьЕНВД
			|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийБюджетПоУмолчанию КАК СтатьиРасходовПоУмолчанию
			|		ПО Начисления.Начисление = СтатьиРасходовПоУмолчанию.Начисление
			|ГДЕ
			|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.ИдентификаторСтроки,
			|	Начисления.Начисление,
			|	Начисления.Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
			|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете,
			|	НастройкиБухучета.СтатьяФинансирования,
			|	ВЫБОР
			|		КОГДА НастройкиБухучета.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
			|			ТОГДА СтатьиРасходовПоУмолчанию.СтатьяРасходов
			|		ИНАЧЕ НастройкиБухучета.СтатьяРасходов
			|	КОНЕЦ,
			|	НастройкиБухучета.ОтношениеКЕНВД,
			|	ВЫБОР
			|		КОГДА НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|				ИЛИ &ЕстьЕНВД
			|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ
			|ИЗ
			|	ВТНачисленияДляРаспределения КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
			|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыПервичныхДокументов КАК НастройкиБухучета
			|		ПО Начисления.Начисление = НастройкиБухучета.НачислениеУдержание
			|			И Начисления.ДокументОснование = НастройкиБухучета.ДокументОснование
			|			И (НастройкиБухучета.ДокументОснование <> &ИсключаемыйРегистратор)
			|			И (НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
			|				ИЛИ &ЕстьЕНВД
			|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийБюджетПоУмолчанию КАК СтатьиРасходовПоУмолчанию
			|		ПО Начисления.Начисление = СтатьиРасходовПоУмолчанию.Начисление
			|ГДЕ
			|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
			|ИЗ
			|	ВТНачисленияПоДокументамДляБухучета КАК Таблица";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
			НетНастройки = Запрос.Выполнить().Пустой();
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.Сумма КАК Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
			|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	ВЫБОР
			|		КОГДА НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|				ИЛИ &ЕстьЕНВД
			|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НеЗаполненаАналитика
			|ПОМЕСТИТЬ ВТНачисленияПоДокументамДляБухучета
			|ИЗ
			|	ВТНачисленияДляРаспределения КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
			|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетПервичногоДокументаПараметр КАК НастройкиБухучета
			|		ПО Начисления.Начисление = НастройкиБухучета.Начисление
			|			И Начисления.ДокументОснование = НастройкиБухучета.ДокументОснование
			|			И (НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|				ИЛИ &ЕстьЕНВД
			|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))
			|ГДЕ
			|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.ИдентификаторСтроки,
			|	Начисления.Начисление,
			|	Начисления.Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
			|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете,
			|	НастройкиБухучета.СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка),
			|	НастройкиБухучета.ОтношениеКЕНВД,
			|	ВЫБОР
			|		КОГДА НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
			|				ИЛИ &ЕстьЕНВД
			|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
			|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ
			|ИЗ
			|	ВТНачисленияДляРаспределения КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
			|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыПервичныхДокументов КАК НастройкиБухучета
			|		ПО Начисления.Начисление = НастройкиБухучета.НачислениеУдержание
			|			И Начисления.ДокументОснование = НастройкиБухучета.ДокументОснование
			|			И (НастройкиБухучета.ДокументОснование <> &ИсключаемыйРегистратор)
			|			И (НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
			|				ИЛИ &ЕстьЕНВД
			|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))
			|ГДЕ
			|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
			|ИЗ
			|	ВТНачисленияПоДокументамДляБухучета КАК Таблица";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
			НетНастройки = Запрос.Выполнить().Пустой();
			
			// Получим статьи расходов, которые заданы в первичном документе.
			// Указание статьи в этом режиме не означает указание бухучета.
			// При окончательно обработке для строк с этими идентификаторами будут установлены
			// эти статьи расходов.
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	БухучетПервичногоДокумента.СтатьяРасходов КАК СтатьяРасходов
			|ПОМЕСТИТЬ ВТСтатьиРасходовПервичныхДокументов
			|ИЗ
			|	ВТНачисленияДляРаспределения КАК Начисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетПервичногоДокументаПараметр КАК БухучетПервичногоДокумента
			|		ПО Начисления.Начисление = БухучетПервичногоДокумента.Начисление
			|			И Начисления.ДокументОснование = БухучетПервичногоДокумента.ДокументОснование
			|			И (БухучетПервичногоДокумента.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка))";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
			Если Не Запрос.Выполнить().Пустой() Тогда
				ДополнитьВТСтатьиРасходовНачисленийСотрудников(Запрос, "ВТСтатьиРасходовПервичныхДокументов");
			КонецЕсли;
			УдалитьВТ.Добавить("ВТСтатьиРасходовПервичныхДокументов");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НетНастройки Тогда
		// Добавляем в удаляемые "основную" таблицу.
		УдалитьВТ.Добавить("ВТНачисленияПоДокументамДляБухучета");
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат Ложь;
	КонецЕсли;
	
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТНачисленияПоДокументамДляБухучета");
	ДополнитьВТСтрокиБезАналитики(Запрос, "ВТНачисленияПоДокументамДляБухучета");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);

	Возврат Истина;

КонецФункции

Функция СоздатьВТНастройкиНачисленийСотрудниковДляБухучета(Запрос, ИмяВТНачисленияИсходная)
	
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	УдалитьВТ = Новый Массив;
	
	ПустыеЗначенияДокументОснование = Новый Массив;
	ПустыеЗначенияДокументОснование.Добавить(Неопределено);
	ПустыеЗначенияДокументОснование.Добавить(Null);
	Для Каждого ТипДокументОснование Из Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип.Типы() Цикл
		ПустыеЗначенияДокументОснование.Добавить(ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипДокументОснование).ПустаяСсылка());
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустойДокументОснование", ПустыеЗначенияДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Организация КАК Организация,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.Сумма КАК Сумма,
	|	БухучетПлановыхНачислений.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(БухучетПлановыхНачислений.Период) КАК Период
	|ПОМЕСТИТЬ ВТНастройкиДатыПоследнихДвижений
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО Начисления.Начисление = НастройкиНачислений.Начисление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхНачислений КАК БухучетПлановыхНачислений
	|		ПО Начисления.Сотрудник = БухучетПлановыхНачислений.Сотрудник
	|			И Начисления.Организация = БухучетПлановыхНачислений.Организация
	|			И Начисления.Начисление = БухучетПлановыхНачислений.Начисление
	|			И Начисления.ДатаНачала >= БухучетПлановыхНачислений.Период
	|			И (НастройкиНачислений.ЭтоПособиеПоУходуЗаРебенкомДоПолутораЛет
	|				ИЛИ ВЫБОР
	|					КОГДА Начисления.ДокументОснование В (&ПустойДокументОснование)
	|						ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ Начисления.ДокументОснование
	|				КОНЕЦ = БухучетПлановыхНачислений.ДокументОснование)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.ДатаНачала,
	|	Начисления.Организация,
	|	Начисления.Начисление,
	|	Начисления.Сотрудник,
	|	Начисления.Сумма,
	|	БухучетПлановыхНачислений.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихДвижений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДатыПоследнихДвижений.Начисление КАК Начисление,
	|	ДатыПоследнихДвижений.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|			ТОГДА НастройкиБухучета.СтатьяФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	НастройкиБухучета.СтатьяРасходов КАК СтатьяРасходов,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ПОМЕСТИТЬ ВТНастройкиБухучетаПлановыхНачислений
	|ИЗ
	|	ВТНастройкиДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетПлановыхНачислений КАК НастройкиБухучета
	|		ПО ДатыПоследнихДвижений.Начисление = НастройкиБухучета.Начисление
	|			И ДатыПоследнихДвижений.Сотрудник = НастройкиБухучета.Сотрудник
	|			И ДатыПоследнихДвижений.Организация = НастройкиБухучета.Организация
	|			И ДатыПоследнихДвижений.Период = НастройкиБухучета.Период
	|			И ДатыПоследнихДвижений.ДокументОснование = НастройкиБухучета.ДокументОснование
	|			И (НастройкиБухучета.Используется)
	|			И (НастройкиБухучета.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИЛИ НастройкиБухучета.ДействуетДо >= ДатыПоследнихДвижений.ДатаНачала)
	|			И (НастройкиБухучета.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|				ИЛИ &ИспользоватьСтатьиФинансирования
	|					И НастройкиБухучета.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|				ИЛИ &РаботаВБюджетномУчреждении
	|					И НастройкиБухучета.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				ИЛИ &ЕстьЕНВД
	|					И НастройкиБухучета.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНастройкиДатыПоследнихДвижений");
	
	Если РаботаВБюджетномУчреждении Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НастройкиБухучета.Начисление КАК Начисление,
		|	НастройкиБухучета.Сумма КАК Сумма,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА НастройкиБухучета.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА СтатьиРасходовПоУмолчанию.СтатьяРасходов
		|		ИНАЧЕ НастройкиБухучета.СтатьяРасходов
		|	КОНЕЦ КАК СтатьяРасходов,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ВЫБОР
		|		КОГДА НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|				ИЛИ &ЕстьЕНВД
		|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаАналитика
		|ПОМЕСТИТЬ ВТНастройкиНачисленийСотрудниковДляБухучета
		|ИЗ
		|	ВТНастройкиБухучетаПлановыхНачислений КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
		|		ПО НастройкиБухучета.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийБюджетПоУмолчанию КАК СтатьиРасходовПоУмолчанию
		|		ПО НастройкиБухучета.Начисление = СтатьиРасходовПоУмолчанию.Начисление
		|ГДЕ
		|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	ВТНастройкиНачисленийСотрудниковДляБухучета КАК Таблица";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НастройкиБухучета.Начисление КАК Начисление,
		|	НастройкиБухучета.Сумма КАК Сумма,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСтатьиФинансирования
		|					И НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|				ИЛИ &ЕстьЕНВД
		|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаАналитика
		|ПОМЕСТИТЬ ВТНастройкиНачисленийСотрудниковДляБухучета
		|ИЗ
		|	ВТНастройкиБухучетаПлановыхНачислений КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
		|		ПО НастройкиБухучета.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
		|ГДЕ
		|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	ВТНастройкиНачисленийСотрудниковДляБухучета КАК Таблица";
		
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Добавляем в удаляемые "основную" таблицу.
		УдалитьВТ.Добавить("ВТНастройкиНачисленийСотрудниковДляБухучета");
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат Ложь;
	КонецЕсли;
	
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТНастройкиНачисленийСотрудниковДляБухучета");
	ДополнитьВТСтрокиБезАналитики(Запрос, "ВТНастройкиНачисленийСотрудниковДляБухучета");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат Истина;

КонецФункции

Функция СоздатьВТБухучетНачисленийПоБазеСреднегоЗаработка(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияПоСтатьям, ПараметрыРаспределенияБюджет)
	
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	КоэффициентыСреднегоЗаработкаФССДокумента 	= ПараметрыРаспределенияПоСтатьям.КоэффициентыСреднегоЗаработкаФССДокумента;
	КоэффициентыСреднегоЗаработкаДокумента 		= ПараметрыРаспределенияПоСтатьям.КоэффициентыСреднегоЗаработкаДокумента;
	СтрокиКоэффициентыСреднегоЗаработка 		= ПараметрыРаспределенияПоСтатьям.СтрокиКоэффициентыСреднегоЗаработка;
	
	АктуальныеСтатьиФинансирования 	= ПараметрыРаспределенияПоСтатьям.АктуальныеСтатьиФинансирования;
	АктуальныеСпособыОтражения 		= ПараметрыРаспределенияПоСтатьям.АктуальныеСпособыОтражения;
	СтатьиФинансированияЗамены 		= ПараметрыРаспределенияПоСтатьям.СтатьиФинансированияЗамены;
	СтатьяИспользуетсяВБазеСреднего = ПараметрыРаспределенияПоСтатьям.СтатьяИспользуетсяВБазеСреднего;
	РазрешенныеКатегорииНачисленийСтатьиФинансирования = ПараметрыРаспределенияПоСтатьям.РазрешенныеКатегорииНачисленийСтатьиФинансирования;
	
	СтатьиРасходовБюджетПоВидамНачислений = ПараметрыРаспределенияБюджет.СтатьиРасходовБюджетПоВидамНачислений;
	СтатьяРасходовОплатаТруда = ПараметрыРаспределенияБюджет.СтатьяРасходовОплатаТруда;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Подразделение КАК ПодразделениеУчетаЗатрат,
	|	НастройкиБухучетаПоУмолчанию.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучетаПоУмолчанию.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиНачислений.СпособРасчетаПоСреднемуЗаработку КАК СпособРасчетаПоСреднемуЗаработку,
	|	НастройкиНачислений.ЭтоРасходыФСС КАК ЭтоРасходыФСС,
	|	НастройкиНачислений.ИспользуетСреднийЗаработокОбщий КАК ИспользуетСреднийЗаработокОбщий,
	|	НастройкиНачислений.КатегорияНачисления КАК КатегорияНачисления,
	|	Начисления.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
	|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаВсехСтрокПоУмолчанию КАК НастройкиБухучетаПоУмолчанию
	|		ПО Начисления.ИдентификаторСтроки = НастройкиБухучетаПоУмолчанию.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО Начисления.Начисление = НастройкиНачислений.Начисление
	|ГДЕ
	|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
	|	И НастройкиНачислений.БухучетПоБазеСреднегоЗаработка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьЕНВД = Запрос.Параметры.ЕстьЕНВД;
	ТаблицаБухучет = НоваяТаблицаБухучетНачисленийПромежуточная();
	
	НачисленияПоБазе = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаНачисления Из НачисленияПоБазе Цикл
		
		СтрокиОтражения = СтрокиКоэффициентыСреднегоЗаработка[СтрокаНачисления.ИдентификаторСтроки];
		Если СтрокиОтражения = Неопределено Тогда
			// получим коэффициенты для всего документа
			Если СтрокаНачисления.ИспользуетСреднийЗаработокОбщий Тогда
				КоэффициентыСреднегоЗаработкаПоСотруднику = КоэффициентыСреднегоЗаработкаДокумента[СтрокаНачисления.Сотрудник];
				Если КоэффициентыСреднегоЗаработкаПоСотруднику = Неопределено Тогда
					СтрокиОтражения = КоэффициентыСреднегоЗаработкаДокумента[СтрокаНачисления.СпособРасчетаПоСреднемуЗаработку];
				Иначе
					СтрокиОтражения = КоэффициентыСреднегоЗаработкаПоСотруднику[СтрокаНачисления.СпособРасчетаПоСреднемуЗаработку];
				КонецЕсли;
			Иначе
				СтрокиОтражения = КоэффициентыСреднегоЗаработкаФССДокумента;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокиОтражения = Неопределено Тогда
			Результаты = Неопределено;
		Иначе
			Коэффициенты = СтрокиОтражения.ВыгрузитьКолонку("Коэффициент");
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаНачисления.Сумма, Коэффициенты);
		КонецЕсли;
		
		Если Результаты = Неопределено Тогда
			НоваяСтрока = ТаблицаБухучет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			Если РаботаВБюджетномУчреждении Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		Для Каждого СтрокаОтражения Из СтрокиОтражения Цикл
			
			НоваяСтрока = ТаблицаБухучет.Добавить();
			// Заполняем все поля, в т.ч. бухучетом по умолчанию.
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			НоваяСтрока.Сумма = Результаты[Индекс];
			
			Если ЕстьЕНВД Тогда
				НоваяСтрока.ОблагаетсяЕНВД = СтрокаОтражения.ОблагаетсяЕНВД;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОтражения.СтатьяФинансирования) Тогда
				Если СтатьяИспользуетсяВБазеСреднего[СтрокаОтражения.СтатьяФинансирования] Тогда
					НоваяСтрока.СтатьяФинансирования = АктуальныеСтатьиФинансирования[СтрокаОтражения.СтатьяФинансирования];
				Иначе
					РазрешенныеКатегорииНачислений = РазрешенныеКатегорииНачисленийСтатьиФинансирования[СтрокаОтражения.СтатьяФинансирования];
					Если ЗначениеЗаполнено(РазрешенныеКатегорииНачислений)
						И РазрешенныеКатегорииНачислений.Найти(СтрокаНачисления.КатегорияНачисления) <> Неопределено Тогда
						НоваяСтрока.СтатьяФинансирования = АктуальныеСтатьиФинансирования[СтрокаОтражения.СтатьяФинансирования];
					Иначе
						НоваяСтрока.СтатьяФинансирования = СтатьиФинансированияЗамены[СтрокаОтражения.СтатьяФинансирования];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Заполнение поля СпособОтраженияЗарплатыВБухучете.
			Если Не СтрокаНачисления.ЭтоРасходыФСС Тогда
				Если ЗначениеЗаполнено(СтрокаОтражения.СпособОтраженияЗарплатыВБухучете) Тогда
					НоваяСтрока.СпособОтраженияЗарплатыВБухучете = АктуальныеСпособыОтражения[СтрокаОтражения.СпособОтраженияЗарплатыВБухучете];
				КонецЕсли;
			КонецЕсли;
			
			Если РаботаВБюджетномУчреждении Тогда
				
				НоваяСтатьяРасходов = СтатьиРасходовБюджетПоВидамНачислений[СтрокаНачисления.Начисление];
				Если Не ЗначениеЗаполнено(НоваяСтатьяРасходов) Тогда
					НоваяСтатьяРасходов = СтрокаОтражения.СтатьяРасходов;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтатьяРасходов) Тогда
					НоваяСтатьяРасходов = СтатьяРасходовОплатаТруда;
				КонецЕсли;
				НоваяСтрока.СтатьяРасходов = НоваяСтатьяРасходов;
				
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучет, "ВТБухучетНачисленийПоБазеСреднегоЗаработка");
	
	// Зарегистрируем обработанные идентификаторы строк.
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТБухучетНачисленийПоБазеСреднегоЗаработка");
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьВТБухучетНачисленийПоФактическимНачислениям(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияПоСтатьям, ПараметрыРаспределенияБюджет)
	
	Если Месяц(Запрос.Параметры.ПериодРегистрации) = 1 Тогда
		// Для первого месяца нет смысла получать фактические начисления.
		Возврат Ложь;
	КонецЕсли;
	
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	АктуальныеСтатьиФинансирования 	= ПараметрыРаспределенияПоСтатьям.АктуальныеСтатьиФинансирования;
	АктуальныеСпособыОтражения 		= ПараметрыРаспределенияПоСтатьям.АктуальныеСпособыОтражения;
	СтатьиФинансированияЗамены 		= ПараметрыРаспределенияПоСтатьям.СтатьиФинансированияЗамены;
	СтатьяИспользуетсяВБазеСреднего = ПараметрыРаспределенияПоСтатьям.СтатьяИспользуетсяВБазеСреднего;
	РазрешенныеКатегорииНачисленийСтатьиФинансирования = ПараметрыРаспределенияПоСтатьям.РазрешенныеКатегорииНачисленийСтатьиФинансирования;
	
	СтатьиРасходовБюджетПоВидамНачислений = ПараметрыРаспределенияБюджет.СтатьиРасходовБюджетПоВидамНачислений;
	СтатьяРасходовОплатаТруда = ПараметрыРаспределенияБюджет.СтатьяРасходовОплатаТруда;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Подразделение КАК ПодразделениеУчетаЗатрат,
	|	НастройкиБухучетаПоУмолчанию.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучетаПоУмолчанию.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучетаПоУмолчанию.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	НастройкиНачислений.ЭтоРасходыФСС КАК ЭтоРасходыФСС,
	|	НастройкиНачислений.КатегорияНачисления КАК КатегорияНачисления,
	|	Начисления.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
	|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаВсехСтрокПоУмолчанию КАК НастройкиБухучетаПоУмолчанию
	|		ПО Начисления.ИдентификаторСтроки = НастройкиБухучетаПоУмолчанию.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО Начисления.Начисление = НастройкиНачислений.Начисление
	|ГДЕ
	|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
	|	И НастройкиНачислений.БухучетПоФактическимНачислениям";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьЕНВД = Запрос.Параметры.ЕстьЕНВД;
	ПериодРегистрации =  Запрос.Параметры.ПериодРегистрации;
	
	НачисленияПоБазе = РезультатЗапроса.Выгрузить();
	ТаблицаБухучет = НоваяТаблицаБухучетНачисленийПромежуточная();
	
	НачПериода = НачалоГода(ПериодРегистрации);
	КонПериода = КонецМесяца(ДобавитьМесяц(ПериодРегистрации, -1));
	ФизическиеЛицаДляОтбора = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияПоБазе, "ФизическоеЛицо", Истина);
	
	Запрос.УстановитьПараметр("ФизическиеЛицаДляОтбора",ФизическиеЛицаДляОтбора);
	Запрос.УстановитьПараметр("НачалоПериодаФактическихНачислений", НачПериода);
	Запрос.УстановитьПараметр("КонецПериодаФактическихНачислений", КонПериода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СУММА(БухучетНачисления.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО БухучетНачисления.НачислениеУдержание = НастройкиНачислений.Начисление
	|			И (НастройкиНачислений.ВходитВБазуФСС)
	|ГДЕ
	|	БухучетНачисления.Период МЕЖДУ &НачалоПериодаФактическихНачислений И &КонецПериодаФактическихНачислений
	|	И БухучетНачисления.Организация = &Организация
	|	И БухучетНачисления.ФизическоеЛицо В(&ФизическиеЛицаДляОтбора)
	|	И БухучетНачисления.Регистратор <> &ИсключаемыйРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачисления.СтатьяФинансирования,
	|	БухучетНачисления.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачисления.ОблагаетсяЕНВД,
	|	БухучетНачисления.ФизическоеЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(БухучетНачисления.Сумма) > 0";
	
	БазаДляРасходовРаботодателя = Запрос.Выполнить().Выгрузить();
	БазаДляРасходовФСС = БазаДляРасходовРаботодателя.Скопировать();
	БазаДляРасходовФСС.Свернуть("ФизическоеЛицо,СтатьяФинансирования,ОблагаетсяЕНВД","Сумма");
	
	БазаДляРасходовРаботодателя.Индексы.Добавить("ФизическоеЛицо");
	БазаДляРасходовФСС.Индексы.Добавить("ФизическоеЛицо");
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для каждого СтрокаНачисления Из НачисленияПоБазе Цикл
		
		Если СтрокаНачисления.ЭтоРасходыФСС Тогда
			БазаРаспределения = БазаДляРасходовФСС;
		Иначе
			БазаРаспределения = БазаДляРасходовРаботодателя;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаНачисления);
		СтрокиОтражения = БазаРаспределения.НайтиСтроки(Отбор);
		Если СтрокиОтражения.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаБухучет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			Если РаботаВБюджетномУчреждении Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиОтражения,"Сумма");
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаНачисления.Сумма, Коэффициенты);
		
		Если Результаты = Неопределено Тогда
			НоваяСтрока = ТаблицаБухучет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			Если РаботаВБюджетномУчреждении Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		Для Каждого СтрокаОтражения Из СтрокиОтражения Цикл
			
			НоваяСтрока = ТаблицаБухучет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			НоваяСтрока.Сумма = Результаты[Индекс];
			Если ЕстьЕНВД Тогда
				НоваяСтрока.ОблагаетсяЕНВД = СтрокаОтражения.ОблагаетсяЕНВД;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОтражения.СтатьяФинансирования) Тогда
				Если СтатьяИспользуетсяВБазеСреднего[СтрокаОтражения.СтатьяФинансирования] Тогда
					НоваяСтрока.СтатьяФинансирования = АктуальныеСтатьиФинансирования[СтрокаОтражения.СтатьяФинансирования];
				Иначе
					РазрешенныеКатегорииНачислений = РазрешенныеКатегорииНачисленийСтатьиФинансирования[СтрокаОтражения.СтатьяФинансирования];
					Если ЗначениеЗаполнено(РазрешенныеКатегорииНачислений)
						И РазрешенныеКатегорииНачислений.Найти(СтрокаНачисления.КатегорияНачисления) <> Неопределено Тогда
						НоваяСтрока.СтатьяФинансирования = АктуальныеСтатьиФинансирования[СтрокаОтражения.СтатьяФинансирования];
					Иначе
						НоваяСтрока.СтатьяФинансирования = СтатьиФинансированияЗамены[СтрокаОтражения.СтатьяФинансирования];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не СтрокаНачисления.ЭтоРасходыФСС Тогда
				Если ЗначениеЗаполнено(СтрокаОтражения.СпособОтраженияЗарплатыВБухучете) Тогда
					НоваяСтрока.СпособОтраженияЗарплатыВБухучете = АктуальныеСпособыОтражения[СтрокаОтражения.СпособОтраженияЗарплатыВБухучете];
				КонецЕсли;
			КонецЕсли;
			
			Если РаботаВБюджетномУчреждении Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучет, "ВТБухучетНачисленийПоФактическимНачислениям");
	
	// Зарегистрируем обработанные идентификаторы строк.
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТБухучетНачисленийПоФактическимНачислениям");
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьВТБухучетНачисленийПоБазеСохраняемогоДС(Запрос, ИмяВТНачисленияИсходная, ПараметрыСохраняемогоДенежногоСодержания, ПараметрыРаспределенияБюджет)
	
	КоэффициентыРаспределенияДенежногоСодержания = ПараметрыСохраняемогоДенежногоСодержания.КоэффициентыРаспределенияДенежногоСодержания;
	СтрокиКоэффициентыСохраняемогоДС = ПараметрыСохраняемогоДенежногоСодержания.СтрокиКоэффициентыСохраняемогоДС;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Подразделение КАК ПодразделениеУчетаЗатрат,
	|	НастройкиБухучетаПоУмолчанию.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучетаПоУмолчанию.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучетаПоУмолчанию.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	НастройкиНачислений.ЭтоРасходыФСС КАК ЭтоРасходыФСС,
	|	НастройкиНачислений.НазначениеРасчетаСохраняемогоДенежногоСодержания КАК НазначениеРасчетаСохраняемогоДенежногоСодержания,
	|	Начисления.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
	|		ПО Начисления.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаВсехСтрокПоУмолчанию КАК НастройкиБухучетаПоУмолчанию
	|		ПО Начисления.ИдентификаторСтроки = НастройкиБухучетаПоУмолчанию.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО Начисления.Начисление = НастройкиНачислений.Начисление
	|ГДЕ
	|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
	|	И НастройкиНачислений.НазначениеРасчетаСохраняемогоДенежногоСодержания <> НЕОПРЕДЕЛЕНО";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьЕНВД = Запрос.Параметры.ЕстьЕНВД;
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	ТаблицаБухучет = НоваяТаблицаБухучетНачисленийПромежуточная();
	
	НачисленияПоБазе = РезультатЗапроса.Выгрузить();
	Отбор = Новый Структура("НазначениеРасчета,Сотрудник");
	
	Для каждого СтрокаНачисления Из НачисленияПоБазе Цикл
		
		Отбор.НазначениеРасчета = СтрокаНачисления.НазначениеРасчетаСохраняемогоДенежногоСодержания;
		Отбор.Сотрудник 		= СтрокаНачисления.Сотрудник;
		
		СтрокиОтражения = СтрокиКоэффициентыСохраняемогоДС[СтрокаНачисления.ИдентификаторСтроки];
		Если СтрокиОтражения = Неопределено Тогда
			// получим коэффициенты для всего документа
			СтрокиОтражения = КоэффициентыРаспределенияДенежногоСодержания;
		КонецЕсли;
		
		Если СтрокиОтражения = Неопределено Тогда
			Результаты = Неопределено;
		Иначе
			
			ИспользуемыеСтрокиОтражения = СтрокиОтражения.Скопировать(Отбор);
			Если ИспользуемыеСтрокиОтражения.Количество() > 0 Тогда
				Коэффициенты = ИспользуемыеСтрокиОтражения.ВыгрузитьКолонку("Коэффициент");
				Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаНачисления.Сумма, Коэффициенты);
			Иначе
				Результаты = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результаты = Неопределено Тогда
			НоваяСтрока = ТаблицаБухучет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			Если РаботаВБюджетномУчреждении Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		Для Каждого СтрокаОтражения Из ИспользуемыеСтрокиОтражения Цикл
			
			НоваяСтрока = ТаблицаБухучет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			НоваяСтрока.Сумма = Результаты[Индекс];
			Если ЕстьЕНВД Тогда
				НоваяСтрока.ОблагаетсяЕНВД = СтрокаОтражения.ОблагаетсяЕНВД;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОтражения.СтатьяФинансирования) Тогда
				НоваяСтрока.СтатьяФинансирования = СтрокаОтражения.СтатьяФинансирования;
			КонецЕсли;
			
			Если Не СтрокаНачисления.ЭтоРасходыФСС Тогда
				Если ЗначениеЗаполнено(СтрокаОтражения.СпособОтраженияЗарплатыВБухучете) Тогда
					НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СтрокаОтражения.СпособОтраженияЗарплатыВБухучете;
				КонецЕсли;
			КонецЕсли;
			
			Если РаботаВБюджетномУчреждении Тогда
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучет, "ВТБухучетНачисленийПоБазеСохраняемогоДС");
	
	// Зарегистрируем обработанные идентификаторы строк.
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТБухучетНачисленийПоБазеСохраняемогоДС");
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьВТНастройкиИзНачисленийДляБухучета(Запрос, ИмяВТНачисленияИсходная)
	
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	УдалитьВТ = Новый Массив;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокНачислений.Начисление КАК Начисление,
	|	СписокНачислений.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	НастройкиНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	НастройкиНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиНачислений.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ПОМЕСТИТЬ ВТНастройкиБухучетаНачислений
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК СписокНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО СписокНачислений.Начисление = НастройкиНачислений.Начисление
	|			И (НастройкиНачислений.БухучетУказанВНачислении)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	Запрос.Выполнить();
	
	Если РаботаВБюджетномУчреждении Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НастройкиБухучета.Начисление КАК Начисление,
		|	НастройкиБухучета.Сумма КАК Сумма,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА НастройкиБухучета.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА СтатьиРасходовПоУмолчанию.СтатьяРасходов
		|		ИНАЧЕ НастройкиБухучета.СтатьяРасходов
		|	КОНЕЦ КАК СтатьяРасходов,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ВЫБОР
		|		КОГДА НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|				ИЛИ &ЕстьЕНВД
		|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаАналитика
		|ПОМЕСТИТЬ ВТНастройкиИзНачисленийДляБухучета
		|ИЗ
		|	ВТНастройкиБухучетаНачислений КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
		|		ПО НастройкиБухучета.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийБюджетПоУмолчанию КАК СтатьиРасходовПоУмолчанию
		|		ПО НастройкиБухучета.Начисление = СтатьиРасходовПоУмолчанию.Начисление
		|ГДЕ
		|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	ВТНастройкиИзНачисленийДляБухучета КАК Таблица";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НастройкиБухучета.Начисление КАК Начисление,
		|	НастройкиБухучета.Сумма КАК Сумма,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСтатьиФинансирования
		|					И НастройкиБухучета.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|				ИЛИ &ЕстьЕНВД
		|					И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
		|				ИЛИ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаАналитика
		|ПОМЕСТИТЬ ВТНастройкиИзНачисленийДляБухучета
		|ИЗ
		|	ВТНастройкиБухучетаНачислений КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
		|		ПО НастройкиБухучета.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
		|ГДЕ
		|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	ВТНастройкиИзНачисленийДляБухучета КАК Таблица";
		
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Добавляем в удаляемые "основную" таблицу.
		УдалитьВТ.Добавить("ВТНастройкиИзНачисленийДляБухучета");
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат Ложь;
	КонецЕсли;
	
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТНастройкиИзНачисленийДляБухучета");
	ДополнитьВТСтрокиБезАналитики(Запрос, "ВТНастройкиИзНачисленийДляБухучета");
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьВТНачисленияПоБазовымРасчетам(Запрос, ИмяВТНачисленияИсходная)
	
	УдалитьВТ = Новый Массив;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокНачислений.Организация КАК Организация,
	|	СписокНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокНачислений.Сотрудник КАК Сотрудник,
	|	СписокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокНачислений.Начисление КАК Начисление,
	|	СписокНачислений.ДатаНачала КАК ДатаНачала,
	|	СписокНачислений.ДатаОкончания КАК ДатаОкончания,
	|	СписокНачислений.Сумма КАК Сумма,
	|	СписокНачислений.Сторно КАК Сторно,
	|	СписокНачислений.ФиксСторно КАК ФиксСторно,
	|	СписокНачислений.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
	|	Начисления.ОчередностьОтраженияВУчете КАК ОчередностьОтраженияВУчете
	|ПОМЕСТИТЬ ВТНачисленияПоБазовымРасчетам
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК СписокНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК Начисления
	|		ПО (Начисления.БухучетПоБазовымРасчетам)
	|			И СписокНачислений.Начисление = Начисления.Начисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
	|		ПО СписокНачислений.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
	|ГДЕ
	|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
	|	И СписокНачислений.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ВТНачисленияПоБазовымРасчетам КАК Таблица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	НетНастройки = Запрос.Выполнить().Пустой();
	Если НетНастройки Тогда
		// Добавляем в удаляемые "основную" таблицу.
		УдалитьВТ.Добавить("ВТНачисленияПоБазовымРасчетам");
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат Ложь;
	КонецЕсли;
	
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТНачисленияПоБазовымРасчетам");
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьВТНачисленияПоНастройкамБухучетаДляБухучета(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияБюджет)
	
	// Обработка всех оставшихся строк.
	
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	
	УдалитьВТ = Новый Массив;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокНачислений.Начисление КАК Начисление,
	|	СписокНачислений.Сумма КАК Сумма,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НастройкиБухучета.ДоляРаспределения КАК ДоляРаспределения,
	|	НастройкиБухучета.СтрокаСРаспределением КАК СтрокаСРаспределением
	|ПОМЕСТИТЬ ВТСтрокиКОбработке
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК СписокНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеСтроки КАК ОбработанныеСтроки
	|		ПО СписокНачислений.ИдентификаторСтроки = ОбработанныеСтроки.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаВсехСтрок КАК НастройкиБухучета
	|		ПО СписокНачислений.ИдентификаторСтроки = НастройкиБухучета.ИдентификаторСтроки
	|ГДЕ
	|	ОбработанныеСтроки.ИдентификаторСтроки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиКОбработке.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СтрокиКОбработке.Начисление КАК Начисление,
	|	СтрокиКОбработке.Сумма КАК Сумма,
	|	СтрокиКОбработке.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтрокиКОбработке.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СтрокиКОбработке.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	СтрокиКОбработке.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	СтрокиКОбработке.ДоляРаспределения КАК ДоляРаспределения,
	|	СтрокиКОбработке.СтрокаСРаспределением КАК СтрокаСРаспределением
	|ИЗ
	|	ВТСтрокиКОбработке КАК СтрокиКОбработке
	|ГДЕ
	|	СтрокиКОбработке.СтрокаСРаспределением
	|	И СтрокиКОбработке.Сумма <> 0";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	ТаблицаСтрокСРаспределением = Запрос.Выполнить().Выгрузить();
	УдалитьВТ.Добавить("ВТСтрокиКОбработке");
	
	Если ТаблицаСтрокСРаспределением.Количество()>0 Тогда
		
		ТаблицаДляБухучета = НоваяТаблицаНастройкиНачисленийДляБухучета();
		
		ИдентификаторыСтрок = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтрокСРаспределением, "ИдентификаторСтроки", Истина);
		ТаблицаСтрокСРаспределением.Индексы.Добавить("ИдентификаторСтроки");
		Отбор = Новый Структура("ИдентификаторСтроки");
		
		Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			
			Отбор.ИдентификаторСтроки = ИдентификаторСтроки;
			НайденныеСтроки = ТаблицаСтрокСРаспределением.НайтиСтроки(Отбор);
			
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "ДоляРаспределения");
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(НайденныеСтроки[0].Сумма, Коэффициенты);
			
			Если Результаты = Неопределено Тогда
				
				НоваяСтрока = ТаблицаДляБухучета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
				Если РаботаВБюджетномУчреждении Тогда
					НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(НайденныеСтроки[0].Начисление, ПараметрыРаспределенияБюджет);
				КонецЕсли;
				
			Иначе
				
				Индекс = 0;
				Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
					
					НоваяСтрока = ТаблицаДляБухучета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.Сумма = Результаты[Индекс];
					
					Если РаботаВБюджетномУчреждении Тогда
						НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаТЗ.Начисление, ПараметрыРаспределенияБюджет);
					КонецЕсли;
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РаботаВБюджетномУчреждении Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтрокиКОбработке.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	СтрокиКОбработке.Начисление КАК Начисление,
			|	СтрокиКОбработке.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	СтрокиКОбработке.СтатьяФинансирования КАК СтатьяФинансирования,
			|	СтрокиКОбработке.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	СтрокиКОбработке.СтатьяРасходов КАК СтатьяРасходов,
			|	СтрокиКОбработке.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	СтрокиКОбработке.Сумма КАК Сумма,
			|	ЛОЖЬ КАК НеЗаполненаАналитика
			|ИЗ
			|	ВТСтрокиКОбработке КАК СтрокиКОбработке
			|ГДЕ
			|	(НЕ СтрокиКОбработке.СтрокаСРаспределением
			|			ИЛИ СтрокиКОбработке.Сумма = 0)";
			Таблица = Запрос.Выполнить().Выгрузить();
			Для каждого СтрокаТЗ Из Таблица Цикл
				СтрокаТЗ.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаТЗ.Начисление, ПараметрыРаспределенияБюджет);
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица,ТаблицаДляБухучета);
			ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаДляБухучета, "ВТНачисленияПоНастройкамБухучетаДляБухучета");
			
		Иначе
			
			ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаДляБухучета, "ВТНачисленияПоНастройкамСРаспределением");
			УдалитьВТ.Добавить("ВТНачисленияПоНастройкамСРаспределением");
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтрокиКОбработке.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	СтрокиКОбработке.Начисление КАК Начисление,
			|	СтрокиКОбработке.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	СтрокиКОбработке.СтатьяФинансирования КАК СтатьяФинансирования,
			|	СтрокиКОбработке.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	СтрокиКОбработке.СтатьяРасходов КАК СтатьяРасходов,
			|	СтрокиКОбработке.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	СтрокиКОбработке.Сумма КАК Сумма,
			|	ЛОЖЬ КАК НеЗаполненаАналитика
			|ПОМЕСТИТЬ ВТНачисленияПоНастройкамБухучетаДляБухучета
			|ИЗ
			|	ВТСтрокиКОбработке КАК СтрокиКОбработке
			|ГДЕ
			|	(НЕ СтрокиКОбработке.СтрокаСРаспределением
			|			ИЛИ СтрокиКОбработке.Сумма = 0)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтрокиКОбработке.ИдентификаторСтроки,
			|	СтрокиКОбработке.Начисление,
			|	СтрокиКОбработке.ПодразделениеУчетаЗатрат,
			|	СтрокиКОбработке.СтатьяФинансирования,
			|	СтрокиКОбработке.СпособОтраженияЗарплатыВБухучете,
			|	СтрокиКОбработке.СтатьяРасходов,
			|	СтрокиКОбработке.ОтношениеКЕНВД,
			|	СтрокиКОбработке.Сумма,
			|	ЛОЖЬ
			|ИЗ
			|	ВТНачисленияПоНастройкамСРаспределением КАК СтрокиКОбработке";
			Запрос.Выполнить();
			
		КонецЕсли;
		
	Иначе
		
		Если РаботаВБюджетномУчреждении Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	НастройкиБухучета.Начисление КАК Начисление,
			|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
			|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	ВЫБОР
			|		КОГДА НастройкиБухучета.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
			|			ТОГДА СтатьиРасходовПоУмолчанию.СтатьяРасходов
			|		ИНАЧЕ НастройкиБухучета.СтатьяРасходов
			|	КОНЕЦ КАК СтатьяРасходов,
			|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	НастройкиБухучета.Сумма КАК Сумма,
			|	ЛОЖЬ КАК НеЗаполненаАналитика
			|ПОМЕСТИТЬ ВТНачисленияПоНастройкамБухучетаДляБухучета
			|ИЗ
			|	ВТСтрокиКОбработке КАК НастройкиБухучета
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийБюджетПоУмолчанию КАК СтатьиРасходовПоУмолчанию
			|		ПО НастройкиБухучета.Начисление = СтатьиРасходовПоУмолчанию.Начисление";
			Запрос.Выполнить();
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	НастройкиБухучета.Начисление КАК Начисление,
			|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
			|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	НастройкиБухучета.СтатьяРасходов КАК СтатьяРасходов,
			|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
			|	НастройкиБухучета.Сумма КАК Сумма,
			|	ЛОЖЬ КАК НеЗаполненаАналитика
			|ПОМЕСТИТЬ ВТНачисленияПоНастройкамБухучетаДляБухучета
			|ИЗ
			|	ВТСтрокиКОбработке КАК НастройкиБухучета";
			Запрос.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	ВТНачисленияПоНастройкамБухучетаДляБухучета КАК Таблица";
	НетНастройки = Запрос.Выполнить().Пустой();
	Если НетНастройки Тогда
		// Добавляем в удаляемые "основную" таблицу.
		УдалитьВТ.Добавить("ВТНачисленияПоНастройкамБухучетаДляБухучета");
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат Ложь;
	КонецЕсли;
	
	ДополнитьВТОбработанныеСтроки(Запрос, "ВТНачисленияПоНастройкамБухучетаДляБухучета");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат Истина;

КонецФункции

Процедура СоздатьВТБухучетНачисленийПоТаблицамДляБухучета(Запрос, ИмяВТНачисленияИсходная, ИменаТаблиц)

	УдалитьВТ = Новый Массив;
	
	ПрименяетсяЕНВД = Запрос.Параметры.ЕстьЕНВД;
	ТребуетсяДополнитьАналитику = ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСтрокиБезАналитики");
	
	// Объединение в одну таблицу данных из таблиц с постфиксом "ДляБухучета".
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.Начисление КАК Начисление,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Таблица.СтатьяРасходов КАК СтатьяРасходов,
	|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Таблица.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ИЗ
	|	#ИмяТаблицы КАК Таблица";
	
	ТекстВложенногоЗапроса = "";
	Для Индекс = 0 По ИменаТаблиц.ВГраница() Цикл
		ИмяТаблицы = ИменаТаблиц[Индекс];
		Если Индекс > 0 Тогда
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + " 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		ФрагментТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ИмяТаблицы", ИмяТаблицы);
		ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + ФрагментТекстаЗапроса;
	КонецЦикла;
	ТекстВложенногоЗапроса = "("+ТекстВложенногоЗапроса+")";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокНачислений.Сотрудник КАК Сотрудник,
	|	СписокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокНачислений.Начисление КАК Начисление,
	|	СписокНачислений.ДатаНачала КАК ДатаНачала,
	|	СписокНачислений.ДатаОкончания КАК ДатаОкончания,
	|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СтатьяРасходов КАК СтатьяРасходов,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	НастройкиБухучета.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТСтрокиКОбработке
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК СписокНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНастройкиДляБухучета КАК НастройкиБухучета
	|		ПО СписокНачислений.ИдентификаторСтроки = НастройкиБухучета.ИдентификаторСтроки";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНастройкиДляБухучета", ТекстВложенногоЗапроса);
	Если Не ПрименяетсяЕНВД И Не ТребуетсяДополнитьАналитику Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтрокиКОбработке", "ВТБухучетНачисленийПоТаблицамДляБухучета");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД", "ЛОЖЬ КАК ОблагаетсяЕНВД");
		Запрос.Выполнить();
		УдалитьВТ.Добавить("ВТСтрокиКОбработке");
		Возврат;
	Иначе
		Запрос.Выполнить();
		УдалитьВТ.Добавить("ВТСтрокиКОбработке");
	КонецЕсли;
	
	Если ТребуетсяДополнитьАналитику Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Таблица.Сотрудник КАК Сотрудник,
		|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Таблица.Начисление КАК Начисление,
		|	Таблица.ДатаНачала КАК ДатаНачала,
		|	Таблица.ДатаОкончания КАК ДатаОкончания,
		|	Таблица.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	Таблица.Сумма КАК Сумма,
		|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Таблица.СтатьяРасходов КАК СтатьяРасходов,
		|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Таблица.ОтношениеКЕНВД КАК ОтношениеКЕНВД
		|ИЗ
		|	ВТСтрокиКОбработке КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиБезАналитики КАК СтрокиБезАналитики
		|		ПО Таблица.ИдентификаторСтроки = СтрокиБезАналитики.ИдентификаторСтроки";
		ТаблицаНеЗаполненаАналитика = Запрос.Выполнить().Выгрузить();
		
		ДополнитьАналитику(Запрос, ТаблицаНеЗаполненаАналитика);
		
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаНеЗаполненаАналитика, "ВТТаблицаДополненнаяАналитикой");
		УдалитьВТ.Добавить("ВТТаблицаДополненнаяАналитикой");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НастройкиБухучета.Сотрудник КАК Сотрудник,
		|	НастройкиБухучета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НастройкиБухучета.Начисление КАК Начисление,
		|	НастройкиБухучета.ДатаНачала КАК ДатаНачала,
		|	НастройкиБухучета.ДатаОкончания КАК ДатаОкончания,
		|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НастройкиБухучета.СтатьяРасходов КАК СтатьяРасходов,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ЛОЖЬ КАК ОблагаетсяЕНВД,
		|	НастройкиБухучета.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТСтрокиКОбработкеЕНВД
		|ИЗ
		|	ВТСтрокиКОбработке КАК НастройкиБухучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиБезАналитики КАК СтрокиБезАналитики
		|		ПО НастройкиБухучета.ИдентификаторСтроки = СтрокиБезАналитики.ИдентификаторСтроки
		|ГДЕ
		|	СтрокиБезАналитики.ИдентификаторСтроки ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиДляБухучета.ИдентификаторСтроки,
		|	НастройкиДляБухучета.Сотрудник,
		|	НастройкиДляБухучета.ФизическоеЛицо,
		|	НастройкиДляБухучета.Начисление,
		|	НастройкиДляБухучета.ДатаНачала,
		|	НастройкиДляБухучета.ДатаОкончания,
		|	НастройкиДляБухучета.ПодразделениеУчетаЗатрат,
		|	НастройкиДляБухучета.СтатьяФинансирования,
		|	НастройкиДляБухучета.СтатьяРасходов,
		|	НастройкиДляБухучета.СпособОтраженияЗарплатыВБухучете,
		|	НастройкиДляБухучета.ОтношениеКЕНВД,
		|	ЛОЖЬ,
		|	НастройкиДляБухучета.Сумма
		|ИЗ
		|	ВТТаблицаДополненнаяАналитикой КАК НастройкиДляБухучета";
		
		Если Не ПрименяетсяЕНВД Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтрокиКОбработкеЕНВД", "ВТБухучетНачисленийПоТаблицамДляБухучета");
			Запрос.Выполнить();
			ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
			Возврат;
		Иначе
			Запрос.Выполнить();
			УдалитьВТ.Добавить("ВТСтрокиКОбработкеЕНВД");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрименяетсяЕНВД Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиКОбработке.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СтрокиКОбработке.Сотрудник КАК Сотрудник,
		|	СтрокиКОбработке.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтрокиКОбработке.Начисление КАК Начисление,
		|	СтрокиКОбработке.ДатаНачала КАК ДатаНачала,
		|	СтрокиКОбработке.ДатаОкончания КАК ДатаОкончания,
		|	СтрокиКОбработке.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	СтрокиКОбработке.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СтрокиКОбработке.СтатьяРасходов КАК СтатьяРасходов,
		|	СтрокиКОбработке.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ВЫБОР
		|		КОГДА СтрокиКОбработке.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
		|				И &РассчитыватьДолюЕНВД
		|			ТОГДА ВЫБОР
		|					КОГДА ОтношениеКЕНВДЗатратНаЗарплату.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
		|						ТОГДА ВЫРАЗИТЬ(СтрокиКОбработке.Сумма * &ПроцентЕНВД / 100 КАК ЧИСЛО(15, 2))
		|					ИНАЧЕ СтрокиКОбработке.Сумма - (ВЫРАЗИТЬ(СтрокиКОбработке.Сумма * &ПроцентЕНВД / 100 КАК ЧИСЛО(15, 2)))
		|				КОНЕЦ
		|		ИНАЧЕ СтрокиКОбработке.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА СтрокиКОбработке.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
		|					ТОГДА ВЫБОР
		|							КОГДА &РассчитыватьДолюЕНВД
		|								ТОГДА ОтношениеКЕНВДЗатратНаЗарплату.Ссылка
		|							КОГДА &ПроцентЕНВД = 0
		|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
		|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
		|						КОНЕЦ
		|				ИНАЧЕ СтрокиКОбработке.ОтношениеКЕНВД
		|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОблагаетсяЕНВД
		|ПОМЕСТИТЬ ВТБухучетНачисленийПоТаблицамДляБухучета
		|ИЗ
		|	ВТСтрокиКОбработке КАК СтрокиКОбработке
		|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ОтношениеКЕНВДЗатратНаЗарплату КАК ОтношениеКЕНВДЗатратНаЗарплату
		|		ПО (ОтношениеКЕНВДЗатратНаЗарплату.Ссылка В (ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД), ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)))
		|			И (СтрокиКОбработке.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом))
		|			И (&РассчитыватьДолюЕНВД)";
		
		Если ТребуетсяДополнитьАналитику Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтрокиКОбработке", "ВТСтрокиКОбработкеЕНВД");
			УдалитьВТ.Добавить("ВТСтрокиКОбработкеЕНВД");
		Иначе
			УдалитьВТ.Добавить("ВТСтрокиКОбработке");
		КонецЕсли;
		Запрос.Выполнить();
		
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТБухучетНачисленийПоБазовымРасчетам(Запрос, ИмяВТНачисленияИсходная, МенеджерКадровогоУчета, МенеджерДанныхУчетаВремени, ПараметрыРаспределенияБюджет)
	
	УдалитьВТ = Новый Массив;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ОчередностьОтраженияВУчете КАК ОчередностьОтраженияВУчете
	|ИЗ
	|	ВТНачисленияПоБазовымРасчетам КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередностьОтраженияВУчете";
	РезультатОчередностьРаспределенияПоБазе = Запрос.Выполнить();
	
	РаботаВБюджетномУчреждении = Запрос.Параметры.РаботаВБюджетномУчреждении;
	ИспользоватьСтатьиФинансирования = Запрос.Параметры.ИспользоватьСтатьиФинансирования;
	ПрименяетсяЕНВД = Запрос.Параметры.ЕстьЕНВД;
	
	ЗарплатаКадры.СоздатьПустуюВТ(Запрос.МенеджерВременныхТаблиц, "РегистрРасчета.Начисления");
	
	// ВТНачисленияПоБазеИзРегистраРасчета
	Если Не ИспользоватьСтатьиФинансирования Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	ЛОЖЬ КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	НачисленияПоБазе.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияПоБазе.Сотрудник КАК Сотрудник,
		|	НачисленияПоБазе.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПоБазе.Начисление КАК ВидРасчета,
		|	НачисленияПоБазе.ДатаНачала КАК ДатаНачала,
		|	НачисленияПоБазе.ДатаОкончания КАК ДатаОкончания,
		|	НачисленияПоБазе.ОчередностьОтраженияВУчете КАК ОчередностьОтраженияВУчете
		|ПОМЕСТИТЬ ВТНачисленияПоБазеИзРегистраРасчета
		|ИЗ
		|	ВТНачисленияПоБазовымРасчетам КАК НачисленияПоБазе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО НачисленияПоБазе.ПериодРегистрации = Начисления.ПериодРегистрации
		|			И НачисленияПоБазе.Организация = Начисления.Организация
		|			И НачисленияПоБазе.Сотрудник = Начисления.Сотрудник
		|			И НачисленияПоБазе.Начисление = Начисления.ВидРасчета
		|			И НачисленияПоБазе.ДатаНачала = Начисления.ПериодДействияНачало
		|			И (НачисленияПоБазе.ДатаОкончания = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ))";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	НачисленияПоБазе.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияПоБазе.Сотрудник КАК Сотрудник,
		|	НачисленияПоБазе.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПоБазе.Начисление КАК ВидРасчета,
		|	НачисленияПоБазе.ДатаНачала КАК ДатаНачала,
		|	НачисленияПоБазе.ДатаОкончания КАК ДатаОкончания,
		|	НачисленияПоБазе.ОчередностьОтраженияВУчете КАК ОчередностьОтраженияВУчете
		|ПОМЕСТИТЬ ВТНачисленияПоБазеИзРегистраРасчета
		|ИЗ
		|	ВТНачисленияПоБазовымРасчетам КАК НачисленияПоБазе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления КАК Начисления
		|		ПО НачисленияПоБазе.Сотрудник = Начисления.Сотрудник
		|			И НачисленияПоБазе.Начисление = Начисления.ВидРасчета
		|			И НачисленияПоБазе.РассчитыватьПоРазовымНачислениямДокумента = Начисления.РассчитыватьПоРазовымНачислениямДокумента
		|			И НачисленияПоБазе.Сторно = Начисления.Сторно
		|			И НачисленияПоБазе.ФиксСторно = Начисления.ФиксСторно
		|			И НачисленияПоБазе.ДатаНачала = Начисления.ПериодДействияНачало
		|			И (НачисленияПоБазе.ДатаОкончания = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ))";
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияПоБазеИзРегистраРасчета");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтборНачислений.Регистратор,
	|	ОтборНачислений.НомерСтроки
	|ПОМЕСТИТЬ ВТОтборНачислений
	|ИЗ
	|	ВТНачисленияПоБазеИзРегистраРасчета КАК ОтборНачислений";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТОтборНачислений");
	
	РасчетЗарплатыРасширенный.СоздатьВТРасчетнаяБазаНачисленийПоВременнойТаблицеКаскадно(Запрос.МенеджерВременныхТаблиц, Запрос.Параметры.ИсключаемыйРегистратор, МенеджерКадровогоУчета, МенеджерДанныхУчетаВремени);
	УдалитьВТ.Добавить("ВТРасчетнаяБаза");
	
	// ВТБазовыеНачисления
	// ИдентификаторСтроки - строка таблицы, которая распределяется по базе,
	// ОчередностьОтраженияВУчете - очередность строки, распределяемой по базе,
	// РегистраторБаза и НомерСтрокиБаза - ключ, определяющий базовую строку,
	// остальные поля - свойства базового начисления из регистра расчетов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетнаяБаза.Регистратор КАК Регистратор,
	|	РасчетнаяБаза.НомерСтроки КАК НомерСтроки,
	|	РасчетнаяБаза.РезультатБаза КАК РезультатБаза,
	|	РасчетнаяБаза.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
	|	РасчетнаяБаза.ПериодДействияНачалоРазрез КАК ПериодДействияНачалоРазрез,
	|	РасчетнаяБаза.ПериодДействияКонецРазрез КАК ПериодДействияКонецРазрез,
	|	РасчетнаяБаза.РегистраторРазрез КАК РегистраторРазрез,
	|	РасчетнаяБаза.ИдентификаторСтрокиРазрез КАК ИдентификаторСтрокиРазрез,
	|	РасчетнаяБаза.НомерСтрокиРазрез КАК НомерСтрокиРазрез,
	|	Начисления.Сторно КАК Сторно
	|ПОМЕСТИТЬ ВТРасчетнаяБазаСПериодом
	|ИЗ
	|	ВТРасчетнаяБаза КАК РасчетнаяБаза
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО РасчетнаяБаза.РегистраторРазрез = Начисления.Регистратор
	|			И РасчетнаяБаза.НомерСтрокиРазрез = Начисления.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетнаяБаза.Регистратор,
	|	РасчетнаяБаза.НомерСтроки,
	|	РасчетнаяБаза.РезультатБаза,
	|	РасчетнаяБаза.ВидРасчетаРазрез,
	|	РасчетнаяБаза.ПериодДействияНачалоРазрез,
	|	РасчетнаяБаза.ПериодДействияКонецРазрез,
	|	РасчетнаяБаза.РегистраторРазрез,
	|	РасчетнаяБаза.ИдентификаторСтрокиРазрез,
	|	РасчетнаяБаза.НомерСтрокиРазрез,
	|	Начисления.Сторно
	|ИЗ
	|	ВТРасчетнаяБаза КАК РасчетнаяБаза
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления КАК Начисления
	|		ПО РасчетнаяБаза.РегистраторРазрез = Начисления.Регистратор
	|			И РасчетнаяБаза.НомерСтрокиРазрез = Начисления.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоБазе.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияПоБазе.ОчередностьОтраженияВУчете КАК ОчередностьОтраженияВУчете,
	|	НачисленияПоБазе.Сотрудник КАК СотрудникБаза,
	|	НачисленияПоБазе.ФизическоеЛицо КАК ФизическоеЛицоБаза,
	|	НачисленияПоБазе.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
	|	СУММА(База.РезультатБаза) КАК РезультатБаза,
	|	База.ВидРасчетаРазрез КАК НачислениеБаза,
	|	НАЧАЛОПЕРИОДА(База.ПериодДействияНачалоРазрез, ДЕНЬ) КАК ДатаНачалаБаза,
	|	НАЧАЛОПЕРИОДА(База.ПериодДействияКонецРазрез, ДЕНЬ) КАК ДатаОкончанияБаза,
	|	База.РегистраторРазрез КАК РегистраторБаза,
	|	База.ИдентификаторСтрокиРазрез КАК ИдентификаторСтрокиРазрез,
	|	База.НомерСтрокиРазрез КАК НомерСтрокиБаза,
	|	База.Сторно КАК Сторно,
	|	ВЫБОР
	|		КОГДА База.РегистраторРазрез = База.Регистратор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БазоваяЗаписьТекущегоРегистратора
	|ПОМЕСТИТЬ ВТБазовыеНачисления
	|ИЗ
	|	ВТНачисленияПоБазеИзРегистраРасчета КАК НачисленияПоБазе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаСПериодом КАК База
	|		ПО НачисленияПоБазе.Регистратор = База.Регистратор
	|			И НачисленияПоБазе.НомерСтроки = База.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоБазе.ИдентификаторСтроки,
	|	НачисленияПоБазе.Сотрудник,
	|	НачисленияПоБазе.ФизическоеЛицо,
	|	НачисленияПоБазе.РассчитыватьПоРазовымНачислениямДокумента,
	|	База.ВидРасчетаРазрез,
	|	НАЧАЛОПЕРИОДА(База.ПериодДействияНачалоРазрез, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(База.ПериодДействияКонецРазрез, ДЕНЬ),
	|	База.РегистраторРазрез,
	|	База.ИдентификаторСтрокиРазрез,
	|	База.НомерСтрокиРазрез,
	|	НачисленияПоБазе.ОчередностьОтраженияВУчете,
	|	База.Сторно,
	|	ВЫБОР
	|		КОГДА База.РегистраторРазрез = База.Регистратор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(База.РезультатБаза) <> 0";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТРасчетнаяБазаСПериодом");
	УдалитьВТ.Добавить("ВТБазовыеНачисления");
	
	// ВТБухучетНачисленийВременная
	Если НЕ ИспользоватьСтатьиФинансирования Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БухучетНачисления.Сотрудник КАК Сотрудник,
		|	БухучетНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА БухучетНачисления.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА НачисленияДляРаспределения.Подразделение
		|		ИНАЧЕ БухучетНачисления.ПодразделениеУчетаЗатрат
		|	КОНЕЦ КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачисления.Начисление КАК Начисление,
		|	БухучетНачисления.ДатаНачала КАК ДатаНачала,
		|	БухучетНачисления.ДатаОкончания КАК ДатаОкончания,
		|	БухучетНачисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачисления.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ЛОЖЬ КАК Сторно,
		|	СУММА(БухучетНачисления.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТБухучетНачисленийВременная
		|ИЗ
		|	ВТБухучетНачисленийБезРаспределяемыхПоБазе КАК БухучетНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДляРаспределения КАК НачисленияДляРаспределения
		|		ПО БухучетНачисления.ИдентификаторСтроки = НачисленияДляРаспределения.ИдентификаторСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетНачисления.СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачисления.ОблагаетсяЕНВД,
		|	БухучетНачисления.СтатьяРасходов,
		|	БухучетНачисления.СтатьяФинансирования,
		|	БухучетНачисления.Сотрудник,
		|	БухучетНачисления.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА БухучетНачисления.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА НачисленияДляРаспределения.Подразделение
		|		ИНАЧЕ БухучетНачисления.ПодразделениеУчетаЗатрат
		|	КОНЕЦ,
		|	БухучетНачисления.Начисление,
		|	БухучетНачисления.ДатаНачала,
		|	БухучетНачисления.ДатаОкончания
		|
		|ИМЕЮЩИЕ
		|	СУММА(БухучетНачисления.Сумма) <> 0";
		
	Иначе
		
		ИменаТаблиц = Новый Массив;
		ИменаТаблиц.Добавить("ВТБухучетНачисленийБезРаспределяемыхПоБазе");
		Если ЗарплатаКадры.ВТСуществует(Запрос.МенеджерВременныхТаблиц, "ВТБухучетНачисленийИзФормы") Тогда
			ИменаТаблиц.Добавить("ВТБухучетНачисленийИзФормы");
		КонецЕсли;
		Если ЗарплатаКадры.ВТСуществует(Запрос.МенеджерВременныхТаблиц, "ВТБухучетНачисленийСторно") Тогда
			ИменаТаблиц.Добавить("ВТБухучетНачисленийСторно");
		КонецЕсли;
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	БухучетНачисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БухучетНачисления.Сотрудник КАК Сотрудник,
		|	БухучетНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БухучетНачисления.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачисления.Начисление КАК Начисление,
		|	БухучетНачисления.ДатаНачала КАК ДатаНачала,
		|	БухучетНачисления.ДатаОкончания КАК ДатаОкончания,
		|	БухучетНачисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачисления.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачисления.Сумма КАК Сумма,
		|	БухучетНачисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ЛОЖЬ КАК Сторно
		|ИЗ
		|	#ИмяТаблицы КАК БухучетНачисления";
		
		ТекстВложенногоЗапроса = "";
		Для Индекс = 0 По ИменаТаблиц.ВГраница() Цикл
			ИмяТаблицы = ИменаТаблиц[Индекс];
			Если Индекс > 0 Тогда
				ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + " 
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			КонецЕсли;
			ФрагментТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ИмяТаблицы", ИмяТаблицы);
			Если ИмяТаблицы = "ВТБухучетНачисленийСторно" Тогда
				ФрагментТекстаЗапроса = СтрЗаменить(ФрагментТекстаЗапроса, "ЛОЖЬ КАК Сторно", "ИСТИНА КАК Сторно");
			КонецЕсли;
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + ФрагментТекстаЗапроса;
		КонецЦикла;
		ТекстВложенногоЗапроса = "("+ТекстВложенногоЗапроса+")";
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БухучетНачисления.Сотрудник КАК Сотрудник,
		|	БухучетНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА БухучетНачисления.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА НачисленияДляРаспределения.Подразделение
		|		ИНАЧЕ БухучетНачисления.ПодразделениеУчетаЗатрат
		|	КОНЕЦ КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачисления.Начисление КАК Начисление,
		|	БухучетНачисления.ДатаНачала КАК ДатаНачала,
		|	БухучетНачисления.ДатаОкончания КАК ДатаОкончания,
		|	БухучетНачисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачисления.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БухучетНачисления.Сторно КАК Сторно,
		|	СУММА(БухучетНачисления.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТБухучетНачисленийВременная
		|ИЗ
		|	ТаблицаБухучетНачисленийВременная КАК БухучетНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДляРаспределения КАК НачисленияДляРаспределения
		|		ПО БухучетНачисления.ИдентификаторСтроки = НачисленияДляРаспределения.ИдентификаторСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетНачисления.СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачисления.ОблагаетсяЕНВД,
		|	БухучетНачисления.Сторно,
		|	БухучетНачисления.СтатьяРасходов,
		|	БухучетНачисления.СтатьяФинансирования,
		|	БухучетНачисления.Сотрудник,
		|	БухучетНачисления.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА БухучетНачисления.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА НачисленияДляРаспределения.Подразделение
		|		ИНАЧЕ БухучетНачисления.ПодразделениеУчетаЗатрат
		|	КОНЕЦ,
		|	БухучетНачисления.Начисление,
		|	БухучетНачисления.ДатаНачала,
		|	БухучетНачисления.ДатаОкончания
		|
		|ИМЕЮЩИЕ
		|	СУММА(БухучетНачисления.Сумма) <> 0";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаБухучетНачисленийВременная", ТекстВложенногоЗапроса);
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТБухучетНачисленийВременная");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетНачисленийВременная.Сотрудник КАК Сотрудник,
	|	БухучетНачисленийВременная.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачисленийВременная.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачисленийВременная.Начисление КАК Начисление,
	|	БухучетНачисленийВременная.ДатаНачала КАК ДатаНачала,
	|	БухучетНачисленийВременная.ДатаОкончания КАК ДатаОкончания,
	|	БухучетНачисленийВременная.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачисленийВременная.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачисленийВременная.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачисленийВременная.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачисленийВременная.Сумма КАК Сумма,
	|	БухучетНачисленийВременная.Сторно КАК Сторно
	|ИЗ
	|	ВТБухучетНачисленийВременная КАК БухучетНачисленийВременная";
	БухучетНачисленийВременная = Запрос.Выполнить().Выгрузить();
	
	ТаблицаБухучет 				= НоваяТаблицаБухучетНачисленийПромежуточная();
	ТаблицаБухучетОчередности 	= НоваяТаблицаБухучетНачисленийПромежуточная();
	
	Выборка = РезультатОчередностьРаспределенияПоБазе.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТаблицаБухучетОчередности.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаБухучетОчередности, БухучетНачисленийВременная);
			ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТБухучетНачисленийВременная");
			ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, БухучетНачисленийВременная, "ВТБухучетНачисленийВременная");
			ТаблицаБухучетОчередности.Очистить();
		КонецЕсли;
		
		ТаблицаБухучетНетБазы 		= НоваяТаблицаБухучетНачисленийПромежуточная();
		ТаблицаБухучетНетБазы.Колонки.Добавить("ОтношениеКЕНВД", Новый ОписаниеТипов("ПеречислениеСсылка.ОтношениеКЕНВДЗатратНаЗарплату"));
		
		УдалитьВТОперативно = Новый Массив;
		
		ОчередностьОтраженияВУчете = Выборка.ОчередностьОтраженияВУчете;
		Запрос.УстановитьПараметр("ОчередностьОтраженияВУчете", ОчередностьОтраженияВУчете);
		
		// ВТБазовыеНачисленияБУ.
		Если НЕ ИспользоватьСтатьиФинансирования Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	БазаНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	БазаНачислений.НачислениеБаза КАК НачислениеБаза,
			|	БазаНачислений.РезультатБаза КАК РезультатБаза,
			|	БазаНачислений.РегистраторБаза КАК РегистраторБаза,
			|	БазаНачислений.НомерСтрокиБаза КАК НомерСтрокиБаза,
			|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
			|	БухучетНачислений.ДатаОкончания КАК ДатаОкончания,
			|	СУММА(БухучетНачислений.Сумма) КАК СуммаБУ,
			|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
			|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
			|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
			|ПОМЕСТИТЬ ВТБазовыеНачисленияБУ
			|ИЗ
			|	ВТБазовыеНачисления КАК БазаНачислений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетНачисленийВременная КАК БухучетНачислений
			|		ПО БазаНачислений.СотрудникБаза = БухучетНачислений.Сотрудник
			|			И (БазаНачислений.ОчередностьОтраженияВУчете = &ОчередностьОтраженияВУчете)
			|			И БазаНачислений.НачислениеБаза = БухучетНачислений.Начисление
			|			И БазаНачислений.ДатаНачалаБаза = БухучетНачислений.ДатаНачала
			|			И БазаНачислений.ДатаОкончанияБаза = БухучетНачислений.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	БазаНачислений.ИдентификаторСтроки,
			|	БазаНачислений.НачислениеБаза,
			|	БазаНачислений.РезультатБаза,
			|	БазаНачислений.РегистраторБаза,
			|	БухучетНачислений.ДатаОкончания,
			|	БухучетНачислений.ПодразделениеУчетаЗатрат,
			|	БазаНачислений.НомерСтрокиБаза,
			|	БухучетНачислений.ДатаНачала,
			|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
			|	БухучетНачислений.СтатьяФинансирования,
			|	БухучетНачислений.СтатьяРасходов,
			|	БухучетНачислений.ОблагаетсяЕНВД";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	БазовыеНачисленияБУ.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	БазовыеНачисленияБУ.НачислениеБаза КАК НачислениеБаза,
			|	СУММА(БазовыеНачисленияБУ.РезультатБаза) КАК РезультатБаза,
			|	БазовыеНачисленияБУ.РегистраторБаза КАК РегистраторБаза,
			|	БазовыеНачисленияБУ.НомерСтрокиБаза КАК НомерСтрокиБаза,
			|	БазовыеНачисленияБУ.ДатаНачала КАК ДатаНачала,
			|	БазовыеНачисленияБУ.ДатаОкончания КАК ДатаОкончания,
			|	СУММА(БазовыеНачисленияБУ.СуммаБУ) КАК СуммаБУ,
			|	БазовыеНачисленияБУ.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	БазовыеНачисленияБУ.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	БазовыеНачисленияБУ.СтатьяФинансирования КАК СтатьяФинансирования,
			|	БазовыеНачисленияБУ.СтатьяРасходов КАК СтатьяРасходов,
			|	БазовыеНачисленияБУ.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
			|ПОМЕСТИТЬ ВТБазовыеНачисленияБУ
			|ИЗ
			|	(ВЫБРАТЬ
			|		БазаНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|		БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|		БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
			|		БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
			|		БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|		БазаНачислений.НачислениеБаза КАК НачислениеБаза,
			|		БазаНачислений.РезультатБаза КАК РезультатБаза,
			|		БухучетНачислений.ДатаНачала КАК ДатаНачала,
			|		БухучетНачислений.ДатаОкончания КАК ДатаОкончания,
			|		ВЫРАЗИТЬ(БухучетНачислений.Сумма КАК ЧИСЛО(13, 2)) КАК СуммаБУ,
			|		БазаНачислений.РегистраторБаза КАК РегистраторБаза,
			|		БазаНачислений.НомерСтрокиБаза КАК НомерСтрокиБаза
			|	ИЗ
			|		ВТБазовыеНачисления КАК БазаНачислений
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетНачисленийВременная КАК БухучетНачислений
			|			ПО БазаНачислений.СотрудникБаза = БухучетНачислений.Сотрудник
			|				И (БазаНачислений.БазоваяЗаписьТекущегоРегистратора)
			|				И (БазаНачислений.ОчередностьОтраженияВУчете = &ОчередностьОтраженияВУчете)
			|				И БазаНачислений.НачислениеБаза = БухучетНачислений.Начисление
			|				И БазаНачислений.ДатаНачалаБаза = БухучетНачислений.ДатаНачала
			|				И БазаНачислений.ДатаОкончанияБаза = БухучетНачислений.ДатаОкончания
			|				И БазаНачислений.Сторно = БухучетНачислений.Сторно
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаНачислений.ИдентификаторСтроки,
			|		ВЫБОР
			|			КОГДА БухучетНачислений.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|				ТОГДА БухучетНачислений.Подразделение
			|			ИНАЧЕ БухучетНачислений.ПодразделениеУчетаЗатрат
			|		КОНЕЦ,
			|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
			|		БухучетНачислений.СтатьяФинансирования,
			|		БухучетНачислений.СтатьяРасходов,
			|		БухучетНачислений.ОблагаетсяЕНВД,
			|		БазаНачислений.НачислениеБаза,
			|		БазаНачислений.РезультатБаза,
			|		БухучетНачислений.ДатаНачала,
			|		БухучетНачислений.ДатаОкончания,
			|		ВЫРАЗИТЬ(БухучетНачислений.Сумма КАК ЧИСЛО(13, 2)),
			|		БазаНачислений.РегистраторБаза,
			|		БазаНачислений.НомерСтрокиБаза
			|	ИЗ
			|		ВТБазовыеНачисления КАК БазаНачислений
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачислений
			|			ПО БазаНачислений.СотрудникБаза = БухучетНачислений.Сотрудник
			|				И (НЕ БазаНачислений.БазоваяЗаписьТекущегоРегистратора)
			|				И (БазаНачислений.ОчередностьОтраженияВУчете = &ОчередностьОтраженияВУчете)
			|				И БазаНачислений.РегистраторБаза = БухучетНачислений.Регистратор
			|				И БазаНачислений.НачислениеБаза = БухучетНачислений.НачислениеУдержание
			|				И БазаНачислений.ИдентификаторСтрокиРазрез = БухучетНачислений.ИдентификаторСтроки) КАК БазовыеНачисленияБУ
			|
			|СГРУППИРОВАТЬ ПО
			|	БазовыеНачисленияБУ.ИдентификаторСтроки,
			|	БазовыеНачисленияБУ.СпособОтраженияЗарплатыВБухучете,
			|	БазовыеНачисленияБУ.СтатьяФинансирования,
			|	БазовыеНачисленияБУ.СтатьяРасходов,
			|	БазовыеНачисленияБУ.ОблагаетсяЕНВД,
			|	БазовыеНачисленияБУ.НачислениеБаза,
			|	БазовыеНачисленияБУ.ДатаНачала,
			|	БазовыеНачисленияБУ.ДатаОкончания,
			|	БазовыеНачисленияБУ.ПодразделениеУчетаЗатрат,
			|	БазовыеНачисленияБУ.РегистраторБаза,
			|	БазовыеНачисленияБУ.НомерСтрокиБаза";
			
		КонецЕсли;
		Запрос.Выполнить();
		УдалитьВТОперативно.Добавить("ВТБазовыеНачисленияБУ");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БазовыеНачисленияБУ.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БазовыеНачисленияБУ.РегистраторБаза КАК РегистраторБаза,
		|	БазовыеНачисленияБУ.НомерСтрокиБаза КАК НомерСтрокиБаза,
		|	СУММА(БазовыеНачисленияБУ.СуммаБУ) КАК СуммаБУ
		|ПОМЕСТИТЬ ВТБазовыеНачисленияБУСвод
		|ИЗ
		|	ВТБазовыеНачисленияБУ КАК БазовыеНачисленияБУ
		|
		|СГРУППИРОВАТЬ ПО
		|	БазовыеНачисленияБУ.ИдентификаторСтроки,
		|	БазовыеНачисленияБУ.РегистраторБаза,
		|	БазовыеНачисленияБУ.НомерСтрокиБаза
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеНачисленияБУ.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БазовыеНачисленияБУ.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	БазовыеНачисленияБУ.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БазовыеНачисленияБУ.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БазовыеНачисленияБУ.СтатьяРасходов КАК СтатьяРасходов,
		|	БазовыеНачисленияБУ.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА ВТБазовыеНачисленияБУСвод.СуммаБУ = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫРАЗИТЬ(БазовыеНачисленияБУ.РезультатБаза * БазовыеНачисленияБУ.СуммаБУ / ВТБазовыеНачисленияБУСвод.СуммаБУ КАК ЧИСЛО(25, 10))
		|		КОНЕЦ) КАК Сумма
		|ПОМЕСТИТЬ ВТБазовыеНачисленияБУКоэффициенты
		|ИЗ
		|	ВТБазовыеНачисленияБУ КАК БазовыеНачисленияБУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеНачисленияБУСвод КАК ВТБазовыеНачисленияБУСвод
		|		ПО БазовыеНачисленияБУ.ИдентификаторСтроки = ВТБазовыеНачисленияБУСвод.ИдентификаторСтроки
		|			И БазовыеНачисленияБУ.РегистраторБаза = ВТБазовыеНачисленияБУСвод.РегистраторБаза
		|			И БазовыеНачисленияБУ.НомерСтрокиБаза = ВТБазовыеНачисленияБУСвод.НомерСтрокиБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	БазовыеНачисленияБУ.ИдентификаторСтроки,
		|	БазовыеНачисленияБУ.СпособОтраженияЗарплатыВБухучете,
		|	БазовыеНачисленияБУ.СтатьяФинансирования,
		|	БазовыеНачисленияБУ.СтатьяРасходов,
		|	БазовыеНачисленияБУ.ОблагаетсяЕНВД,
		|	БазовыеНачисленияБУ.ПодразделениеУчетаЗатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПоБазе.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияПоБазе.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	НачисленияБУ.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	НачисленияПоБазе.Сумма КАК Сумма,
		|	НачисленияБУ.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НачисленияБУ.СтатьяРасходов КАК СтатьяРасходов,
		|	НачисленияБУ.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НачисленияБУ.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	НачисленияБУ.Сумма КАК СуммаБУ
		|ПОМЕСТИТЬ ВТНачисленияПоБазеБУКоэффициенты
		|ИЗ
		|	ВТНачисленияПоБазовымРасчетам КАК НачисленияПоБазе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеНачисленияБУКоэффициенты КАК НачисленияБУ
		|		ПО НачисленияПоБазе.ИдентификаторСтроки = НачисленияБУ.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПоБазе.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СУММА(НачисленияПоБазе.СуммаБУ) КАК СуммаБУ
		|ПОМЕСТИТЬ ВТНачисленияПоБазеБУКоэффициентыСвод
		|ИЗ
		|	ВТНачисленияПоБазеБУКоэффициенты КАК НачисленияПоБазе
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияПоБазе.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА &РаботаВБюджетномУчреждении
		|			ТОГДА Начисления.СтатьяРасходов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяРасходов,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ВЫБОР
		|		КОГДА НачисленияСвод.СуммаБУ = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Начисления.Сумма * Начисления.СуммаБУ / НачисленияСвод.СуммаБУ КАК ЧИСЛО(25, 10))
		|	КОНЕЦ КАК База
		|ИЗ
		|	ВТНачисленияПоБазеБУКоэффициенты КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоБазеБУКоэффициентыСвод КАК НачисленияСвод
		|		ПО Начисления.ИдентификаторСтроки = НачисленияСвод.ИдентификаторСтроки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НачисленияСвод.СуммаБУ = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВЫРАЗИТЬ(Начисления.Сумма * Начисления.СуммаБУ / НачисленияСвод.СуммаБУ КАК ЧИСЛО(25, 10))
		|		КОНЕЦ <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПоБазе.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияПоБазе.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	НачисленияПоБазе.Сотрудник КАК Сотрудник,
		|	НачисленияПоБазе.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПоБазе.Начисление КАК Начисление,
		|	НачисленияПоБазе.ДатаНачала КАК ДатаНачала,
		|	НачисленияПоБазе.ДатаОкончания КАК ДатаОкончания,
		|	НачисленияПоБазе.Сторно КАК Сторно,
		|	НачисленияПоБазе.Сумма КАК Сумма
		|ИЗ
		|	ВТНачисленияПоБазовымРасчетам КАК НачисленияПоБазе
		|ГДЕ
		|	НачисленияПоБазе.ОчередностьОтраженияВУчете = &ОчередностьОтраженияВУчете";
		
		Пакет = Запрос.ВыполнитьПакет();
		
		УдалитьВТОперативно.Добавить("ВТБазовыеНачисленияБУСвод");
		УдалитьВТОперативно.Добавить("ВТБазовыеНачисленияБУКоэффициенты");
		УдалитьВТОперативно.Добавить("ВТНачисленияПоБазеБУКоэффициенты");
		УдалитьВТОперативно.Добавить("ВТНачисленияПоБазеБУКоэффициентыСвод");
		
		КоличествоРезультатов = Пакет.ВГраница();
		
		ТаблицаКоэффициентов = Пакет[КоличествоРезультатов-1].Выгрузить();
		ТаблицаКоэффициентов.Индексы.Добавить("ИдентификаторСтроки");
		Отбор = Новый Структура("ИдентификаторСтроки");
		
		НачисленияПоБазе = Пакет[КоличествоРезультатов].Выгрузить();
		
		Для каждого СтрокаНачисления Из НачисленияПоБазе Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаНачисления);
			СтрокиОтражения = ТаблицаКоэффициентов.НайтиСтроки(Отбор);
			Если СтрокаНачисления.РассчитыватьПоРазовымНачислениямДокумента Тогда
				НовыеСтрокиОтражения = Новый Массив;
				Для каждого СтрокаОтражения Из СтрокиОтражения Цикл
					Если СтрокаОтражения.РассчитыватьПоРазовымНачислениямДокумента Тогда
						НовыеСтрокиОтражения.Добавить(СтрокаОтражения);
					КонецЕсли;
				КонецЦикла;
				СтрокиОтражения = НовыеСтрокиОтражения;
			КонецЕсли;
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиОтражения,"База");
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаНачисления.Сумма, Коэффициенты);
			
			Если Результаты = Неопределено Тогда
				
				НоваяСтрока = ТаблицаБухучетНетБазы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				Если РаботаВБюджетномУчреждении Тогда
					НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
				КонецЕсли;
				
			Иначе
				
				Индекс = 0;
				Для Каждого СтрокаОтражения Из СтрокиОтражения Цикл
					
					НоваяСтрока = ТаблицаБухучетОчередности.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтражения);
					НоваяСтрока.Сумма = Результаты[Индекс];
					
					Если РаботаВБюджетномУчреждении Тогда
						Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
							НоваяСтрока.СтатьяРасходов = СтатьяРасходовБюджетНачисления(СтрокаНачисления.Начисление, ПараметрыРаспределенияБюджет);
						КонецЕсли;
					КонецЕсли;
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаБухучетНетБазы.Количество() > 0 Тогда
			ДополнитьАналитику(Запрос, ТаблицаБухучетНетБазы);
			Если ПрименяетсяЕНВД Тогда
				Для каждого СтрокаТЗ Из ТаблицаБухучетНетБазы Цикл
					СтрокаТЗ.ОблагаетсяЕНВД = (СтрокаТЗ.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД);
				КонецЦикла;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаБухучетНетБазы, ТаблицаБухучетОчередности);
		КонецЕсли;
		
		ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаБухучетОчередности);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаБухучетОчередности, ТаблицаБухучет);
		
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТОперативно);
		
	КонецЦикла;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучет, "ВТБухучетНачисленийПоБазовымРасчетам");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

// Выполняет отражение начислений в бухучете, кроме начислений по договорам ГПХ .
// Результат помещается во временную таблицу с именем ИмяВТБухучетНачислений,
//
// Параметры:
// 		ИсходныеДанные - Структура - описание см ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете.
// 			Должны быть заполнены следующие свойства:
// 			* МенеджерВременныхТаблиц
// 			* ИмяВТНачисления - имя временной таблицы с начислениями по договорам.
// 			* МесяцНачисления
// 			* Организация
// 		ИмяВТБухучетНачислений - Строка - имя временной таблицы в которую помещаются результаты.
//
Процедура ПолучитьБухучетНачисленийБезДоговоровСоздатьВТ(ИсходныеДанные, ИмяВТБухучетНачислений)
	
	УдалитьВТ = Новый Массив;
	
	Организация              = ИсходныеДанные.Организация;
	ПериодРегистрации        = ИсходныеДанные.МесяцНачисления;
	МенеджерВТ			     = ИсходныеДанные.МенеджерВременныхТаблиц;
	ИмяВТНачисленияИсходная  = ИсходныеДанные.ИмяВТНачисления;
	ИсключаемыйРегистратор 	 = ИсходныеДанные.ИсключаемыйРегистратор;
	ВидыОперацийРасходыФСС   = ИсходныеДанные.ВидыОперацийРасходыФСС;
	БухучетПервичногоДокумента = ИсходныеДанные.БухучетПервичногоДокумента;
	
	// Получение дополнительных параметров по настройкам программы.
	ПрименяетсяЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, ПериодРегистрации);
	ПроцентЕНВД = 0;
	РассчитыватьДолюЕНВД = Ложь;
	Если ПрименяетсяЕНВД Тогда
		ПроцентЕНВД = ОтражениеЗарплатыВБухучете.ПроцентЕНВД(Организация, ПериодРегистрации);
		ПроцентЕНВД = ?(ПроцентЕНВД = Неопределено, 0, ПроцентЕНВД);
		РассчитыватьДолюЕНВД = ?(ПроцентЕНВД = 0 Или ПроцентЕНВД = 100, Ложь, Истина);
	КонецЕсли;
	
	// Дополнительные параметры, используемые при распределении, когда ведется учет по статьям.
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	ПараметрыРаспределенияПоСтатьям = Новый Структура("
	|КоэффициентыСреднегоЗаработкаФССДокумента,
	|КоэффициентыСреднегоЗаработкаДокумента,
	|СтрокиКоэффициентыСреднегоЗаработка,
	|АктуальныеСтатьиФинансирования,
	|АктуальныеСпособыОтражения,
	|СтатьиФинансированияЗамены,
	|РазрешенныеКатегорииНачисленийСтатьиФинансирования,
	|СтатьяИспользуетсяВБазеСреднего");
	Если ИспользоватьСтатьиФинансирования Тогда
		
		// Заполнение свойств: КоэффициентыСреднегоЗаработкаФССДокумента,КоэффициентыСреднегоЗаработкаДокумента,СтрокиКоэффициентыСреднегоЗаработка.
		ЗаполнитьЗначенияСвойств(ПараметрыРаспределенияПоСтатьям, ИсходныеДанные);
		
		ПараметрыРаспределенияПоСтатьям.АктуальныеСтатьиФинансирования 	= АктуальныеСтатьиФинансирования(Организация, ПериодРегистрации);
		ПараметрыРаспределенияПоСтатьям.АктуальныеСпособыОтражения 		= АктуальныеСпособыОтражения(Организация, ПериодРегистрации);
		ПараметрыРаспределенияПоСтатьям.СтатьиФинансированияЗамены 		= СтатьиФинансированияЗамены(ПериодРегистрации);
		ПараметрыРаспределенияПоСтатьям.СтатьяИспользуетсяВБазеСреднего = СтатьяИспользуетсяВБазеСреднего(ПериодРегистрации);
		ПараметрыРаспределенияПоСтатьям.РазрешенныеКатегорииНачисленийСтатьиФинансирования = РазрешенныеКатегорииНачисленийСтатьиФинансирования();
		
	КонецЕсли;
	
	// Дополнительные параметры, используемые при распределении, когда РаботаВБюджетномУчреждении.
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ПараметрыРаспределенияБюджет = Новый Структура("
	|СтатьиРасходовБюджетПоВидамНачислений,
	|СтатьяРасходовОплатаТруда");
	Если РаботаВБюджетномУчреждении Тогда
		
		// ПараметрыРаспределенияБюджет.СтатьиРасходовБюджетПоВидамНачислений
		// соответствие, ключ - начисление, ссылка - статья расходов.
		// Содержит только те начисления, для которых определена статья расходов,
		// в зависимости от вида начисления.
		
		ПараметрыРаспределенияБюджет.СтатьяРасходовОплатаТруда = СтатьяРасходов211();
		
		// Будет создана таблица ВТСтатьиРасходовНачисленийБюджетПоУмолчанию.
		СтатьиРасходовНачисленийБюджет(МенеджерВТ, Организация, ПериодРегистрации,
															ПараметрыРаспределенияБюджет.СтатьиРасходовБюджетПоВидамНачислений);
		УдалитьВТ.Добавить("ВТСтатьиРасходовНачисленийБюджетПоУмолчанию");
		
	КонецЕсли;

	ИспользоватьРасчетСохраняемогоДенежногоСодержания = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания");
	ПараметрыСохраняемогоДенежногоСодержания = Новый Структура("
	|КоэффициентыРаспределенияДенежногоСодержания,
	|СтрокиКоэффициентыСохраняемогоДС");
	Если ИспользоватьРасчетСохраняемогоДенежногоСодержания Тогда
		// Заполнение свойств: КоэффициентыРаспределенияДенежногоСодержания, СтрокиКоэффициентыСохраняемогоДС
		ЗаполнитьЗначенияСвойств(ПараметрыСохраняемогоДенежногоСодержания, ИсходныеДанные);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры, используемые при получении бухучета начислений сохраняемого денежного содержания
	// РаспределениеСохраняемогоДС - признак того, что выполняется получение бухучета начислений,
	// входящих в расчет сохраняемого ДС.
	РаспределениеСохраняемогоДС = ИсходныеДанные.РаспределениеСохраняемогоДС;
	Если РаспределениеСохраняемогоДС Тогда
		
		// СоответствиеСотрудников - ключ, это ссылка на "временного сотрудника", значение - ссылка на настоящего сотрудника
		СоответствиеСотрудников 	= ИсходныеДанные.СоответствиеСотрудников;
		// ДатаНачалаДляБухучета - настоящая дата, для получения бухучета
		ДатаНачалаДляБухучета = ИсходныеДанные.ДатаНачалаДляБухучета;
		
		ТаблицаСоответствия = Новый ТаблицаЗначений;
		ТаблицаСоответствия.Колонки.Добавить("ВременныйСотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСоответствия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		Для каждого ЭлементКоллекции Из СоответствиеСотрудников Цикл
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			НоваяСтрока.ВременныйСотрудник = ЭлементКоллекции.Ключ;
			НоваяСтрока.Сотрудник = ЭлементКоллекции.Значение;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаСоответствия", ТаблицаСоответствия);
		Запрос.УстановитьПараметр("ДатаНачалаДляБухучета", ДатаНачалаДляБухучета);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСоответствия.Сотрудник КАК Сотрудник,
		|	ТаблицаСоответствия.ВременныйСотрудник КАК ВременныйСотрудник
		|ПОМЕСТИТЬ ВТТаблицаСоответствия
		|ИЗ
		|	&ТаблицаСоответствия КАК ТаблицаСоответствия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСоответствия.Сотрудник КАК Сотрудник,
		|	&ДатаНачалаДляБухучета КАК ДатаНачала,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияДляРаспределения.*
		|ПОМЕСТИТЬ ВТНачисленияДляРаспределенияСохраняемогоДС
		|ИЗ
		|	ВТНачисленияДляРаспределения КАК НачисленияДляРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаСоответствия КАК ТаблицаСоответствия
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|			ПО ТаблицаСоответствия.Сотрудник = Сотрудники.Ссылка
		|		ПО НачисленияДляРаспределения.Сотрудник = ТаблицаСоответствия.ВременныйСотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаСоответствия";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
		Запрос.Выполнить();
		ИмяВТНачисленияИсходная = "ВТНачисленияДляРаспределенияСохраняемогоДС";
		УдалитьВТ.Добавить(ИмяВТНачисленияИсходная);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПроцентЕНВД", ПроцентЕНВД);
	Запрос.УстановитьПараметр("ЕстьЕНВД", ПрименяетсяЕНВД);
	Запрос.УстановитьПараметр("РассчитыватьДолюЕНВД", РассчитыватьДолюЕНВД);
	Запрос.УстановитьПараметр("ИспользоватьСтатьиФинансирования", ИспользоватьСтатьиФинансирования);
	Запрос.УстановитьПараметр("РаботаВБюджетномУчреждении", РаботаВБюджетномУчреждении);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("РасходыФСС", ВидыОперацийРасходыФСС);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("БухучетПервичногоДокумента", БухучетПервичногоДокумента);
	
	// Подготовка временной таблицы ВТИсходнаяТаблицаДляНастроекБухучета для получения настроек бухучета.
	ПараметрыПолученияНастроек = ПараметрыПолученияНастроекБухучета();
	ПараметрыПолученияНастроек.ИмяПоляПериод = "ДатаНачала";
	СоздатьВТИсходнаяТаблицаДляНастроекБухучета(МенеджерВТ, ИмяВТНачисленияИсходная, ПериодРегистрации, ПараметрыПолученияНастроек);
	УдалитьВТ.Добавить("ВТИсходнаяТаблицаДляНастроекБухучета");
	
	// ВТНастройкиБухучета и ВТНастройкиБухучетаПоУмолчанию
	// Получение настроек бухучета с учетом зарегистрированного распределения основного заработка сотрудников.
	СоздатьВТНастройкиБухучета(МенеджерВТ, Организация, ПериодРегистрации, Истина);
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	УдалитьВТ.Добавить("ВТНастройкиБухучетаПоУмолчанию");
	
	// ВТНастройкиНачислений
	// Настройки начислений, используемые в алгоритмах распределения.
	СоздатьВТНастройкиНачисленийДляБухучета(Запрос);
	УдалитьВТ.Добавить("ВТНастройкиНачислений");
	
	// ВТПоказателиНачисленийОпределяющиеБухучет
	СоздатьВТПоказателиНачисленийОпределяющиеБухучет(Запрос);
	УдалитьВТ.Добавить("ВТПоказателиНачисленийОпределяющиеБухучет");
	
	// ВТНастройкиБухучетаВсехСтрок и ВТНастройкиБухучетаВсехСтрокПоУмолчанию
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиНачислений.ЭтоРасходыФСС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|		ИНАЧЕ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА НЕ &ЕстьЕНВД
	|			ТОГДА НастройкиБухучета.ОтношениеКЕНВД
	|		КОГДА ЕСТЬNULL(НастройкиНачислений.ОтношениеКЕНВД, ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|			ТОГДА НастройкиБухучета.ОтношениеКЕНВД
	|		ИНАЧЕ НастройкиНачислений.ОтношениеКЕНВД
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НастройкиБухучета.ДоляРаспределения КАК ДоляРаспределения,
	|	НастройкиБухучета.СтрокаСРаспределением КАК СтрокаСРаспределением
	|ПОМЕСТИТЬ ВТНастройкиБухучетаВсехСтрок
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО Начисления.Начисление = НастройкиНачислений.Начисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
	|		ПО Начисления.Сотрудник = НастройкиБухучета.Сотрудник
	|			И Начисления.ДатаНачала = НастройкиБухучета.Период
	|			И Начисления.Подразделение = НастройкиБухучета.Подразделение
	|			И Начисления.ТерриторияВыполненияРаботВОрганизации = НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиНачислений.ЭтоРасходыФСС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|		ИНАЧЕ НастройкиБухучета.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА НЕ &ЕстьЕНВД
	|			ТОГДА НастройкиБухучета.ОтношениеКЕНВД
	|		КОГДА ЕСТЬNULL(НастройкиНачислений.ОтношениеКЕНВД, ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|			ТОГДА НастройкиБухучета.ОтношениеКЕНВД
	|		ИНАЧЕ НастройкиНачислений.ОтношениеКЕНВД
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НастройкиБухучета.ДоляРаспределения КАК ДоляРаспределения,
	|	НастройкиБухучета.СтрокаСРаспределением КАК СтрокаСРаспределением
	|ПОМЕСТИТЬ ВТНастройкиБухучетаВсехСтрокПоУмолчанию
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиНачислений КАК НастройкиНачислений
	|		ПО Начисления.Начисление = НастройкиНачислений.Начисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаПоУмолчанию КАК НастройкиБухучета
	|		ПО Начисления.Сотрудник = НастройкиБухучета.Сотрудник
	|			И Начисления.ДатаНачала = НастройкиБухучета.Период
	|			И Начисления.Подразделение = НастройкиБухучета.Подразделение
	|			И Начисления.ТерриторияВыполненияРаботВОрганизации = НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИмяВТНачисленияИсходная);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНастройкиБухучетаВсехСтрок");
	УдалитьВТ.Добавить("ВТНастройкиБухучетаВсехСтрокПоУмолчанию");
	
	// Имена промежуточных временных таблиц с бухучетом.
	// Таблицы "ВТБухучет..." содержат все сведения о бухучете.
	// Таблицы "...ДляБухучета" требуют дозаполнения аналитики.
	ИменаВТБухучет 		= Новый Массив;
	ИменаВТДляБухучета 	= Новый Массив;
	
	// Подготовка временных таблиц:
	// ВТОбработанныеСтроки с идентификаторами обработанных строк.
	// ВТСтрокиБезАналитики - идентификаторы строк, в которых требуется дозаполнить аналитику.
	// ВТСтатьиРасходовНачисленийСотрудников - когда Не РаботаВБюджетномУчреждении.
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	0 КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТОбработанныеСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	0 КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСтрокиБезАналитики";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТОбработанныеСтроки");
	УдалитьВТ.Добавить("ВТСтрокиБезАналитики");
	Если ИспользоватьСтатьиФинансирования И Не РаботаВБюджетномУчреждении Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК ИдентификаторСтроки,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов
		|ПОМЕСТИТЬ ВТСтатьиРасходовНачисленийСотрудников";
		Запрос.Выполнить();
		УдалитьВТ.Добавить("ВТСтатьиРасходовНачисленийСотрудников");
	КонецЕсли;
	
	// ВТБухучетНачисленийЕНВДПоЕжемесячнойДоле
	// Обработка строк, для которых нужна только доля ЕНВД, например,
	// единовременные выплаты ФСС, компенсации за задержку зарплаты.
	Если Не ИспользоватьСтатьиФинансирования Тогда
		ТаблицаСоздана = СоздатьВТБухучетНачисленийЕНВДПоЕжемесячнойДоле(Запрос, ИмяВТНачисленияИсходная);
		Если ТаблицаСоздана Тогда
			ИменаВТБухучет.Добавить("ВТБухучетНачисленийЕНВДПоЕжемесячнойДоле");
		КонецЕсли;
	КонецЕсли;
	
	// ВТБухучетНачисленийСдельногоЗаработка
	// ВТНачисленияПраздничныхСверхурочныхДляБухучета
	// ВТНачисленияПоПоказателямДляБухучета
	// ВТНачисленияПоДокументамДляБухучета
	Если Не РаспределениеСохраняемогоДС Тогда
		
		// ВТБухучетНачисленийСдельногоЗаработка
		ТаблицаСоздана = СоздатьВТБухучетНачисленийСдельногоЗаработка(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияБюджет);
		Если ТаблицаСоздана Тогда
			ИменаВТБухучет.Добавить("ВТБухучетНачисленийСдельногоЗаработка");
		КонецЕсли;
		
		// ВТНачисленияПраздничныхСверхурочныхДляБухучета
		ТаблицаСоздана = СоздатьВТНачисленияПраздничныхСверхурочныхДляБухучета(Запрос, ИмяВТНачисленияИсходная, ИсходныеДанные.ИсточникДанныхОДатахНачислений, ПараметрыРаспределенияБюджет);
		Если ТаблицаСоздана Тогда
			ИменаВТДляБухучета.Добавить("ВТНачисленияПраздничныхСверхурочныхДляБухучета");
		КонецЕсли;
		
		// ВТНачисленияПоПоказателямДляБухучета
		ТаблицаСоздана = СоздатьВТНачисленияПоПоказателямДляБухучета(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияБюджет);
		Если ТаблицаСоздана Тогда
			ИменаВТДляБухучета.Добавить("ВТНачисленияПоПоказателямДляБухучета");
		КонецЕсли;
		
		// ВТНачисленияПоДокументамДляБухучета
		// Начисления, для которых бухучет задан в первичном документе,
		// например, РазовоеНачисление, Премия и т.д..
		ТаблицаСоздана = СоздатьВТНачисленияПоДокументамДляБухучета(Запрос, ИмяВТНачисленияИсходная);
		Если ТаблицаСоздана Тогда
			ИменаВТДляБухучета.Добавить("ВТНачисленияПоДокументамДляБухучета");
		КонецЕсли;
		
	КонецЕсли;
	
	// ВТНастройкиНачисленийСотрудниковДляБухучета
	// Начисления сотрудников, зарегистрированных в БухучетПлановыхНачислений.
	// Дополнительно всегда создается таблица - ВТНастройкиБухучетаПлановыхНачислений,
	// в таблице будут все зарегистрированные настройки бухучета плановых начислений для дополнения аналитики.
	ТаблицаСоздана = СоздатьВТНастройкиНачисленийСотрудниковДляБухучета(Запрос, ИмяВТНачисленияИсходная);
	Если ТаблицаСоздана Тогда
		ИменаВТДляБухучета.Добавить("ВТНастройкиНачисленийСотрудниковДляБухучета");
	КонецЕсли;
	УдалитьВТ.Добавить("ВТНастройкиБухучетаПлановыхНачислений");
	
	// ВТБухучетНачисленийПоБазеСреднегоЗаработка
	// ВТБухучетНачисленийПоФактическимНачислениям
	// ВТБухучетНачисленийПоБазеСохраняемогоДС
	Если ИспользоватьСтатьиФинансирования И Не РаспределениеСохраняемогоДС Тогда
		
		ТаблицаСоздана = СоздатьВТБухучетНачисленийПоБазеСреднегоЗаработка(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияПоСтатьям, ПараметрыРаспределенияБюджет);
		Если ТаблицаСоздана Тогда
			ИменаВТБухучет.Добавить("ВТБухучетНачисленийПоБазеСреднегоЗаработка");
		КонецЕсли;
		
		ТаблицаСоздана = СоздатьВТБухучетНачисленийПоФактическимНачислениям(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияПоСтатьям, ПараметрыРаспределенияБюджет);
		Если ТаблицаСоздана Тогда
			ИменаВТБухучет.Добавить("ВТБухучетНачисленийПоФактическимНачислениям");
		КонецЕсли;
		
		// ВТБухучетНачисленийПоБазеСохраняемогоДС
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
			ТаблицаСоздана = СоздатьВТБухучетНачисленийПоБазеСохраняемогоДС(Запрос, ИмяВТНачисленияИсходная, ПараметрыСохраняемогоДенежногоСодержания, ПараметрыРаспределенияБюджет);
			Если ТаблицаСоздана Тогда
				ИменаВТБухучет.Добавить("ВТБухучетНачисленийПоБазеСохраняемогоДС");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// ВТНастройкиИзНачисленийДляБухучета
	// Начисления со стратегией КакЗаданоВидуРасчета. 
	// Дополнительно всегда создается таблица - ВТНастройкиБухучетаНачислений,
	// в таблице будут настройки бухучета всех начислений у которых задан бухучет, для дополнения аналитики.
	ТаблицаСоздана = СоздатьВТНастройкиИзНачисленийДляБухучета(Запрос, ИмяВТНачисленияИсходная);
	Если ТаблицаСоздана Тогда
		ИменаВТДляБухучета.Добавить("ВТНастройкиИзНачисленийДляБухучета");
	КонецЕсли;
	УдалитьВТ.Добавить("ВТНастройкиБухучетаНачислений");
	
	// ВТНачисленияПоБазовымРасчетам
	// Отбор начислений со стратегией отражения ПоБазовымРасчетам.
	// Когда РаспределениеСохраняемогоДС имя исходной таблицы в ИсходныеДанные.ИмяВТНачисления,
	// а в ИмяВТНачисленияИсходная таблица в которой поля Сотрудник, ФизическоеЛицо и ДатаНачала заполнены временными данными.
	ИмяВТНачисления = ?(РаспределениеСохраняемогоДС, ИсходныеДанные.ИмяВТНачисления, ИмяВТНачисленияИсходная);
	РаспределятьПоБазовымРасчетам = СоздатьВТНачисленияПоБазовымРасчетам(Запрос, ИмяВТНачисления);
	Если РаспределятьПоБазовымРасчетам Тогда
		УдалитьВТ.Добавить("ВТНачисленияПоБазовымРасчетам");
	КонецЕсли;
	
	// ВТНачисленияПоНастройкамБухучетаДляБухучета
	// Обработка оставшихся строк, получение настроек из ВТНастройкиБухучета.
	ТаблицаСоздана = СоздатьВТНачисленияПоНастройкамБухучетаДляБухучета(Запрос, ИмяВТНачисленияИсходная, ПараметрыРаспределенияБюджет);
	Если ТаблицаСоздана Тогда
		ИменаВТДляБухучета.Добавить("ВТНачисленияПоНастройкамБухучетаДляБухучета");
	КонецЕсли;
		
	// ВТБухучетНачисленийПоТаблицамДляБухучета
	// Объединение всех таблиц "...ДляБухучета",
	// дозаполнение аналитики в строках,
	// если ПрименяетсяЕНВД вычисление значения ОблагаетсяЕНВД.
	Если ИменаВТДляБухучета.Количество()>0 Тогда
		СоздатьВТБухучетНачисленийПоТаблицамДляБухучета(Запрос, ИмяВТНачисленияИсходная, ИменаВТДляБухучета);
		ИменаВТБухучет.Добавить("ВТБухучетНачисленийПоТаблицамДляБухучета");
	КонецЕсли;
	
	// ВТБухучетНачисленийБезРаспределяемыхПоБазе
	// Объединение всех таблиц "ВТБухучет..."
	Если ИменаВТБухучет.Количество() = 0 Тогда
		ТаблицаБухучет = НоваяТаблицаБухучетНачисленийПромежуточная();
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучет, "ВТБухучетНачисленийБезРаспределяемыхПоБазе");
	Иначе
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Таблица.Сотрудник КАК Сотрудник,
		|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Таблица.Начисление КАК Начисление,
		|	Таблица.ДатаНачала КАК ДатаНачала,
		|	Таблица.ДатаОкончания КАК ДатаОкончания,
		|	Таблица.Сумма КАК Сумма,
		|	Таблица.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Таблица.СтатьяРасходов КАК СтатьяРасходов,
		|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Таблица.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
		|ПОМЕСТИТЬ ВТБухучетНачисленийБезРаспределяемыхПоБазе
		|ИЗ
		|	#ИмяТаблицы КАК Таблица";
		
		ТекстЗапроса = "";
		Для Индекс = 0 По ИменаВТБухучет.ВГраница() Цикл
			ИмяТаблицы = ИменаВТБухучет[Индекс];
			Если Индекс > 0 Тогда
				ТекстЗапроса = ТекстЗапроса + " 
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
				ФрагментТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,"ПОМЕСТИТЬ ВТБухучетНачисленийБезРаспределяемыхПоБазе","");
			Иначе
				ФрагментТекстаЗапроса = ШаблонТекстаЗапроса;
			КонецЕсли;
			ФрагментТекстаЗапроса = СтрЗаменить(ФрагментТекстаЗапроса, "#ИмяТаблицы", ИмяТаблицы);
			ТекстЗапроса = ТекстЗапроса + ФрагментТекстаЗапроса;
		КонецЦикла;
		Запрос.Текст = ТекстЗапроса;
		
		Если РаспределятьПоБазовымРасчетам И РаспределениеСохраняемогоДС Тогда
			
			// В таблице ВТБухучетНачисленийБезРаспределяемыхПоБазе
			// устанавливаем исходные значения полей Сотрудник, ФизическоеЛицо, Начисление, ДатаНачала.
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТБухучетНачисленийБезРаспределяемыхПоБазе", "ВТБухучетНачисленийБезРаспределяемыхПоБазеВременная");
			Запрос.Выполнить();
			УдалитьВТ.Добавить("ВТБухучетНачисленийБезРаспределяемыхПоБазеВременная");
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	НачисленияДляРаспределения.Сотрудник КАК Сотрудник,
			|	НачисленияДляРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияДляРаспределения.Начисление КАК Начисление,
			|	НачисленияДляРаспределения.ДатаНачала КАК ДатаНачала,
			|	Таблица.ДатаОкончания КАК ДатаОкончания,
			|	Таблица.Сумма КАК Сумма,
			|	Таблица.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	Таблица.СтатьяФинансирования КАК СтатьяФинансирования,
			|	Таблица.СтатьяРасходов КАК СтатьяРасходов,
			|	Таблица.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	Таблица.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
			|ПОМЕСТИТЬ ВТБухучетНачисленийБезРаспределяемыхПоБазе
			|ИЗ
			|	ВТБухучетНачисленийБезРаспределяемыхПоБазеВременная КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДляРаспределения КАК НачисленияДляРаспределения
			|		ПО Таблица.ИдентификаторСтроки = НачисленияДляРаспределения.ИдентификаторСтроки";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРаспределения", ИсходныеДанные.ИмяВТНачисления);
			Запрос.Выполнить();
			
		Иначе
			Запрос.Выполнить();
		КонецЕсли;
		
	КонецЕсли;
	УдалитьВТ.Добавить("ВТБухучетНачисленийБезРаспределяемыхПоБазе");
	
	// ВТБухучетНачисленийПоБазовымРасчетам
	Если Не РаспределятьПоБазовымРасчетам Тогда
		ТаблицаБухучет = НоваяТаблицаБухучетНачисленийПромежуточная();
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаБухучет, "ВТБухучетНачисленийПоБазовымРасчетам");
	Иначе
		СоздатьВТБухучетНачисленийПоБазовымРасчетам(Запрос, ИмяВТНачисленияИсходная, 
						ИсходныеДанные.МенеджерКадровогоУчета, ИсходныеДанные.МенеджерДанныхУчетаВремени,
						ПараметрыРаспределенияБюджет);
	КонецЕсли;
	УдалитьВТ.Добавить("ВТБухучетНачисленийПоБазовымРасчетам");
	
	// ВТБухучетНачисленийВыходнаяТаблица - объединение сведений о бухучете начислений.
	Если Не РаботаВБюджетномУчреждении И ИспользоватьСтатьиФинансирования Тогда
		
		УчетНачисленнойЗарплатыРасширенный.СоздатьВТСтатьиРасходовНачисленийПоСпособамРасчетов(Запрос.МенеджерВременныхТаблиц);
		Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяОплатаТруда());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БухучетНачислений.Сотрудник КАК Сотрудник,
		|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачислений.Начисление КАК Начисление,
		|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
		|	БухучетНачислений.ДатаОкончания КАК ДатаОкончания,
		|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	СУММА(БухучетНачислений.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТБухучетНачисленийВыходнаяТаблица
		|ИЗ
		|	(ВЫБРАТЬ
		|		БухучетНачисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		БухучетНачисления.Сотрудник КАК Сотрудник,
		|		БухучетНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|		БухучетНачисления.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|		БухучетНачисления.Начисление КАК Начисление,
		|		БухучетНачисления.ДатаНачала КАК ДатаНачала,
		|		БухучетНачисления.ДатаОкончания КАК ДатаОкончания,
		|		БухучетНачисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|		БухучетНачисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|		ВЫБОР
		|			КОГДА НЕ СтатьиРасходовНачисленийСотрудников.СтатьяРасходов ЕСТЬ NULL
		|				ТОГДА СтатьиРасходовНачисленийСотрудников.СтатьяРасходов
		|			КОГДА НЕ СтатьиРасходовНачислений.СтатьяРасходов ЕСТЬ NULL
		|				ТОГДА СтатьиРасходовНачислений.СтатьяРасходов
		|			ИНАЧЕ &СтатьяРасходов
		|		КОНЕЦ КАК СтатьяРасходов,
		|		БухучетНачисления.Сумма КАК Сумма,
		|		БухучетНачисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
		|	ИЗ
		|		ВТБухучетНачисленийБезРаспределяемыхПоБазе КАК БухучетНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийСотрудников КАК СтатьиРасходовНачисленийСотрудников
		|			ПО БухучетНачисления.ИдентификаторСтроки = СтатьиРасходовНачисленийСотрудников.ИдентификаторСтроки
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийПоСпособамРасчетов КАК СтатьиРасходовНачислений
		|			ПО БухучетНачисления.Начисление = СтатьиРасходовНачислений.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		БухучетНачисления.ИдентификаторСтроки,
		|		БухучетНачисления.Сотрудник,
		|		БухучетНачисления.ФизическоеЛицо,
		|		БухучетНачисления.ПодразделениеУчетаЗатрат,
		|		БухучетНачисления.Начисление,
		|		БухучетНачисления.ДатаНачала,
		|		БухучетНачисления.ДатаОкончания,
		|		БухучетНачисления.СпособОтраженияЗарплатыВБухучете,
		|		БухучетНачисления.СтатьяФинансирования,
		|		ВЫБОР
		|			КОГДА НЕ СтатьиРасходовНачисленийСотрудников.СтатьяРасходов ЕСТЬ NULL
		|				ТОГДА СтатьиРасходовНачисленийСотрудников.СтатьяРасходов
		|			КОГДА НЕ СтатьиРасходовНачислений.СтатьяРасходов ЕСТЬ NULL
		|				ТОГДА СтатьиРасходовНачислений.СтатьяРасходов
		|			ИНАЧЕ &СтатьяРасходов
		|		КОНЕЦ,
		|		БухучетНачисления.Сумма,
		|		БухучетНачисления.ОблагаетсяЕНВД
		|	ИЗ
		|		ВТБухучетНачисленийПоБазовымРасчетам КАК БухучетНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийСотрудников КАК СтатьиРасходовНачисленийСотрудников
		|			ПО БухучетНачисления.ИдентификаторСтроки = СтатьиРасходовНачисленийСотрудников.ИдентификаторСтроки
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийПоСпособамРасчетов КАК СтатьиРасходовНачислений
		|			ПО БухучетНачисления.Начисление = СтатьиРасходовНачислений.Ссылка) КАК БухучетНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетНачислений.ОблагаетсяЕНВД,
		|	БухучетНачислений.ДатаОкончания,
		|	БухучетНачислений.ИдентификаторСтроки,
		|	БухучетНачислений.СтатьяРасходов,
		|	БухучетНачислений.Сотрудник,
		|	БухучетНачислений.СтатьяФинансирования,
		|	БухучетНачислений.ФизическоеЛицо,
		|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачислений.Начисление,
		|	БухучетНачислений.ДатаНачала,
		|	БухучетНачислений.ПодразделениеУчетаЗатрат";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БухучетНачислений.Сотрудник КАК Сотрудник,
		|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачислений.Начисление КАК Начисление,
		|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
		|	БухучетНачислений.ДатаОкончания КАК ДатаОкончания,
		|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	СУММА(БухучетНачислений.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТБухучетНачисленийВыходнаяТаблица
		|ИЗ
		|	(ВЫБРАТЬ
		|		БухучетНачисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		БухучетНачисления.Сотрудник КАК Сотрудник,
		|		БухучетНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|		БухучетНачисления.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|		БухучетНачисления.Начисление КАК Начисление,
		|		БухучетНачисления.ДатаНачала КАК ДатаНачала,
		|		БухучетНачисления.ДатаОкончания КАК ДатаОкончания,
		|		БухучетНачисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|		БухучетНачисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|		БухучетНачисления.СтатьяРасходов КАК СтатьяРасходов,
		|		БухучетНачисления.Сумма КАК Сумма,
		|		БухучетНачисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
		|	ИЗ
		|		ВТБухучетНачисленийБезРаспределяемыхПоБазе КАК БухучетНачисления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		БухучетНачисления.ИдентификаторСтроки,
		|		БухучетНачисления.Сотрудник,
		|		БухучетНачисления.ФизическоеЛицо,
		|		БухучетНачисления.ПодразделениеУчетаЗатрат,
		|		БухучетНачисления.Начисление,
		|		БухучетНачисления.ДатаНачала,
		|		БухучетНачисления.ДатаОкончания,
		|		БухучетНачисления.СпособОтраженияЗарплатыВБухучете,
		|		БухучетНачисления.СтатьяФинансирования,
		|		БухучетНачисления.СтатьяРасходов,
		|		БухучетНачисления.Сумма,
		|		БухучетНачисления.ОблагаетсяЕНВД
		|	ИЗ
		|		ВТБухучетНачисленийПоБазовымРасчетам КАК БухучетНачисления) КАК БухучетНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетНачислений.ОблагаетсяЕНВД,
		|	БухучетНачислений.ДатаОкончания,
		|	БухучетНачислений.ИдентификаторСтроки,
		|	БухучетНачислений.СтатьяРасходов,
		|	БухучетНачислений.Сотрудник,
		|	БухучетНачислений.СтатьяФинансирования,
		|	БухучетНачислений.ФизическоеЛицо,
		|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачислений.Начисление,
		|	БухучетНачислений.ДатаНачала,
		|	БухучетНачислений.ПодразделениеУчетаЗатрат";
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийВыходнаяТаблица", ИмяВТБухучетНачислений);
	Запрос.Выполнить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдалитьВТ,ИменаВТДляБухучета);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдалитьВТ,ИменаВТБухучет);
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
КонецПроцедуры

// Выполняет отражение начислений по договорам ГПХ в бухучете.
// Результат помещается во временную таблицу с именем ИмяВТБухучетНачислений,
//
// Параметры:
// 		ИсходныеДанные - Структура - описание см ОписаниеИсходныхДанныхДляОтраженияНачисленийВБухучете.
// 			Должны быть заполнены следующие свойства:
// 			* МенеджерВременныхТаблиц
// 			* ИмяВТНачисления - имя временной таблицы с начислениями по договорам.
// 			* МесяцНачисления
// 			* Организация
// 		ИмяВТБухучетНачислений - Строка - имя временной таблицы в которую помещаются результаты.
//
Процедура ПолучитьБухучетНачисленийПоДоговорамСоздатьВТ(ИсходныеДанные, ИмяВТБухучетНачислений)
	
	МенеджерВТ 				= ИсходныеДанные.МенеджерВременныхТаблиц;
	ИмяВТНачисленияИсходная = ИсходныеДанные.ИмяВТНачисления;
	Период 					= ИсходныеДанные.МесяцНачисления;
	Организация 			= ИсходныеДанные.Организация;
	
	ИспользоватьСтатьиФинансирования   = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	ПрименяетсяЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, Период);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ЕстьЕНВД", ПрименяетсяЕНВД);
	Запрос.УстановитьПараметр("ИспользоватьСтатьиФинансирования", ИспользоватьСтатьиФинансирования);
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяОплатаТруда());
	
	УдалитьВТ = Новый Массив;
	
	// Получим сведения о настройке бухучета для договорников.
	ПараметрыПолученияНастроек = ПараметрыПолученияНастроекБухучета();
	ПараметрыПолученияНастроек.ИмяПоляПериод = "ПериодРегистрации";
	СоздатьВТИсходнаяТаблицаДляНастроекБухучета(МенеджерВТ, ИмяВТНачисленияИсходная, Период, ПараметрыПолученияНастроек);
	УдалитьВТ.Добавить("ВТИсходнаяТаблицаДляНастроекБухучета");
	
	СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(МенеджерВТ, "ВТИсходнаяТаблицаДляНастроекБухучета");
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|					ИНАЧЕ НастройкиБухучета.ОтношениеКЕНВД
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТБухучетСотрудниковПоДоговорам
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
	|		ПО Начисления.Сотрудник = НастройкиБухучета.Сотрудник
	|			И Начисления.Подразделение = НастройкиБухучета.Подразделение
	|			И Начисления.ТерриторияВыполненияРаботВОрганизации = НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации
	|			И Начисления.ПериодРегистрации = НастройкиБухучета.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(НачисленияПоДоговорам.СтатьяФинансирования, ЕСТЬNULL(УсловияДоговораГПХ.СтатьяФинансирования, УсловияДоговораОпеки.СтатьяФинансирования)) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(НачисленияПоДоговорам.СтатьяРасходов, ЕСТЬNULL(УсловияДоговораГПХ.СтатьяРасходов, УсловияДоговораОпеки.СтатьяРасходов)) КАК СтатьяРасходов,
	|	ЕСТЬNULL(НачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете, ЕСТЬNULL(УсловияДоговораГПХ.СпособОтраженияЗарплатыВБухучете, УсловияДоговораОпеки.СпособОтраженияЗарплатыВБухучете)) КАК СпособОтраженияЗарплатыВБухучете,
	|	ЕСТЬNULL(НачисленияПоДоговорам.ОтношениеКЕНВД, ЕСТЬNULL(УсловияДоговораГПХ.ОтношениеКЕНВД, ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД))) КАК ОтношениеКЕНВД,
	|	ЕСТЬNULL(НачисленияПоДоговорам.Сумма, ЕСТЬNULL(УсловияДоговораГПХ.Сумма, Начисления.Сумма)) КАК Сумма,
	|	ЕСТЬNULL(НачисленияПоДоговорам.СуммаЕНВД, ЕСТЬNULL(УсловияДоговораГПХ.СуммаЕНВД, 0)) КАК СуммаЕНВД
	|ПОМЕСТИТЬ ВТБухучетДокументов
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|		ПО Начисления.ДокументОснование = НачисленияПоДоговорам.ДоговорАкт
	|			И Начисления.ПериодРегистрации = НачисленияПоДоговорам.МесяцНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|		ПО Начисления.ДокументОснование = УсловияДоговораГПХ.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораОпеки КАК УсловияДоговораОпеки
	|		ПО Начисления.ДокументОснование = УсловияДоговораОпеки.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА БухучетДокументов.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|				ИЛИ БухучетДокументов.СпособОтраженияЗарплатыВБухучете ЕСТЬ NULL
	|			ТОГДА БухучетСотрудников.СпособОтраженияЗарплатыВБухучете
	|		ИНАЧЕ БухучетДокументов.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА БухучетДокументов.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|				ИЛИ БухучетДокументов.СтатьяФинансирования ЕСТЬ NULL
	|			ТОГДА БухучетСотрудников.СтатьяФинансирования
	|		ИНАЧЕ БухучетДокументов.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА БухучетДокументов.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				ИЛИ БухучетДокументов.СтатьяРасходов ЕСТЬ NULL
	|			ТОГДА БухучетСотрудников.СтатьяРасходов
	|		ИНАЧЕ БухучетДокументов.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА БухучетДокументов.ОтношениеКЕНВД ЕСТЬ NULL
	|							ИЛИ БухучетДокументов.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|						ТОГДА БухучетСотрудников.ОтношениеКЕНВД
	|					ИНАЧЕ БухучетДокументов.ОтношениеКЕНВД
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	Начисления.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БухучетДокументов.Сумма, 0) = 0
	|			ТОГДА 0
	|		КОГДА Начисления.Сумма = БухучетДокументов.Сумма
	|			ТОГДА БухучетДокументов.СуммаЕНВД
	|		ИНАЧЕ ВЫРАЗИТЬ(БухучетДокументов.СуммаЕНВД * (ВЫРАЗИТЬ(Начисления.Сумма / БухучетДокументов.Сумма КАК ЧИСЛО(25, 10))) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаЕНВД
	|ПОМЕСТИТЬ ВТУчетДоговоровВременная
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетДокументов КАК БухучетДокументов
	|		ПО Начисления.ИдентификаторСтроки = БухучетДокументов.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетСотрудниковПоДоговорам КАК БухучетСотрудников
	|		ПО Начисления.ИдентификаторСтроки = БухучетСотрудников.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетДоговоров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	УчетДоговоров.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	УчетДоговоров.СтатьяФинансирования КАК СтатьяФинансирования,
	|	УчетДоговоров.СтатьяРасходов КАК СтатьяРасходов,
	|	УчетДоговоров.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	УчетДоговоров.Сумма КАК Сумма,
	|	УчетДоговоров.СуммаЕНВД КАК СуммаЕНВД,
	|	ВЫБОР
	|		КОГДА УчетДоговоров.Сумма = УчетДоговоров.СуммаЕНВД
	|				ИЛИ УчетДоговоров.СуммаЕНВД = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РассчитыватьДолюЕНВД,
	|	ВЫБОР
	|		КОГДА УчетДоговоров.Сумма = 0
	|			ТОГДА 0
	|		ИНАЧЕ УчетДоговоров.СуммаЕНВД / УчетДоговоров.Сумма
	|	КОНЕЦ КАК ДоляЕНВД
	|ПОМЕСТИТЬ ВТУчетДоговоров
	|ИЗ
	|	ВТУчетДоговоровВременная КАК УчетДоговоров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК ПодразделениеУчетаЗатрат,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьСтатьиФинансирования
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|		ИНАЧЕ УчетДоговоров.СтатьяФинансирования
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	УчетДоговоров.СтатьяРасходов КАК СтатьяРасходов,
	|	УчетДоговоров.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА УчетДоговоров.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|					ТОГДА ВЫБОР
	|							КОГДА УчетДоговоров.РассчитыватьДолюЕНВД
	|								ТОГДА ОтношениеКЕНВДЗатратНаЗарплату.Ссылка
	|							КОГДА УчетДоговоров.ДоляЕНВД = 0
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|						КОНЕЦ
	|				ИНАЧЕ УчетДоговоров.ОтношениеКЕНВД
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА УчетДоговоров.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|				И УчетДоговоров.РассчитыватьДолюЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ОтношениеКЕНВДЗатратНаЗарплату.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|						ТОГДА УчетДоговоров.СуммаЕНВД
	|					ИНАЧЕ УчетДоговоров.Сумма - УчетДоговоров.СуммаЕНВД
	|				КОНЕЦ
	|		ИНАЧЕ УчетДоговоров.Сумма
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ВТБухучетНачисленийПоДоговорам
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетДоговоров КАК УчетДоговоров
	|		ПО Начисления.ИдентификаторСтроки = УчетДоговоров.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ОтношениеКЕНВДЗатратНаЗарплату КАК ОтношениеКЕНВДЗатратНаЗарплату
	|		ПО (ОтношениеКЕНВДЗатратНаЗарплату.Ссылка В (ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД), ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)))
	|			И (УчетДоговоров.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом))
	|			И (УчетДоговоров.РассчитыватьДолюЕНВД)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияПоДоговорамГПХ", ИмяВТНачисленияИсходная);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийПоДоговорам", ИмяВТБухучетНачислений);
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТБухучетСотрудниковПоДоговорам");
	УдалитьВТ.Добавить("ВТУчетДоговоров");
	УдалитьВТ.Добавить("ВТУчетДоговоровВременная");
	УдалитьВТ.Добавить("ВТБухучетДокументов");
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);

КонецПроцедуры

// Дополнительные алгоритмы обработки данных.

Процедура ДополнитьВТОбработанныеСтроки(Запрос, ИмяВТ)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТОбработанныеСтрокиВременная
	|ИЗ
	|	ВТОбработанныеСтроки КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОбработанныеСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТОбработанныеСтроки
	|ИЗ
	|	ВТОбработанныеСтрокиВременная КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ИдентификаторСтроки
	|ИЗ
	|	#Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОбработанныеСтрокиВременная";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#Таблица", ИмяВТ);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьВТСтрокиБезАналитики(Запрос, ИмяВТ)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСтрокиБезАналитикиВременная
	|ИЗ
	|	ВТСтрокиБезАналитики КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтрокиБезАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСтрокиБезАналитики
	|ИЗ
	|	ВТСтрокиБезАналитикиВременная КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ИдентификаторСтроки
	|ИЗ
	|	#Таблица КАК Таблица
	|ГДЕ
	|	Таблица.НеЗаполненаАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтрокиБезАналитикиВременная";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#Таблица", ИмяВТ);
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьВТСтатьиРасходовНачисленийСотрудников(Запрос, ИмяВТ)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.СтатьяРасходов КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТСтатьиРасходовНачисленийСотрудниковВременная
	|ИЗ
	|	ВТСтатьиРасходовНачисленийСотрудников КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтатьиРасходовНачисленийСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.СтатьяРасходов КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТСтатьиРасходовНачисленийСотрудников
	|ИЗ
	|	ВТСтатьиРасходовНачисленийСотрудниковВременная КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ИдентификаторСтроки,
	|	Таблица.СтатьяРасходов
	|ИЗ
	|	#Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтатьиРасходовНачисленийСотрудниковВременная";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#Таблица", ИмяВТ);
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьАналитику(Запрос, ТаблицаБухучета)
	
	ИдентификаторыСтрок = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаБухучета, "ИдентификаторСтроки", Истина);
	
	Запрос.УстановитьПараметр("СтрокиБезАналитики", ИдентификаторыСтрок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ИЗ
	|	ВТНастройкиБухучетаПлановыхНачислений КАК НастройкиБухучета
	|ГДЕ
	|	НастройкиБухучета.ИдентификаторСтроки В(&СтрокиБезАналитики)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ИЗ
	|	ВТНастройкиБухучетаНачислений КАК НастройкиБухучета
	|ГДЕ
	|	НастройкиБухучета.ИдентификаторСтроки В(&СтрокиБезАналитики)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НастройкиБухучета.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	НастройкиБухучета.ДоляРаспределения КАК ДоляРаспределения
	|ИЗ
	|	ВТНастройкиБухучетаВсехСтрок КАК НастройкиБухучета
	|ГДЕ
	|	НастройкиБухучета.ИдентификаторСтроки В(&СтрокиБезАналитики)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.ВГраница();
	
	НастройкиНачисленийСотрудников = РезультатЗапроса[КоличествоРезультатов-2].Выгрузить();
	НастройкиНачисленийСотрудников.Индексы.Добавить("ИдентификаторСтроки");
	
	НастройкиИзНачислений = РезультатЗапроса[КоличествоРезультатов-1].Выгрузить();
	НастройкиИзНачислений.Индексы.Добавить("ИдентификаторСтроки");
	
	НастройкиБухучета = РезультатЗапроса[КоличествоРезультатов].Выгрузить();
	НастройкиБухучета.Индексы.Добавить("ИдентификаторСтроки");
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	ПрименяетсяЕНВД = Запрос.Параметры.ЕстьЕНВД;
	
	СтрокиКУдалению = Новый Массив;
	НоваяТаблицаБухучета = ТаблицаБухучета.СкопироватьКолонки();
	
	Для каждого СтрокаТЗ Из ТаблицаБухучета Цикл
		
		ЗаполнятьСпособОтражения = Не ЗначениеЗаполнено(СтрокаТЗ.СпособОтраженияЗарплатыВБухучете);
		ЗаполнятьСтатьюФинансирования = ИспользоватьСтатьиФинансирования И Не ЗначениеЗаполнено(СтрокаТЗ.СтатьяФинансирования);
		ЗаполнятьЕНВД = ПрименяетсяЕНВД И Не ЗначениеЗаполнено(СтрокаТЗ.ОтношениеКЕНВД);
		
		Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтроки;
		
		// Заполнение из настроек начислений сотрудников.
		НастройкиБухучетаСтроки = НастройкиНачисленийСотрудников.НайтиСтроки(Отбор);
		Если НастройкиБухучетаСтроки.Количество() > 0  Тогда
			Если ЗаполнятьСпособОтражения И ЗначениеЗаполнено(НастройкиБухучетаСтроки[0].СпособОтраженияЗарплатыВБухучете) Тогда
				СтрокаТЗ.СпособОтраженияЗарплатыВБухучете = НастройкиБухучетаСтроки[0].СпособОтраженияЗарплатыВБухучете;
				ЗаполнятьСпособОтражения = Ложь;
			КонецЕсли;
			Если ЗаполнятьСтатьюФинансирования И ЗначениеЗаполнено(НастройкиБухучетаСтроки[0].СтатьяФинансирования) Тогда
				СтрокаТЗ.СтатьяФинансирования = НастройкиБухучетаСтроки[0].СтатьяФинансирования;
				ЗаполнятьСтатьюФинансирования = Ложь;
			КонецЕсли;
			Если ЗаполнятьЕНВД И ЗначениеЗаполнено(НастройкиБухучетаСтроки[0].ОтношениеКЕНВД) Тогда
				СтрокаТЗ.ОтношениеКЕНВД = НастройкиБухучетаСтроки[0].ОтношениеКЕНВД;
				ЗаполнятьЕНВД = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗаполнятьСпособОтражения И Не ЗаполнятьСтатьюФинансирования И Не ЗаполнятьЕНВД Тогда
			Продолжить;
		КонецЕсли;
	
		// Заполнение из настроек указанных в начислении.
		НастройкиБухучетаСтроки = НастройкиИзНачислений.НайтиСтроки(Отбор);
		Если НастройкиБухучетаСтроки.Количество() > 0  Тогда
			Если ЗаполнятьСпособОтражения И ЗначениеЗаполнено(НастройкиБухучетаСтроки[0].СпособОтраженияЗарплатыВБухучете) Тогда
				СтрокаТЗ.СпособОтраженияЗарплатыВБухучете = НастройкиБухучетаСтроки[0].СпособОтраженияЗарплатыВБухучете;
				ЗаполнятьСпособОтражения = Ложь;
			КонецЕсли;
			Если ЗаполнятьСтатьюФинансирования И ЗначениеЗаполнено(НастройкиБухучетаСтроки[0].СтатьяФинансирования) Тогда
				СтрокаТЗ.СтатьяФинансирования = НастройкиБухучетаСтроки[0].СтатьяФинансирования;
				ЗаполнятьСтатьюФинансирования = Ложь;
			КонецЕсли;
			Если ЗаполнятьЕНВД И ЗначениеЗаполнено(НастройкиБухучетаСтроки[0].ОтношениеКЕНВД) Тогда
				СтрокаТЗ.ОтношениеКЕНВД = НастройкиБухучетаСтроки[0].ОтношениеКЕНВД;
				ЗаполнятьЕНВД = Ложь;
			КонецЕсли;
		КонецЕсли;
			
		Если Не ЗаполнятьСпособОтражения И Не ЗаполнятьСтатьюФинансирования И Не ЗаполнятьЕНВД Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение из настроек бухучете.
		// Дополнительно заполняем ПодразделениеУчетаЗатрат.
		ЗаполнятьПодразделение = Не ЗначениеЗаполнено(СтрокаТЗ.ПодразделениеУчетаЗатрат);
		НастройкиБухучетаСтроки = НастройкиБухучета.НайтиСтроки(Отбор);
		Если НастройкиБухучетаСтроки.Количество() = 1 Тогда
			
			Если ЗаполнятьПодразделение Тогда
				СтрокаТЗ.ПодразделениеУчетаЗатрат = НастройкиБухучетаСтроки[0].ПодразделениеУчетаЗатрат;
			КонецЕсли;
			Если ЗаполнятьСпособОтражения Тогда
				СтрокаТЗ.СпособОтраженияЗарплатыВБухучете = НастройкиБухучетаСтроки[0].СпособОтраженияЗарплатыВБухучете;
			КонецЕсли;
			Если ЗаполнятьСтатьюФинансирования Тогда
				СтрокаТЗ.СтатьяФинансирования = НастройкиБухучетаСтроки[0].СтатьяФинансирования;
			КонецЕсли;
			Если ЗаполнятьЕНВД Тогда
				СтрокаТЗ.ОтношениеКЕНВД = НастройкиБухучетаСтроки[0].ОтношениеКЕНВД;
			КонецЕсли;
			
		Иначе
			
			СтрокиКУдалению.Добавить(СтрокаТЗ);
			
			Если СтрокаТЗ.Сумма = 0 Тогда
				
				Для каждого СтрокаБухучета Из НастройкиБухучетаСтроки Цикл
					НоваяСтрока = НоваяТаблицаБухучета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					Если ЗаполнятьПодразделение Тогда
						СтрокаТЗ.ПодразделениеУчетаЗатрат = СтрокаБухучета.ПодразделениеУчетаЗатрат;
					КонецЕсли;
					Если ЗаполнятьСпособОтражения Тогда
						НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СтрокаБухучета.СпособОтраженияЗарплатыВБухучете;
					КонецЕсли;
					Если ЗаполнятьСтатьюФинансирования Тогда
						НоваяСтрока.СтатьяФинансирования = СтрокаБухучета.СтатьяФинансирования;
					КонецЕсли;
					Если ЗаполнятьЕНВД Тогда
						СтрокаТЗ.ОтношениеКЕНВД = СтрокаБухучета.ОтношениеКЕНВД;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(НастройкиБухучетаСтроки,"ДоляРаспределения");
				Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаТЗ.Сумма, Коэффициенты);
				
				Если Результаты = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяТаблицаБухучета.Добавить(), СтрокаТЗ);
				Иначе
					
					Индекс = 0;
					Для каждого СтрокаБухучета Из НастройкиБухучетаСтроки Цикл
						
						НоваяСтрока = НоваяТаблицаБухучета.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						Если ЗаполнятьПодразделение Тогда
							НоваяСтрока.ПодразделениеУчетаЗатрат = СтрокаБухучета.ПодразделениеУчетаЗатрат;
						КонецЕсли;
						Если ЗаполнятьСпособОтражения Тогда
							НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СтрокаБухучета.СпособОтраженияЗарплатыВБухучете;
						КонецЕсли;
						Если ЗаполнятьСтатьюФинансирования Тогда
							НоваяСтрока.СтатьяФинансирования = СтрокаБухучета.СтатьяФинансирования;
						КонецЕсли;
						Если ЗаполнятьЕНВД Тогда
							НоваяСтрока.ОтношениеКЕНВД = СтрокаБухучета.ОтношениеКЕНВД;
						КонецЕсли;
						НоваяСтрока.Сумма = Результаты[Индекс];
						
						Индекс = Индекс + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаБухучета.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НоваяТаблицаБухучета,ТаблицаБухучета);
	
КонецПроцедуры

Функция СтатьяРасходовБюджетНачисления(Начисление, ПараметрыРаспределенияБюджет)

	СтатьяРасходов = ПараметрыРаспределенияБюджет.СтатьиРасходовБюджетПоВидамНачислений[Начисление];
	Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда
		СтатьяРасходов = ПараметрыРаспределенияБюджет.СтатьяРасходовОплатаТруда;
	КонецЕсли;
	
	Возврат СтатьяРасходов;
	
КонецФункции

// Конструктор таблицы значений с данными для отражения начислений в бухучете.
// Используется при формировании временных таблиц с префиксом "ВТБухучетНачислений".
//
Функция НоваяТаблицаБухучетНачисленийПромежуточная()

	ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	МассивТиповНачисления.Добавить(Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам"));
	МассивТиповНачисления.Добавить(Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("Сотрудник",  							Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", 						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Начисление", 							Новый ОписаниеТипов(МассивТиповНачисления));
	Таблица.Колонки.Добавить("ДатаНачала", 							ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДатаОкончания", 						ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("СтатьяФинансирования",				Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	Таблица.Колонки.Добавить("СтатьяРасходов",  					Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД",						Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Сторно",								Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Сумма", 								Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат Таблица;

КонецФункции

// Конструктор таблицы значений с данными для отражения начислений в бухучете.
// Используется при формировании временных таблиц с постфиксом "ДляБухучета".
//
Функция НоваяТаблицаНастройкиНачисленийДляБухучета()

	ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	МассивТиповНачисления.Добавить(Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам"));
	МассивТиповНачисления.Добавить(Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("Начисление", 							Новый ОписаниеТипов(МассивТиповНачисления));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("СтатьяФинансирования",				Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	Таблица.Колонки.Добавить("СтатьяРасходов",  					Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ОтношениеКЕНВД",						Новый ОписаниеТипов("ПеречислениеСсылка.ОтношениеКЕНВДЗатратНаЗарплату"));
	Таблица.Колонки.Добавить("Сумма", 								Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("НеЗаполненаАналитика",				Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;

КонецФункции

// Конструктор таблицы значений с данными для отражения начислений в бухучете.
// Используется при формировании данных, предназначенных для передачи в бухгалтерскую программу.
//
Функция НоваяТаблицаДанныеДляОтраженияВБухучетеНачислений()

	ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	МассивТиповНачисления.Добавить(Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам"));
	МассивТиповНачисления.Добавить(Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник",  							Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", 						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Подразделение", 						Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Начисление", 							Новый ОписаниеТипов(МассивТиповНачисления));
	Таблица.Колонки.Добавить("ВидОперации", 						Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("СтатьяФинансирования",				Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",  					Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД",						Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ДатаНачала", 							ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ПериодПринятияРасходов", 				ОписаниеТипаДата);
	Таблица.Колонки.Добавить("ДокументОснование", 					Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип));
	Таблица.Колонки.Добавить("Сумма", 								Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат Таблица;

КонецФункции

#КонецОбласти

#Область ОбслуживаниеОценочныхОбязательств

Функция НачисленияИВзносыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, Сотрудники)
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		БухучетНачислений 	= БухучетНачисленийПоСтатьям(Организация, ПериодРегистрации, Новый Структура("Сотрудники", Сотрудники));
		БухучетВзносов 		= БухучетВзносовПоСтатьям(Организация, ПериодРегистрации, Сотрудники);
	Иначе
		
		ТаблицаНачислений = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНачислений(Организация, ПериодРегистрации, Сотрудники);
		БухучетНачислений = БухучетНачислений(Организация, ПериодРегистрации, ТаблицаНачислений);
		
		ТаблицаВзносов = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеВзносов(Организация, ПериодРегистрации, Сотрудники);
		БухучетВзносов = ОтражениеЗарплатыВБухучете.БухучетСтраховыхВзносов(Организация, ПериодРегистрации, ТаблицаВзносов, БухучетНачислений);
		
	КонецЕсли;
	
	Возврат БухучетНачисленийИВзносов(БухучетНачислений, БухучетВзносов);
	
КонецФункции

// Заполняет параметры для расчета оценочных обязательств по отпускам.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации.
// 	ПериодРегистрации - Дата.
// 	ПараметрыДляРасчета - Структура - Параметры, которые будут заполняться.
//                        См. ОтражениеЗарплатыВБухучете.ОписаниеПараметровДляРасчетаОценочныхОбязательствОтпусков.
// 	Сотрудники - Массив, Неопределенно.
//
Процедура ЗаполнитьПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, ПараметрыДляРасчета, Сотрудники) Экспорт

	ПодработкаСотрудник = Новый Соответствие;
	СотрудникиДляНачисленийИВзносов = Сотрудники;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") И Сотрудники <> Неопределено Тогда
		
		// Для получения начислений и взносов дополним сотрудников подработками.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ГоловнойСотрудник В(&Сотрудники)
		|	И Сотрудники.Ссылка <> Сотрудники.ГоловнойСотрудник";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			СотрудникиДляНачисленийИВзносов = ОбщегоНазначения.СкопироватьРекурсивно(Сотрудники);
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ПодработкаСотрудник.Вставить(Выборка.Сотрудник, Выборка.ГоловнойСотрудник);
				СотрудникиДляНачисленийИВзносов.Добавить(Выборка.Сотрудник);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачисленнаяЗарплатаИВзносы = НачисленияИВзносыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, СотрудникиДляНачисленийИВзносов);
	ФондОплатыТрудаИСтраховыеВзносы = ОтражениеЗарплатыВБухучете.ФондОплатыТрудаИСтраховыеВзносыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, НачисленнаяЗарплатаИВзносы);
	
	Отбор = Новый Структура("РасчетПоСохраняемомуЗаработку", Ложь);
	
	ФОТПоСреднему = ФондОплатыТрудаИСтраховыеВзносы.Скопировать(Отбор);
	УдалитьСтрокиИсключаемыеИзРасчетаСреднегоЗаработка(ФОТПоСреднему, Организация, ПериодРегистрации);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФОТПоСреднему, ПараметрыДляРасчета.ФондОплатыТрудаИСтраховыеВзносы);
	
	Отбор.РасчетПоСохраняемомуЗаработку = Истина;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФондОплатыТрудаИСтраховыеВзносы.Скопировать(Отбор), ПараметрыДляРасчета.ФондОплатыТрудаИСтраховыеВзносы);
	
	ОстаткиОтпусковДляРасчетаОценочныхОбязательств = ОтражениеЗарплатыВБухучете.ОстаткиОтпусковДляРасчетаОценочныхОбязательств(Организация, ПериодРегистрации, Сотрудники, "Подразделение,ТерриторияВыполненияРаботВОрганизации");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстаткиОтпусковДляРасчетаОценочныхОбязательств, ПараметрыДляРасчета.ОстаткиОтпусков);
	
	НастройкиБухучетаСотрудников = НастройкиБухучетаСотрудниковДляРасчетаОбязательств(Организация, ПериодРегистрации, Сотрудники);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НастройкиБухучетаСотрудников, ПараметрыДляРасчета.НастройкиБухучетаСотрудников);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		ПараметрыДляРасчета.ОстаткиОтпусков.ЗаполнитьЗначения(КонецМесяца(ПериодРегистрации),"ДатаНачала");
		ПараметрыДляРасчета.НастройкиБухучетаСотрудников.ЗаполнитьЗначения(КонецМесяца(ПериодРегистрации),"ДатаНачала");
		ИменаТаблиц = "ФондОплатыТрудаИСтраховыеВзносы,ОстаткиОтпусков,НастройкиБухучетаСотрудников";
		Модуль.ДополнитьДанныеДокументаМестомВСтруктуреПредприятия(ПараметрыДляРасчета, ИменаТаблиц);
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из ПараметрыДляРасчета Цикл
		Если ЭлементСтруктуры.Значение.Колонки.Найти("ПодразделениеУчетаЗатрат") <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Колонки.Удалить("Подразделение");
			ЭлементСтруктуры.Значение.Колонки.ПодразделениеУчетаЗатрат.Имя = "Подразделение";
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") И Сотрудники = Неопределено Тогда
		
		СотрудникиНачисленийИВзносов = ОбщегоНазначения.ВыгрузитьКолонку(ПараметрыДляРасчета.ФондОплатыТрудаИСтраховыеВзносы, "Сотрудник", Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", СотрудникиНачисленийИВзносов);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|	И Сотрудники.Ссылка <> Сотрудники.ГоловнойСотрудник";
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПодработкаСотрудник.Вставить(Выборка.Сотрудник, Выборка.ГоловнойСотрудник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПодработкаСотрудник.Количество() > 0 Тогда
		Для каждого СтрокаТЗ Из ПараметрыДляРасчета.ФондОплатыТрудаИСтраховыеВзносы Цикл
			ГоловнойСотрудник = ПодработкаСотрудник[СтрокаТЗ.Сотрудник];
			Если ГоловнойСотрудник <> Неопределено Тогда
				СтрокаТЗ.Сотрудник = ГоловнойСотрудник;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Не выполняем свертку таблицы ОстаткиОтпусков, т.к. в ней могут быть сотрудники с нулевыми остатками.
	ВременныеПараметры = Новый Структура;
	ВременныеПараметры.Вставить("ФондОплатыТрудаИСтраховыеВзносы", ПараметрыДляРасчета.ФондОплатыТрудаИСтраховыеВзносы);
	ОтражениеЗарплатыВБухучете.СвернутьДанныеДляОтраженияЗарплатыВБухучете(ВременныеПараметры, "ДатаНачала,Начисление");
	
	ПараметрыДляРасчета.ФондОплатыТрудаИСтраховыеВзносы = ВременныеПараметры.ФондОплатыТрудаИСтраховыеВзносы;
	ПараметрыДляРасчета.ОстаткиОтпусков.Колонки.Удалить("ДатаНачала");
	ПараметрыДляРасчета.НастройкиБухучетаСотрудников.Колонки.Удалить("ДатаНачала");

КонецПроцедуры

Процедура СоздатьВТНачисленияБазаОтпуска(МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиНачислений.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НастройкиНачислений.Ссылка.СтратегияОтраженияВСреднемЗаработке = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоБазовымРасчетам
	|ПОМЕСТИТЬ ВТНачисленияБазаОтпуска
	|ИЗ
	|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкиНачислений
	|ГДЕ
	|	НастройкиНачислений.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать)";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура УдалитьСтрокиИсключаемыеИзРасчетаСреднегоЗаработка(ФондОплатыТрудаИСтраховыеВзносы, Организация, ПериодРегистрации)
	
	Если ФондОплатыТрудаИСтраховыеВзносы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ФондОплатыТрудаИСтраховыеВзносы, "Сотрудник", Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.НачислениеУдержание КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	СУММА(Начисления.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ГруппаНачисленияУдержанияВыплаты В (ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено), ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы))
	|	И Начисления.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Начисления.Сотрудник В(&Сотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.НачислениеУдержание,
	|	Начисления.ПериодДействия,
	|	Начисления.Регистратор,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Сотрудник,
	|	Начисления.Подразделение";
	Запрос.Выполнить();
	
	// Обработка начислений, исключаемых из среднего заработка в периоде командировок.
	// Если есть исключаемые командировки, в этой переменной будет таблица значений с полями:
	// Регистратор,Сотрудник,Подразделение,Начисление,ДатаНачала,Сумма,РезультатБаза. 
	НачисленияИсключаемыеВПериодКомандировок = Неопределено;
	ОбработатьСтрокиНачисленийИсключаемыеВПериодКомандировок(Запрос.МенеджерВременныхТаблиц, ФондОплатыТрудаИСтраховыеВзносы, ПериодРегистрации, НачисленияИсключаемыеВПериодКомандировок);
	
	// Исключение из ФОТ РК и СН, приходящихся на не включаемые в расчет среднего суммы.
	ОбработатьСтрокиНачисленийИсключаемыеИзРаспределяемыхПоБазеСреднего(Запрос.МенеджерВременныхТаблиц, ФондОплатыТрудаИСтраховыеВзносы, ПериодРегистрации, НачисленияИсключаемыеВПериодКомандировок);
	
КонецПроцедуры

Процедура ОбработатьСтрокиНачисленийИсключаемыеВПериодКомандировок(МенеджерВременныхТаблиц, ФондОплатыТрудаИСтраховыеВзносы, ПериодРегистрации, НачисленияИсключаемыеВПериодКомандировок)

	ИсключатьНачисленияВПериодКомандировок = Ложь;
	УчетСреднегоЗаработка.СоздатьВТДляИсключенияКомандировок(МенеджерВременныхТаблиц, ИсключатьНачисленияВПериодКомандировок);
	
	УдалитьВТ = Новый массив;
	
	Если ИсключатьНачисленияВПериодКомандировок Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Регистратор КАК Регистратор
		|ИЗ
		|	ВТНачисления КАК Начисления";
		РегистраторыДляОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
		
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ПериодРегистрации КАК ПериодРегистрации,
		|	ПериодыКомандировок.Регистратор КАК Регистратор,
		|	ПериодыКомандировок.НомерСтроки КАК НомерСтроки,
		|	ПериодыКомандировок.Сотрудник КАК Сотрудник,
		|	ПериодыКомандировок.ВидРасчета КАК ВидРасчета,
		|	ПериодыКомандировок.Начало КАК БазовыйПериодНачало,
		|	ПериодыКомандировок.Окончание КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	ВТПериодыКомандировок КАК ПериодыКомандировок";
		Запрос.Выполнить();
		УдалитьВТ.Добавить("ВТОсновныеЗаписи");
		
		// Готовим запрос к расчетной базе начислений.
		ИменаИзмерений = РасчетЗарплатыРасширенный.ИменаИзмеренийРасчетнойБазыНачислений();
		ИменаИзмерений.Сотрудник = "Сотрудник";
		
		ОтборБазовыхЗаписей = Новый Массив;
		ОтборБазовыхЗаписей.Добавить(РасчетЗарплатыРасширенный.ЭлементОтбораБазовыхЗаписей("Регистратор", РегистраторыДляОтбора));
		
		РасчетЗарплатыРасширенный.СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, "ВТИсключаемыеВПериодКомандировки", ОтборБазовыхЗаписей);
		УдалитьВТ.Добавить("ВТРасчетнаяБаза");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетнаяБаза.РегистраторРазрез КАК Регистратор,
		|	РасчетнаяБаза.ВидРасчетаРазрез КАК ВидРасчета,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, ДЕНЬ) КАК ДатаНачала,
		|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ) КАК ДатаОкончания,
		|	СУММА(РасчетнаяБаза.РезультатБаза) КАК РезультатБаза
		|ПОМЕСТИТЬ ВТРасчетнаяБазаСПериодом
		|ИЗ
		|	ВТРасчетнаяБаза КАК РасчетнаяБаза
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО РасчетнаяБаза.РегистраторРазрез = Начисления.Регистратор
		|			И РасчетнаяБаза.НомерСтрокиРазрез = Начисления.НомерСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетнаяБаза.РегистраторРазрез,
		|	РасчетнаяБаза.ВидРасчетаРазрез,
		|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, ДЕНЬ),
		|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ),
		|	Начисления.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетнаяБаза.РезультатБаза) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	СУММА(Начисления.Сумма) КАК Сумма,
		|	СУММА(РасчетнаяБазаСПериодом.РезультатБаза) КАК РезультатБаза
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаСПериодом КАК РасчетнаяБазаСПериодом
		|		ПО Начисления.Регистратор = РасчетнаяБазаСПериодом.Регистратор
		|			И Начисления.Начисление = РасчетнаяБазаСПериодом.ВидРасчета
		|			И Начисления.ДатаНачала = РасчетнаяБазаСПериодом.ДатаНачала
		|			И Начисления.ДатаОкончания = РасчетнаяБазаСПериодом.ДатаОкончания
		|			И Начисления.Сотрудник = РасчетнаяБазаСПериодом.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Регистратор,
		|	Начисления.ДатаНачала,
		|	Начисления.Начисление,
		|	Начисления.ДатаОкончания,
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение";
		
		НачисленияИсключаемыеВПериодКомандировок = Запрос.Выполнить().Выгрузить();
		УдалитьВТ.Добавить("ВТРасчетнаяБазаСПериодом");
		
		КолонкиОтбора = "Сотрудник,Начисление,ДатаНачала,Подразделение";
		ФондОплатыТрудаИСтраховыеВзносы.Индексы.Добавить(КолонкиОтбора);
		Отбор = Новый Структура(КолонкиОтбора);
		
		УдаляемыеСтроки = Новый Соответствие;
		
		Для каждого СтрокаТЗ Из НачисленияИсключаемыеВПериодКомандировок Цикл
			
			Если (СтрокаТЗ.Сумма>0 И СтрокаТЗ.РезультатБаза<0) Или (СтрокаТЗ.Сумма<0 И СтрокаТЗ.РезультатБаза>0) Тогда
				// Суммы разного знака, такие строки не обрабатываем.
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
			СтрокиФОТ = ФондОплатыТрудаИСтраховыеВзносы.НайтиСтроки(Отбор);
			
			Если СтрокаТЗ.Сумма > 0 И СтрокаТЗ.Сумма <= СтрокаТЗ.РезультатБаза
					ИЛИ СтрокаТЗ.Сумма < 0 И СтрокаТЗ.Сумма >= СтрокаТЗ.РезультатБаза Тогда
					
				// Сумма меньше или равна базе, полностью исключаем строку.
					
				Для каждого СтрокаФОТ Из СтрокиФОТ Цикл
					УдаляемыеСтроки.Вставить(СтрокаФОТ);
				КонецЦикла;
				
				Продолжить;
				
			КонецЕсли;
			
			ДоляБазы = (СтрокаТЗ.Сумма - СтрокаТЗ.РезультатБаза)/СтрокаТЗ.Сумма;
			
			ПривестиСуммыФОТКДолеБазы(СтрокиФОТ, ДоляБазы);
			
		КонецЦикла;
		
		ФондОплатыТрудаИСтраховыеВзносы.Индексы.Очистить();
		
		Для каждого ЭлементКоллекции Из УдаляемыеСтроки Цикл
			ФондОплатыТрудаИСтраховыеВзносы.Удалить(ЭлементКоллекции.Ключ);
		КонецЦикла;
		
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокиНачисленийИсключаемыеИзРаспределяемыхПоБазеСреднего(МенеджерВременныхТаблиц, ФондОплатыТрудаИСтраховыеВзносы, ПериодРегистрации, НачисленияИсключаемыеВПериодКомандировок)
	
	СоздатьВТНачисленияБазаОтпуска(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Проверка наличия начислений, которые входят в средний заработок по базовым расчетам.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Начисление КАК Начисление,
	|	НачисленияБазовыеВидыРасчета.ВидРасчета КАК БазовыйВидРасчета
	|ПОМЕСТИТЬ ВТРаспределяемыеПоБазе
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияБазаОтпуска КАК НачисленияБазаОтпуска
	|		ПО Начисления.Начисление = НачисленияБазаОтпуска.Ссылка
	|			И (НачисленияБазаОтпуска.ПоБазовымРасчетам)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
	|		ПО Начисления.Начисление = НачисленияБазовыеВидыРасчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспределяемыеПоБазе КАК РаспределяемыеПоБазе
	|		ПО Начисления.Начисление = РаспределяемыеПоБазе.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспределяемыеПоБазе.Начисление КАК Начисление
	|ИЗ
	|	ВТРаспределяемыеПоБазе КАК РаспределяемыеПоБазе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК НастройкиНачислений
	|		ПО РаспределяемыеПоБазе.Начисление = НастройкиНачислений.Ссылка
	|			И (НастройкиНачислений.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам))";
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Сотрудники, имеющие начисления, отражаемые в учете среднего по базе.
	СотрудникиПоБазе = Результат[1].Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Если СотрудникиПоБазе.Количество() = 0 Тогда
		// Нет начислений, распределяемых по базе.
		Возврат;
	КонецЕсли;
	
	// Проверка наличия начислений, которые входят в состав РК и СН и не входят в расчет среднего.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспределяемыеПоБазе.БазовыйВидРасчета КАК БазовыйВидРасчета
	|ПОМЕСТИТЬ ВТБазовыеВидыРасчета
	|ИЗ
	|	ВТРаспределяемыеПоБазе КАК РаспределяемыеПоБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБазаОтпуска КАК НачисленияБазаОтпуска
	|		ПО РаспределяемыеПоБазе.БазовыйВидРасчета = НачисленияБазаОтпуска.Ссылка
	|ГДЕ
	|	НачисленияБазаОтпуска.ПоБазовымРасчетам ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	ВТБазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
	|		ПО БазовыеВидыРасчета.БазовыйВидРасчета = Начисления.Начисление";
	НетБазовыхНачислений = Запрос.Выполнить().Пустой();
	
	// Проверка наличия в составе базовых начислений РК и СН исключенных в период командировки начислений.
	// Определим переменную как пустую коллекцию.
	НачисленияИсключаемые = Новый Массив;
	Если НачисленияИсключаемыеВПериодКомандировок <> Неопределено 
		И НачисленияИсключаемыеВПериодКомандировок.Количество() > 0 Тогда
		
		НачисленияИсключаемые = НачисленияИсключаемыеВПериодКомандировок.СкопироватьКолонки();
		НачисленияИсключаемыеВПериодКомандировок.Индексы.Добавить("Сотрудник");
		
		Отбор = Новый Структура("Сотрудник");
		Для каждого Сотрудник Из СотрудникиПоБазе Цикл
			Отбор.Сотрудник = Сотрудник;
			НайденныеСтроки = НачисленияИсключаемыеВПериодКомандировок.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НачисленияИсключаемые.Добавить(), СтрокаТЗ);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НетБазовыхНачислений И НачисленияИсключаемые.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ВТНачисленияПоБазе - отобранные из таблицы ВТНачисления
	// входящие в средний по базовым начислениям.
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиПоБазе);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТНачисленияПоБазе
	|ИЗ
	|	ВТНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Сотрудник В(&Сотрудники)
	|	И Начисления.Начисление В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РаспределяемыеПоБазе.Начисление
	|			ИЗ
	|				ВТРаспределяемыеПоБазе КАК РаспределяемыеПоБазе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	НачисленияПоБазе.Сотрудник КАК Сотрудник,
	|	НачисленияПоБазе.Подразделение КАК Подразделение,
	|	НачисленияПоБазе.Начисление КАК Начисление,
	|	НачисленияПоБазе.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоБазе.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТНачисленияПоБазеИзРегистраРасчета
	|ИЗ
	|	ВТНачисленияПоБазе КАК НачисленияПоБазе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО НачисленияПоБазе.Регистратор = Начисления.Регистратор
	|			И НачисленияПоБазе.Сотрудник = Начисления.Сотрудник
	|			И НачисленияПоБазе.Начисление = Начисления.ВидРасчета
	|			И (НачисленияПоБазе.Сумма <> 0)
	|			И НачисленияПоБазе.ДатаНачала = Начисления.ПериодДействияНачало
	|			И (НачисленияПоБазе.ДатаОкончания = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Начисление КАК ВидРасчета,
	|	Начисления.ДатаНачала КАК БазовыйПериодНачало,
	|	Начисления.ДатаОкончания КАК БазовыйПериодКонец
	|ПОМЕСТИТЬ ВТОтборНачислений
	|ИЗ
	|	ВТНачисленияПоБазеИзРегистраРасчета КАК Начисления";
	
	Запрос.Выполнить();
	
	// Получение базы.
	РасчетЗарплатыРасширенный.СоздатьВТРасчетнаяБазаНачисленийПоВременнойТаблицеКаскадно(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетнаяБаза.Регистратор КАК Регистратор,
	|	РасчетнаяБаза.НомерСтроки КАК НомерСтроки,
	|	РасчетнаяБаза.РегистраторРазрез КАК РегистраторРазрез,
	|	РасчетнаяБаза.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, ДЕНЬ) КАК ДатаНачала,
	|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ) КАК ДатаОкончания,
	|	СУММА(РасчетнаяБаза.РезультатБаза) КАК РезультатБаза
	|ПОМЕСТИТЬ ВТРасчетнаяБазаСПериодом
	|ИЗ
	|	ВТРасчетнаяБаза КАК РасчетнаяБаза
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО РасчетнаяБаза.РегистраторРазрез = Начисления.Регистратор
	|			И РасчетнаяБаза.НомерСтрокиРазрез = Начисления.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, ДЕНЬ),
	|	РасчетнаяБаза.Регистратор,
	|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ),
	|	Начисления.Сотрудник,
	|	РасчетнаяБаза.НомерСтроки,
	|	РасчетнаяБаза.РегистраторРазрез,
	|	РасчетнаяБаза.ВидРасчетаРазрез
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетнаяБаза.РезультатБаза) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(РасчетнаяБазаСПериодом.РезультатБаза) КАК РезультатБаза,
	|	РасчетнаяБазаСПериодом.РегистраторРазрез КАК РегистраторРазрез,
	|	РасчетнаяБазаСПериодом.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
	|	РасчетнаяБазаСПериодом.ДатаНачала КАК ДатаНачалаБаза,
	|	РасчетнаяБазаСПериодом.ДатаОкончания КАК ДатаОкончанияБаза,
	|	ВЫБОР
	|		КОГДА НачисленияБазаОтпуска.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВходитВБазуОтпуска
	|ПОМЕСТИТЬ ВТНачисленияПоБазаИБазовые
	|ИЗ
	|	ВТНачисленияПоБазеИзРегистраРасчета КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаСПериодом КАК РасчетнаяБазаСПериодом
	|		ПО Начисления.Регистратор = РасчетнаяБазаСПериодом.Регистратор
	|			И Начисления.НомерСтроки = РасчетнаяБазаСПериодом.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБазаОтпуска КАК НачисленияБазаОтпуска
	|		ПО (РасчетнаяБазаСПериодом.ВидРасчетаРазрез = НачисленияБазаОтпуска.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетнаяБазаСПериодом.РегистраторРазрез,
	|	Начисления.Сотрудник,
	|	Начисления.Регистратор,
	|	ВЫБОР
	|		КОГДА НачисленияБазаОтпуска.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	РасчетнаяБазаСПериодом.ВидРасчетаРазрез,
	|	РасчетнаяБазаСПериодом.ДатаНачала,
	|	РасчетнаяБазаСПериодом.ДатаОкончания,
	|	Начисления.ДатаОкончания,
	|	Начисления.Подразделение,
	|	Начисления.ДатаНачала,
	|	Начисления.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА НастройкиНачислений.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БухучетПоБазовымРасчетам,
	|	СУММА(РасчетнаяБазаСПериодом.РезультатБаза) КАК РезультатБаза
	|ИЗ
	|	ВТНачисленияПоБазеИзРегистраРасчета КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаСПериодом КАК РасчетнаяБазаСПериодом
	|		ПО Начисления.Регистратор = РасчетнаяБазаСПериодом.Регистратор
	|			И Начисления.НомерСтроки = РасчетнаяБазаСПериодом.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК НастройкиНачислений
	|		ПО Начисления.Начисление = НастройкиНачислений.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.ДатаОкончания,
	|	Начисления.ДатаНачала,
	|	Начисления.Сотрудник,
	|	Начисления.Регистратор,
	|	Начисления.Начисление,
	|	Начисления.Подразделение,
	|	ВЫБОР
	|		КОГДА НастройкиНачислений.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетнаяБазаСПериодом.РезультатБаза) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазовыеНачисления.Регистратор КАК Регистратор,
	|	БазовыеНачисления.Сотрудник КАК Сотрудник,
	|	БазовыеНачисления.Подразделение КАК Подразделение,
	|	БазовыеНачисления.Начисление КАК Начисление,
	|	БазовыеНачисления.ДатаНачала КАК ДатаНачала,
	|	БазовыеНачисления.ДатаОкончания КАК ДатаОкончания,
	|	БазовыеНачисления.РезультатБаза КАК РезультатБаза,
	|	БазовыеНачисления.РегистраторРазрез КАК РегистраторРазрез,
	|	БазовыеНачисления.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
	|	БазовыеНачисления.ДатаНачалаБаза КАК ДатаНачалаБаза,
	|	БазовыеНачисления.ДатаОкончанияБаза КАК ДатаОкончанияБаза,
	|	БазовыеНачисления.ВходитВБазуОтпуска КАК ВходитВБазуОтпуска
	|ИЗ
	|	ВТНачисленияПоБазаИБазовые КАК БазовыеНачисления";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	
	// Начисления распределяемые по базе с колонкой РезультатБаза
	НачисленияПоБазе = Результат[КоличествоРезультатов-1].Выгрузить();
	БазовыеНачисления = Результат[КоличествоРезультатов].Выгрузить();
	
	КолонкиОтбора = "Регистратор,Сотрудник,Начисление,ДатаНачала,ДатаОкончания,Подразделение";
	БазовыеНачисления.Индексы.Добавить(КолонкиОтбора);
	ОтборБазы = Новый Структура(КолонкиОтбора);
	
	КолонкиОтбораЧастичноИсключаемых = "Регистратор,Сотрудник,Начисление,ДатаНачала,ДатаОкончания";
	ОтборЧастичноИсключаемых = Новый Структура(КолонкиОтбораЧастичноИсключаемых);
	
	ОбрабатыватьИсключаемыеИзКомандировок = (НачисленияИсключаемые.Количество()>0);
	Если ОбрабатыватьИсключаемыеИзКомандировок Тогда
		НачисленияИсключаемые.Индексы.Добавить(КолонкиОтбораЧастичноИсключаемых);
	КонецЕсли;
	
	КолонкиОтбораФОТ = "Сотрудник,Начисление,ДатаНачала,Подразделение";
	ФондОплатыТрудаИСтраховыеВзносы.Индексы.Добавить(КолонкиОтбораФОТ);
	ОтборФОТ = Новый Структура(КолонкиОтбораФОТ);
	УдаляемыеСтроки = Новый Соответствие;
	
	Для каждого СтрокаНачисления Из НачисленияПоБазе Цикл
		
		РезультатБаза = СтрокаНачисления.РезультатБаза;
		
		СтрокиИсключаемые = Новый Массив;
		СтрокиЧастичноИсключаемые = Новый Массив;
		
		ЗаполнитьЗначенияСвойств(ОтборФОТ, СтрокаНачисления);
		ЗаполнитьЗначенияСвойств(ОтборБазы, СтрокаНачисления);
		БазовыеСтроки = БазовыеНачисления.НайтиСтроки(ОтборБазы);
		
		Для каждого БазоваяСтрока Из БазовыеСтроки Цикл
			
			Если Не БазоваяСтрока.ВходитВБазуОтпуска Тогда
				СтрокиИсключаемые.Добавить(БазоваяСтрока);
			ИначеЕсли ОбрабатыватьИсключаемыеИзКомандировок Тогда
				
				ОтборЧастичноИсключаемых.Регистратор 	= БазоваяСтрока.РегистраторРазрез;
				ОтборЧастичноИсключаемых.Сотрудник 		= БазоваяСтрока.Сотрудник;
				ОтборЧастичноИсключаемых.Начисление 	= БазоваяСтрока.ВидРасчетаРазрез;
				ОтборЧастичноИсключаемых.ДатаНачала 	= БазоваяСтрока.ДатаНачалаБаза;
				ОтборЧастичноИсключаемых.ДатаОкончания 	= БазоваяСтрока.ДатаОкончанияБаза;
				
				НайденныеСтроки = НачисленияИсключаемые.НайтиСтроки(ОтборЧастичноИсключаемых);
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					СтрокиЧастичноИсключаемые.Добавить(НайденнаяСтрока);
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЦикла;
		
		СуммаИсключаемаяИзБазы = 0;
		Для каждого СтрокаИсключаемая Из СтрокиИсключаемые Цикл
			СуммаИсключаемаяИзБазы = СуммаИсключаемаяИзБазы + СтрокаИсключаемая.РезультатБаза;
		КонецЦикла;
		
		Для каждого СтрокаИсключаемая Из СтрокиЧастичноИсключаемые Цикл
			СуммаИсключаемаяИзБазы = СуммаИсключаемаяИзБазы + СтрокаИсключаемая.РезультатБаза;
		КонецЦикла;
		
		// Доля расчетной базы, включаемая в расчет среднего.
		ДоляБазы = ?(РезультатБаза=0,0,(РезультатБаза - СуммаИсключаемаяИзБазы)/РезультатБаза);
		
		Если ДоляБазы = 1 Тогда
			Продолжить;
		ИначеЕсли ДоляБазы = 0 Тогда
			
			СтрокиФОТ = ФондОплатыТрудаИСтраховыеВзносы.НайтиСтроки(ОтборФОТ);
			Для каждого СтрокаФОТ Из СтрокиФОТ Цикл
				УдаляемыеСтроки.Вставить(СтрокаФОТ);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		// Обработка строк у которых ДоляБазы больше 0 и меньше 1.
		
		СтрокиФОТ = ФондОплатыТрудаИСтраховыеВзносы.НайтиСтроки(ОтборФОТ);
		
		ПривестиСуммыФОТКДолеБазы(СтрокиФОТ, ДоляБазы);
	
	КонецЦикла;
	
	ФондОплатыТрудаИСтраховыеВзносы.Индексы.Очистить();
	
	Для каждого ЭлементКоллекции Из УдаляемыеСтроки Цикл
		ФондОплатыТрудаИСтраховыеВзносы.Удалить(ЭлементКоллекции.Ключ);
	КонецЦикла;	

КонецПроцедуры

Процедура ПривестиСуммыФОТКДолеБазы(СтрокиФОТ, ДоляБазы)

	ФондОплатыТруда 	= 0;
	СтраховыеВзносы 	= 0;
	ФССНесчастныеСлучаи = 0;
	
	СтрокаДляПогрешностиФОТ 	= Неопределено;
	СтрокаДляПогрешностиВзносы 	= Неопределено;
	СтрокаДляПогрешностиФСС 	= Неопределено;
	МаксимальноеЗначениеФОТ		= 0;
	МаксимальноеЗначениеВзносы 	= 0;
	МаксимальноеЗначениеФСС 	= 0;
	
	Для каждого СтрокаФОТ Из СтрокиФОТ Цикл
		
		ФондОплатыТруда 	= ФондОплатыТруда + СтрокаФОТ.ФондОплатыТруда;
		СтраховыеВзносы 	= СтраховыеВзносы + СтрокаФОТ.СтраховыеВзносы;
		ФССНесчастныеСлучаи = ФССНесчастныеСлучаи + СтрокаФОТ.ФССНесчастныеСлучаи;
		
		АбсолютноеЗначение = ?(СтрокаФОТ.ФондОплатыТруда > 0, СтрокаФОТ.ФондОплатыТруда, -СтрокаФОТ.ФондОплатыТруда);
		Если МаксимальноеЗначениеФОТ < АбсолютноеЗначение Тогда
			МаксимальноеЗначениеФОТ = АбсолютноеЗначение;
			СтрокаДляПогрешностиФОТ = СтрокаФОТ;
		КонецЕсли;
		
		АбсолютноеЗначение = ?(СтрокаФОТ.СтраховыеВзносы > 0, СтрокаФОТ.СтраховыеВзносы, -СтрокаФОТ.СтраховыеВзносы);
		Если МаксимальноеЗначениеВзносы < АбсолютноеЗначение Тогда
			МаксимальноеЗначениеВзносы = АбсолютноеЗначение;
			СтрокаДляПогрешностиВзносы = СтрокаФОТ;
		КонецЕсли;
		
		АбсолютноеЗначение = ?(СтрокаФОТ.ФССНесчастныеСлучаи > 0, СтрокаФОТ.ФССНесчастныеСлучаи, -СтрокаФОТ.ФССНесчастныеСлучаи);
		Если МаксимальноеЗначениеФСС < АбсолютноеЗначение Тогда
			МаксимальноеЗначениеФСС = АбсолютноеЗначение;
			СтрокаДляПогрешностиФСС = СтрокаФОТ;
		КонецЕсли;
		
	КонецЦикла;
	
	ФондОплатыТруда 	= ОКР(ФондОплатыТруда * ДоляБазы, 2);
	СтраховыеВзносы 	= ОКР(СтраховыеВзносы * ДоляБазы, 2);
	ФССНесчастныеСлучаи = ОКР(ФССНесчастныеСлучаи * ДоляБазы, 2);
	
	НовыйФондОплатыТруда 	= 0;
	НовыйСтраховыеВзносы 	= 0;
	НовыйФССНесчастныеСлучаи = 0;
	
	Для каждого СтрокаФОТ Из СтрокиФОТ Цикл
		
		СтрокаФОТ.ФондОплатыТруда = ОКР(СтрокаФОТ.ФондОплатыТруда * ДоляБазы, 2);
		НовыйФондОплатыТруда = НовыйФондОплатыТруда + СтрокаФОТ.ФондОплатыТруда;
		
		СтрокаФОТ.СтраховыеВзносы = ОКР(СтрокаФОТ.СтраховыеВзносы * ДоляБазы, 2);
		НовыйСтраховыеВзносы = НовыйСтраховыеВзносы + СтрокаФОТ.СтраховыеВзносы;
		
		СтрокаФОТ.ФССНесчастныеСлучаи = ОКР(СтрокаФОТ.ФССНесчастныеСлучаи * ДоляБазы, 2);
		НовыйФССНесчастныеСлучаи = НовыйФССНесчастныеСлучаи + СтрокаФОТ.ФССНесчастныеСлучаи;
		
	КонецЦикла;
	
	Если НовыйФондОплатыТруда <> ФондОплатыТруда Тогда
		СтрокаДляПогрешностиФОТ.ФондОплатыТруда = СтрокаДляПогрешностиФОТ.ФондОплатыТруда + ФондОплатыТруда - НовыйФондОплатыТруда;
	КонецЕсли;
	
	Если НовыйСтраховыеВзносы <> СтраховыеВзносы Тогда
		СтрокаДляПогрешностиВзносы.СтраховыеВзносы = СтрокаДляПогрешностиФОТ.СтраховыеВзносы + СтраховыеВзносы - НовыйСтраховыеВзносы;
	КонецЕсли;
	
	Если НовыйФССНесчастныеСлучаи <> ФССНесчастныеСлучаи Тогда
		СтрокаДляПогрешностиФСС.ФССНесчастныеСлучаи = СтрокаДляПогрешностиФОТ.ФССНесчастныеСлучаи + ФССНесчастныеСлучаи - НовыйФССНесчастныеСлучаи;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПараметрыПолученияФОТОрганизацийДляОценочныхОбязательствОтпусков(Организации, Период, ТаблицаПараметров) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТНачисленияБазаОтпуска(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияБазаОтпуска.Ссылка КАК Ссылка
	|ИЗ
	|	ВТНачисленияБазаОтпуска КАК НачисленияБазаОтпуска";
	БазаОтпускаПоСреднемуЗаработку = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УчитыватьОсобенностиПредприятия = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		УчитыватьОсобенностиПредприятия = МодульГосударственнаяСлужба.УчитыватьОсобенностиПредприятияПриРасчетеОценочныхОбязательствОтпусков();
	КонецЕсли;
	
	Если Не УчитыватьОсобенностиПредприятия Тогда
		
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.Сотрудники = Неопределено;
		НоваяСтрока.БазовыеНачисления = БазаОтпускаПоСреднемуЗаработку;
		
	Иначе
		
		// Получим всех сотрудников, по которым собирается ФОТ текущего месяца.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоСотрудникам.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияПоСотрудникам
		|ГДЕ
		|	НачисленияПоСотрудникам.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НачисленияПоСотрудникам.Организация В(&Организации)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтраховыеВзносыПоФизическимЛицам.Сотрудник
		|ИЗ
		|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносыПоФизическимЛицам
		|ГДЕ
		|	СтраховыеВзносыПоФизическимЛицам.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СтраховыеВзносыПоФизическимЛицам.Организация В(&Организации)";
		
		УстановитьПривилегированныйРежим(Истина);
		СотрудникиДляРасчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		УстановитьПривилегированныйРежим(Ложь);
		
		// Получим таблицу, в которой указаны способы расчета ФОТ для каждого сотрудника.
		УстановитьПривилегированныйРежим(Истина);
		СотрудникиПоСпособамРасчета = СотрудникиПоСпособамРасчетаОбязательствОтпусков(СотрудникиДляРасчета, Период);
		УстановитьПривилегированныйРежим(Истина);
		
		СотрудникиПоСреднемуЗаработку  = СотрудникиПоСпособамРасчета.Скопировать(Новый Структура("РасчетПоСреднемуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
		Если СотрудникиПоСреднемуЗаработку.Количество() > 0 Тогда
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.Сотрудники = СотрудникиПоСреднемуЗаработку;
			НоваяСтрока.БазовыеНачисления = БазаОтпускаПоСреднемуЗаработку;
		КонецЕсли;
		
		СотрудникиПоСохраняемомуЗаработку = СотрудникиПоСпособамРасчета.Скопировать(Новый Структура("РасчетПоСохраняемомуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
		Если СотрудникиПоСохраняемомуЗаработку.Количество() > 0 Тогда
			
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.Сотрудники = СотрудникиПоСохраняемомуЗаработку;
			
			БазовыеНачисления = Новый Массив;
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				МодульРасчетДенежногоСодержания = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				БазовыеНачисления = МодульРасчетДенежногоСодержания.БазаОтпускаПоСохраняемомуЗаработкуДляОценочныхОбязательствОтпусков();
			КонецЕсли;
			НоваяСтрока.БазовыеНачисления = БазовыеНачисления;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПолученияФОТСотрудниковДляОценочныхОбязательствОтпусков(СотрудникиДляРасчета, Период, ПараметрыПолученияФОТ) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТНачисленияБазаОтпуска(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияБазаОтпуска.Ссылка КАК Ссылка
	|ИЗ
	|	ВТНачисленияБазаОтпуска КАК НачисленияБазаОтпуска";
	БазаОтпускаПоСреднемуЗаработку = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПараметрыПолученияФОТ.БазаОтпускаПоСреднемуЗаработку = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(БазаОтпускаПоСреднемуЗаработку);
	
	УчитыватьОсобенностиПредприятия = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		УчитыватьОсобенностиПредприятия = МодульГосударственнаяСлужба.УчитыватьОсобенностиПредприятияПриРасчетеОценочныхОбязательствОтпусков();
	КонецЕсли;
	
	Если Не УчитыватьОсобенностиПредприятия Тогда
		
		ПараметрыПолученияФОТ.Сотрудники = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(СотрудникиДляРасчета);
		
	Иначе
		
		// Получим таблицу, в которой указаны способы расчета ФОТ для каждого сотрудника.
		СотрудникиПоСпособамРасчета = СотрудникиПоСпособамРасчетаОбязательствОтпусков(СотрудникиДляРасчета, Период);
		
		СотрудникиПоСреднемуЗаработку  = СотрудникиПоСпособамРасчета.Скопировать(Новый Структура("РасчетПоСреднемуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
		Если СотрудникиПоСреднемуЗаработку.Количество() > 0 Тогда
			ПараметрыПолученияФОТ.Сотрудники = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(СотрудникиПоСреднемуЗаработку);
		КонецЕсли;
		
		СотрудникиПоСохраняемомуЗаработку = СотрудникиПоСпособамРасчета.Скопировать(Новый Структура("РасчетПоСохраняемомуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
		Если СотрудникиПоСохраняемомуЗаработку.Количество() > 0 Тогда
			
			БазовыеНачисления = Новый Соответствие;
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				МодульРасчетДенежногоСодержания = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				БазовыеНачисления = МодульРасчетДенежногоСодержания.БазаОтпускаПоСохраняемомуЗаработкуДляОценочныхОбязательствОтпусков();
				БазовыеНачисления = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(БазовыеНачисления);
			КонецЕсли;
			ПараметрыПолученияФОТ.БазаОтпускаПоСохраняемомуЗаработку = БазовыеНачисления;
			
			Для каждого Сотрудник Из СотрудникиПоСохраняемомуЗаработку Цикл
				ПараметрыПолученияФОТ.Сотрудники.Вставить(Сотрудник, Ложь);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОтпускахСотрудниковДляОценочныхОбязательств(СведенияОбОтпусках, СотрудникиДляОбработки, Организация, Период) Экспорт
	
	УчитыватьОсобенностиПредприятия = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		УчитыватьОсобенностиПредприятия = МодульГосударственнаяСлужба.УчитыватьОсобенностиПредприятияПриРасчетеОценочныхОбязательствОтпусков();
	КонецЕсли;
	
	СотрудникиДляРасчета = СотрудникиДляОбработки;
	
	Если УчитыватьОсобенностиПредприятия Тогда
		ТаблицаСотрудников = СотрудникиПоСпособамРасчетаОбязательствОтпусков(СотрудникиДляОбработки, Период);
		СотрудникиДляРасчета = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиДляРасчета);
	Запрос.УстановитьПараметр("ПериодНачисления", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	СУММА(ФактическиеОтпуска.Количество) КАК ОтпускАвансом
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.Сотрудник В(&Сотрудники)
	|	И НАЧАЛОПЕРИОДА(ФактическиеОтпуска.ПериодНачисления, МЕСЯЦ) = &ПериодНачисления
	|	И ФактическиеОтпуска.Период > &КонецМесяца
	|	И НЕ ФактическиеОтпуска.ВидЕжегодногоОтпуска.ОтпускБезОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеОтпуска.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(ФактическиеОтпуска.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И НЕ ВидыОтпусков.ОтпускБезОплаты";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОтпускаАвансом = Новый Соответствие;
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтпускаАвансом.Вставить(Выборка.Сотрудник, Выборка.ОтпускАвансом);
	КонецЦикла;
	
	ВидыОтпусков = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОстаткиОтпусковСотрудников = ОстаткиОтпусков.ОстаткиОтпусковСотрудниковНаДату(СотрудникиДляРасчета, КонецМесяца(Период), ВидыОтпусков);
	ОстаткиОтпусковСотрудников.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	
	Если УчитыватьОсобенностиПредприятия Тогда
		СотрудникиПоСреднемуЗаработку = ТаблицаСотрудников.Скопировать(Новый Структура("РасчетПоСреднемуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
	Иначе
		СотрудникиПоСреднемуЗаработку = СотрудникиДляРасчета;
	КонецЕсли;
	СпособыРасчетаОтпусковСотрудников = ОстаткиОтпусков.СпособыРасчетаОтпусковСотрудников(СотрудникиПоСреднемуЗаработку, КонецМесяца(Период));
	
	// Дата на которую рассчитывается средний и/или сохраняемый заработок,
	// первое число месяца, следующего за месяцем указанном в параметре Период.
	ДатаСобытия = НачалоМесяца(ДобавитьМесяц(Период, 1));
	
	Для каждого Сотрудник Из СотрудникиПоСреднемуЗаработку Цикл
		
		Отбор.Сотрудник = Сотрудник;
		
		НоваяСтрока = СведенияОбОтпусках.Добавить();
		НоваяСтрока.Сотрудник 		= Сотрудник;
		НоваяСтрока.ОтпускАвансом 	= ОтпускаАвансом[Сотрудник];
		
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.СпособРасчетаОтпуска = СпособыРасчетаОтпусковСотрудников[Сотрудник];
		НоваяСтрока.СреднийЗаработок = УчетСреднегоЗаработка.СреднийЗаработок(Сотрудник, ДатаСобытия, ДополнительныеПараметры);
		
		НайденныеСтроки = ОстаткиОтпусковСотрудников.НайтиСтроки(Отбор);
		ОстатокОтпусков = 0;
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОстатокОтпусков = НайденныеСтроки[0].КоличествоДней;
		КонецЕсли;
		НоваяСтрока.ОстатокОтпусков = ОстатокОтпусков;
		
	КонецЦикла;
	
	Если УчитыватьОсобенностиПредприятия Тогда
		
		СохраняемыйЗаработок = Новый Соответствие;
		СотрудникиПоСохраняемомуЗаработку = ТаблицаСотрудников.Скопировать(Новый Структура("РасчетПоСохраняемомуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			МодульРасчетДенежногоСодержания = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			СохраняемыйЗаработок = МодульРасчетДенежногоСодержания.СохраняемыйЗаработокСотрудниковДляОбязательствПоОтпускам(СотрудникиПоСохраняемомуЗаработку, Организация, Период);
		КонецЕсли;
		
		Для каждого Сотрудник Из СотрудникиПоСохраняемомуЗаработку Цикл
			
			Отбор.Сотрудник = Сотрудник;
			
			НоваяСтрока = СведенияОбОтпусках.Добавить();
			НоваяСтрока.Сотрудник 			= Сотрудник;
			НоваяСтрока.ОтпускАвансом 		= ОтпускаАвансом[Сотрудник];
			НоваяСтрока.СреднийЗаработок 	= СохраняемыйЗаработок[Сотрудник];
			НоваяСтрока.РасчетПоСохраняемомуЗаработку = Истина;
			
			НайденныеСтроки = ОстаткиОтпусковСотрудников.НайтиСтроки(Отбор);
			ОстатокОтпусков = 0;
			Если НайденныеСтроки.Количество() > 0 Тогда
				ОстатокОтпусков = НайденныеСтроки[0].КоличествоДней;
			КонецЕсли;
			НоваяСтрока.ОстатокОтпусков = ОстатокОтпусков;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция СотрудникиПоСпособамРасчетаОбязательствОтпусков(СотрудникиДляРасчета, Период)
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник");
	ТаблицаСотрудников.Колонки.Добавить("РасчетПоСреднемуЗаработку", 	 Новый ОписаниеТипов("Булево"));
	ТаблицаСотрудников.Колонки.Добавить("РасчетПоСохраняемомуЗаработку", Новый ОписаниеТипов("Булево"));
	
	ЗапрашиваемыеДанные = "ВидДоговора,ВидДолжностиГосударственнойСлужбы,ЯвляетсяСудьей,ЯвляетсяВоеннослужащим";
	ДатаСобытия = КонецМесяца(Период);
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиДляРасчета, ЗапрашиваемыеДанные, ДатаСобытия);
	
	СтрокиДляДополнительнойОбработки = Новый Массив;
	Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
		
		Если СтрокаТЗ.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор Тогда
			НоваяСтрока = ТаблицаСотрудников.Добавить();
			НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
			НоваяСтрока.РасчетПоСреднемуЗаработку = Истина;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ВидДоговора) Тогда
			СтрокиДляДополнительнойОбработки.Добавить(СтрокаТЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДляДополнительнойОбработки.Количество() > 0 И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДополнитьТаблицуСотрудниковПоСпособамРасчетаОбязательствОтпусков(ТаблицаСотрудников, СтрокиДляДополнительнойОбработки);
	КонецЕсли; 
	
	Возврат ТаблицаСотрудников;

КонецФункции 

// Получает настройки бухучета сотрудников для расчета оценочных обязательств.
//
// Параметры:
// 	ТаблицаСотрудников - ТаблицаЗначений - содержит колонки
// 			* Сотрудник
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 	Организация - СправочникСсылка.Организации.
// 	Период - Дата.
//
// Возвращаемое значение:
// 	ТаблицаЗначений
//
Функция НастройкиБухучетаДляРасчетаОбязательств(ТаблицаСотрудников, Организация, Период) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	&Период КАК Период,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК Таблица";
	Запрос.Выполнить();
	
	СоздатьВТНастройкиБухучетаДляРаспределенияПоУмолчанию(МенеджерВТ, "ВТСотрудники");
	
	Запрос.УстановитьПараметр("ЕстьЕНВД", ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, Период));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиБухучета.Сотрудник КАК Сотрудник,
	|	НастройкиБухучета.Подразделение КАК Подразделение,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|				И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД
	|ИЗ
	|	ВТНастройкиБухучета КАК НастройкиБухучета";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции 

Функция НастройкиБухучетаСотрудниковДляРасчетаОбязательств(Организация, Период, Сотрудники)

	НастройкиБухучетаСотрудников = ОтражениеЗарплатыВБухучете.НоваяТаблицаНастройкиБухучетаСотрудников();
	
	КадровыеДанныеСтрока = "Подразделение,ТерриторияВыполненияРаботВОрганизации";
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.Организация      = Организация;
		ПараметрыПолучения.НачалоПериода    = НачалоМесяца(Период);
		ПараметрыПолучения.ОкончаниеПериода = КонецМесяца(Период);
		ПараметрыПолучения.Вставить("КадровыеДанные", КадровыеДанныеСтрока);
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	Иначе
		ТаблицаСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, КадровыеДанныеСтрока, КонецМесяца(Период));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Период КАК Период,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Таблица.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК Таблица";
	Запрос.Выполнить();
	
	СоздатьВТНастройкиБухучетаСотрудников(Организация, Период, Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиБухучета.Организация КАК Организация,
	|	НастройкиБухучета.Сотрудник КАК Сотрудник,
	|	НастройкиБухучета.Подразделение КАК Подразделение,
	|	НастройкиБухучета.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НастройкиБухучета.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НастройкиБухучета.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	НастройкиБухучета.ДоляРаспределения КАК ДоляРаспределения
	|ИЗ
	|	ВТНастройкиБухучетаСотрудников КАК НастройкиБухучета";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НастройкиБухучетаСотрудников.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат НастройкиБухучетаСотрудников;

КонецФункции

#КонецОбласти

#Область ОбслуживаниеРаспределенияРезультатов

Процедура СоздатьВТБухучетНачисленийСторно(МенеджерВременныхТаблиц, ИмяВТНачисления, СтрокиБухучетСторноНачислений)

	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	РаботаВБюджетномУчреждении 		 = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ИспользоватьСтатьиФинансирования И СтрокиБухучетСторноНачислений.Количество() > 0 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Организация,
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Сумма КАК Результат,
		|	Начисления.ДокументОснование,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ТерриторияВыполненияРаботВОрганизации,
		|	Начисления.Сторно,
		|	Начисления.ФиксСторно
		|ИЗ
		|	ВТНачисленияДляОтраженияВБухучете КАК Начисления
		|ГДЕ
		|	Начисления.Сторно
		|	И НЕ Начисления.ФиксСторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Организация,
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Сумма КАК Результат,
		|	Начисления.ДокументОснование,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ТерриторияВыполненияРаботВОрганизации,
		|	Начисления.Сторно,
		|	Начисления.ФиксСторно
		|ИЗ
		|	ВТНачисленияДляОтраженияВБухучете КАК Начисления
		|ГДЕ
		|	Начисления.ФиксСторно";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИмяВТНачисления);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаНачислений = РезультатЗапроса[0].Выгрузить();
		БухучетНачисленийСторно = БухучетНачисленийСторноИзИсходнойТаблицы(ТаблицаНачислений, СтрокиБухучетСторноНачислений, ИспользоватьСтатьиФинансирования, РаботаВБюджетномУчреждении, Ложь);
		
		ТаблицаНачислений = РезультатЗапроса[1].Выгрузить();
		БухучетНачисленийФиксСторно = БухучетНачисленийСторноИзИсходнойТаблицы(ТаблицаНачислений, СтрокиБухучетСторноНачислений, ИспользоватьСтатьиФинансирования, РаботаВБюджетномУчреждении, Истина);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(БухучетНачисленийФиксСторно, БухучетНачисленийСторно);
		
		Запрос.УстановитьПараметр("БухучетНачисленийСторно", БухучетНачисленийСторно);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БухучетНачисленийСторно.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БухучетНачисленийСторно.Организация КАК Организация,
		|	БухучетНачисленийСторно.Сотрудник КАК Сотрудник,
		|	БухучетНачисленийСторно.ФизическоеЛицо КАК ФизическоеЛицо, 
		|	БухучетНачисленийСторно.Подразделение КАК Подразделение,
		|	БухучетНачисленийСторно.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачисленийСторно.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачисленийСторно.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачисленийСторно.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачисленийСторно.Результат КАК Сумма,
		|	БухучетНачисленийСторно.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БухучетНачисленийСторно.ДатаНачала КАК ДатаНачала,
		|	БухучетНачисленийСторно.ДатаОкончания КАК ДатаОкончания,
		|	БухучетНачисленийСторно.Начисление КАК Начисление,
		|	БухучетНачисленийСторно.Территория КАК Территория
		|ПОМЕСТИТЬ ВТБухучетНачисленийСторноВременная
		|ИЗ
		|	&БухучетНачисленийСторно КАК БухучетНачисленийСторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетНачисленийСторно.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БухучетНачисленийСторно.Организация КАК Организация,
		|	БухучетНачисленийСторно.Сотрудник КАК Сотрудник,
		|	БухучетНачисленийСторно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БухучетНачисленийСторно.Подразделение КАК Подразделение,
		|	БухучетНачисленийСторно.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачисленийСторно.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачисленийСторно.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачисленийСторно.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачисленийСторно.Сумма КАК Сумма,
		|	БухучетНачисленийСторно.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БухучетНачисленийСторно.ДатаНачала КАК ДатаНачала,
		|	БухучетНачисленийСторно.ДатаОкончания КАК ДатаОкончания,
		|	БухучетНачисленийСторно.Начисление КАК Начисление,
		|	ВЫБОР
		|		КОГДА БухучетНачисленийСторно.Территория = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|		ИНАЧЕ БухучетНачисленийСторно.Территория
		|	КОНЕЦ КАК Территория
		|ПОМЕСТИТЬ ВТБухучетНачисленийСторно
		|ИЗ
		|	ВТБухучетНачисленийСторноВременная КАК БухучетНачисленийСторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБухучетНачисленийСторноВременная";
		Запрос.Выполнить();
		
	Иначе
		
		СоздатьПустуюВТБухучетНачислений(Запрос, "ВТБухучетНачисленийСторно");
		
	КонецЕсли;

КонецПроцедуры

Функция БухучетНачисленийСторноИзИсходнойТаблицы(ТаблицаНачислений, СтрокиНачисленийСторно, ИспользоватьСтатьиФинансирования, РаботаВБюджетномУчреждении, ФиксСторно)

	ТаблицаРаспределение = НоваяТаблицаБухучетНачислений();
	
	Если ТаблицаНачислений.Количество()=0 Тогда
		Возврат ТаблицаРаспределение;
	КонецЕсли;
	
	// Параметры для проверки результатов распределения.
	ПараметрыДляПроверки = ПараметрыДляПроверкиРезультатовРаспределенияНачислений();
	ПараметрыДляПроверки.ПроверяемыеПоля.СтатьяФинансирования = ИспользоватьСтатьиФинансирования;
	ПараметрыДляПроверки.ПроверяемыеПоля.СтатьяРасходов       = РаботаВБюджетномУчреждении;
	
	Для каждого СтрокаТЗ Из ТаблицаНачислений Цикл
		
		РезультатыРаспределения = СтрокиНачисленийСторно[СтрокаТЗ.ИдентификаторСтроки];
		Если РезультатыРаспределения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// отберем строки распределения по территории 
		КоллекцияРаспределения = НоваяТаблицаРаспределениеРезультатовНачислений();
		Для каждого СтрокаРаспределения Из РезультатыРаспределения Цикл
			Если (СтрокаРаспределения.Территория = СтрокаТЗ.ТерриторияВыполненияРаботВОрганизации)
				Или (НЕ ЗначениеЗаполнено(СтрокаРаспределения.Территория) И Не ЗначениеЗаполнено(СтрокаТЗ.ТерриторияВыполненияРаботВОрганизации)) Тогда
				НоваяСтрока = КоллекцияРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтроки;
			КонецЕсли;
		КонецЦикла;
		
		Если КоллекцияРаспределения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ФиксСторно Тогда
			ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаТЗ.Результат, КоллекцияРаспределения, "Результат");
		КонецЕсли;
		
		// Выполним проверку результата распределения
		ВидОперации = ПараметрыДляПроверки.НачислениеУдержаниеВидОперации[СтрокаТЗ.Начисление];
		ПараметрыДляПроверки.ПроверяемыеПоля.СпособОтраженияЗарплатыВБухучете = ПараметрыДляПроверки.ВидыОперацийПособия.Найти(ВидОперации) = Неопределено;
		ЕстьОшибкиРаспределения = РезультатРаспределенияСодержитОшибки(СтрокаТЗ.Результат, КоллекцияРаспределения, ПараметрыДляПроверки.ПроверяемыеПоля);
		
		Если ЕстьОшибкиРаспределения Тогда
			
			Если ФиксСторно Тогда
				
				// попробуем привести результат распределения к сумме строки
				ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаТЗ.Результат, КоллекцияРаспределения, "Результат");
				Если РезультатРаспределенияСодержитОшибки(СтрокаТЗ.Результат, КоллекцияРаспределения, ПараметрыДляПроверки.ПроверяемыеПоля) Тогда
					Продолжить;	
				КонецЕсли;
				
			Иначе
				Продолжить;	
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из КоллекцияРаспределения Цикл
			
			НоваяСтрока = ТаблицаРаспределение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРаспределение;
	
КонецФункции

Процедура ЗаполнитьКодСтатьиФинансирования(Таблица, Коды)

	Для каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.КодСтатьиФинансирования = Коды[СтрокаТЗ.СтатьяФинансирования];
	КонецЦикла;	

КонецПроцедуры

Процедура УпорядочитьТаблицуРаспределениеУдержаний(ТаблицаУдержаний)
	
	Если ТаблицаУдержаний.Количество() > 0 Тогда
		
		КолонкиСортировки = 
		"ИдентификаторСтроки,
		|ВидУдержания,
		|Сотрудник,
		|Подразделение,
		|СтатьяФинансирования,
		|СтатьяРасходов";
		
		ТаблицаУдержаний.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура СоздатьВТБухучетНачисленийРанееНачислено(ТаблицаРанееНачислено, ИсходныеДанные)
	
	// Соответствие идентификаторов таблицы Начислений и Бухучета.
	СоответствиеИдентификаторов = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТаблицаРанееНачислено Цикл
		СоответствиеИдентификаторов.Вставить(СтрокаТЗ.ИдентификаторСтрокиНачисления, СтрокаТЗ.ИдентификаторСтроки);
	КонецЦикла;
	
	КоэффициентыРанееНачисленныхСумм = ИсходныеДанные.МенеджерРасчетаЗарплаты.КоэффициентыРанееНачисленныхСумм();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КоэффициентыРанееНачисленныхСумм, "ИдентификаторСтроки");
	ОтборКоэффициентов = Новый Структура("ИдентификаторСтроки");
		
	ФильтрБухучета = Новый ТаблицаЗначений;
	ФильтрБухучета.Колонки.Добавить("Регистратор", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
	ФильтрБухучета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ФильтрБухучета.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	// для корректировки перерасчетов в разовых начислениях
	ФильтрБухучета.Колонки.Добавить("ЗаписьТекущегоРегистратора", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаНачисления Из ТаблицаРанееНачислено Цикл
		
		ОтборКоэффициентов.ИдентификаторСтроки = СтрокаНачисления.ИдентификаторСтрокиНачисления;
		СтрокиКоэффициентов = КоэффициентыРанееНачисленныхСумм.НайтиСтроки(ОтборКоэффициентов);
		
		Для Каждого СтрокаКоэффициентов Из СтрокиКоэффициентов Цикл
			Если СтрокаКоэффициентов.Регистратор <> ИсходныеДанные.РегистраторТекущегоРасчета Тогда
				СтрокаФильтра = ФильтрБухучета.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаФильтра, СтрокаКоэффициентов);
				// ИдентификаторСтрокиБазы - идентификатор строки ранее начисленного.
				СтрокаФильтра.ИдентификаторСтроки = СтрокаКоэффициентов.ИдентификаторСтрокиБазы;
				СтрокаФильтра.Подразделение = СтрокаНачисления.Подразделение;
				СтрокаФильтра.ЗаписьТекущегоРегистратора = Не ЗначениеЗаполнено(СтрокаКоэффициентов.Регистратор);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ФильтрБухучета.Свернуть("Регистратор, ИдентификаторСтроки, Подразделение, ЗаписьТекущегоРегистратора");
	
	ИдентификаторыСтрок = ТаблицаРанееНачислено.ВыгрузитьКолонку("ИдентификаторСтроки");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ИсходныеДанные.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФильтрБухУчета", ФильтрБухУчета); 
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФильтрБухУчета.Регистратор КАК Регистратор,
	|	ФильтрБухУчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ФильтрБухУчета.Подразделение КАК Подразделение,
	|	ФильтрБухУчета.ЗаписьТекущегоРегистратора КАК ЗаписьТекущегоРегистратора
	|ПОМЕСТИТЬ ВТФильтрБухУчета
	|ИЗ
	|	&ФильтрБухУчета КАК ФильтрБухУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФильтрБухУчета.Регистратор КАК Регистратор,
	|	ФильтрБухУчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА БухучетНачислений.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ФильтрБухУчета.Подразделение
	|		ИНАЧЕ БухучетНачислений.ПодразделениеУчетаЗатрат
	|	КОНЕЦ КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.Территория КАК Территория,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.Результат КАК Результат
	|ИЗ
	|	ВТФильтрБухУчета КАК ФильтрБухУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеРезультатовНачислений КАК БухучетНачислений
	|		ПО ФильтрБухУчета.Регистратор = БухучетНачислений.Регистратор
	|			И ФильтрБухУчета.ИдентификаторСтроки = БухучетНачислений.ИдентификаторСтроки
	|			И (НЕ ФильтрБухУчета.ЗаписьТекущегоРегистратора)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФильтрБухУчета.Регистратор,
	|	ФильтрБухУчета.ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА БухучетНачислений.ПодразделениеУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ФильтрБухУчета.Подразделение
	|		ИНАЧЕ БухучетНачислений.ПодразделениеУчетаЗатрат
	|	КОНЕЦ,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов,
	|	БухучетНачислений.ОблагаетсяЕНВД,
	|	БухучетНачислений.Сумма
	|ИЗ
	|	ВТФильтрБухУчета КАК ФильтрБухУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетНачисленийВыходнаяТаблица КАК БухучетНачислений
	|		ПО ФильтрБухУчета.ИдентификаторСтроки = БухучетНачислений.ИдентификаторСтроки
	|			И (ФильтрБухУчета.ЗаписьТекущегоРегистратора)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|		ПО (БухучетНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.Сумма КАК Результат,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК Территория
	|ИЗ
	|	ВТБухучетНачисленийВыходнаяТаблица КАК БухучетНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДляОтраженияВБухучете КАК Начисления
	|		ПО БухучетНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки
	|ГДЕ
	|	БухучетНачислений.ИдентификаторСтроки В(&ИдентификаторыСтрок)";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	
	БухучетТекущегоРасчета = Результат[КоличествоРезультатов].Выгрузить();
	БухучетТекущегоРасчета.Индексы.Добавить("ИдентификаторСтроки");
	ОтборТекущегоРасчета = Новый Структура("ИдентификаторСтроки");
	
	БухучетБазовыхНачислений = Результат[КоличествоРезультатов-1].Выгрузить();
	БухучетБазовыхНачислений.Индексы.Добавить("Регистратор, ИдентификаторСтроки");
	ОтборРаспределения = Новый Структура("Регистратор, ИдентификаторСтроки");
	
	БухучетНачислений = БухучетТекущегоРасчета.СкопироватьКолонки();
	
	ИспользоватьОбособленныеТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", ИсходныеДанные.Организация));
	
	Для Каждого СтрокаНачисления Из ТаблицаРанееНачислено Цикл
		
		ИзмеренияРаспределения = Новый Массив;
		Коэффициенты = Новый Массив;
		
		ОтборКоэффициентов.ИдентификаторСтроки = СтрокаНачисления.ИдентификаторСтрокиНачисления;
		СтрокиКоэффициентов = КоэффициентыРанееНачисленныхСумм.НайтиСтроки(ОтборКоэффициентов);
		
		Для Каждого СтрокаКоэффициентов Из СтрокиКоэффициентов Цикл
			
			Если СтрокаКоэффициентов.Регистратор = ИсходныеДанные.РегистраторТекущегоРасчета Тогда
				ОтборТекущегоРасчета.ИдентификаторСтроки = СоответствиеИдентификаторов[СтрокаКоэффициентов.ИдентификаторСтрокиБазы];
				НайденныеСтроки = БухучетТекущегоРасчета.НайтиСтроки(ОтборТекущегоРасчета);
			Иначе	
				ЗаполнитьЗначенияСвойств(ОтборРаспределения, СтрокаКоэффициентов);
				ОтборРаспределения.ИдентификаторСтроки = СтрокаКоэффициентов.ИдентификаторСтрокиБазы;
				НайденныеСтроки = БухучетБазовыхНачислений.НайтиСтроки(ОтборРаспределения);
			КонецЕсли;
			
			СтрокиРаспределения = Новый Массив;
			Если ИспользоватьОбособленныеТерритории Тогда
				// Отберем строки с учетом Территории.
				Для каждого СтрокаРаспределения Из НайденныеСтроки Цикл
					Если СтрокаНачисления.Территория = СтрокаРаспределения.Территория
						Или Не ЗначениеЗаполнено(СтрокаНачисления.Территория) И Не ЗначениеЗаполнено(СтрокаРаспределения.Территория) Тогда
						СтрокиРаспределения.Добавить(СтрокаРаспределения);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокиРаспределения.Количество() = 0 Тогда
					// Не удалось подобрать прошлое распределение с учетом территории,
					// распределим по всей базе.
					СтрокиРаспределения = НайденныеСтроки;
				КонецЕсли;
				
			Иначе
				СтрокиРаспределения = НайденныеСтроки;
			КонецЕсли;
			
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				Если СтрокаРаспределения.Результат <> 0 Тогда
					ИзмеренияРаспределения.Добавить(СтрокаРаспределения);
					Коэффициенты.Добавить(СтрокаРаспределения.Результат * СтрокаКоэффициентов.Коэффициент);
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
		// Если базы распределения не нашлось, то распределим сумму РанееНачислено по текущему распределению этого начисления
		Если ИзмеренияРаспределения.Количество() = 0 Тогда
			ОтборТекущегоРасчета.ИдентификаторСтроки = СтрокаНачисления.ИдентификаторСтроки;	
			СтрокиРаспределения = БухучетТекущегоРасчета.НайтиСтроки(ОтборТекущегоРасчета);
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				ИзмеренияРаспределения.Добавить(СтрокаРаспределения);
				Коэффициенты.Добавить(СтрокаРаспределения.Результат);
			КонецЦикла;	
		КонецЕсли;	
		
		Распределение = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаНачисления.РанееНачислено, Коэффициенты); 
		Если Распределение <> Неопределено Тогда
			Для Индекс = 0 По Распределение.Количество() - 1 Цикл
				СтрокаБухучет = БухучетНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаБухучет, СтрокаНачисления);
				ЗаполнитьЗначенияСвойств(СтрокаБухучет, ИзмеренияРаспределения[Индекс]);
				СтрокаБухучет.ИдентификаторСтроки = СтрокаНачисления.ИдентификаторСтроки;
				СтрокаБухучет.Результат = - Распределение[Индекс]
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("БухучетНачисленийРанееНачислено", БухучетНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.Результат КАК Сумма,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	БухучетНачислений.Территория КАК Территория
	|ПОМЕСТИТЬ ВТБухучетНачисленийРанееНачислено
	|ИЗ
	|	&БухучетНачисленийРанееНачислено КАК БухучетНачислений";
	Запрос.Выполнить();
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТФильтрБухУчета");
	ЗарплатаКадры.УничтожитьВТ(ИсходныеДанные.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТБухучетКорректировкаРанееВыполненногоНачисления(ИсходныеДанные)
	
	УдалитьВТ = Новый Массив;
	БухучетНачислений = НоваяТаблицаБухучетНачислений();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ИсходныеДанные.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияДляРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияДляРаспределения.ИдентификаторСтрокиНачисления КАК ИдентификаторСтрокиНачисления,
	|	НачисленияДляРаспределения.Сотрудник КАК Сотрудник,
	|	НачисленияДляРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДляРаспределения.Подразделение КАК Подразделение,
	|	НачисленияДляРаспределения.Начисление КАК Начисление,
	|	НачисленияДляРаспределения.ДатаНачала КАК ДатаНачала,
	|	НачисленияДляРаспределения.ТерриторияВыполненияРаботВОрганизации КАК Территория,
	|	НачисленияДляРаспределения.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисленияДляОтраженияВБухучете КАК НачисленияДляРаспределения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетНачисленийСторно КАК БухучетНачисленийСторно
	|		ПО НачисленияДляРаспределения.ИдентификаторСтроки = БухучетНачисленийСторно.ИдентификаторСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДляРаспределения.Начисление = Начисления.Ссылка
	|			И (Начисления.СтратегияОтраженияВУчете <> ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам))
	|			И (НачисленияДляРаспределения.КорректировкаРанееВыполненногоНачисления)
	|ГДЕ
	|	БухучетНачисленийСторно.ИдентификаторСтроки ЕСТЬ NULL";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляОтраженияВБухучете", ИсходныеДанные.ИмяВТНачисления);
	ТаблицаРанееНачислено = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРанееНачислено.Количество() > 0 Тогда
		
		// ИдентификаторСтроки соответствует полю ИдентификаторСтрокиНачисления
		КоэффициентыРанееНачисленныхСумм = ИсходныеДанные.МенеджерРасчетаЗарплаты.КоэффициентыРанееНачисленныхСумм();
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(КоэффициентыРанееНачисленныхСумм, "ИдентификаторСтроки");
		ОтборКоэффициентов = Новый Структура("ИдентификаторСтроки");
		
		ФильтрБухучета = Новый ТаблицаЗначений;
		ФильтрБухучета.Колонки.Добавить("Регистратор", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
		ФильтрБухучета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
		ФильтрБухучета.Колонки.Добавить("ИдентификаторСтрокиБухучета", Новый ОписаниеТипов("Число"));
		
		Для Каждого СтрокаНачисления Из ТаблицаРанееНачислено Цикл
			
			ОтборКоэффициентов.ИдентификаторСтроки = СтрокаНачисления.ИдентификаторСтрокиНачисления;
			СтрокиКоэффициентов = КоэффициентыРанееНачисленныхСумм.НайтиСтроки(ОтборКоэффициентов);
			
			Для Каждого СтрокаКоэффициентов Из СтрокиКоэффициентов Цикл
				Если СтрокаКоэффициентов.Регистратор <> ИсходныеДанные.РегистраторТекущегоРасчета Тогда
					СтрокаФильтра = ФильтрБухучета.Добавить();
					СтрокаФильтра.Регистратор = СтрокаКоэффициентов.Регистратор;
					СтрокаФильтра.ИдентификаторСтроки = СтрокаКоэффициентов.ИдентификаторСтрокиБазы;
					СтрокаФильтра.ИдентификаторСтрокиБухучета = СтрокаНачисления.ИдентификаторСтроки;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ФильтрБухучета.Свернуть("Регистратор, ИдентификаторСтроки, ИдентификаторСтрокиБухучета");
		
		Регистраторы = ОбщегоНазначения.ВыгрузитьКолонку(ФильтрБухучета, "Регистратор", Истина);
		Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БухучетНачисления.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисления
		|ГДЕ
		|	БухучетНачисления.Регистратор В(&Регистраторы)
		|	И БухучетНачисления.ДанныеМежрасчетногоПериода";
		ИсключаемыеРегистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
		
		УдаляемыеСтроки = Новый Массив;
		Отбор = Новый Структура("Регистратор");
		Для каждого Регистратор Из ИсключаемыеРегистраторы Цикл
			Отбор.Регистратор = Регистратор;
			НайденныеСтроки = ФильтрБухучета.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				УдаляемыеСтроки.Добавить(СтрокаТЗ);
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из УдаляемыеСтроки Цикл
			ФильтрБухучета.Удалить(СтрокаТЗ);
		КонецЦикла;
		
		Если ФильтрБухучета.Количество() > 0 Тогда
			
			ИспользоватьОбособленныеТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", ИсходныеДанные.Организация));
			
			Запрос.УстановитьПараметр("ФильтрБухУчета", ФильтрБухУчета);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФильтрБухУчета.Регистратор КАК Регистратор,
			|	ФильтрБухУчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ФильтрБухУчета.ИдентификаторСтрокиБухучета КАК ИдентификаторСтрокиБухучета
			|ПОМЕСТИТЬ ВТФильтрБухУчета
			|ИЗ
			|	&ФильтрБухУчета КАК ФильтрБухУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ФильтрБухУчета.ИдентификаторСтрокиБухучета КАК ИдентификаторСтрокиБухучета,
			|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	БухучетНачислений.Территория КАК Территория,
			|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
			|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
			|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|	БухучетНачислений.Результат КАК Результат
			|ИЗ
			|	ВТФильтрБухУчета КАК ФильтрБухУчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеРезультатовНачислений КАК БухучетНачислений
			|		ПО ФильтрБухУчета.Регистратор = БухучетНачислений.Регистратор
			|			И ФильтрБухУчета.ИдентификаторСтроки = БухучетНачислений.ИдентификаторСтроки";
			
			БухучетРанееНачислено = Запрос.Выполнить().Выгрузить();
			УдалитьВТ.Добавить("ВТФильтрБухУчета");
			
			БухучетРанееНачислено.Индексы.Добавить("ИдентификаторСтрокиБухучета");
			ОтборРанееНачислено = Новый Структура("ИдентификаторСтрокиБухучета");
			
			Для каждого СтрокаНачисления Из ТаблицаРанееНачислено Цикл
			
				ОтборРанееНачислено.ИдентификаторСтрокиБухучета = СтрокаНачисления.ИдентификаторСтроки;
				НайденныеСтроки = БухучетРанееНачислено.НайтиСтроки(ОтборРанееНачислено);
				
				СтрокиРаспределения = Новый Массив;
				Если ИспользоватьОбособленныеТерритории Тогда
					// Отберем строки с учетом Территории.
					Для каждого СтрокаРаспределения Из НайденныеСтроки Цикл
						Если СтрокаНачисления.Территория = СтрокаРаспределения.Территория
							Или Не ЗначениеЗаполнено(СтрокаНачисления.Территория) И Не ЗначениеЗаполнено(СтрокаРаспределения.Территория) Тогда
							СтрокиРаспределения.Добавить(СтрокаРаспределения);
						КонецЕсли;
					КонецЦикла;
					
					Если СтрокиРаспределения.Количество() = 0 Тогда
						// Не удалось подобрать прошлое распределение с учетом территории,
						// распределим по всей базе.
						СтрокиРаспределения = НайденныеСтроки;
					КонецЕсли;
					
				Иначе
					СтрокиРаспределения = НайденныеСтроки;
				КонецЕсли;
				
				Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения,"Результат");
				Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаНачисления.Сумма, Коэффициенты);
				
				Если Результаты <> Неопределено Тогда
					
					Индекс = 0;
					Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
						
						СтрокаТаблицы = БухучетНачислений.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаНачисления);
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРаспределения);
						СтрокаТаблицы.Территория = СтрокаНачисления.Территория;
						СтрокаТаблицы.Сумма = Результаты[Индекс];
						
						Индекс = Индекс + 1;
						
					КонецЦикла;
					
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если БухучетНачислений.Количество() = 0 Тогда
		СоздатьПустуюВТБухучетНачислений(Запрос, "ВТБухучетКорректировкаРанееВыполненногоНачисления");
	Иначе
		
		Запрос.УстановитьПараметр("БухучетНачислений", БухучетНачислений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БухучетНачислений.Сотрудник КАК Сотрудник,
		|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БухучетНачислений.Подразделение КАК Подразделение,
		|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачислений.Сумма КАК Сумма,
		|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
		|	БухучетНачислений.Начисление КАК Начисление,
		|	БухучетНачислений.Территория КАК Территория
		|ПОМЕСТИТЬ ВТБухучетКорректировкаРанееВыполненногоНачисления
		|ИЗ
		|	&БухучетНачислений КАК БухучетНачислений";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Если УдалитьВТ.Количество() > 0 Тогда
		ЗарплатаКадры.УничтожитьВТ(ИсходныеДанные.МенеджерВременныхТаблиц, УдалитьВТ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаРаспределенияПоИсточникамФинансирования

Функция ПроверитьРезультатыРаспределенияНачисленийУдержанийВСтрокеОбъекта(ПроверяемаяСтрока, СтрокиРаспределенияРезультатовРасчета, ИмяТаблицы, НачислениеУдержаниеВидОперации, РаботаВБюджетномУчреждении, ВидНачисленияВШапке = Неопределено)
	
	РезультатПроверки = СтруктураРезультатаПроверки();
	
	ИмяТаблицыРаспределениеРезультатовРасчета = ИмяТаблицыДляРаспределенияРезультата(ИмяТаблицы);
	ЭтоТаблицаНачислений = ИмяТаблицыРаспределениеРезультатовРасчета = "РаспределениеРезультатовНачислений";
	
	Если Не ЗначениеЗаполнено(ВидНачисленияВШапке) И ЭтоТаблицаНачислений И ИмяТаблицы <> "НачисленияПоДоговорам" Тогда
		ВидРасчета = ПроверяемаяСтрока.Начисление;
	ИначеЕсли ЗначениеЗаполнено(ВидНачисленияВШапке) Тогда
		ВидРасчета = ВидНачисленияВШапке;
	Иначе
		ВидРасчета = Неопределено;
	КонецЕсли;
	
	ВидыОперацийПособия = Новый Массив;
	ВидыОперацийПособия.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
	ВидыОперацийПособия.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	
	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("СтатьяФинансирования", Истина);
	ПроверяемыеПоля.Вставить("СтатьяРасходов", РаботаВБюджетномУчреждении);
	
	ЭтоТаблицаНДФЛ						= ИмяТаблицы = "НДФЛ";
	ЭтоТаблицаСуммыВозврата				= ИмяТаблицы = "СуммыВозврата";
	ЭтоТаблицаКорректировкиВыплаты		= ИмяТаблицы = "КорректировкиВыплаты";
	ЭтоТаблицаЗаймов					= ИмяТаблицы = "ПогашениеЗаймов";
	ЭтоТаблицаПрочихДоходов				= ИмяТаблицы = "НачисленияУдержанияВзносы";
	УточнятьПроверкуСпособаОтражения	= ЭтоТаблицаНачислений И ИмяТаблицы <> "НачисленияПоДоговорам" И ВидРасчета <> Неопределено;
	
	Если ЭтоТаблицаНачислений Тогда
		ПроверяемыеПоля.Вставить("СпособОтраженияЗарплатыВБухучете", Истина);
		ПроверяемыеПоля.Вставить("Сотрудник", Ложь);
	ИначеЕсли ЭтоТаблицаПрочихДоходов Тогда
		ПроверяемыеПоля.Вставить("СпособОтраженияЗарплатыВБухучете", Истина);
	Иначе
		// Для удержаний не проверяем способ отражения.
		ПроверяемыеПоля.Вставить("СпособОтраженияЗарплатыВБухучете", Ложь);
		ПроверяемыеПоля.Вставить("Сотрудник", Истина);
	КонецЕсли;
	
	Для Каждого ПроверяемоеПоле Из ПроверяемыеПоля Цикл
		ИмяПоля = ПроверяемоеПоле.Ключ;
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокиРаспределенияРезультатовРасчета, ИмяПоля) Тогда
			ПроверяемыеПоля[ИмяПоля] = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если УточнятьПроверкуСпособаОтражения Тогда
		ПроверяемыеПоля.СпособОтраженияЗарплатыВБухучете = ВидыОперацийПособия.Найти(НачислениеУдержаниеВидОперации[ВидРасчета]) = Неопределено;
	КонецЕсли;
	
	Если ЭтоТаблицаНДФЛ Тогда
		Результат  = ПроверяемаяСтрока.Налог - ПроверяемаяСтрока.ЗачтеноАвансовыхПлатежей + ПроверяемаяСтрока.НалогСПревышения - ПроверяемаяСтрока.ЗачтеноАвансовыхПлатежейСПревышения;
	ИначеЕсли ЭтоТаблицаСуммыВозврата Тогда
		Результат  = ПроверяемаяСтрока.Налог + ПроверяемаяСтрока.НалогСПревышения;
	ИначеЕсли ЭтоТаблицаКорректировкиВыплаты Тогда
		Результат  = ПроверяемаяСтрока.КорректировкаВыплаты;
	ИначеЕсли ЭтоТаблицаЗаймов Тогда
		Результат  = ПроверяемаяСтрока.НачисленоПроцентов + ПроверяемаяСтрока.ПогашениеПроцентов + ПроверяемаяСтрока.ПогашениеЗайма + ПроверяемаяСтрока.МатериальнаяВыгода + ПроверяемаяСтрока.НалогНаМатериальнуюВыгоду;
	ИначеЕсли ЭтоТаблицаПрочихДоходов Тогда
		Результат  = ПроверяемаяСтрока.Начислено;
	Иначе
		Результат  = ПроверяемаяСтрока.Результат;
	КонецЕсли;
	
	РезультатРаспределения = 0;
	ЕстьОшибкиЗаполнения = Ложь;
	Если СтрокиРаспределенияРезультатовРасчета <> Неопределено
		И СтрокиРаспределенияРезультатовРасчета.Количество() > 0 Тогда
		
		Для каждого СтрокаРаспределения Из СтрокиРаспределенияРезультатовРасчета Цикл
			РезультатРаспределения = РезультатРаспределения + СтрокаРаспределения.Результат;
			Для Каждого КлючИЗначение Из ПроверяемыеПоля Цикл
				Если КлючИЗначение.Значение И Не ЗначениеЗаполнено(СтрокаРаспределения[КлючИЗначение.Ключ]) Тогда
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат = 0 И РезультатРаспределения = 0 Тогда
		ЕстьОшибкиРаспределения = Ложь;
		ЕстьОшибкиЗаполнения = Ложь;
	Иначе
		ЕстьОшибкиРаспределения = Результат <> РезультатРаспределения;
	КонецЕсли;
	
	РезультатПроверки.ЕстьОшибкиРаспределения = ЕстьОшибкиРаспределения;
	РезультатПроверки.ЕстьОшибкиЗаполнения    = ЕстьОшибкиЗаполнения;
	РезультатПроверки.СуммаКРаспределению     = Результат;
	РезультатПроверки.РезультатРаспределения  = РезультатРаспределения;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ИмяТаблицыДляРаспределенияРезультата(ИмяТаблицы)
	
	ИмяТаблицыДляРаспределения = "";
	
	Если ИмяТаблицы = "Начисления"
		Или ИмяТаблицы = "НачисленияПерерасчет"
		Или ИмяТаблицы = "НачисленияПоДоговорам"
		Или ИмяТаблицы = "Пособия"
		Или ИмяТаблицы = "ПособияПерерасчет"
		Или ИмяТаблицы = "ДоначисленияИПерерасчеты"
		Или ИмяТаблицы = "ОплатаТруда"
		Или ИмяТаблицы = "Сторнировано"
		Или ИмяТаблицы = "НачисленияУдержанияВзносы" Тогда
		
		ИмяТаблицыДляРаспределения = "РаспределениеРезультатовНачислений";
		
	ИначеЕсли ИмяТаблицы = "НДФЛ"
		Или ИмяТаблицы = "СуммыВозврата"
		Или ИмяТаблицы = "Удержания"
		Или ИмяТаблицы = "ПогашениеЗаймов"
		Или ИмяТаблицы = "КорректировкиВыплаты" Тогда
		
		ИмяТаблицыДляРаспределения = "РаспределениеРезультатовУдержаний";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицыДляРаспределения) Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			МодульЛьготыСотрудниковКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудниковКлиентСервер");
			ИмяТаблицыДляРаспределения = МодульЛьготыСотрудниковКлиентСервер.ИмяТаблицыДляРаспределенияРезультата(ИмяТаблицы);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ИмяТаблицыДляРаспределения;
	
КонецФункции

Функция СтруктураРезультатаПроверки()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьОшибкиРаспределения", Истина);
	РезультатПроверки.Вставить("ЕстьОшибкиЗаполнения", Истина);
	РезультатПроверки.Вставить("СуммаКРаспределению", 0);
	РезультатПроверки.Вставить("РезультатРаспределения", Неопределено);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ИмяРеквизитаИдентификаторСтрокиПоИмениТаблицы(ИмяТаблицы)
	
	ИмяРеквизитаИдентификаторСтроки = "";
	
	Если ИмяТаблицы = "НДФЛ" Или ИмяТаблицы = "СуммыВозврата" Тогда
		ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	ИначеЕсли ИмяТаблицы = "ПогашениеЗаймов" Или ИмяТаблицы = "КорректировкиВыплаты" Тогда
		ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	ИначеЕсли ИмяТаблицы = "НачисленияПоДоговорам" Или ИмяТаблицы = "НачисленияУдержанияВзносы" Тогда
		ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	Иначе
		ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиВидаРасчета";
	КонецЕсли;
	
	Возврат ИмяРеквизитаИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

#Область РедактированиеПроцентаЕНВДВФормахДокументов

Процедура ОбъектПриЧтенииНаСервереПроцентЕНВД(Форма, Организация, МесяцНачисления, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт

	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")) 
		ИЛИ ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОтражениеЗарплатыВБухучете.ОбъектПриЧтенииНаСервереПроцентЕНВД(Форма, Организация, МесяцНачисления, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ОбъектПриСозданииНаСервереПроцентЕНВД(Форма, Организация, МесяцНачисления) Экспорт
	
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")) 
		ИЛИ ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	ОтражениеЗарплатыВБухучете.ОбъектПриСозданииНаСервереПроцентЕНВД(Форма, Организация, МесяцНачисления);
	
КонецПроцедуры

Процедура ОбработатьИзменениеОрганизацииПроцентЕНВД(Форма, Организация, МесяцНачисления) Экспорт
	
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")) 
		ИЛИ ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	ОтражениеЗарплатыВБухучете.ОбработатьИзменениеОрганизацииПроцентЕНВД(Форма, Организация, МесяцНачисления)
	
КонецПроцедуры

Процедура ОбработатьИзменениеМесяцНачисленияПроцентЕНВД(Форма, Организация, МесяцНачисления) Экспорт
	
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")) 
		ИЛИ ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	ОтражениеЗарплатыВБухучете.ОбработатьИзменениеМесяцНачисленияПроцентЕНВД(Форма, Организация, МесяцНачисления)
	
КонецПроцедуры

Процедура ЗарегистрироватьПроцентЕНВДПослеРедактированияВФорме(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока) Экспорт

	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")) 
		ИЛИ ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	ОтражениеЗарплатыВБухучете.ЗарегистрироватьПроцентЕНВДПослеРедактированияВФорме(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока)
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеРезультатовРаспределения

Процедура ОбъектПриЧтенииНаСервереПредставлениеРаспределения(Форма, ОписаниеДокумента) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	НачислениеИзШапкиДокумента = Неопределено;
	Если ОписаниеДокумента.ВидНачисленияВШапке И ЗначениеЗаполнено(ОписаниеДокумента.ВидНачисленияИмя) Тогда
		НачислениеИзШапкиДокумента = Объект[ОписаниеДокумента.ИменаПолейНачисления];
	КонецЕсли;
	
	Если ОписаниеДокумента.НачисленияИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.НачисленияИмя], ОписаниеДокумента, ОписаниеДокумента.НачисленияИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.НачисленияПерерасчетИмя], ОписаниеДокумента, ОписаниеДокумента.НачисленияПерерасчетИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.ПособияИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.ПособияИмя], ОписаниеДокумента, ОписаниеДокумента.ПособияИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.НачисленияПоДоговорамИмя], ОписаниеДокумента, ОписаниеДокумента.НачисленияПоДоговорамИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.СторноИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.СторноИмя], ОписаниеДокумента, ОписаниеДокумента.СторноИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.ЛьготыИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.ЛьготыИмя], ОписаниеДокумента, ОписаниеДокумента.ЛьготыИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.ЛьготыПерерасчетИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.ЛьготыПерерасчетИмя], ОписаниеДокумента, ОписаниеДокумента.ЛьготыПерерасчетИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.УдержанияИмя], ОписаниеДокумента, ОписаниеДокумента.УдержанияИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.УдержанияПерерасчетИмя], ОписаниеДокумента, ОписаниеДокумента.УдержанияПерерасчетИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.НДФЛИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.НДФЛИмя], ОписаниеДокумента, ОписаниеДокумента.НДФЛИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.КорректировкиВыплатыИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.КорректировкиВыплатыИмя], ОписаниеДокумента, ОписаниеДокумента.КорректировкиВыплатыИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	Если ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено Тогда
		ЗаполнитьПредставлениеРаспределения(Объект[ОписаниеДокумента.ПогашениеЗаймовИмя], ОписаниеДокумента, ОписаниеДокумента.ПогашениеЗаймовИмя, НачислениеИзШапкиДокумента, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеРаспределения(ДанныеЗаполнения, ОписаниеДокумента, ИмяТаблицы, ВидРасчетаИзШапки, РаботаВБюджетномУчреждении, НачислениеУдержаниеВидОперации) 
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ДанныеЗаполнения Цикл
			
		РезультатПроверкиСтроки = ПроверитьРезультатыРаспределенияНачисленийУдержанийВСтроке(
			СтрокаТаблицы, ИмяТаблицы, ОписаниеДокумента, ВидРасчетаИзШапки, НачислениеУдержаниеВидОперации, РаботаВБюджетномУчреждении);
			
		РаспределениеСодержитОшибки = РезультатПроверкиСтроки.ЕстьОшибкиРаспределения Или РезультатПроверкиСтроки.ЕстьОшибкиЗаполнения;
		
		ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ЗаполнитьПредставлениеРаспределенияВСтроке(
			СтрокаТаблицы, РаспределениеСодержитОшибки, ИмяТаблицы, РаботаВБюджетномУчреждении);			
			
	КонецЦикла	

КонецПроцедуры

Функция ПроверитьРезультатыРаспределенияНачисленийУдержанийВСтроке(ПроверяемаяСтрока, ИмяТаблицы, ОписаниеДокумента, ВидРасчетаИзШапки, НачислениеУдержаниеВидОперации, РаботаВБюджетномУчреждении, РезультатыРаспределения = Неопределено)
	
	ОписаниеТаблицыФормы = Неопределено;
	Если Не ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата.Свойство(ИмяТаблицы, ОписаниеТаблицыФормы) Тогда
		Возврат СтруктураРезультатаПроверки();
	КонецЕсли;
	
	Если РезультатыРаспределения = Неопределено Тогда 
		РезультатыРаспределения = ПроверяемаяСтрока.РезультатРаспределения;
	КонецЕсли;
	
	Возврат ПроверитьРезультатыРаспределенияНачисленийУдержанийВСтрокеОбъекта(ПроверяемаяСтрока, РезультатыРаспределения, ИмяТаблицы,
		НачислениеУдержаниеВидОперации,РаботаВБюджетномУчреждении, ВидРасчетаИзШапки);
	
КонецФункции

Процедура ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ТаблицаРаспределения) Экспорт
	
	КодыСтатей = КодыСтатейФинансирования();
	
	Если ТаблицаРаспределения.Колонки.Найти("КодСтатьиФинансирования") = Неопределено Тогда
		ТаблицаРаспределения.Колонки.Добавить("КодСтатьиФинансирования", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(3)));
	КонецЕсли;
	Для каждого СтрокаТЗ Из ТаблицаРаспределения Цикл
		СтрокаТЗ.КодСтатьиФинансирования = КодыСтатей[СтрокаТЗ.СтатьяФинансирования]
	КонецЦикла;
	
КонецПроцедуры

Функция КодыСтатейФинансирования() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиФинансированияЗарплата.Код КАК КодСтатьиФинансирования,
	|	СтатьиФинансированияЗарплата.Ссылка
	|ИЗ
	|	Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансированияЗарплата";
	Выборка = Запрос.Выполнить().Выбрать();
	
	КодыСтатей = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		КодыСтатей.Вставить(Выборка.Ссылка, Выборка.КодСтатьиФинансирования);
	КонецЦикла;
	КодыСтатей.Вставить(Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка(), "");
	
	Возврат КодыСтатей;

КонецФункции 

// Формирует представление результата распределения строки начисления
// Параметры
//	СуммаОсновнойСтроки - число, результат расчета строки начисления 
//	ВидРасчета - вид расчета из строки начисления
//	СтрокиРаспределения - коллекция строк с результатами распределения строки начисления, содержит поле КодСтатьиФинансирования
//	ПараметрыДляПроверки - структура, см ПараметрыДляПроверкиРезультатовРаспределенияНачислений.
//
// Возвращаемое значение - строка, для помещения в реквизит КомандаРедактированияРаспределения.
//
Функция ПредставлениеРезультатаРаспределенияСтрокиНачисления(СуммаОсновнойСтроки, ВидРасчета, СтрокиРаспределения, ПараметрыДляПроверки) Экспорт
	
	ВидОперации = ПараметрыДляПроверки.НачислениеУдержаниеВидОперации[ВидРасчета];
	ПараметрыДляПроверки.ПроверяемыеПоля.СпособОтраженияЗарплатыВБухучете = ПараметрыДляПроверки.ВидыОперацийПособия.Найти(ВидОперации) = Неопределено;
	ЕстьОшибкиРаспределения = РезультатРаспределенияСодержитОшибки(СуммаОсновнойСтроки, СтрокиРаспределения, ПараметрыДляПроверки.ПроверяемыеПоля);
	
	Возврат ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПредставлениеРаспределения(СтрокиРаспределения, ЕстьОшибкиРаспределения, ПараметрыДляПроверки.ПроверяемыеПоля.СтатьяРасходов)

КонецФункции

Функция ПредставлениеРезультатаРаспределенияСтрокиУдержания(СуммаОсновнойСтроки, СтрокиРаспределения, ПроверяемыеПоля) Экспорт
	
	ЕстьОшибкиРаспределения = РезультатРаспределенияСодержитОшибки(СуммаОсновнойСтроки, СтрокиРаспределения, ПроверяемыеПоля);
	Возврат ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПредставлениеРаспределения(СтрокиРаспределения, ЕстьОшибкиРаспределения, ПроверяемыеПоля.СтатьяРасходов)

КонецФункции

Функция ПредставлениеРезультатаРаспределенияСтрокиПогашениеЗаймов(СуммаОсновнойСтроки, СтрокиРаспределения, ПроверяемыеПоля) Экспорт
	
	ЕстьОшибкиРаспределения = РезультатРаспределенияСодержитОшибки(СуммаОсновнойСтроки, СтрокиРаспределения, ПроверяемыеПоля);
	
	РаспределениеВсейСуммыСтроки = Новый Массив;
	
	ИменаКолонок = "СтатьяФинансирования,СтатьяРасходов,КодСтатьиФинансирования,Результат,ВидУдержания,Сотрудник,Подразделение";
	Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
		
		ОписаниеСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаРаспределения);
		
		СтрокаНеНайдена = Истина;
		
		Для Каждого СтрокаРаспределенияВсейСуммыСтроки Из РаспределениеВсейСуммыСтроки Цикл
			Если СтрокаРаспределенияВсейСуммыСтроки.СтатьяФинансирования = ОписаниеСтроки.СтатьяФинансирования
				И СтрокаРаспределенияВсейСуммыСтроки.КодСтатьиФинансирования = ОписаниеСтроки.КодСтатьиФинансирования
				И СтрокаРаспределенияВсейСуммыСтроки.СтатьяРасходов = ОписаниеСтроки.СтатьяРасходов
				И СтрокаРаспределенияВсейСуммыСтроки.Сотрудник = ОписаниеСтроки.Сотрудник
				И СтрокаРаспределенияВсейСуммыСтроки.Подразделение = ОписаниеСтроки.Подразделение Тогда
				СтрокаРаспределенияВсейСуммыСтроки.Результат = СтрокаРаспределенияВсейСуммыСтроки.Результат + ОписаниеСтроки.Результат;
				СтрокаНеНайдена = Ложь;
			КонецЕсли;				
		КонецЦикла;
		
		Если СтрокаНеНайдена Тогда
			РаспределениеВсейСуммыСтроки.Добавить(ОписаниеСтроки);
		КонецЕсли;			
		
	КонецЦикла;
	
	Возврат ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПредставлениеРаспределения(РаспределениеВсейСуммыСтроки, ЕстьОшибкиРаспределения, ПроверяемыеПоля.СтатьяРасходов)

КонецФункции

// ПроверяемыеПоля см ПараметрыДляПроверкиРезультатовРаспределенияНачислений.ПроверяемыеПоля.
Функция РезультатРаспределенияСодержитОшибки(СуммаОсновнойСтроки, СтрокиРаспределения, ПроверяемыеПоля)
	
	РезультатРаспределения = 0;
	Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
		РезультатРаспределения = РезультатРаспределения + СтрокаРаспределения.Результат;
		Для Каждого КлючИЗначение Из ПроверяемыеПоля Цикл
			Если КлючИЗначение.Значение И Не ЗначениеЗаполнено(СтрокаРаспределения[КлючИЗначение.Ключ]) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СуммаОсновнойСтроки <> РезультатРаспределения;

КонецФункции 

Функция ПараметрыДляПроверкиРезультатовРаспределенияНачислений() Экспорт

	ВидыОперацийПособия = Новый Массив;
	ВидыОперацийПособия.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
	ВидыОперацийПособия.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	
	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("СтатьяФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата"));
	ПроверяемыеПоля.Вставить("СтатьяРасходов", ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"));
	ПроверяемыеПоля.Вставить("СпособОтраженияЗарплатыВБухучете", Ложь);
	
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВидыОперацийПособия", ВидыОперацийПособия);
	Параметры.Вставить("НачислениеУдержаниеВидОперации", НачислениеУдержаниеВидОперации);
	Параметры.Вставить("ПроверяемыеПоля", ПроверяемыеПоля);
	
	Возврат Параметры;

КонецФункции

Функция ПараметрыДляПроверкиРезультатовРаспределенияУдержаний() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("СтатьяФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата"));
	Параметры.Вставить("СтатьяРасходов", ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"));
	Параметры.Вставить("Сотрудник", Истина);
	
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ЗначенияСтатейРасходовПоУмолчанию

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата с кодом 290.
Функция СтатьяРасходов290()
	
	Статья290 = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Статья290 = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("290");
	КонецЕсли;

	Возврат Статья290;
	
КонецФункции

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата с кодом 296.
Функция СтатьяРасходов296()
	
	Статья296 = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Статья296 = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("296");
	КонецЕсли;

	Возврат Статья296;
	
КонецФункции

// Возвращает ссылку на элемент справочника СтатьиРасходовЗарплата с кодом 265.
Функция СтатьяРасходов265()
	
	Статья265 = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Статья265 = Справочники.СтатьиРасходовЗарплата.НайтиПоКоду("265");
	КонецЕсли;

	Возврат Статья265;
	
КонецФункции

// Возвращает дату вступления в силу приказа Минфина РФ от 29 сентября 2020 г. №222н.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаПриказа222н()

	Возврат '20210101';

КонецФункции

#КонецОбласти

#Область Прочие

Функция ИспользуетсяЕНВД() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД");
	
КонецФункции

// Устанавливает подсказку ввода для элемента СтатьяРасходов.
// Параметры:
// 		Форма - форма объекта
// 		ПутьРеквизита - путь к реквизиту типа ПланыВидовРасчетаСсылка.Начисления.
//
Процедура УстановитьПодсказкуВводаСтатьиРасходовПоНачислению(Форма, ПутьРеквизита) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	ПодсказкаВвода = "211";
	
	ВидРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита);
	Если ЗначениеЗаполнено(ВидРасчета) Тогда
		СтатьяРасходов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРасчета, "СтатьяРасходов");
		Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
			ПодсказкаВвода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходов, "Код");
		КонецЕсли;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СтатьяРасходов", "ПодсказкаВвода", ПодсказкаВвода);

КонецПроцедуры

// Устанавливает подсказку ввода для элемента СтатьяРасходов.
// Параметры:
// 		Форма - форма объекта
// 		ВидВыплаты - типа СправочникСсылка.ВидыВыплатБывшимСотрудникам
//		ПериодРегистрации - месяц регистрации выплаты.
//
Процедура УстановитьПодсказкуВводаСтатьиРасходовВыплатыБывшимСотрудникам(Форма, ВидВыплаты, ПериодРегистрации) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Возврат;
	КонецЕсли;
	
	ПодсказкаВвода = "211";
	
	Если ЗначениеЗаполнено(ВидВыплаты) Тогда
		
		Если ВидВыплаты = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыВыплатБывшимСотрудникам.СохраняемыйЗаработокНаВремяТрудоустройства")
			Или ВидВыплаты = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыВыплатБывшимСотрудникам.СохраняемоеДенежноеСодержаниеНаПериодТрудоустройства") Тогда
			
			СтатьяРасходов = СтатьяРасходовДляСохраняемогоЗаработкаНаПериодТрудоустройства(ПериодРегистрации);
			Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
				ПодсказкаВвода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходов, "Код");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "СтатьяРасходов", "ПодсказкаВвода", ПодсказкаВвода);

КонецПроцедуры

Процедура УстановитьСписокВыбораОтношениеКЕНВД(ЭлементыФормы, ИмяЭлемента) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		
		ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.РежимВыбораИзСписка = Истина;
			ЭлементФормы.СписокВыбора.Добавить(Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД);
			ЭлементФормы.СписокВыбора.Добавить(Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура УточнитьСоставПроверяемыхРеквизитовБухучетПлановыхУдержаний(ДокументОбъект, ПроверяемыеРеквизиты) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата")
		Или Не ДокументОбъект.БухучетЗаданВДокументе
		Или ДокументОбъект.Действие = Перечисления.ДействияСУдержаниями.Прекратить
		Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Удержание, "ДоступнаСтратегияОтраженияКакЗаданоВидуРасчета") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СтатьяФинансирования");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СтатьяРасходов");
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СтатьяРасходов");
	КонецЕсли;

КонецПроцедуры

Функция МетаданныеРегистровПодсистемы()
	
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам);
	Регистры.Добавить(Метаданные.РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникам);
	Регистры.Добавить(Метаданные.РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникамАвансом);
	
	Возврат Регистры;
КонецФункции

// Возвращает признак применения статей утвержденных
// Приказом Минфина России от 29.11.2017 N 209н (ред. от 30.11.2018) на дату, переданную в параметре.
//
// Параметры:
//  Период - дата
//
// Возвращаемое значение:
//   Булево
//
Функция СтатьиРасходовПоПриказу209нПрименяются(Период)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		ДатаПрименения = Модуль.ДатаНачалаПримененияПриказа209н();
		Если Не ЗначениеЗаполнено(ДатаПрименения) Тогда
			Возврат Ложь;
		Иначе
			Возврат (НачалоМесяца(Период) >= ДатаПрименения);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьРегистрациюВНалоговомОрганеВКоллекцииСтрок(Организация, Период, КоллекцияНачисленныйНДФЛ) Экспорт
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация,"ЮридическоеФизическоеЛицо");
	ОрганизацияЮрлицо = ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	
	Если ТипЗнч(КоллекцияНачисленныйНДФЛ) = Тип("ДанныеФормыКоллекция") Тогда
		Запрос.УстановитьПараметр("НачисленныйНДФЛ", КоллекцияНачисленныйНДФЛ.Выгрузить());
	Иначе
		// передана таблица значений
		
		Если КоллекцияНачисленныйНДФЛ.Колонки.Найти("НомерСтроки") = Неопределено Тогда
			КоллекцияНачисленныйНДФЛ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
			НомерСтроки = 1;
			Для каждого СтрокаТЗ Из КоллекцияНачисленныйНДФЛ Цикл
				СтрокаТЗ.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки +1;
			КонецЦикла;
		КонецЕсли;
		
		Если КоллекцияНачисленныйНДФЛ.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
			КоллекцияНачисленныйНДФЛ.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НачисленныйНДФЛ", КоллекцияНачисленныйНДФЛ);
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане,
	|	РегистрацииВНалоговомОргане.КодПоОКАТО КАК КодПоОКАТО,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
	|	РегистрацииВНалоговомОргане.КПП КАК КПП,
	|	РегистрацииВНалоговомОргане.Код КАК КодНалоговогоОргана
	|ПОМЕСТИТЬ ВТРегистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленныйНДФЛ.НомерСтроки КАК НомерСтроки,
	|	НачисленныйНДФЛ.КодПоОКАТО КАК КодПоОКАТО,
	|	НачисленныйНДФЛ.КодПоОКТМО КАК КодПоОКТМО,
	|	НачисленныйНДФЛ.КПП КАК КПП,
	|	НачисленныйНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана
	|ПОМЕСТИТЬ ВТНачисленныйНДФЛ
	|ИЗ
	|	&НачисленныйНДФЛ КАК НачисленныйНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленныйНДФЛ.НомерСтроки КАК НомерСтроки,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТНачисленныйНДФЛ КАК НачисленныйНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО НачисленныйНДФЛ.КодНалоговогоОргана = РегистрацииВНалоговомОргане.КодНалоговогоОргана
	|			И НачисленныйНДФЛ.КПП = РегистрацииВНалоговомОргане.КПП
	|			И НачисленныйНДФЛ.КодПоОКТМО = РегистрацииВНалоговомОргане.КодПоОКТМО
	|ГДЕ
	|	НЕ РегистрацииВНалоговомОргане.КПП ЕСТЬ NULL";
	
	Если НЕ ОрганизацияЮрлицо Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленныйНДФЛ.КПП = РегистрацииВНалоговомОргане.КПП", "");
	КонецЕсли;
	Если Период < УчетНДФЛ.ДатаПереходаНаКодыОКТМО() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленныйНДФЛ.КодПоОКТМО = РегистрацииВНалоговомОргане.КодПоОКТМО", "НачисленныйНДФЛ.КодПоОКАТО = РегистрацииВНалоговомОргане.КодПоОКАТО");	
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КоллекцияНачисленныйНДФЛ[Выборка.НомерСтроки - 1].РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользованиеЕНВД()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД КАК ПлательщикЕНВД
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикЕНВД";
	
	Результат = Запрос.Выполнить();
	
	Константы.ИспользуетсяЕНВД.Установить(Не Результат.Пустой());
	Константы.ИспользуетсяЕНВДВБюджетномУчреждении.Установить(Не Результат.Пустой() И Константы.РаботаВБюджетномУчреждении.Получить());

КонецПроцедуры

Процедура СоздатьВТНачисленияСДаннымиЕНВД(Организация, Период, МенеджерВременныхТаблиц, НачисленияПоСотрудникам) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") И ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТНачисленияСРаспределением") Тогда
		// Таблица ВТНачисленияСРаспределением содержит сведения о бухучете начислений.
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, "ВТНачисленияСРаспределением", "ВТНачисления");
	Иначе
		
		// Таблица ВТНачисленияСРаспределением не содержит сведения о бухучете начислений,
		// получим отражение в бухучете начислений из таблицы НачисленияПоСотрудникам.
		
		ТаблицаНачислений = ОтражениеЗарплатыВУчете.НоваяТаблицаНачислений();
		Для каждого СтрокаТЗ Из НачисленияПоСотрудникам Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), СтрокаТЗ);
		КонецЦикла;
		БухучетНачислений = БухучетНачислений(Организация, Период, ТаблицаНачислений);
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, БухучетНачислений, "ВТБухучетНачислений");
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, "ВТБухучетНачислений", "ВТНачисления");
		
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьПустуюВТБухучетНачислений(Запрос, ИмяВТ)
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	0 КАК ИдентификаторСтроки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрации,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК ТерриторияВыполненияРаботВОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК Территория,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка) КАК ВидОперации,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
	|	ЛОЖЬ КАК ОблагаетсяЕНВД,
	|	0 КАК Сумма
	|ПОМЕСТИТЬ ВТБухучетНачисленийПустая";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийПустая", ИмяВТ);
	Запрос.Выполнить();

КонецПроцедуры

Процедура ИсключитьСтрокиНеОблагаемыеВзносами(БухучетНачислений) Экспорт

	БухучетНачислений.Колонки.Добавить("ИсключатьПриОбработкеВзносов", Новый ОписаниеТипов("Булево"));
	
	СтрокиКОбработке = Новый Массив;
	ОбрабатываемыеДокументы = Новый Соответствие;
	Для каждого СтрокаТЗ Из БухучетНачислений Цикл
		Если ТипЗнч(СтрокаТЗ.ДокументОснование) = Тип("ДокументСсылка.ПризПодарок") Тогда
			СтрокиКОбработке.Добавить(СтрокаТЗ);
			ОбрабатываемыеДокументы.Вставить(СтрокаТЗ.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиКОбработке.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДокументыПризПодарок = ОбщегоНазначения.ВыгрузитьКолонку(ОбрабатываемыеДокументы, "Ключ");
		ЗначенияРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыПризПодарок, "ПредусмотреноКолдоговором");
		УстановитьПривилегированныйРежим(Ложь);
		Для каждого СтрокаТЗ Из СтрокиКОбработке Цикл
			Если ЗначенияРеквизита[СтрокаТЗ.ДокументОснование] = Ложь Тогда
				СтрокаТЗ.ИсключатьПриОбработкеВзносов = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.3";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеРасширенный.ОбновитьДокументыРаспределениеОсновногоЗаработка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("59648975-c23c-4326-9d8a-2bd3659d1ecc");
	Обработчик.Комментарий = НСтр("ru = 'Обновление документов ""Распределение основного заработка.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.79";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеРасширенный.ОбновитьСтратегиюБухучетаСдельногоЗаработка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("94c0b423-469c-4a0d-a815-10110e07fa87");
	Обработчик.Комментарий = НСтр("ru = 'Обновление стратегии отражения в учете начислений по сдельному заработку.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a4cce4bb-ab14-42f1-bc99-72494c78ea61"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений бухучета начислений и удержаний по контрагентам, акционерам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникам.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f5e15567-6901-4105-a6ef-9dade1de3a88"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений бухучета начислений и удержаний по сотрудникам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникамАвансом.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eb959c60-0c81-4172-b176-555702f73ae1"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений бухучета начислений и удержаний по сотрудникам авансом.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.54";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеРасширенный.ЗаполнитьСтатьюРасходовОплатаДнейУходаЗаДетьмиИнвалидами";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a4cffb10-5f10-11eb-810b-4cedfb95099a"); 
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов начисления Оплата дней ухода за детьми-инвалидами.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.20.68";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеРасширенный.СтатьиФинансированияЗаполнитьИспользованиеВБазеСреднегоЗаработка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4c6a2a4e-6e8b-4f80-9791-856f4505b809"); 
	Обработчик.Комментарий = НСтр("ru = 'Обновление свойств статей финансирования.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.20.70";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеРасширенный.ОбновитьБухучетСотрудниковПоСписочнымКадровымДокументам";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8894235f-c495-4aa9-aa10-22f38f2f8911"); 
	Обработчик.Комментарий = НСтр("ru = 'Обновление бухучета сотрудников.'");
	
КонецПроцедуры

Процедура ОбновитьДокументыРаспределениеОсновногоЗаработка(ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКОбработке.Ссылка КАК Ссылка,
	|	ДокументыКОбработке.Проведен КАК Проведен,
	|	ДокументыКОбработке.УдалитьФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыКОбработке.Дата КАК Дата
	|ИЗ
	|	Документ.РаспределениеОсновногоЗаработка КАК ДокументыКОбработке
	|ГДЕ
	|	ДокументыКОбработке.УдалитьСотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыКОбработке.ПериодРегистрации УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.РаспределениеОсновногоЗаработка", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = ДокументОбъект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = ДокументОбъект.УдалитьСотрудник;
		НоваяСтрока.ИдентификаторСтрокиСотрудника = 1;
		
		НоваяСтрока = ДокументОбъект.ФизическиеЛица.Добавить();
		НоваяСтрока.ФизическоеЛицо = Выборка.ФизическоеЛицо;
				
		Для каждого СтрокаТЧ Из ДокументОбъект.РаспределениеЗаработка Цикл
			СтрокаТЧ.ИдентификаторСтрокиСотрудника = 1;
		КонецЦикла;
		
		ДокументОбъект.УдалитьСотрудник = Справочники.Сотрудники.ПустаяСсылка();
		ДокументОбъект.УдалитьФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.ФизическоеЛицо);
		ДокументОбъект.КраткийСоставДокумента = ЗарплатаКадры.КраткийСоставСотрудниковПоСпискуФизическихЛиц(ФизическиеЛица, Выборка.Дата);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВБухучетНачисленияУдержанияПоСотрудникам(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ГруппыОпераций = Новый Массив();
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано);
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы);
	
	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппыОпераций", ГруппыОпераций);
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В(&ГруппыОпераций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
	|	НачисленияУдержанияПоСотрудникам.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В (&ГруппыОпераций)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	НачисленияУдержанияПоСотрудникам.*
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВСтраховыеВзносыПоФизическимЛицам(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	СтатьяРасчетыСКонтрагентами			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.УстановитьПараметр("СтатьяРасчетыСКонтрагентами", СтатьяРасчетыСКонтрагентами);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтраховыеВзносыПоФизическимЛицам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносыПоФизическимЛицам
	|ГДЕ
	|	СтраховыеВзносыПоФизическимЛицам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносыПоФизическимЛицам.Регистратор КАК Регистратор,
	|	СтраховыеВзносыПоФизическимЛицам.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносыПоФизическимЛицам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА СтраховыеВзносыПоФизическимЛицам.Начисление ССЫЛКА Справочник.ВидыВыплатБывшимСотрудникам
	|						ТОГДА &СтатьяРасчетыСКонтрагентами
	|					КОГДА СтраховыеВзносыПоФизическимЛицам.Начисление ССЫЛКА Справочник.ВидыПрочихДоходовФизическихЛиц
	|						ТОГДА &СтатьяРасчетыСКонтрагентами
	|					ИНАЧЕ &СтатьяРасчетыПоОплатеТруда
	|				КОНЕЦ
	|		ИНАЧЕ СтраховыеВзносыПоФизическимЛицам.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	СтраховыеВзносыПоФизическимЛицам.*
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносыПоФизическимЛицам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО СтраховыеВзносыПоФизическимЛицам.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.СтраховыеВзносыПоФизическимЛицам.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.СтраховыеВзносыПоФизическимЛицам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВБухучетНачисленияУдержанияПоКонтрагентамАкционерам(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	СтатьяРасчетыСКонтрагентами			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.УстановитьПараметр("СтатьяРасчетыСКонтрагентами", СтатьяРасчетыСКонтрагентами);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержания.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.Регистратор КАК Регистратор,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НачисленияУдержания.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА НачисленияУдержания.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДивидендыСотрудников), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам))
	|						ТОГДА &СтатьяРасчетыПоОплатеТруда
	|					ИНАЧЕ &СтатьяРасчетыСКонтрагентами
	|				КОНЕЦ
	|		ИНАЧЕ НачисленияУдержания.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	НачисленияУдержания.*
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО НачисленияУдержания.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

// Удаление роли из пользовательских профилей.
//
Процедура УдалитьРольОтражениеЗарплатыВБухгалтерскомУчете() Экспорт
	
	ИмяРоли = "? ОтражениеЗарплатыВБухгалтерскомУчете";
	МассивРолей = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеОтраженияЗарплатыВБухучетеХозрасчетныхОрганизаций");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеОтраженияЗарплатыВБухучетеБюджетныхУчреждений");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеОценочныхОбязательствЗарплатаКадры");
		МассивРолей.Добавить("ЧтениеНастроекОценочныхОбязательствЗарплатаКадры");
	КонецЕсли;
	
	СоответствиеРолей = Новый Соответствие;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	УправлениеДоступом.ЗаменитьРолиВПрофилях(СоответствиеРолей);

КонецПроцедуры

Процедура ОбновитьСтратегиюБухучетаСдельногоЗаработка(ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
	|	И Начисления.СтратегияОтраженияВУчете <> ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоСдельномуЗаработку)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоСдельномуЗаработку;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НачислениеОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовОплатаДнейУходаЗаДетьмиИнвалидами(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами))
	|	И Начисления.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Статья266 = СтатьяРасходов266();
	Если Не ЗначениеЗаполнено(Статья266) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.СтатьяРасходов = Статья266;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НачислениеОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура СтатьиФинансированияЗаполнитьИспользованиеВБазеСреднегоЗаработка(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиФинансирования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатьиФинансированияЗарплата КАК СтатьиФинансирования
	|ГДЕ
	|	СтатьиФинансирования.ИспользованиеВБазеСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ИспользованиеСтатьиФинансированияВБазеСреднегоЗаработка.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.СтатьиФинансированияЗарплата", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СтатьяОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтатьяОбъект.ИспользованиеВБазеСреднегоЗаработка = Перечисления.ИспользованиеСтатьиФинансированияВБазеСреднегоЗаработка.Используется;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтатьяОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьБухучетСотрудниковПоСписочнымКадровымДокументам(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	БухучетЗарплатыСотрудников.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
	|ГДЕ
	|	&УсловиеДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Сотрудник КАК Сотрудник,
	|	ДокументыКОбработке.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	#ИмяТаблицы КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО Таблица.Ссылка = ДокументыКОбработке.ДокументОснование
	|			И (&УсловиеНеРегистрироватьБухучет)";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&УсловиеДокументСсылка", "БухучетЗарплатыСотрудников.ДокументОснование ССЫЛКА Документ.КадровыйПереводСписком");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", "Документ.КадровыйПереводСписком.Сотрудники");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНеРегистрироватьБухучет", "НЕ Таблица.ИзменитьПодразделениеИДолжность");
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ПараметрыБухучета = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетВоеннослужащих");
		ПараметрыБухучета = Модуль.КадровыйПереводСпискомПараметрыОбновленияБухучетаСотрудников();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыБухучета) Тогда
		
		УсловиеДокументСсылка = СтрШаблон("%1 %2", "БухучетЗарплатыСотрудников.ДокументОснование ССЫЛКА", ПараметрыБухучета.ИмяДокументСсылка);
		УсловиеНеРегистрироватьБухучет = СтрШаблон("%1 %2", "НЕ", ПараметрыБухучета.ИмяПоляРегистрироватьБухучет);
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&УсловиеДокументСсылка", УсловиеДокументСсылка);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ПараметрыБухучета.ИмяТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНеРегистрироватьБухучет", УсловиеНеРегистрироватьБухучет);
		
		Запрос.Текст = ТекстЗапроса;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ТаблицаДанных);
		
	КонецЕсли;
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
	
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.БухучетЗарплатыСотрудников", "ДокументОснование", СтрокаТЗ.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(СтрокаТЗ.ДокументОснование);
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТЗ.Сотрудник);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти



