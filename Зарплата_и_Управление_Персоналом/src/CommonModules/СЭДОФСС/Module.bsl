#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Регистрирует обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриРегистрацииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.2";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c29fbbf1-fe70-11ea-80e6-4cedfb43b11a");
	Обработчик.Процедура       = "СЭДОФСС.ДобавитьРолиИзвещенийВПользовательскиеПрофили";
	Обработчик.Комментарий     = НСтр("ru = 'Добавление ролей извещений ФСС в непоставляемые (пользовательские) профили групп доступа.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.75";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("e39137c3-251e-11ec-80fd-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ИзвещениеФСС.ЗаполнитьВидИзвещений";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение вида извещений ФСС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.76";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c088ea52-25e8-11ec-80fd-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ИзвещениеФСС.ЗаполнитьТаблицуФизическихЛицИзвещений";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение таблицы доступа к извещениям ФСС.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.21.15";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ecd45cb0-7a0f-11ec-83fa-bd5234e4af55");
	Обработчик.Процедура       = "СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО";
	Обработчик.Комментарий     = НСтр("ru = 'Повторная обработка входящих сообщений ФСС СЭДО.'");
	
КонецПроцедуры

// Добавляет роли извещений ФСС в непоставляемые (пользовательские) профили групп доступа.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ДобавитьРолиИзвещенийВПользовательскиеПрофили(ПараметрыОбновления = Неопределено) Экспорт
	Контекст = УправлениеДоступомБЗК.КонтекстДобавляемыхРолей("СЭДОФСС.ДобавитьРолиИзвещенийВПользовательскиеПрофили");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ДобавлениеИзменениеИзвещенийФСС");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ИспользованиеОбработкиОбщиеФормыСЭДОФСС");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ЧтениеИзвещенийФСС");
	
	УправлениеДоступомБЗК.ДобавитьРолиВНепоставляемыеПрофили(Контекст);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

// Повторно загружает входящие сообщения ФСС СЭДО.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ПовторноОбработатьВходящиеСообщенияСЭДО(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК Идентификатор,
	|	ВходящиеСообщенияСЭДОФСС.Организация КАК Организация,
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое,
	|	ВходящиеСообщенияСЭДОФСС.Дата КАК Дата,
	|	ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВходящиеСообщенияСЭДОФСС.ДатаОтправкиПодтверждения КАК ДатаОтправкиПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаПолученияИзвещенияОПолученииПодтверждения КАК ДатаПолученияИзвещенияОПолученииПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаПолученияОшибкиПодтверждения КАК ДатаПолученияОшибкиПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания КАК ДатаСоздания,
	|	ВходящиеСообщенияСЭДОФСС.Новое КАК Новое,
	|	ВходящиеСообщенияСЭДОФСС.ОшибкаОбработкиСообщения КАК ОшибкаОбработкиСообщения,
	|	ВходящиеСообщенияСЭДОФСС.ОшибкаПодтверждения КАК ОшибкаПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ПодтверждениеОтправлено КАК ПодтверждениеОтправлено,
	|	ВходящиеСообщенияСЭДОФСС.Получатель КАК Получатель,
	|	ВходящиеСообщенияСЭДОФСС.Тип КАК Тип,
	|	ВходящиеСообщенияСЭДОФСС.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ВходящиеСообщенияСЭДОФСС.СрокДействия КАК СрокДействия
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	(ВходящиеСообщенияСЭДОФСС.Дата >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаОтправкиПодтверждения >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаПолученияИзвещенияОПолученииПодтверждения >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаПолученияОшибкиПодтверждения >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаСоздания >= &Дата)";
	Запрос.УстановитьПараметр("Дата", НачалоГода(ТекущаяДатаСеанса()));
	
	Сообщение = Новый Структура(
		"ТекстСообщения,
		|Идентификатор,
		|Организация,
		|Содержимое,
		|Дата,
		|ДатаЗагрузки,
		|ДатаОтправкиПодтверждения,
		|ДатаПолученияИзвещенияОПолученииПодтверждения,
		|ДатаПолученияОшибкиПодтверждения,
		|ДатаСоздания,
		|Новое,
		|ОшибкаОбработкиСообщения,
		|ОшибкаПодтверждения,
		|ПодтверждениеОтправлено,
		|Получатель,
		|Тип,
		|ТребуетсяПодтверждение,
		|СрокДействия");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Сообщение, Выборка);
		Сообщение.ТекстСообщения = Выборка.Содержимое.Получить();
		Если Не ЗначениеЗаполнено(Сообщение.ТекстСообщения) Тогда
			Продолжить;
		КонецЕсли;
		ЭлектронныйДокументооборотСФСС.ПриПолученииСодержимогоСообщенияСЭДО(Сообщение.Организация, Сообщение);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ИзвещениеФСС);
	СписокОбъектов.Добавить(Документы.ВходящийЗапросФССДляРасчетаПособия);
	СписокОбъектов.Добавить(Документы.ОтветНаЗапросФССДляРасчетаПособия);
	СписокОбъектов.Добавить(Документы.СведенияОЗастрахованномЛицеФСС);
	СписокОбъектов.Добавить(Документы.РегистрацияСведенийОЗастрахованномЛицеФСС);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "0c61029e-9609-11ea-80e1-4cedfb43b11a", Метаданные.Документы.ИзвещениеФСС);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "48b47e89-54a2-11ec-8100-4cedfb43b11a", Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "3c0f230e-76f6-11ec-8101-4cedfb43b11a", Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "006d287a-462c-11ec-8100-4cedfb43b11a", Метаданные.Документы.СведенияОЗастрахованномЛицеФСС);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d0521718-58eb-11ec-8100-4cedfb43b11a", Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Обработчики.Добавить(Документы.ИзвещениеФСС);
	Обработчики.Добавить(РегистрыСведений.СведенияОЗастрахованныхЛицахФСС);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО.
Процедура ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Загружаются все входящие документы.
	
	Для Каждого Уведомление Из Уведомления Цикл
		
		ТипСообщения = Число(Уведомление.Тип);
		
		Если ТипСообщения = 10 Тогда
			// Извещение из системы "Прямые выплаты страхового обеспечения".
			Документы.ИзвещениеФСС.ПриЗагрузкеУведомленияОНовомИзвещенииПрямыхВыплат(
				Страхователь,
				Уведомление.Идентификатор,
				Уведомление.ТребуетсяПодтверждение);
			ОбработанныеУведомления.Добавить(Уведомление);
		ИначеЕсли ТипСообщения = 100 Тогда
			// Запрос на проверку, подтверждение, корретировку сведений проактивной выплаты страхового обеспечения.
			Документы.ВходящийЗапросФССДляРасчетаПособия.ЗагрузитьУведомлениеОНаличииСообщения100(
				Страхователь,
				Уведомление.Идентификатор,
				Уведомление.ТребуетсяПодтверждение);
			ОбработанныеУведомления.Добавить(Уведомление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеРасшифровкиСообщенияСЭДО.
Процедура ПослеРасшифровкиСообщенияСЭДО(Страхователь, Сообщение, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Загружаются все входящие документы.
	
	ТипСообщения = Число(Сообщение.Тип);
	ИдентификаторСообщения = НРег(СокрЛП(Сообщение.Идентификатор));
	
	Если ТипСообщения = 10 Тогда
		// Извещение из системы "Прямые выплаты страхового обеспечения".
		Документы.ИзвещениеФСС.ПослеРасшифровкиИзвещенияПрямыхВыплат(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли ТипСообщения = 87 Тогда
		// Результат регистрации сведений о застрахованном лице.
		Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.ЗагрузитьСообщение87(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли ТипСообщения = 88 Тогда
		// Информация о несоответствии сведений о застрахованном лице.
		Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.ЗагрузитьСообщение88(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли ТипСообщения = 100 Тогда
		// Запрос на проверку, подтверждение, корретировку сведений проактивной выплаты страхового обеспечения.
		Документы.ВходящийЗапросФССДляРасчетаПособия.ЗагрузитьСообщение100(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли ТипСообщения = 105 Тогда
		// Результат ответа на запрос сведений для расчета и выплаты пособия ФСС.
		РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗагрузитьСообщение105(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО.
Процедура ПослеПолученияОшибокЛогическогоКонтроляСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Загружаются все входящие документы.
	
	// Ошибки логического контроля приходят только для исходящих сообщений.
	ТипСообщения = Число(ИсходноеСообщение.Тип);
	
	Если ТипСообщения = 86 Тогда
		// Сведения о застрахованном лице.
		Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.ЗагрузитьОшибкуСообщения86(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	ИначеЕсли ТипСообщения = 101 Тогда
		// Ответ на запрос ФСС для расчета пособий.
		РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗагрузитьОшибкуСообщения101(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ИзвещениеФСС, Истина);
	Списки.Вставить(Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия, Истина);
	Списки.Вставить(Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия, Истина);
	Списки.Вставить(Метаданные.Документы.СведенияОЗастрахованномЛицеФСС, Истина);
	Списки.Вставить(Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзвещениеФССПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ВходящийЗапросФССДляРасчетаПособияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтветНаЗапросФССДляРасчетаПособияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.СведенияОЗастрахованномЛицеФССПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияОЗастрахованныхЛицахФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.ИзвещениеФСС.Чтение.ГруппыФизическихЛиц
	|Документ.ИзвещениеФСС.Чтение.Организации
	|Документ.ИзвещениеФСС.Изменение.ГруппыФизическихЛиц
	|Документ.ИзвещениеФСС.Изменение.Организации
	|Документ.ВходящийЗапросФССДляРасчетаПособия.Чтение.ГруппыФизическихЛиц
	|Документ.ВходящийЗапросФССДляРасчетаПособия.Чтение.Организации
	|Документ.ВходящийЗапросФССДляРасчетаПособия.Изменение.ГруппыФизическихЛиц
	|Документ.ВходящийЗапросФССДляРасчетаПособия.Изменение.Организации
	|Документ.ОтветНаЗапросФССДляРасчетаПособия.Чтение.ГруппыФизическихЛиц
	|Документ.ОтветНаЗапросФССДляРасчетаПособия.Чтение.Организации
	|Документ.ОтветНаЗапросФССДляРасчетаПособия.Изменение.ГруппыФизическихЛиц
	|Документ.ОтветНаЗапросФССДляРасчетаПособия.Изменение.Организации
	|Документ.СведенияОЗастрахованномЛицеФСС.Чтение.ГруппыФизическихЛиц
	|Документ.СведенияОЗастрахованномЛицеФСС.Чтение.Организации
	|Документ.СведенияОЗастрахованномЛицеФСС.Изменение.ГруппыФизическихЛиц
	|Документ.СведенияОЗастрахованномЛицеФСС.Изменение.Организации
	|Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.Чтение.ГруппыФизическихЛиц
	|Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.Чтение.Организации
	|Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.Изменение.ГруппыФизическихЛиц
	|Документ.РегистрацияСведенийОЗастрахованномЛицеФСС.Изменение.Организации
	|Справочник.ИзвещениеФССПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзвещениеФССПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзвещениеФССПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзвещениеФССПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ВходящийЗапросФССДляРасчетаПособияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВходящийЗапросФССДляРасчетаПособияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВходящийЗапросФССДляРасчетаПособияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВходящийЗапросФССДляРасчетаПособияПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ОтветНаЗапросФССДляРасчетаПособияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОтветНаЗапросФССДляРасчетаПособияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОтветНаЗапросФССДляРасчетаПособияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОтветНаЗапросФССДляРасчетаПособияПрисоединенныеФайлы.Изменение.Организации
	|Справочник.СведенияОЗастрахованномЛицеФССПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СведенияОЗастрахованномЛицеФССПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СведенияОЗастрахованномЛицеФССПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СведенияОЗастрахованномЛицеФССПрисоединенныеФайлы.Изменение.Организации
	|РегистрСведений.СведенияОЗастрахованныхЛицахФСС.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОЗастрахованныхЛицахФСС.Чтение.Организации
	|РегистрСведений.СведенияОЗастрахованныхЛицахФСС.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОЗастрахованныхЛицахФСС.Изменение.Организации
	|РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС.Чтение.Организации
	|РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ОчередьОбработкиКадровыхДанныхФСС.Изменение.Организации
	|РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.Чтение.Организации
	|РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ИзвещениеФСС.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"ГоловнаяОрганизация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.СведенияОЗастрахованномЛицеФСС.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияОбъектов

// См. ПрефиксацияОбъектовПереопределяемый.ПолучитьПрефиксообразующиеРеквизиты.
Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ИзвещениеФСС;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия;
	СтрокаТаблицы.Реквизит = "Организация";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.СведенияОЗастрахованномЛицеФСС;
	СтрокаТаблицы.Реквизит = "Организация";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС;
	СтрокаТаблицы.Реквизит = "ГоловнаяОрганизация";
	
КонецПроцедуры

#КонецОбласти

#Область ДокументБольничныйЛист

Процедура ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ) Экспорт
	
	Попытка
		Документы.ИзвещениеФСС.ПриЗаписиПервичногоДокумента(БольничныйОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ИзвещениеФСС.ПриЗаписиПервичногоДокумента",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			БольничныйОбъект.Ссылка);
	КонецПопытки;
	
	Попытка
		Документы.ВходящийЗапросФССДляРасчетаПособия.ПриЗаписиПервичногоДокумента(БольничныйОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ВходящийЗапросФССДляРасчетаПособия.ПриЗаписиПервичногоДокумента",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			БольничныйОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиЗаявленияНаВыплатуПособия(ЗаявлениеОбъект, Отказ) Экспорт
	
	Попытка
		Документы.ИзвещениеФСС.ПриЗаписиЗаявленияНаВыплатуПособия(ЗаявлениеОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ИзвещениеФСС.ПриЗаписиЗаявленияНаВыплатуПособия",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ЗаявлениеОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЭДО

// АПК:581-выкл Экспортные методы используются в расширенной подсистеме.

// Возвращает признак наличия прав на обмен с ФСС.
Функция ЕстьПравоОбмена() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЖурналЗапросовКСерверамФСС);
КонецФункции

// Кидает исключение если функция ЕстьПравоОбмена вернула Ложь.
Процедура ПроверитьНаличиеПраваОбмена() Экспорт
	Если Не ЕстьПравоОбмена() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на обмен с СЭДО ФСС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// Проверяет наличие права обмена электронными документами с ФСС.
Функция ДоступенОбменЧерезСЭДО() Экспорт
	// АПК:515-выкл Роль выполняет функцию флажка в библиотеке регламентированной отчетности.
	Возврат Пользователи.РолиДоступны("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами", , Ложь);
	// АПК:515-вкл
КонецФункции

// Фиксирует ошибку обработки сообщения.
//
// Параметры:
//   Результат - Структура - Результат обработки сообщения. Передается из параметров переопределяемого метода.
//   ИдентификаторСообщения - Строка - Идентификатор сообщения. Передается из параметров переопределяемого метода.
//   ТекстОшибки - Строка - Текст ошибки обработки сообщения.
//
Процедура ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки) Экспорт
	Результат.ОшибкаОбработки = Истина;
	Результат.ОписаниеОшибки = СтрШаблон(
		НСтр("ru = 'Ошибка обработки сообщения %1: %2
			|
			|'"),
		ИдентификаторСообщения,
		ТекстОшибки);
КонецПроцедуры

// Возвращает дату формирования сообщения СЭДО.
Функция ДатаСообщения(ИдентификаторСообщения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Дата КАК Дата,
	|	ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторСообщения);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			Дата = Выборка.Дата;
		Иначе
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДатаЗагрузки) И Выборка.ДатаЗагрузки < Дата Тогда
			Дата = Выборка.ДатаЗагрузки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДатаСоздания) И Выборка.ДатаСоздания < Дата Тогда
			Дата = Выборка.ДатаСоздания;
		КонецЕсли;
		Возврат Дата;
	КонецЕсли;
	Возврат ТекущаяДатаСеанса();
КонецФункции

// АПК:581-вкл

#КонецОбласти

#Область СтрахователиФСС

// Возвращает сведения об страхователе организации с учетом проектных решений прикладной конфигурации.
//
// Параметры:
//   Организация   - СправочникСсылка.Организации
//   ИменаПолей    - Строка             - Требуемые сведения.
//   ДатаПолучения - Дата, Неопределено - Дата получения сведений.
//
// Возвращаемое значение:
//   Структура
//
Функция СведенияОСтрахователе(Знач Организация, Знач ИменаПолей, Знач ДатаПолучения = Неопределено) Экспорт
	Страхователь = СтраховательОрганизации(Организация, ДатаПолучения);
	Сведения = ЗарплатаКадры.СведенияОбОрганизации(Страхователь, ИменаПолей, ДатаПолучения);
	Сведения.Вставить("Страхователь", Страхователь);
	Возврат Сведения;
КонецФункции

// Возвращает страхователя организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Страхователь ФСС, отчитывающийся за филиал.
//
Функция СтраховательОрганизации(Организация, Знач ДатаПолучения = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Организация;
	КонецЕсли;
	Страхователь = УчетСтраховыхВзносов.ОтчитывающаясяПоВзносамОрганизация(Организация, ДатаПолучения);
	Возврат ?(ЗначениеЗаполнено(Страхователь), Страхователь, Организация);
КонецФункции

// Для массива организаций возвращает массив страхователей.
//
// Параметры:
//   Организации - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Организации
//
Функция СтрахователиОрганизаций(Организации, ДатаПолучения = Неопределено) Экспорт
	Результат = Новый Массив;
	Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
		Результат.Добавить(СтраховательОрганизации(Организации, ДатаПолучения));
	ИначеЕсли ТипЗнч(Организации) = Тип("Массив") Тогда
		Для Каждого Организация Из Организации Цикл
			ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Результат, СтраховательОрганизации(Организация, ДатаПолучения));
		КонецЦикла;
	Иначе
		// Вызов исключения.
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СЭДОФСС.СтрахователиОрганизаций",
			"Организации",
			Организации,
			Новый ОписаниеТипов("СправочникСсылка.Организации, Массив"));
	КонецЕсли;
	Возврат Результат;
КонецФункции

// В таблице значений с колонкой "Организация" заполняет колонку "Страхователь".
//   В случае отсутствия - добавляет колонку "Страхователь".
//
// Параметры:
//   ТаблицаЗначений - ТаблицаЗначений - Заполняемая таблица.
//       * Организация - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
Процедура ЗаполнитьСтрахователяВТаблицеЗначений(ТаблицаЗначений, ДатаПолучения = Неопределено) Экспорт
	Если ТаблицаЗначений.Колонки.Найти("Страхователь") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Страхователь", Метаданные.ОпределяемыеТипы.Организация.Тип);
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы.Страхователь = СтраховательОрганизации(СтрокаТаблицы.Организация, ДатаПолучения);
	КонецЦикла;
КонецПроцедуры

// Возвращает массив организаций страхователя.
//
// Параметры:
//   Страхователь - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Организации
//
Функция ОрганизацииСтрахователя(Страхователь, ДатаПолучения = Неопределено) Экспорт
	Филиалы = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Страхователь, ДатаПолучения);
	ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Филиалы, Страхователь);
	Возврат Филиалы;
КонецФункции

// Возвращает Истина если у страхователя есть филиалы без самостоятельной регистрации в ФСС.
//
// Параметры:
//   Страхователь - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   Булево
//
Функция УСтрахователяЕстьФилиалыВзаимодействующиеОтЕгоИмени(Страхователь, ДатаПолучения = Неопределено) Экспорт
	Филиалы = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Страхователь, ДатаПолучения);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Филиалы, Страхователь);
	Возврат Филиалы.Количество() > 0;
КонецФункции

// Возвращает Истина если для данной организации поле "Страхователь" следует показывать пользователю.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Страхователь - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   Булево
//
Функция ВидимостьПоляСтрахователь(Организация, Страхователь, ДатаПолучения = Неопределено) Экспорт
	Если Организация <> Страхователь Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат УСтрахователяЕстьФилиалыВзаимодействующиеОтЕгоИмени(Страхователь, ДатаПолучения);
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

Функция ЕстьПравоПросмотраЖурнала() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналРегистрации);
КонецФункции

Функция ИмяСобытияЖурнала() Экспорт
	Возврат НСтр("ru = 'Обмен с ФСС.СЭДО'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

#КонецОбласти

#Область ИсправлениеДокументов

// См. ИсправлениеДокументовЗарплатаКадры.ПоследнийДокументЦепочкиИсправлений.
Функция ПоследнийДокументЦепочкиИсправлений(Ссылка) Экспорт
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов") Тогда
		МодульИсправлениеДокументовЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("ИсправлениеДокументовЗарплатаКадры");
		Возврат МодульИсправлениеДокументовЗарплатаКадры.ПоследнийДокументЦепочкиИсправлений(Ссылка);
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Процедура ОчередьОбработкиКадровыхДанныхФСС() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС);
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ОбработчикФоновогоЗадания();
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами      = Истина;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Перечисления

Функция ВидОсобойЗоныЧислом(ВидОсобойЗоны) Экспорт
	Менеджер = Перечисления.ВидыОсобойЗоныПроживанияРаботы;
	Если ВидОсобойЗоны = Менеджер.ЗонаСПравомНаОтселение Тогда
		Возврат 1;
	ИначеЕсли ВидОсобойЗоны = Менеджер.ЗонаСЛьготнымСоциальноЭкономическимСтатусом Тогда
		Возврат 2;
	ИначеЕсли ВидОсобойЗоны = Менеджер.ЗонаОтселения Тогда
		Возврат 3;
	ИначеЕсли ВидОсобойЗоны = Менеджер.ЗонаЗагрязненияПриАварииПОМаяк Тогда
		Возврат 4;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПричинаПредоставленияЛьготыЧислом(ПричинаПредоставленияЛьготы) Экспорт
	Менеджер = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом;
	Если ПричинаПредоставленияЛьготы = Менеджер.Чернобыль Тогда
		Возврат 1;
	ИначеЕсли ПричинаПредоставленияЛьготы = Менеджер.Семипалатинск Тогда
		Возврат 2;
	ИначеЕсли ПричинаПредоставленияЛьготы = Менеджер.Маяк Тогда
		Возврат 3;
	ИначеЕсли ПричинаПредоставленияЛьготы = Менеджер.ПодразделенияОсобогоРиска Тогда
		Возврат 4;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ИсходящиеДокументы

Функция КонтекстЭкспортаИсходящихДокументов(МассивСсылок, ДляПросмотраXML) Экспорт
	ДляЗаписиВФайл = Не ДляПросмотраXML;
	
	
	
КонецФункции

#КонецОбласти

#Область ПроизводственныйКалендарь

Функция БлижайшийРабочийДень(Дата, НомерДня = 0) Экспорт
	БлижайшиеРабочиеДни = БлижайшиеРабочиеДни(Дата, НомерДня + 1);
	Количество = БлижайшиеРабочиеДни.Количество();
	Если Количество = 0 Тогда
		Возврат Дата;
	Иначе
		Возврат БлижайшиеРабочиеДни[Количество - 1];
	КонецЕсли;
КонецФункции

Функция БлижайшиеРабочиеДни(Знач ДатаНачала, Знач Количество)
	РабочиеДни = Новый Массив;
	Если Количество < 1 Тогда
		Возврат РабочиеДни;
	КонецЕсли;
	
	ДатаНачала = НачалоДня(ДатаНачала);
	
	// Наполнение массива календарных дней, от которых будет отталкиваться запрос по рабочим дням.
	// Коэффициент компенсирует праздники и выходные с небольшим запасом, для минимизации обращений к СУБД.
	КалендарныеДни = Новый Массив;
	ВГраницаКалендарныхДней = ?(Количество < 2, 0, Цел(Количество * 1.5));
	Для ИндексДня = 0 По ВГраницаКалендарныхДней Цикл
		КалендарныеДни.Добавить(ДатаНачала + 86400 * ИндексДня);
	КонецЦикла;
	
	РабочиеДниКоличество = 0;
	Календарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Если Не ЗначениеЗаполнено(Календарь) Тогда
		Возврат РабочиеДни;
	КонецЕсли;
	БлижайшиеРабочиеДаты = КалендарныеГрафики.БлижайшиеРабочиеДаты(Календарь, КалендарныеДни);
	Если БлижайшиеРабочиеДаты <> Неопределено Тогда
		
		Для Каждого КалендарныйДень Из КалендарныеДни Цикл
			РабочийДень = БлижайшиеРабочиеДаты[КалендарныйДень];
			Если ТипЗнч(РабочийДень) = Тип("Дата")
				И РабочийДень >= КалендарныйДень
				И РабочиеДни.Найти(РабочийДень) = Неопределено Тогда
				РабочиеДни.Добавить(РабочийДень);
				РабочиеДниКоличество = РабочиеДниКоличество + 1;
				Если РабочиеДниКоличество = Количество Тогда
					Возврат РабочиеДни;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если найдено недостаточно рабочих дней (например, часть календарных дней попало на длинные праздники),
		// то выполняется второй запрос с недостающими днями.
		Если РабочиеДниКоличество > 0 Тогда
			ОсталосьДней = Количество - РабочиеДниКоличество;
			СледующийДень = РабочиеДни[РабочиеДниКоличество-1] + 86400;
			БлижайшиеРабочиеДни = БлижайшиеРабочиеДни(СледующийДень, ОсталосьДней);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РабочиеДни, БлижайшиеРабочиеДни, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РабочиеДни;
КонецФункции

#КонецОбласти

#Область Проверки

Процедура ПроверитьРайонныйКоэффициент(Отказ, Объект, ИмяРеквизита, Обязательный = Ложь) Экспорт
	РайонныйКоэффициент = Объект[ИмяРеквизита];
	Если Не ЗначениеЗаполнено(РайонныйКоэффициент) Тогда
		Если Обязательный Тогда
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, Объект, ИмяРеквизита);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗначениеДопустимо = (
		РайонныйКоэффициент = 1
		Или РайонныйКоэффициент = 1.10
		Или РайонныйКоэффициент = 1.15
		Или РайонныйКоэффициент = 1.20
		Или РайонныйКоэффициент = 1.25
		Или РайонныйКоэффициент = 1.30
		Или РайонныйКоэффициент = 1.35
		Или РайонныйКоэффициент = 1.40
		Или РайонныйКоэффициент = 1.50
		Или РайонныйКоэффициент = 1.60
		Или РайонныйКоэффициент = 1.70
		Или РайонныйКоэффициент = 1.80
		Или РайонныйКоэффициент = 2.00
		Или РайонныйКоэффициент = 3.00);
	
	Если Не ЗначениеДопустимо Тогда
		Текст = НСтр("ru = 'Указано недопустимое значение районного коэффициента.'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНомерИзвещенияФСС(Отказ, Объект, ИмяНомера) Экспорт
	
	Номер = Объект[ИмяНомера];
	Если Не ЗначениеЗаполнено(Номер) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, Объект, ИмяНомера);
	ИначеЕсли СтрДлина(Номер) > 12 Тогда
		Текст = НСтр("ru = 'В номере извещения ФСС %1 символов, а должно быть не более 12.'");
		Текст = СтрШаблон(Текст, СтрДлина(Номер));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяНомера);
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(Номер);
		Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Текст = НСтр("ru = 'В номере извещения ФСС должны быть только цифры (%1 - не цифра).'");
			Иначе
				Текст = НСтр("ru = 'В номере извещения ФСС должны быть только цифры (%1 - не цифры).'");
			КонецЕсли;
			Текст = СтрШаблон(Текст, ЛишниеСимволы);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяНомера);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


Функция ПредставлениеСписка(Список, ОграничениеДлины, Разделитель = "; ") Экспорт
	Всего = Список.Количество();
	Если Всего = 0 Тогда
		Возврат "";
	КонецЕсли;
	Первый            = Истина;
	Обработано        = 0;
	ИспользованоДлины = 0;
	ДлинаВсего        = Цел(Log10(Всего)) + 4;
	ДлинаРазделителя  = СтрДлина(Разделитель);
	
	Представления = Новый Массив;
	Для Каждого Элемент Из Список Цикл
		Обработано = Обработано + 1;
		Представление = СокрЛП(?(ЗначениеЗаполнено(Элемент.Представление), Элемент.Представление, Строка(Элемент.Значение)));
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		Длина = СтрДлина(Представление);
		ИспользованоДлины = ИспользованоДлины + Длина + ?(Первый, 0, ДлинаРазделителя);
		Превышение = ИспользованоДлины - ОграничениеДлины;
		Если Обработано < Всего Тогда
			Превышение = Превышение + ДлинаВсего;
		КонецЕсли;
		Если Превышение > 0 Тогда
			ВмещаетсяБукв = Длина - Превышение;
			Если ВмещаетсяБукв > 10 Тогда
				Первый = Ложь;
				Представления.Добавить(Лев(Представление, ВмещаетсяБукв - 3) + "...");
			КонецЕсли;
			Прервать;
		Иначе
			Первый = Ложь;
			Представления.Добавить(Представление);
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтрСоединить(Представления, Разделитель);
	Если Обработано < Всего Тогда
		Результат = Результат + " (" + Формат(Всего, "ЧГ=") + ")";
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает сведения о виде документа: Представление, ЭтоПаспортРФ, КодМВД.
//
// Параметры:
//   Представление             - Строка
//   ИмяПредопределенныхДанных - Строка
//   КодМВД                    - Строка
//
// Возвращаемое значение:
//   Структура
//       * Представление - Строка
//       * ЭтоПаспортРФ  - Булево
//       * КодМВД        - Строка
//
Функция СведенияОВидеДокумента(Представление, ИмяПредопределенныхДанных, КодМВД) Экспорт
	ЭтоПаспортРФ = СтрСравнить(ИмяПредопределенныхДанных, "ПаспортРФ") = 0 Или КодМВД = "21";
	
	Результат = Новый Структура("КодМВД, ЭтоПаспортРФ, Представление");
	Результат.КодМВД        = КодМВД;
	Результат.ЭтоПаспортРФ  = ЭтоПаспортРФ;
	Результат.Представление = ?(ЭтоПаспортРФ, НСтр("ru = 'Паспорт'"), Представление);
	Возврат Результат;
КонецФункции

Функция ГражданствоРФ(КодСтраныГражданства) Экспорт
	Возврат КодСтраныГражданства = "643";
КонецФункции

Функция ТекстXML(Идентификатор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор = &Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналЗапросовКСерверамФСС.ДанныеЗапроса
	|ИЗ
	|	РегистрСведений.ЖурналЗапросовКСерверамФСС КАК ЖурналЗапросовКСерверамФСС
	|ГДЕ
	|	ЖурналЗапросовКСерверамФСС.Идентификатор = &Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналЗапросовКСерверамФСС.ОтветСервера
	|ИЗ
	|	РегистрСведений.ЖурналЗапросовКСерверамФСС КАК ЖурналЗапросовКСерверамФСС
	|ГДЕ
	|	ЖурналЗапросовКСерверамФСС.ИдентификаторФСС = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0].Содержимое.Получить();
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ЕстьПравоПросмотраФактическихНачисленийВДокументе(Документ) Экспорт
	Возврат ПраваНаФактическиеНачисленияВДокументе(Документ).Просмотр;
КонецФункции

Функция ПраваНаФактическиеНачисленияВДокументе(Документ) Экспорт
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульМногофункциональныеДокументыБЗК = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗК");
		ПраваНаДокумент = МодульМногофункциональныеДокументыБЗК.ПраваНаДокумент(Документ);
		Возврат ПраваНаДокумент["НачисленнаяЗарплата"];
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	
	ПраваНаРаздел = Новый Структура;
	ПраваНаРаздел.Вставить("Просмотр", ПравоДоступа("Чтение", Метаданные.Документы.НачислениеЗарплаты));
	ПраваНаРаздел.Вставить("Редактирование", ПравоДоступа("Изменение", Метаданные.Документы.НачислениеЗарплаты));
	Возврат ПраваНаРаздел;
КонецФункции

Функция ПредставлениеУдостоверенияЛичности(ВидДокумента, Серия, Номер, ДатаВыдачи,
	СрокДействия     = Неопределено,
	КемВыдан         = Неопределено,
	КодПодразделения = Неопределено) Экспорт
	
	Представления = Новый Массив;
	
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(ВидДокумента);
	Если ЗначениеЗаполнено(СведенияОВидеДокумента.Представление) Тогда
		Представления.Добавить(СведенияОВидеДокумента.Представление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Серия) Тогда
		Представления.Добавить(" " + СтрЗаменить(Серия, " ", ""));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номер) Тогда
		Представления.Добавить(" № " + Номер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаВыдачи) Или ЗначениеЗаполнено(КемВыдан) Тогда
		Представления.Добавить(СокрП(СтрШаблон(НСтр("ru = ', выдан %1 %2'"), Формат(ДатаВыдачи, "ДЛФ=D"), КемВыдан)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокДействия) Тогда
		Представления.Добавить(СокрП(СтрШаблон(НСтр("ru = ', действует до %1'"), Формат(СрокДействия, "ДЛФ=D"))));
	КонецЕсли;
	
	Если СведенияОВидеДокумента.ЭтоПаспортРФ И ЗначениеЗаполнено(КодПодразделения) Тогда
		Представления.Добавить(СокрП(СтрШаблон(НСтр("ru = ', код подр. %1'"), КодПодразделения)));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидДокумента) И Представления.Количество() > 0 Тогда
		Представления.Вставить(0, НСтр("ru = '<Вид документа не заполнен>'"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, "");
КонецФункции

Функция ПредставлениеСпособаВыплаты(Документ) Экспорт
	Если Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		Если ЗначениеЗаполнено(Документ.КартаМИР) Тогда
			Возврат СтрШаблон(НСтр("ru = 'На карту МИР %1 '"), Строка(Документ.КартаМИР));
		КонецЕсли;
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		Если ЗначениеЗаполнено(Документ.НомерСчета) Тогда
			Возврат СтрШаблон(НСтр("ru = 'На счет в банке %1'"), Документ.Банк);
		КонецЕсли;
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		Если ЗначениеЗаполнено(Документ.АдресПроживания) Тогда
			ВидВДательномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(Документ.АдресПроживанияВид),
				3,
				Документ.АдресПроживанияВид);
			Возврат СтрШаблон(
				НСтр("ru = 'По %1: %2'"),
				НРег(ВидВДательномПадеже),
				СЭДОФСС.КраткоеПредставлениеАдреса(Документ.АдресПроживания));
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция КраткоеПредставлениеАдреса(ЗначениеАдреса) Экспорт
	ПараметрыСведенийОбАдресе = Новый Структура;
	ПараметрыСведенийОбАдресе.Вставить("БезПредставлений", Истина);
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдреса, ПараметрыСведенийОбАдресе);
	
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
		Представления.Добавить(СведенияОбАдресе.Город);
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт) Тогда
		Представления.Добавить(СведенияОбАдресе.НаселенныйПункт);
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.Регион) Тогда
		Представления.Добавить(СведенияОбАдресе.Регион);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СведенияОбАдресе.Улица) Тогда
		Представления.Добавить(НРег(СведенияОбАдресе.УлицаТипКраткий) + " " + СведенияОбАдресе.Улица);
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.Территория) Тогда
		Представления.Добавить(НРег(СведенияОбАдресе.ТерриторияТипКраткий) + " " + СведенияОбАдресе.Территория);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Здание.Номер) Тогда
		Представления.Добавить(НРег(СведенияОбАдресе.Здание.ТипЗдания) + " " + СведенияОбАдресе.Здание.Номер);
	КонецЕсли;
	
	Корпус = КонтактнаяИнформацияБЗК.ПредставлениеКорпусовКраткое(СведенияОбАдресе, ", ", " ");
	Если ЗначениеЗаполнено(Корпус) Тогда
		Представления.Добавить(НРег(Корпус));
	КонецЕсли;
	
	Помещение = КонтактнаяИнформацияБЗК.ПредставлениеПомещенийКраткое(СведенияОбАдресе, ", ", " ");
	Если ЗначениеЗаполнено(Помещение) Тогда
		Представления.Добавить(НРег(Помещение));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

Функция КодСтатусаНалогоплательщика(СтатусНалогоплательщика) Экспорт
	
	// Возвращает код статуса налогоплательщика:
	// 0 - не является налоговым резидентом Российской Федерации;
	// 1 - является налоговым резидентом Российской Федерации (кроме налогоплательщиков,
	//     осуществляющих трудовую деятельность по найму в Российской Федерации на основании патента);
	// 2 - высококвалифицированный специалист не является налоговым резидентом Российской Федерации;
	// 3 - участник Государственной программы по оказанию содействия добровольному переселению
	//     в Российскую Федерацию соотечественников, проживающих за рубежом
	//     (член экипажа судна, плавающего под Государственным флагом Российской Федерации),
	//     не является налоговым резидентом Российской Федерации;
	// 4 - иностранный гражданин (лицо без гражданства) признан беженцем 
	//     или получивший временное убежище на территории Российской Федерации,
	//     не является налоговым резидентом Российской Федерации;
	// 5 - иностранный гражданин, осуществляет трудовую деятельность по найму в Российской Федерации на основании патента.
	
	ИмяПредопределенного = НРег(ИмяСтатусаНалогоплательщика(СтатусНалогоплательщика));
	
	Если ИмяПредопределенного = НРег("Нерезидент") Тогда
		
		Возврат 0;
		
	ИначеЕсли ИмяПредопределенного = НРег("Резидент")
		Или ИмяПредопределенного = НРег("ГражданинСтраныЕАЭС") Тогда
		
		Возврат 1;
		
	ИначеЕсли ИмяПредопределенного = НРег("ВысококвалифицированныйИностранныйСпециалист") Тогда
		
		Возврат 2;
		
	ИначеЕсли ИмяПредопределенного = НРег("УчастникПрограммыПоПереселениюСоотечественников")
		Или ИмяПредопределенного = НРег("ЧленЭкипажаСуднаПодФлагомРФ") Тогда
		
		Возврат 3;
		
	ИначеЕсли ИмяПредопределенного = НРег("Беженцы") Тогда
		
		Возврат 4;
		
	ИначеЕсли ИмяПредопределенного = НРег("НерезидентРаботающийНаОснованииПатента") Тогда
		
		Возврат 5;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Возвращает имя предопределенного элемента справочника СтатусыНалогоплательщиковПоНДФЛ.
Функция ИмяСтатусаНалогоплательщика(СтатусНалогоплательщика)
	Если Не ЗначениеЗаполнено(СтатусНалогоплательщика) Тогда
		Возврат "";
	ИначеЕсли ТипЗнч(СтатусНалогоплательщика) <> Тип("СправочникСсылка.СтатусыНалогоплательщиковПоНДФЛ") Тогда
		Возврат Строка(СтатусНалогоплательщика);
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатусНалогоплательщика, "ИмяПредопределенныхДанных");
	КонецЕсли;
КонецФункции

Функция СписокВыбораКатегорийЗастрахованныхЛиц(СписокВыбора = Неопределено) Экспорт
	Если СписокВыбора = Неопределено Тогда
		СписокВыбора = Новый СписокЗначений;
	Иначе
		СписокВыбора.Очистить();
	КонецЕсли;
	СписокВыбора.Добавить("INSURED", НСтр("ru = 'Застрахованное лицо'"));
	СписокВыбора.Добавить("PRISONER", НСтр("ru = 'Oсужденное к лишению свободы лицо, привлекаемое к оплачиваемому труду'"));
	СписокВыбора.Добавить("VOLUNTEER", НСтр("ru = 'Лицо добровольно вступившие в правоотношения по ОСС по ВНИМ'"));
	Возврат СписокВыбора;
КонецФункции

Функция СписокВыбораПричинИсправления(СписокВыбора = Неопределено) Экспорт
	Если СписокВыбора = Неопределено Тогда
		СписокВыбора = Новый СписокЗначений;
	Иначе
		СписокВыбора.Очистить();
	КонецЕсли;
	
	СписокВыбора.Добавить("01", НСтр("ru = 'Представлены дополнительные сведения о выплатах в расчетном периоде'"));
	СписокВыбора.Добавить("02", НСтр("ru = 'Поступление от застрахованного лица заявления о замене одного года или двух лет расчетного периода предшествующими годами'"));
	СписокВыбора.Добавить("03", НСтр("ru = 'По результатам документальной выездной (камеральной) проверки'"));
	СписокВыбора.Добавить("04", НСтр("ru = 'Перерасчет листка нетрудоспособности при признании несчастного случая на производстве страховым'"));
	СписокВыбора.Добавить("05", НСтр("ru = 'Перерасчет листка нетрудоспособности в случае ошибки в расчете работодателя'"));
	СписокВыбора.Добавить("06", НСтр("ru = 'Иное'"));
	
	Для Каждого Элемент Из СписокВыбора Цикл
		Элемент.Представление = Элемент.Значение + ". " + Элемент.Представление;
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции

Процедура ПриСозданииФормыЗапросаИлиОтветаДляРасчетаПособия(Форма, ЭтоФормаСписка) Экспорт
	Элементы = Форма.Элементы;
	
	Ежемесячное    = Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком;
	Единовременное = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка;
	
	ДатаНачала     = '20220101';
	ДатаОкончания  = ДатаОкончанияКонтроляНаличияЗаявленийНаОтпускПоУходу();
	РасширеннаяРеализация = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы");
	
	Если ЭтоФормаСписка Тогда
		// Представление вида пособия.
		ОформлениеКД = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Форма.Список, "ВидПособия");
		ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ОформлениеКД, "ВидПособия", "=", Ежемесячное);
		ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ОформлениеКД, "Текст", Строка(Единовременное));
		
		// Контроль наличия заявлений на отпуск по уходу за ребенком.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ежемесячное",                       Ежемесячное);
		Запрос.УстановитьПараметр("ДатаНачала",                        ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",                     ДатаОкончания);
		Запрос.УстановитьПараметр("МаксимальнаяДатаОформленияОтпуска", ДобавитьМесяц(ДатаОкончания, 12));
		Если РасширеннаяРеализация Тогда
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ОтветНаЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
			|	ОтветНаЗапросФССДляРасчетаПособия.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ОтветНаЗапросФССДляРасчетаПособия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА ОтветНаЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &ДатаНачала
			|		ИНАЧЕ ОтветНаЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаНачала
			|	КОНЕЦ КАК ОтпускПоУходуДатаНачала,
			|	ВЫБОР
			|		КОГДА ОтветНаЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаОкончания >= &МаксимальнаяДатаОформленияОтпуска
			|			ТОГДА ОтветНаЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаОкончания
			|		ИНАЧЕ &МаксимальнаяДатаОформленияОтпуска
			|	КОНЕЦ КАК ОтпускПоУходуДатаОкончания
			|ПОМЕСТИТЬ ВТОтветы
			|ИЗ
			|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФССДляРасчетаПособия
			|ГДЕ
			|	ОтветНаЗапросФССДляРасчетаПособия.ДатаСоздания <= &ДатаОкончания
			|	И ОтветНаЗапросФССДляРасчетаПособия.ВидПособия = &Ежемесячное
			|	И ОтветНаЗапросФССДляРасчетаПособия.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеСостоянийСотрудников.Регистратор КАК Ссылка,
			|	ВТОтветы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВТОтветы.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВТОтветы.ОтпускПоУходуДатаНачала КАК ОтпускПоУходуДатаНачала,
			|	ВТОтветы.ОтпускПоУходуДатаОкончания КАК ОтпускПоУходуДатаОкончания
			|ИЗ
			|	ВТОтветы КАК ВТОтветы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО (ВТОтветы.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
			|			И (ВТОтветы.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
			|		ПО (Сотрудники.Ссылка = ДанныеСостоянийСотрудников.Сотрудник)
			|			И (ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком))
			|			И (НЕ ДанныеСостоянийСотрудников.Сторно)
			|			И ВТОтветы.ОтпускПоУходуДатаОкончания >= ДанныеСостоянийСотрудников.Начало
			|			И (ВТОтветы.ОтпускПоУходуДатаНачала <= ДанныеСостоянийСотрудников.Окончание
			|				ИЛИ ДанныеСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1))
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудникаНаВыплатуПособия
			|		ПО ВТОтветы.ФизическоеЛицо = ЗаявлениеСотрудникаНаВыплатуПособия.ФизическоеЛицо
			|			И (ЗаявлениеСотрудникаНаВыплатуПособия.ВидПособия = &Ежемесячное)
			|			И ВТОтветы.ГоловнаяОрганизация = ЗаявлениеСотрудникаНаВыплатуПособия.ГоловнаяОрганизация
			|			И ВТОтветы.ОтпускПоУходуДатаНачала <= ЗаявлениеСотрудникаНаВыплатуПособия.ДатаОкончанияОтпускаПоУходуЗаРебенком
			|			И ВТОтветы.ОтпускПоУходуДатаОкончания >= ЗаявлениеСотрудникаНаВыплатуПособия.ДатаНачалаОтпускаПоУходуЗаРебенком
			|			И (ЗаявлениеСотрудникаНаВыплатуПособия.Проведен)
			|ГДЕ
			|	ЗаявлениеСотрудникаНаВыплатуПособия.Ссылка ЕСТЬ NULL";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ОтветНаЗапросФССДляРасчетаПособия.Ссылка КАК Ссылка,
			|	ОтветНаЗапросФССДляРасчетаПособия.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ОтветНаЗапросФССДляРасчетаПособия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА ОтветНаЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &ДатаНачала
			|		ИНАЧЕ ОтветНаЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаНачала
			|	КОНЕЦ КАК ОтпускПоУходуДатаНачала,
			|	ВЫБОР
			|		КОГДА ОтветНаЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаОкончания >= &МаксимальнаяДатаОформленияОтпуска
			|			ТОГДА ОтветНаЗапросФССДляРасчетаПособия.ОтпускПоУходуДатаОкончания
			|		ИНАЧЕ &МаксимальнаяДатаОформленияОтпуска
			|	КОНЕЦ КАК ОтпускПоУходуДатаОкончания
			|ПОМЕСТИТЬ ВТОтветы
			|ИЗ
			|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФССДляРасчетаПособия
			|ГДЕ
			|	ОтветНаЗапросФССДляРасчетаПособия.ДатаСоздания <= &ДатаОкончания
			|	И ОтветНаЗапросФССДляРасчетаПособия.ВидПособия = &Ежемесячное
			|	И ОтветНаЗапросФССДляРасчетаПособия.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТОтветы.Ссылка КАК Ссылка,
			|	ВТОтветы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВТОтветы.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВТОтветы.ОтпускПоУходуДатаНачала КАК ОтпускПоУходуДатаНачала,
			|	ВТОтветы.ОтпускПоУходуДатаОкончания КАК ОтпускПоУходуДатаОкончания
			|ИЗ
			|	ВТОтветы КАК ВТОтветы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудникаНаВыплатуПособия
			|		ПО ВТОтветы.ФизическоеЛицо = ЗаявлениеСотрудникаНаВыплатуПособия.ФизическоеЛицо
			|			И (ЗаявлениеСотрудникаНаВыплатуПособия.ВидПособия = &Ежемесячное)
			|			И ВТОтветы.ГоловнаяОрганизация = ЗаявлениеСотрудникаНаВыплатуПособия.ГоловнаяОрганизация
			|			И ВТОтветы.ОтпускПоУходуДатаНачала <= ЗаявлениеСотрудникаНаВыплатуПособия.ДатаОкончанияОтпускаПоУходуЗаРебенком
			|			И ВТОтветы.ОтпускПоУходуДатаОкончания >= ЗаявлениеСотрудникаНаВыплатуПособия.ДатаНачалаОтпускаПоУходуЗаРебенком
			|			И (ЗаявлениеСотрудникаНаВыплатуПособия.Проведен)
			|ГДЕ
			|	ЗаявлениеСотрудникаНаВыплатуПособия.Ссылка ЕСТЬ NULL";
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Количество = Выборка.Количество();
		Если Количество > 0 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Внимание. Пособия по уходу за ребенком по прежнему оформляются в форме сведений для реестра прямых выплат.
				|Рекомендуется проверить что для сотрудников оформлены соответствующие документы:'");
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(ЗаголовокПредупреждения);
			Номер = 0;
			Если Количество < 10 Тогда
				КВыводу  = Количество;
				Осталось = 0;
			Иначе
				КВыводу  = 5;
				Осталось = Количество - КВыводу;
			КонецЕсли;
			Шаблон = "%1. <a href=""%2"">%3</a>";
			Пока Выборка.Следующий() Цикл
				Номер = Номер + 1;
				МассивСтрок.Добавить(СтрШаблон(Шаблон, Номер, ПолучитьНавигационнуюСсылку(Выборка.Ссылка), Выборка.ФизическоеЛицо));
				Если Номер = КВыводу Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Осталось > 0 Тогда
				МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'И еще %1 сотрудников...'"), Осталось));
			КонецЕсли;
			ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(МассивСтрок, Символы.ПС));
			Декорация = Элементы.Добавить("ГруппаОтсутствиеЗаявленийНаОтпускПоУходу", Тип("ДекорацияФормы"));
			Декорация.Вид = ВидДекорацииФормы.Надпись;
			Декорация.Заголовок = Новый ФорматированнаяСтрока(БиблиотекаКартинок.Предупреждение, " ", ФорматированнаяСтрока);
			Декорация.АвтоМаксимальнаяШирина = Ложь;
			Декорация.МаксимальнаяШирина = 80;
		КонецЕсли;
		
	Иначе
		// Представление вида пособия.
		Элементы.ВидПособия.РежимВыбораИзСписка = Истина;
		СписокВыбора = Элементы.ВидПособия.СписокВыбора;
		СписокВыбора.Добавить(Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности);
		СписокВыбора.Добавить(Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам);
		СписокВыбора.Добавить(
			Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком,
			Строка(Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка));
		
		// Контроль наличия заявлений на отпуск по уходу за ребенком.
		Объект = Форма.Объект;
		ДатаОтправки = ОбщегоНазначенияБЗК.ЗначениеСвойства(Объект, "ДатаОтправки");
		Если Объект.ВидПособия = Ежемесячное
			И (ДатаОтправки = Неопределено Или ЗначениеЗаполнено(ДатаОтправки))
			И ЗначениеЗаполнено(Объект.ФизическоеЛицо)
			И Объект.ДатаСоздания >= ДатаНачала
			И Объект.ДатаСоздания <= ДатаОкончания Тогда
			
			Если ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаНачала) Тогда
				ОтпускПоУходуДатаНачала = Объект.ОтпускПоУходуДатаНачала;
			Иначе
				ОтпускПоУходуДатаНачала = ДатаНачала;
			КонецЕсли;
			МаксимальнаяДатаОформленияОтпуска = ДобавитьМесяц(ДатаОкончания, 12);
			Если ЗначениеЗаполнено(Объект.ОтпускПоУходуДатаОкончания) Тогда
				ОтпускПоУходуДатаОкончания = Макс(Объект.ОтпускПоУходуДатаОкончания, МаксимальнаяДатаОформленияОтпуска);
			Иначе
				ОтпускПоУходуДатаОкончания = МаксимальнаяДатаОформленияОтпуска;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ФизическоеЛицо",             Объект.ФизическоеЛицо);
			Запрос.УстановитьПараметр("Ежемесячное",                Ежемесячное);
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",        Объект.ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("ОтпускПоУходуДатаНачала",    ОтпускПоУходуДатаНачала);
			Запрос.УстановитьПараметр("ОтпускПоУходуДатаОкончания", ОтпускПоУходуДатаОкончания);
			Если РасширеннаяРеализация Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДанныеСостоянийСотрудников.Регистратор КАК Ссылка
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
				|		ПО Сотрудники.Ссылка = ДанныеСостоянийСотрудников.Сотрудник
				|			И (ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком))
				|			И (ДанныеСостоянийСотрудников.Начало <= &ОтпускПоУходуДатаОкончания)
				|			И (ДанныеСостоянийСотрудников.Окончание >= &ОтпускПоУходуДатаНачала
				|				ИЛИ ДанныеСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1))
				|			И (НЕ ДанныеСостоянийСотрудников.Сторно)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудникаНаВыплатуПособия
				|		ПО (ЗаявлениеСотрудникаНаВыплатуПособия.ФизическоеЛицо = &ФизическоеЛицо)
				|			И (ЗаявлениеСотрудникаНаВыплатуПособия.ВидПособия = &Ежемесячное)
				|			И (ЗаявлениеСотрудникаНаВыплатуПособия.ГоловнаяОрганизация = &ГоловнаяОрганизация)
				|			И (ЗаявлениеСотрудникаНаВыплатуПособия.ДатаОкончанияОтпускаПоУходуЗаРебенком >= &ОтпускПоУходуДатаНачала)
				|			И (ЗаявлениеСотрудникаНаВыплатуПособия.ДатаНачалаОтпускаПоУходуЗаРебенком <= &ОтпускПоУходуДатаОкончания)
				|			И (ЗаявлениеСотрудникаНаВыплатуПособия.Проведен)
				|ГДЕ
				|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
				|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
				|	И ЗаявлениеСотрудникаНаВыплатуПособия.Ссылка ЕСТЬ NULL";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Предупреждение = НСтр("ru = 'Внимание. Пособия по уходу за ребенком по прежнему оформляются в форме сведений для реестра прямых выплат. Рекомендуется проверить что для сотрудника <a href=""%1"">оформлены соответствующие документы</a>.'");
					Предупреждение = СтрШаблон(Предупреждение, ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
					ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Предупреждение);
					Декорация = Элементы.Добавить("ГруппаОтсутствиеЗаявленийНаОтпускПоУходу", Тип("ДекорацияФормы"));
					Декорация.Вид = ВидДекорацииФормы.Надпись;
					Декорация.Заголовок = Новый ФорматированнаяСтрока(БиблиотекаКартинок.Предупреждение, " ", ФорматированнаяСтрока);
					Декорация.АвтоМаксимальнаяШирина = Ложь;
					Декорация.МаксимальнаяШирина = 80;
				КонецЕсли;
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЗаявлениеСотрудникаНаВыплатуПособия.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудникаНаВыплатуПособия
				|ГДЕ
				|	ЗаявлениеСотрудникаНаВыплатуПособия.ФизическоеЛицо = &ФизическоеЛицо
				|	И ЗаявлениеСотрудникаНаВыплатуПособия.ВидПособия = &Ежемесячное
				|	И ЗаявлениеСотрудникаНаВыплатуПособия.ГоловнаяОрганизация = &ГоловнаяОрганизация
				|	И ЗаявлениеСотрудникаНаВыплатуПособия.ДатаОкончанияОтпускаПоУходуЗаРебенком >= &ОтпускПоУходуДатаНачала
				|	И ЗаявлениеСотрудникаНаВыплатуПособия.ДатаНачалаОтпускаПоУходуЗаРебенком <= &ОтпускПоУходуДатаОкончания
				|	И ЗаявлениеСотрудникаНаВыплатуПособия.Проведен";
				
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() Тогда
					Предупреждение = НСтр("ru = 'Внимание. Пособия по уходу за ребенком по прежнему оформляются в форме сведений для реестра прямых выплат. Рекомендуется проверить что для сотрудника оформлены соответствующие документы.'");
					Декорация = Элементы.Добавить("ГруппаОтсутствиеЗаявленийНаОтпускПоУходу", Тип("ДекорацияФормы"));
					Декорация.Вид = ВидДекорацииФормы.Надпись;
					Декорация.Заголовок = Новый ФорматированнаяСтрока(БиблиотекаКартинок.Предупреждение, " " + Предупреждение);
					Декорация.АвтоМаксимальнаяШирина = Ложь;
					Декорация.МаксимальнаяШирина = 80;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаОкончанияКонтроляНаличияЗаявленийНаОтпускПоУходу()
	УстановитьПривилегированныйРежим(Истина);
	КлючОбъекта  = "ПособияФСС.СЭДО";
	КлючНастроек = "ДатаОкончанияКонтроляНаличияЗаявленийНаОтпускПоУходу";
	Дата = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, , , "");
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата(); // АПК:143 Для фильтрации документов требуется дата сервера.
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Дата, , "");
	КонецЕсли;
	Возврат Дата;
КонецФункции

#КонецОбласти
