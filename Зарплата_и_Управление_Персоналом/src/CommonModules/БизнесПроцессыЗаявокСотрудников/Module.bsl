
#Область СлужебныйПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
#Область ОбновлениеДляИспользованияКЭДО

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.19.31";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные.ОбновлениеДляИспользованияКЭДО";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор    = Новый УникальныйИдентификатор("34da26dd-679f-4bc1-b7fd-16cb7bd092eb");
	Обработчик.Комментарий      = НСтр("ru = 'Подготовка заявок сотрудников на изменение личных данных для работы с использованием КЭДО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.19.31";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет.ОбновлениеДляИспользованияКЭДО";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор    = Новый УникальныйИдентификатор("d8fe5f8f-0089-4a98-bbf9-350b9af06687");
	Обработчик.Комментарий      = НСтр("ru = 'Подготовка заявок сотрудников на получение налогового вычета для работы с использованием КЭДО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.19.31";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаОтпуск.ОбновлениеДляИспользованияКЭДО";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор    = Новый УникальныйИдентификатор("0cc37f21-d3d4-49d9-b787-a1b290e54b53");
	Обработчик.Комментарий      = НСтр("ru = 'Подготовка заявок сотрудников на предоставление отпуска для работы с использованием КЭДО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.19.31";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.ОбновлениеДляИспользованияКЭДО";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор    = Новый УникальныйИдентификатор("48a7d412-80c6-4d39-908b-82375e8fdd45");
	Обработчик.Комментарий      = НСтр("ru = 'Подготовка заявок сотрудников на отсутствие по болезни для работы с использованием КЭДО.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.19.31";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ.ОбновлениеДляИспользованияКЭДО";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор    = Новый УникальныйИдентификатор("45103a75-caf3-4447-83fc-a72d741c7f98");
	Обработчик.Комментарий      = НСтр("ru = 'Подготовка заявок сотрудников на получение справок 2-НДФЛ для работы с использованием КЭДО.'");
	
#КонецОбласти

#Область ПеренестиПрисоединенныеФайлыВложений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.19.32";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные.ПеренестиПрисоединенныеФайлыВложений";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("6630e7ec-d1a7-40be-86c0-de10dd81afd8");
	Обработчик.Комментарий     	= НСтр("ru = 'Перенос присоединенных файлов вложений по заявкам сотрудников на изменение личных данных в новый справочник.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.19.32";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет.ПеренестиПрисоединенныеФайлыВложений";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("785c3252-48bb-42fe-aa2a-902c6844b2a3");
	Обработчик.Комментарий     	= НСтр("ru = 'Перенос присоединенных файлов вложений по заявкам сотрудников на получение налогового вычета в новый справочник.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.19.32";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаОтпуск.ПеренестиПрисоединенныеФайлыВложений";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("50b59085-56fd-45bc-ba84-5cb819d365b4");
	Обработчик.Комментарий     	= НСтр("ru = 'Перенос присоединенных файлов вложений по заявкам сотрудников на предоставление отпуска в новый справочник.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.19.32";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.ПеренестиПрисоединенныеФайлыВложений";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("d1d05617-6f4e-48f7-bbd6-9bba298d46f9");
	Обработчик.Комментарий     	= НСтр("ru = 'Перенос присоединенных файлов вложений по заявкам сотрудников на отсутствие по болезни в новый справочник.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.19.32";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ.ПеренестиПрисоединенныеФайлыВложений";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("749f2fa1-78d9-4d67-b386-cbe97adedfab");
	Обработчик.Комментарий     	= НСтр("ru = 'Перенос присоединенных файлов вложений по заявкам сотрудников на получение справки 2-НДФЛ в новый справочник.'");

#КонецОбласти

#Область ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.2";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("c4ea8611-277c-4d33-b5d4-cf401da566ca");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника на изменение личных данных.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.2";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("143a72dd-2ec2-4d3c-9a91-6b21415b7521");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника на получение налогового вычета.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.2";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаОтпуск.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("1d66d4fc-beaf-4279-a28f-d9b9ceded198");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника на предоставление отпуска.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.2";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("9a2863d8-5d05-4f2f-9ea0-19b9b66ca306");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника на отсутствие по болезни.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.2";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("896fdecc-b34a-4380-81cc-472d5e8879c1");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника на получение справки 2-НДФЛ.'");
	
#КонецОбласти

КонецПроцедуры

// Установка значений реквизитов предопределенных элементов справочника РолиИсполнителей,
// относящихся к обработке заявок сотрудников.
//
Процедура ИнициализироватьРолиИсполнителей() Экспорт
	
	ПубликоватьСтруктуруЮридическихЛиц = КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц();
	
	РолиИсполнителейЗадач = РолиИсполнителейЗадач();
	
	Для каждого Роль Из РолиИсполнителейЗадач Цикл
		РольОбъект = Роль.ПолучитьОбъект();
		РольОбъект.ИспользуетсяБезОбъектовАдресации = Ложь;
		РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
		Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ПодразделенияОрганизаций;
		Иначе
			РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.СтруктураПредприятия;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РольОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура НачальноеЗаполнениеИсполнителейЗадач(Исполнитель) Экспорт
	
	РолиИсполнителейЗадач = РолиИсполнителейЗадач();
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПредприятия = БизнесПроцессыЗаявокСотрудниковВнутренний.ПубликуемаяСтруктураПредприятия();
	
	НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
	Для каждого Роль Из РолиИсполнителейЗадач Цикл
		НаборЗаписей.Очистить();
		Для каждого СтрокаТЗ Из СтруктураПредприятия Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.РольИсполнителя = Роль;
			НоваяЗапись.Исполнитель = Исполнитель;
			НоваяЗапись.ОсновнойОбъектАдресации = СтрокаТЗ.Подразделение;
		КонецЦикла;
		НаборЗаписей.Отбор.РольИсполнителя.Установить(Роль);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция РолиИсполнителейЗадач() Экспорт

	Роли = Новый Массив;
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий);
	
	БизнесПроцессыЗаявокСотрудниковВнутренний.ДополнитьРолиИсполнителейЗадач(Роли);
	
	Возврат Роли;

КонецФункции

Процедура УстановитьЗначениеИспользоватьБизнесПроцессыЗаявокСотрудников(ИспользуетсяСервисКабинетСотрудника) Экспорт
	
	Если Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Получить() <> ИспользуетсяСервисКабинетСотрудника Тогда
		Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Установить(ИспользуетсяСервисКабинетСотрудника);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступнаНастройкаПравилОбработкиЗаявок() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПравилаОбработкиЗаявокСотрудников);
КонецФункции

Процедура ЗаписатьНастройкиПравилОбработки(НастройкиПравил, ВидНастройки, ПодписыватьЗаявкиСотрудника) Экспорт
	
	РегистрыСведений.ПравилаОбработкиЗаявокСотрудников.СоздатьНаборЗаписей().Записать();
	
	Для каждого Настройка Из НастройкиПравил Цикл
		Роль = Настройка.РольИсполнителя;
		ПравилаОбработкиЗаявок = 
			БизнесПроцессыЗаявокСотрудниковКлиентСервер.ПолучитьЭлементы(Настройка.СтруктураПредприятия);
		
		Для каждого ПравилоОбработкиЗаявки Из ПравилаОбработкиЗаявок Цикл
			Подразделение = ?(ВидНастройки = 1, 
							  ПравилоОбработкиЗаявки.Подразделение,
							  Неопределено);
			
			НаборЗаписейПравилаОбработки = РегистрыСведений.ПравилаОбработкиЗаявокСотрудников.СоздатьНаборЗаписей();
			
			НаборЗаписейПравилаОбработки.Отбор.РольИсполнителя.Установить(Роль);
			Если ВидНастройки = 1 Тогда
				НаборЗаписейПравилаОбработки.Отбор.Подразделение.Установить(Подразделение);
			КонецЕсли;
			
			ЗаписьПравилОбработки = НаборЗаписейПравилаОбработки.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьПравилОбработки, ПравилоОбработкиЗаявки);
			ЗаписьПравилОбработки.Подразделение = Подразделение;
			ЗаписьПравилОбработки.РольИсполнителя = Роль;
			НаборЗаписейПравилаОбработки.Записать(Истина);
									
			НаборЗаписейИсполнителиЗадач = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
			НаборЗаписейИсполнителиЗадач.Отбор.РольИсполнителя.Установить(Настройка.РольИсполнителя);
			НаборЗаписейИсполнителиЗадач.Отбор.ОсновнойОбъектАдресации.Установить(ПравилоОбработкиЗаявки.Подразделение);
			
			Для каждого Пользователь Из ПравилоОбработкиЗаявки.СписокПользователей Цикл
				Если Пользователь.Значение.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьИсполнителиЗадач = НаборЗаписейИсполнителиЗадач.Добавить();
				ЗаписьИсполнителиЗадач.РольИсполнителя = Настройка.РольИсполнителя;
				ЗаписьИсполнителиЗадач.Исполнитель = Пользователь.Значение;
				ЗаписьИсполнителиЗадач.ОсновнойОбъектАдресации = ПравилоОбработкиЗаявки.Подразделение;
				 
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписейИсполнителиЗадач.Записать(Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЦикла;
	КонецЦикла;
	
	Константы.ПодписыватьЗаявкиСотрудника.Установить(ПодписыватьЗаявкиСотрудника);
	
КонецПроцедуры

Функция ИспользуетсяСОбъектамиАдресации(ПроверяемыйОбъект) Экспорт
	Если ТипЗнч(ПроверяемыйОбъект) = Тип("СправочникСсылка.РолиИсполнителей")
		 И ЗначениеЗаполнено(ПроверяемыйОбъект) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйОбъект, "ИспользуетсяСОбъектамиАдресации");
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   БизнесПроцессСсылка - БизнесПроцессСсылка - бизнес-процесс, по которому сформирована задача ЗадачаСсылка.
//   ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута.
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	// Устанавливаем значения по умолчанию для пакетного выполнения задач.
	НачатьТранзакцию();
	Попытка
		БизнесПроцессыИЗадачиСервер.ЗаблокироватьБизнесПроцессы(БизнесПроцессСсылка);
		
		УстановитьПривилегированныйРежим(Истина);
			
		ЗаданиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ЗаданиеОбъект.Ссылка);
		Если Не ЗаданиеОбъект.ДоступноВыполнение() Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Невозможно выполнить заявку.'"));
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗаданиеОбъект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияЗаявокКабинетСотрудника.Выполнена");;
		ЗаданиеОбъект.Записать(); 
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

// Возвращает результат проверки на возможность выполнения бизнес-процесса
//	Параметры:
//		БизнесПроцесс - БизнесПроцессОбъект - ссылка на БП для проверки.
//		Предмет - ДокументСсылка, ТаблицаЗначений, Неопределено - документы для выполнения заявки.
//		ФайлыОтвета - ФизическиеЛицаПрисоединенныеФайлы, Массив, неопределено -
//						сформированные файлы для отправки в сервис.
Функция ДоступноВыполнение(БизнесПроцесс, Предмет = Неопределено, ФайлыОтвета = Неопределено) Экспорт
	
	Если БизнесПроцесс.Выполнено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КабинетСотрудника.ИспользуетсяКадровыйЭДО() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(БизнесПроцесс, "СтараяВерсия") 
		 И БизнесПроцесс.СтараяВерсия Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Предмет = Неопределено И ФайлыОтвета = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПредметЗаполнен = Ложь;
	Если ТипЗнч(Предмет) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаПредмета Из Предмет Цикл
			Документ = СтрокаПредмета[1];
			ПредметЗаполнен = Не Документ.Пустая() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ,
																							   "Проведен");				
		КонецЦикла;
	ИначеЕсли Предмет <> Неопределено Тогда
		ПредметЗаполнен = Не Предмет.Пустая() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Проведен");
	КонецЕсли;
	
	Если ПредметЗаполнен И ФайлыОтвета = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ФайлыСформированы = Ложь;
	Если ТипЗнч(ФайлыОтвета) = Тип("Массив") Тогда
		Для Каждого ФайлОтвета Из ФайлыОтвета Цикл
			ФайлыСформированы = Не ФайлОтвета.Пустая();		
		КонецЦикла;
	ИначеЕсли ТипЗнч(ФайлыОтвета) = Тип("СправочникСсылка.ФизическиеЛицаПрисоединенныеФайлы") Тогда
		ФайлыСформированы = Не ФайлыОтвета.Пустая();
	КонецЕсли;
	
	Если ФайлыСформированы Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Отправляет письмо на почту с файлом в заявке сотрудника.
//	Параметры:
//		БизнесПроцесс - БизнесПроцессОбъект - бизнес-процессу по которому выполняется отправка письма;
//		ТемаПисьма - Строка - тема письма;
//		Вложения - Массив - массив присоединенных файлов на отправку.
Процедура ОтправитьПочтовоеСообщение(БизнесПроцесс, ТемаПисьма, Вложения) Экспорт
	
	Если БизнесПроцесс.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ
		 Или Не БизнесПроцесс.ОтправлятьEmail
		 Или Не РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), Истина, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ФайлыПечатныхФорм = КадровыйЭДОВызовСервера.ВыводимыеФайлыПечатныхФорм(Вложения);
		
		Письмо = Новый ИнтернетПочтовоеСообщение();
		Письмо.Тема = ТемаПисьма;
		Письмо.Получатели.Добавить(БизнесПроцесс.АдресEmail);
		Для Каждого ФайлПечатнойФормы Из ФайлыПечатныхФорм Цикл
			Письмо.Вложения.Добавить(ПолучитьИзВременногоХранилища(ФайлПечатнойФормы.АдресВоВременномХранилище),
									 ФайлПечатнойФормы.Представление);	
		КонецЦикла; 
		
		УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось автоматически отправить копию справки на почту'"));		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает базовую структуру для инициализации бизнес-процесса.
Функция СтруктураИнициализацииЗаявки() Экспорт
	
	СтруктураИнициализации = Новый Структура;
	СтруктураИнициализации.Вставить("Наименование", 				"");
	СтруктураИнициализации.Вставить("Дата", 						ТекущаяДатаСеанса());
	СтруктураИнициализации.Вставить("ТипЗаявкиКабинетСотрудника", 	Перечисления.ТипыЗаявокКабинетСотрудника.ПустаяСсылка());
	СтруктураИнициализации.Вставить("ФизическоеЛицо",				Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураИнициализации.Вставить("ЭлектронныйДокумент",			Новый Структура);
	СтруктураИнициализации.Вставить("Вложения",						Новый Массив);
	СтруктураИнициализации.Вставить("ИдентификаторЗаявки",			"");
	
	Возврат СтруктураИнициализации;
	
КонецФункции

// Возвращает структуру способа получения ответа по заявке.
Функция СтруктураСпособаПолученияОтвета() Экспорт
	
	СтруктураСпособаПолучения = Новый Структура;
	СтруктураСпособаПолучения.Вставить("ВариантФормированияФайлаОтвета", 	Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ПустаяСсылка());
	СтруктураСпособаПолучения.Вставить("КоличествоЭкземпляров", 			0);
	СтруктураСпособаПолучения.Вставить("ОтправлятьEmail", 					Ложь);
	СтруктураСпособаПолучения.Вставить("АдресEmail",						"");
	
	Возврат СтруктураСпособаПолучения;
	
КонецФункции

// Возвращает таблицу вложений привязанных к заявке сотрудника.
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица вложений по заявке сотрудника:
//			Ссылка - СправочникСсылка - ссылка на присоединенный файл;
//			Наименование - Строка - наименование файла вложения;
//			Расширение - Строка - расширение файла вложения;
//			Размер - Число - размер файла вложения;
Функция ВложенияЗаявкиСотрудника(БизнесПроцесс) Экспорт
	
	Если БизнесПроцесс.Метаданные().ТабличныеЧасти.Найти("УдалитьФайлыЗаявки") <> Неопределено Тогда
		ФайлыЗаявки = БизнесПроцесс.УдалитьФайлыЗаявки.Выгрузить();
		Если ФайлыЗаявки.Количество() > 0 Тогда
			Возврат ФайлыЗаявки.ВыгрузитьКолонку("Файл");
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы = БизнесПроцесс.Метаданные().Имя + "ПрисоединенныеФайлы";
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаСотрудника.Ссылка КАК Ссылка,
	               |	ЗаявкаСотрудника.Наименование КАК Наименование,
	               |	ЗаявкаСотрудника.Расширение КАК Расширение,
	               |	ЗаявкаСотрудника.Размер КАК Размер
	               |ИЗ
	               |	Справочник.#ИмяТаблицы КАК ЗаявкаСотрудника
	               |ГДЕ
	               |	ЗаявкаСотрудника.Вложение = ИСТИНА
	               |	И ЗаявкаСотрудника.ВладелецФайла = &БизнесПроцесс";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область КабинетСотрудника

// Заполняет таблицу заявок, структурами для заполнения на стороне кабинета сотрудника.
//	Параметры:
//		СписокФизическихЛиц - Массив - список физических лиц, для которых требуется определить правила обработки заявок;
//		ТаблицаЗаявок - ТаблицаЗначений - таблица со всеми заявками.
//	Возвращаемое значение:
//		Структура - содержит параметры необходимые для создания нового бизнес-процесса по заявке.
Функция ПараметрыСозданияБизнесПроцессовПоЗаявкамСервиса(СписокФизическихЛиц, ТаблицаЗаявок) Экспорт

	Параметры = Новый Структура("
	|РолиИсполнителейЗаявок,
	|ОбъектыАдресацииПоФизическомуЛицу,
	|ОбъектыАдресацииПоОрганизации,
	|ОбъектыАдресацииПоРабочемуМесту,
	|СрокиИсполненияЗаявок,
	|ЗарегистрированныеЗаявки,
	|ОписанияБизнесПроцессов,
	|Организации");
	
	Параметры.РолиИсполнителейЗаявок = РолиИсполнителейЗаявокПоТипамЗапросов();
	
	ОбъектыАдресацииЗаявокИОрганизации = ОбъектыАдресацииЗаявокИОрганизации(СписокФизическихЛиц);
	Параметры.ОбъектыАдресацииПоФизическомуЛицу = ОбъектыАдресацииЗаявокИОрганизации.ОбъектыАдресацииПоФизическомуЛицу;
	Параметры.ОбъектыАдресацииПоОрганизации		= ОбъектыАдресацииЗаявокИОрганизации.ОбъектыАдресацииПоОрганизации;
	Параметры.ОбъектыАдресацииПоРабочемуМесту	= ОбъектыАдресацииЗаявокИОрганизации.ОбъектыАдресацииПоРабочемуМесту;
	Параметры.Организации 	   					= ОбъектыАдресацииЗаявокИОрганизации.Организации;
	
	Параметры.СрокиИсполненияЗаявок = Новый Соответствие;
	Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(Параметры.ОбъектыАдресацииПоРабочемуМесту, "Значение", Истина);
	Для каждого ЭлементКоллекции Из Параметры.РолиИсполнителейЗаявок Цикл
		Параметры.СрокиИсполненияЗаявок.Вставить(ЭлементКоллекции.Значение, СрокиИсполненияЗаявок(ЭлементКоллекции.Значение, Подразделения));
	КонецЦикла;
	
	Параметры.ЗарегистрированныеЗаявки = Новый Соответствие;
	СоответствиеЗаявкиИТипаЗаявки = СоответствиеЗаявкиИТипаЗаявки();
	ТаблицаЗаявок.Колонки.Добавить("ИмяТаблицы");
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.ПричинаОтсутствия) Тогда
			СтрокаТЗ.ИмяТаблицы = СоответствиеЗаявкиИТипаЗаявки[СтрокаТЗ.ТипЗаявки][СтрокаТЗ.ПричинаОтсутствия];
		Иначе
			СтрокаТЗ.ИмяТаблицы = СоответствиеЗаявкиИТипаЗаявки[СтрокаТЗ.ТипЗаявки];
		КонецЕсли;
	КонецЦикла;
	
	ИменаТаблиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаявок, "ИмяТаблицы", Истина);
	Отбор = Новый Структура("ИмяТаблицы");
	Для каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		Отбор.ИмяТаблицы = ИмяТаблицы;
		ИдентификаторыЗаявок = ТаблицаЗаявок.Скопировать(Отбор).ВыгрузитьКолонку("ИдентификаторЗаявки");
				
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
					Параметры.ЗарегистрированныеЗаявки,
					ЗарегистрированныеЗаявки(ИдентификаторыЗаявок, ИмяТаблицы),
					Истина);
	
	КонецЦикла;
	
	Параметры.ОписанияБизнесПроцессов = Новый Соответствие;
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		Параметры.ОписанияБизнесПроцессов.Вставить(ИмяТаблицы, БизнесПроцессы[ИмяТаблицы].СтруктураИнициализацииЗаявки());	
	КонецЦикла;
	
	Возврат Параметры;

КонецФункции

// Создает и запускает на основе переданных данных бизнес процесс.
//	Параметры:
//		ИмяТаблицы - Строка - наименование таблица бизнес-процесса;
//		ПараметрыЗаполнения - Структура - параметры для заполнения и создания бизнес-процесса;
//		ПараметрыБизнесПроцессов - Структура - параметры содержащие настройки правил обработки заявок.
Процедура СоздатьБизнесПроцессПоЗаявке(ИмяТаблицы, ПараметрыЗаполнения, ПараметрыБизнесПроцессов) Экспорт
	
	ЗаявкаСотрудника = БизнесПроцессы[ИмяТаблицы].СоздатьБизнесПроцесс();
	ЗаявкаСотрудника.Заполнить(ПараметрыЗаполнения);
	
	Организация = ПараметрыБизнесПроцессов.Организации[ПараметрыЗаполнения.ФизическоеЛицо];
	Если ИмяТаблицы <> "ЗаявкаСотрудникаСправкаОстаткиОтпусков" Тогда
		Если Не ЗначениеЗаполнено(ЗаявкаСотрудника.Организация) Тогда
			ЗаявкаСотрудника.Организация = Организация;
		Иначе
			Организация = ЗаявкаСотрудника.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("Сотрудник") И ЗначениеЗаполнено(ПараметрыЗаполнения.Сотрудник) Тогда
		ЗаявкаСотрудника.ОсновнойОбъектАдресации = ПараметрыБизнесПроцессов.ОбъектыАдресацииПоРабочемуМесту[ПараметрыЗаполнения.Сотрудник];
	ИначеЕсли ПараметрыЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ПараметрыЗаполнения.Организация) Тогда
		ЗаявкаСотрудника.ОсновнойОбъектАдресации = ПараметрыБизнесПроцессов.ОбъектыАдресацииПоОрганизации[ПараметрыЗаполнения.Организация][ПараметрыЗаполнения.ФизическоеЛицо];
	Иначе
		ЗаявкаСотрудника.ОсновнойОбъектАдресации = ПараметрыБизнесПроцессов.ОбъектыАдресацииПоФизическомуЛицу[ПараметрыЗаполнения.ФизическоеЛицо];
	КонецЕсли;
	ЗаявкаСотрудника.Исполнитель = ПараметрыБизнесПроцессов.РолиИсполнителейЗаявок[ИмяТаблицы];
	ЗаявкаСотрудника.Автор = Справочники.Пользователи.ПустаяСсылка();
	ЗаявкаСотрудника.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	ЗаявкаСотрудника.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Новая;
	ЗаявкаСотрудника.Предмет = ЗаявкаСотрудника.ФизическоеЛицо;
	
	ДнейНаИсполнение = ПараметрыБизнесПроцессов.СрокиИсполненияЗаявок[ЗаявкаСотрудника.Исполнитель][ЗаявкаСотрудника.ОсновнойОбъектАдресации];
	ЗаявкаСотрудника.СрокИсполнения = ТекущаяДатаСеанса() + ДнейНаИсполнение*86400;
	
	ЗаявкаСотрудника.Записать();
	
	Для Каждого Вложение Из ПараметрыЗаполнения.Вложения Цикл
		ПрисоединитьФайлКЗаявке(ЗаявкаСотрудника, Вложение, Истина);
	КонецЦикла;
	
	ЭлектронныйДокумент = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ЭлектронныйДокумент) Тогда
		ЭлектронныйДокумент = ПрисоединитьФайлКЗаявке(ЗаявкаСотрудника, ПараметрыЗаполнения.ЭлектронныйДокумент);
	КонецЕсли;
	
	ИдентификаторЭлектронногоДокумента = Неопределено;
	ПараметрыЗаполнения.Свойство("ИдентификаторЭлектронногоДокумента", ИдентификаторЭлектронногоДокумента);
	
	СоздатьДокументКЭДОПоЗаявке(ЗаявкаСотрудника, ЭлектронныйДокумент, Организация, ИдентификаторЭлектронногоДокумента);
	
	ЗаявкаСотрудника.Старт();
	
КонецПроцедуры

// Регистрирует руководителя, согласовавшего заявку сотрудника.
//
// 	Параметры
// 		ЗаявкаСотрудника - ЛюбаяСсылка - документ по которому пришел результат согласования.
// 		РезультатСогласования - Структура- содержит свойства
// 			* Подписант - СправочникСсылка.ФизическиеЛица
// 			* ИмяПодписанта - Строка
//
Процедура ЗарегистрироватьРезультатСогласованияЗаявки(ЗаявкаСотрудника, РезультатСогласования) Экспорт
	
	Если ТипыЗаявокСогласовываемыеРуководителем().Найти(ТипЗнч(ЗаявкаСотрудника)) = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаявкаСотрудникаОбъект = ЗаявкаСотрудника.ПолучитьОбъект();
	ЗаявкаСотрудникаОбъект.РуководительСотрудника = РезультатСогласования.Подписант;
	ЗаявкаСотрудникаОбъект.Записать();
	
КонецПроцедуры

// Формирует таблицу данными заявок.
//
// 	Параметры
// 		ПубликуемыеЗаявки - Массив - содержит ссылки на бизнес-процесс.
// 		ТипДанных - ТипЗначения - содержит тип значения заявки.
//
// 	Возвращаемое значение:
// 		ТаблицаЗначений с колонками
// 			* Заявка - Ссылка - ссылка на бизнес-процесс
// 			* ТипЗаявкиКабинетСотрудника - ПеречислениеСсылка.ТипыЗаявокКабинетСотрудника.
// 			* ИдентификаторЗаявки - Строка - идентификатор заявки в сервисе.
// 			* СостояниеЗаявки - ПеречислениеСсылка.СостоянияЗаявокКабинетСотрудника.
// 			* Комментарий - Строка - ответ по заявке.
//			* ЗаявкаПодписывается - Булево - требуется ли проверять наличие подписи у заявки.
//
Функция ТаблицаЗаявокСотрудника(ПубликуемыеЗаявки, ТипДанных) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПубликуемыеЗаявки", ПубликуемыеЗаявки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Заявка,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника,
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.ОтветПоЗаявке КАК Комментарий,
	|	&ЗаявкаПодписывается КАК ЗаявкаПодписывается,
	|	Таблица.Исполнитель КАК Исполнитель
	|ИЗ
	|	#Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&ПубликуемыеЗаявки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипЗаявкиКабинетСотрудника";
	
	МД = Метаданные.НайтиПоТипу(ТипДанных);
	Если МД.Реквизиты.Найти("УчебныйОтпуск") <> Неопределено Тогда
		ОписанияПоля = "
		|	ВЫБОР
		|		КОГДА Таблица.УчебныйОтпуск
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия)
		|		ИНАЧЕ Таблица.ТипЗаявкиКабинетСотрудника
		|	КОНЕЦ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ТипЗаявкиКабинетСотрудника", ОписанияПоля);
	КонецЕсли;
	
	Если МД.Реквизиты.Найти("ПричинаОтсутствия") <> Неопределено Тогда
		ОписаниеПоля = "НЕ (Таблица.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание)
					   | ИЛИ Таблица.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаявкаПодписывается", ОписаниеПоля);
	Иначе
		Запрос.УстановитьПараметр("ЗаявкаПодписывается", 
								  (ТипДанных <> БизнесПроцессыЗаявокСотрудниковВнутренний.ТипЗаявкаСотрудникаСправкаОстаткиОтпусков()));
	КонецЕсли;
	
	ИмяТаблицы = МД.ПолноеИмя();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Формирует таблицу с файлами ответов на заявки, по заявкам,
// которые не участвуют в кадровом ЭДО, например, ЗаявкаСотрудникаСправкаОстаткиОтпусков.
//
// 	Параметры
// 		ПубликуемыеЗаявки - Массив - содержит ссылки на бизнес-процесс.
// 		ТипДанных - ТипЗначения - содержит тип значения заявки.
//
// 	Возвращаемое значение:
// 		ТаблицаЗначений с колонками
// 			* Заявка - Ссылка - ссылка на бизнес-процесс
// 			* ФайлЗаявки - Ссылка - ссылка на справочник присоединенных файлов бизнес-процесс.
//
Функция ТаблицаФайловОтветаЗаявокСотрудника(ПубликуемыеЗаявки, ТипДанных) Экспорт
	Возврат БизнесПроцессыЗаявокСотрудниковВнутренний.ТаблицаФайловОтветаЗаявокСотрудника(ПубликуемыеЗаявки, ТипДанных);
КонецФункции

// Возвращает файл заявки пришедший из кабинета сотрудника.
//	Параметры:
//		БизнесПроцесс - БизнесПроцессСсылка - заявка сотрудника.
//	Возвращаемое значение:
//		СправочникСсылка, Неопределено - присоединенный файл заявки сотрудника. Если не найден, неопределено.
Функция ФайлЗаявки(БизнесПроцесс) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ДокументКадровогоЭДО.ЭлектронныйДокумент, НЕОПРЕДЕЛЕНО) КАК ЭлектронныйДокумент
	               |ИЗ
	               |	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	               |ГДЕ
	               |	ДокументКадровогоЭДО.ОснованиеДокумента = &Документ";
	
	Запрос.УстановитьПараметр("Документ", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭлектронныйДокумент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СоздатьВТЗаявкиПоСправкам2НДФЛ(МенеджерВТ, Справки2НДФЛ) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Справки2НДФЛ", Справки2НДФЛ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаСправка2НДФЛ.Ссылка КАК Ссылка,
	|	ЗаявкаСправка2НДФЛ.СправкаНДФЛ КАК СправкаНДФЛ
	|ПОМЕСТИТЬ ВТЗаявкиКОбработке
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ.СправкиНДФЛ КАК ЗаявкаСправка2НДФЛ
	|ГДЕ
	|	ЗаявкаСправка2НДФЛ.СправкаНДФЛ В(&Справки2НДФЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиКОбработке.Ссылка КАК Заявка,
	|	ЗаявкиКОбработке.СправкаНДФЛ КАК СправкаНДФЛ,
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Заявки.ОтветПоЗаявке КАК ОтветПоЗаявке,
	|	Заявки.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	Заявки.СостояниеЗаявки КАК СостояниеЗаявки
	|ПОМЕСТИТЬ ВТЗаявкиПоСправкам2НДФЛ
	|ИЗ
	|	ВТЗаявкиКОбработке КАК ЗаявкиКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ КАК Заявки
	|		ПО ЗаявкиКОбработке.Ссылка = Заявки.Ссылка";
	Запрос.Выполнить();

КонецПроцедуры

// Получает таблицу с данными заявок с места работы.
//
// 	Параметры
// 		Заявки - Массив - ссылки на бизнес-процессы заявок с места работы
//
// 	Возвращаемое значение:
// 		ТаблицаЗначений
// 			* Заявка - БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаСМестаРаботы
// 			* Организация - СправочникСсылка.Организации
// 			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 			* Комментарий - Строка
// 			* ИдентификаторЗаявки - Строка
// 			* ВариантФормированияФайлаОтвета - ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.
//
Функция ДанныеЗаявокСправкиСРаботы(Заявки) Экспорт
	Возврат БизнесПроцессыЗаявокСотрудниковВнутренний.ДанныеЗаявокСправкиСРаботы(Заявки);
КонецФункции

Функция ТипЗаявкаСотрудникаСправкаСМестаРаботы() Экспорт
	Возврат БизнесПроцессыЗаявокСотрудниковВнутренний.ТипЗаявкаСотрудникаСправкаСМестаРаботы();
КонецФункции

#КонецОбласти

Процедура СоздатьИзменитьДокументКЭДОСправкаСотруднику(ЭлектронныйДокумент, СсылкаНаДокумент, РегистрироватьИзмененияКабинетСотрудника = Истина) Экспорт
	
	РеквизитыДокумента = Новый Структура;
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.СправкаНДФЛ") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, "Организация, Сотрудник");
		РеквизитыДокумента.Вставить("ФизическоеЛицо", РеквизитыДокумента.Сотрудник);
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = БизнесПроцессыЗаявокСотрудниковВнутренний.ТипЗаявкаСотрудникаСправкаОстаткиОтпусков() Тогда
		РеквизитыДокумента.Вставить("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "ФизическоеЛицо"));
		Организации = ОбъектыАдресацииЗаявокИОрганизации(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДокумента.ФизическоеЛицо)).Организации;
		РеквизитыДокумента.Вставить("Организация", Организации[РеквизитыДокумента.ФизическоеЛицо]);
	Иначе
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, "Организация, ФизическоеЛицо");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	               |	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	               |ИЗ
	               |	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	               |ГДЕ
	               |	ДокументКадровогоЭДО.ОснованиеДокумента = &СсылкаНаДокумент
	               |	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.СправкаСотруднику)
	               |	И ДокументКадровогоЭДО.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументКЭДО = Выборка.Ссылка.ПолучитьОбъект();
		ДокументКЭДО.ЭлектронныйДокумент 	= ЭлектронныйДокумент;
		ДокументКЭДО.ДополнительныеСвойства.Вставить("РегистрироватьИзмененияКабинетСотрудника", РегистрироватьИзмененияКабинетСотрудника);
		ДокументКЭДО.Записать();
	Иначе
		ОписаниеСоставаОбъекта = Документы.ДокументКадровогоЭДО.СвойстваДокумента(ЭлектронныйДокумент,
																				  РеквизитыДокумента.Организация,
																				  РеквизитыДокумента.ФизическоеЛицо,
																				  СсылкаНаДокумент,
																				  Перечисления.КатегорииДокументовКадровогоЭДО.СправкаСотруднику);
		ОписаниеСоставаОбъекта.ДополнительныеСвойства = Новый Структура("РегистрироватьИзмененияКабинетСотрудника", РегистрироватьИзмененияКабинетСотрудника);																		  
		ДокументКЭДО = Документы.ДокументКадровогоЭДО.Добавить(ОписаниеСоставаОбъекта);
	КонецЕсли;	
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обнуляет константу ПодписыватьЗаявкиСотрудника при не использование настройки ИспользуетсяКадровыйЭДО
//	Параметры:
//		ИспользоватьКЭДО - булево - значение настройки ИспользуетсяКадровыйЭДО
Процедура ПроверитьИИзменитьЗначениеПодписыватьЗаявкиСотрудника(ИспользуетсяКадровыйЭДО) Экспорт
	Если Не ИспользуетсяКадровыйЭДО Тогда
		Константы.ПодписыватьЗаявкиСотрудника.Установить(Ложь);
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиОбновленияИнформационнойБазы

#Область ОбновлениеДляИспользованияКЭДО

Функция РезультатЗапросаЗаявокОбновлениеДляИспользованияКЭДО(Таблица) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаСотрудника.Ссылка КАК Ссылка,
	               |	ЗаявкаСотрудника.Организация КАК Организация,
	               |	ЗаявкаСотрудника.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ЗаявкаСотрудника.Дата КАК Дата,
	               |	ЗаявкаСотрудника.Выполнено КАК Выполнено,
	               |	ЗаявкаСотрудника.ИдентификаторЗаявки КАК ИдентификаторЗаявки
	               |ИЗ
	               |	#Таблица КАК ЗаявкаСотрудника
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	               |		ПО ЗаявкаСотрудника.Ссылка = ДокументКадровогоЭДО.ОснованиеДокумента
	               |ГДЕ
	               |	ДокументКадровогоЭДО.Ссылка ЕСТЬ NULL
	               |	И ЗаявкаСотрудника.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", Таблица);	
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура СоздатьИЗаписатьДокументКЭДООбновление(ЗаявкаСотрудника) Экспорт 
	ДокументКЭДО = Документы.ДокументКадровогоЭДО.СоздатьДокумент();
	ДокументКЭДО.ОснованиеДокумента 					= ЗаявкаСотрудника.Ссылка;
	ДокументКЭДО.Дата									= ЗаявкаСотрудника.Дата;
	ДокументКЭДО.Организация 							= ЗаявкаСотрудника.Организация;
	ДокументКЭДО.ИдентификаторЗаявкиКабинетСотрудника 	= ЗаявкаСотрудника.ИдентификаторЗаявки;
	ДокументКЭДО.ИдентификаторДокумента					= ЗаявкаСотрудника.ИдентификаторЗаявки;
	ДокументКЭДО.КатегорияДокумента 					= перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника;
	ДокументКЭДО.ВнешниеПодписанты.Добавить().ФизическоеЛицо = ЗаявкаСотрудника.ФизическоеЛицо;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументКЭДО, , Истина);
КонецПроцедуры

// Возвращает соответствие физических лиц и организации
//	Параметры:
//		ФизическиеЛица - Массив - массив физических лиц;
//	Возвращаемое значение:
//		Соответствие.
Функция ОрганизацииФизическихЛицОбновлениеДляИспользованияКЭДО(ФизическиеЛица) Экспорт

	ОрганизацииФизическихЛиц = Новый Соответствие;
	
	// Получаем единственную организацию ИБ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОсновнаяОрганизация = Неопределено;
	Если Организации.Количество() = 1 Тогда
		ОсновнаяОрганизация = Организации[0];
	ИначеЕсли Организации.Количество() = 0 Тогда
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если ОсновнаяОрганизация <> Неопределено Тогда
		
		Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
			ОрганизацииФизическихЛиц.Вставить(ФизическоеЛицо, ОсновнаяОрганизация);	
		КонецЦикла;
		
		Возврат ОрганизацииФизическихЛиц;
		
	КонецЕсли;
	
	ФизическиеЛицаБезОрганизации = Новый Массив;
	ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Истина, ФизическиеЛица, ТекущаяДатаСеанса());
	ОсновныеСотрудники = Новый Массив;
	Для каждого ЭлементКоллекции Из ОсновныеСотрудникиФизическихЛиц Цикл
		ОсновныеСотрудники.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОсновныеСотрудники, "Организация", ТекущаяДатаСеанса());
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ОсновныеСотрудникиФизическихЛиц[ФизическоеЛицо], "Сотрудник");
		Если КадровыеДанныеСотрудника = Неопределено Тогда
			ФизическиеЛицаБезОрганизации.Добавить(ФизическоеЛицо);
			Продолжить;
		КонецЕсли;
		
		ОрганизацияСотрудника = КадровыеДанныеСотрудника.Организация;
		Если ЗначениеЗаполнено(ОрганизацияСотрудника) Тогда
			ОрганизацииФизическихЛиц.Вставить(ФизическоеЛицо, ОрганизацияСотрудника);
		Иначе
			ФизическиеЛицаБезОрганизации.Добавить(ФизическоеЛицо);
		КонецЕсли;
		
	КонецЦикла;
			
	Если ФизическиеЛицаБезОрганизации.Количество() = 0 Тогда
		Возврат ОрганизацииФизическихЛиц;
	КонецЕсли;	
	
	ГоловныеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Организации, "ГоловнаяОрганизация");
	Для каждого ЭлементКоллекции Из ГоловныеОрганизации Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			ОсновнаяОрганизация = ЭлементКоллекции.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОсновнаяОрганизация = Неопределено Тогда
		ОсновнаяОрганизация = Организации[0];
	КонецЕсли;
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛицаБезОрганизации Цикл
		ОрганизацииФизическихЛиц.Вставить(ФизическоеЛицо, ОсновнаяОрганизация);
	КонецЦикла;
	
	Возврат ОрганизацииФизическихЛиц;
	
КонецФункции

#КонецОбласти

#Область ПеренестиПрисоединенныеФайлыВложений

Процедура ПеренестиПрисоединенныеФайлыВложений(Таблица, ПараметрыОбновления) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапросаЗаявокПеренестиПрисоединенныеФайлыВложений(Таблица);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат
	КонецЕсли;
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	БылиОшибки = Ложь;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка")Цикл
		
		ТаблицаФайлов = Новый ТаблицаЗначений;
		ТаблицаФайлов.Колонки.Добавить("Ссылка");
		ТаблицаФайлов.Колонки.Добавить("Файл");
		
		Пока Выборка.Следующий() Цикл
			СтрокаФайла = ТаблицаФайлов.Добавить();
			СтрокаФайла.Ссылка 	= Выборка.Ссылка;
			СтрокаФайла.Файл 	= Выборка.Файл;
		КонецЦикла;
		
		ОписаниеОшибки = "";
		НачатьТранзакцию();
		Попытка
			
			Если ПараметрыОбновления <> Неопределено Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(Таблица);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ФизическиеЛицаПрисоединенныеФайлы");
				ЭлементБлокировки.ИсточникДанных = ТаблицаФайлов;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Файл");
				
				Попытка 
					Блокировка.Заблокировать();
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'",
											 ОбщегоНазначения.КодОсновногоЯзыка()),
											 УровеньЖурналаРегистрации.Предупреждение,
											 ,
											 Выборка.Ссылка,
											 Таблица);
					Продолжить;
				КонецПопытки;
				
			КонецЕсли;
			
			ПеренестиПрисоединенныеФайлы(Выборка, ТаблицаФайлов, ОписаниеОшибки);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			БылиОшибки = Истина;
			
			Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ОписаниеОшибки();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			
		КонецПопытки;
	КонецЦикла;
	
	Если БылиОшибки И ПараметрыОбновления <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка обработки заявок сотрудников.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
			
КонецПроцедуры

Функция РезультатЗапросаЗаявокПеренестиПрисоединенныеФайлыВложений(Таблица) 
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаСотрудника.Ссылка КАК Ссылка,
	               |	ЗаявкаСотрудника.Файл КАК Файл
	               |ИЗ
	               |	#Таблица КАК ЗаявкаСотрудника
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", Таблица + ".УдалитьФайлыЗаявки");
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПеренестиПрисоединенныеФайлы(Заявка, ТаблицаФайлов, ОписаниеОшибки) Экспорт
	
	Для Каждого СтрокаФайл Из ТаблицаФайлов Цикл
		
		Попытка
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(СтрокаФайл.Файл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ВызватьИсключение;
		КонецПопытки;
		
		ПараметрыНовогоФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание, Вложение");
		ПараметрыНовогоФайла.ИмяБезРасширения = 	ДанныеФайла.Наименование;
		ПараметрыНовогоФайла.РасширениеБезТочки = 	ДанныеФайла.Расширение;
		ПараметрыНовогоФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		ПараметрыНовогоФайла.Служебный = Истина;
		ПараметрыНовогоФайла.ВладелецФайлов = Заявка.Ссылка;
		ПараметрыНовогоФайла.Вложение = Истина;
			
		Попытка
			ФайлПослеПереноса = РаботаСФайлами.ДобавитьФайл(ПараметрыНовогоФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ВызватьИсключение;
		КонецПопытки;
					
		ФайлКУдалению = СтрокаФайл.Файл.ПолучитьОбъект();
		ФайлКУдалению.ПометкаУдаления = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФайлКУдалению);

	КонецЦикла;
		
	ЗаявкаОбъект = Заявка.Ссылка.ПолучитьОбъект();
	ЗаявкаОбъект.УдалитьФайлыЗаявки.Очистить();
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаявкаОбъект);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников(ИмяТаблицы, ПараметрыОбновления) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументКадровогоЭДО.Ссылка КАК ДокументКадровогоЭДО,
	               |	ЗаявкаСотрудника.Ссылка КАК ЗаявкаСотрудника
	               |ИЗ
	               |	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК ЗаявкаСотрудника
	               |		ПО ДокументКадровогоЭДО.ОснованиеДокумента = ЗаявкаСотрудника.Ссылка
	               |ГДЕ
	               |	ДокументКадровогоЭДО.СодержимоеДокумента = ЗНАЧЕНИЕ(Перечисление.СодержимоеДокументов.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокументКадровогоЭДО.Дата УБЫВ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;	
	КонецЕсли;
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	БылиОшибки = Ложь;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Если ПараметрыОбновления <> Неопределено Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ЗаявкаСотрудника);
				
				ЭлементБлокировки = Блокировка.Добавить("Документ.ДокументКадровогоЭДО");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ДокументКадровогоЭДО);
				
				Попытка 
					Блокировка.Заблокировать();
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение, , Выборка.Ссылка, НСтр("ru = 'БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ'"));
					Продолжить;
				КонецПопытки;
				
			КонецЕсли;
			
			ДокументКадровогоЭДООбъект = Выборка.ДокументКадровогоЭДО.ПолучитьОбъект();
			Если ДокументКадровогоЭДООбъект.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника Тогда
				ДокументКадровогоЭДООбъект.СодержимоеДокумента = Перечисления.СодержимоеДокументов.НеСодержитЗарплаты;
			Иначе
				ДокументКадровогоЭДООбъект.СодержимоеДокумента = Перечисления.СодержимоеДокументов.СодержитЗарплату;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументКадровогоЭДООбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									 УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		КонецПопытки;	 	
	КонецЦикла;
	
	Если БылиОшибки И ПараметрыОбновления <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка установки содержимого документа у документ кадрового ЭДО.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ВызватьИсключение ОписаниеОшибки;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПравилаОбработкиЗаявокСотрудников

Функция ТаблицаСроковЗадач(РольИсполнителя, Подразделения)
	
	ПустыеПодразделения = ПараметрЗапросаПустыеПодразделения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.УстановитьПараметр("ПустыеПодразделения", ПустыеПодразделения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи КАК СрокЗадачи,
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя КАК РольИсполнителя,
	|	ПравилаОбработкиЗаявокСотрудников.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	|ГДЕ
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = &РольИсполнителя
	|	И ПравилаОбработкиЗаявокСотрудников.Подразделение В(&Подразделения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи,
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	|ГДЕ
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = &РольИсполнителя
	|	И ПравилаОбработкиЗаявокСотрудников.Подразделение В(&ПустыеПодразделения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаОбработкиЗаявокСотрудников.СрокЗадачи,
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	РегистрСведений.ПравилаОбработкиЗаявокСотрудников КАК ПравилаОбработкиЗаявокСотрудников
	|ГДЕ
	|	ПравилаОбработкиЗаявокСотрудников.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
	|	И ПравилаОбработкиЗаявокСотрудников.Подразделение В(&ПустыеПодразделения)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбновитьПравилаОбработкиЗаявокСотрудниковПриЗаписи(Источник, Отказ = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		Возврат;
	КонецЕсли;

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Подразделение = Источник.Ссылка;
	Если КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Если ТипЗнч(Подразделение) <> Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если ТипЗнч(Подразделение) <> БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		РолиИсполнителейЗадач = РолиИсполнителейЗадач();
		ИсточникДанных = Новый ТаблицаЗначений;
		ИсточникДанных.Колонки.Добавить("РольИсполнителя");
		ИсточникДанных.ЗагрузитьКолонку(РолиИсполнителейЗадач, "РольИсполнителя");
			
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПравилаОбработкиЗаявокСотрудников");
		ЭлементБлокировкиДанных.УстановитьЗначение("Подразделение", Подразделение);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ИсполнителиЗадач");
		ЭлементБлокировкиДанных.ИсточникДанных = ИсточникДанных;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("РольИсполнителя", "РольИсполнителя");
		ЭлементБлокировкиДанных.УстановитьЗначение("ОсновнойОбъектАдресации", Подразделение);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка КАК РолиИсполнителей
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Ссылка В(&РолиИсполнителей)";
		
		Запрос.УстановитьПараметр("РолиИсполнителей", РолиИсполнителейЗадач); 
		
		РолиИсполнителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РолиИсполнителей");
		Для каждого РольИсполнителя Из РолиИсполнителей Цикл
			ОбновитьПравилаОбработкиЗаявокСотрудников(РольИсполнителя, Подразделение);
			ОбновитьИсполнителейЗадач(РольИсполнителя, Подразделение);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ОбновитьПравилаОбработкиЗаявокСотрудников(РольИсполнителя, Подразделение)
	
	ПравилаОбработокЗаявокСотрудников = РегистрыСведений.ПравилаОбработкиЗаявокСотрудников; 
	
	НаборЗаписей = ПравилаОбработокЗаявокСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РольИсполнителя.Установить(РольИсполнителя);
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Прочитать();

	Если Подразделение.ПометкаУдаления Тогда
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
		Возврат;
		
	ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
		
		НаборЗаписейИерархии = ПравилаОбработокЗаявокСотрудников.СоздатьНаборЗаписей();
		Если Подразделение.Родитель.Пустая() Тогда
			НаборЗаписейИерархии.Отбор.РольИсполнителя.Установить(РольИсполнителя);
			НаборЗаписейИерархии.Прочитать();
		Иначе
			НаборЗаписейИерархии.Отбор.РольИсполнителя.Установить(РольИсполнителя);
			НаборЗаписейИерархии.Отбор.Подразделение.Установить(Подразделение.Родитель);
			НаборЗаписейИерархии.Прочитать();
		КонецЕсли;
		
		Если НаборЗаписейИерархии.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.РольИсполнителя = РольИсполнителя;
		НоваяЗапись.Подразделение = Подразделение;
		
		НоваяЗапись.СрокЗадачи = НаборЗаписейИерархии[0].СрокЗадачи;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИсполнителейЗадач(РольИсполнителя, Подразделение)
	
	НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РольИсполнителя.Установить(РольИсполнителя);
	НаборЗаписей.Отбор.ОсновнойОбъектАдресации.Установить(Подразделение);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 И Подразделение.ПометкаУдаления Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.РольИсполнителя = РольИсполнителя;
		НоваяЗапись.ОсновнойОбъектАдресации = Подразделение;
		НоваяЗапись.Исполнитель = Пользователи.ТекущийПользователь();
		
		НаборЗаписей.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Функция ПараметрЗапросаПустыеПодразделения() Экспорт

	ПустыеПодразделения = Новый Массив;
	ПустыеПодразделения.Добавить(Неопределено);
	ПустыеПодразделения.Добавить(Справочники.Организации.ПустаяСсылка());
	ПустыеПодразделения.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ПустыеПодразделения.Добавить(Новый(БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия()));
	
	Возврат ПустыеПодразделения;

КонецФункции

#КонецОбласти

#Область КабинетСотрудника

// Возвращает соответствие с зафиксированными зарегистрированными заявками.
//	Параметры:
//		ИдентификаторыЗаявок - Массив - массив идентификаторов заявок для проверки;
//		ТипЗаявки - Перечисления.ТипыЗаявокКабинетСотрудника - тип заявки из кабинета сотрудника;
//		ПричинаОтсутствия - Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника, Неопределено -
//			причина отсутствия, используется для СогласованиеОтсутствия.
//	Возвращаемое значение:
//		Соответствие - Идентификатор заявки, как строка и факт регистрации, как булево.
Функция ЗарегистрированныеЗаявки(ИдентификаторыЗаявок, ИмяТаблицы)
	
	Идентификаторы = Новый Соответствие;
	ИспользуетсяИдентификаторЭлектронногоДокумента = 
		(Метаданные.БизнесПроцессы[ИмяТаблицы].Реквизиты.Найти("ИдентификаторЭлектронногоДокумента") <> Неопределено); 	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	#ДополнительныеПоля
	|	Заявка.ИдентификаторЗаявки КАК ИдентификаторЗаявки
	|ИЗ
	|	#Таблица КАК Заявка
	|ГДЕ
	|	Заявка.ИдентификаторЗаявки В(&ИдентификаторыЗаявок)
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторЗаявки";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", "БизнесПроцесс." + ИмяТаблицы);
	Если ИспользуетсяИдентификаторЭлектронногоДокумента Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДополнительныеПоля", "Заявка.ИдентификаторЭлектронногоДокумента КАК ИдентификаторЭлектронногоДокумента,");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДополнительныеПоля", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИдентификаторыЗаявок", ИдентификаторыЗаявок);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторЗаявки") Цикл
		
		ИдентификаторыЭлектронныхДокументов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Если ИспользуетсяИдентификаторЭлектронногоДокумента
				 И Не ПустаяСтрока(Выборка.ИдентификаторЭлектронногоДокумента) Тогда
				ИдентификаторыЭлектронныхДокументов.Добавить(Выборка.ИдентификаторЭлектронногоДокумента);
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторыЭлектронныхДокументов.Количество() = 0 Тогда
			Идентификаторы.Вставить(Выборка.ИдентификаторЗаявки, Истина);
		Иначе
			Идентификаторы.Вставить(Выборка.ИдентификаторЗаявки, ИдентификаторыЭлектронныхДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает сроки исполнения заявок.
//	Параметры:
//		РольИсполнителя - СправочникСсылка.РолиИсполнителей;
//		Подразделения - Массив<СправочникСсылка.СтруктураПредприятия>.
//	Возвращаемое значение:
//		Соответствие<СправочникСсылка.СтруктураПредприятия, Число(2,0)>;
Функция СрокиИсполненияЗаявок(РольИсполнителя, Подразделения)
	
	ТаблицаСроковЗадач = ТаблицаСроковЗадач(РольИсполнителя, Подразделения);
	
	ПараметрыОтбора = Новый Структура("РольИсполнителя,Подразделение");
	ПараметрыОтбора.РольИсполнителя = РольИсполнителя;
	
	СрокиИсполненияЗаявок = Новый Соответствие;
	Для каждого Подразделение Из Подразделения Цикл
		
		ПараметрыОтбора.Подразделение = Подразделение;
		НайденныеСтроки = ТаблицаСроковЗадач.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СрокиИсполненияЗаявок.Вставить(Подразделение, НайденныеСтроки[0].СрокЗадачи);
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора.Подразделение = Неопределено;
		НайденныеСтроки = ТаблицаСроковЗадач.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СрокиИсполненияЗаявок.Вставить(Подразделение, НайденныеСтроки[0].СрокЗадачи);
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
		НайденныеСтроки = ТаблицаСроковЗадач.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СрокиИсполненияЗаявок.Вставить(Подразделение, НайденныеСтроки[0].СрокЗадачи);
			Продолжить;
		КонецЕсли;
		
		СрокиИсполненияЗаявок.Вставить(Подразделение, 7);
	КонецЦикла;
	
	Возврат СрокиИсполненияЗаявок;
	
КонецФункции

Функция	СоответствиеЗаявкиИТипаЗаявки() 
	
	ТипыЗаявок = Перечисления.ТипыЗаявокКабинетСотрудника;
	СоответствиеЗаявок = Новый Соответствие;
	
	СоответствиеЗаявок.Вставить(ТипыЗаявок.СправкаНДФЛ, 				"ЗаявкаСотрудникаСправка2НДФЛ");
	СоответствиеЗаявок.Вставить(ТипыЗаявок.ИзменениеЛичныхДанных,		"ЗаявкаСотрудникаИзменитьЛичныеДанные");
	СоответствиеЗаявок.Вставить(ТипыЗаявок.ЗаявлениеНаОтпуск,			"ЗаявкаСотрудникаОтпуск");
	СоответствиеЗаявок.Вставить(ТипыЗаявок.ЗаявлениеНаНалоговыеВычеты,	"ЗаявкаСотрудникаНалоговыйВычет");
	СоответствиеЗаявок.Вставить(ТипыЗаявок.СогласованиеОтсутствия,		СоответствиеОтсутствия());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СоответствиеЗаявок,
													   БизнесПроцессыЗаявокСотрудниковВнутренний.СоответствиеЗаявкиИТипаЗаявки());
	
	Возврат СоответствиеЗаявок;
	
КонецФункции

Функция СоответствиеОтсутствия()
	
	ПричиныОтсутствий = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника;
	СоответствиеОтсутствия = Новый Соответствие;
	
	СоответствиеОтсутствия.Вставить(ПричиныОтсутствий.Болезнь, 						"ЗаявкаСотрудникаОтсутствиеПоБолезни");
	СоответствиеОтсутствия.Вставить(ПричиныОтсутствий.ОтпускПоБеременностиИРодам,	"ЗаявкаСотрудникаОтсутствиеПоБолезни");
	СоответствиеОтсутствия.Вставить(ПричиныОтсутствий.УчебныйОтпуск,				"ЗаявкаСотрудникаОтпуск");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СоответствиеОтсутствия,
													   БизнесПроцессыЗаявокСотрудниковВнутренний.СоответствиеОтсутствия());
	
	Возврат СоответствиеОтсутствия;
	
КонецФункции

Функция ОбъектыАдресацииЗаявокИОрганизации(СписокФизическихЛиц)

	ОбъектыАдресацииЗаявокИОрганизации = Новый Структура("
	|ОбъектыАдресацииПоФизическомуЛицу,
	|ОбъектыАдресацииПоОрганизации,
	|ОбъектыАдресацииПоРабочемуМесту,
	|Организации");
	
	ОбъектыАдресацииЗаявокПоФизическимЛицамИОрганизации = ОбъектыАдресацииЗаявокПоФизическимЛицамИОрганизации(СписокФизическихЛиц);
	ОбъектыАдресацииЗаявокИОрганизации.ОбъектыАдресацииПоФизическомуЛицу = ОбъектыАдресацииЗаявокПоФизическимЛицамИОрганизации.ОбъектыАдресации;
	ОбъектыАдресацииЗаявокИОрганизации.Организации = ОбъектыАдресацииЗаявокПоФизическимЛицамИОрганизации.Организации;

	ОбъектыАдресацииЗаявокИОрганизации.ОбъектыАдресацииПоОрганизации = ОбъектыАдресацииЗаявокПоОрганизации(СписокФизическихЛиц);
	ОбъектыАдресацииЗаявокИОрганизации.ОбъектыАдресацииПоРабочемуМесту = ОбъектыАдресацииЗаявокПоРабочемуМесту(СписокФизическихЛиц);
	
	Возврат ОбъектыАдресацииЗаявокИОрганизации;
	
КонецФункции

Функция ОбъектыАдресацииЗаявокПоФизическимЛицамИОрганизации(СписокФизическихЛиц)
	
	ОбъектыАдресацииЗаявокИОрганизации = Новый Структура("
	|ОбъектыАдресации,
	|Организации");
	
	ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Ложь, СписокФизическихЛиц, ТекущаяДатаСеанса());
		
	ОбъектыАдресации = Новый Соответствие;
	Организации = Новый Соответствие;
	
	ОсновныеСотрудники = Новый Массив;
	Для каждого ЭлементКоллекции Из ОсновныеСотрудникиФизическихЛиц Цикл
		ОсновныеСотрудники.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Если КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		
		КадровыеДанные = "Организация,Подразделение";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные);
		ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ИмяПоляПодразделение = "Подразделение";
		
	Иначе
		
		ИмяОпции = "ИспользоватьШтатноеРасписание";
		ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
		ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанные = "Организация,МестоВСтруктуреПредприятия";
		Иначе
			КадровыеДанные = "Организация,Подразделение,Должность";
		КонецЕсли;
		
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные);
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.Организация КАК Организация
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанные КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Организация КАК Организация,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			
			УстановитьПривилегированныйРежим(Истина);
			ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			
			ПозицииСотрудников = Новый Соответствие;
			Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
				ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
			КонецЦикла;
			
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
			СтруктураПредприятия = БизнесПроцессыЗаявокСотрудниковВнутренний.МестаПозицийВСтруктуреПредприятия(Позиции);
			ПодразделенияПозиций = Новый Соответствие;
			Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
				ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
			КонецЦикла;
			
			ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
			Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
				ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
				СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[ДолжностьПоШтатномуРасписанию];
			КонецЦикла;
			
		КонецЕсли;
		
		ПустоеПодразделение = Новый(БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия());
		ИмяПоляПодразделение = "МестоВСтруктуреПредприятия";
		
	КонецЕсли;
		
	ТаблицаДанных.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		Отбор.Сотрудник = ОсновныеСотрудникиФизическихЛиц[ФизическоеЛицо];
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
		Подразделение = ПустоеПодразделение;
		Организация = ПустаяОрганизация;
		Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0][ИмяПоляПодразделение]) Тогда
			Подразделение = НайденныеСтроки[0][ИмяПоляПодразделение];
			Организация = НайденныеСтроки[0].Организация;
		КонецЕсли;
		ОбъектыАдресации.Вставить(ФизическоеЛицо, Подразделение);
		Организации.Вставить(ФизическоеЛицо, Организация);
	КонецЦикла;
	
	ОбъектыАдресацииЗаявокИОрганизации.ОбъектыАдресации = ОбъектыАдресации;
	ОбъектыАдресацииЗаявокИОрганизации.Организации = Организации;
	Возврат ОбъектыАдресацииЗаявокИОрганизации;
	
КонецФункции

Функция ОбъектыАдресацииЗаявокПоОрганизации(СписокФизическихЛиц)
	
	ОбъектыАдресацииЗаявок = Новый Соответствие;
	
	ПубликоватьСтруктуруЮридическихЛиц = КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	НЕ Организации.ПометкаУдаления
	               |	И НЕ Организации.Предопределенный";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		ОбъектыАдресации = Новый Соответствие;
		
		ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц,
																					   Истина,
																					   ВыборкаОрганизаций.Ссылка,
																					   ТекущаяДатаСеанса());
		ОсновныеСотрудники = ОсновныеСотрудникиФизическихЛиц.ВыгрузитьКолонку("Сотрудник");
		
		Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			
			КадровыеДанные = "ФизическоеЛицо,Подразделение";
			ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные);
			ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ИмяПоляПодразделение = "Подразделение";
			
		Иначе
			
			ИмяОпции = "ИспользоватьШтатноеРасписание";
			ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
			ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
			Если ВедетсяШтатноеРасписание Тогда
				КадровыеДанные = "ФизическоеЛицо, МестоВСтруктуреПредприятия";
			Иначе
				КадровыеДанные = "ФизическоеЛицо, Подразделение, Должность";
			КонецЕсли;
			
			ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные);
			Если Не ВедетсяШтатноеРасписание Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
				|	КадровыеДанные.Сотрудник КАК Сотрудник,
				|	КадровыеДанные.Подразделение КАК Подразделение,
				|	КадровыеДанные.Должность КАК Должность
				|ПОМЕСТИТЬ ВТКадровыеДанные
				|ИЗ
				|	&КадровыеДанные КАК КадровыеДанные
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	КадровыеДанные.Сотрудник КАК Сотрудник,
				|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
				|ИЗ
				|	ВТКадровыеДанные КАК КадровыеДанные
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
				|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
				|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
				
				УстановитьПривилегированныйРежим(Истина);
				ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
				УстановитьПривилегированныйРежим(Ложь);
				
				ПозицииСотрудников = Новый Соответствие;
				Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
					ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
				КонецЦикла;
				
				Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
				СтруктураПредприятия = БизнесПроцессыЗаявокСотрудниковВнутренний.МестаПозицийВСтруктуреПредприятия(Позиции);
				ПодразделенияПозиций = Новый Соответствие;
				Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
					ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
				КонецЦикла;
				
				ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
				Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
					ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
					СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[ДолжностьПоШтатномуРасписанию];
				КонецЦикла;
				
			КонецЕсли;
			
			ПустоеПодразделение = Новый(БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия());
			ИмяПоляПодразделение = "МестоВСтруктуреПредприятия";
			
		КонецЕсли;
	
		ТаблицаДанных.Индексы.Добавить("Сотрудник");
		Отбор = Новый Структура("ФизическоеЛицо");
		Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
			Отбор.ФизическоеЛицо = ФизическоеЛицо;
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
			Подразделение = ПустоеПодразделение;
			Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0][ИмяПоляПодразделение]) Тогда
				Подразделение = НайденныеСтроки[0][ИмяПоляПодразделение];
			КонецЕсли;
			ОбъектыАдресации.Вставить(ФизическоеЛицо, Подразделение);
		КонецЦикла;
		
		ОбъектыАдресацииЗаявок.Вставить(ВыборкаОрганизаций.Ссылка, ОбъектыАдресации);
		
	КонецЦикла;
	
	Возврат ОбъектыАдресацииЗаявок;
		
КонецФункции

Функция ОбъектыАдресацииЗаявокПоРабочемуМесту(СписокФизическихЛиц)
	
	ОбъектыАдресации = Новый Соответствие;
	
	СотрудникиФизическихЛиц = КадровыйУчет.СотрудникиФизическихЛиц(СписокФизическихЛиц);
	
	Если КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		
		КадровыеДанные = "Подразделение";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СотрудникиФизическихЛиц, КадровыеДанные);
		ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ИмяПоляПодразделение = "Подразделение";
		
	Иначе
		
		ИмяОпции = "ИспользоватьШтатноеРасписание";
		ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
		ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанные = "МестоВСтруктуреПредприятия";
		Иначе
			КадровыеДанные = "Подразделение, Должность";
		КонецЕсли;
		
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СотрудникиФизическихЛиц, КадровыеДанные);
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанные КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			
			УстановитьПривилегированныйРежим(Истина);
			ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			
			ПозицииСотрудников = Новый Соответствие;
			Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
				ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
			КонецЦикла;
			
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
			СтруктураПредприятия = БизнесПроцессыЗаявокСотрудниковВнутренний.МестаПозицийВСтруктуреПредприятия(Позиции);
			ПодразделенияПозиций = Новый Соответствие;
			Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
				ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
			КонецЦикла;
			
			ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
			Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
				ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
				СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[ДолжностьПоШтатномуРасписанию];
			КонецЦикла;
			
		КонецЕсли;
		
		ПустоеПодразделение = Новый(БизнесПроцессыЗаявокСотрудниковВнутренний.ТипСтруктураПредприятия());
		ИмяПоляПодразделение = "МестоВСтруктуреПредприятия";
		
	КонецЕсли;
	
	ТаблицаДанных.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	Для каждого СтрокаТЗ Из СотрудникиФизическихЛиц Цикл
		Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
		Подразделение = ПустоеПодразделение;
		Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0][ИмяПоляПодразделение]) Тогда
			Подразделение = НайденныеСтроки[0][ИмяПоляПодразделение];
		КонецЕсли;
		ОбъектыАдресации.Вставить(СтрокаТЗ.Сотрудник, Подразделение);
	КонецЦикла;
	
	Возврат ОбъектыАдресации;
		
КонецФункции

Функция РолиИсполнителейЗаявокПоТипамЗапросов()

	РолиИсполнителей = Новый Соответствие;
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаНалоговыйВычет",					Справочники.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты);
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаОтпуск", 						Справочники.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск);
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаИзменитьЛичныеДанные", 			Справочники.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных);
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаОтсутствие",						Справочники.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий);
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаСправка2НДФЛ", 					Справочники.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ);
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаСправкаОстаткиОтпусков", 		Справочники.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков);
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаСправкаСМестаРаботы", 			Справочники.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы);
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаДобровольныеСтраховыеВзносы", 	Справочники.РолиИсполнителей.ОтветственныйЗаУдержаниеДСВ);
	РолиИсполнителей.Вставить("ЗаявкаСотрудникаОтсутствиеПоБолезни",			Справочники.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий);
	
	Возврат РолиИсполнителей;

КонецФункции

Функция ПрисоединитьФайлКЗаявке(ЗаявкаСотрудника, ЭлектронныйДокумент, Вложение = Ложь)
	АдресВложения = ПоместитьВоВременноеХранилище(ЭлектронныйДокумент.ДвоичныеДанные);
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Вложение");
	ПараметрыФайла.ВладелецФайлов = ЗаявкаСотрудника.Ссылка;
	ПараметрыФайла.ИмяБезРасширения = ЭлектронныйДокумент.ИмяФайла;
	ПараметрыФайла.РасширениеБезТочки = ЭлектронныйДокумент.РасширениеФайла;
	ПараметрыФайла.Вложение = Вложение;
	Возврат РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВложения);
КонецФункции

Функция ТипыЗаявокСогласовываемыеРуководителем() Экспорт
	
	ТипыЗаявок = Новый Массив;
	ТипыЗаявок.Добавить(Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаОтпуск"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыЗаявок,
												 БизнесПроцессыЗаявокСотрудниковВнутренний.ТипыЗаявокСогласовываемыеРуководителем());
	
	Возврат ТипыЗаявок;
	
КонецФункции

#КонецОбласти

#Область ДокументыКЭДО

Процедура СоздатьДокументКЭДОПоЗаявке(ЗаявкаСотрудника, ЭлектронныйДокумент, Организация, ИдентификаторДокумента)
	
	ОписаниеСоставаОбъекта = Документы.ДокументКадровогоЭДО.СвойстваДокумента(ЭлектронныйДокумент,
																			  Организация,
																			  ЗаявкаСотрудника.ФизическоеЛицо,
																			  ЗаявкаСотрудника.Ссылка,
																			  Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника,
																			  Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);

	ОписаниеСоставаОбъекта.Дата									= ЗаявкаСотрудника.Дата;
	ОписаниеСоставаОбъекта.ИдентификаторЗаявкиКабинетСотрудника = ЗаявкаСотрудника.ИдентификаторЗаявки;
	ОписаниеСоставаОбъекта.ИдентификаторДокумента				= ?(ЗначениеЗаполнено(ИдентификаторДокумента),
																	ИдентификаторДокумента,
																	ЗаявкаСотрудника.ИдентификаторЗаявки);
	
	Документы.ДокументКадровогоЭДО.Добавить(ОписаниеСоставаОбъекта);
	
КонецПроцедуры

// Возвращает параметры формы для открытия текущей задачи бизнес-процесса, если нет задач, возвращает форму бизнес-процесса.
//	Параметры:
//		БизнесПроцесс - БизнесПроцессСсылка - бизнес процесс по которому находится текущая задача и подбирается форма открытия.
//	Возвращаемое значение:
//		Структура - структура для открытия формы.
Функция ФормаОткрытияТекущейЗадачиБизнесПроцесса(БизнесПроцесс) Экспорт
	
	МетаданныеБизнесПроцесса = БизнесПроцесс.Метаданные();
	ИмяТаблицы = МетаданныеБизнесПроцесса.Имя;
	ИмяФормы = МетаданныеБизнесПроцесса.Формы.ФормаБизнесПроцесса.Имя;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", БизнесПроцесс));
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	               |	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗадачаИсполнителя.Выполнена УБЫВ,
	               |	ЗадачаИсполнителя.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = БизнесПроцессы[ИмяТаблицы].ФормаВыполненияЗадачи(Выборка.Ссылка, Выборка.ТочкаМаршрута);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

