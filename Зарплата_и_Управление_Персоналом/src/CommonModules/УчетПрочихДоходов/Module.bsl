
#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыРасчетаДокумента() Экспорт
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СписокФизическихЛиц");
	ПараметрыРасчета.Вставить("ОбновитьБухУчетНачислений", Истина);
	ПараметрыРасчета.Вставить("ОбновитьБухУчетНДФЛ", Истина);
	ПараметрыРасчета.Вставить("ОбновитьБухУчетУдержаний", Ложь);
	ПараметрыРасчета.Вставить("РассчитатьНалогиИВзносы", Истина);
	ПараметрыРасчета.Вставить("РассчитатьУдержания", Истина);
	ПараметрыРасчета.Вставить("РасчетНДФЛНарастающимИтогомСНачалаГода");
	ПараметрыРасчета.Вставить("ИспользоватьСтатьиФинансирования");
	ПараметрыРасчета.Вставить("МаксимальноеКоличествоПоказателейУдержания");
	
	Возврат ПараметрыРасчета;
КонецФункции

Функция РассчитатьДокумент(Объект, НастройкиРасчета = Неопределено) Экспорт
	
	ПараметрыРасчета = ПараметрыРасчета(Объект, НастройкиРасчета);
	ПрочитатьДанныеОбъекта(Объект, ПараметрыРасчета);
	
	РаспределитьНачисленияПоСтатьям(Объект, ПараметрыРасчета);
	
	РассчитатьНДФЛИВзносы(Объект, ПараметрыРасчета);
	РаспределитьНДФЛПоСтатьям(Объект, ПараметрыРасчета);
	
	РассчитатьУдержания(Объект, ПараметрыРасчета);
	РаспределитьУдержанияПоСтатьям(Объект, ПараметрыРасчета);
	
	РезультатРасчета = ПараметрыРасчета.РезультатРасчета;
	
	Возврат РезультатРасчета;
	
КонецФункции

Процедура РезультатРасчетаВДанныеФормы(Форма, ДанныеРасчета) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыДляПроверкиРезультатаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияНачислений();
	
	СтрокиНачисленийФизЛиц = Новый Соответствие;
	Если ДанныеРасчета.Свойство("НачисленияУдержанияВзносы") Тогда
		Для Каждого СтрокаНачислений Из ДанныеРасчета.НачисленияУдержанияВзносы Цикл
			СтрокиНачисленийФизЛиц.Вставить(СтрокаНачислений.ФизическоеЛицо, СтрокаНачислений);
		КонецЦикла;
	КонецЕсли;
	ИменаПолейВзносов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(Ложь,,Ложь));  
	
	// Начисления
	Форма.ИтогВзносы = 0;
	Для Каждого СтрокаДокумента Из Объект.НачисленияУдержанияВзносы Цикл
		
		СтрокаНачислений = СтрокиНачисленийФизЛиц[СтрокаДокумента.ФизическоеЛицо];
		Если СтрокаНачислений = Неопределено Тогда
			Форма.ИтогВзносы = Форма.ИтогВзносы + СтрокаДокумента.ИтогВзносыСтрока;
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаНачислений);
		
		// Итоги
		СтрокаДокумента.КВыплате = СтрокаДокумента.Начислено - СтрокаДокумента.НДФЛ + СтрокаДокумента.ЗачтеноАвансовыхПлатежей - СтрокаДокумента.Удержано;
		СтрокаДокумента.ИтогВзносыСтрока = 0;
		Для Каждого ИмяПоля Из ИменаПолейВзносов Цикл
			СтрокаДокумента.ИтогВзносыСтрока = СтрокаДокумента.ИтогВзносыСтрока + СтрокаДокумента[ИмяПоля];
		КонецЦикла;
		Форма.ИтогВзносы = Форма.ИтогВзносы + СтрокаДокумента.ИтогВзносыСтрока;
		
		// Распределение начислений
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
			
			Если СтрокаНачислений.РаспределениеПоСтатьям <> Неопределено Тогда
				
				СтрокаДокумента.РезультатРаспределения = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(СтрокаНачислений.РаспределениеПоСтатьям); 
				
				ПрочийДоход = НачислениеДокумента(Форма.Объект);
				СтрокаДокумента.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиНачисления(
					СтрокаНачислений.Начислено,
					ПрочийДоход,
					СтрокаНачислений.РаспределениеПоСтатьям, 
					ПараметрыДляПроверкиРезультатаРаспределения);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Очищаем НДФЛ
	Идентификаторы = Новый Соответствие;
	КоличествоСтрок = Объект.НДФЛ.Количество();
	Для Сч = 1 По КоличествоСтрок Цикл
		СтрокаДокумента = Объект.НДФЛ[КоличествоСтрок - Сч];
		Если СтрокиНачисленийФизЛиц[СтрокаДокумента.ФизическоеЛицо] <> Неопределено Тогда
			Идентификаторы.Вставить(СтрокаДокумента.ИдентификаторСтрокиНДФЛ, Истина);
			Объект.НДФЛ.Удалить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	Если Идентификаторы.Количество() > 0 Тогда
		КоличествоСтрок = Объект.ПримененныеВычетыНаДетейИИмущественные.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаДокумента = Объект.ПримененныеВычетыНаДетейИИмущественные[КоличествоСтрок - Сч];
			Если Идентификаторы[СтрокаДокумента.ИдентификаторСтрокиНДФЛ] <> Неопределено Тогда
				Объект.ПримененныеВычетыНаДетейИИмущественные.Удалить(СтрокаДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Очищаем удержания
	Идентификаторы = Новый Соответствие;
	КоличествоСтрок = Объект.Удержания.Количество();
	Для Сч = 1 По КоличествоСтрок Цикл
		СтрокаДокумента = Объект.Удержания[КоличествоСтрок - Сч];
		Если СтрокиНачисленийФизЛиц[СтрокаДокумента.ФизическоеЛицо] <> Неопределено Тогда
			Идентификаторы.Вставить(СтрокаДокумента.ИдентификаторСтрокиВидаРасчета, Истина);
			Объект.Удержания.Удалить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	Если Идентификаторы.Количество() > 0 Тогда
		КоличествоСтрок = Объект.Показатели.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаДокумента = Объект.Показатели[КоличествоСтрок - Сч];
			Если Идентификаторы[СтрокаДокумента.ИдентификаторСтрокиВидаРасчета] <> Неопределено Тогда
				Объект.Показатели.Удалить(СтрокаДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// НДФЛ
	ПараметрыПроверкиРаспределенияНДФЛ = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияУдержаний();
	ПараметрыПроверкиРаспределенияНДФЛ.Сотрудник = Ложь;
	Для Каждого СтрокаИсточник Из ДанныеРасчета.НДФЛ Цикл
		СтрокаНДФЛ = Объект.НДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаИсточник);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
			
			Если СтрокаИсточник.РаспределениеПоСтатьям <> Неопределено Тогда
				
				СтрокаНДФЛ.РезультатРаспределения = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(СтрокаИсточник.РаспределениеПоСтатьям); 
				СтрокаНДФЛ.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиУдержания(
					СтрокаНДФЛ.Налог - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежей + СтрокаНДФЛ.НалогСПревышения - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышения, 
					СтрокаИсточник.РаспределениеПоСтатьям, 
					ПараметрыПроверкиРаспределенияНДФЛ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеРасчета.ПримененныеВычетыНаДетейИИмущественные, Объект.ПримененныеВычетыНаДетейИИмущественные);
	
	// Удержания
	ДанныеРасчета.Удержания.Колонки.Добавить("Владелец");
	ТаблицыУдержаний = РасчетЗарплатыРасширенныйФормы.ТаблицыУдержанийФормы();
	ТаблицыУдержаний.Удержания = Объект.Удержания;
	РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыУдержанияВДанныеФормы(ТаблицыУдержаний, ДанныеРасчета.Удержания);
	ОписанияТаблиц = Новый Структура("Удержания", ОписаниеТаблицыУдержаний());
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(Форма, ОписанияТаблиц);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		ПроверяемыеПоля = ОтражениеЗарплатыВБухучетеРасширенный.ПараметрыДляПроверкиРезультатовРаспределенияУдержаний();
		Если ПроверяемыеПоля.Свойство("Сотрудник") Тогда
			ПроверяемыеПоля.Удалить("Сотрудник");
		КонецЕсли;
		
		Для Каждого СтрокаФормы Из Объект.Удержания Цикл
			Если СтрокаФормы.РезультатРаспределения <> Неопределено Тогда
				СтрокаФормы.КомандаРедактированияРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ПредставлениеРезультатаРаспределенияСтрокиУдержания(
					СтрокаФормы.Результат, 
					СтрокаФормы.РезультатРаспределения,
					ПроверяемыеПоля);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РеквизитФормыВДанныеДокумента(Объект, Форма, ОписаниеДокумента) Экспорт
	
	ЗаполнитьИдентификаторыСтрок("НачисленияУдержанияВзносы" , Объект, Форма.Объект, ОписаниеДокумента);
	ЗаполнитьИдентификаторыСтрок("Удержания" , Объект, Форма.Объект, ОписаниеДокумента);
	
	ОписаниеТаблицы = ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата.Удержания;
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(Форма, Объект, ОписаниеТаблицы, 2);
	
	ОписанияТаблицДляРаспределенияРезультата = Новый Массив;
	Для Каждого ОписаниеТаблицы Из ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата Цикл
		ОписанияТаблицДляРаспределенияРезультата.Добавить(ОписаниеТаблицы.Значение);
	КонецЦикла;
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(Форма, Объект, ОписанияТаблицДляРаспределенияРезультата);
	
КонецПроцедуры

Функция СведенияОДоходахНДФЛДокумента(Объект, ФизическоеЛицо) Экспорт
	
	СведенияОДоходахНДФЛДокумента = Новый Структура("ВычетыКДоходам, СведенияОДоходах");
	
	ПараметрыРасчета = ПараметрыРасчета(Объект);
	ПараметрыРасчета.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыРасчета.ОбновитьБухУчетНачислений = Ложь;
	
	РезультатРасчетаЗаполнитьНачисления(Объект, ПараметрыРасчета);
	СоздатьВТДанныеДокумента(Объект, ПараметрыРасчета);
	
	ДоходыНДФЛ = ДоходыНДФЛ(Объект, ПараметрыРасчета);
	ДатаОперацииПоНалогам = УчетНДФЛ.ДатаОперацииПоДокументу(Объект.Дата, Объект.ПериодРегистрации);
	НаборДвижений = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.ВыплатаБывшимСотрудникам, Объект.Ссылка);
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(НаборДвижений, Ложь, Объект.Организация, ДатаОперацииПоНалогам, ДоходыНДФЛ, Ложь, Ложь);
	СведенияОДоходахНДФЛДокумента.СведенияОДоходах = НаборДвижений.СведенияОДоходахНДФЛ.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.*
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)";
	СведенияОДоходахНДФЛДокумента.ВычетыКДоходам = Запрос.Выполнить().Выгрузить();
	
	Возврат СведенияОДоходахНДФЛДокумента;
	
КонецФункции

Процедура ПровестиПоУчетам(Объект, Отказ) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
	
	ДанныеДляПроведения = ДанныеДляПроведения(Объект);
	
	РегистрироватьВзаиморасчеты = ПолучитьФункциональнуюОпцию("ИспользоватьВедомостиДляВыплатыПрочихДоходов") И Объект.РегистрироватьВыплатуВедомостью;
	СпособРасчетовСФизическимиЛицами = ?(РегистрироватьВзаиморасчеты, Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами, Неопределено);
	МесяцНачисления = НачалоМесяца(Объект.ПериодРегистрации);
	
	// НДФЛ
	ДатаОперацииПоНалогам = УчетНДФЛ.ДатаОперацииПоДокументу(Объект.ПланируемаяДатаВыплаты, Объект.ПериодРегистрации);
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Объект.Движения, Отказ, Объект.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.ДанныеДляНДФЛДоходы, Ложь, Ложь, Объект.Ссылка);
	УчетНДФЛ.СформироватьНалогиВычеты(Объект.Движения, Отказ, Объект.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, Ложь, Ложь, Объект.ПланируемаяДатаВыплаты);
	УчетНДФЛ.СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокумента(Объект.Движения, Отказ, Объект.Организация, ДанныеДляПроведения.ФизическиеЛица, Объект.Ссылка);
	
	// Подготовим таблицу ДанныеДляПроведения.НДФЛ для дальнейшей регистрации данных.
	УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам, Объект.Организация, ДатаОперацииПоНалогам);
	Если Не РегистрироватьВзаиморасчеты Тогда
		
		УчетНДФЛ.СформироватьУдержанныйНалогПоТаблицеЗначений(Объект.Движения, Отказ, Объект.Организация, Объект.ПланируемаяДатаВыплаты, ДанныеДляПроведения.НДФЛУдержанный);
		УчетНДФЛРасширенный.УточнитьУчетНалогаПоЦеннымБумагам(Объект.Движения);
		
		ДанныеДляДополнения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровДополненияНДФЛСтатьями();
		БазаРаспределения 	= ДанныеДляПроведения.НДФЛПоСотрудникам.Скопировать();
		Для каждого СтрокаТЗ Из БазаРаспределения Цикл
			Если СтрокаТЗ.НачислениеУдержание <> Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения Тогда
				СтрокаТЗ.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
			КонецЕсли;
		КонецЦикла;
		ДанныеДляДополнения.БазаРаспределения 	= БазаРаспределения;
		ДанныеДляДополнения.ПоляОтбора 			= "ФизическоеЛицо,НачислениеУдержание";
		
		УчетНДФЛ.СформироватьНДФЛКПеречислению(Объект.Движения, Отказ);
		ОтражениеЗарплатыВУчете.ДополнитьНДФЛКПеречислениюСведениямиОРаспределенииПоСтатьям(Объект.Движения, ДанныеДляДополнения);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
			Модуль.РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛКПеречислению(Объект.Движения, Отказ);
		КонецЕсли;
		
		Если Объект.ПеречислениеНДФЛВыполнено Тогда
			
			УчетНДФЛРасширенный.ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Объект.Движения, Отказ,Объект. Организация, Объект.ДатаПлатежаНДФЛ, Объект.ПеречислениеНДФЛРеквизиты);
			
			УчетНДФЛ.СформироватьНДФЛПеречисленный(Объект.Движения, Отказ);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
				Модуль.РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛПеречисленный(Объект.Движения, Отказ);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// - Регистрация начислений и удержаний.
	УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Объект.Движения, Отказ, Объект.Организация, МесяцНачисления,
										ДанныеДляПроведения.Начисления, ДанныеДляПроведения.УдержанияКонтрагентов, ДанныеДляПроведения.НДФЛПоСотрудникам, СпособРасчетовСФизическимиЛицами);
										
	// Дополняем доходы НДФЛ сведениями о распределении по статьям финансирования и/или статьям расходов.
	ОтражениеЗарплатыВУчетеРасширенный.ДополнитьСведенияОДоходахНДФЛКонтрагентовСведениямиОРаспределенииПоСтатьям(Объект.Движения);
										
	ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоКонтрагентамАкционерам(Объект.Движения, Отказ, Объект.Организация, МесяцНачисления,
										ДанныеДляПроведения.Начисления, ДанныеДляПроведения.УдержанияКонтрагентов, ДанныеДляПроведения.НДФЛПоСотрудникам, Истина);
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(Объект.Движения, Отказ, Объект.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.Удержания);
	ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Объект.Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
	РасчетЗарплатыРасширенный.СформироватьДвиженияУдержанийДоПределаПоСотрудникам(Объект.Движения, Отказ, МесяцНачисления, ДанныеДляПроведения.УдержанияДоПределаПоСотрудникам);
	РасчетЗарплатыРасширенный.СформироватьЗадолженностьПоУдержаниямФизическихЛиц(Объект.Движения, ДанныеДляПроведения.ЗадолженностьПоУдержаниям);
	РасчетЗарплатыРасширенный.СформироватьДополнениеРасчетнойБазыУдержаний(Объект.Движения, ДанныеДляПроведения.ДополнениеРасчетнойБазыУдержаний);
	
	// Страховые взносы
	УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(Объект.Движения, Отказ, Объект.Организация, МесяцНачисления, ДанныеДляПроведения.ДанныеДляВзносов, Истина);
	УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(Объект.Движения, Отказ, Объект.Организация, МесяцНачисления, ДанныеДляПроведения.СтраховыеВзносы);
	УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(Объект.Движения, Отказ, Объект.Организация, МесяцНачисления, Объект.Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
	
КонецПроцедуры

Функция ДанныеДляБухучетаЗарплатыПервичныхДокументов(Объект) Экспорт

	ДанныеДляБухучета = Новый Структура;
	ДанныеДляБухучета.Вставить("ДокументОснование", Объект.Ссылка);
	
	ТаблицаБухучетЗарплаты = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаБухучетЗарплатыПервичныхДокументов();
	
	СтатьяРасходов = Объект.СтатьяРасходов;
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		СтатьяРасходов = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяРасчетыСКонтрагентами();
	КонецЕсли;
	
	НоваяСтрока = ТаблицаБухучетЗарплаты.Добавить();
	НоваяСтрока.ДокументОснование = Объект.Ссылка;
	НоваяСтрока.НачислениеУдержание = НачислениеДокумента(Объект);
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = Объект.СпособОтраженияЗарплатыВБухучете;
	НоваяСтрока.ОтношениеКЕНВД = Объект.ОтношениеКЕНВД;
	НоваяСтрока.СтатьяФинансирования = Объект.СтатьяФинансирования;
	НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
	
	ДанныеДляБухучета.Вставить("ТаблицаБухучетЗарплаты", ТаблицаБухучетЗарплаты);
	
	Возврат ДанныеДляБухучета;
	
КонецФункции

Процедура ЗаполнитьУдержанияФизическихЛиц(Объект, Знач ФизическиеЛица) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияУдержанияВзносы, "ФизическоеЛицо");
	КонецЕсли;
	
	Удержания = ТаблицаУдержания();
	
	КатегорияИсполнительныйЛист = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ИсполнительныйЛист");
	КатегорияВознаграждениеПлатежногоАгента = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаУвольнения, ГоловнаяОрганизация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Отбор = Новый Структура("ФизическоеЛицо, ДокументОснование, Удержание");
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	ПериодРасчета = Новый СтандартныйПериод;
	ДатаУдержания = НачалоДня(?(ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты), Объект.ПланируемаяДатаВыплаты, Объект.Дата));
	Если ДатаУдержания > КонецМесяца(Объект.ПериодРегистрации) Тогда
		ДатаУдержания = НачалоДня(КонецМесяца(Объект.ПериодРегистрации));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.ФизическоеЛицо,
	|	СотрудникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ПериодРегистрации
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) > КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНачала,
	|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ИТОГИ ПО
	|	ГоловнаяОрганизация,
	|	ДатаНачала";
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПериода = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериода.Следующий() Цикл
			
			ПериодРасчета.ДатаНачала = НачалоМесяца(ВыборкаПериода.ДатаНачала);
			ПериодРасчета.ДатаОкончания = КонецМесяца(ВыборкаПериода.ДатаНачала);
			МенеджерРасчета.Инициализировать(ПериодРасчета, Объект.Организация);
			
			ФизическиеЛицаПериода = Новый Массив;
			Выборка = ВыборкаПериода.Выбрать();
			Пока Выборка.Следующий() Цикл
				ФизическиеЛицаПериода.Добавить(Выборка.ФизическоеЛицо);
			КонецЦикла;
			
			МенеджерРасчета.ЗаполнитьУдержанияФизическихЛицЗаПериод(ФизическиеЛицаПериода, ВыборкаОрганизация.ГоловнаяОрганизация, ВыборкаПериода.ДатаНачала, КонецМесяца(ВыборкаПериода.ДатаНачала));
			Для Каждого СтрокаУдержания Из МенеджерРасчета.Зарплата.Удержания Цикл
				Если СтрокаУдержания.Категория = КатегорияИсполнительныйЛист 
					Или СтрокаУдержания.Категория = КатегорияВознаграждениеПлатежногоАгента Тогда
					
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаУдержания);
					Если Удержания.НайтиСтроки(Отбор).Количество() Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Удержания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
					НоваяСтрока.ДатаНачала = ДатаУдержания;
					НоваяСтрока.ДатаОкончания = КонецДня(ДатаУдержания);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Проверим удержания:
	// Если Сотрудник уволен, тогда исполнительные листы фиксированной суммой и до предела не считаем
	// Если Сотрудник не уволен, тогда можем считать все.
	ТаблицаУдержаний = Удержания.Скопировать(, "ДокументОснование, ФизическоеЛицо");
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);
	Запрос.УстановитьПараметр("ДатаВыплаты", Объект.ПланируемаяДатаВыплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТИсполнительныеЛисты
	|ИЗ
	|	&ТаблицаУдержаний КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительныеЛисты.ДокументОснование КАК ДокументОснование,
	|	ИсполнительныеЛисты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МИНИМУМ(ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	ВТИсполнительныеЛисты КАК ИсполнительныеЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ИсполнительныеЛисты.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсполнительныеЛисты.ДокументОснование,
	|	ИсполнительныеЛисты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(УсловияУдержанияПоИсполнительномуДокументу.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериодыПолученияУсловийПоИсполнительнымЛистам
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО ВТДанные.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И (ВЫБОР
	|				КОГДА ВТДанные.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА &ДатаВыплаты
	|				ИНАЧЕ ВТДанные.ДатаУвольнения
	|			КОНЕЦ > УсловияУдержанияПоИсполнительномуДокументу.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанные.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПолученияУсловийПоИсполнительнымЛистам КАК ВТПериодыПолученияУсловийПоИсполнительнымЛистам
	|		ПО ВТДанные.ДокументОснование = ВТПериодыПолученияУсловийПоИсполнительнымЛистам.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО ВТДанные.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И (ВТПериодыПолученияУсловийПоИсполнительнымЛистам.Период = УсловияУдержанияПоИсполнительномуДокументу.Период)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УсловияУдержанияПоИсполнительномуДокументу.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой)
	|					ИЛИ ЕСТЬNULL(ВТДанные.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|						И УсловияУдержанияПоИсполнительномуДокументу.Предел <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдаляемыеСтроки = Удержания.НайтиСтроки(Новый Структура("ДокументОснование", Выборка.ДокументОснование));
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Удержания.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	// Очищаем данные объекта
	Идентификаторы = Новый Массив;
	КоличествоСтрок = Объект.Удержания.Количество();
	Для Сч = 1 По КоличествоСтрок Цикл
		СтрокаТаблицы = Объект.Удержания[КоличествоСтрок - Сч];
		Если ФизическиеЛица.Найти(СтрокаТаблицы.ФизическоеЛицо) <> Неопределено Тогда
			Идентификаторы.Добавить(СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета);
			Объект.Удержания.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Если Идентификаторы.Количество() > 0 Тогда
		КоличествоСтрок = Объект.Показатели.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаТаблицы = Объект.Показатели[КоличествоСтрок - Сч];
			Если Идентификаторы.Найти(СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета) <> Неопределено Тогда
				Объект.Показатели.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Удержания, Объект.Удержания);
	
КонецПроцедуры

Процедура ОбновитьБухучетРезультатовРасчета(Форма) Экспорт
	
	ПараметрыРасчета = ПараметрыРасчета(Форма.Объект);
	ПараметрыРасчета.ОбновитьБухУчетНачислений = Истина;
	ПараметрыРасчета.ОбновитьБухУчетНДФЛ = Истина;
	ПараметрыРасчета.ОбновитьБухУчетУдержаний = Истина;
	ПараметрыРасчета.РассчитатьНалогиИВзносы = Ложь;
	ПараметрыРасчета.РассчитатьУдержания = Ложь;
	
	ДанныеРасчета = РассчитатьДокумент(Форма.Объект, ПараметрыРасчета);
	РезультатРасчетаВДанныеФормы(Форма, ДанныеРасчета);
	
КонецПроцедуры

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf35-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВыплатаБывшимСотрудникам);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfef-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РегистрацияПрочихДоходов);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfc4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыВыплатБывшимСотрудникам);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d3-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыПрочихДоходовФизическихЛиц);
	
КонецПроцедуры

#КонецОбласти

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.30";
	Обработчик.Процедура = "УчетПрочихДоходов.ЗаполнитьРеквизитПеречислениеНДФЛВыполнено";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1aafb1d9-7000-458e-88e4-784f033f8328");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ПеречислениеНДФЛВыполнено в документах прочих доходов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.23";
	Обработчик.Процедура = "Справочники.ВидыПрочихДоходовФизическихЛиц.ЗаполнитьКатегорию";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение назначения видов прочих доходов физлиц.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.26";
	Обработчик.Процедура = "Справочники.ВидыПрочихДоходовФизическихЛиц.ЗаполнитьВидДоходаИсполнительногоПроизводства";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вида дохода исполнительного производства в видах прочих доходов физлиц'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.26";
	Обработчик.Процедура = "Справочники.ВидыВыплатБывшимСотрудникам.ЗаполнитьВидДоходаИсполнительногоПроизводства";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вида дохода исполнительного производства в видах выплат бывшим сотрудникам'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.НачисленияУдержанияПоКонтрагентамАкционерам.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("71783029-c6aa-49da-89e7-4dbe37f35323"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений начислений и удержаний по контрагентам, акционерам.'");
	
КонецПроцедуры	

#Область Обслуживание_обработки_ПлатежиПоРезультатамРасчетаЗарплаты

// Возвращает список проведенных документов ВыплатаБывшимСотрудникам и РегистрацияПрочихДоходов, зарегистрировавших выплату.
//
// Параметры:
//		Организации - Массив - содержит ссылки на организации (СправочникСсылка.Организации)
//								по которым получается список документов.
//		МесяцНачисления - Дата 
//		ШаблонСпискаВедомостей - ТаблицаЗначений, пустая таблица, используется как шаблон для выходных данных.
//
// Возвращаемое значение: Таблица значений с колонками
//			* Организация 			- СправочникСсылка.Организации
//			* СпособВыплаты 		- ПеречислениеСсылка.СпособыВыплатыПрочихДоходов
//			* СтатьяФинансирования 	- СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов 		- СправочникСсылка.СтатьиРасходовЗарплата
//			* Сумма 				- Число
//			* Ведомость 			- Строка
//
Функция ВыплатыПрочихДоходовЗаМесяцДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления, ШаблонСпискаВедомостей) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцНачисления);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрочиеВыплаты.Организация КАК Организация,
	|	ПрочиеВыплаты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ПрочиеВыплаты.СтатьяРасходов КАК СтатьяРасходов,
	|	ПРЕДСТАВЛЕНИЕ(ПрочиеВыплаты.Ссылка) КАК Ведомость,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПрочихДоходов.ВыплатыБывшимСотрудникам) КАК СпособВыплаты,
	|	ПрочиеВыплаты.ВсегоВыплачено КАК Сумма,
	|	ПрочиеВыплаты.Дата КАК Дата,
	|	ПрочиеВыплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВыплатаБывшимСотрудникам КАК ПрочиеВыплаты
	|ГДЕ
	|	ПрочиеВыплаты.Организация В(&Организации)
	|	И ПрочиеВыплаты.ПериодРегистрации = &ПериодРегистрации
	|	И ПрочиеВыплаты.Проведен
	|	И НЕ ПрочиеВыплаты.РегистрироватьВыплатуВедомостью
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрочиеВыплаты.Организация,
	|	ПрочиеВыплаты.СтатьяФинансирования,
	|	ПрочиеВыплаты.СтатьяРасходов,
	|	ПРЕДСТАВЛЕНИЕ(ПрочиеВыплаты.Ссылка),
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПрочихДоходов.ВыплатаПрочихДоходов),
	|	ПрочиеВыплаты.ВсегоВыплачено,
	|	ПрочиеВыплаты.Дата,
	|	ПрочиеВыплаты.Ссылка
	|ИЗ
	|	Документ.РегистрацияПрочихДоходов КАК ПрочиеВыплаты
	|ГДЕ
	|	ПрочиеВыплаты.Организация В(&Организации)
	|	И ПрочиеВыплаты.ПериодРегистрации = &ПериодРегистрации
	|	И ПрочиеВыплаты.Проведен
	|	И НЕ ПрочиеВыплаты.РегистрироватьВыплатуВедомостью
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	Дата,
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыплатыПрочихДоходов = ШаблонСпискаВедомостей.СкопироватьКолонки();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВыплатыПрочихДоходов.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ВыплатыПрочихДоходов;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыРасчета(Объект, НастройкиРасчета = Неопределено)
	
	ПараметрыРасчета = ПараметрыРасчетаДокумента();
	Если НастройкиРасчета <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета, НастройкиРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.ИспользоватьСтатьиФинансирования = Неопределено Тогда
		ПараметрыРасчета.ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	КонецЕсли;
	
	// Если рассчитывается НДФЛ, то должны рассчитываться и удержания.
	Если ПараметрыРасчета.РассчитатьНалогиИВзносы = Истина Тогда
		ПараметрыРасчета.РассчитатьУдержания = Истина
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("РезультатРасчета", РезультатРасчетаПрочихДоходов());
	ПараметрыРасчета.Вставить("СтрокиНачисленийФизЛиц", Новый Соответствие);
	ПараметрыРасчета.Вставить("ДанныеШапки");
	ПараметрыРасчета.Вставить("ЕстьКоэффициентыРаспределенияПособий", Ложь);
	ПараметрыРасчета.Вставить("ДанныеВФорме", ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура"));
	
	ЗаполнитьДанныеШапкиДокумента(Объект, ПараметрыРасчета);
	
	Начисление = ПараметрыРасчета.ДанныеШапки.Начисление;
	ПараметрыРасчета.Вставить("ЭтоВыплатаБывшимСотрудникам", ТипЗнч(Начисление) = Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам"));
	Если ПараметрыРасчета.РасчетНДФЛНарастающимИтогомСНачалаГода = Неопределено Тогда 
		ПараметрыРасчета.РасчетНДФЛНарастающимИтогомСНачалаГода = УчетНДФЛФормыРасширенный.РасчетНДФЛНарастающимИтогомСНачалаГода(Начисление);
	КонецЕсли;
	
	Если ПараметрыРасчета.ИспользоватьСтатьиФинансирования Тогда
		ПараметрыРасчета.ЕстьКоэффициентыРаспределенияПособий = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "КоэффициентыРаспределенияПособия");
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура ПрочитатьДанныеОбъекта(Объект, ПараметрыРасчета)
	
	РезультатРасчетаЗаполнитьНачисления(Объект, ПараметрыРасчета);
	РезультатРасчетаЗаполнитьНДФЛ(Объект, ПараметрыРасчета);
	РезультатРасчетаЗаполнитьУдержания(Объект, ПараметрыРасчета);
	
КонецПроцедуры

Процедура РезультатРасчетаЗаполнитьНачисления(Объект, ПараметрыРасчета)
	
	НачисленияУдержанияВзносы = ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы;
	СтрокиНачисленийФизЛиц = ПараметрыРасчета.СтрокиНачисленийФизЛиц;
	Отбор = Новый Структура("ИдентификаторСтроки");
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаНачислений Из Объект.НачисленияУдержанияВзносы Цикл
		Если ПараметрыРасчета.СписокФизическихЛиц <> Неопределено Тогда
			Если ПараметрыРасчета.СписокФизическихЛиц.Найти(СтрокаНачислений.ФизическоеЛицо) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрокаНачислений = СтрокаТаблицыНачислений(НачисленияУдержанияВзносы);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, СтрокаНачислений);
		НоваяСтрокаНачислений.ИдентификаторСтроки = ИдентификаторСтроки;
		
		Если ПараметрыРасчета.ИспользоватьСтатьиФинансирования 
			И Не ПараметрыРасчета.ОбновитьБухУчетНачислений Тогда
			Если ПараметрыРасчета.ДанныеВФорме Тогда 
				СтрокиРаспределения = СтрокаНачислений.РезультатРаспределения;
				Если СтрокиРаспределения = Неопределено Тогда
					СтрокиРаспределения = Новый Массив;
				КонецЕсли;
			Иначе
				Отбор.ИдентификаторСтроки = СтрокаНачислений.ИдентификаторСтроки;
				СтрокиРаспределения = Объект.РаспределениеРезультатовНачислений.НайтиСтроки(Отбор);
			КонецЕсли;
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				НоваяСтрокаРаспределения = НоваяСтрокаНачислений.РаспределениеПоСтатьям.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения, СтрокаРаспределения);
				НоваяСтрокаРаспределения.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЦикла;
		КонецЕсли;
		
		СтрокиНачисленийФизЛиц.Вставить(СтрокаНачислений.ФизическоеЛицо, НоваяСтрокаНачислений);
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура РезультатРасчетаЗаполнитьУдержания(Объект, ПараметрыРасчета)
	
	Если ПараметрыРасчета.ДанныеВФорме И ПараметрыРасчета.МаксимальноеКоличествоПоказателейУдержания = Неопределено Тогда
		ПараметрыРасчета.МаксимальноеКоличествоПоказателейУдержания = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете("Удержания");
	КонецЕсли;
	
	ТребуетсяБухУчетНачислений = Новый Соответствие;
	ОтборПоИдентификаторСтрокиВидаРасчета = Новый Структура("ИдентификаторСтрокиВидаРасчета");
	ОтборПоИдентификаторСтроки = Новый Структура("ИдентификаторСтроки");
	
	Удержания = ПараметрыРасчета.РезультатРасчета.Удержания;
	ИдентификаторСтрокиВидаРасчета = 3 * 1000000 + 1;
	Для Каждого СтрокаУдержаний Из Объект.Удержания Цикл
		Если ПараметрыРасчета.СписокФизическихЛиц <> Неопределено Тогда
			Если ПараметрыРасчета.СписокФизическихЛиц.Найти(СтрокаУдержаний.ФизическоеЛицо) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = СтрокаТаблицыУдержаний(Удержания);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		
		ОтборПоИдентификаторСтрокиВидаРасчета.ИдентификаторСтрокиВидаРасчета = СтрокаУдержаний.ИдентификаторСтрокиВидаРасчета;
		ОтборПоИдентификаторСтроки.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтрокиВидаРасчета;
		
		// Показатели
		Если ПараметрыРасчета.ДанныеВФорме Тогда
			Если ПараметрыРасчета.МаксимальноеКоличествоПоказателейУдержания > 0 Тогда
				Для Сч = 1 По ПараметрыРасчета.МаксимальноеКоличествоПоказателейУдержания Цикл
					Если РасчетЗарплатыРасширенный.ЕстьПолеВСтрокеКоллекции(СтрокаУдержаний, "Показатель" + Сч)
						И ЗначениеЗаполнено(СтрокаУдержаний["Показатель" + Сч]) Тогда
						СтрокаПоказателя = НоваяСтрока.Показатели.Добавить();
						СтрокаПоказателя.Показатель = СтрокаУдержаний["Показатель" + Сч];
						СтрокаПоказателя.Значение = СтрокаУдержаний["Значение" + Сч];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокиПоказателей = Объект.Показатели.НайтиСтроки(ОтборПоИдентификаторСтрокиВидаРасчета);
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				НоваяСтрокаПоказателей = НоваяСтрока.Показатели.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, СтрокаПоказателя);
				НоваяСтрокаПоказателей.ИдентификаторСтроки = ИдентификаторСтрокиВидаРасчета;
			КонецЦикла;
		КонецЕсли;
	
		// Распределение
		Если ПараметрыРасчета.ИспользоватьСтатьиФинансирования 
			И Не ПараметрыРасчета.ОбновитьБухУчетУдержаний Тогда
			Если ПараметрыРасчета.ДанныеВФорме Тогда 
				СтрокиРаспределения = СтрокаУдержаний.РезультатРаспределения
			Иначе
				СтрокиРаспределения = Объект.РаспределениеРезультатовУдержаний.НайтиСтроки(ОтборПоИдентификаторСтроки);
			КонецЕсли;
			Если СтрокиРаспределения <> Неопределено 
				И СтрокиРаспределения.Количество() > 0 Тогда
				Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					НоваяСтрокаРаспределения = НоваяСтрока.РаспределениеПоСтатьям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения, СтрокаРаспределения);
					НоваяСтрокаРаспределения.ИдентификаторСтроки = НоваяСтрока.ИдентификаторСтрокиВидаРасчета;
				КонецЦикла;
			Иначе
				ТребуетсяБухУчетНачислений.Вставить(СтрокаУдержаний.ФизическоеЛицо, НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
	КонецЦикла;
	
	Если ТребуетсяБухУчетНачислений.Количество() > 0 Тогда
		Для Каждого СтрокаУдержаний Из ТребуетсяБухУчетНачислений Цикл
			СтрокаНачислений = ПараметрыРасчета.СтрокиНачисленийФизЛиц[СтрокаУдержаний.Ключ];
			Если СтрокаНачислений = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РаспределениеУдержаний = СтрокаУдержаний.Значение.РаспределениеПоСтатьям;
			Для Каждого РаспределениеНачисления Из СтрокаНачислений.РаспределениеПоСтатьям Цикл
				СтрокаРаспределения = РаспределениеУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаспределения, РаспределениеНачисления);
				СтрокаРаспределения.ИдентификаторСтроки = СтрокаУдержаний.Значение.ИдентификаторСтрокиВидаРасчета;
				СтрокаРаспределения.ВидУдержания = СтрокаУдержаний.Значение.Удержание;
			КонецЦикла;
			Если РаспределениеУдержаний.Количество() > 0 Тогда
				ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаУдержаний.Результат, РаспределениеУдержаний, "Результат", 2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатРасчетаЗаполнитьНДФЛ(Объект, ПараметрыРасчета)
	
	ТаблицаРаспределениеРезультатовУдержаний = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Если ПараметрыРасчета.РасчетНДФЛНарастающимИтогомСНачалаГода Тогда
		Для Каждого СтрокаТаблицы Из ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы Цикл
			СтрокаТаблицы.НДФЛ = 0;
			СтрокаТаблицы.ЗачтеноАвансовыхПлатежей = 0;
		КонецЦикла;
	КонецЕсли;
	
	НДФЛ = ПараметрыРасчета.РезультатРасчета.НДФЛ;
	Идентификаторы = Новый Соответствие;
	Для Каждого СтрокаНДФЛ Из Объект.НДФЛ Цикл
		Если ПараметрыРасчета.СписокФизическихЛиц <> Неопределено Тогда
			Если ПараметрыРасчета.СписокФизическихЛиц.Найти(СтрокаНДФЛ.ФизическоеЛицо) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = НДФЛ.Добавить();
		НоваяСтрока.РаспределениеПоСтатьям = ТаблицаРаспределениеРезультатовУдержаний.Скопировать();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНДФЛ);
		
		// Распределение
		Если ПараметрыРасчета.ИспользоватьСтатьиФинансирования 
			И Не ПараметрыРасчета.ОбновитьБухУчетНДФЛ Тогда
			Если ПараметрыРасчета.ДанныеВФорме Тогда 
				СтрокиРаспределения = СтрокаНДФЛ.РезультатРаспределения;
			Иначе
				СтрокиРаспределения = Объект.РаспределениеРезультатовУдержаний.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ));
			КонецЕсли;
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				НоваяСтрокаРаспределения = НоваяСтрока.РаспределениеПоСтатьям.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения, СтрокаРаспределения);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыРасчета.РасчетНДФЛНарастающимИтогомСНачалаГода Тогда
			СтрокаТаблицы = ПараметрыРасчета.СтрокиНачисленийФизЛиц[СтрокаНДФЛ.ФизическоеЛицо];
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.НДФЛ = СтрокаТаблицы.НДФЛ + СтрокаНДФЛ.Налог + СтрокаНДФЛ.НалогСПревышения;
				СтрокаТаблицы.ЗачтеноАвансовыхПлатежей = СтрокаТаблицы.ЗачтеноАвансовыхПлатежей + СтрокаНДФЛ.ЗачтеноАвансовыхПлатежей + СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышения;
			КонецЕсли;
		КонецЕсли;
		
		Идентификаторы[СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ] = Истина;
	КонецЦикла;
	
	Если Идентификаторы.Количество() > 0 Тогда
		Для Каждого СтрокаВычета Из Объект.ПримененныеВычетыНаДетейИИмущественные Цикл
			Если Идентификаторы[СтрокаВычета.ИдентификаторСтрокиНДФЛ] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПараметрыРасчета.РезультатРасчета.ПримененныеВычетыНаДетейИИмущественные.Добавить(), СтрокаВычета);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьНачисленияПоСтатьям(Объект, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.ИспользоватьСтатьиФинансирования Тогда 
		Возврат;
	КонецЕсли;
	Если Не ПараметрыРасчета.ОбновитьБухУчетНачислений Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТБухучетНачислений") Тогда
		СоздатьВТБухучетНачислений(Объект, ПараметрыРасчета);
	КонецЕсли;
	
	ДанныеНачислений = ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеНачислений.ТерриторияВыполненияРаботВОрганизации КАК Территория,
	|	ВЫРАЗИТЬ(РаспределениеНачислений.СтатьяФинансирования КАК СПРАВОЧНИК.СтатьиФинансированияЗарплата).Код КАК КодСтатьиФинансирования,
	|	РаспределениеНачислений.Сумма КАК Результат,
	|	РаспределениеНачислений.*
	|ИЗ
	|	ВТБухучетНачислений КАК РаспределениеНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		СтрокаНачислений = ДанныеНачислений.Найти(Выборка.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если СтрокаНачислений = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНачислений.РаспределениеПоСтатьям.Очистить();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтрокаНачислений.РаспределениеПоСтатьям.Добавить(), Выборка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьНДФЛПоСтатьям(Объект, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.ИспользоватьСтатьиФинансирования Тогда 
		Возврат;
	КонецЕсли;
	Если Не ПараметрыРасчета.ОбновитьБухУчетНДФЛ Тогда 
		Возврат;
	КонецЕсли;
	
	ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛРасчетыСБывшимиСотрудниками;
	Если ТипЗнч(ПараметрыРасчета.ДанныеШапки.Начисление) = Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц") Тогда
		ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов;
	КонецЕсли;
	ТаблицаРаспределениеРезультатовУдержаний = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	СтрокиНачисленийФизЛиц = ПараметрыРасчета.СтрокиНачисленийФизЛиц;
	
	Для Каждого СтрокаНДФЛ Из ПараметрыРасчета.РезультатРасчета.НДФЛ Цикл
		
		Распределение = ТаблицаРаспределениеРезультатовУдержаний.Скопировать();
		РаспределениеСПревышения = ТаблицаРаспределениеРезультатовУдержаний.Скопировать();
		
		СтрокаНачислений = СтрокиНачисленийФизЛиц[СтрокаНДФЛ.ФизическоеЛицо];
		Если СтрокаНачислений = Неопределено Тогда
			СтрокаНДФЛ.РаспределениеПоСтатьям = Распределение;
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРаспределения Из СтрокаНачислений.РаспределениеПоСтатьям Цикл
			Если СтрокаНДФЛ.Налог <> 0 Тогда
				СтрокаРаспределенияНДФЛ = Распределение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаспределенияНДФЛ, СтрокаРаспределения);
				СтрокаРаспределенияНДФЛ.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ;
				СтрокаРаспределенияНДФЛ.ВидУдержания = ВидУдержания;	
			КонецЕсли;
			Если СтрокаНДФЛ.НалогСПревышения <> 0 Тогда
				СтрокаРаспределенияНДФЛ = РаспределениеСПревышения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаспределенияНДФЛ, СтрокаРаспределения);
				СтрокаРаспределенияНДФЛ.ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ;
				СтрокаРаспределенияНДФЛ.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения;
			КонецЕсли;
		КонецЦикла;
		
		Если Распределение.Количество() > 0 Тогда
			ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаНДФЛ.Налог, Распределение, "Результат", 0);
		КонецЕсли;
		Если РаспределениеСПревышения.Количество() > 0 Тогда
			ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаНДФЛ.НалогСПревышения, РаспределениеСПревышения, "Результат", 0);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РаспределениеСПревышения, Распределение);
		СтрокаНДФЛ.РаспределениеПоСтатьям = Распределение;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьУдержанияПоСтатьям(Объект, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.ИспользоватьСтатьиФинансирования Тогда 
		Возврат;
	КонецЕсли;
	Если Не ПараметрыРасчета.ОбновитьБухУчетУдержаний Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаРаспределениеРезультатовУдержаний = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	СтрокиНачисленийФизЛиц = ПараметрыРасчета.СтрокиНачисленийФизЛиц;
	
	Для Каждого СтрокаУдержания Из ПараметрыРасчета.РезультатРасчета.Удержания Цикл
		
		СтрокаУдержания.РаспределениеПоСтатьям = ТаблицаРаспределениеРезультатовУдержаний.Скопировать();
		
		СтрокаНачислений = СтрокиНачисленийФизЛиц[СтрокаУдержания.ФизическоеЛицо];
		Если СтрокаНачислений = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРаспределения Из СтрокаНачислений.РаспределениеПоСтатьям Цикл
			СтрокаРаспределенияНДФЛ = СтрокаУдержания.РаспределениеПоСтатьям.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределенияНДФЛ, СтрокаРаспределения);
			СтрокаРаспределенияНДФЛ.ИдентификаторСтроки = СтрокаУдержания.ИдентификаторСтрокиВидаРасчета;
			СтрокаРаспределенияНДФЛ.ВидУдержания = СтрокаУдержания.Удержание;
			СтрокаРаспределенияНДФЛ.ВидДоходаИсполнительногоПроизводства = ПараметрыРасчета.ДанныеШапки.ВидДоходаИсполнительногоПроизводства;
		КонецЦикла;
		
		Если СтрокаУдержания.РаспределениеПоСтатьям.Количество() > 0 Тогда
			ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаУдержания.Результат, СтрокаУдержания.РаспределениеПоСтатьям, "Результат", 2);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНДФЛИВзносы(Объект, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.РассчитатьНалогиИВзносы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасчета.РасчетНДФЛНарастающимИтогомСНачалаГода Тогда
		РассчитатьНДФЛИВзносыНарастающимИтогом(Объект, ПараметрыРасчета);
	Иначе
		РассчитатьНДФЛИВзносыТекущегоДохода(Объект, ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьНДФЛИВзносыНарастающимИтогом(Объект, ПараметрыРасчета)
	
	Если Не ЗарплатаКадры.ВТСуществует(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТНачисленияДокумента") Тогда
		СоздатьВТНачисленияДокумента(Объект, ПараметрыРасчета);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	УдаляемыеВТ = Новый Массив;
	
	ДанныеДляНДФЛ = ДоходыНДФЛ(Объект, ПараметрыРасчета);
	ДанныеДляВзносов = ДанныеДляПроведенияВзносы(Запрос.МенеджерВременныхТаблиц);
	
#Область Вычеты
	
	// Вычеты к доходам
	УдаляемыеВТ.Добавить("ВТНачисления");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.ИдентификаторСтроки КАК НомерСтроки,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.КодДохода КАК КодДохода,
	|	ДанныеДокумента.ВидДохода КАК ВидДохода,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.КодВычета КАК КодВычета,
	|	0 КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|	И НЕ ДанныеДокумента.ФиксСуммаВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТНачисления КАК Начисления";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(Объект.Ссылка, Объект.Организация, Объект.ПланируемаяДатаВыплаты, Запрос.МенеджерВременныхТаблиц);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВычетыКДоходам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыКДоходам.НомерСтроки КАК НомерСтроки,
		|	ВычетыКДоходам.КодДохода КАК КодДохода,
		|	ВычетыКДоходам.КодВычета КАК КодВычета,
		|	ВычетыКДоходам.СуммаВычета КАК СуммаВычета
		|ИЗ
		|	ВТВычетыКДоходамФизическихЛиц КАК ВычетыКДоходам";
		Выборка = Запрос.Выполнить().Выбрать();
		СтруктураПоиска = Новый Структура("ФизическоеЛицо,КодДохода,КодВычета");
		Пока Выборка.Следующий() Цикл
			СтрокаДоходов = ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы.Найти(Выборка.НомерСтроки, "ИдентификаторСтроки");
			Если СтрокаДоходов <> Неопределено Тогда
				СтрокаДоходов.СуммаВычета = Выборка.СуммаВычета;
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			СтрокиДоходов = ДанныеДляНДФЛ.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДоходов Из СтрокиДоходов Цикл
				СтрокаДоходов.СуммаВычета = Выборка.СуммаВычета;
			КонецЦикла;
		КонецЦикла;
		
		УчетСтраховыхВзносов.СоздатьВТСкидкиКДоходамФизическихЛиц(Объект.Организация, Объект.ПериодРегистрации, Запрос.МенеджерВременныхТаблиц, Объект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СкидкиКДоходамФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СкидкиКДоходамФизическихЛиц.НомерСтроки КАК НомерСтроки,
		|	СкидкиКДоходамФизическихЛиц.ВидДохода КАК ВидДохода,
		|	СкидкиКДоходамФизическихЛиц.СуммаСкидки КАК СуммаСкидки
		|ИЗ
		|	ВТСкидкиКДоходамФизическихЛиц КАК СкидкиКДоходамФизическихЛиц";
		Выборка = Запрос.Выполнить().Выбрать();
		СтруктураПоиска = Новый Структура("ФизическоеЛицо,НомерСтроки");
		Пока Выборка.Следующий() Цикл
			СтрокаДоходов = ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы.Найти(Выборка.НомерСтроки, "ИдентификаторСтроки");
			Если СтрокаДоходов <> Неопределено Тогда
				СтрокаДоходов.СкидкаПоВзносам = Выборка.СуммаСкидки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			
			СтрокиДоходовДляВзносов = ДанныеДляВзносов.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДоходов Из СтрокиДоходовДляВзносов Цикл
				СтрокаДоходов.Скидка = Выборка.СуммаСкидки;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти

	УстановитьПривилегированныйРежим(Истина);

#Область Расчет_НДФЛ
	
	Отказ = Ложь;
	ВременныйРегистратор = Документы.ВыплатаБывшимСотрудникам.ПолучитьСсылку();
	НаборДвижений = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.ВыплатаБывшимСотрудникам, ВременныйРегистратор);
	ДатаОперацииПоНалогам = УчетНДФЛ.ДатаОперацииПоДокументу(Объект.Дата, Объект.ПериодРегистрации);
	
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(НаборДвижений, Отказ, Объект.Организация, ДатаОперацииПоНалогам, ДанныеДляНДФЛ, Ложь, Ложь, ВременныйРегистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента";
	Запрос.Выполнить();
	УдаляемыеВТ.Добавить("ВТФизическиеЛица");
	
	Если ЗарплатаКадры.ВыполнятьРасчетЗарплатыБезОптимизации() Тогда
		
		ИмяВТ = ЗарплатаКадры.ИмяВТПоУмолчанию("РегистрНакопления.СведенияОДоходахНДФЛ");
		УдаляемыеВТ.Добавить(ИмяВТ);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(Запрос.МенеджерВременныхТаблиц, НаборДвижений.СведенияОДоходахНДФЛ, , ИмяВТ);
		ИмяВТ = ЗарплатаКадры.ИмяВТПоУмолчанию("РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ");
		УдаляемыеВТ.Добавить(ИмяВТ);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(Запрос.МенеджерВременныхТаблиц, НаборДвижений.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ,, ИмяВТ);
		
		РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(Запрос.МенеджерВременныхТаблиц, Объект.Ссылка,
			Объект.Организация, Объект.ПериодРегистрации, Ложь, Объект.ПланируемаяДатаВыплаты);
		
	Иначе
		РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(Запрос.МенеджерВременныхТаблиц, Объект.Ссылка,
			Объект.Организация, Объект.ПериодРегистрации, Ложь, Объект.ПланируемаяДатаВыплаты, НаборДвижений);
	КонецЕсли;
	
#КонецОбласти
	
#Область Расчет_Взносов
	
	КодДоходаСтраховыеВзносы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыРасчета.ДанныеШапки.Начисление, "КодДоходаСтраховыеВзносы");
	ДоходыНеОблагаемыеВзносами = УчетСтраховыхВзносовРасширенный.ВидыДоходовНеоблагаемыеСтраховымиВзносами();
	Если ДоходыНеОблагаемыеВзносами.Найти(КодДоходаСтраховыеВзносы) = Неопределено Тогда
		
		УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(НаборДвижений, Отказ, Объект.Организация, Объект.ПериодРегистрации, ДанныеДляВзносов, Ложь);
		
		ИмяВТ = ЗарплатаКадры.ИмяВТПоУмолчанию("РегистрНакопления.СведенияОДоходахСтраховыеВзносы");
		УдаляемыеВТ.Добавить(ИмяВТ);
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(Запрос.МенеджерВременныхТаблиц, НаборДвижений.СведенияОДоходахСтраховыеВзносы);
		
		РезультатРасчетаСтраховыхВзносов = УчетСтраховыхВзносов.РассчитатьВзносы(
			Объект.Ссылка,
			Объект.Организация,
			Объект.ПериодРегистрации,
			Запрос.МенеджерВременныхТаблиц,
			Истина);
	Иначе
		РезультатРасчетаСтраховыхВзносов = Новый Массив;
	КонецЕсли;
	
#КонецОбласти
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НачисленияУдержанияВзносы = ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы;
	НДФЛ = ПараметрыРасчета.РезультатРасчета.НДФЛ;
	ПримененныеВычетыНаДетейИИмущественные = ПараметрыРасчета.РезультатРасчета.ПримененныеВычетыНаДетейИИмущественные;
	СтрокиНачисленийФизЛиц = ПараметрыРасчета.СтрокиНачисленийФизЛиц;
	
	// Очищаем расчетные данные 
	ПоляРесурсовСтрокой = УчетСтраховыхВзносов.РассчитываемыеВзносы();
	НулевыеСуммы = Новый Структура(ПоляРесурсовСтрокой);
	НулевыеСуммы.Вставить("НДФЛ");
	НулевыеСуммы.Вставить("ЗачтеноАвансовыхПлатежей");
	Для Каждого СтрокаНачислений Из НачисленияУдержанияВзносы Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНачислений, НулевыеСуммы);
	КонецЦикла;
	НДФЛ.Очистить();
	ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	// Перенос в расчетные данные результатов расчета НДФЛ
	МаксимальныйИдентификаторНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(Объект.НДФЛ);
	Отбор = Новый Структура("ИдентификаторСтрокиНДФЛ");
	Для Каждого СтрокаРезультатаРасчетаНДФЛ Из РезультатРасчетаНДФЛ.НДФЛ Цикл
		
		МаксимальныйИдентификаторНДФЛ = МаксимальныйИдентификаторНДФЛ + 1;
		
		НоваяСтрокаНДФЛ = НДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаРезультатаРасчетаНДФЛ);
		НоваяСтрокаНДФЛ.ИдентификаторСтрокиНДФЛ = МаксимальныйИдентификаторНДФЛ;
		
		Отбор.ИдентификаторСтрокиНДФЛ = СтрокаРезультатаРасчетаНДФЛ.ИдентификаторСтрокиНДФЛ;
		СтрокиВычетов = РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(Отбор);
		Для Каждого СтрокаВычетов Из СтрокиВычетов Цикл
			НоваяСтрокаВычетов = ПримененныеВычетыНаДетейИИмущественные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВычетов, СтрокаВычетов);
			НоваяСтрокаВычетов.ИдентификаторСтрокиНДФЛ = НоваяСтрокаНДФЛ.ИдентификаторСтрокиНДФЛ;
		КонецЦикла;
		
		// Итоги
		СтрокаНачислений = СтрокиНачисленийФизЛиц[СтрокаРезультатаРасчетаНДФЛ.ФизическоеЛицо];
		Если СтрокаНачислений <> Неопределено Тогда
			СтрокаНачислений.НДФЛ = СтрокаНачислений.НДФЛ + СтрокаРезультатаРасчетаНДФЛ.Налог + СтрокаРезультатаРасчетаНДФЛ.НалогСПревышения;
			СтрокаНачислений.ЗачтеноАвансовыхПлатежей = СтрокаНачислений.ЗачтеноАвансовыхПлатежей + СтрокаРезультатаРасчетаНДФЛ.ЗачтеноАвансовыхПлатежей + СтрокаРезультатаРасчетаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышения;
		КонецЕсли;
		
	КонецЦикла;
	
	// Перенос в документ результатов расчета взносов
	Для Каждого СтрокаРезультатаРасчета Из РезультатРасчетаСтраховыхВзносов Цикл
		
		СтрокаНачислений = СтрокиНачисленийФизЛиц[СтрокаРезультатаРасчета.ФизическоеЛицо];
		Если СтрокаНачислений <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, СтрокаРезультатаРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРасчета.ОбновитьБухУчетНДФЛ = Истина;
	
	Если УдаляемыеВТ.Количество() > 0 Тогда
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдаляемыеВТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьНДФЛИВзносыТекущегоДохода(Объект, ПараметрыРасчета)
	
	СписокФизическихЛиц = ПараметрыРасчета.СписокФизическихЛиц;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыРасчета.ДанныеШапки.Начисление, "КодДоходаНДФЛ, КодДоходаСтраховыеВзносы");
	ЗначенияРеквизитов.Вставить("КатегорияДохода", УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(ЗначенияРеквизитов.КодДоходаНДФЛ));
	
	НачисленияУдержанияВзносы = ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы;
	НачисленияУдержанияВзносы.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(7));
	// Очищаем расчетные данные 
	ПоляРесурсов = УчетСтраховыхВзносов.РассчитываемыеВзносы();
	НулевыеСуммы = Новый Структура(ПоляРесурсов);
	НулевыеСуммы.Вставить("НДФЛ");
	НулевыеСуммы.Вставить("ЗачтеноАвансовыхПлатежей");
	Для Каждого СтрокаНачислений Из НачисленияУдержанияВзносы Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНачислений, НулевыеСуммы);
		СтрокаНачислений.НомерСтроки = СтрокаНачислений.ИдентификаторСтроки;
	КонецЦикла;
	ПараметрыРасчета.РезультатРасчета.НДФЛ.Очистить();
	ПараметрыРасчета.РезультатРасчета.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	ОбъектРасчета = Новый Структура;
	ОбъектРасчета.Вставить("НачисленияУдержанияВзносы", НачисленияУдержанияВзносы);
	ОбъектРасчета.Вставить("Организация", Объект.Организация);
	ОбъектРасчета.Вставить("Ссылка", Объект.Ссылка);
	ОбъектРасчета.Вставить("ПланируемаяДатаВыплаты", Объект.ПланируемаяДатаВыплаты);
	ОбъектРасчета.Вставить("КодВычетаНДФЛ", Объект.КодВычетаНДФЛ);
	ОбъектРасчета.Вставить("Подразделение", Объект.Подразделение);
	
	Результат = РасчетЗарплатыРасширенный.НДФЛИВзносыПоНеЗарплатнымДоходамФизическихЛиц(ОбъектРасчета, ЗначенияРеквизитов);
	
	Для Каждого ДанныеСтроки Из НачисленияУдержанияВзносы Цикл
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат.Получить(ДанныеСтроки.ФизическоеЛицо));
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьУдержания(Объект, ПараметрыРасчета)
	
	Если Не ПараметрыРасчета.РассчитатьУдержания Тогда
		Возврат;
	КонецЕсли;
	
	Удержания = ПараметрыРасчета.РезультатРасчета.Удержания;
	
	Если Удержания.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТДанныеДокумента") Тогда
		СоздатьВТДанныеДокумента(Объект, ПараметрыРасчета);
	КонецЕсли;
	
	СтрокиНачисленийФизЛиц = ПараметрыРасчета.СтрокиНачисленийФизЛиц;
	
	СтрокиНДФЛФизЛиц = Новый Соответствие;
	Для Каждого СтрокаНДФЛ Из ПараметрыРасчета.РезультатРасчета.НДФЛ Цикл
		СтрокиНДФЛ = СтрокиНДФЛФизЛиц[СтрокаНДФЛ.ФизическоеЛицо];
		Если СтрокиНДФЛ = Неопределено Тогда
			СтрокиНДФЛ = Новый Массив;
			СтрокиНДФЛФизЛиц.Вставить(СтрокаНДФЛ.ФизическоеЛицо, СтрокиНДФЛ);
		КонецЕсли;
		СтрокиНДФЛ.Добавить(СтрокаНДФЛ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Начисление КАК Начисление,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ДанныеДокумента.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеДокумента.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента";
	ДанныеДокумента = Запрос.Выполнить().Выгрузить();
	
	НачисленияДляПроведения = ДанныеДокумента.СкопироватьКолонки();
	НДФЛДляПроведения = ДанныеДокумента.СкопироватьКолонки("Организация,ФизическоеЛицо,Подразделение,Сумма,СтатьяФинансирования,СтатьяРасходов");
	НДФЛДляПроведения.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	ВременнаяТаблицаРаспределенияНДФЛ = НДФЛДляПроведения.СкопироватьКолонки();
	Для Каждого СтрокаДанныхДокумента Из ДанныеДокумента Цикл
		СтрокаНачислений = СтрокиНачисленийФизЛиц[СтрокаДанныхДокумента.ФизическоеЛицо];
		Если СтрокаНачислений = Неопределено 
			Или СтрокаНачислений.РаспределениеПоСтатьям.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НачисленияДляПроведения.Добавить(), СтрокаДанныхДокумента);
		Иначе
			Для Каждого СтрокаРаспределения Из СтрокаНачислений.РаспределениеПоСтатьям Цикл
				НоваяСтрока = НачисленияДляПроведения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхДокумента);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.Сумма = СтрокаРаспределения.Результат;
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыРасчета.РасчетНДФЛНарастающимИтогомСНачалаГода Тогда
			СтрокиНДФЛ = СтрокиНДФЛФизЛиц[СтрокаДанныхДокумента.ФизическоеЛицо];
			Если СтрокиНДФЛ <> Неопределено Тогда
				Для Каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
					Если СтрокаНДФЛ.РаспределениеПоСтатьям.Количество() = 0 Тогда
						Если СтрокаНДФЛ.Налог <> 0 Тогда
							НоваяСтрокаНДФЛ = НДФЛДляПроведения.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаДанныхДокумента);
							НоваяСтрокаНДФЛ.Сумма = СтрокаНДФЛ.Налог;
							НоваяСтрокаНДФЛ.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов;
						КонецЕсли;
						Если СтрокаНДФЛ.НалогСПревышения <> 0 Тогда
							НоваяСтрокаНДФЛ = НДФЛДляПроведения.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаДанныхДокумента);
							НоваяСтрокаНДФЛ.Сумма = СтрокаНДФЛ.НалогСПревышения;
							НоваяСтрокаНДФЛ.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения;
						КонецЕсли;
					Иначе
						Для Каждого СтрокаРаспределения Из СтрокаНДФЛ.РаспределениеПоСтатьям Цикл
							НоваяСтрокаНДФЛ = НДФЛДляПроведения.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаДанныхДокумента);
							ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаРаспределения);
							НоваяСтрокаНДФЛ.Сумма = СтрокаРаспределения.Результат;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если СтрокаНачислений <> Неопределено Тогда 
				Если СтрокаНачислений.РаспределениеПоСтатьям.Количество() = 0 Тогда
					НоваяСтрокаНДФЛ = НДФЛДляПроведения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаДанныхДокумента);
					НоваяСтрокаНДФЛ.Сумма = СтрокаНачислений.НДФЛ;
					НоваяСтрокаНДФЛ.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов;
				Иначе
					ВременнаяТаблицаРаспределенияНДФЛ.Очистить();
					Для Каждого СтрокаРаспределения Из СтрокаНачислений.РаспределениеПоСтатьям Цикл
						НоваяСтрокаНДФЛ = ВременнаяТаблицаРаспределенияНДФЛ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаДанныхДокумента);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаРаспределения);
						НоваяСтрокаНДФЛ.Сумма = СтрокаРаспределения.Результат;
					КонецЦикла;
					ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаНачислений.НДФЛ, ВременнаяТаблицаРаспределенияНДФЛ, "Сумма", 0);
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВременнаяТаблицаРаспределенияНДФЛ, НДФЛДляПроведения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВременныйРегистратор = Документы.ВыплатаБывшимСотрудникам.ПолучитьСсылку();
	НаборДвижений = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.ВыплатаБывшимСотрудникам, ВременныйРегистратор);
	УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(
		НаборДвижений,
		Ложь,
		Объект.Организация,
		НачалоМесяца(Объект.ПериодРегистрации),
		НачисленияДляПроведения, ,
		НДФЛДляПроведения);
	МенеджерВременныхТаблицУдержания = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблицУдержания, НаборДвижений.НачисленияУдержанияПоКонтрагентамАкционерам);
	
	ДоходыНДФЛ = ДоходыНДФЛ(Объект, ПараметрыРасчета);
	ДатаОперацииПоНалогам = УчетНДФЛ.ДатаОперацииПоДокументу(Объект.Дата, Объект.ПериодРегистрации);
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(НаборДвижений, Ложь, Объект.Организация, ДатаОперацииПоНалогам, ДоходыНДФЛ, Ложь, Ложь);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблицУдержания, НаборДвижений.СведенияОДоходахНДФЛ);
	
	Удержания.ЗаполнитьЗначения(0, "Результат");
	
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(Объект.ПериодРегистрации, Объект.Организация);
	
	МенеджерРасчета.УстановитьМенеджерВременныхТаблиц(МенеджерВременныхТаблицУдержания);
	МенеджерРасчета.ИсключаемыйРегистратор = Объект.Ссылка;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = Истина;
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = Истина;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Удержания , МенеджерРасчета.Зарплата.Удержания);
	
	МенеджерРасчета.РассчитатьЗарплату();
	
	Удержания.Очистить();
	ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы.ЗаполнитьЗначения(0, "Удержано");
	
	МаксимальныйИдентификатор = 3*1000000;
	Для Каждого СтрокаДокумента Из Объект.Удержания Цикл
		Если МаксимальныйИдентификатор < СтрокаДокумента.ИдентификаторСтрокиВидаРасчета Тогда
			МаксимальныйИдентификатор = СтрокаДокумента.ИдентификаторСтрокиВидаРасчета;
		КонецЕсли;
	КонецЦикла;
	МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
	
	Для Каждого СтрокаУдержания Из МенеджерРасчета.Зарплата.Удержания Цикл
		НовоеУдержание = СтрокаТаблицыУдержаний(Удержания);
		ЗаполнитьЗначенияСвойств(НовоеУдержание, СтрокаУдержания);
		НовоеУдержание.ИдентификаторСтрокиВидаРасчета = МаксимальныйИдентификатор;
		
		СтрокаНачислений = СтрокиНачисленийФизЛиц[СтрокаУдержания.ФизическоеЛицо];
		Если СтрокаНачислений <> Неопределено Тогда
			СтрокаНачислений.Удержано = СтрокаНачислений.Удержано + СтрокаУдержания.Результат;
		КонецЕсли;
		
		МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
	КонецЦикла;
	
	ПараметрыРасчета.ОбновитьБухУчетУдержаний = ПараметрыРасчета.ИспользоватьСтатьиФинансирования;
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокумента(Объект, ПараметрыРасчета)
	
	ДанныеШапки = ДанныеШапкиДокумента(Объект, ПараметрыРасчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленияУдержанияВзносы", ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы);
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеШапки.Ссылка);
	Запрос.УстановитьПараметр("Организация", ДанныеШапки.Организация);
	Запрос.УстановитьПараметр("Начисление", ДанныеШапки.Начисление);
	Запрос.УстановитьПараметр("ВидДоходаИсполнительногоПроизводства", ДанныеШапки.ВидДоходаИсполнительногоПроизводства);
	Запрос.УстановитьПараметр("КодДоходаСтраховыеВзносы", ДанныеШапки.КодДоходаСтраховыеВзносы);
	Запрос.УстановитьПараметр("КодДоходаНДФЛ", ДанныеШапки.КодДоходаНДФЛ);
	Запрос.УстановитьПараметр("КатегорияДохода", ДанныеШапки.КатегорияДохода);
	Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента", ДанныеШапки.СтавкаНалогообложенияРезидента);
	Запрос.УстановитьПараметр("КодВычетаНДФЛ", ДанныеШапки.КодВычетаНДФЛ);
	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", ДанныеШапки.ПланируемаяДатаВыплаты);
	Запрос.УстановитьПараметр("ПериодРегистрации", ДанныеШапки.ПериодРегистрации);
	Запрос.УстановитьПараметр("Подразделение", ДанныеШапки.Подразделение);
	Запрос.УстановитьПараметр("ОтношениеКЕНВД", ДанныеШапки.ОтношениеКЕНВД);
	Запрос.УстановитьПараметр("ОблагаетсяЕНВД", ДанныеШапки.ОблагаетсяЕНВД);
	Запрос.УстановитьПараметр("СтатьяФинансирования", ДанныеШапки.СтатьяФинансирования);
	Запрос.УстановитьПараметр("СтатьяРасходов", ДанныеШапки.СтатьяРасходов);
	Запрос.УстановитьПараметр("СпособОтраженияЗарплатыВБухучете", ДанныеШапки.СпособОтраженияЗарплатыВБухучете);
	
	Запрос.УстановитьПараметр("РасчетыСКонтрагентами", ДанныеШапки.РасчетыСКонтрагентами);
	Запрос.УстановитьПараметр("РаботаВХозрасчетнойОрганизации", ДанныеШапки.РаботаВХозрасчетнойОрганизации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&Организация КАК Организация,
	|	&КодДоходаНДФЛ КАК КодДохода,
	|	&КатегорияДохода КАК КатегорияДохода,
	|	&СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	&КодВычетаНДФЛ КАК КодВычета,
	|	&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	&Подразделение КАК Подразделение,
	|	&КодДоходаСтраховыеВзносы КАК ВидДохода,
	|	&ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	&ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	Начисления.Начислено КАК Сумма,
	|	Начисления.НДФЛ КАК НДФЛ,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	Начисления.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	&Начисление КАК Начисление,
	|	&Ссылка КАК Ссылка,
	|	&СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА &РаботаВХозрасчетнойОрганизации
	|			ТОГДА &РасчетыСКонтрагентами
	|		ИНАЧЕ &СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	&СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	&ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.ФиксСуммаВычета КАК ФиксСуммаВычета
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&НачисленияУдержанияВзносы КАК Начисления";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТБухучетНачислений(Объект, ПараметрыРасчета)
	
	РаспределениеРезультатовНачислений = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРаспределениеРезультатовНачислений();
	
	ИдентификаторыДляБухУчета = Новый Соответствие;
	Если Не ПараметрыРасчета.ОбновитьБухУчетНачислений Тогда
		ВременнаяТаблицаРаспределения = РаспределениеРезультатовНачислений.СкопироватьКолонки();
		Для Каждого СтрокаТаблицы Из ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы Цикл
			СуммаРаспределения = СтрокаТаблицы.Начислено;
			ВременнаяТаблицаРаспределения.Очистить();
			Для Каждого СтрокаРаспределения Из СтрокаТаблицы.РаспределениеПоСтатьям Цикл
				НоваяСтрока = ВременнаяТаблицаРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
				СуммаРаспределения = СуммаРаспределения - СтрокаРаспределения.Результат;
			КонецЦикла;
			Если СуммаРаспределения = 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВременнаяТаблицаРаспределения, РаспределениеРезультатовНачислений);
			Иначе
				ИдентификаторыДляБухУчета.Вставить(СтрокаТаблицы.ИдентификаторСтроки, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьНеРаспределенныеНачисления = ИдентификаторыДляБухУчета.Количество() > 0;
	Если ПараметрыРасчета.ОбновитьБухУчетНачислений Или ЕстьНеРаспределенныеНачисления Тогда
		
		ИсходныеДанныеДляОтражения = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияНачисленийКонтрагентовВБухучете();
		ИсходныеДанныеДляОтражения.Организация = ПараметрыРасчета.ДанныеШапки.Организация;
		ИсходныеДанныеДляОтражения.МесяцНачисления = ПараметрыРасчета.ДанныеШапки.ПериодРегистрации;
		ИсходныеДанныеДляОтражения.Подразделение = ПараметрыРасчета.ДанныеШапки.Подразделение;
		ИсходныеДанныеДляОтражения.БухучетПервичногоДокумента = ДанныеДляБухучетаЗарплатыПервичныхДокументов(Объект).ТаблицаБухучетЗарплаты;
		ИсходныеДанныеДляОтражения.Начисление = ПараметрыРасчета.ДанныеШапки.Начисление;
		
		Если ПараметрыРасчета.ЕстьКоэффициентыРаспределенияПособий Тогда
			Если Объект.КоэффициентыРаспределенияПособия.Количество() > 0 Тогда
				ИсходныеДанныеДляОтражения.КоэффициентыРаспределения = Объект.КоэффициентыРаспределенияПособия.Выгрузить();
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаНачислений = ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы.Скопировать(, " ИдентификаторСтроки,ФизическоеЛицо,Начислено");
		ТаблицаНачислений.Колонки.Начислено.Имя = "Сумма";
		ИсходныеДанныеДляОтражения.ТаблицаНачислений = ТаблицаНачислений;
		
		ВременнаяТаблицаРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ОтражениеНачисленийКонтрагентовВБухучете(ИсходныеДанныеДляОтражения);
		
		Для Каждого СтрокаТаблицы Из ВременнаяТаблицаРаспределения Цикл
			Если ЕстьНеРаспределенныеНачисления И ИдентификаторыДляБухУчета[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(РаспределениеРезультатовНачислений.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РаспределениеРезультатовНачислений", РаспределениеРезультатовНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РаспределениеНачислений.Территория КАК ТерриторияВыполненияРаботВОрганизации,
	|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	РаспределениеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	РаспределениеНачислений.Результат КАК Сумма,
	|	РаспределениеНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат
	|ПОМЕСТИТЬ ВТБухучетНачислений
	|ИЗ
	|	&РаспределениеРезультатовНачислений КАК РаспределениеНачислений";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНачисленияДокумента(Объект, ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Если Не ЗарплатаКадры.ВТСуществует(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТДанныеДокумента") Тогда
		СоздатьВТДанныеДокумента(Объект, ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.ИспользоватьСтатьиФинансирования Тогда 
		Если Не ЗарплатаКадры.ВТСуществует(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТБухучетНачислений") Тогда
			СоздатьВТБухучетНачислений(Объект, ПараметрыРасчета);
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.ИдентификаторСтроки КАК НомерСтроки,
		|	Начисления.ВидДохода КАК ВидДохода,
		|	Начисления.ПериодРегистрации КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ) КАК ДатаОкончания,
		|	Начисления.Ссылка КАК ДокументОснование,
		|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БухучетНачислений.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА Начисления.Сумма = 0
		|			ТОГДА Начисления.СуммаВычета
		|		КОГДА БухучетНачислений.ОблагаетсяЕНВД
		|			ТОГДА ВЫРАЗИТЬ(Начисления.СуммаВычета * БухучетНачислений.Сумма / Начисления.Сумма КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ Начисления.СуммаВычета - (ВЫРАЗИТЬ(Начисления.СуммаВычета * (Начисления.Сумма - БухучетНачислений.Сумма) / Начисления.Сумма КАК ЧИСЛО(15, 2)))
		|	КОНЕЦ КАК СуммаВычета,
		|	ВЫБОР
		|		КОГДА Начисления.Сумма = 0
		|			ТОГДА Начисления.СкидкаПоВзносам
		|		КОГДА БухучетНачислений.ОблагаетсяЕНВД
		|			ТОГДА ВЫРАЗИТЬ(Начисления.СкидкаПоВзносам * БухучетНачислений.Сумма / Начисления.Сумма КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ Начисления.СкидкаПоВзносам - (ВЫРАЗИТЬ(Начисления.СкидкаПоВзносам * (Начисления.Сумма - БухучетНачислений.Сумма) / Начисления.Сумма КАК ЧИСЛО(15, 2)))
		|	КОНЕЦ КАК СкидкаПоВзносам
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	ВТДанныеДокумента КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетНачислений КАК БухучетНачислений
		|		ПО Начисления.ИдентификаторСтроки = БухучетНачислений.ИдентификаторСтроки";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.ИдентификаторСтроки КАК НомерСтроки,
		|	Начисления.ВидДохода КАК ВидДохода,
		|	Начисления.ПериодРегистрации КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ) КАК ДатаОкончания,
		|	Начисления.Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ВЫБОР
		|		КОГДА Начисления.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОблагаетсяЕНВД,
		|	Начисления.Сумма КАК Сумма,
		|	Начисления.СуммаВычета КАК СуммаВычета,
		|	Начисления.СкидкаПоВзносам КАК СкидкаПоВзносам
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	ВТДанныеДокумента КАК Начисления";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТУдержанияДокумента(Объект, ПараметрыРасчета)
	
	Если ЗарплатаКадры.ВТСуществует(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТУдержанияДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Если ПараметрыРасчета.РезультатРасчета.Удержания.Количество() = 0 Тогда
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрации,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Удержания.ПустаяСсылка) КАК НачислениеУдержание,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
		|	ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПустаяСсылка) КАК КатегорияУдержания,
		|	0 КАК НомерСтроки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЛОЖЬ КАК ОблагаетсяЕНВД,
		|	0 КАК Сумма,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Получатель,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК ПлатежныйАгент,
		|	ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка) КАК ИсполнительныйДокумент
		|ПОМЕСТИТЬ ВТУдержанияДокумента";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	ТаблицаУдержаний = УдержанияКонтрагентов(Объект, ПараметрыРасчета);
	
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
	|	Удержания.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Подразделение КАК Подразделение,
	|	Удержания.Удержание КАК НачислениеУдержание,
	|	Удержания.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	Удержания.КатегорияУдержания КАК КатегорияУдержания,
	|	Удержания.НомерСтроки КАК НомерСтроки,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.ДатаОкончания КАК ДатаОкончания,
	|	Удержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Удержания.СтатьяРасходов КАК СтатьяРасходов,
	|	Удержания.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Удержания.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	Удержания.Результат КАК Сумма,
	|	Удержания.Получатель КАК Получатель,
	|	Удержания.ПлатежныйАгент КАК ПлатежныйАгент,
	|	Удержания.ДокументОснование КАК ИсполнительныйДокумент
	|ПОМЕСТИТЬ ВТУдержанияДокумента
	|ИЗ
	|	&ТаблицаУдержаний КАК Удержания";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеШапкиДокумента(Объект, ПараметрыРасчета)
	
	Начисление = НачислениеДокумента(Объект);
	Если Не ЗначениеЗаполнено(Начисление) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен вид дохода'");
	КонецЕсли;
	
	РеквизитыДохода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Начисление, "КодДоходаСтраховыеВзносы,КодДоходаНДФЛ");
	Если ЗначениеЗаполнено(РеквизитыДохода.КодДоходаНДФЛ) Тогда
		СтавкаНалогообложенияРезидента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДохода.КодДоходаНДФЛ, "СтавкаНалогообложенияРезидента");
	Иначе
		СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеШапки = Новый Структура;
	ДанныеШапки.Вставить("Ссылка", Объект.Ссылка);
	ДанныеШапки.Вставить("Организация", Объект.Организация);
	ДанныеШапки.Вставить("Начисление", Начисление);
	ДанныеШапки.Вставить("КодДоходаСтраховыеВзносы", РеквизитыДохода.КодДоходаСтраховыеВзносы);
	ДанныеШапки.Вставить("КодДоходаНДФЛ", РеквизитыДохода.КодДоходаНДФЛ);
	ДанныеШапки.Вставить("КатегорияДохода", УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(РеквизитыДохода.КодДоходаНДФЛ));
	ДанныеШапки.Вставить("КодВычетаНДФЛ", Объект.КодВычетаНДФЛ);
	ДанныеШапки.Вставить("СтавкаНалогообложенияРезидента", СтавкаНалогообложенияРезидента);
	ДанныеШапки.Вставить("ПланируемаяДатаВыплаты", Объект.ПланируемаяДатаВыплаты);
	ДанныеШапки.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	ДанныеШапки.Вставить("Подразделение", Объект.Подразделение);
	ДанныеШапки.Вставить("ОтношениеКЕНВД", Объект.ОтношениеКЕНВД);
	ДанныеШапки.Вставить("ОблагаетсяЕНВД", ЗначениеЗаполнено(Объект.ОтношениеКЕНВД) 
			И Объект.ОтношениеКЕНВД = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД"));
	ДанныеШапки.Вставить("СтатьяФинансирования", Объект.СтатьяФинансирования);
	ДанныеШапки.Вставить("СтатьяРасходов", Объект.СтатьяРасходов);
	ДанныеШапки.Вставить("СпособОтраженияЗарплатыВБухучете", Объект.СпособОтраженияЗарплатыВБухучете);
	ДанныеШапки.Вставить("РасчетыСКонтрагентами", ОтражениеЗарплатыВБухучетеРасширенный.СтатьяРасчетыСКонтрагентами());
	ДанныеШапки.Вставить("РаботаВХозрасчетнойОрганизации", ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации"));
	
	ВидыДоходаИсполнительногоПроизводства = УчетНачисленнойЗарплаты.ВидыДоходовИсполнительногоПроизводстваНачислений();
	ДанныеШапки.Вставить("ВидДоходаИсполнительногоПроизводства", ВидыДоходаИсполнительногоПроизводства[ДанныеШапки.Начисление]);
	
	ПараметрыРасчета.Вставить("ДанныеШапки", ДанныеШапки);
	
КонецПроцедуры

Функция ДанныеШапкиДокумента(Объект, ПараметрыРасчета)
	
	ДанныеШапки = Неопределено;
	ПараметрыРасчета.Свойство("ДанныеШапки", ДанныеШапки);
	Если Не ЗначениеЗаполнено(ДанныеШапки) Тогда
		ЗаполнитьДанныеШапкиДокумента(Объект, ПараметрыРасчета);
		ДанныеШапки = ПараметрыРасчета.ДанныеШапки;
	КонецЕсли;
	
	Возврат ДанныеШапки;
	
КонецФункции

Функция НачислениеДокумента(Объект)
	
	ИзвестныеИменаРеквизитаВидаДохода = Новый Массив;
	ИзвестныеИменаРеквизитаВидаДохода.Добавить("ВидВыплаты");
	ИзвестныеИменаРеквизитаВидаДохода.Добавить("ВидПрочегоДохода");
	Начисление = Неопределено;
	Для Каждого ИмяРеквизита Из ИзвестныеИменаРеквизитаВидаДохода Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Тогда
			Начисление = Объект[ИмяРеквизита];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Начисление;
	
КонецФункции

Процедура ЗаполнитьИдентификаторыСтрок(ИмяТаблицы, ДокументОбъект, ДанныеФормы, ОписаниеДокумента)
	
	ОписаниеТаблицы = ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата[ИмяТаблицы];
	
	ДанныеФормыКоллекция = ДанныеФормы[ИмяТаблицы];
	ТаблицаОбъекта = ДокументОбъект[ИмяТаблицы];
	
	ИмяРеквизитаИдентификаторСтроки = ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки;
	ИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + 1;
	Индекс = 0;
	Пока Индекс < ДанныеФормыКоллекция.Количество() Цикл
		ТаблицаОбъекта[Индекс][ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
		
		ДанныеФормыКоллекция[Индекс][ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция УдержанияКонтрагентов(Объект, ПараметрыРасчета)
	
	РаспределятьПоСтатьям = ПараметрыРасчета.ИспользоватьСтатьиФинансирования;
	ТаблицаУдержаний = ТаблицаУдержанийКонтрагентов();
	
	ВидыРасчетов = ОбщегоНазначения.ВыгрузитьКолонку(ПараметрыРасчета.РезультатРасчета.Удержания, "Удержание", Истина);
	КатегорияУдержания = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчетов, "КатегорияУдержания");
	СтатьяРасходов = Неопределено;
	Если Не РаспределятьПоСтатьям Тогда
		СтатьяРасходов = ПараметрыРасчета.ДанныеШапки.СтатьяРасходов;
		Если ПараметрыРасчета.ДанныеШапки.РаботаВХозрасчетнойОрганизации Тогда
			СтатьяРасходов = ПараметрыРасчета.ДанныеШапки.РасчетыСКонтрагентами;
		КонецЕсли;
	КонецЕсли;
	
	ВидДоходаИсполнительногоПроизводства = ПараметрыРасчета.ДанныеШапки.ВидДоходаИсполнительногоПроизводства;
	
	Для Каждого СтрокаУдержаний Из ПараметрыРасчета.РезультатРасчета.Удержания Цикл
		Если РаспределятьПоСтатьям Тогда
			Для Каждого СтрокаРаспределения Из СтрокаУдержаний.РаспределениеПоСтатьям Цикл
				НоваяСтрока = ТаблицаУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыРасчета.ДанныеШапки, "ПериодРегистрации,Организация,Подразделение");
				НоваяСтрока.НомерСтроки = СтрокаУдержаний.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрока.КатегорияУдержания = КатегорияУдержания[СтрокаУдержаний.Удержание];
				НоваяСтрока.ДатаНачала = НачалоМесяца(НоваяСтрока.ДатаНачала);
				НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаОкончания);
			КонецЦикла;
		Иначе
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыРасчета.ДанныеШапки, "ПериодРегистрации,Организация,Подразделение");
			НоваяСтрока.НомерСтроки = СтрокаУдержаний.ИдентификаторСтрокиВидаРасчета;
			НоваяСтрока.КатегорияУдержания = КатегорияУдержания[СтрокаУдержаний.Удержание];
			НоваяСтрока.ДатаНачала = НачалоМесяца(НоваяСтрока.ДатаНачала);
			НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаОкончания);
			НоваяСтрока.СтатьяРасходов = СтатьяРасходов;
			НоваяСтрока.ВидДоходаИсполнительногоПроизводства = ВидДоходаИсполнительногоПроизводства;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаУдержаний;
	
КонецФункции

Функция ДоходыНДФЛ(Объект, ПараметрыРасчета)
	
	Если Не ЗарплатаКадры.ВТСуществует(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТДанныеДокумента") Тогда
		СоздатьВТДанныеДокумента(Объект, ПараметрыРасчета);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КодДохода КАК КодДохода,
	|	ДанныеДокумента.КодВычета КАК КодВычета,
	|	ДанныеДокумента.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	ДанныеДокумента.Сумма КАК СуммаДохода,
	|	ДанныеДокумента.СуммаВычета КАК СуммаВычета,
	|	ДанныеДокумента.Начисление КАК Начисление,
	|	ДанныеДокумента.КатегорияДохода КАК КатегорияДохода,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ИСТИНА КАК НеУчитыватьДоходВ6НДФЛ
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента";
	
	Возврат  Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеДляПроведенияВзносы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ВидДохода,
	|	ДанныеДокумента.Начисление,
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.ДатаНачала,
	|	ДанныеДокумента.ОблагаетсяЕНВД,
	|	ДанныеДокумента.Сумма,
	|	ДанныеДокумента.СкидкаПоВзносам КАК Скидка
	|ИЗ
	|	ВТНачисленияДокумента КАК ДанныеДокумента";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеДляПроведения(Объект)
	
	ДанныеДляПроведения = Новый Структура;
	
	ПараметрыРасчета = ПараметрыРасчета(Объект);
	ПараметрыРасчета.ОбновитьБухУчетНачислений = Ложь;
	ПараметрыРасчета.ОбновитьБухУчетНДФЛ = Ложь;
	ПараметрыРасчета.ОбновитьБухУчетУдержаний = Ложь;
	ПараметрыРасчета.РассчитатьНалогиИВзносы = Ложь;
	ПараметрыРасчета.РассчитатьУдержания = Ложь;
	
	ПрочитатьДанныеОбъекта(Объект, ПараметрыРасчета);
	СоздатьВТДанныеДокумента(Объект, ПараметрыРасчета);
	
	Если Не Объект.РаспределятьРезультатыРасчета Тогда 
		ПараметрыРасчета.ОбновитьБухУчетНачислений = Истина;
		ПараметрыРасчета.ОбновитьБухУчетНДФЛ = Истина;
		ПараметрыРасчета.ОбновитьБухУчетУдержаний = Истина;
		РаспределитьНачисленияПоСтатьям(Объект, ПараметрыРасчета);
		РаспределитьУдержанияПоСтатьям(Объект, ПараметрыРасчета);
		РаспределитьНДФЛПоСтатьям(Объект, ПараметрыРасчета);
	КонецЕсли;
	
	СоздатьВТНачисленияДокумента(Объект, ПараметрыРасчета);
	СоздатьВТУдержанияДокумента(Объект, ПараметрыРасчета);
	
	ДанныеДляПроведения.Вставить("ДанныеДляВзносов", ДанныеДляПроведенияВзносы(ПараметрыРасчета.МенеджерВременныхТаблиц));
	
	ИмяТаблицыВзносов = "Документ.РегистрацияПрочихДоходов.НачисленияУдержанияВзносы";
	Если ПараметрыРасчета.ЭтоВыплатаБывшимСотрудникам Тогда
		ИмяТаблицыВзносов = "Документ.ВыплатаБывшимСотрудникам.НачисленияУдержанияВзносы";
	КонецЕсли;
	ИсчисленныеВзносы = УчетСтраховыхВзносов.ДанныеОВзносахИзДокумента(Объект.Ссылка, ИмяТаблицыВзносов, Ложь, , , "Ссылка.ПериодРегистрации");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.Начисление КАК Начисление,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ДанныеДокумента.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеДокумента.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ДанныеДокумента.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства
	|ИЗ
	|	ВТНачисленияДокумента КАК ДанныеДокумента";
	ДанныеДляПроведения.Вставить("Начисления", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.НачислениеУдержание КАК НачислениеУдержание,
	|	ДанныеДокумента.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ДанныеДокумента.ИсполнительныйДокумент КАК ДокументОснование,
	|	ДанныеДокумента.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ДанныеДокумента.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеДокумента.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|			ТОГДА ДанныеДокумента.Получатель
	|		КОГДА ДанныеДокумента.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
	|			ТОГДА ДанныеДокумента.ПлатежныйАгент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	ВТУдержанияДокумента КАК ДанныеДокумента";
	ДанныеДляПроведения.Вставить("УдержанияКонтрагентов", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Сумма КАК Результат,
	|	ДанныеДокумента.НачислениеУдержание КАК Удержание,
	|	ДанныеДокумента.ИсполнительныйДокумент КАК ДокументОснование,
	|	ДанныеДокумента.Получатель КАК Получатель,
	|	ДанныеДокумента.ПлатежныйАгент КАК ПлатежныйАгент,
	|	ДанныеДокумента.ДатаНачала КАК ДатаНачала,
	|	ДанныеДокумента.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТУдержанияДокумента КАК ДанныеДокумента";
	ДанныеДляПроведения.Вставить("Удержания", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсполнительныеЛисты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ИсполнительныеЛисты.СтатьяРасходов КАК СтатьяРасходов,
	|	ИсполнительныеЛисты.ИсполнительныйДокумент КАК ИсполнительныйДокумент,
	|	ИсполнительныеЛисты.Получатель КАК Получатель,
	|	ИсполнительныеЛисты.ПлатежныйАгент КАК ПлатежныйАгент,
	|	НАЧАЛОПЕРИОДА(ИсполнительныеЛисты.ДатаНачала, МЕСЯЦ) КАК МесяцУдержания,
	|	СУММА(ВЫБОР
	|			КОГДА ИсполнительныеЛисты.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|				ТОГДА ИсполнительныеЛисты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаУдержания,
	|	СУММА(ВЫБОР
	|			КОГДА ИсполнительныеЛисты.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
	|				ТОГДА ИсполнительныеЛисты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВознагражденияПлатежногоАгента
	|ИЗ
	|	ВТУдержанияДокумента КАК ИсполнительныеЛисты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсполнительныеЛисты.СтатьяФинансирования,
	|	ИсполнительныеЛисты.СтатьяРасходов,
	|	ИсполнительныеЛисты.ИсполнительныйДокумент,
	|	ИсполнительныеЛисты.Получатель,
	|	ИсполнительныеЛисты.ПлатежныйАгент,
	|	НАЧАЛОПЕРИОДА(ИсполнительныеЛисты.ДатаНачала, МЕСЯЦ)
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА ИсполнительныеЛисты.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|					ТОГДА ИсполнительныеЛисты.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ИсполнительныеЛисты.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
	|					ТОГДА ИсполнительныеЛисты.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)";
	ДанныеДляПроведения.Вставить("УдержанияПоИсполнительнымДокументам", Запрос.Выполнить().Выгрузить());
	
	// Удержания до предела по сотрудникам
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.Организация КАК Организация,
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.Удержание КАК Удержание,
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ДокументОснование КАК ДокументОснование,
	|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ПрекратитьПоДостижениюПредела КАК ПрекратитьПоДостижениюПредела
	|ПОМЕСТИТЬ ВТПредельныеСуммыУдержаний
	|ИЗ
	|	РегистрСведений.ПредельныеСуммыУдержанийСотрудников.СрезПоследних(
	|			,
	|			(Организация, ФизическоеЛицо, Удержание, ДокументОснование) В
	|				(ВЫБРАТЬ
	|					ЗаписиУдержаний.Организация,
	|					ЗаписиУдержаний.ФизическоеЛицо,
	|					ЗаписиУдержаний.НачислениеУдержание,
	|					ЗаписиУдержаний.ИсполнительныйДокумент
	|				ИЗ
	|					ВТУдержанияДокумента КАК ЗаписиУдержаний)) КАК ПредельныеСуммыУдержанийСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЗаписиУдержаний.Организация КАК Организация,
	|	ЗаписиУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗаписиУдержаний.НачислениеУдержание КАК Удержание,
	|	ЗаписиУдержаний.ИсполнительныйДокумент КАК ДокументОснование,
	|	ЗаписиУдержаний.Сумма КАК Сумма
	|ИЗ
	|	ВТУдержанияДокумента КАК ЗаписиУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредельныеСуммыУдержаний КАК ПредельныеСуммыУдержаний
	|		ПО ЗаписиУдержаний.Организация = ПредельныеСуммыУдержаний.Организация
	|			И ЗаписиУдержаний.ФизическоеЛицо = ПредельныеСуммыУдержаний.ФизическоеЛицо
	|			И ЗаписиУдержаний.НачислениеУдержание = ПредельныеСуммыУдержаний.Удержание
	|			И ЗаписиУдержаний.ИсполнительныйДокумент = ПредельныеСуммыУдержаний.ДокументОснование
	|			И (ПредельныеСуммыУдержаний.ПрекратитьПоДостижениюПредела)";
		
	ДанныеДляПроведения.Вставить("УдержанияДоПределаПоСотрудникам", Запрос.Выполнить().Выгрузить());
	
	ДанныеДляПроведения.Вставить("ЗадолженностьПоУдержаниям");
	РасчетЗарплатыРасширенный.ЗаполнитьПогашениеЗадолженностиПоУдержаниям(ДанныеДляПроведения, Объект.Ссылка, Объект.ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.ПериодРегистрации КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Начисление КАК Начисление,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма
	|ИЗ
	|	ВТНачисленияДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.Организация = Организации.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.ГоловнаяОрганизация,
	|	ДанныеДокумента.ПериодРегистрации,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Начисление";
	
	ДанныеДляПроведения.Вставить("ДополнениеРасчетнойБазыУдержаний", Запрос.Выполнить().Выгрузить());
	
	ДанныеДляПроведения.Вставить("СтраховыеВзносы", ИсчисленныеВзносы);
	
	#Область НДФЛ
	ДанныеШапки = ПараметрыРасчета.ДанныеШапки;
	ВидНДФЛ = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов;
	Если ПараметрыРасчета.ЭтоВыплатаБывшимСотрудникам Тогда
		ВидНДФЛ = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛРасчетыСБывшимиСотрудниками;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодДоходаНДФЛ", ДанныеШапки.КодДоходаНДФЛ);
	Запрос.УстановитьПараметр("КатегорияДохода", ДанныеШапки.КатегорияДохода);
	Запрос.УстановитьПараметр("КодВычетаНДФЛ", ДанныеШапки.КодВычетаНДФЛ);
	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", ДанныеШапки.ПланируемаяДатаВыплаты);
	Запрос.УстановитьПараметр("ДоходОблагаетсяНДФЛ", ЗначениеЗаполнено(ДанныеШапки.КодДоходаНДФЛ));
	
	// Доходы НДФЛ
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДокумента.Организация КАК Организация,
	|	&КодДоходаНДФЛ КАК КодДохода,
	|	&КодВычетаНДФЛ КАК КодВычета,
	|	&ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	&КатегорияДохода КАК КатегорияДохода,
	|	НачисленияДокумента.Сумма КАК СуммаДохода,
	|	НачисленияДокумента.СуммаВычета КАК СуммаВычета,
	|	НачисленияДокумента.Начисление КАК Начисление,
	|	НачисленияДокумента.Подразделение КАК Подразделение,
	|	НачисленияДокумента.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияДокумента.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ИСТИНА КАК НеУчитыватьДоходВ6НДФЛ
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|ГДЕ
	|	&ДоходОблагаетсяНДФЛ";
	ДанныеДляПроведения.Вставить("ДанныеДляНДФЛДоходы", Запрос.Выполнить().Выгрузить());
	
	// Физические лица
	ДанныеДляПроведения.Вставить("ФизическиеЛица", ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	// НДФЛ
	ДанныеДляПроведения.Вставить("НДФЛ");
	ДанныеДляПроведения.Вставить("НДФЛПоСотрудникам");
	ДанныеДляПроведения.Вставить("УчтенныеПриРасчетеДокументы");
	
	РегистрироватьУдержанныйНДФЛ = Не (ПолучитьФункциональнуюОпцию("ИспользоватьВедомостиДляВыплатыПрочихДоходов") И Объект.РегистрироватьВыплатуВедомостью);
	Если РегистрироватьУдержанныйНДФЛ Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокумента.КатегорияДохода КАК КатегорияДохода,
		|	ДанныеДокумента.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	ДанныеДокумента.ПланируемаяДатаВыплаты КАК Период
		|ПОМЕСТИТЬ ВТФильтрДляСтавкиНДФЛ
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)";
		Запрос.Выполнить();
		
		УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента(Запрос.МенеджерВременныхТаблиц,"ВТФильтрДляСтавкиНДФЛ");
	КонецЕсли;		
	Если ПараметрыРасчета.РасчетНДФЛНарастающимИтогомСНачалаГода Тогда
		
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, Объект.Ссылка);
		Если Объект.РаспределятьРезультатыРасчета Тогда
			Для Каждого СтрокаНДФЛ Из ДанныеДляПроведения.НДФЛПоСотрудникам Цикл
				Если СтрокаНДФЛ.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ Тогда
					СтрокаНДФЛ.ВидУдержания = ВидНДФЛ;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ДанныеДляПроведения.НДФЛПоСотрудникам.Очистить();
			РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
			СтрокиНачисленийФизЛиц = ПараметрыРасчета.СтрокиНачисленийФизЛиц;
			Для Каждого СтрокаНДФЛ Из ДанныеДляПроведения.НДФЛ Цикл
				РаспределениеПоСтатьям.Очистить();
				
				СтрокаНачислений = СтрокиНачисленийФизЛиц[СтрокаНДФЛ.ФизическоеЛицо];
				Если СтрокаНачислений = Неопределено Тогда
					СтрокаНДФЛСотрудника = ДанныеДляПроведения.НДФЛПоСотрудникам.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНДФЛСотрудника, СтрокаНДФЛ);
					СтрокаНДФЛСотрудника.Сумма = СтрокаНДФЛ.НалогПоСтавке13;
					СтрокаНДФЛСотрудника.ВидУдержания = ВидНДФЛ;
					Продолжить;
				КонецЕсли;
		
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаНачислений.РаспределениеПоСтатьям, РаспределениеПоСтатьям);
				Если РаспределениеПоСтатьям.Количество() > 0 Тогда
					ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаНДФЛ.НалогПоСтавке13, РаспределениеПоСтатьям, "Результат", 0);
					Для Каждого СтрокаРаспределения Из РаспределениеПоСтатьям Цикл
						СтрокаНДФЛСотрудника = ДанныеДляПроведения.НДФЛПоСотрудникам.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНДФЛСотрудника, СтрокаНДФЛ);
						ЗаполнитьЗначенияСвойств(СтрокаНДФЛСотрудника, СтрокаРаспределения, "СтатьяФинансирования,СтатьяРасходов");
						СтрокаНДФЛСотрудника.Сумма = СтрокаРаспределения.Результат;
						СтрокаНДФЛСотрудника.ВидУдержания = ВидНДФЛ;
					КонецЦикла;
				Иначе
					СтрокаНДФЛСотрудника = ДанныеДляПроведения.НДФЛПоСотрудникам.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНДФЛСотрудника, СтрокаНДФЛ);
					СтрокаНДФЛСотрудника.Сумма = СтрокаНДФЛ.НалогПоСтавке13;
					СтрокаНДФЛСотрудника.ВидУдержания = ВидНДФЛ;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РегистрироватьУдержанныйНДФЛ Тогда
			Если ПараметрыРасчета.РезультатРасчета.Свойство("НДФЛ") И
				ТипЗнч(ПараметрыРасчета.РезультатРасчета.НДФЛ) = Тип("ТаблицаЗначений") Тогда
				
				СуммыНДФЛ = ПараметрыРасчета.РезультатРасчета.НДФЛ.Скопировать(, "ФизическоеЛицо,Налог,ЗачтеноАвансовыхПлатежей,НалогСПревышения,ЗачтеноАвансовыхПлатежейСПревышения");
				СуммыНДФЛ.Свернуть("ФизическоеЛицо","Налог,ЗачтеноАвансовыхПлатежей,НалогСПревышения,ЗачтеноАвансовыхПлатежейСПревышения");
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВТ.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ВТ.Налог КАК Налог,
				|	ВТ.ЗачтеноАвансовыхПлатежей КАК ЗачтеноАвансовыхПлатежей,
				|	ВТ.НалогСПревышения КАК НалогСПревышения,
				|	ВТ.ЗачтеноАвансовыхПлатежейСПревышения КАК ЗачтеноАвансовыхПлатежейСПревышения
				|ПОМЕСТИТЬ ВТДанныеОСуммахНДФЛ
				|ИЗ
				|	&НДФЛ КАК ВТ";
				Запрос.УстановитьПараметр("НДФЛ", СуммыНДФЛ);
			Иначе
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 0
				|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
				|	0 КАК Налог,
				|	0 КАК ЗачтеноАвансовыхПлатежей,
				|	0 КАК НалогСПревышения,
				|	0 КАК ЗачтеноАвансовыхПлатежейСПревышения
				|ПОМЕСТИТЬ ВТДанныеОСуммахНДФЛ";
			КонецЕсли;
			Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеДокумента.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
			|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,
			|	ДанныеДокумента.ПланируемаяДатаВыплаты КАК МесяцНалоговогоПериода,
			|	ДанныеДокумента.Подразделение КАК Подразделение,
			|	ДанныеДокумента.КодДохода КАК КодДохода,
			|	ДанныеДокумента.КатегорияДохода КАК КатегорияДохода,
			|	ЕСТЬNULL(СуммыНалога.Налог - СуммыНалога.ЗачтеноАвансовыхПлатежей, 0) КАК Сумма,
			|	ЕСТЬNULL(СуммыНалога.НалогСПревышения - СуммыНалога.ЗачтеноАвансовыхПлатежейСПревышения, 0) КАК СуммаСПревышения,
			|	ДанныеДокумента.Ссылка КАК ДокументОснование,
			|	ДанныеДокумента.Сумма КАК СуммаВыплаченногоДохода,
			|	ИСТИНА КАК УчитыватьВыплаченныйДоходВ6НДФЛ
			|ИЗ
			|	ВТДанныеДокумента КАК ДанныеДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСуммахНДФЛ КАК СуммыНалога
			|		ПО ДанныеДокумента.ФизическоеЛицо = СуммыНалога.ФизическоеЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
			|		ПО ДанныеДокумента.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
			|			И ДанныеДокумента.ПланируемаяДатаВыплаты = СтавкаНДФЛПоСтавкеРезидента.Период
			|ГДЕ
			|	ДанныеДокумента.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)";
			
			ДанныеДляПроведения.Вставить("НДФЛУдержанный", Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
	Иначе
		ДанныеДляПроведения.НДФЛ = ТаблицаНДФЛ();
		УдаляемыеКолонки = Новый Массив;
		УдаляемыеКолонки.Добавить("Налог");
		УдаляемыеКолонки.Добавить("ЗачтеноАвансовыхПлатежей");
		УдаляемыеКолонки.Добавить("Сумма");
		УдаляемыеКолонки.Добавить("НалогСПревышения");
		УдаляемыеКолонки.Добавить("ЗачтеноАвансовыхПлатежейСПревышения");
		УдаляемыеКолонки.Добавить("СуммаСПревышения");
		УдаляемыеКолонки.Добавить("РаспределениеПоСтатьям");
		УдаляемыеКолонки.Добавить("УчтенныеОснования");
		УдаляемыеКолонки.Добавить("ФиксСтрока");
		УдаляемыеКолонки.Добавить("ФиксРасчет");
		Для Каждого ИмяКолонки Из УдаляемыеКолонки Цикл
			ДанныеДляПроведения.НДФЛ.Колонки.Удалить(ИмяКолонки);
		КонецЦикла;
		ДанныеДляПроведения.НДФЛ.Колонки.ИдентификаторСтрокиНДФЛ.Имя = "ИдентификаторСтроки";
		ДанныеДляПроведения.НДФЛ.Колонки.Добавить("НалогПоСтавке09", ОбщегоНазначения.ОписаниеТипаЧисло(13,0));
		ДанныеДляПроведения.НДФЛ.Колонки.Добавить("НалогПоСтавке35", ОбщегоНазначения.ОписаниеТипаЧисло(13,0));
		
		ДанныеДляПроведения.НДФЛПоСотрудникам = ДанныеДляПроведения.НДФЛ.СкопироватьКолонки();
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(13,0));
		
		РаспределениеДоходов = Новый ТаблицаЗначений;
		РаспределениеДоходов.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
		РаспределениеДоходов.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
		РаспределениеДоходов.Колонки.Добавить("Результат", ОбщегоНазначения.ОписаниеТипаЧисло(13,0));
		
		Для Каждого СтрокаНачислений Из ПараметрыРасчета.РезультатРасчета.НачисленияУдержанияВзносы Цикл
			Если СтрокаНачислений.НДФЛ = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаНДФЛ = ДанныеДляПроведения.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаНачислений);
			
			Если ДанныеШапки.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
				НоваяСтрокаНДФЛ.НалогПоСтавке09 = СтрокаНачислений.НДФЛ;
			ИначеЕсли ДанныеШапки.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
				НоваяСтрокаНДФЛ.НалогПоСтавке35 = СтрокаНачислений.НДФЛ;
			КонецЕсли;
			НоваяСтрокаНДФЛ.МесяцНалоговогоПериода = ДанныеШапки.ПланируемаяДатаВыплаты;
			НоваяСтрокаНДФЛ.Подразделение = ДанныеШапки.Подразделение;
			НоваяСтрокаНДФЛ.КатегорияДохода = ДанныеШапки.КатегорияДохода;
			НоваяСтрокаНДФЛ.НомерСтроки = СтрокаНачислений.ИдентификаторСтроки;
			
			Если СтрокаНачислений.РаспределениеПоСтатьям <> Неопределено И СтрокаНачислений.РаспределениеПоСтатьям.Количество() > 0 Тогда 
				РаспределениеДоходов.Очистить();
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаНачислений.РаспределениеПоСтатьям, РаспределениеДоходов);
				ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаНачислений.НДФЛ, РаспределениеДоходов, "Результат", 0);
				Для Каждого СтрокаРаспределения Из РаспределениеДоходов Цикл
					НоваяСтрокаНДФЛСотрудников = ДанныеДляПроведения.НДФЛПоСотрудникам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛСотрудников, НоваяСтрокаНДФЛ);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛСотрудников, СтрокаРаспределения);
					Если ДанныеШапки.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
						НоваяСтрокаНДФЛ.НалогПоСтавке09 = СтрокаРаспределения.Результат;
					ИначеЕсли ДанныеШапки.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
						НоваяСтрокаНДФЛ.НалогПоСтавке35 = СтрокаРаспределения.Результат;
					КонецЕсли;
					НоваяСтрокаНДФЛСотрудников.ВидУдержания = ВидНДФЛ;
					НоваяСтрокаНДФЛСотрудников.Сумма = СтрокаРаспределения.Результат;
				КонецЦикла;
			Иначе
				НоваяСтрокаНДФЛСотрудников = ДанныеДляПроведения.НДФЛПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛСотрудников, НоваяСтрокаНДФЛ);
				НоваяСтрокаНДФЛСотрудников.ВидУдержания = ВидНДФЛ;
				НоваяСтрокаНДФЛСотрудников.Сумма = СтрокаНачислений.НДФЛ;
			КонецЕсли;
		КонецЦикла;
		
		Если РегистрироватьУдержанныйНДФЛ Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеДокумента.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
			|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,
			|	ДанныеДокумента.ПланируемаяДатаВыплаты КАК МесяцНалоговогоПериода,
			|	ДанныеДокумента.Подразделение КАК Подразделение,
			|	ДанныеДокумента.КодДохода КАК КодДохода,
			|	ДанныеДокумента.КатегорияДохода КАК КатегорияДохода,
			|	ДанныеДокумента.НДФЛ КАК Сумма,
			|	ДанныеДокумента.Ссылка КАК ДокументОснование,
			|	ДанныеДокумента.Сумма КАК СуммаВыплаченногоДохода,
			|	ИСТИНА КАК УчитыватьВыплаченныйДоходВ6НДФЛ
			|ИЗ
			|	ВТДанныеДокумента КАК ДанныеДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
			|		ПО ДанныеДокумента.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
			|			И ДанныеДокумента.ПланируемаяДатаВыплаты = СтавкаНДФЛПоСтавкеРезидента.Период
			|ГДЕ
			|	ДанныеДокумента.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
			|	И ДанныеДокумента.НДФЛ <> 0";
			
			ДанныеДляПроведения.Вставить("НДФЛУдержанный", Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
		ДанныеДляПроведения.УчтенныеПриРасчетеДокументы = УчетНДФЛРасширенный.УчтенныеПриРасчетеДокументы(ПараметрыРасчета.ДанныеШапки.Ссылка, ДанныеДляПроведения.ФизическиеЛица);
	КонецЕсли;
	
	Если ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Найти("СтатьяРасходов") = Неопределено Тогда
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов"));
	КонецЕсли;
	Если ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Найти("ТерриторияВыполненияРаботВОрганизации") = Неопределено Тогда
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
	КонецЕсли;
	Если ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Найти("ВидДоходаИсполнительногоПроизводства") = Неопределено Тогда
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("ВидДоходаИсполнительногоПроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
	КонецЕсли;
	Если ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Найти("НачислениеУдержание") = Неопределено Тогда
		ДанныеДляПроведения.НДФЛПоСотрудникам.Колонки.Добавить("НачислениеУдержание", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	КонецЕсли;
	
	СтатьяРасходов = Неопределено;
	Если Не ПараметрыРасчета.ИспользоватьСтатьиФинансирования Тогда
		СтатьяРасходов = ПараметрыРасчета.ДанныеШапки.СтатьяРасходов;
		Если ПараметрыРасчета.ДанныеШапки.РаботаВХозрасчетнойОрганизации Тогда
			СтатьяРасходов = ПараметрыРасчета.ДанныеШапки.РасчетыСКонтрагентами;
		КонецЕсли;
	КонецЕсли;
	
	ВидДоходаИсполнительногоПроизводства = ПараметрыРасчета.ДанныеШапки.ВидДоходаИсполнительногоПроизводства;
	Для Каждого СтрокаНДФЛ Из ДанныеДляПроведения.НДФЛПоСотрудникам Цикл
		Если СтатьяРасходов <> Неопределено Тогда
			СтрокаНДФЛ.СтатьяРасходов = СтатьяРасходов;
		КонецЕсли;
		СтрокаНДФЛ.ТерриторияВыполненияРаботВОрганизации = СтрокаНДФЛ.Подразделение;
		СтрокаНДФЛ.ВидДоходаИсполнительногоПроизводства = ВидДоходаИсполнительногоПроизводства;
		СтрокаНДФЛ.НачислениеУдержание = СтрокаНДФЛ.ВидУдержания;
	КонецЦикла;
	
	#КонецОбласти
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция ТаблицаНачисленияУдержанияВзносы()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(7,0));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Начислено", ОбщегоНазначения.ОписаниеТипаЧисло(13,2));
	Таблица.Колонки.Добавить("НДФЛ", ОбщегоНазначения.ОписаниеТипаЧисло(13,0));
	Таблица.Колонки.Добавить("ЗачтеноАвансовыхПлатежей", ОбщегоНазначения.ОписаниеТипаЧисло(13,0));
	Таблица.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("КВыплате", ОбщегоНазначения.ОписаниеТипаЧисло(13,2));
	Таблица.Колонки.Добавить("Удержано", ОбщегоНазначения.ОписаниеТипаЧисло(13,2));
	Таблица.Колонки.Добавить("СкидкаПоВзносам", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ФиксСуммаВычета", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФФОМС", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ФФОМСЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ТФОМС", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ТФОМСЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ФСС", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ФССЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ФССНесчастныеСлучаи", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРНакопительная", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРНакопительнаяЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРСтраховая", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРСтраховаяЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРПоСуммарномуТарифу", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРПоСуммарномуТарифуЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРДоПредельнойВеличины", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРДоПредельнойВеличиныЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРСПревышения", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Таблица.Колонки.Добавить("ПФРСПревышенияЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Таблица.Колонки.Добавить("РаспределениеПоСтатьям", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаУдержания()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОбщегоНазначения.ОписаниеТипаЧисло(7,0));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
	Таблица.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	Таблица.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Результат", ОбщегоНазначения.ОписаниеТипаЧисло(13,2));
	Таблица.Колонки.Добавить("Задолженность", ОбщегоНазначения.ОписаниеТипаЧисло(13,2));
	
	Таблица.Колонки.Добавить("Показатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	Таблица.Колонки.Добавить("РаспределениеПоСтатьям", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаНДФЛ()
	
	Возврат УчетНДФЛ.ТаблицаНДФЛ();
	
КонецФункции

Функция ТаблицаПримененныеВычетыНаДетейИИмущественные()
	
	Возврат УчетНДФЛ.ТаблицаПримененныеВычетыНДФЛ();
	
КонецФункции

Функция ТаблицаПоказателей()
		
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Показатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	Показатели.Колонки.Добавить("Значение", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	
	Возврат Показатели;
	
КонецФункции

Функция СтрокаТаблицыНачислений(ТаблицаНачислений)
	
	НоваяСтрока = ТаблицаНачислений.Добавить();
	НоваяСтрока.РаспределениеПоСтатьям = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРаспределениеРезультатовНачислений();
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция СтрокаТаблицыУдержаний(ТаблицаУдержаний)
	
	НоваяСтрока = ТаблицаУдержаний.Добавить();
	НоваяСтрока.Показатели = ТаблицаПоказателей();
	НоваяСтрока.РаспределениеПоСтатьям = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ТаблицаУдержанийКонтрагентов()
	
	ТаблицаУдержаний = Новый ТаблицаЗначений;
	ТаблицаУдержаний.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	ТаблицаУдержаний.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаУдержаний.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаУдержаний.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаУдержаний.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	ТаблицаУдержаний.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	ТаблицаУдержаний.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(7, 0));
	ТаблицаУдержаний.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаУдержаний.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаУдержаний.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаУдержаний.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаУдержаний.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ТаблицаУдержаний.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	ТаблицаУдержаний.Колонки.Добавить("Результат", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаУдержаний.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаУдержаний.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаУдержаний.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
	ТаблицаУдержаний.Колонки.Добавить("ВидДоходаИсполнительногоПроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
	
	Возврат ТаблицаУдержаний;
	
КонецФункции

Функция РезультатРасчетаПрочихДоходов()
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("НачисленияУдержанияВзносы", ТаблицаНачисленияУдержанияВзносы());
	РезультатРасчета.Вставить("Удержания", ТаблицаУдержания());
	РезультатРасчета.Вставить("НДФЛ", ТаблицаНДФЛ());
	РезультатРасчета.Вставить("ПримененныеВычетыНаДетейИИмущественные", ТаблицаПримененныеВычетыНаДетейИИмущественные());
	Возврат РезультатРасчета;
КонецФункции

Процедура ЗаполнитьРеквизитПеречислениеНДФЛВыполнено(ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыплатаБывшимСотрудникам.Ссылка КАК Ссылка,
	|	""ВыплатаБывшимСотрудникам"" КАК ИмяДокумента
	|ИЗ
	|	Документ.ВыплатаБывшимСотрудникам КАК ВыплатаБывшимСотрудникам
	|ГДЕ
	|	ВыплатаБывшимСотрудникам.ДатаПлатежаНДФЛ <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ВыплатаБывшимСотрудникам.ПеречислениеНДФЛВыполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияПрочихДоходов.Ссылка,
	|	""РегистрацияПрочихДоходов""
	|ИЗ
	|	Документ.РегистрацияПрочихДоходов КАК РегистрацияПрочихДоходов
	|ГДЕ
	|	РегистрацияПрочихДоходов.ДатаПлатежаНДФЛ <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ РегистрацияПрочихДоходов.ПеречислениеНДФЛВыполнено";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяПространстваБлокировки = "Документ." + Выборка.ИмяДокумента;
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ИмяПространстваБлокировки, "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПеречислениеНДФЛВыполнено = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;


КонецПроцедуры

Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.СодержитПолеСотрудник	= Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник	= "ФизическоеЛицо";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета	= "Удержание";
	ОписаниеТаблицы.ИмяТаблицы 				= "Удержания";
	ОписаниеТаблицы.НомерТаблицы 			= 3;
	ОписаниеТаблицы.СодержитПолеВидРасчета	= Истина;
	ОписаниеТаблицы.СодержитПолеСотрудник	= Ложь;
	ОписаниеТаблицы.ПутьКДанным				= "Объект.Удержания";
	ОписаниеТаблицы.ПутьКДаннымПоказателей	= "Объект.Показатели";
	ОписаниеТаблицы.ИмяРеквизитаДатаНачала	= "ДатаНачала";
	ОписаниеТаблицы.ИмяРеквизитаДатаОкончания = "ДатаОкончания";
	
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	ОписаниеТаблицы.БухучетПрочихДоходов = Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

#КонецОбласти

