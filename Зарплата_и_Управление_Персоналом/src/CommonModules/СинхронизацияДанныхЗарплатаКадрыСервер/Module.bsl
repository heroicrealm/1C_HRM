////////////////////////////////////////////////////////////////////////////////
// Подсистема "Синхронизация данных".
// Серверные процедуры, обслуживающие правила регистрации объектов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет разрешена или нет синхронизация по узлу РИБ
//
// Параметры:
//		УзелИнформационнойБазы - ПланОбмена - узел, для которого определяется возможность синхронизации данных
//
// Возвращаемое значение:
//		Булево - Истина, если синхронизация по указанному узлу разрешена, иначе Ложь.
//
Функция СинхронизацияРазрешена(УзелИнформационнойБазы) Экспорт
	
	МетаданныеУзла = УзелИнформационнойБазы.Метаданные();
	Если Не МетаданныеУзла.РаспределеннаяИнформационнаяБаза Тогда
		// Проверку производим только для планов обмена РИБ и АРМ
		Возврат Истина;
	КонецЕсли;
	
	Если НачальнаяНастройкаПрограммы.ВыполняетсяНачальнаяНастройкаПрограммы() Тогда
		ВызватьИсключение НСтр("ru = 'Синхронизация невозможна пока не завершена начальная настройка программы.'");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(УзелИнформационнойБазы)) Тогда
		УзелИнформационнойБазыОбъект = УзелИнформационнойБазы.ПолучитьОбъект();
	Иначе
		УзелИнформационнойБазыОбъект = УзелИнформационнойБазы;
	КонецЕсли;
	
	СинхронизацияПоОрганизациямРазрешена = Истина;
	Если УзелИнформационнойБазыОбъект.СинхронизироватьДанныеПоОрганизациям И УзелИнформационнойБазыОбъект.ИспользоватьОтборПоОрганизациям Тогда
		СинхронизацияПоОрганизациямРазрешена = ПринадлежностьФизическихЛицПоОрганизациямЗаполнена() И ОрганизацииСотрудниковЗаполнены();
	КонецЕсли;
	
	СинхронизацияПоПодразделениямРазрешена = Истина;
	Если УзелИнформационнойБазыОбъект.СинхронизироватьДанныеПоПодразделениям И УзелИнформационнойБазыОбъект.ИспользоватьОтборПоПодразделениям Тогда
		СинхронизацияПоПодразделениямРазрешена = ПринадлежностьФизическихЛицПоПодразделениямЗаполнена() И ПодразделенияСотрудниковЗаполнены();
	КонецЕсли;
	
	Возврат СинхронизацияПоОрганизациямРазрешена И СинхронизацияПоПодразделениямРазрешена
		И Не НачальнаяНастройкаПрограммы.ВыполняетсяНачальнаяНастройкаПрограммы();
	
КонецФункции

// Проверяет используются или нет в узлах РИБ отборы по организациям или структурным подразделениям
//
// Возвращаемое значение:
//		Булево - Истина, если в узлах РИБ отборы используются, иначе Ложь.
//
Функция ИспользуютсяУзлыРИБСОтбором() Экспорт
	Возврат СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.ИспользуютсяУзлыРИБСОтбором();
КонецФункции

// Проверяет используются или нет в узлах РИБ отборы структурным подразделениям
//
// Параметры:
//		ИсключаемыйУзел - ПланОбменаСсылка - узел, который будет исключен из проверки
//
// Возвращаемое значение:
//		Булево - Истина, если в узлах РИБ отборы используются, иначе Ложь.
//
Функция ИспользуютсяУзлыРИБСОтборомПоПодразделениям(ИсключаемыйУзел = Неопределено) Экспорт
	Возврат СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.ИспользуютсяУзлыРИБСОтборомПоПодразделениям(ИсключаемыйУзел);
КонецФункции

// Проверяет используются или нет в узлах РИБ отборы по организациям
//
// Параметры:
//		ИсключаемыйУзел - ПланОбменаСсылка - узел, который будет исключен из проверки
//
// Возвращаемое значение:
//		Булево - Истина, если в узлах РИБ отборы используются, иначе Ложь.
//
Функция ИспользуютсяУзлыРИБСОтборомПоОрганизациям(ИсключаемыйУзел = Неопределено) Экспорт
	Возврат СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.ИспользуютсяУзлыРИБСОтборомПоОрганизациям(ИсключаемыйУзел);
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбменДанными

// См. ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена
Процедура ПолучитьПланыОбмена(ПланыОбменаПодсистемы) Экспорт
	
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "АвтономнаяРабота");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "ОбменВРаспределеннойИнформационнойБазе");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "ОбменЗарплата3Бухгалтерия3");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "ОбменЗГУБГУ1");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "ОбменЗГУБГУ2");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "СинхронизацияДанныхЧерезУниверсальныйФормат");
	
КонецПроцедуры

// См. ОбменДаннымиПереопределяемый.РегистрацияИзмененийНачальнойВыгрузкиДанных
Процедура РегистрацияИзмененийНачальнойВыгрузкиДанных(Знач Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиЗарплата3Бухгалтерия3");
		Модуль.ОбработкаРегистрацииНачальнойВыгрузкиДанных(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗГУБГУ1") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменЗГУБГУ1");
		Модуль.ОбработкаРегистрацииНачальнойВыгрузкиДанных(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗГУБГУ2") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменЗГУБГУ2");
		Модуль.ОбработкаРегистрацииНачальнойВыгрузкиДанных(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;
	
КонецПроцедуры


// См. ОбменДаннымиПереопределяемый.ПриНастройкеПодчиненногоУзлаРИБ()
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	ИмяПланаОбмена = ГлавныйУзел.Метаданные().Имя;
	
	Если ИмяПланаОбмена = Метаданные.ПланыОбмена.АвтономнаяРабота.Имя Тогда
		ПланыОбмена.АвтономнаяРабота.ВыполнитьНастройкуГлавногоУзла(ГлавныйУзел);
	КонецЕсли;
	
	ЭтотУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	Если ЭтотУзел.НомерПринятого = 0 И ЭтотУзел.НомерОтправленного = 0
		И ГлавныйУзел <> Неопределено Тогда
		СинхронизацияДанныхЗарплатаКадрыИнтеграцияПодсистем.ЗаполнитьЗависимыеДанныеПослеСозданияНовогоУзлаРИБ();
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбменДанными

// Процедура-обработчик события "ПередЗаписью" для объектов,
// которые изменяют организацию или структурное подразделение физического лица.
//
// Параметры:
//  Источник - Объект - изменяемый объект.
//
Процедура ПринадлежностьФизлицаПередЗаписью(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() И Не ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Источник.Метаданные().ПолноеИмя());
	ПрежниеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, МенеджерОбъекта.ПринадлежностиОбъекта());
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Организации") Тогда
		Если Не ЗначениеЗаполнено(Источник.ИндивидуальныйПредприниматель) Тогда
			Возврат;
		Иначе
			ПрежниеЗначения.Вставить("ФизическиеЛица", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.ИндивидуальныйПредприниматель));
		КонецЕсли;
	Иначе
		СоставОбъекта = ЗарплатаКадрыСоставДокументов.СоставОбъектаПоСсылке(Источник.Ссылка);
		ПрежниеЗначения.Вставить("ФизическиеЛица", СоставОбъекта.ФизическиеЛица);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПрежниеЗначенияПринадлежностьФизическихЛиц", ПрежниеЗначения);
	
КонецПроцедуры

// Процедура-обработчик события "ПриЗаписи" для объектов, которые изменяют организацию физического лица.
//
// Параметры:
//  Источник - Объект - изменяемый объект.
//
Процедура ПринадлежностьФизлицаОрганизацииПриЗаписи(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Организации") Тогда
		Если Не ЗначениеЗаполнено(Источник.ИндивидуальныйПредприниматель) Тогда
			Возврат;
		Иначе
			// Связь индивидуального предпринимателя и организации
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Источник.Метаданные().ПолноеИмя());
			МассивРеквизитовПринадлежности = МенеджерОбъекта.ПринадлежностиОбъекта();
			
			МассивПринадлежностей = Новый Массив;
			Для Каждого ИмяРеквизитаОбъекта Из МассивРеквизитовПринадлежности Цикл
				МассивПринадлежностей.Добавить(Источник[ИмяРеквизитаОбъекта]);
			КонецЦикла;
			
			ДанныеОбъекта = Новый Структура;
			ДанныеОбъекта.Вставить("МассивПринадлежностей", МассивПринадлежностей);
			ДанныеОбъекта.Вставить("МассивФизическихЛиц", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.ИндивидуальныйПредприниматель));
			ДанныеОбъекта.Вставить("МассивСотрудников", Новый Массив);
			ДанныеОбъекта.Вставить("МассивРеквизитовПринадлежности", МассивРеквизитовПринадлежности);
			
		КонецЕсли;
	Иначе
		ДанныеОбъекта = ДанныеОбъекта(Источник);
	КонецЕсли;
	
	ЗарегистрироватьПринадлежностьФизическихЛиц(ДанныеОбъекта.МассивПринадлежностей, 
		ДанныеОбъекта.МассивФизическихЛиц, Метаданные.РегистрыСведений.ОрганизацииФизическихЛиц, "Организация");
	ЗарегистрироватьУтраченныхФизическихЛицПриЗаписи(
		Источник, ДанныеОбъекта, Метаданные.РегистрыСведений.ОрганизацииФизическихЛицУтраченные, "Организация");
	
КонецПроцедуры

// Процедура-обработчик события "ПриЗаписи" для объектов,
// которые изменяют структурное подразделение физического лица.
//
// Параметры:
//  Источник - Объект - изменяемый объект.
//
Процедура ПринадлежностьФизлицаПодразделениюПриЗаписи(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Или ТипЗнч(Источник) = Тип("СправочникОбъект.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = ДанныеОбъекта(Источник);
	ЗарегистрироватьПринадлежностьФизическихЛиц(
		ДанныеОбъекта.МассивПринадлежностей, ДанныеОбъекта.МассивФизическихЛиц, Метаданные.РегистрыСведений.ПодразделенияФизическихЛиц, "Подразделение");
	ЗарегистрироватьУтраченныхФизическихЛицПриЗаписи(Источник, ДанныеОбъекта, Метаданные.РегистрыСведений.ПодразделенияФизическихЛицУтраченные, "Подразделение");
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" для объектов, которые изменяют организацию сотрудников
//
// Параметры:
//  Источник - Объект - изменяемый объект.
//
Процедура ОрганизацииСотрудниковПередЗаписью(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() И Не ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Источник.Метаданные().ПолноеИмя());
	ПрежниеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, МенеджерОбъекта.ПринадлежностиОбъекта());
	
	СоставОбъекта = ЗарплатаКадрыСоставДокументов.СоставОбъектаПоСсылке(Источник.Ссылка);
	ПрежниеЗначения.Вставить("Сотрудники", СоставОбъекта.СотрудникиФизическиеЛица.ВыгрузитьКолонку("Сотрудник"));
	
	Источник.ДополнительныеСвойства.Вставить("ПрежниеЗначенияСотрудников", ПрежниеЗначения);
	
КонецПроцедуры

// Процедура-обработчик события "ПриЗаписи" для объектов, которые изменяют организацию сотрудников
//
// Параметры:
//  Источник - Объект - изменяемый объект.
//
Процедура ОрганизацииСотрудниковПриЗаписи(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = ДанныеОбъекта(Источник);
	ЗарегистрироватьОрганизацииСотрудников(ДанныеОбъекта.МассивПринадлежностей, ДанныеОбъекта.МассивСотрудников);
	ЗарегистрироватьУтраченныхСотрудниковПриЗаписи(Источник, ДанныеОбъекта, Метаданные.РегистрыСведений.ОрганизацииСотрудниковУтраченные, "Организация");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.МигрирующиеОбъектыРИБ);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.МигрирующиеОбъектыРИБ, "ОбъектыРегламентированногоУчета");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.МигрирующиеОбъектыРИБ, "ОбъектыУправленческогоУчета");
	Вариант.Включен = Ложь;
	
КонецПроцедуры

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(ПланыОбмена.АвтономнаяРабота);
	СписокОбъектов.Добавить(ПланыОбмена.ОбменВРаспределеннойИнформационнойБазе);
	
КонецПроцедуры

Процедура ДобавитьПараметрОтправитель(Объект, ПараметрыЗапроса)
	
	Отправитель = Неопределено;
	Если Объект.ОбменДанными.Загрузка Тогда
		// Если это загрузка объекта, то исключим Отправителя из Получателей, чтобы не было зацикливания
		Отправитель = Объект.ОбменДанными.Отправитель;
	КонецЕсли;
	Если Объект.ДополнительныеСвойства.Свойство("Загрузка") И Объект.ДополнительныеСвойства.Загрузка Тогда
		// Если это загрузка объекта, то исключим Отправителя из Получателей, чтобы не было зацикливания
		Отправитель = Объект.ДополнительныеСвойства.Отправитель;
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("Отправитель") Тогда
		ПараметрыЗапроса.Вставить("Отправитель", Отправитель);
	КонецЕсли;
	
КонецПроцедуры

// Позволяет произвести дополнительные действия с объектом при загрузке из файла обмена РИБ.
// Например, переопределить значения некоторых реквизитов.
// 
// Параметры:
//  ПланОбменаОбъект - ПланОбменаОбъект.ОбменВРаспределеннойИнформационнойБазе
//  Объект - загружаемый объект
//
Процедура ПриПолученииДанныхФайла(ПланОбменаОбъект, Объект) Экспорт
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанныхЗарплатаКадрыВзаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыВзаимодействия");
		МодульВзаимодействия.ПриПолученииДанныхФайла(ПланОбменаОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	Справочники.Организации.ПриПолученииДанныхФайла(Объект);
	
КонецПроцедуры

Функция ИспользуетсяСтруктураПредприятия() Экспорт
	
	ИспользуетсяСтруктураПредприятия = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		ИспользуетсяСтруктураПредприятия = Не МодульОрганизационнаяСтруктура.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц();
	КонецЕсли;
	
	Возврат ИспользуетсяСтруктураПредприятия;
	
КонецФункции

#Область ШаблоныПравилРегистрации

// АПК:299-выкл шаблоны используются в правилах регистрации.
// АПК:134-выкл запланирован рефакторинг.

Процедура ОпределитьМассивыУзловДляНабораЗаписейПоРегистрацииОбъектаВладельца(ИмяПланаОбмена, НаборЗаписей, Отказ, ПРО, Выгрузка, Получатели, ИмяКолонкиОбъектаВладелец) Экспорт
	
	Получатели.Очистить();
	
	Если Не ИспользуютсяУзлыРИБСОтбором() Тогда
		
		УзлыБезОтбораПоОрганизации = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.УзлыБезОтбораПоОрганизации(ИмяПланаОбмена);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, УзлыБезОтбораПоОрганизации, Истина);
		
		УзлыБезОтбораПоПодразделениям = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.УзлыБезОтбораПоПодразделениям(ИмяПланаОбмена);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, УзлыБезОтбораПоПодразделениям, Истина);
		
		Возврат;
		
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("РегистрацияПриЗаписиПолучатели") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, НаборЗаписей.ДополнительныеСвойства.РегистрацияПриЗаписиПолучатели, Истина);
	Иначе
		Если НаборЗаписей.Отбор.Найти(ИмяКолонкиОбъектаВладелец) <> Неопределено И ЗначениеЗаполнено(НаборЗаписей.Отбор[ИмяКолонкиОбъектаВладелец].Значение) Тогда
			ВладелецСсылка = НаборЗаписей.Отбор[ИмяКолонкиОбъектаВладелец].Значение;
			Получатели = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.ОпределитьПолучателейПоВладельцу(
			ВладелецСсылка, ИмяПланаОбмена, Отказ, НаборЗаписей.ОбменДанными.Загрузка, Выгрузка, НаборЗаписей.ОбменДанными.Отправитель);
		Иначе
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				ПолучателиЗаписи = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.ОпределитьПолучателейПоВладельцу(
					ЗаписьНабора[ИмяКолонкиОбъектаВладелец], ИмяПланаОбмена, Отказ, НаборЗаписей.ОбменДанными.Загрузка, Выгрузка, НаборЗаписей.ОбменДанными.Отправитель);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, ПолучателиЗаписи, Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИсключитьЗагружаемыйУзел(Получатели, НаборЗаписей);
	ИсключитьПолучателейНеСоответствующиеОтбору(Получатели, НаборЗаписей.Метаданные().ПолноеИмя());
	
КонецПроцедуры

Процедура ОграничитьРегистрациюНабораОтборомПоГоловнойОрганизации(ИмяПланаОбмена, НаборЗаписейОбъект, Выгрузка, Отказ, Получатели) Экспорт
	
	Если Не ИспользуютсяУзлыРИБСОтбором() Тогда
		
		УзлыБезОтбораПоОрганизации = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.УзлыБезОтбораПоОрганизации(ИмяПланаОбмена);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, УзлыБезОтбораПоОрганизации, Истина);
		
		УзлыБезОтбораПоПодразделениям = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.УзлыБезОтбораПоПодразделениям(ИмяПланаОбмена);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, УзлыБезОтбораПоПодразделениям, Истина);
		
		Возврат;
		
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданных = НаборЗаписейОбъект.Метаданные().ПолноеИмя();
	Если НаборЗаписейОбъект.Количество() = 0 Тогда
		
		// Если НаборЗаписей пустой, то нужно получить Получателей по записям регистра с тем же отбором
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
		
		НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
		Для Каждого ЭлементОтбора Из НаборЗаписейОбъект.Отбор Цикл
			НаборЗаписей.Отбор[ЭлементОтбора.Имя].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		НаборЗаписей.Прочитать();
		
	Иначе
		НаборЗаписей = НаборЗаписейОбъект;
	КонецЕсли;
	
	Если Выгрузка Тогда
		// Выгрузка.
		ЗаполнитьПолучателейНабораЗаписейПриВыгрузке(НаборЗаписей, Получатели, ИмяПланаОбмена, Отказ);
	Иначе
		// Регистрация.
		ЗаполнитьПолучателейНабораЗаписейПриРегистрации(НаборЗаписей, Получатели, ИмяПланаОбмена, Отказ);
	КонецЕсли;
	
	ИсключитьЗагружаемыйУзел(Получатели, НаборЗаписейОбъект);
	ИсключитьПолучателейНеСоответствующиеОтбору(Получатели, ПолноеИмяОбъектаМетаданных);
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений подчиненного объекта для получения списка узлов-получателей, как у
// объекта владельца.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана обмена,
//      для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта
//  ОбъектВладелец - Объект, узлы-получатели которого будут использоваться для регистрации изменений подчиненного объекта.
//
Процедура ОграничитьРегистрациюПодчиненногоОбъектаПоРегистрацииОбъектаВладельца(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, Объект, ОбъектВладелец) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектВладелец) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользуютсяУзлыРИБСОтбором() Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьКэш = Ложь;
	
	ПолучателиОбъектаВладельца = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.ОпределитьПолучателейПоВладельцу(
		ОбъектВладелец.Ссылка, ИмяПланаОбмена, Отказ, Объект.ОбменДанными.Загрузка, Выгрузка, Объект.ОбменДанными.Отправитель);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИсключитьЗагружаемыйУзел(ПолучателиОбъектаВладельца, Объект);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъектаВладельца)
	|	И ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	
	ИзменитьТекстЗапросаПоЗначениямМассива(
		ПолучателиОбъектаВладельца,
		ТекстЗапроса,
		ПараметрыЗапроса,
		"ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъектаВладельца)",
		"ПланОбменаОсновнаяТаблица.Ссылка",
		"ПолучателиОбъектаВладельца");
	
	ПолучателиОбъекта = ПолучателиОбъекта(ИмяПланаОбмена, Объект.Метаданные().ПолноеИмя());
	ИзменитьТекстЗапросаПоЗначениямМассива(
		ПолучателиОбъекта,
		ТекстЗапроса,
		ПараметрыЗапроса,
		"ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)",
		"ПланОбменаОсновнаяТаблица.Ссылка",
		"ПолучателиОбъекта");
	
КонецПроцедуры

Процедура ИзменитьТекстЗапросаПоЗначениямМассива(МассивЗначений, ТекстЗапроса, ПараметрыЗапроса, СтрокаЗамены, ЗначениеЗамены, ИмяПараметра) Экспорт
	
	НомерПоказателя = 0;
	ТекстЗамены = "";
	Для Каждого ЗначениеМассива Из МассивЗначений Цикл
		
		НомерПоказателя = НомерПоказателя + 1;
		Если Не ПустаяСтрока(ТекстЗамены) Тогда
			ТекстЗамены = ТекстЗамены + " ИЛИ ";
		КонецЕсли;
		ТекстЗамены = ТекстЗамены + ЗначениеЗамены + " = &СвойствоОбъекта_" + ИмяПараметра + Строка(НомерПоказателя);
		
		ПараметрыЗапроса.Вставить(ИмяПараметра + Строка(НомерПоказателя), ЗначениеМассива);
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗамены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаЗамены, "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаЗамены, "(" + ТекстЗамены + ")");
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует изменения для регистров сведений, в которых объект присутствует в ведущем измерении.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана обмена,
//      для которого создано это правило.
//  СсылкаНаОбъект - Ссылка на объект, который может содержать присоединенные файлы.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта
//  Получатели - Массив - список узлов-получателей, на которых будут зарегистрированы изменения для присоединенных файлов.
//
Процедура ЗарегистрироватьСвязанныеРегистрыСведенийОбъекта(ИмяПланаОбмена, Отказ, СсылкаНаОбъект, Выгрузка, Получатели) Экспорт
	
	Если Выгрузка Или Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныеРегистрыСведенийОбъекта = СвязанныеРегистрыСведенийОбъекта(ИмяПланаОбмена, СсылкаНаОбъект);
	Для Каждого СвязанныеДанные Из СвязанныеРегистрыСведенийОбъекта Цикл
		МетаданныеРС = Метаданные.РегистрыСведений[СвязанныеДанные.Ключ];
		ИзмеренияРС = МетаданныеРС.Измерения;
		
		НаборЗаписей = РегистрыСведений[СвязанныеДанные.Ключ].СоздатьНаборЗаписей();
		Выборка = СвязанныеДанные.Значение.Выбрать();
		Пока Выборка.Следующий() Цикл
			Для каждого ИзмерениеРС Из ИзмеренияРС Цикл
				Если ИзмерениеРС.ОсновнойОтбор Тогда
					НаборЗаписей.Отбор[ИзмерениеРС.Имя].Установить(Выборка[ИзмерениеРС.Имя]);
				КонецЕсли;
			КонецЦикла;
			Если МетаданныеРС.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(Получатели, НаборЗаписей);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// АПК:299-вкл.

// Заменяет текст запроса регистрации изменений объекта для получения списка узлов-получателей по организации
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана обмена,
//      для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта
//  Организации - Ссылка или массив ссылок на организации, по которым нужно получить список узлов-получателей
//
Процедура ОграничитьРегистрациюОбъектаОтборомПоОрганизациям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, Организации) Экспорт
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		ИспользоватьКэш = Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Организации", Организации);
	ДобавитьПараметрОтправитель(Объект, ПараметрыЗапроса);
	
	СтандартнаяОбработка = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.ОграничитьРегистрациюОбъектаПоУправленческойОрганизации(ИмяПланаОбмена, ТекстЗапроса, Организации, СтандартнаяОбработка);
	КонецЕсли;
	Если Не СтандартнаяОбработка Тогда
		
		ПолучателиОбъекта = ПолучателиОбъекта(ИмяПланаОбмена, Объект.Метаданные().ПолноеИмя());
		ИзменитьТекстЗапросаПоЗначениямМассива(
			ПолучателиОбъекта,
			ТекстЗапроса,
			ПараметрыЗапроса,
			"ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)",
			"ПланОбменаОсновнаяТаблица.Ссылка",
			"ПолучателиОбъекта");
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
	|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &СвойствоОбъекта_Отправитель
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоОрганизациям)
	|			И МАКСИМУМ(ВЫБОР
	|					КОГДА ПланОбменаОрганизации.Организация В (&СвойствоОбъекта_Организации)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) = ИСТИНА
	|		ИЛИ КОЛИЧЕСТВО(ПланОбменаОрганизации.Организация) = 0)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаОрганизации", "ПланОбмена." + ИмяПланаОбмена + ".Организации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел", "&" + ИмяПланаОбмена + "ЭтотУзел");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
	ПолучателиОбъекта = ПолучателиОбъекта(ИмяПланаОбмена, Объект.Метаданные().ПолноеИмя());
	ИзменитьТекстЗапросаПоЗначениямМассива(
		ПолучателиОбъекта,
		ТекстЗапроса,
		ПараметрыЗапроса,
		"ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)",
		"ПланОбменаОсновнаяТаблица.Ссылка",
		"ПолучателиОбъекта");
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений объекта для получения списка узлов-получателей по головной организации и
// всех ее филиалов
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана обмена,
//      для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта
//  ГоловныеОрганизации - Ссылка или массив ссылок на головные организации, по которым нужно получить список узлов-получателей
//
Процедура ОграничитьРегистрациюОбъектаОтборомПоГоловнымОрганизациям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, ГоловныеОрганизации) Экспорт
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	Если ТипЗнч(ГоловныеОрганизации) = Тип("СправочникСсылка.Организации") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОрганизаций, ПодчиненныеОрганизации(ГоловныеОрганизации));
	Иначе
		Для каждого ГоловнаяОрганизация Из ГоловныеОрганизации Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОрганизаций, ПодчиненныеОрганизации(ГоловнаяОрганизация));
		КонецЦикла;
	КонецЕсли;
	
	ОграничитьРегистрациюОбъектаОтборомПоОрганизациям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, МассивОрганизаций);
	
КонецПроцедуры

Процедура ОграничитьРегистрациюОбъектаОтборомПоСотруднику(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, Сотрудник) Экспорт
	
	ПараметрыЗапроса.Вставить("Сотрудник", Сотрудник.Ссылка);
	ДобавитьПараметрОтправитель(Объект, ПараметрыЗапроса);
	
	Если ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		
		Если ТипЗнч(Сотрудник) = Тип("СправочникОбъект.Сотрудники") И Сотрудник.ЭтоНовый() Тогда
			
			ОграничитьРегистрациюОбъектаОтборомПоОрганизациям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, Сотрудник.ГоловнаяОрганизация);
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
			|ИЗ
			|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
			|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииСотрудников КАК ОрганизацииСотрудников
			|		ПО (ПланОбменаОрганизации.Организация = ОрганизацииСотрудников.Организация)
			|		И (ОрганизацииСотрудников.Сотрудник = &СвойствоОбъекта_Сотрудник)
			|ГДЕ
			|	ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)
			|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
			|	И ПланОбменаОсновнаяТаблица.Ссылка <> &СвойствоОбъекта_Отправитель
			|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
			|	И &УсловиеОтбораПоРеквизитуФлагу
			|СГРУППИРОВАТЬ ПО
			|	ПланОбменаОсновнаяТаблица.Ссылка
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоОрганизациям)
			|	И МАКСИМУМ(ВЫБОР
			|		КОГДА ОрганизацииСотрудников.Организация ЕСТЬ НЕ NULL
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ) = ИСТИНА";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаОрганизации", "ПланОбмена." + ИмяПланаОбмена + ".Организации");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел", "&"+ ИмяПланаОбмена + "ЭтотУзел");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ДополнитьОграничениеРегистрацииОбъектаОтборомПоСотруднику(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, Сотрудник);
	КонецЕсли;
	
	Если ИспользуютсяУзлыРИБСОтбором() Тогда
		ПолучателиОбъекта = ПолучателиОбъекта(ИмяПланаОбмена, Объект.Метаданные().ПолноеИмя());
		ИзменитьТекстЗапросаПоЗначениямМассива(
			ПолучателиОбъекта,
			ТекстЗапроса,
			ПараметрыЗапроса,
			"ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)",
			"ПланОбменаОсновнаяТаблица.Ссылка",
			"ПолучателиОбъекта");
	КонецЕсли;
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений физических лиц для получения списка узлов-получателей по организациям,
// в которых установлены трудовые отношения по этим физическим лицам.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена.
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана
//      обмена, для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта.
//  ФизическиеЛица - Ссылка или массив ссылок физических лиц, по которым нужно получить список узлов-получателей.
//  ДополнительныеПараметрыПолученияСотрудников - Структура параметров, которые будут использоваться для получения
//                                                списка сотрудников физического лица.
//
Процедура ОграничитьРегистрациюОбъектаОтборомПоФизическимЛицам(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, ФизическоеЛицо) Экспорт
	
	ПараметрыЗапроса.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	ДобавитьПараметрОтправитель(Объект, ПараметрыЗапроса);
	
	Если ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
		|ИЗ
		|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
		|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииФизическихЛиц КАК ОрганизацииФизическихЛиц
		|		ПО (ПланОбменаОрганизации.Организация = ОрганизацииФизическихЛиц.Организация)
		|			И (ОрганизацииФизическихЛиц.ФизическоеЛицо = &СвойствоОбъекта_ФизическоеЛицо)
		|ГДЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)
		|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
		|	И ПланОбменаОсновнаяТаблица.Ссылка <> &СвойствоОбъекта_Отправитель
		|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
		|	И &УсловиеОтбораПоРеквизитуФлагу
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланОбменаОсновнаяТаблица.Ссылка
		|
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(ПланОбменаОсновнаяТаблица.СинхронизироватьДанныеПоОрганизациям)
		|			И МАКСИМУМ(ВЫБОР
		|					КОГДА ОрганизацииФизическихЛиц.Организация ЕСТЬ НЕ NULL 
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) = ИСТИНА
		|		ИЛИ КОЛИЧЕСТВО(ПланОбменаОрганизации.Организация) = 0)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаОрганизации", "ПланОбмена."+ ИмяПланаОбмена + ".Организации");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена."  + ИмяПланаОбмена);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел", "&" + ИмяПланаОбмена + "ЭтотУзел");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ДополнитьОграничениеРегистрацииОбъектаОтборомПоФизическимЛицам(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Объект, ФизическоеЛицо);
	КонецЕсли;
	
	Если ИспользуютсяУзлыРИБСОтбором() Тогда
		ПолучателиОбъекта = ПолучателиОбъекта(ИмяПланаОбмена, Объект.Метаданные().ПолноеИмя());
		ИзменитьТекстЗапросаПоЗначениямМассива(
			ПолучателиОбъекта,
			ТекстЗапроса,
			ПараметрыЗапроса,
			"ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)",
			"ПланОбменаОсновнаяТаблица.Ссылка",
			"ПолучателиОбъекта");
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует изменения для связанных с объектом присоединенных файлов и регистров сведений.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана обмена,
//      для которого создано это правило.
//  СсылкаНаОбъект - Ссылка на объект, который может содержать присоединенные файлы.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта
//  Получатели - Массив - список узлов-получателей, на которых будут зарегистрированы изменения для присоединенных файлов.
//
Процедура ЗарегистрироватьСвязанныеПрисоединенныеФайлыИРегистрыСведенийОбъекта(ИмяПланаОбмена, Отказ, СсылкаНаОбъект, Выгрузка, Получатели) Экспорт
	
	ИсключитьПолучателейНеСоответствующиеОтбору(Получатели, СсылкаНаОбъект.Метаданные().ПолноеИмя());
	
	Если Отказ Или Выгрузка Или Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.ПрисоединенныеФайлыКОбъекту(СсылкаНаОбъект);
	
	Для Каждого Элемент Из МассивФайлов Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Элемент.ПолучитьОбъект());
	КонецЦикла;
	
КонецПроцедуры

// АПК:134-вкл.

#КонецОбласти

#Область ФизическиеЛица

// Определяет производится ли заполнение принадлежности физических лиц к указанным организациям
//
// Возвращаемое значение:
//		Булево - Истина, если производится заполнение принадлежности физических лиц по организациям, иначе Ложь.
//
Функция ОрганизацииФизическихЛицЗаполняются() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОрганизацийФизическихЛиц.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится
	|ИЗ
	|	РегистрСведений.НастройкиОрганизацийФизическихЛиц КАК НастройкиОрганизацийФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаполнениеПроизводится;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет производится ли заполнение принадлежности физических лиц к указанным структурным подразделениям
//
// Возвращаемое значение:
//		Булево - Истина, если производится заполнение принадлежности физических лиц по структурным подразделениям, иначе Ложь.
//
Функция ПодразделенияФизическихЛицЗаполняются() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПодразделенийФизическихЛиц.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится
	|ИЗ
	|	РегистрСведений.НастройкиПодразделенийФизическихЛиц КАК НастройкиПодразделенийФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаполнениеПроизводится;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Запускает фоновые задания для заполнения принадлежности физических лиц к организациям и структурным подразделениям
//
// Параметры:
//		Источник - Объект, который был изменен, после изменения которого требуется пересчет принадлежности физических лиц
//
Процедура ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(Источник, ЗапуститьВФоне = Истина) Экспорт
	
	УникальныйИдентификаторИсточника = Источник.Ссылка.УникальныйИдентификатор();
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторИсточника);
	Если Не ЗапуститьВФоне Тогда
		ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
		ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	КонецЕсли;
	
	// Полное заполнение (Организация пустая ссылка)
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьПринадлежностьФизическихЛицОрганизаций")
		И Источник.ДополнительныеСвойства.ЗарегистрироватьПринадлежностьФизическихЛицОрганизаций Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление принадлежности физических лиц к организациям.'");
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ЗарегистрироватьУтраченныхФизическихЛицОрганизаций", 
			Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьУтраченныхФизическихЛицОрганизаций")
			И Источник.ДополнительныеСвойства.ЗарегистрироватьУтраченныхФизическихЛицОрганизаций);
			
		ДлительныеОперации.ВыполнитьВФоне("СинхронизацияДанныхЗарплатаКадрыСервер.ЗарегистрироватьПринадлежностьФизическихЛицОрганизаций", ПараметрыПроцедуры, ПараметрыВыполнения);
		
	КонецЕсли;
	
	// Полное заполнение (Подразделение пустая ссылка)
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьПринадлежностьФизическихЛицПодразделений")
		И Источник.ДополнительныеСвойства.ЗарегистрироватьПринадлежностьФизическихЛицПодразделений Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление принадлежности физических лиц к структурным подразделениям.'");
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ЗарегистрироватьУтраченныхФизическихЛицПодразделений", 
			Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьУтраченныхФизическихЛицПодразделений")
			И Источник.ДополнительныеСвойства.ЗарегистрироватьУтраченныхФизическихЛицПодразделений);
			
		ДлительныеОперации.ВыполнитьВФоне("СинхронизацияДанныхЗарплатаКадрыСервер.ЗарегистрироватьПринадлежностьФизическихЛицПодразделений", ПараметрыПроцедуры, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОрганизацииФизическихЛицУтраченные")
		И Источник.ДополнительныеСвойства.ЗарегистрироватьОрганизацииФизическихЛицУтраченные Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление принадлежности физических лиц к организациям.'");
		ДлительныеОперации.ВыполнитьВФоне("СинхронизацияДанныхЗарплатаКадрыСервер.ЗарегистрироватьОрганизацииФизическихЛицУтраченные", Новый Структура, ПараметрыВыполнения);
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьПодразделенияФизическихЛицУтраченные")
		И Источник.ДополнительныеСвойства.ЗарегистрироватьПодразделенияФизическихЛицУтраченные Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление принадлежности физических лиц к структурным подразделениям.'");
		ДлительныеОперации.ВыполнитьВФоне("СинхронизацияДанныхЗарплатаКадрыСервер.ЗарегистрироватьПодразделенияФизическихЛицУтраченные", Новый Структура, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует принадлежность всех физических лиц к организациям
//
Процедура ЗарегистрироватьПринадлежностьФизическихЛицОрганизаций(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыОбновления, "ЗарегистрироватьУтраченныхФизическихЛицОрганизаций", Ложь) Тогда
		ЗарегистрироватьУтраченныхФизическихЛицОрганизаций();
	КонецЕсли;
	
	Продолжать = Истина;
	ВсегоПопыток = ЧислоПопытокОбработкиДанных();
	ОсталосьПопыток = ВсегоПопыток;
	Пока Продолжать И ОсталосьПопыток > 0 Цикл
		Попытка
			ОбновитьПринадлежностьФизическихЛицОрганизаций(Продолжать);
			ОсталосьПопыток = ВсегоПопыток;
		Исключение
			ОсталосьПопыток = ОсталосьПопыток - 1;
		КонецПопытки;
	КонецЦикла;
	Если ОсталосьПопыток = 0 Тогда
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Обмен данными.Регистрация организаций физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка())), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			НСтр("ru = 'Превышено допустимое количество попыток выполнения процедуры ОбновитьПринадлежностьФизическихЛицОрганизаций'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ЗарегистрироватьЗавершенияЗаполненияНастройкиОрганизацийФизическихЛиц();
	
КонецПроцедуры

// Регистрирует принадлежность всех физических лиц к структурным подразделениям
//
Процедура ЗарегистрироватьПринадлежностьФизическихЛицПодразделений(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыОбновления, "ЗарегистрироватьУтраченныхФизическихЛицПодразделений", Ложь) Тогда
		ЗарегистрироватьУтраченныхФизическихЛицПодразделений();
	КонецЕсли;
	
	Продолжать = Истина;
	ВсегоПопыток = ЧислоПопытокОбработкиДанных();
	ОсталосьПопыток = ВсегоПопыток;
	Пока Продолжать И ОсталосьПопыток > 0 Цикл
		Попытка
			ОбновитьПринадлежностьФизическихЛицПодразделений(Продолжать);
			ОсталосьПопыток = ВсегоПопыток;
		Исключение
			ОсталосьПопыток = ОсталосьПопыток - 1;
		КонецПопытки;
	КонецЦикла;
	Если ОсталосьПопыток = 0 Тогда
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Обмен данными.Регистрация подразделений физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка())), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			НСтр("ru = 'Превышено допустимое количество попыток выполнения процедуры ОбновитьПринадлежностьФизическихЛицПодразделений'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ЗарегистрироватьЗавершенияЗаполненияНастройкиПодразделенийФизическихЛиц();
	
КонецПроцедуры

Процедура ЗарегистрироватьПринадлежностьФизическихЛиц(МассивПринадлежностей, МассивФизическихЛиц, МетаданныеРегистра, ИмяПринадлежности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(МетаданныеРегистра.ПолноеИмя());
	ЭлементБлокировки.ИсточникДанных = ТаблицаИзМассивов(
		ОписаниеКолонки("ФизическоеЛицо", МассивФизическихЛиц, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")),
		ОписаниеКолонки(ИмяПринадлежности, МассивПринадлежностей, ОписаниеТипаПринадлежности(ИмяПринадлежности)));
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ИмяПринадлежности, ИмяПринадлежности);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПринадлежностей", МассивПринадлежностей);
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПринадлежностьФизическихЛиц.Организация КАК Принадлежность,
		|	ПринадлежностьФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ОрганизацииФизическихЛиц КАК ПринадлежностьФизическихЛиц
		|ГДЕ
		|	ПринадлежностьФизическихЛиц.ФизическоеЛицо В(&МассивФизическихЛиц)
		|	И ПринадлежностьФизическихЛиц.Организация В(&МассивПринадлежностей)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОрганизацииФизическихЛиц", МетаданныеРегистра.Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация", ИмяПринадлежности);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СуществующиеСвязи = Запрос.Выполнить().Выгрузить();
		СуществующиеСвязи.Индексы.Добавить("ФизическоеЛицо, Принадлежность");
		Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
			Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Принадлежность Из МассивПринадлежностей Цикл
				Если Не ЗначениеЗаполнено(Принадлежность) 
					Или Не ОписаниеТипаПринадлежности(ИмяПринадлежности).СодержитТип(ТипЗнч(Принадлежность)) Тогда
					Продолжить;
				КонецЕсли;
				НайденныеСвязи = СуществующиеСвязи.НайтиСтроки(
					Новый Структура("ФизическоеЛицо, Принадлежность", ФизическоеЛицо, Принадлежность));
				Если НайденныеСвязи.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				// Установим связь физического лица.
				НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
				НаборЗаписей.Отбор[ИмяПринадлежности].Установить(Принадлежность);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись[ИмяПринадлежности] = Принадлежность;
				Если ТипЗнч(Принадлежность) = Тип("СправочникСсылка.Организации") Тогда
					НоваяЗапись.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Принадлежность);
				КонецЕсли;
				НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Принадлежность физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьУтраченныхФизическихЛиц(МассивПринадлежностей, МассивФизическихЛиц, МетаданныеРегистра, ИмяПринадлежности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(МетаданныеРегистра.ПолноеИмя());
	ЭлементБлокировки.ИсточникДанных = ТаблицаИзМассивов(
		ОписаниеКолонки("ФизическоеЛицо", МассивФизическихЛиц, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")),
		ОписаниеКолонки(ИмяПринадлежности, МассивПринадлежностей, ОписаниеТипаПринадлежности(ИмяПринадлежности)));
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ИмяПринадлежности, ИмяПринадлежности);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
			Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Принадлежность Из МассивПринадлежностей Цикл
				Если Не ЗначениеЗаполнено(Принадлежность)
					Или Не ОписаниеТипаПринадлежности(ИмяПринадлежности).СодержитТип(ТипЗнч(Принадлежность)) Тогда
					Продолжить;
				КонецЕсли;
				// Установим утраченную связь физического лица.
				НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
				НаборЗаписей.Отбор[ИмяПринадлежности].Установить(Принадлежность);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись[ИмяПринадлежности] = Принадлежность;
				НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Утраченные принадлежности физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция МетаданныеРегистраСведенийПодразделенийФизическихЛиц() Экспорт
	Возврат Метаданные.РегистрыСведений.ПодразделенияФизическихЛиц;
КонецФункции

Функция МетаданныеРегистраСведенийУтраченныхПодразделенийФизическихЛиц() Экспорт
	Возврат Метаданные.РегистрыСведений.ПодразделенияФизическихЛицУтраченные;
КонецФункции

// Определяет произведено ли заполнение принадлежности физических лиц к указанным структурным подразделениям
//
// Возвращаемое значение:
//		Булево - Истина, если принадлежности физических лиц по структурным подразделениям заполнены, иначе Ложь.
//
Функция ПринадлежностьФизическихЛицПоПодразделениямЗаполнена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиПодразделенийФизическихЛиц.ЗаполнениеПроизведено), ЛОЖЬ) КАК ЗаполнениеПроизведено
	|ИЗ
	|	РегистрСведений.НастройкиПодразделенийФизическихЛиц КАК НастройкиПодразделенийФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаполнениеПроизведено;
	КонецЕсли;
	
	// Если нет записей в регистре, то считаем, что заполнение связей физических лиц не требуется 
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Сотрудники

// Определяет производится ли заполнение организаций по сотрудникам
//
// Возвращаемое значение:
//		Булево - Истина, если производится заполнение организаций по сотрудникам, иначе Ложь.
//
Функция ОрганизацииСотрудниковЗаполняются() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОрганизацийСотрудников.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится
	|ИЗ
	|	РегистрСведений.НастройкиОрганизацийСотрудников КАК НастройкиОрганизацийСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаполнениеПроизводится;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет производится ли заполнение структурных подразделений по сотрудникам
//
// Возвращаемое значение:
//		Булево - Истина, если производится заполнение структурных подразделений по сотрудникам, иначе Ложь.
//
Функция ПодразделенияСотрудниковЗаполняются() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПодразделенийСотрудников.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится
	|ИЗ
	|	РегистрСведений.НастройкиПодразделенийСотрудников КАК НастройкиПодразделенийСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаполнениеПроизводится;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Запускает фоновые задания для заполнения организаций и структурных подразделений сотрудников
//
// Параметры:
//		Источник - Объект, который был изменен, после изменения которого требуется пересчет данных по сотрудникам
//
Процедура ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоСотрудникам(Источник, ЗапуститьВФоне = Истина) Экспорт
	
	УникальныйИдентификаторИсточника = Источник.Ссылка.УникальныйИдентификатор();
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторИсточника);
	Если Не ЗапуститьВФоне Тогда
		ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
		ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	КонецЕсли;
	
	// Полное заполнение (Организация пустая ссылка)
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОрганизацииСотрудников")
		И Источник.ДополнительныеСвойства.ЗарегистрироватьОрганизацииСотрудников Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление организаций сотрудников.'");
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ЗарегистрироватьУтраченныеОрганизацииСотрудников", 
			Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьУтраченныеОрганизацииСотрудников")
			И Источник.ДополнительныеСвойства.ЗарегистрироватьУтраченныеОрганизацииСотрудников);
		
		ДлительныеОперации.ВыполнитьВФоне("СинхронизацияДанныхЗарплатаКадрыСервер.ЗарегистрироватьОрганизацииПоСотрудникам", ПараметрыПроцедуры, ПараметрыВыполнения);
		
	КонецЕсли;
	
	// Полное заполнение (Подразделение пустая ссылка)
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьПодразделенияСотрудников")
		И Источник.ДополнительныеСвойства.ЗарегистрироватьПодразделенияСотрудников Тогда
		
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление структурных подразделений сотрудников.'");
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ЗарегистрироватьУтраченныеПодразделенияСотрудников", 
			Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьУтраченныеПодразделенияСотрудников")
			И Источник.ДополнительныеСвойства.ЗарегистрироватьУтраченныеПодразделенияСотрудников);
		
		ДлительныеОперации.ВыполнитьВФоне("СинхронизацияДанныхЗарплатаКадрыСервер.ЗарегистрироватьПодразделенияПоСотрудникам", ПараметрыПроцедуры, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОрганизацииСотрудниковУтраченные")
		И Источник.ДополнительныеСвойства.ЗарегистрироватьОрганизацииСотрудниковУтраченные Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление организаций сотрудников.'");
		ДлительныеОперации.ВыполнитьВФоне("СинхронизацияДанныхЗарплатаКадрыСервер.ЗарегистрироватьОрганизацииСотрудниковУтраченные", Новый Структура, ПараметрыВыполнения);
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьПодразделенияСотрудниковУтраченные")
		И Источник.ДополнительныеСвойства.ЗарегистрироватьПодразделенияСотрудниковУтраченные Тогда
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление структурных подразделений сотрудников.'");
		ДлительныеОперации.ВыполнитьВФоне("СинхронизацияДанныхЗарплатаКадрыСервер.ЗарегистрироватьПодразделенияСотрудниковУтраченные", Новый Структура, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует организации по всем сотрудникам
//
Процедура ЗарегистрироватьОрганизацииПоСотрудникам(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыОбновления, "ЗарегистрироватьУтраченныеОрганизацииСотрудников", Ложь) Тогда
		ЗарегистрироватьУтраченныеОрганизацииСотрудников();
	КонецЕсли;
	
	Продолжать = Истина;
	ВсегоПопыток = ЧислоПопытокОбработкиДанных();
	ОсталосьПопыток = ВсегоПопыток;
	Пока Продолжать И ОсталосьПопыток > 0 Цикл
		Попытка
			ОбновитьОрганизацииСотрудников(Продолжать);
			ОсталосьПопыток = ВсегоПопыток;
		Исключение
			ОсталосьПопыток = ОсталосьПопыток - 1;
		КонецПопытки;
	КонецЦикла;
	Если ОсталосьПопыток = 0 Тогда
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Обмен данными.Регистрация организаций по сотрудникам'", ОбщегоНазначения.КодОсновногоЯзыка())), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			НСтр("ru = 'Превышено допустимое количество попыток выполнения процедуры ОбновитьОрганизацииСотрудников'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ЗарегистрироватьЗавершенияЗаполненияНастройкиОрганизацийСотрудников();
	
КонецПроцедуры

// Регистрирует структурные подразделения по всем сотрудникам
//
Процедура ЗарегистрироватьПодразделенияПоСотрудникам(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыОбновления, "ЗарегистрироватьУтраченныеПодразделенияСотрудников", Ложь) Тогда
		ЗарегистрироватьУтраченныеПодразделенияСотрудников();
	КонецЕсли;
	
	Продолжать = Истина;
	ВсегоПопыток = ЧислоПопытокОбработкиДанных();
	ОсталосьПопыток = ВсегоПопыток;
	Пока Продолжать И ОсталосьПопыток > 0 Цикл
		Попытка
			ОбновитьПодразделенияСотрудников(Продолжать);
			ОсталосьПопыток = ВсегоПопыток;
		Исключение
			ОсталосьПопыток = ОсталосьПопыток - 1;
		КонецПопытки;
	КонецЦикла;
	Если ОсталосьПопыток = 0 Тогда
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Обмен данными.Регистрация подразделений по сотрудникам'", ОбщегоНазначения.КодОсновногоЯзыка())), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			НСтр("ru = 'Превышено допустимое количество попыток выполнения процедуры ОбновитьПодразделенияСотрудников'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ЗарегистрироватьЗавершенияЗаполненияНастройкиПодразделенийСотрудников();
	
КонецПроцедуры

// Проверяет регистрацию утраченных организаций сотрудников
//
Процедура ЗарегистрироватьОрганизацииСотрудниковУтраченные(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	ПроверитьОрганизацииСотрудниковУтраченные();
КонецПроцедуры

// Проверяет регистрацию утраченных структурных подразделений сотрудников
//
Процедура ЗарегистрироватьПодразделенияСотрудниковУтраченные(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	ПроверитьПодразделенияСотрудниковУтраченные();
КонецПроцедуры

Процедура ЗарегистрироватьПодразделенияСотрудников(МассивПодразделений, МассивСотрудников) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодразделенияСотрудников.Подразделение КАК Принадлежность,
		|	ПодразделенияСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ПодразделенияСотрудников КАК ПодразделенияСотрудников
		|ГДЕ
		|	ПодразделенияСотрудников.Сотрудник В(&МассивСотрудников)
		|	И ПодразделенияСотрудников.Подразделение В(&МассивПодразделений)";
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ПодразделенияСотрудников.ПолноеИмя());
	ЭлементБлокировки.ИсточникДанных = ТаблицаИзМассивов(
		ОписаниеКолонки("Сотрудник", МассивСотрудников, Новый ОписаниеТипов("СправочникСсылка.Сотрудники")),
		ОписаниеКолонки("Подразделение", МассивПодразделений, Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")));
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Подразделение", "Подразделение");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СуществующиеСвязи = Запрос.Выполнить().Выгрузить();
		СуществующиеСвязи.Индексы.Добавить("Сотрудник, Принадлежность");
		ЗарегистрироватьПринадлежностьСотрудников(СуществующиеСвязи, 
			МассивПодразделений, МассивСотрудников, Метаданные.РегистрыСведений.ПодразделенияСотрудников, "Подразделение");
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Принадлежность сотрудников подразделениям'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьУтраченныхСотрудников(МассивПринадлежностей, МассивСотрудников, МетаданныеРегистра, ИмяПринадлежности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(МетаданныеРегистра.ПолноеИмя());
	ЭлементБлокировки.ИсточникДанных = ТаблицаИзМассивов(
		ОписаниеКолонки("Сотрудник", МассивСотрудников, Новый ОписаниеТипов("СправочникСсылка.Сотрудники")),
		ОписаниеКолонки(ИмяПринадлежности, МассивПринадлежностей, ОписаниеТипаПринадлежности(ИмяПринадлежности)));
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ИмяПринадлежности, ИмяПринадлежности);
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Для Каждого Сотрудник Из МассивСотрудников Цикл
				Если Не ЗначениеЗаполнено(Сотрудник) Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Принадлежность Из МассивПринадлежностей Цикл
				Если Не ЗначениеЗаполнено(Принадлежность) 
					Или Не ОписаниеТипаПринадлежности(ИмяПринадлежности).СодержитТип(ТипЗнч(Принадлежность)) Тогда
					Продолжить;
				КонецЕсли;
				// Установим утраченную связь сотрудника.
				НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
				НаборЗаписей.Отбор[ИмяПринадлежности].Установить(Принадлежность);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись[ИмяПринадлежности] = Принадлежность;
				НоваяЗапись.Сотрудник = Сотрудник;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Утраченные принадлежности сотрудников'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция МетаданныеРегистраСведенийПодразделенийСотрудниковУтраченные() Экспорт
	Возврат Метаданные.РегистрыСведений.ПодразделенияСотрудниковУтраченные;
КонецФункции

#КонецОбласти

#Область ОбъектыКонфигурации

Функция ЭтотУзелПланаОбмена(ИмяПланаОбмена) Экспорт
	Возврат СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.ЭтотУзелПланаОбмена(ИмяПланаОбмена);
КонецФункции

Функция ОбъектыРегламентированногоУчета() Экспорт
	Возврат СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.ОбъектыРегламентированногоУчета();
КонецФункции

Функция ОбъектыУправленческогоУчета() Экспорт
	Возврат СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.ОбъектыУправленческогоУчета();
КонецФункции

Функция ОбщиеОбъекты() Экспорт
	Возврат СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.ОбщиеОбъекты();
КонецФункции

#КонецОбласти

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСвязейФизическихЛицСОрганизациями.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСвязейФизическихЛицСПодразделениями.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСвязейСотрудниковСОрганизациями.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСвязейСотрудниковСПодразделениями.Имя);
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеСвязейФизическихЛицСОрганизациями.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеСвязейФизическихЛицСПодразделениями.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеСвязейСотрудниковСОрганизациями.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеСвязейСотрудниковСПодразделениями.ИмяМетода);
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт

	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСвязейФизическихЛицСОрганизациями;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСинхронизацияДанныхСОтборомПоОрганизациям;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСвязейСотрудниковСОрганизациями;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСинхронизацияДанныхСОтборомПоОрганизациям;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСвязейФизическихЛицСПодразделениями;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСинхронизацияДанныхСОтборомПоПодразделениям;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСвязейСотрудниковСПодразделениями;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСинхронизацияДанныхСОтборомПоПодразделениям;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПланОбмена(ПланыОбменаПодсистемы, ИмяПланаОбмена)
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена);
	Если МетаданныеПланаОбмена <> Неопределено Тогда
		ПланыОбменаПодсистемы.Добавить(МетаданныеПланаОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодчиненныеОрганизации(ГоловнаяОрганизация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ЕстьОбособленныеПодразделения КАК ЕстьОбособленныеПодразделения
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	
	МассивОрганизаций = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьОбособленныеПодразделения И Выборка.Организация <> ГоловнаяОрганизация Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОрганизаций, ПодчиненныеОрганизации(Выборка.Организация));
		Иначе
			МассивОрганизаций.Добавить(Выборка.Организация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОрганизаций;
	
КонецФункции

Процедура ОбновлениеСвязейФизическихЛицСОрганизациями() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСвязейФизическихЛицСОрганизациями);
	ОбновитьСвязиФизическихЛицСОрганизациями();
	
КонецПроцедуры

Процедура ОбновлениеСвязейФизическихЛицСПодразделениями() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСвязейФизическихЛицСПодразделениями);
	ОбновитьСвязиФизическихЛицСПодразделениями();
	
КонецПроцедуры

Процедура ОбновлениеСвязейСотрудниковСОрганизациями() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСвязейСотрудниковСОрганизациями);
	ОбновитьСвязиСотрудниковСОрганизациями();
	
КонецПроцедуры

Процедура ОбновлениеСвязейСотрудниковСПодразделениями() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСвязейСотрудниковСПодразделениями);
	ОбновитьСвязиСотрудниковСПодразделениями();
	
КонецПроцедуры

Процедура ВыполнитьПравилаРегистрацииПоДвижениямДокумента(ДокументОбъект, ИмяПланаОбмена, Отказ, Получатели)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого НаборДокумента Из ДокументОбъект.Движения Цикл
		МетаданныеНабора = НаборДокумента.Метаданные();
		Если Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Содержит(МетаданныеНабора) Тогда
			НаборДокумента.ДополнительныеСвойства.Вставить("РегистрацияПриЗаписиПолучатели", Получатели);
			НаборДокумента.ДополнительныеСвойства.Вставить("Загрузка", ДокументОбъект.ОбменДанными.Загрузка);
			НаборДокумента.ДополнительныеСвойства.Вставить("Отправитель", ДокументОбъект.ОбменДанными.Отправитель);
			ОбменДаннымиСобытия.ВыполнитьПравилаРегистрацииДляОбъекта(НаборДокумента, ИмяПланаОбмена);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаЗависимыхДанных()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВедущиеМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
	Таблица.Колонки.Добавить("ЗависимыеМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
	Таблица.Колонки.Добавить("ВедущиеДанные", Новый ОписаниеТипов("Массив"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ИнициализироватьТаблицуЗависимыхДанных(ЗависимыеДанные)
	
	// Выполняется однократно, все последующие вызовы переменная уже инициализирована.
	Если ЗависимыеДанные <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗависимыеДанные = ТаблицаЗависимыхДанных();
	
	ЗаполнитьТаблицуЗависимыхДанных(ЗависимыеДанные);
	
	// Добавим индексы для оптимизации поиска.
	ЗависимыеДанные.Индексы.Добавить("ВедущиеМетаданные");
	
КонецПроцедуры

Процедура ДобавитьВедущиеДанныеДляОбработкиЗависимыхДанных(ЗависимыеДанные, ЭлементДанных)
	
	ОбъектМетаданных = ЭлементДанных.Метаданные();
	
	ОтборСтрок = Новый Структура("ВедущиеМетаданные");
	ОтборСтрок.ВедущиеМетаданные = ОбъектМетаданных;
	
	НайденныеСтроки = ЗависимыеДанные.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ВедущиеДанные.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЭлементДанных.ДополнительныеСвойства.Вставить("ПодготовитьОбновлениеЗависимыхДанныхПриОбмене", Истина);
		Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
			ЭлементДанных.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭлементДанных.ЭтоНовый());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаДанныхРегистрации()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВедущиеМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
	Таблица.Колонки.Добавить("ВедущиеДанные", Новый ОписаниеТипов("Массив"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ИнициализироватьТаблицуОбъектовРегистрирующихЗависимыеОбъекты(ДанныеРегистрации)
	
	// Выполняется однократно, все последующие вызовы переменная уже инициализирована.
	Если ДанныеРегистрации <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРегистрации = ТаблицаДанныхРегистрации();
	
	ЗаполнитьТаблицуДанныхРегистрации(ДанныеРегистрации);
	
	// Добавим индексы для оптимизации поиска.
	ДанныеРегистрации.Индексы.Добавить("ВедущиеМетаданные");
	
КонецПроцедуры

Процедура ДобавитьОбъектыРегистрирующиеЗависимыеОбъекты(ДанныеРегистрации, ЭлементДанных)
	
	ОтборСтрок = Новый Структура("ВедущиеМетаданные");
	ОтборСтрок.ВедущиеМетаданные = ЭлементДанных.Метаданные();
	
	НайденныеСтроки = ДанныеРегистрации.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ВедущиеДанные.Добавить(ЭлементДанных);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучателиПоТаблицеФизическихЛицГоловныхОрганизаций(ТаблицаФильтр, ИмяПланаОбмена, ИмяГоловнаяОрганизация, ИмяФизическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаФильтр", ТаблицаФильтр);
	Запрос.УстановитьПараметр("ИмяПланаОбменаЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаФильтр.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТаблицаФильтр.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаФильтр
		|ИЗ
		|	&ТаблицаФильтр КАК ТаблицаФильтр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛица.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПланОбменаОрганизации.Ссылка КАК Узел
		|ИЗ
		|	ВТТаблицаФильтр КАК ФизическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииФизическихЛиц КАК ОрганизацииФизическихЛиц
		|		ПО (ФизическиеЛица.ГоловнаяОрганизация = ОрганизацииФизическихЛиц.ГоловнаяОрганизация)
		|			И ФизическиеЛица.ФизическоеЛицо = ОрганизацииФизическихЛиц.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
		|		ПО (ОрганизацииФизическихЛиц.Организация = ПланОбменаОрганизации.Организация)
		|			И (ПланОбменаОрганизации.Ссылка <> &ИмяПланаОбменаЭтотУзел)
		|			И (ПланОбменаОрганизации.Ссылка.СинхронизироватьДанныеПоОрганизациям)
		|			И (НЕ ПланОбменаОрганизации.Ссылка.ПометкаУдаления)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаОрганизации", "ПланОбмена." + ИмяПланаОбмена + ".Организации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НаборЗаписей.ГоловнаяОрганизация", "НаборЗаписей." + ИмяГоловнаяОрганизация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НаборЗаписей.ФизическоеЛицо", "НаборЗаписей." + ИмяФизическоеЛицо);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаФильтр.ГоловнаяОрганизация", "ТаблицаФильтр." + ИмяГоловнаяОрганизация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаФильтр.ФизическоеЛицо", "ТаблицаФильтр." + ИмяФизическоеЛицо);
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаПолучателей = Запрос.Выполнить().Выгрузить();
	
	// Добавим узлы без отбора по организациям для каждой пары ФизическоеЛицо/ГоловнаяОрганизация.
	УзлыБезОтбораПоОрганизации = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.УзлыБезОтбораПоОрганизации(ИмяПланаОбмена);
	Если УзлыБезОтбораПоОрганизации.Количество() = 0 Тогда
		Возврат ТаблицаПолучателей;
	КонецЕсли;
		
	Для Каждого СтрокаНабора Из ТаблицаФильтр Цикл
		Для Каждого УзелБезОтбора Из УзлыБезОтбораПоОрганизации Цикл
			НоваяСтрока = ТаблицаПолучателей.Добавить();
			НоваяСтрока.ГоловнаяОрганизация = СтрокаНабора[ИмяГоловнаяОрганизация];
			НоваяСтрока.ФизическоеЛицо = СтрокаНабора[ИмяФизическоеЛицо];
			НоваяСтрока.Узел = УзелБезОтбора;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПолучателей;
	
КонецФункции

Процедура ЗаполнитьПолучателейНабораЗаписейПриРегистрации(НаборЗаписей, Получатели, ИмяПланаОбмена, Отказ)
	
	МенеджерНабора = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаборЗаписей.Метаданные().ПолноеИмя());
	ИмяКолонкиГоловнаяОрганизация = МенеджерНабора.РеквизитГоловнаяОрганизация();
	ИмяКолонкиФизическоеЛицо = МенеджерНабора.РеквизитФизическоеЛицо();
	
	Кэш = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.УзлыФизическихЛицПоГоловнойОрганизации();
	ДополнитьКэшПоНаборуЗаписей(Кэш, НаборЗаписей, ИмяПланаОбмена);
	
	// Заполняем получателей набора.
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ПолучателиПоЗаписи = ПолучателиИзКэшаПоФизическомуЛицуГоловнойОрганизации(Кэш, ЗаписьНабора[ИмяКолонкиФизическоеЛицо], ЗаписьНабора[ИмяКолонкиГоловнаяОрганизация]);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, ПолучателиПоЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПолучателейНабораЗаписейПриВыгрузке(НаборЗаписей, Получатели, ИмяПланаОбмена, Отказ)
	
	МенеджерНабора = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаборЗаписей.Метаданные().ПолноеИмя());
	ИмяКолонкиГоловнаяОрганизация = МенеджерНабора.РеквизитГоловнаяОрганизация();
	ИмяКолонкиФизическоеЛицо = МенеджерНабора.РеквизитФизическоеЛицо();
	
	Кэш = СинхронизацияДанныхЗарплатаКадрыВызовПовтИсп.УзлыФизическихЛицПоГоловнойОрганизации();
	
	// При выгрузке в НаборЗаписей приходит набор с единственной записью.
	ЗаписьНабора = НаборЗаписей[0];
	ПолучателиПоЗаписи = ПолучателиИзКэшаПоФизическомуЛицуГоловнойОрганизации(Кэш, ЗаписьНабора[ИмяКолонкиФизическоеЛицо], ЗаписьНабора[ИмяКолонкиГоловнаяОрганизация]);
	Если ПолучателиПоЗаписи = Неопределено Тогда
		ПолныйНабор = ПолныйНаборЗаписей(НаборЗаписей.Метаданные().ПолноеИмя(), НаборЗаписей.Отбор);
		ДополнитьКэшПоНаборуЗаписей(Кэш, ПолныйНабор, ИмяПланаОбмена);
		// Еще раз получаем, после того как кэш дополнен.
		ПолучателиПоЗаписи = ПолучателиИзКэшаПоФизическомуЛицуГоловнойОрганизации(Кэш, ЗаписьНабора[ИмяКолонкиФизическоеЛицо], ЗаписьНабора[ИмяКолонкиГоловнаяОрганизация]);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, ПолучателиПоЗаписи, Истина);
	
КонецПроцедуры

Процедура ДополнитьКэшПоНаборуЗаписей(Кэш, НаборЗаписей, ИмяПланаОбмена)
	
	МенеджерНабора = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаборЗаписей.Метаданные().ПолноеИмя());
	ИмяГоловнаяОрганизация = МенеджерНабора.РеквизитГоловнаяОрганизация();
	ИмяФизическоеЛицо = МенеджерНабора.РеквизитФизическоеЛицо();
	
	ОтсутствуютВКэше = Новый ТаблицаЗначений;
	ОтсутствуютВКэше.Колонки.Добавить(ИмяФизическоеЛицо, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ОтсутствуютВКэше.Колонки.Добавить(ИмяГоловнаяОрганизация, Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ОтсутствуютВКэше, ИмяФизическоеЛицо + ", " + ИмяГоловнаяОрганизация);
	ОтборСтрок = Новый Структура(ИмяФизическоеЛицо + "," + ИмяГоловнаяОрганизация);
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ПолучателиПоЗаписи = ПолучателиИзКэшаПоФизическомуЛицуГоловнойОрганизации(Кэш, ЗаписьНабора[ИмяФизическоеЛицо], ЗаписьНабора[ИмяГоловнаяОрганизация]);
		Если ПолучателиПоЗаписи = Неопределено Тогда
			ДобавитьСтрокуВТаблицу(ОтсутствуютВКэше, ЗаписьНабора, ИмяФизическоеЛицо, ИмяГоловнаяОрганизация, ОтборСтрок);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтсутствуютВКэше.Количество() = 0 Тогда
		// Данных в кэше достаточно.
		Возврат;
	КонецЕсли;
	
	ТаблицаПолучателей = ПолучателиПоТаблицеФизическихЛицГоловныхОрганизаций(ОтсутствуютВКэше, ИмяПланаОбмена, ИмяГоловнаяОрганизация, ИмяФизическоеЛицо);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаПолучателей, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, ГоловнаяОрганизация");
	Для Каждого СтрокаТаблицы Из ОтсутствуютВКэше Цикл
		ОтборСтрок.ФизическоеЛицо = СтрокаТаблицы[ИмяФизическоеЛицо];
		ОтборСтрок.ГоловнаяОрганизация = СтрокаТаблицы[ИмяГоловнаяОрганизация];
		НайденныеСтроки = ТаблицаПолучателей.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Добавим в кэш пустой массив, чтобы не искать в дальнейшем.
			ДобавитьВКэшПолучателейПоФизическомуЛицуГоловнойОрганизации(Кэш, СтрокаТаблицы[ИмяФизическоеЛицо], СтрокаТаблицы[ИмяГоловнаяОрганизация], Новый Массив);
			Продолжить;
		КонецЕсли;
		// Добавляем найденных получателей в кэш.
		Узлы = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "Узел");
		ДобавитьВКэшПолучателейПоФизическомуЛицуГоловнойОрганизации(Кэш, СтрокаТаблицы[ИмяФизическоеЛицо], СтрокаТаблицы[ИмяГоловнаяОрганизация], Узлы);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучателиИзКэшаПоФизическомуЛицуГоловнойОрганизации(Кэш, ФизическоеЛицо, ГоловнаяОрганизация)
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, ГоловнаяОрганизация");
	ОтборСтрок.ФизическоеЛицо = ФизическоеЛицо;
	ОтборСтрок.ГоловнаяОрганизация = ГоловнаяОрганизация.ГоловнаяОрганизация;
	
	НайденныеСтроки = Кэш.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеСтроки[0].Узлы;
	
КонецФункции

Процедура ДобавитьВКэшПолучателейПоФизическомуЛицуГоловнойОрганизации(Кэш, ФизическоеЛицо, ГоловнаяОрганизация, Получатели)
	
	НоваяСтрока = Кэш.Добавить();
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация.ГоловнаяОрганизация;
	
	НоваяСтрока.Узлы = Получатели;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицу(Таблица, Строка, ИмяФизическоеЛицо, ИмяГоловнаяОрганизация, КлючУникальности = Неопределено)
	
	Если КлючУникальности = Неопределено Тогда
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока[ИмяФизическоеЛицо] = Строка[ИмяФизическоеЛицо];
		НоваяСтрока[ИмяГоловнаяОрганизация] = Строка[ИмяГоловнаяОрганизация].ГоловнаяОрганизация;
		Возврат;
	КонецЕсли;
	
	КлючУникальности[ИмяФизическоеЛицо] = Строка[ИмяФизическоеЛицо];
	КлючУникальности[ИмяГоловнаяОрганизация] = Строка[ИмяГоловнаяОрганизация].ГоловнаяОрганизация;
	НайденныеСтроки = Таблица.НайтиСтроки(КлючУникальности);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока[ИмяФизическоеЛицо] = Строка[ИмяФизическоеЛицо];
		НоваяСтрока[ИмяГоловнаяОрганизация] = Строка[ИмяГоловнаяОрганизация].ГоловнаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолныйНаборЗаписей(ПолноеИмяНабора, УстановленныйОтбор)
	
	МенеджерНабора = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяНабора);
	ПолныйНаборЗаписей = МенеджерНабора.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементОтбора Из УстановленныйОтбор Цикл
		Если ЭлементОтбора.Использование = Истина Тогда
			ПолныйНаборЗаписей.Отбор[ЭлементОтбора.Имя].Установить(ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	ПолныйНаборЗаписей.Прочитать();
	
	Возврат ПолныйНаборЗаписей;
	
КонецФункции

// Возвращает регистры сведений, в которых объект присутствует в ведущем измерении.
//
// Параметры:
//		ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//		СсылкаНаОбъект - Произвольный - СправочникСсылка, ДокументСсылка и т.п.
//										Ссылка на объект, который может содержать присоединенные файлы.
//
// Возвращаемое значение:
//		СвязанныеРегистрыСведенийОбъекта - Структура - в качестве ключа указывается имя регистра.
//												В качестве значения указывается результат запроса.
//
Функция СвязанныеРегистрыСведенийОбъекта(ИмяПланаОбмена, СсылкаНаОбъект)
	
	ПолноеИмяОбъектаМетаданных = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	МассивСвязанныхДанных = СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.МассивСвязанныхДанных(ИмяПланаОбмена, ПолноеИмяОбъектаМетаданных);
	
	СвязанныеРегистрыСведенийОбъекта = Новый Структура;
	
	Для Каждого СвязанныеДанные Из МассивСвязанныхДанных Цикл
		
		МетаданныеРС = Метаданные.РегистрыСведений[СвязанныеДанные.Ключ];
		ИзмеренияРС = МетаданныеРС.Измерения;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		
		Запрос.Текст = "
		| ВЫБРАТЬ РАЗЛИЧНЫЕ ";
		
		Для каждого ИзмерениеРС Из ИзмеренияРС Цикл
			Если ИзмерениеРС.ОсновнойОтбор Тогда
				Запрос.Текст = Запрос.Текст + "СвязанныеДанные." + ИзмерениеРС.Имя + ", ";
			КонецЕсли;
		КонецЦикла;
		Если МетаданныеРС.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Запрос.Текст = Запрос.Текст + "СвязанныеДанные.Период, ";
		КонецЕсли;
		
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Запрос.Текст, 2);
		
		Запрос.Текст = Запрос.Текст + "
		| Из
		| РегистрСведений." + СвязанныеДанные.Ключ + " КАК СвязанныеДанные
		| ГДЕ
		| СвязанныеДанные." + СвязанныеДанные.Значение + " = &Ссылка";
		
		СвязанныеРегистрыСведенийОбъекта.Вставить(СвязанныеДанные.Ключ, Запрос.Выполнить());
		
	КонецЦикла;
	
	Возврат СвязанныеРегистрыСведенийОбъекта;
	
КонецФункции

Процедура ИсключитьЗагружаемыйУзел(Получатели, ЭлементДанных)
	
	// Удаляем узел, из которого происходит загрузка, чтобы не было зацикливания
	Если ЭлементДанных.ОбменДанными.Загрузка Тогда
		ИндексЭлемента = Получатели.Найти(ЭлементДанных.ОбменДанными.Отправитель);
		Если ИндексЭлемента <> Неопределено Тогда
			Получатели.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЕсли;
	Если ЭлементДанных.ДополнительныеСвойства.Свойство("Загрузка") И ЭлементДанных.ДополнительныеСвойства.Загрузка Тогда
		ИндексЭлемента = Получатели.Найти(ЭлементДанных.ДополнительныеСвойства.Отправитель);
		Если ИндексЭлемента <> Неопределено Тогда
			Получатели.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьПолучателейНеСоответствующиеОтбору(Получатели, ПолноеИмяОбъектаМетаданных)
	
	ОбъектСоответствуетРегламентированномуУчету = СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.ОбъектСоответствуетРегламентированномуУчету(ПолноеИмяОбъектаМетаданных);
	ОбъектСоответствуетУправленческомуУчету = СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.ОбъектСоответствуетУправленческомуУчету(ПолноеИмяОбъектаМетаданных);
	ОбъектСоответствуетОбщемуУчету = СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.ОбъектСоответствуетОбщемуУчету(ПолноеИмяОбъектаМетаданных);
	
	ПолучателиНеСоответствующиеОтбору = Новый Массив;
	Для Каждого Получатель Из Получатели Цикл
		
		ОбъектСоответствуетОтбору = Ложь;
		Если Получатель.СинхронизироватьДанныеПоОрганизациям И ОбъектСоответствуетРегламентированномуУчету Тогда
			ОбъектСоответствуетОтбору = Истина;
		ИначеЕсли Получатель.СинхронизироватьДанныеПоПодразделениям И ОбъектСоответствуетУправленческомуУчету Тогда
			ОбъектСоответствуетОтбору = Истина;
		ИначеЕсли (Получатель.СинхронизироватьДанныеПоОрганизациям Или Получатель.СинхронизироватьДанныеПоПодразделениям) И ОбъектСоответствуетОбщемуУчету Тогда
			ОбъектСоответствуетОтбору = Истина;
		КонецЕсли;
		
		Если Не ОбъектСоответствуетОтбору Тогда
			ПолучателиНеСоответствующиеОтбору.Добавить(Получатель);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Получатель Из ПолучателиНеСоответствующиеОтбору Цикл
		ИндексЗначения = Получатели.Найти(Получатель);
		Если ИндексЗначения <> Неопределено Тогда
			Получатели.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучателиОбъекта(ИмяПланаОбмена, ОбъектМетаданных) Экспорт
	Возврат СинхронизацияДанныхЗарплатаКадрыСеансПовтИсп.ПолучателиОбъекта(ИмяПланаОбмена, ОбъектМетаданных);
КонецФункции

Процедура ЗарегистрироватьИзменениеКадровойИсторииПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ЗарегистрироватьИзменениеКадровойИсторииПриЗаписи(Источник, Отказ, Замещение);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаписьУзлаПлановОбмена

Процедура УзелПланаОбменаРаспределеннойБазыПередЗаписью(УзелОбъект) Экспорт
	
	УзелОбъект.ДополнительныеСвойства.Вставить("ИспользуетсяОтборПоОрганизациям", 
	                                            ИспользуютсяУзлыРИБСОтборомПоОрганизациям(УзелОбъект.Ссылка));
	УзелОбъект.ДополнительныеСвойства.Вставить("ИспользуетсяОтборПоПодразделениям", 
	                                            ИспользуютсяУзлыРИБСОтборомПоПодразделениям(УзелОбъект.Ссылка));
	
	ЗаполнитьПрежниеЗначения(УзелОбъект);

КонецПроцедуры

Процедура УзелПланаОбменаРаспределеннойБазыПриЗаписи(УзелОбъект) Экспорт

	ПрежниеЗначения = СвойствоСтруктуры(УзелОбъект.ДополнительныеСвойства, "ПрежниеЗначения", Новый Структура);
	
	ОбновлятьПовтИсп = Ложь;
	
	Если ИспользованиеОтбораПоОрганизациямИзменилось(УзелОбъект, ПрежниеЗначения) Тогда
		Если Не СвойствоСтруктуры(УзелОбъект.ДополнительныеСвойства, "ИспользуетсяОтборПоОрганизациям") Тогда
			Константы.ИспользуетсяСинхронизацияДанныхСОтборомПоОрганизациям.Установить(
				УзелОбъект.ИспользоватьОтборПоОрганизациям И УзелОбъект.СинхронизироватьДанныеПоОрганизациям);
			ОбновлятьПовтИсп = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользованиеОтбораПоПодразделениямИзменилось(УзелОбъект, ПрежниеЗначения) Тогда
		Если Не СвойствоСтруктуры(УзелОбъект.ДополнительныеСвойства, "ИспользуетсяОтборПоПодразделениям") Тогда
			Константы.ИспользуетсяСинхронизацияДанныхСОтборомПоПодразделениям.Установить(
				УзелОбъект.ИспользоватьОтборПоПодразделениям И УзелОбъект.СинхронизироватьДанныеПоПодразделениям);
			ОбновлятьПовтИсп = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ОбновлятьПовтИсп Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПрежниеЗначения(УзелОбъект)
	
	Если УзелОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("СинхронизироватьДанныеПоОрганизациям");
	Реквизиты.Добавить("ИспользоватьОтборПоОрганизациям");
	Реквизиты.Добавить("СинхронизироватьДанныеПоПодразделениям");
	Реквизиты.Добавить("ИспользоватьОтборПоПодразделениям");
	
	УзелОбъект.ДополнительныеСвойства.Вставить("ПрежниеЗначения", 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбъект.Ссылка, Реквизиты));

КонецПроцедуры

Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию);
КонецФункции

Функция ИспользованиеОтбораПоОрганизациямИзменилось(УзелОбъект, ПрежниеЗначения)
	Возврат (УзелОбъект.ИспользоватьОтборПоОрганизациям И УзелОбъект.СинхронизироватьДанныеПоОрганизациям) 
		<> (СвойствоСтруктуры(ПрежниеЗначения, "ИспользоватьОтборПоОрганизациям", Ложь) 
			И СвойствоСтруктуры(ПрежниеЗначения, "СинхронизироватьДанныеПоОрганизациям", Ложь));
КонецФункции

Функция ИспользованиеОтбораПоПодразделениямИзменилось(УзелОбъект, ПрежниеЗначения)
	Возврат (УзелОбъект.ИспользоватьОтборПоПодразделениям И УзелОбъект.СинхронизироватьДанныеПоПодразделениям)
		<> (СвойствоСтруктуры(ПрежниеЗначения, "ИспользоватьОтборПоПодразделениям", Ложь) 
			И СвойствоСтруктуры(ПрежниеЗначения, "СинхронизироватьДанныеПоПодразделениям", Ложь));
КонецФункции

#КонецОбласти

#Область ОбработчикиПравилРегистрации

Процедура ЗарегистрироватьИзмененияПередОбработкой(ИмяПланаОбмена, ПРО, Объект, ОбъектМетаданных, Отказ, Выгрузка) Экспорт
	
	// Проверяем нужно ли выгружать объект
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
	МенеджерОбъекта.ЗарегистрироватьИзмененияПередОбработкой(ИмяПланаОбмена, ПРО, Объект, Отказ, Выгрузка);
	
КонецПроцедуры

// АПК:134-выкл запланирован рефакторинг.

Процедура ЗарегистрироватьИзмененияПриОбработке(ИмяПланаОбмена, ПРО, Объект, Отказ, ТекстЗапроса, ПараметрыЗапроса,
	ИспользоватьКэш, Выгрузка) Экспорт
	
	// Формируем текст запроса для объекта
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
	МенеджерОбъекта.ЗарегистрироватьИзмененияПриОбработке(ИмяПланаОбмена, ПРО, Объект, Отказ, ТекстЗапроса,
		ПараметрыЗапроса, ИспользоватьКэш, Выгрузка);
	
	Если ИспользуютсяУзлыРИБСОтбором() Тогда
		ПолучателиОбъекта = ПолучателиОбъекта(ИмяПланаОбмена, Объект.Метаданные().ПолноеИмя());
		ИзменитьТекстЗапросаПоЗначениямМассива(
			ПолучателиОбъекта,
			ТекстЗапроса,
			ПараметрыЗапроса,
			"ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)",
			"ПланОбменаОсновнаяТаблица.Ссылка",
			"ПолучателиОбъекта");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПриОбработкеДоп(ИмяПланаОбмена, ПРО, Объект, Ссылка, Отказ, ТекстЗапроса,
	ПараметрыЗапроса, ИспользоватьКэш) Экспорт
	
	// Формируем текст запроса для ссылки объекта, изменения еще не записаны
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Ссылка.Метаданные().ПолноеИмя());
	МенеджерОбъекта.ЗарегистрироватьИзмененияПриОбработкеДоп(ИмяПланаОбмена, ПРО, Объект, Ссылка, Отказ, ТекстЗапроса,
		ПараметрыЗапроса, ИспользоватьКэш);
	
	Если ИспользуютсяУзлыРИБСОтбором() Тогда
		ПолучателиОбъекта = ПолучателиОбъекта(ИмяПланаОбмена, Объект.Метаданные().ПолноеИмя());
		ИзменитьТекстЗапросаПоЗначениямМассива(
			ПолучателиОбъекта,
			ТекстЗапроса,
			ПараметрыЗапроса,
			"ПланОбменаОсновнаяТаблица.Ссылка В(&СвойствоОбъекта_ПолучателиОбъекта)",
			"ПланОбменаОсновнаяТаблица.Ссылка",
			"ПолучателиОбъекта");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПослеОбработки(ИмяПланаОбмена, ПРО, Объект, ОбъектМетаданных, Отказ, Получатели,
	Выгрузка) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
		И Не Объект.ДополнительныеСвойства.Свойство("ОпределениеПолучателейПриЗаписи")
		И Не Выгрузка
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Получатели.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Истина;
		МенеджерОбъекта.ВыполнитьПравилаРегистрацииРегистров(ИмяПланаОбмена, Отказ, Получатели, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			ВыполнитьПравилаРегистрацииПоДвижениямДокумента(Объект, ИмяПланаОбмена, Отказ, Получатели);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных)
		И Объект.ДополнительныеСвойства.Свойство("РегистрацияПриЗаписиПолучатели") Тогда
		Получатели.Очистить();
		Для Каждого Ссылка Из Объект.ДополнительныеСвойства.РегистрацияПриЗаписиПолучатели Цикл
			Получатели.Добавить(Ссылка);
		КонецЦикла;
		
		// Для набора определили получателей
		Возврат;
		
	КонецЕсли;
	
	Если Не Отказ И Не Выгрузка И Получатели.Количество() > 0 И Не Объект.ОбменДанными.Загрузка
		И Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "Выгрузка", Ложь) Тогда
			
		МенеджерОбъекта.ЗарегистрироватьИзмененияПослеОбработки(ИмяПланаОбмена, ПРО, Объект, Отказ, Получатели,
			Выгрузка);
			
	КонецЕсли;
	
	ИсключитьПолучателейНеСоответствующиеОтбору(Получатели, ОбъектМетаданных.ПолноеИмя());
	
КонецПроцедуры

Процедура ЗарегистрироватьСовместноРегистрируемыеОбъекты(ОбъектыДляРегистрации, Получатели) Экспорт
	
	Для Каждого ОбъектДляРегистрации Из ОбъектыДляРегистрации Цикл
		Если ЗначениеЗаполнено(ОбъектДляРегистрации) И ОбщегоНазначения.СсылкаСуществует(ОбъектДляРегистрации) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Получатели, ОбъектДляРегистрации);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// АПК:134-вкл.

#КонецОбласти

#Область ВторичныеДанные

Процедура ПриПолученииЗависимыхДанных(ЭлементДанных, ЗависимыеДанные) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьТаблицуЗависимыхДанных(ЗависимыеДанные);
	ДобавитьВедущиеДанныеДляОбработкиЗависимыхДанных(ЗависимыеДанные, ЭлементДанных);
	
КонецПроцедуры

Процедура ПослеЗагрузкиЗависимыхДанных(ЗависимыеДанные) Экспорт
	
	Если ЗависимыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗависимыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗависимыеДанные.Индексы.Добавить("ЗависимыеМетаданные");
	
	ЗависимыеМетаданные = ОбщегоНазначения.ВыгрузитьКолонку(ЗависимыеДанные, "ЗависимыеМетаданные", Истина);
	Для Каждого ОбъектМетаданных Из ЗависимыеМетаданные Цикл
		ОтборСтрок = Новый Структура("ЗависимыеМетаданные");
		ОтборСтрок.ЗависимыеМетаданные = ОбъектМетаданных;
		НайденныеСтроки = ЗависимыеДанные.НайтиСтроки(ОтборСтрок);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		МенеджерОбъекта.ОбновитьЗависимыеДанныеПослеЗагрузкиОбменаДанными(НайденныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуЗависимыхДанных(ЗависимыеДанные) Экспорт
	
	// Выполняется однократно, все последующие вызовы переменная уже инициализирована.
	Если ЗависимыеДанные = Неопределено Тогда
		ЗависимыеДанные = ТаблицаЗависимыхДанных();
		// Добавим индексы для оптимизации поиска.
		ЗависимыеДанные.Индексы.Добавить("ВедущиеМетаданные");
	КонецЕсли;
	
	СинхронизацияДанныхЗарплатаКадрыИнтеграцияПодсистем.ЗаполнитьТаблицуЗависимыхДанных(ЗависимыеДанные);
	
КонецПроцедуры

Процедура ОбновитьЗависимыеДанныеТекущиеКадровыеДанныеСотрудников(ЗависимыеДанные) Экспорт
	
	Сотрудники = Новый Массив;
	Для Каждого СтрокаЗависимыхДанных Из ЗависимыеДанные Цикл
		Если СтрокаЗависимыхДанных.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ТекущиеКадровыеДанныеСотрудников
			И СтрокаЗависимыхДанных.ВедущиеМетаданные = Метаданные.РегистрыСведений.РолиСотрудников Тогда
			Для каждого НаборЗаписей Из СтрокаЗависимыхДанных.ВедущиеДанные Цикл
				Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
					Если Сотрудники.Найти(ЗаписьНабора.Сотрудник) = Неопределено Тогда
						Сотрудники.Добавить(ЗаписьНабора.Сотрудник);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	КадровыйУчет.ОбновитьТекущиеКадровыеДанныеСпискаСотрудников(Сотрудники, Новый Массив);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияДанныхПослеЗагрузки

Процедура ПриПолученииОбъектовРегистрирующихЗависимыеОбъекты(ЭлементДанных, ДанныеРегистрации) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьТаблицуОбъектовРегистрирующихЗависимыеОбъекты(ДанныеРегистрации);
	ДобавитьОбъектыРегистрирующиеЗависимыеОбъекты(ДанныеРегистрации, ЭлементДанных);
	
КонецПроцедуры

Процедура ПослеЗагрузкиОбъектовРегистрирующихЗависимыеОбъекты(ДанныеРегистрации) Экспорт
	
	Если ДанныеРегистрации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеРегистрации Цикл
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаДанных.ВедущиеМетаданные.ПолноеИмя());
		МенеджерОбъекта.ЗарегистрироватьЗависимыеОбъектыПослеЗагрузкиОбменаДанными(СтрокаДанных.ВедущиеДанные);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДанныхРегистрации(ДанныеРегистрации)
	
	// Выполняется однократно, все последующие вызовы переменная уже инициализирована.
	Если ДанныеРегистрации = Неопределено Тогда
		ДанныеРегистрации = ТаблицаДанныхРегистрации();
		// Добавим индексы для оптимизации поиска.
		ДанныеРегистрации.Индексы.Добавить("ВедущиеМетаданные");
	КонецЕсли;
	
	СинхронизацияДанныхЗарплатаКадрыИнтеграцияПодсистем.ЗаполнитьТаблицуДанныхРегистрации(ДанныеРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.2";
	Обработчик.Процедура = "СинхронизацияДанныхЗарплатаКадрыСервер.ОбновитьУзлыПлановОбменов";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f4023078-7eba-4b48-9a1c-4caab924d6fe");
	Обработчик.Комментарий = НСтр("ru = 'Обновление реквизитов планов обменов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.3";
	Обработчик.Процедура = "СинхронизацияДанныхЗарплатаКадрыСервер.УстановитьПринадлежностиФизическихЛицОрганизаций";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d907e63b-2a72-4dfd-be46-308ac30a5981");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение принадлежности физических лиц к организациям.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.3";
	Обработчик.Процедура = "СинхронизацияДанныхЗарплатаКадрыСервер.УстановитьПринадлежностиФизическихЛицПодразделений";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1e2272ab-cd4f-440e-a06a-c0bfc1f51dd5");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение принадлежности физических лиц к структурным подразделениям.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.3";
	Обработчик.Процедура = "СинхронизацияДанныхЗарплатаКадрыСервер.УстановитьОрганизацииСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("942f0302-040e-46ed-9f6e-31b8a5a3a45d");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение организаций сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.3";
	Обработчик.Процедура = "СинхронизацияДанныхЗарплатаКадрыСервер.УстановитьПодразделенияСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a07a9011-664e-4367-9501-56d1ad5306ce");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение подразделений сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.18";
	Обработчик.Процедура = "СинхронизацияДанныхЗарплатаКадрыСервер.УстановитьИспользованиеСинхронизацииСОтборами";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f4ba10b8-0f6e-434f-89af-8d0b4dca4ad1");
	Обработчик.Комментарий = НСтр("ru = 'Установка использования синхронизации данных с отборами.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.18.75";
	Обработчик.Процедура = "ПланыОбмена.АвтономнаяРабота.ОбновитьГлавныйУзелВАвтономномРабочемМесте";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7be86b19-a6e3-4144-891c-a908fa28a9de");
	Обработчик.Комментарий = НСтр("ru = 'Обновление реквизитов плана обмена ""Автономная работа"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.18.143";
	Обработчик.Процедура =
		"РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.ОбновитьДанныеРегистраДокументыУчтенныеПриРасчетеНДФЛ";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("51365da9-5d41-4db5-b3ee-54644cf17814");
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных регистра сведений ""Документы учтенные при расчете НДФЛ"" 
										|для РИБ.'");
	
КонецПроцедуры

Процедура ОбновитьСвязиФизическихЛицСОрганизациями()
	
	ЗарегистрироватьПринадлежностьФизическихЛицОрганизаций();
	ЗарегистрироватьПодразделенияФизическихЛицУтраченные();
	
КонецПроцедуры

Процедура ОбновитьСвязиФизическихЛицСПодразделениями()
	
	ЗарегистрироватьПринадлежностьФизическихЛицПодразделений();
	ЗарегистрироватьПодразделенияФизическихЛицУтраченные();
	
КонецПроцедуры

Процедура ОбновитьСвязиСотрудниковСОрганизациями()
	
	ЗарегистрироватьОрганизацииПоСотрудникам();
	ЗарегистрироватьОрганизацииСотрудниковУтраченные();
	
КонецПроцедуры

Процедура ОбновитьСвязиСотрудниковСПодразделениями()
	
	ЗарегистрироватьПодразделенияПоСотрудникам();
	ЗарегистрироватьПодразделенияСотрудниковУтраченные();
	
КонецПроцедуры

Процедура ОбновитьУзлыПлановОбменов(ПараметрыОбновления) Экспорт
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	НоваяТранзакция = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		НоваяТранзакция = Истина;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("ПланОбмена.ОбменВРаспределеннойИнформационнойБазе");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки = Блокировка.Добавить("ПланОбмена.АвтономнаяРабота");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Обмен данными.Обновление планов обмена.Ошибка блокировки'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодчиненныйУзел", ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ());
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменВРаспределеннойИнформационнойБазе.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменВРаспределеннойИнформационнойБазе КАК ОбменВРаспределеннойИнформационнойБазе
	|ГДЕ
	|	(ОбменВРаспределеннойИнформационнойБазе.СинхронизироватьДанныеПоОрганизациям
	|			ИЛИ ОбменВРаспределеннойИнформационнойБазе.СинхронизироватьДанныеПоПодразделениям)
	|	И ВЫБОР
	|			КОГДА &ПодчиненныйУзел
	|				ТОГДА НЕ ОбменВРаспределеннойИнформационнойБазе.ЭтотУзел
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтономнаяРабота.Ссылка
	|ИЗ
	|	ПланОбмена.АвтономнаяРабота КАК АвтономнаяРабота
	|ГДЕ
	|	(АвтономнаяРабота.СинхронизироватьДанныеПоОрганизациям
	|			ИЛИ АвтономнаяРабота.СинхронизироватьДанныеПоПодразделениям)
	|	И ВЫБОР
	|			КОГДА &ПодчиненныйУзел
	|				ТОГДА НЕ АвтономнаяРабота.ЭтотУзел
	|						И &ПодчиненныйУзел
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НоваяТранзакция Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользуютсяПодразделения = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		ИспользуютсяПодразделения = МодульОрганизационнаяСтруктура.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбменВРаспределеннойИнформационнойБазе.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменВРаспределеннойИнформационнойБазе КАК ОбменВРаспределеннойИнформационнойБазе
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПодчиненныйУзел
	|				ТОГДА НЕ ОбменВРаспределеннойИнформационнойБазе.ЭтотУзел
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтономнаяРабота.Ссылка
	|ИЗ
	|	ПланОбмена.АвтономнаяРабота КАК АвтономнаяРабота
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПодчиненныйУзел
	|				ТОГДА НЕ АвтономнаяРабота.ЭтотУзел
	|						И &ПодчиненныйУзел
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяТранзакция = Ложь;
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
			НоваяТранзакция = Истина;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Обмен данными.Обновление плана обмена %1.Ошибка блокировки'",
				ОбщегоНазначения.КодОсновногоЯзыка()), Выборка.Ссылка);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		УзелОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УзелОбъект.СинхронизироватьДанныеПоОрганизациям = Истина;
		Если ИспользуютсяПодразделения Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
				
				МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
				
				УзелОбъект.СинхронизироватьДанныеПоПодразделениям = Истина;
				
				МассивОрганизаций = Новый Массив;
				МассивОрганизаций = УзелОбъект.Организации.ВыгрузитьКолонку("Организация");
				
				УзелОбъект.Подразделения.Очистить();
				
				СтруктурныеПодразделения = МодульОрганизационнаяСтруктура.ПодразделенияВСтруктуреПредприятия(МассивОрганизаций);
				Если СтруктурныеПодразделения.Количество() > 0 Тогда
					УзелОбъект.ИспользоватьОтборПоПодразделениям = Истина;
				КонецЕсли;
				Для Каждого СтрокаТаблицы Из СтруктурныеПодразделения Цикл
					
					МассивПодразделений = МодульОрганизационнаяСтруктура.ПодчиненныеПодразделения(СтрокаТаблицы.Подразделение);
					Для Каждого ПодразделениеУзла Из МассивПодразделений Цикл
						НоваяСтрока = УзелОбъект.Подразделения.Добавить();
						НоваяСтрока.Подразделение = ПодразделениеУзла;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		УзелОбъект.Записать();
		
		Если НоваяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура УстановитьПринадлежностиФизическихЛицОрганизаций(ПараметрыОбновления) Экспорт
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОрганизацийФизическихЛиц.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится
	|ИЗ
	|	РегистрСведений.НастройкиОрганизацийФизическихЛиц КАК НастройкиОрганизацийФизическихЛиц
	|ГДЕ
	|	НастройкиОрганизацийФизическихЛиц.ЗаполнениеПроизводится";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьУтраченныхФизическихЛицОрганизаций();
	КонецЕсли;
	
	ОбновитьПринадлежностьФизическихЛиц = Истина;
	ОбновитьПринадлежностьФизическихЛицОрганизаций(ОбновитьПринадлежностьФизическихЛиц);
	
	Если Не ОбновитьПринадлежностьФизическихЛиц Тогда
		ЗарегистрироватьЗавершенияЗаполненияНастройкиОрганизацийФизическихЛиц();
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПринадлежностиФизическихЛицПодразделений(ПараметрыОбновления) Экспорт
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПодразделенийФизическихЛиц.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится
	|ИЗ
	|	РегистрСведений.НастройкиПодразделенийФизическихЛиц КАК НастройкиПодразделенийФизическихЛиц
	|ГДЕ
	|	НастройкиПодразделенийФизическихЛиц.ЗаполнениеПроизводится";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьУтраченныхФизическихЛицПодразделений();
	КонецЕсли;
	
	ОбновитьПринадлежностьФизическихЛиц = Истина;
	ОбновитьПринадлежностьФизическихЛицПодразделений(ОбновитьПринадлежностьФизическихЛиц);
	
	Если Не ОбновитьПринадлежностьФизическихЛиц Тогда
		ЗарегистрироватьЗавершенияЗаполненияНастройкиПодразделенийФизическихЛиц();
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОрганизацииСотрудников(ПараметрыОбновления) Экспорт
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоОрганизациям() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОрганизацийСотрудников.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится
	|ИЗ
	|	РегистрСведений.НастройкиОрганизацийСотрудников КАК НастройкиОрганизацийСотрудников
	|ГДЕ
	|	НастройкиОрганизацийСотрудников.ЗаполнениеПроизводится";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьУтраченныеОрганизацииСотрудников();
	КонецЕсли;
	
	ОбновитьОрганизацииСотрудников = Истина;
	ОбновитьОрганизацииСотрудников(ОбновитьОрганизацииСотрудников);
	
	Если Не ОбновитьОрганизацииСотрудников Тогда
		ЗарегистрироватьЗавершенияЗаполненияНастройкиОрганизацийСотрудников();
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПодразделенияСотрудников(ПараметрыОбновления) Экспорт
	
	Если Не ИспользуютсяУзлыРИБСОтборомПоПодразделениям() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПодразделенийСотрудников.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится
	|ИЗ
	|	РегистрСведений.НастройкиПодразделенийСотрудников КАК НастройкиПодразделенийСотрудников
	|ГДЕ
	|	НастройкиПодразделенийСотрудников.ЗаполнениеПроизводится";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьУтраченныеПодразделенияСотрудников();
	КонецЕсли;
	
	ОбновитьПодразделенияСотрудников = Истина;
	ОбновитьПодразделенияСотрудников(ОбновитьПодразделенияСотрудников);
	
	Если Не ОбновитьПодразделенияСотрудников Тогда
		ЗарегистрироватьЗавершенияЗаполненияНастройкиПодразделенийСотрудников();
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользованиеСинхронизацииСОтборами(ПараметрыОбновления) Экспорт

	ПараметрыОбновления.ОбработкаЗавершена = Ложь;

	ИспользуютсяУзлыРИБСОтборомПоОрганизациям = ИспользуютсяУзлыРИБСОтборомПоОрганизациям();
	Если Константы.ИспользуетсяСинхронизацияДанныхСОтборомПоОрганизациям.Получить() <> ИспользуютсяУзлыРИБСОтборомПоОрганизациям Тогда
		Константы.ИспользуетсяСинхронизацияДанныхСОтборомПоОрганизациям.Установить(ИспользуютсяУзлыРИБСОтборомПоОрганизациям);
	КонецЕсли;

	ИспользуютсяУзлыРИБСОтборомПоПодразделениям = ИспользуютсяУзлыРИБСОтборомПоПодразделениям();
	Если Константы.ИспользуетсяСинхронизацияДанныхСОтборомПоПодразделениям.Получить() <> ИспользуютсяУзлыРИБСОтборомПоПодразделениям Тогда
		Константы.ИспользуетсяСинхронизацияДанныхСОтборомПоПодразделениям.Установить(ИспользуютсяУзлыРИБСОтборомПоПодразделениям);
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

// Определяет произведено ли заполнение принадлежности физических лиц к указанным организациям
Функция ПринадлежностьФизическихЛицПоОрганизациямЗаполнена()
	
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиОрганизацийФизическихЛиц.ЗаполнениеПроизведено), ЛОЖЬ) КАК ЗаполнениеПроизведено
	|ИЗ
	|	РегистрСведений.НастройкиОрганизацийФизическихЛиц КАК НастройкиОрганизацийФизическихЛиц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаполнениеПроизведено;
	КонецЕсли;
	
	// Если нет записей в регистре, то считаем, что заполнение связей физических лиц не требуется 
	Возврат Истина;
	
КонецФункции

// Регистрирует изменения всех физических лиц, чтобы произвести полное заполнение их принадлежности к организациям
//
Процедура ЗарегистрироватьУтраченныхФизическихЛицОрганизаций()
	
	// Очистим регистр утраченных.
	РегистрыСведений.ОрганизацииФизическихЛицУтраченные.СоздатьНаборЗаписей().Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииФизическихЛицУтраченные КАК ОрганизацииФизическихЛицУтраченные
		|		ПО ФизическиеЛица.Ссылка = ОрганизацииФизическихЛицУтраченные.ФизическоеЛицо
		|ГДЕ
		|	ОрганизацииФизическихЛицУтраченные.ФизическоеЛицо ЕСТЬ NULL";
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ОрганизацииФизическихЛицУтраченные");
	
	Продолжать = Истина;
	Пока Продолжать Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = РегистрыСведений.ОрганизацииФизическихЛицУтраченные.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
					НаборЗаписей.Добавить().ФизическоеЛицо = Выборка.ФизическоеЛицо;
					НаборЗаписей.Записать();
				КонецЦикла;
			Иначе
				Продолжать = Ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьВЖурналРегистрации(
				НСтр("ru = 'Заполнение утраченных организаций физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ФизическиеЛица.Ссылка) КАК КоличествоФизическихЛиц
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	КоличествоФизическихЛиц = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоФизическихЛиц = Выборка.КоличествоФизическихЛиц;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиОрганизацийФизическихЛиц.СоздатьНаборЗаписей();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ФизическихЛицКОбработке = КоличествоФизическихЛиц;
	НоваяЗапись.ЗаполнениеПроизводится = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Регистрирует изменения всех физических лиц, чтобы произвести полное заполнение их принадлежности к структурным подразделениям
//
Процедура ЗарегистрироватьУтраченныхФизическихЛицПодразделений()
	
	// Очистим регистр утраченных.
	РегистрыСведений.ПодразделенияФизическихЛицУтраченные.СоздатьНаборЗаписей().Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияФизическихЛицУтраченные КАК ПодразделенияФизическихЛицУтраченные
		|		ПО ФизическиеЛица.Ссылка = ПодразделенияФизическихЛицУтраченные.ФизическоеЛицо
		|ГДЕ
		|	ПодразделенияФизическихЛицУтраченные.ФизическоеЛицо ЕСТЬ NULL";
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ПодразделенияФизическихЛицУтраченные");
	
	Продолжать = Истина;
	Пока Продолжать Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = РегистрыСведений.ПодразделенияФизическихЛицУтраченные.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
					НаборЗаписей.Добавить().ФизическоеЛицо = Выборка.ФизическоеЛицо;
					НаборЗаписей.Записать();
				КонецЦикла;
			Иначе
				Продолжать = Ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьВЖурналРегистрации(
				НСтр("ru = 'Заполнение утраченных подразделений физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ФизическиеЛица.Ссылка) КАК КоличествоФизическихЛиц
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	КоличествоФизическихЛиц = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоФизическихЛиц = Выборка.КоличествоФизическихЛиц;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПодразделенийФизическихЛиц.СоздатьНаборЗаписей();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ФизическихЛицКОбработке = КоличествоФизическихЛиц;
	НоваяЗапись.ЗаполнениеПроизводится = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Регистрирует принадлежность указанных физических лиц к организациям.
//
Процедура ЗарегистрироватьОрганизацииФизическихЛицУтраченные(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ПроверитьПринадлежностьФизическихЛицУтраченные(Метаданные.РегистрыСведений.ОрганизацииФизическихЛиц, 
		Метаданные.РегистрыСведений.ОрганизацииФизическихЛицУтраченные, "Организация");
	
КонецПроцедуры

// Регистрирует принадлежность указанных физических лиц к структурным подразделения.
//
Процедура ЗарегистрироватьПодразделенияФизическихЛицУтраченные(ПараметрыОбновления = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ПроверитьПринадлежностьФизическихЛицУтраченные(Метаданные.РегистрыСведений.ПодразделенияФизическихЛиц, 
		Метаданные.РегистрыСведений.ПодразделенияФизическихЛицУтраченные, "Подразделение");
	
КонецПроцедуры

Процедура ОчиститьПринадлежностиФизическихЛиц(ТаблицаУтраченных, МетаданныеРегистра, ИмяПринадлежности)
	
	Для Каждого СтрокаТаблицы Из ТаблицаУтраченных Цикл
		// Очистим связь физического лица.
		НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(СтрокаТаблицы.ФизическоеЛицо);
		НаборЗаписей.Отбор[ИмяПринадлежности].Установить(СтрокаТаблицы[ИмяПринадлежности]);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПринадлежностьФизическихЛицОрганизаций(Продолжать)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОрганизацииФизическихЛицУтраченные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииФизическихЛицУтраченные КАК ОрганизацииФизическихЛицУтраченные
		|ГДЕ
		|	ОрганизацииФизическихЛицУтраченные.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ОрганизацииФизическихЛиц");
	Блокировка.Добавить("РегистрСведений.НастройкиОрганизацийФизическихЛиц");
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОрганизацииФизическихЛицУтраченные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Справочники.Организации.ПустаяСсылка());

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаУтраченных = РезультатЗапроса.Выгрузить();
			МассивФизическихЛиц = ТаблицаУтраченных.ВыгрузитьКолонку("ФизическоеЛицо");
			ПроверяемыеОбъектыМетаданных = ОбъектыПринадлежностиФизическихЛицОрганизациям();
			ТаблицаПринадлежностиФизическихЛиц = ТаблицаПринадлежностиФизическихЛицОрганизаций(МассивФизическихЛиц, ПроверяемыеОбъектыМетаданных);
			ТаблицаПринадлежностиФизическихЛиц.Сортировать("ФизическоеЛицо", Новый СравнениеЗначений);
			Обход = Обработки.ОбходКоллекции.НовыйОбход(ТаблицаПринадлежностиФизическихЛиц);
			ОбработаноФизическихЛиц = 0;
			Пока Обход.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				ФизическоеЛицо = Обход.ТекущиеДанные().ФизическоеЛицо;
				Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
					Продолжить;
				КонецЕсли;
				НаборЗаписей = РегистрыСведений.ОрганизацииФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
				Пока Обход.Следующий() Цикл
					Организация = Обход.ТекущиеДанные().Принадлежность;
					Если Не ЗначениеЗаполнено(Организация) Тогда
						Продолжить;
					КонецЕсли;
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Организация = Организация;
					НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
					НоваяЗапись.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
				КонецЦикла;
				НаборЗаписей.Записать();
				ОбработаноФизическихЛиц = ОбработаноФизическихЛиц + 1;
			КонецЦикла;
			ОчиститьПринадлежностиФизическихЛиц(ТаблицаУтраченных, 
				Метаданные.РегистрыСведений.ОрганизацииФизическихЛицУтраченные, "Организация");
			НаборЗаписей = РегистрыСведений.НастройкиОрганизацийФизическихЛиц.СоздатьНаборЗаписей();
			Если ОбработаноФизическихЛиц <> 0 Тогда
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей[0].ФизическихЛицОбработано = НаборЗаписей[0].ФизическихЛицОбработано + ОбработаноФизическихЛиц;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжать = Ложь;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Обновление принадлежности организаций физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПринадлежностьФизическихЛицПодразделений(Продолжать)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПодразделенияФизическихЛицУтраченные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение
		|ИЗ
		|	РегистрСведений.ПодразделенияФизическихЛицУтраченные КАК ПодразделенияФизическихЛицУтраченные
		|ГДЕ
		|	ПодразделенияФизическихЛицУтраченные.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ПодразделенияФизическихЛиц");
	Блокировка.Добавить("РегистрСведений.НастройкиПодразделенийФизическихЛиц");
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодразделенияФизическихЛицУтраченные");
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаУтраченных = РезультатЗапроса.Выгрузить();
			МассивФизическихЛиц = ТаблицаУтраченных.ВыгрузитьКолонку("ФизическоеЛицо");
			ПроверяемыеОбъектыМетаданных = ОбъектыПринадлежностиФизическихЛицПодразделениям();
			ТаблицаПринадлежностиФизическихЛиц = ТаблицаПринадлежностиФизическихЛицПодразделений(МассивФизическихЛиц, ПроверяемыеОбъектыМетаданных);
			ТаблицаПринадлежностиФизическихЛиц.Сортировать("ФизическоеЛицо", Новый СравнениеЗначений);
			Обход = Обработки.ОбходКоллекции.НовыйОбход(ТаблицаПринадлежностиФизическихЛиц);
			ОбработаноФизическихЛиц = 0;
			Пока Обход.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				ФизическоеЛицо = Обход.ТекущиеДанные().ФизическоеЛицо;
				Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
					Продолжить;
				КонецЕсли;
				НаборЗаписей = РегистрыСведений.ПодразделенияФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
				Пока Обход.Следующий() Цикл
					Принадлежность = Обход.ТекущиеДанные().Принадлежность;
					Если Не ЗначениеЗаполнено(Принадлежность) Тогда
						Продолжить;
					КонецЕсли;
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Подразделение = Принадлежность;
					НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
				КонецЦикла;
				НаборЗаписей.Записать();
				ОбработаноФизическихЛиц = ОбработаноФизическихЛиц + 1;
			КонецЦикла;
			ОчиститьПринадлежностиФизическихЛиц(ТаблицаУтраченных, 
				Метаданные.РегистрыСведений.ПодразделенияФизическихЛицУтраченные, "Подразделение");
			НаборЗаписей = РегистрыСведений.НастройкиПодразделенийФизическихЛиц.СоздатьНаборЗаписей();
			Если ОбработаноФизическихЛиц <> 0 Тогда
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей[0].ФизическихЛицОбработано = НаборЗаписей[0].ФизическихЛицОбработано + ОбработаноФизическихЛиц;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжать = Ложь;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Обновление принадлежности подразделений физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьЗавершенияЗаполненияНастройкиОрганизацийФизическихЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииФизическихЛицУтраченные.Организация КАК ПустаяОрганизация
		|ИЗ
		|	РегистрСведений.ОрганизацииФизическихЛицУтраченные КАК ОрганизацииФизическихЛицУтраченные
		|ГДЕ
		|	ОрганизацииФизическихЛицУтраченные.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОрганизацииФизическихЛицУтраченные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Справочники.Организации.ПустаяСсылка());

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			НаборЗаписей = РегистрыСведений.НастройкиОрганизацийФизическихЛиц.СоздатьНаборЗаписей();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ЗаполнениеПроизведено = Истина;
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Заполнение организаций физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьЗавершенияЗаполненияНастройкиПодразделенийФизическихЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодразделенияФизическихЛицУтраченные.Подразделение КАК ПустоеПодразделение
		|ИЗ
		|	РегистрСведений.ПодразделенияФизическихЛицУтраченные КАК ПодразделенияФизическихЛицУтраченные
		|ГДЕ
		|	ПодразделенияФизическихЛицУтраченные.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодразделенияФизическихЛицУтраченные");
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			НаборЗаписей = РегистрыСведений.НастройкиПодразделенийФизическихЛиц.СоздатьНаборЗаписей();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ЗаполнениеПроизведено = Истина;
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Заполнение подразделений физических лиц'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#Область ИзменениеОбъектовПринадлежностиФизическихЛиц

Функция ДанныеОбъекта(Источник)
	
	МассивПринадлежностей = Новый Массив;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Источник.Метаданные().ПолноеИмя());
	МассивРеквизитовПринадлежности = МенеджерОбъекта.ПринадлежностиОбъекта();
	
	ТипыПринадлежности = Новый Массив;
	ТипыПринадлежности.Добавить(Тип("СправочникСсылка.Организации"));
	ТипыПринадлежности.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ОписаниеТиповПринадлежности = Новый ОписаниеТипов(ТипыПринадлежности);
	
	МассивПринадлежностей = Новый Массив;
	Для Каждого ПолныйПутьКРеквизиту Из МассивРеквизитовПринадлежности Цикл
		ОбщегоНазначенияКлиентСервер.Проверить(Не ПустаяСтрока(ПолныйПутьКРеквизиту), 
			СтрШаблон(НСтр("ru = 'Пустой путь к реквизиту принадлежности для объекта типа ""%1""'"), ТипЗнч(Источник)),
			"СинхронизацияДанныхЗарплатаКадрыСервер.ДанныеОбъекта");
		ИменаРеквизитов = СтрРазделить(ПолныйПутьКРеквизиту, ".");
		ПутьКРеквизиту = ИменаРеквизитов[0];
		ОбщегоНазначенияКлиентСервер.Проверить(ОбщегоНазначения.ЕстьРеквизитОбъекта(ПутьКРеквизиту, Источник.Метаданные()), 
			СтрШаблон(НСтр("ru = 'Некорректный путь к реквизиту ""%1"" для объекта типа ""%2""'"), 
				ПолныйПутьКРеквизиту, ТипЗнч(Источник)),
			"СинхронизацияДанныхЗарплатаКадрыСервер.ДанныеОбъекта");
		ЗначениеРеквизита = Источник[ПутьКРеквизиту];
		Если ИменаРеквизитов.Количество() > 1 Тогда
			ИменаРеквизитов.Удалить(0);
			ПутьКРеквизиту = СтрСоединить(ИменаРеквизитов, ".");
			ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеРеквизита, ПутьКРеквизиту);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.Проверить(ОписаниеТиповПринадлежности.СодержитТип(ТипЗнч(ЗначениеРеквизита)), 
			СтрШаблон(НСтр("ru = 'Некорректный тип значения (%1). Для объекта «%3» указан путь к реквизиту «%2».'"),
				ТипЗнч(ЗначениеРеквизита), ПолныйПутьКРеквизиту, ТипЗнч(Источник)),
			"СинхронизацияДанныхЗарплатаКадрыСервер.ДанныеОбъекта");
		МассивПринадлежностей.Добавить(ЗначениеРеквизита);
	КонецЦикла;
	
	СоставОбъекта = ЗарплатаКадрыСоставДокументов.СоставОбъекта(Источник);
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("МассивПринадлежностей", МассивПринадлежностей);
	ДанныеОбъекта.Вставить("МассивФизическихЛиц", СоставОбъекта.ФизическиеЛица);
	ДанныеОбъекта.Вставить("МассивСотрудников", СоставОбъекта.СотрудникиФизическиеЛица.ВыгрузитьКолонку("Сотрудник"));
	ДанныеОбъекта.Вставить("МассивРеквизитовПринадлежности", МассивРеквизитовПринадлежности);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Процедура ЗарегистрироватьУтраченныхФизическихЛицПриЗаписи(Источник, ДанныеОбъекта, МетаданныеРегистра, ИмяПринадлежности)
	
	// Для новых объектов не регистрируем утраченные связи
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПринадлежностейУтраченные = Новый Массив;
	МассивФизическихЛицУтраченные = Новый Массив;
	
	МассивПрежнихПринадлежностей = Новый Массив;
	Для Каждого ИмяРеквизитаОбъекта Из ДанныеОбъекта.МассивРеквизитовПринадлежности Цикл
		ИмяРеквизитаОбъекта = СтрЗаменить(ИмяРеквизитаОбъекта, ".", "");
		МассивПрежнихПринадлежностей.Добавить(Источник.ДополнительныеСвойства.ПрежниеЗначенияПринадлежностьФизическихЛиц[ИмяРеквизитаОбъекта]);
	КонецЦикла;
	МассивРазности = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивПрежнихПринадлежностей, ДанныеОбъекта.МассивПринадлежностей);
	
	Если МассивРазности.Количество() = 0 Тогда
		
		МассивПринадлежностейУтраченные = ДанныеОбъекта.МассивПринадлежностей;
		// Принадлежность физических лиц не изменилась, регистрируем утраченных изменившихся физических лиц.
		СоответствиеФизическихЛиц = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ДанныеОбъекта.МассивФизическихЛиц);
		Для каждого ФизическоеЛицо Из Источник.ДополнительныеСвойства.ПрежниеЗначенияПринадлежностьФизическихЛиц.ФизическиеЛица Цикл
			Если СоответствиеФизическихЛиц.Получить(ФизическоеЛицо) = Неопределено Тогда
				МассивФизическихЛицУтраченные.Добавить(ФизическоеЛицо);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		// Изменилась принадлежность физических лиц, всех прежних физических лиц регистрируем как утраченные с измененными принадлежностями.
		МассивПринадлежностейУтраченные = МассивРазности;
		МассивФизическихЛицУтраченные = Источник.ДополнительныеСвойства.ПрежниеЗначенияПринадлежностьФизическихЛиц.ФизическиеЛица;
	КонецЕсли;
	
	ЗарегистрироватьУтраченныхФизическихЛиц(МассивПринадлежностейУтраченные, 
		МассивФизическихЛицУтраченные, МетаданныеРегистра, ИмяПринадлежности);
	
	Если МассивПринадлежностейУтраченные.Количество() > 0 И МассивФизическихЛицУтраченные.Количество() > 0 Тогда
		Источник.ДополнительныеСвойства.Вставить("Зарегистрировать" + МетаданныеРегистра.Имя, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ТаблицаПринадлежностиФизическихЛицПоДокументам(МассивФизическихЛиц, ОбъектыМетаданных, ТипПринадлежности)
	
	ТаблицаПринадлежностиДокументы = ЗарплатаКадрыСоставДокументов.ДокументыФизическихЛиц(МассивФизическихЛиц, ОбъектыМетаданных);
	ТаблицаПринадлежностиДокументы.Колонки.Добавить("Принадлежность", ТипПринадлежности);
	
	СоответствиеОбъектов = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ОбъектыМетаданных);
	Для Каждого СтрокаТаблицы Из ТаблицаПринадлежностиДокументы Цикл
		МетаданныеДокумента = СтрокаТаблицы.ДокументФизическогоЛица.Метаданные();
		МассивДокументов = СоответствиеОбъектов.Получить(МетаданныеДокумента);
		Если ТипЗнч(МассивДокументов) <> Тип("Массив") Тогда
			МассивДокументов = Новый Массив;
			СоответствиеОбъектов.Вставить(МетаданныеДокумента, МассивДокументов);
		КонецЕсли;
		МассивДокументов.Добавить(СтрокаТаблицы.ДокументФизическогоЛица);
	КонецЦикла;
	
	МассивЗапросов = Новый Массив;
	ПараметрыЗапроса = Новый Структура;
	Для каждого ЭлементСоответствия Из СоответствиеОбъектов Цикл
		Если ЭлементСоответствия.Значение = Истина Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаДокумента = ЭлементСоответствия.Ключ.ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТаблицаДокумента);
		ПринадлежностиОбъекта = МенеджерОбъекта.ПринадлежностиОбъекта();
		Для Каждого ИмяПринадлежности Из ПринадлежностиОбъекта Цикл
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК ДокументФизическогоЛица,
			|	ТаблицаДокумента.Организация КАК Принадлежность
			|ИЗ
			|	&ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";
			
			ИмяПараметраСписокДокументов = "СписокДокументов" + ЭлементСоответствия.Ключ.Имя + ИмяПринадлежности;
			ПараметрыЗапроса.Вставить(ИмяПараметраСписокДокументов, ЭлементСоответствия.Значение);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокДокументов", "&" + ИмяПараметраСписокДокументов);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДокумента", ТаблицаДокумента);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокумента.Организация", "ТаблицаДокумента." + ИмяПринадлежности);
			
			МассивЗапросов.Добавить(ТекстЗапроса);
		КонецЦикла;
	КонецЦикла;
	Если МассивЗапросов.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(МассивЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
		
		ТаблицаПринадлежностиДокументы.Индексы.Добавить("ДокументФизическогоЛица");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора = Новый Структура("ДокументФизическогоЛица", Выборка.ДокументФизическогоЛица);
			НайденныеСтроки = ТаблицаПринадлежностиДокументы.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Принадлежность = Выборка.Принадлежность;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПринадлежностиДокументы;
	
КонецФункции

Функция ТаблицаПринадлежностиФизическихЛицПоСправочникам(МассивФизическихЛиц, ОбъектыМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	
	МассивЗапросов = Новый Массив;
	Для каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСправочника.Принадлежность КАК Принадлежность,
		|	ТаблицаСправочника.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	&ТаблицаСправочника КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.ФизическоеЛицо В(&МассивФизическихЛиц)
		|	И ТаблицаСправочника.Принадлежность <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		
		ТаблицаСправочника = ОбъектМетаданных.ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТаблицаСправочника);
		ПринадлежностиОбъекта = МенеджерОбъекта.ПринадлежностиОбъекта();
		Для Каждого ИмяПринадлежности Из ПринадлежностиОбъекта Цикл
			
			ТекстЗапросаПринадлежности = СтрЗаменить(ТекстЗапроса, "&ТаблицаСправочника", ТаблицаСправочника);
			ТекстЗапросаПринадлежности = СтрЗаменить(ТекстЗапросаПринадлежности, "ТаблицаСправочника.Принадлежность", "ТаблицаСправочника." + ИмяПринадлежности);
			Если ТаблицаСправочника = "Справочник.Организации" Тогда
				ТекстЗапросаПринадлежности = СтрЗаменить(ТекстЗапросаПринадлежности, "ТаблицаСправочника.ФизическоеЛицо", "ТаблицаСправочника.ИндивидуальныйПредприниматель");
				ТекстЗапросаПринадлежности = ТекстЗапросаПринадлежности + "
				|		И ТаблицаСправочника.ИндивидуальныйПредприниматель <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
			КонецЕсли;
			
			МассивЗапросов.Добавить(ТекстЗапросаПринадлежности);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТаблицаПринадлежностиФизическихЛицПоМестуВСтруктуреПредприятия(МассивФизическихЛиц)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	&ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляВТКадровыеДанныеСотрудников
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо В(&ФизическиеЛица)";
	Запрос.Выполнить();
	
	ОписательВременныхТаблицКД = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДляВТКадровыеДанныеСотрудников");
	КадровыеДанные = "МестоВСтруктуреПредприятия";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблицКД, Истина, КадровыеДанные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиПоМестуРаботы.МестоВСтруктуреПредприятия КАК Принадлежность,
	|	СотрудникиПоМестуРаботы.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК СотрудникиПоМестуРаботы
	|ГДЕ
	|	СотрудникиПоМестуРаботы.МестоВСтруктуреПредприятия <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТаблицаПринадлежностиФизическихЛицОрганизаций(МассивФизическихЛиц, ПроверяемыеОбъектыМетаданных)
	Возврат ТаблицаПринадлежностиФизЛиц(ПроверяемыеОбъектыМетаданных, МассивФизическихЛиц, Новый ОписаниеТипов("СправочникСсылка.Организации"));
КонецФункции

Функция ТаблицаПринадлежностиФизическихЛицПодразделений(МассивФизическихЛиц, ПроверяемыеОбъектыМетаданных)
	Возврат ТаблицаПринадлежностиФизЛиц(ПроверяемыеОбъектыМетаданных, МассивФизическихЛиц, Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
КонецФункции

Функция ТаблицаПринадлежностиФизЛиц(ПроверяемыеОбъектыМетаданных, МассивФизическихЛиц, ТипПринадлежности)
	
	Если ТипЗнч(ПроверяемыеОбъектыМетаданных) <> Тип("Массив") Тогда
		ПроверяемыеОбъектыМетаданных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПроверяемыеОбъектыМетаданных);
	КонецЕсли;
	ПроверяемыеОбъектыМетаданныхДокументы = Новый Массив;
	ПроверяемыеОбъектыМетаданныхСправочники = Новый Массив;
	ПроверяемыеОбъектыМетаданныхРегистры = Новый Массив;
	Для Каждого ПроверяемыйОбъект Из ПроверяемыеОбъектыМетаданных Цикл
		Если ОбщегоНазначения.ЭтоДокумент(ПроверяемыйОбъект) Тогда
			ПроверяемыеОбъектыМетаданныхДокументы.Добавить(ПроверяемыйОбъект);
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ПроверяемыйОбъект) Тогда
			ПроверяемыеОбъектыМетаданныхСправочники.Добавить(ПроверяемыйОбъект);
		ИначеЕсли ОбщегоНазначения.ЭтоРегистр(ПроверяемыйОбъект) Тогда
			ПроверяемыеОбъектыМетаданныхРегистры.Добавить(ПроверяемыйОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПринадлежности = Новый ТаблицаЗначений;
	ТаблицаПринадлежности.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПринадлежности.Колонки.Добавить("Принадлежность", ТипПринадлежности);
	
	// Документы
	Если ПроверяемыеОбъектыМетаданныхДокументы.Количество() > 0 Тогда
		ТаблицаПринадлежностиДокументы = ТаблицаПринадлежностиФизическихЛицПоДокументам(МассивФизическихЛиц, ПроверяемыеОбъектыМетаданныхДокументы, ТипПринадлежности);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПринадлежностиДокументы, ТаблицаПринадлежности);
	КонецЕсли;
	
	// Справочники
	Если ПроверяемыеОбъектыМетаданныхСправочники.Количество() > 0 Тогда
		ТаблицаПринадлежностиСправочники = ТаблицаПринадлежностиФизическихЛицПоСправочникам(МассивФизическихЛиц, ПроверяемыеОбъектыМетаданныхСправочники);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПринадлежностиСправочники, ТаблицаПринадлежности);
	КонецЕсли;
	
	// Регистр сведений
	Если ПроверяемыеОбъектыМетаданныхРегистры.Количество() > 0 Тогда
		ТаблицаПринадлежностиРегистры = ТаблицаПринадлежностиФизическихЛицПоМестуВСтруктуреПредприятия(МассивФизическихЛиц);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПринадлежностиРегистры, ТаблицаПринадлежности);
	КонецЕсли;
	
	ТаблицаПринадлежности.Свернуть("Принадлежность, ФизическоеЛицо");
	
	Возврат ТаблицаПринадлежности;
	
КонецФункции

Процедура ПроверитьПринадлежностьФизическихЛицУтраченные(МетаданныеРегистра, МетаданныеРегистраУтраченные, ИмяИзмерения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаРегистраУтраченные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаРегистраУтраченные.Принадлежность КАК Принадлежность
		|ИЗ
		|	&ТаблицаРегистраУтраченные КАК ТаблицаРегистраУтраченные";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаРегистраУтраченные", МетаданныеРегистраУтраченные.ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаРегистраУтраченные.Принадлежность", "ТаблицаРегистраУтраченные." + ИмяИзмерения);
	Если МетаданныеРегистра = Метаданные.РегистрыСведений.ОрганизацииФизическихЛиц Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК Принадлежность", "КАК Организация");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК Принадлежность", "КАК Подразделение");
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить(МетаданныеРегистра.ПолноеИмя());
	
	Продолжать = Истина;
	Пока Продолжать Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ТаблицаУтраченных = РезультатЗапроса.Выгрузить();
				ТаблицаПроверки = ТаблицаУтраченных.Скопировать();
				Если МетаданныеРегистра = Метаданные.РегистрыСведений.ОрганизацииФизическихЛиц Тогда
					ПроверяемыеОбъектыМетаданных = ОбъектыПринадлежностиФизическихЛицОрганизациям();
				Иначе
					ПроверяемыеОбъектыМетаданных = ОбъектыПринадлежностиФизическихЛицПодразделениям();
				КонецЕсли;
				Для Каждого ПроверяемыйОбъектМетаданных Из ПроверяемыеОбъектыМетаданных Цикл
					Если ТаблицаПроверки.Количество() = 0 Тогда
						Прервать;
					КонецЕсли;
					МассивФизическихЛиц = ТаблицаПроверки.ВыгрузитьКолонку("ФизическоеЛицо");
					Если МетаданныеРегистра = Метаданные.РегистрыСведений.ОрганизацииФизическихЛиц Тогда
						ТаблицаПринадлежностиФизическихЛиц = ТаблицаПринадлежностиФизическихЛицОрганизаций(МассивФизическихЛиц, ПроверяемыйОбъектМетаданных);
					Иначе
						ТаблицаПринадлежностиФизическихЛиц = ТаблицаПринадлежностиФизическихЛицПодразделений(МассивФизическихЛиц, ПроверяемыйОбъектМетаданных);
					КонецЕсли;
					ТаблицаПринадлежностиФизическихЛиц.Индексы.Добавить("ФизическоеЛицо, Принадлежность");
					МассивСтрокДляУдаления = Новый Массив;
					Для Каждого СтрокаТаблицы Из ТаблицаПроверки Цикл
						СтруктураОтбора = Новый Структура("ФизическоеЛицо, Принадлежность", СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы[ИмяИзмерения]);
						НайденныеСтроки = ТаблицаПринадлежностиФизическихЛиц.НайтиСтроки(СтруктураОтбора);
						Если НайденныеСтроки.Количество() > 0 Тогда
							МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
						КонецЕсли;
					КонецЦикла;
					Для Каждого СтрокаТаблицы Из МассивСтрокДляУдаления Цикл
						ТаблицаПроверки.Удалить(СтрокаТаблицы);
					КонецЦикла;
				КонецЦикла;
				ОчиститьПринадлежностиФизическихЛиц(ТаблицаПроверки, МетаданныеРегистра, ИмяИзмерения);
				ОчиститьПринадлежностиФизическихЛиц(ТаблицаУтраченных, МетаданныеРегистраУтраченные, ИмяИзмерения);
			Иначе
				Продолжать = Ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьВЖурналРегистрации(
				НСтр("ru = 'Проверка принадлежности утраченных связей физического лица'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектыПринадлежностиФизическихЛицОрганизациям()
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Метаданные.Справочники.Организации);
	МассивОбъектов.Добавить(Метаданные.Справочники.Сотрудники);
	МассивОбъектов.Добавить(Метаданные.Документы.ПриемНаРаботу);
	МассивОбъектов.Добавить(Метаданные.Документы.ПриемНаРаботуСписком);
	МассивОбъектов.Добавить(Метаданные.Документы.КадровыйПеревод);
	МассивОбъектов.Добавить(Метаданные.Документы.КадровыйПереводСписком);
	МассивОбъектов.Добавить(Метаданные.Документы.ИсполнительныйЛист);
	МассивОбъектов.Добавить(Метаданные.Документы.ДоговорРаботыУслуги);
	МассивОбъектов.Добавить(Метаданные.Документы.НазначениеПодработки);
	МассивОбъектов.Добавить(Метаданные.Документы.НачальнаяШтатнаяРасстановка);
	МассивОбъектов.Добавить(Метаданные.Документы.ПереводКДругомуРаботодателю);
	МассивОбъектов.Добавить(Метаданные.Документы.ПеремещениеВДругоеПодразделение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		МодульДивиденды = ОбщегоНазначения.ОбщийМодуль("Дивиденды");
		МодульДивиденды.ДополнитьОбъектыИзмененияОрганизацийФизическихЛиц(МассивОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		МодульКадровыйУчетВоеннослужащих = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетВоеннослужащих");
		МодульКадровыйУчетВоеннослужащих.ДополнитьОбъектыИзмененияОрганизацийФизическихЛиц(МассивОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ДополнитьОбъектыИзмененияОрганизацийФизическихЛиц(МассивОбъектов);
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ОбъектыПринадлежностиФизическихЛицПодразделениям()
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Метаданные.РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ДополнитьОбъектыИзмененияОрганизацийФизическихЛиц(МассивОбъектов);
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции
//
// Возвращаемое значение:
//		Булево - Истина, если принадлежности физических лиц по организациям заполнены, иначе Ложь.
//

#КонецОбласти

#Область Сотрудники

// Определяет произведено ли заполнение организаций сотрудников
//
// Возвращаемое значение:
//		Булево - Истина, если организации по сотрудникам заполнены, иначе Ложь.
//
Функция ОрганизацииСотрудниковЗаполнены()
	
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиОрганизацийСотрудников.ЗаполнениеПроизведено), ЛОЖЬ) КАК ЗаполнениеПроизведено
	|ИЗ
	|	РегистрСведений.НастройкиОрганизацийСотрудников КАК НастройкиОрганизацийСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаполнениеПроизведено;
	КонецЕсли;
	
	// Если нет записей в регистре, то считаем, что заполнение организаций по сотрудникам не требуется 
	Возврат Истина;
	
КонецФункции

// Определяет произведено ли заполнение структурных подразделений сотрудников
//
// Возвращаемое значение:
//		Булево - Истина, если структурные подразделения по сотрудникам заполнены, иначе Ложь.
//
Функция ПодразделенияСотрудниковЗаполнены()
	
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиПодразделенийСотрудников.ЗаполнениеПроизведено), ЛОЖЬ) КАК ЗаполнениеПроизведено
	|ИЗ
	|	РегистрСведений.НастройкиПодразделенийСотрудников КАК НастройкиПодразделенийСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаполнениеПроизведено;
	КонецЕсли;
	
	// Если нет записей в регистре, то считаем, что заполнение структурных подразделений по сотрудникам не требуется 
	Возврат Истина;
	
КонецФункции

// Регистрирует изменения всех сотрудников, чтобы произвести полное заполнение организаций по ним
//
Процедура ЗарегистрироватьУтраченныеОрганизацииСотрудников()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Очистим регистр утраченных.
	РегистрыСведений.ОрганизацииСотрудниковУтраченные.СоздатьНаборЗаписей().Записать();

	// Заполним регистр утраченных всеми сотрудниками, чтобы по ним запустить пересчет связей.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииСотрудниковУтраченные КАК ОрганизацииСотрудниковУтраченные
		|		ПО Сотрудники.Ссылка = ОрганизацииСотрудниковУтраченные.Сотрудник
		|ГДЕ
		|	ОрганизацииСотрудниковУтраченные.Сотрудник ЕСТЬ NULL";
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ОрганизацииСотрудниковУтраченные");
	
	Продолжать = Истина;
	Пока Продолжать Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = РегистрыСведений.ОрганизацииСотрудниковУтраченные.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
					НаборЗаписей.Добавить().Сотрудник = Выборка.Сотрудник;
					НаборЗаписей.Записать();
				КонецЦикла;
			Иначе
				Продолжать = Ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьВЖурналРегистрации(
				НСтр("ru = 'Заполнение сотрудников в утраченные связи с организацией'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Сотрудники.Ссылка) КАК КоличествоСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
	
	КоличествоСотрудников = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоСотрудников = Выборка.КоличествоСотрудников;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиОрганизацийСотрудников.СоздатьНаборЗаписей();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.СотрудниковКОбработке = КоличествоСотрудников;
	НоваяЗапись.ЗаполнениеПроизводится = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Регистрирует изменения всех сотрудников, чтобы произвести полное заполнение структурных подразделений по ним
//
Процедура ЗарегистрироватьУтраченныеПодразделенияСотрудников()
	
	// Очистим регистр утраченных.
	РегистрыСведений.ПодразделенияСотрудниковУтраченные.СоздатьНаборЗаписей().Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияСотрудниковУтраченные КАК ПодразделенияСотрудниковУтраченные
		|		ПО Сотрудники.Ссылка = ПодразделенияСотрудниковУтраченные.Сотрудник
		|ГДЕ
		|	ПодразделенияСотрудниковУтраченные.Сотрудник ЕСТЬ NULL";
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ПодразделенияСотрудниковУтраченные");
	
	Продолжать = Истина;
	Пока Продолжать Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = РегистрыСведений.ПодразделенияСотрудниковУтраченные.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
					НаборЗаписей.Добавить().Сотрудник = Выборка.Сотрудник;
					НаборЗаписей.Записать();
				КонецЦикла;
			Иначе
				Продолжать = Ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьВЖурналРегистрации(
				НСтр("ru = 'Заполнение сотрудников в утраченные связи с подразделением'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Сотрудники.Ссылка) КАК КоличествоСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
	КоличествоСотрудников = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоСотрудников = Выборка.КоличествоСотрудников;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПодразделенийСотрудников.СоздатьНаборЗаписей();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.СотрудниковКОбработке = КоличествоСотрудников;
	НоваяЗапись.ЗаполнениеПроизводится = Истина;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗарегистрироватьОрганизацииСотрудников(МассивОрганизаций, МассивСотрудников)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОрганизацииСотрудников.Организация КАК Принадлежность,
		|	ОрганизацииСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ОрганизацииСотрудников КАК ОрганизацииСотрудников
		|ГДЕ
		|	ОрганизацииСотрудников.Сотрудник В(&МассивСотрудников)
		|	И ОрганизацииСотрудников.Организация В(&МассивОрганизаций)";

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ОрганизацииСотрудников.ПолноеИмя());
	ЭлементБлокировки.ИсточникДанных = ТаблицаИзМассивов(
		ОписаниеКолонки("Сотрудник", МассивСотрудников, Новый ОписаниеТипов("СправочникСсылка.Сотрудники")),
		ОписаниеКолонки("Организация", МассивОрганизаций, Новый ОписаниеТипов("СправочникСсылка.Организации")));
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СуществующиеСвязи = Запрос.Выполнить().Выгрузить();
		СуществующиеСвязи.Индексы.Добавить("Сотрудник, Принадлежность");
		ЗарегистрироватьПринадлежностьСотрудников(СуществующиеСвязи, 
			МассивОрганизаций, МассивСотрудников, Метаданные.РегистрыСведений.ОрганизацииСотрудников, "Организация");
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Обновление связей сотрудников с организациями'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьПринадлежностьСотрудников(СуществующиеСвязи, МассивПринадлежностей, МассивСотрудников, МетаданныеРегистра, ИмяПринадлежности)
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		Для Каждого Принадлежность Из МассивПринадлежностей Цикл
			Если Не ЗначениеЗаполнено(Принадлежность) Или Не ЗначениеЗаполнено(Сотрудник) Тогда
				Продолжить;
			КонецЕсли;
			НайденныеСвязи = СуществующиеСвязи.НайтиСтроки(Новый Структура("Сотрудник, Принадлежность", Сотрудник, Принадлежность));
			Если НайденныеСвязи.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// Установим связь сотрудника.
			НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
			НаборЗаписей.Отбор[ИмяПринадлежности].Установить(Принадлежность);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись[ИмяПринадлежности] = Принадлежность;
			НоваяЗапись.Сотрудник = Сотрудник;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьОрганизацииСотрудников(ТаблицаОрганизацийСотрудников)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОрганизацийСотрудников Цикл
		// Очистим связь сотрудника.
		НаборЗаписей = РегистрыСведений.ОрганизацииСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.Сотрудник);
		НаборЗаписей.Отбор.Организация.Установить(СтрокаТаблицы.Организация);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПодразделенияСотрудников(ТаблицаПодразделенийСотрудников)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодразделенийСотрудников Цикл
		// Очистим связь сотрудника.
		НаборЗаписей = РегистрыСведений.ПодразделенияСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.Сотрудник);
		НаборЗаписей.Отбор.Подразделение.Установить(СтрокаТаблицы.Подразделение);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьОрганизацииСотрудниковУтраченные(ТаблицаОрганизацийСотрудниковУтраченных)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОрганизацийСотрудниковУтраченных Цикл
		// Очистим связь сотрудника.
		НаборЗаписей = РегистрыСведений.ОрганизацииСотрудниковУтраченные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.Сотрудник);
		НаборЗаписей.Отбор.Организация.Установить(СтрокаТаблицы.Организация);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПодразделенияСотрудниковУтраченные(ТаблицаПодразделенийСотрудниковУтраченных)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодразделенийСотрудниковУтраченных Цикл
		// Очистим связь сотрудника.
		НаборЗаписей = РегистрыСведений.ПодразделенияСотрудниковУтраченные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.Сотрудник);
		НаборЗаписей.Отбор.Подразделение.Установить(СтрокаТаблицы.Подразделение);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьОрганизацииСотрудников(Продолжать)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОрганизацииСотрудниковУтраченные.Сотрудник КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииСотрудниковУтраченные КАК ОрганизацииСотрудниковУтраченные
		|ГДЕ
		|	ОрганизацииСотрудниковУтраченные.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ОрганизацииСотрудников");
	Блокировка.Добавить("РегистрСведений.НастройкиОрганизацийСотрудников");
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОрганизацииСотрудниковУтраченные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Справочники.Организации.ПустаяСсылка());
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаУтраченных = РезультатЗапроса.Выгрузить();
			МассивСотрудников = ТаблицаУтраченных.ВыгрузитьКолонку("Сотрудник");
			ПроверяемыеОбъектыМетаданных = ОбъектыИзмененияОрганизацийСотрудников();
			ТаблицаСотрудников = ТаблицаОрганизацийСотрудников(ПроверяемыеОбъектыМетаданных, МассивСотрудников);
			ТаблицаСотрудников.Сортировать("Сотрудник", Новый СравнениеЗначений);
			СотрудниковОбработано = 0;
			Обход = Обработки.ОбходКоллекции.НовыйОбход(ТаблицаСотрудников);
			Пока Обход.СледующийПоЗначениюПоля("Сотрудник") Цикл
				Сотрудник = Обход.ТекущиеДанные().Сотрудник;
				Если Не ЗначениеЗаполнено(Сотрудник) Тогда
					Продолжить;
				КонецЕсли;
				НаборЗаписей = РегистрыСведений.ОрганизацииСотрудников.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
				Пока Обход.Следующий() Цикл
					Если Не ЗначениеЗаполнено(Обход.ТекущиеДанные().Принадлежность) Тогда
						Продолжить;
					КонецЕсли;
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Организация = Обход.ТекущиеДанные().Принадлежность;
					НоваяЗапись.Сотрудник = Сотрудник;
				КонецЦикла;
				НаборЗаписей.Записать();
				СотрудниковОбработано = СотрудниковОбработано + 1;
			КонецЦикла;
			ОчиститьОрганизацииСотрудниковУтраченные(ТаблицаУтраченных);
			НаборЗаписей = РегистрыСведений.НастройкиОрганизацийСотрудников.СоздатьНаборЗаписей();
			Если СотрудниковОбработано <> 0 Тогда
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей[0].СотрудниковОбработано = НаборЗаписей[0].СотрудниковОбработано + СотрудниковОбработано;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжать = Ложь;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Инициализация связей сотрудников с организациями'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПодразделенияСотрудников(Продолжать)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ПодразделенияСотрудниковУтраченные.Сотрудник КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение
		|ИЗ
		|	РегистрСведений.ПодразделенияСотрудниковУтраченные КАК ПодразделенияСотрудниковУтраченные
		|ГДЕ
		|	ПодразделенияСотрудниковУтраченные.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";

	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ПодразделенияСотрудников");
	Блокировка.Добавить("РегистрСведений.НастройкиПодразделенийСотрудников");
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодразделенияСотрудниковУтраченные");
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаУтраченных = РезультатЗапроса.Выгрузить();
			МассивСотрудников = ТаблицаУтраченных.ВыгрузитьКолонку("Сотрудник");
			ПроверяемыеОбъектыМетаданных = ОбъектыИзмененияПодразделенийСотрудников();
			ТаблицаСотрудников = ТаблицаПодразделенийСотрудников(ПроверяемыеОбъектыМетаданных, МассивСотрудников);
			ТаблицаСотрудников.Сортировать("Сотрудник", Новый СравнениеЗначений);
			Обход = Обработки.ОбходКоллекции.НовыйОбход(ТаблицаСотрудников);
			ОбработаноСотрудников = 0;
			Пока Обход.СледующийПоЗначениюПоля("Сотрудник") Цикл
				Сотрудник = Обход.ТекущиеДанные().Сотрудник;
				Если Не ЗначениеЗаполнено(Сотрудник) Тогда
					Продолжить;
				КонецЕсли;
				НаборЗаписей = РегистрыСведений.ПодразделенияСотрудников.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
				Пока Обход.Следующий() Цикл
					Если Не ЗначениеЗаполнено(Обход.ТекущиеДанные().Принадлежность) Тогда
						Продолжить;
					КонецЕсли;
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Подразделение = Обход.ТекущиеДанные().Принадлежность;
					НоваяЗапись.Сотрудник = Сотрудник;
				КонецЦикла;
				НаборЗаписей.Записать();
				ОбработаноСотрудников = ОбработаноСотрудников + 1;
			КонецЦикла;
			ОчиститьПодразделенияСотрудниковУтраченные(ТаблицаУтраченных);
			НаборЗаписей = РегистрыСведений.НастройкиПодразделенийСотрудников.СоздатьНаборЗаписей();
			Если ОбработаноСотрудников <> 0 Тогда
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей[0].СотрудниковОбработано = НаборЗаписей[0].СотрудниковОбработано + ОбработаноСотрудников;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжать = Ложь;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Инициализация связей сотрудников с подразделениями'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьЗавершенияЗаполненияНастройкиОрганизацийСотрудников()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииСотрудниковУтраченные.Организация КАК ПустаяОрганизация
		|ИЗ
		|	РегистрСведений.ОрганизацииСотрудниковУтраченные КАК ОрганизацииСотрудниковУтраченные
		|ГДЕ
		|	ОрганизацииСотрудниковУтраченные.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОрганизацииСотрудниковУтраченные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Справочники.Организации.ПустаяСсылка());
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			НаборЗаписей = РегистрыСведений.НастройкиОрганизацийСотрудников.СоздатьНаборЗаписей();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ЗаполнениеПроизведено = Истина;
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Заполнение организаций сотрудников'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьЗавершенияЗаполненияНастройкиПодразделенийСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодразделенияСотрудниковУтраченные.Подразделение КАК ПустоеПодразделение
		|ИЗ
		|	РегистрСведений.ПодразделенияСотрудниковУтраченные КАК ПодразделенияСотрудниковУтраченные
		|ГДЕ
		|	ПодразделенияСотрудниковУтраченные.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодразделенияСотрудниковУтраченные");
	ЭлементБлокировки.УстановитьЗначение("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			НаборЗаписей = РегистрыСведений.НастройкиПодразделенийСотрудников.СоздатьНаборЗаписей();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ЗаполнениеПроизведено = Истина;
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьВЖурналРегистрации(
			НСтр("ru = 'Завершение заполнения сотрудников подразделений'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПринадлежностиСотрудниковПоДокументам(ТаблицаПринадлежностиСотрудников, МассивСотрудников, ОбъектыМетаданных)
	
	ТаблицаПринадлежностиДокументы = ЗарплатаКадрыСоставДокументов.ДокументыСотрудников(МассивСотрудников, ОбъектыМетаданных);
	ТаблицаПринадлежностиДокументы.Колонки.Добавить("Принадлежность", ТаблицаПринадлежностиСотрудников.Колонки.Принадлежность.ТипЗначения);
	
	СоответствиеОбъектов = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ОбъектыМетаданных);
	Для Каждого СтрокаТаблицы Из ТаблицаПринадлежностиДокументы Цикл
		МетаданныеДокумента = СтрокаТаблицы.ДокументСотрудника.Метаданные();
		МассивДокументов = СоответствиеОбъектов.Получить(МетаданныеДокумента);
		Если ТипЗнч(МассивДокументов) <> Тип("Массив") Тогда
			МассивДокументов = Новый Массив;
			СоответствиеОбъектов.Вставить(МетаданныеДокумента, МассивДокументов);
		КонецЕсли;
		МассивДокументов.Добавить(СтрокаТаблицы.ДокументСотрудника);
	КонецЦикла;
	
	МассивЗапросов = Новый Массив;
	ПараметрыЗапроса = Новый Структура;
	Для каждого ЭлементСоответствия Из СоответствиеОбъектов Цикл
		Если ЭлементСоответствия.Значение = Истина Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаДокумента = ЭлементСоответствия.Ключ.ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТаблицаДокумента);
		ПринадлежностиОбъекта = МенеджерОбъекта.ПринадлежностиОбъекта();
		Для Каждого ИмяПринадлежности Из ПринадлежностиОбъекта Цикл
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК ДокументСотрудника,
			|	ТаблицаДокумента.Организация КАК Принадлежность
			|ИЗ
			|	&ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка В(&СписокДокументов)";
			
			ИмяПараметраСписокДокументов = "СписокДокументов" + ЭлементСоответствия.Ключ.Имя + ИмяПринадлежности;
			ПараметрыЗапроса.Вставить(ИмяПараметраСписокДокументов, ЭлементСоответствия.Значение);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокДокументов", "&" + ИмяПараметраСписокДокументов);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДокумента", ТаблицаДокумента);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокумента.Организация", "ТаблицаДокумента." + ИмяПринадлежности);
			
			МассивЗапросов.Добавить(ТекстЗапроса);
		КонецЦикла;
	КонецЦикла;
	Если МассивЗапросов.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(МассивЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
		
		ТаблицаПринадлежностиДокументы.Индексы.Добавить("ДокументСотрудника");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора = Новый Структура("ДокументСотрудника", Выборка.ДокументСотрудника);
			НайденныеСтроки = ТаблицаПринадлежностиДокументы.НайтиСтроки(СтруктураОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Принадлежность = Выборка.Принадлежность;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПринадлежностиДокументы, ТаблицаПринадлежностиСотрудников);
	
КонецПроцедуры

Процедура ДополнитьТаблицуПринадлежностиСотрудниковПоСправочникам(ТаблицаПринадлежностиСотрудников, МассивСотрудников, ОбъектыМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	МассивЗапросов = Новый Массив;
	Для каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСправочника.Принадлежность КАК Принадлежность,
		|	ТаблицаСправочника.Ссылка КАК Сотрудник
		|ИЗ
		|	&ТаблицаСправочника КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка В(&МассивСотрудников)";
		
		ТаблицаСправочника = ОбъектМетаданных.ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТаблицаСправочника);
		ПринадлежностиОбъекта = МенеджерОбъекта.ПринадлежностиОбъекта();
		Для Каждого ИмяПринадлежности Из ПринадлежностиОбъекта Цикл
			
			ТекстЗапросаПринадлежности = СтрЗаменить(ТекстЗапроса, "&ТаблицаСправочника", ТаблицаСправочника);
			ТекстЗапросаПринадлежности = СтрЗаменить(ТекстЗапросаПринадлежности, "ТаблицаСправочника.Принадлежность", "ТаблицаСправочника." + ИмяПринадлежности);
			
			МассивЗапросов.Добавить(ТекстЗапросаПринадлежности);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	ТаблицаПринадлежности = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПринадлежности, ТаблицаПринадлежностиСотрудников);
	
КонецПроцедуры

Процедура ДополнитьТаблицуПринадлежностиСотрудниковПоМестуВСтруктуреПредприятия(ТаблицаПринадлежностиСотрудников, МассивСотрудников)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	&ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляВТКадровыеДанныеСотрудников
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблицКД = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДляВТКадровыеДанныеСотрудников");
	КадровыеДанные = "МестоВСтруктуреПредприятия";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблицКД, Истина, КадровыеДанные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиПоМестуРаботы.МестоВСтруктуреПредприятия КАК Принадлежность,
	|	СотрудникиПоМестуРаботы.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК СотрудникиПоМестуРаботы
	|ГДЕ
	|	СотрудникиПоМестуРаботы.МестоВСтруктуреПредприятия <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	
	ТаблицаПринадлежности = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПринадлежности, ТаблицаПринадлежностиСотрудников);
	
КонецПроцедуры

Функция ТаблицаОрганизацийСотрудников(ПроверяемыеОбъектыМетаданных, МассивСотрудников)
	
	ТаблицаОрганизацийСотрудников = Новый ТаблицаЗначений;
	ТаблицаОрганизацийСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОрганизацийСотрудников.Колонки.Добавить("Принадлежность", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	ЗаполнитьТаблицуПринадлежностиСотрудников(ТаблицаОрганизацийСотрудников, ПроверяемыеОбъектыМетаданных, МассивСотрудников);
	
	Возврат ТаблицаОрганизацийСотрудников;
	
КонецФункции

Функция ТаблицаПодразделенийСотрудников(ПроверяемыеОбъектыМетаданных, МассивСотрудников)
	
	ТаблицаПодразделенийСотрудников = Новый ТаблицаЗначений;
	ТаблицаПодразделенийСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПодразделенийСотрудников.Колонки.Добавить("Принадлежность", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
	ЗаполнитьТаблицуПринадлежностиСотрудников(ТаблицаПодразделенийСотрудников, ПроверяемыеОбъектыМетаданных, МассивСотрудников);
	
	Возврат ТаблицаПодразделенийСотрудников;
	
КонецФункции

Процедура ЗаполнитьТаблицуПринадлежностиСотрудников(ТаблицаПринадлежностиСотрудников, ПроверяемыеОбъектыМетаданных, МассивСотрудников)
	
	Если ТипЗнч(ПроверяемыеОбъектыМетаданных) <> Тип("Массив") Тогда
		ПроверяемыеОбъектыМетаданных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПроверяемыеОбъектыМетаданных);
	КонецЕсли;
	ПроверяемыеОбъектыМетаданныхДокументы = Новый Массив;
	ПроверяемыеОбъектыМетаданныхСправочники = Новый Массив;
	ПроверяемыеОбъектыМетаданныхРегистры = Новый Массив;
	Для Каждого ПроверяемыйОбъект Из ПроверяемыеОбъектыМетаданных Цикл
		Если ОбщегоНазначения.ЭтоДокумент(ПроверяемыйОбъект) Тогда
			ПроверяемыеОбъектыМетаданныхДокументы.Добавить(ПроверяемыйОбъект);
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ПроверяемыйОбъект) Тогда
			ПроверяемыеОбъектыМетаданныхСправочники.Добавить(ПроверяемыйОбъект);
		ИначеЕсли ОбщегоНазначения.ЭтоРегистр(ПроверяемыйОбъект) Тогда
			ПроверяемыеОбъектыМетаданныхРегистры.Добавить(ПроверяемыйОбъект);
		КонецЕсли;
	КонецЦикла;
	
	// Документы
	Если ПроверяемыеОбъектыМетаданныхДокументы.Количество() > 0 Тогда
		ДополнитьТаблицуПринадлежностиСотрудниковПоДокументам(ТаблицаПринадлежностиСотрудников, МассивСотрудников, ПроверяемыеОбъектыМетаданныхДокументы);
	КонецЕсли;
	
	// Справочники
	Если ПроверяемыеОбъектыМетаданныхСправочники.Количество() > 0 Тогда
		ДополнитьТаблицуПринадлежностиСотрудниковПоСправочникам(ТаблицаПринадлежностиСотрудников, МассивСотрудников, ПроверяемыеОбъектыМетаданныхСправочники);
	КонецЕсли;
	
	// Регистр сведений
	Если ПроверяемыеОбъектыМетаданныхРегистры.Количество() > 0 Тогда
		ДополнитьТаблицуПринадлежностиСотрудниковПоМестуВСтруктуреПредприятия(ТаблицаПринадлежностиСотрудников, МассивСотрудников);
	КонецЕсли;
	
	ТаблицаПринадлежностиСотрудников.Свернуть("Принадлежность, Сотрудник");
	
КонецПроцедуры

Процедура ПроверитьОрганизацииСотрудниковУтраченные()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаРегистраУтраченные.Сотрудник КАК Сотрудник,
		|	ТаблицаРегистраУтраченные.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииСотрудниковУтраченные КАК ТаблицаРегистраУтраченные";
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить(Метаданные.РегистрыСведений.ОрганизацииСотрудниковУтраченные.ПолноеИмя());
	
	Продолжать = Истина;
	Пока Продолжать Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ТаблицаУтраченных = РезультатЗапроса.Выгрузить();
				ТаблицаПроверки = ТаблицаУтраченных.Скопировать();
				ПроверяемыеОбъектыМетаданных = ОбъектыИзмененияОрганизацийСотрудников();
				Для Каждого ПроверяемыйОбъектМетаданных Из ПроверяемыеОбъектыМетаданных Цикл
					Если ТаблицаПроверки.Количество() = 0 Тогда
						Прервать;
					КонецЕсли;
					МассивСотрудников = ТаблицаПроверки.ВыгрузитьКолонку("Сотрудник");
					ТаблицаОрганизацийСотрудников = ТаблицаОрганизацийСотрудников(ПроверяемыйОбъектМетаданных, МассивСотрудников);
					ТаблицаОрганизацийСотрудников.Индексы.Добавить("Сотрудник, Принадлежность");
					МассивСтрокДляУдаления = Новый Массив;
					Для Каждого СтрокаТаблицы Из ТаблицаПроверки Цикл
						СтруктураОтбора = Новый Структура("Сотрудник, Принадлежность", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.Организация);
						НайденныеСтроки = ТаблицаОрганизацийСотрудников.НайтиСтроки(СтруктураОтбора);
						Если НайденныеСтроки.Количество() > 0 Тогда
							МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
						КонецЕсли;
					КонецЦикла;
					Для Каждого СтрокаТаблицы Из МассивСтрокДляУдаления Цикл
						ТаблицаПроверки.Удалить(СтрокаТаблицы);
					КонецЦикла;
				КонецЦикла;
				ОчиститьОрганизацииСотрудников(ТаблицаПроверки);
				ОчиститьОрганизацииСотрудниковУтраченные(ТаблицаУтраченных);
			Иначе
				Продолжать = Ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьВЖурналРегистрации(
				НСтр("ru = 'Проверка утраченных связей сотрудников с организациями'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПодразделенияСотрудниковУтраченные()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаРегистраУтраченные.Сотрудник КАК Сотрудник,
		|	ТаблицаРегистраУтраченные.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.ПодразделенияСотрудниковУтраченные КАК ТаблицаРегистраУтраченные";
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить(Метаданные.РегистрыСведений.ПодразделенияСотрудниковУтраченные.ПолноеИмя());
	
	Продолжать = Истина;
	Пока Продолжать Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ТаблицаУтраченных = РезультатЗапроса.Выгрузить();
				ТаблицаПроверки = ТаблицаУтраченных.Скопировать();
				ПроверяемыеОбъектыМетаданных = ОбъектыИзмененияПодразделенийСотрудников();
				Для Каждого ПроверяемыйОбъектМетаданных Из ПроверяемыеОбъектыМетаданных Цикл
					Если ТаблицаПроверки.Количество() = 0 Тогда
						Прервать;
					КонецЕсли;
					МассивСотрудников = ТаблицаПроверки.ВыгрузитьКолонку("Сотрудник");
					ТаблицаПодразделенийСотрудников = ТаблицаПодразделенийСотрудников(ПроверяемыйОбъектМетаданных, МассивСотрудников);
					ТаблицаПодразделенийСотрудников.Индексы.Добавить("Сотрудник, Принадлежность");
					МассивСтрокДляУдаления = Новый Массив;
					Для Каждого СтрокаТаблицы Из ТаблицаПроверки Цикл
						СтруктураОтбора = Новый Структура("Сотрудник, Принадлежность", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.Подразделение);
						НайденныеСтроки = ТаблицаПодразделенийСотрудников.НайтиСтроки(СтруктураОтбора);
						Если НайденныеСтроки.Количество() > 0 Тогда
							МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
						КонецЕсли;
					КонецЦикла;
					Для каждого СтрокаТаблицы Из МассивСтрокДляУдаления Цикл
						ТаблицаПроверки.Удалить(СтрокаТаблицы);
					КонецЦикла;
				КонецЦикла;
				ОчиститьПодразделенияСотрудников(ТаблицаПроверки);
				ОчиститьПодразделенияСотрудниковУтраченные(ТаблицаУтраченных);
			Иначе
				Продолжать = Ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьВЖурналРегистрации(
				НСтр("ru = 'Проверка утраченных связей сотрудников с подразделениями'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектыИзмененияОрганизацийСотрудников()
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Метаданные.Справочники.Сотрудники);
	МассивОбъектов.Добавить(Метаданные.Документы.ПриемНаРаботу);
	МассивОбъектов.Добавить(Метаданные.Документы.ПриемНаРаботуСписком);
	МассивОбъектов.Добавить(Метаданные.Документы.ДоговорРаботыУслуги);
	МассивОбъектов.Добавить(Метаданные.Документы.НазначениеПодработки);
	МассивОбъектов.Добавить(Метаданные.Документы.НачальнаяШтатнаяРасстановка);
	МассивОбъектов.Добавить(Метаданные.Документы.ПеремещениеВДругоеПодразделение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		МодульКадровыйУчетВоеннослужащих = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетВоеннослужащих");
		МодульКадровыйУчетВоеннослужащих.ДополнитьОбъектыИзмененияОрганизацийСотрудников(МассивОбъектов);
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ОбъектыИзмененияПодразделенийСотрудников()
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Метаданные.РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия);
	
	Возврат МассивОбъектов;
	
КонецФункции

#Область ИзменениеОбъектовИзменяющихПринадлежностьСотрудников

Процедура ЗарегистрироватьУтраченныхСотрудниковПриЗаписи(Источник, ДанныеОбъекта, МетаданныеРегистра, ИмяПринадлежности)
	
	// Для новых объектов не регистрируем утраченные связи
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	МассивУтраченныхСвязей = Новый Массив;
	МассивУтраченныхСвязейПоСотрудникам = Новый Массив;
	
	МассивПрежнихПринадлежностей = Новый Массив;
	Для Каждого ИмяРеквизитаОбъекта Из ДанныеОбъекта.МассивРеквизитовПринадлежности Цикл
		МассивПрежнихПринадлежностей.Добавить(Источник.ДополнительныеСвойства.ПрежниеЗначенияСотрудников[ИмяРеквизитаОбъекта]);
	КонецЦикла;
	МассивРазности = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивПрежнихПринадлежностей, ДанныеОбъекта.МассивПринадлежностей);
	
	Если МассивРазности.Количество() = 0 Тогда
		
		МассивУтраченныхСвязей = ДанныеОбъекта.МассивПринадлежностей;
		// Связи сотрудников с организациями и структурными подразделениями не изменились, регистрируем утраченных изменившихся сотрудников.
		СоответствиеСотрудников = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ДанныеОбъекта.МассивСотрудников);
		Для каждого Сотрудник Из Источник.ДополнительныеСвойства.ПрежниеЗначенияСотрудников.Сотрудники Цикл
			Если СоответствиеСотрудников.Получить(Сотрудник) = Неопределено Тогда
				МассивУтраченныхСвязейПоСотрудникам.Добавить(Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		// Изменились связи сотрудников с организациями или подразделениями, всех прежних сотрудников регистрируем как
		// утраченные с измененными связями.
		МассивУтраченныхСвязей = МассивРазности;
		МассивУтраченныхСвязейПоСотрудникам = Источник.ДополнительныеСвойства.ПрежниеЗначенияСотрудников.Сотрудники;
	КонецЕсли;
	
	ЗарегистрироватьУтраченныхСотрудников(МассивУтраченныхСвязей, МассивУтраченныхСвязейПоСотрудникам, МетаданныеРегистра, ИмяПринадлежности);
	
	Если МассивУтраченныхСвязей.Количество() > 0 И МассивУтраченныхСвязейПоСотрудникам.Количество() > 0 Тогда
		Источник.ДополнительныеСвойства.Вставить("Зарегистрировать" + МетаданныеРегистра.Имя, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ОписаниеТипаПринадлежности(Имя)
	ТипыПоИмени = Новый Соответствие;
	ТипыПоИмени.Вставить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТипыПоИмени.Вставить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Возврат ТипыПоИмени[Имя];
КонецФункции

Функция ОписаниеКолонки(Имя, Заполнение, Тип)
	ОписаниеКолонки = Новый Структура;
	ОписаниеКолонки.Вставить("Имя", Имя);
	ОписаниеКолонки.Вставить("Заполнение", Заполнение);
	ОписаниеКолонки.Вставить("Тип", Тип);
	Возврат ОписаниеКолонки;
КонецФункции

Функция ТаблицаИзМассивов(Колонка1, Колонка2)
	
	ТаблицаИзМассивов = Новый ТаблицаЗначений;
	ТаблицаИзМассивов.Колонки.Добавить(Колонка1.Имя, Колонка1.Тип);
	ТаблицаИзМассивов.Колонки.Добавить(Колонка2.Имя, Колонка2.Тип);
	Для Каждого ЭлементМассива1 Из Колонка1.Заполнение Цикл
		Если Не ЗначениеЗаполнено(ЭлементМассива1) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ЭлементМассива2 Из Колонка2.Заполнение Цикл
			Если Не ЗначениеЗаполнено(ЭлементМассива2) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаИзМассивов.Добавить();
			НоваяСтрока[Колонка1.Имя] = ЭлементМассива1;
			НоваяСтрока[Колонка2.Имя] = ЭлементМассива2;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаИзМассивов;
	
КонецФункции

Процедура ЗаписатьВЖурналРегистрации(ИмяСобытия)
	ЗаписьЖурналаРегистрации(
		СтрШаблон(НСтр("ru = 'Обмен данными.%1'", ОбщегоНазначения.КодОсновногоЯзыка()), ИмяСобытия), 
		УровеньЖурналаРегистрации.Ошибка, , , 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПроцедуры

Функция ЧислоПопытокОбработкиДанных()
	Возврат 10;
КонецФункции

#КонецОбласти