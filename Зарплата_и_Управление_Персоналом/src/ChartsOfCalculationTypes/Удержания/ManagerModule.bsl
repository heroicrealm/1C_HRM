#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура СоздатьУдержанияПоНастройкам(НастройкиРасчетаЗарплаты = Неопределено, КоллекторУдержаний = Неопределено, ПараметрыПланаВидовРасчета = Неопределено, ТекущиеНастройкиРасчетаЗарплаты = Неопределено) Экспорт
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли;
	
	Если ПараметрыПланаВидовРасчета = Неопределено Тогда
		ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	КонецЕсли;
	
	ЗаписыватьУдержания = Ложь;
	Если КоллекторУдержаний = Неопределено Тогда
		// Соответствие, в которое будем накапливать объекты для последующей "пакетной" записи.
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьУдержания = Истина;
	КонецЕсли;
	
	СвойстваУдержаний = СвойстваУдержанийПоКатегориям();
	
	// Профсоюзные взносы
	Если РасчетЗарплатыРасширенный.ИзмененаНастройкаРасчетаЗарплаты("ИспользоватьПрофсоюзныеВзносы", НастройкиРасчетаЗарплаты, ТекущиеНастройкиРасчетаЗарплаты) Тогда
		Если НастройкиРасчетаЗарплаты.ИспользоватьПрофсоюзныеВзносы Тогда
			Описание = ОписаниеУдержания();
			Описание.КатегорияУдержания	= Перечисления.КатегорииУдержаний.ПрофсоюзныеВзносы;
			ЗаполнитьЗначенияСвойств(Описание, СвойстваУдержаний[Перечисления.КатегорииУдержаний.ПрофсоюзныеВзносы]);
			Описание.Код					= НСтр("ru = 'ПРФВЗ'");
			Описание.Наименование			= НСтр("ru = 'Профсоюзные взносы'");
			Описание.КраткоеНаименование 	= НСтр("ru = 'Профвзносы'");
			Описание.ФормулаРасчета			= "РасчетнаяБаза * ПроцентПрофсоюзныхВзносов / 100";
			СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
		Иначе
			ОтключитьИспользованиеУдержания(КоллекторУдержаний, Перечисления.КатегорииУдержаний.ПрофсоюзныеВзносы);
		КонецЕсли;
	КонецЕсли;
	
	// Исполнительные документы
	Если РасчетЗарплатыРасширенный.ИзмененаНастройкаРасчетаЗарплаты("ИспользоватьИсполнительныеЛисты", НастройкиРасчетаЗарплаты, ТекущиеНастройкиРасчетаЗарплаты) Тогда
		Если НастройкиРасчетаЗарплаты.ИспользоватьИсполнительныеЛисты Тогда
			// Исполнительный лист
			Описание = ОписаниеУдержания();
			Описание.КатегорияУдержания			= Перечисления.КатегорииУдержаний.ИсполнительныйЛист;
			ЗаполнитьЗначенияСвойств(Описание, СвойстваУдержаний[Перечисления.КатегорииУдержаний.ИсполнительныйЛист]);
			Описание.Код						= НСтр("ru = 'ИСПДК'");
			Описание.Наименование				= НСтр("ru = 'Удержание по исполнительному документу'");
			Описание.КраткоеНаименование 		= НСтр("ru = 'Исп. лист'");
			СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
			
			// Вознаграждение платежному агенту.
			Описание = ОписаниеУдержания();
			Описание.КатегорияУдержания			= Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента;
			ЗаполнитьЗначенияСвойств(Описание, СвойстваУдержаний[Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента]);
			Описание.Код						= НСтр("ru = 'АГЕНТ'");
			Описание.Наименование				= НСтр("ru = 'Вознаграждение платежного агента'");
			Описание.КраткоеНаименование 		= НСтр("ru = 'Возн. плат. агента'");
			СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
			
			// Создание тарифов платежных агентов.
			Справочники.ТарифыПлатежныхАгентов.СоздатьТарифыПоНастройкам(НастройкиРасчетаЗарплаты);
		Иначе
			ОтключитьИспользованиеУдержания(КоллекторУдержаний, Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
			ОтключитьИспользованиеУдержания(КоллекторУдержаний, Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента);
		КонецЕсли;
	КонецЕсли;
	
	// ДСВ
	Если РасчетЗарплатыРасширенный.ИзмененаНастройкаРасчетаЗарплаты("ИспользоватьДСВ", НастройкиРасчетаЗарплаты, ТекущиеНастройкиРасчетаЗарплаты) Тогда
		Если НастройкиРасчетаЗарплаты.ИспользоватьДСВ Тогда
			Описание = ОписаниеУдержания();
			Описание.КатегорияУдержания			= Перечисления.КатегорииУдержаний.ДСВ;
			ЗаполнитьЗначенияСвойств(Описание, СвойстваУдержаний[Перечисления.КатегорииУдержаний.ДСВ]);
			Описание.Код						= НСтр("ru = 'ДСВЗН'");
			Описание.Наименование				= НСтр("ru = 'Добровольные страховые взносы'");
			Описание.КраткоеНаименование 		= НСтр("ru = 'Добр. страх. взносы'");
			Описание.ФормулаРасчета				= "РасчетнаяБазаСтраховыеВзносы * ПроцентДСВ / 100";
			СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
		Иначе
			ОтключитьИспользованиеУдержания(КоллекторУдержаний, Перечисления.КатегорииУдержаний.ДСВ);
		КонецЕсли;
	КонецЕсли;
	
	// Добровольные взносы в НПФ
	Если РасчетЗарплатыРасширенный.ИзмененаНастройкаРасчетаЗарплаты("ИспользоватьДобровольныеВзносыВНПФ", НастройкиРасчетаЗарплаты, ТекущиеНастройкиРасчетаЗарплаты) Тогда
		Если НастройкиРасчетаЗарплаты.ИспользоватьДобровольныеВзносыВНПФ Тогда
			Описание = ОписаниеУдержания();
			Описание.КатегорияУдержания			= Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ;
			ЗаполнитьЗначенияСвойств(Описание, СвойстваУдержаний[Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ]);
			Описание.Код						= НСтр("ru = 'ДВНПФ'");
			Описание.Наименование				= НСтр("ru = 'Добровольные взносы в НПФ'");
			Описание.КраткоеНаименование 		= НСтр("ru = 'Добр. взносы НПФ'");
			Описание.ФормулаРасчета				= "РасчетнаяБазаСтраховыеВзносы * ПроцентНПФ / 100";
			СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
		Иначе
			ОтключитьИспользованиеУдержания(КоллекторУдержаний, Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ);
		КонецЕсли;
	КонецЕсли;
	
	// Удержание в счет возмещения ущерба.
	Описание = ОписаниеУдержания();
	Описание.КатегорияУдержания			= Перечисления.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям;
	ЗаполнитьЗначенияСвойств(Описание, СвойстваУдержаний[Перечисления.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям]);
	Описание.Код						= НСтр("ru = 'ВЗМУЩ'");
	Описание.Наименование				= НСтр("ru = 'Удержание в счет возмещения ущерба'");
	Описание.КраткоеНаименование 		= НСтр("ru = 'Возмещ. ущерба'");
	Описание.ФормулаРасчета 			= "";
	Описание.Рассчитывается 			= Ложь;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.УдержаниеВСчетВозмещенияУщерба;
	Описание.Отбор = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьУдержаниеВСчетВозмещенияУщерба Тогда
		СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.УдержаниеВСчетВозмещенияУщерба = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Отбор = Новый Структура("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеУдержания(КоллекторУдержаний, Перечисления.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям, Отбор);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.СоздатьУдержаниеЗаНеотработанныеДниОтпускаВоеннослужащим(ПолучитьФункциональнуюОпцию("ИспользоватьВоеннуюСлужбу"), КоллекторУдержаний, СвойстваУдержаний);
	КонецЕсли;
	
	// Удержания по ученическому договору.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.СоздатьОтключитьУдержаниеПоУченическомуДоговору(КоллекторУдержаний);
	КонецЕсли;
	
	// Удержания за неотработанные дни отпуска
	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	Если НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания Тогда
		КатегорияУдержания = Перечисления.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска;
	Иначе
		КатегорияУдержания = Перечисления.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска;
	КонецЕсли;
	Если НастройкиРасчетаЗарплаты.СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.Удержание") Тогда
		
		Описание = ОписаниеУдержания();
		Описание.КатегорияУдержания = КатегорияУдержания;
		Описание.Отбор = "КатегорияУдержания"; 
		СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
	Иначе
		ОтключитьИспользованиеУдержания(КоллекторУдержаний, КатегорияУдержания);
	КонецЕсли;
	
	// Расставляем порядок для вновь созданных видов расчета.
	ЗаполнитьПорядокУдержаний(КоллекторУдержаний);
	
	Если ЗаписыватьУдержания Тогда
		РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

// Упорядочивает удержания в плане видов расчета.
//
Процедура ЗаполнитьПорядокУдержаний(КоллекторУдержаний) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Удержания.РеквизитДопУпорядочивания КАК Порядок
		|ИЗ
		|	ПланВидовРасчета.Удержания КАК Удержания
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Порядок = Выборка.Порядок + 1;
	Иначе
		Порядок = 1;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из КоллекторУдержаний Цикл
		УдержаниеОбъект = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(УдержаниеОбъект.РеквизитДопУпорядочивания) Тогда
			УдержаниеОбъект.РеквизитДопУпорядочивания = Порядок;
			Порядок = Порядок + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает в плане видов расчета элементы для отпуска и компенсации, 
// используемые в документе "Отпуск" и "Увольнение".
//
Процедура СоздатьУдержаниеЗаНеотработанныеДниОтпуска(ВидОтпуска, НаименованиеОтпуска, ДополнениеКода, КоллекторУдержаний, ДенежноеСодержание = Ложь) Экспорт
	
	СвойстваУдержаний = СвойстваУдержанийПоКатегориям();
	
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	
	Если ДенежноеСодержание Тогда
		
		НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
		
		КатегорияУдержания	= Перечисления.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска;
		Если НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания
			И НастройкиРасчетаЗарплаты.СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.Удержание") Тогда
			Описание = ОписаниеУдержания();
			Описание.КатегорияУдержания = КатегорияУдержания;
			ЗаполнитьЗначенияСвойств(Описание, СвойстваУдержаний[Перечисления.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска]);
			Описание.Наименование		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удержание за неотраб. отпуск (%1)'"), НаименованиеОтпуска); 
			Описание.КраткоеНаименование = КраткоеНаименованиеУдержанияПоВидуОтпуска(ВидОтпуска);
			Описание.Код 				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'УОТ%1'"), ДополнениеКода);
			Описание.ФормулаРасчета		= "ОКР(СохраняемоеДенежноеСодержание / СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих, 2) * КоличествоДнейКомпенсации";
			Описание.ВидОтпуска			= ВидОтпуска; 
			Описание.Отбор				= "ВидОтпуска,КатегорияУдержания"; 
			СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
		Иначе
			ОтключитьИспользованиеУдержания(КоллекторУдержаний, КатегорияУдержания);
		КонецЕсли;
		
	Иначе
		
		КатегорияУдержания = Перечисления.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска;
		Если НастройкиРасчетаЗарплаты.СпособУдержанияИзлишнеНачисленныхОтпускных = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.Удержание") Тогда
			Описание = ОписаниеУдержания();
			Описание.КатегорияУдержания = КатегорияУдержания;
			ЗаполнитьЗначенияСвойств(Описание, СвойстваУдержаний[Перечисления.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска]);
			Описание.Наименование		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удержание за неотработанный отпуск (%1)'"), НаименованиеОтпуска); 
			Описание.КраткоеНаименование = КраткоеНаименованиеУдержанияПоВидуОтпуска(ВидОтпуска);
			Описание.Код 				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'УОТ%1'"), ДополнениеКода);
			Описание.ФормулаРасчета		= "СреднийЗаработокОбщий * КоличествоДнейКомпенсации";
			Описание.ВидОтпуска			= ВидОтпуска; 
			Описание.Отбор				= "ВидОтпуска,КатегорияУдержания"; 
			СоздатьИзменитьУдержанияПоОписанию(КоллекторУдержаний, Описание);
		Иначе
			ОтключитьИспользованиеУдержания(КоллекторУдержаний, КатегорияУдержания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КраткоеНаименованиеУдержанияПоВидуОтпуска(ВидОтпуска)
	
	НаименованиеУдержания = "";
	
	Если ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. отп. ЧАЭС'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. учебн. отп.'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. учебн. отп. б/о'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. отпуск'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. отп. за св. сч.'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыПоТКРФ") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. отп. без опл.'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. отп. за вредн.'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВыслугуЛет") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. отп. высл. лет'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВыслугуЛетНаГосударственнойСлужбе") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. отп. высл. лет'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускНаСанаторноКурортноеЛечение") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. отп. на лечение'")
	ИначеЕсли ВидОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный") Тогда
		НаименованиеУдержания = НСтр("ru = 'Неотраб. северн. отп.'")
	КонецЕсли;
	
	Возврат НаименованиеУдержания;
	
КонецФункции

// Создает и заполняет соответствие, ключом которого является категория удержания, 
// а значением - структура значений, определяющая заполнение свойств удержания данной категории.
//
// Параметры:
//	- КатегорияУдержания - ПеречислениеСсылка.КатегорииУдержаний.
//
// Возвращаемое значение:
//  Соответствие - свойства удержаний по категориям:
//     * Ключ     - ПеречислениеСсылка.КатегорииУдержаний
//     * Значение - Структура
//
Функция СвойстваУдержанийПоКатегориям() Экспорт
	
	СвойстваПоКатегориям = Новый Соответствие;
	
	// Значение по умолчанию
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ПустаяСсылка(), СвойстваУдержанияПоКатегорииПоУмолчанию());
	
	// Профсоюзные взносы
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.Профвзносы;
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияУдержания");
	Описание.ОтборБазовых = Новый Структура("КатегорияНачисления", КатегорииБазовыхНачисленийПрофсоюзныхВзносов());
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ПрофсоюзныеВзносы, Описание);
	
	// Исполнительный лист
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты;
	Описание.ОчередностьРасчета = 1;
	Описание.ЯвляетсяВзысканием = Истина;
	Описание.ДополнениеРасчетнойБазы = Истина;
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияУдержания");
	Описание.НедоступныеСвойства.Добавить("ЯвляетсяВзысканием");
	Описание.ОтборБазовых = Новый Структура;
	Описание.ОтборБазовых.Вставить("КатегорияНачисления", КатегорииБазовыхНачисленийУдержанийПоИсполнительнымДокументам());
	ВидыДоходовИсполнительногоПроизводства = Новый Массив;
	ВидыДоходовИсполнительногоПроизводства.Добавить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ДоходыБезОграниченияВзысканий);
	ВидыДоходовИсполнительногоПроизводства.Добавить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения);
	ВидыДоходовИсполнительногоПроизводства.Добавить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые);
	Описание.ОтборБазовых.Вставить("ВидДоходаИсполнительногоПроизводства", ВидыДоходовИсполнительногоПроизводства);
	Описание.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ИсполнительныйЛист, Описание);
	
	// Вознаграждение платежного агента.
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ВознаграждениеПлатежногоАгента;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента;
	Описание.ОчередностьРасчета = 2;
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияУдержания");
	Описание.НедоступныеСвойства.Добавить("ЯвляетсяВзысканием");
	Описание.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента, Описание);
	
	// Удержание за неотработанные дни отпуска.
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаУдержания = Перечисления.ВидыДокументовУдержания.Увольнение;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * КоличествоДнейКомпенсации";
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск;
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияУдержания");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска, Описание);
	
	// Удержание за неотработанные дни отпуска, сохраняемое денежное содержание.
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаУдержания = Перечисления.ВидыДокументовУдержания.Увольнение;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "ОКР(СохраняемоеДенежноеСодержание / СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих, 2) * КоличествоДнейКомпенсации";
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск;
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияУдержания");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска, Описание);
	
	// Удержание за неотработанные дни отпуска, сохраняемое денежное довольствие.
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаУдержания = Перечисления.ВидыДокументовУдержания.ИсключениеИзСписковЧасти;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СохраняемоеДенежноеДовольствие / СреднемесячноеКоличествоДнейВС * КоличествоДнейКомпенсации";
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск;
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияУдержания");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ДенежноеДовольствиеУдержаниеЗаНеотработанныеДниОтпуска, Описание);
	
	// Прочее удержание в пользу третих лиц.
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ПрочееУдержаниеВПользуТретьихЛиц, Описание);
	
	// Прочее удержание в пользу компании.
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям, Описание);
	
	// ДСВ
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.ДСВ;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ДСВ, Описание);
	
	// ДобровольныеВзносыВНПФ
	Описание = СвойстваУдержанияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ, Описание);
	
	// По ученическому договору
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
	    Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ДополнитьСвойстваПоКатегориямУдержаниемПоУченическимДоговорам(СвойстваПоКатегориям, СвойстваУдержанияПоКатегорииПоУмолчанию());
	КонецЕсли;
	
	// ДМС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ДополнитьСвойстваПоКатегориямУдержаниемПоДМС(СвойстваПоКатегориям, СвойстваУдержанияПоКатегорииПоУмолчанию());
	КонецЕсли;
	
	Возврат СвойстваПоКатегориям;
	
КонецФункции

Функция КатегорииУдержанийУчитывающихНДФЛ() Экспорт
	
	КатегорииУдержаний = Новый Массив;
	КатегорииУдержаний.Добавить(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	КатегорииУдержаний.Добавить(Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента);
		
	Возврат КатегорииУдержаний;
	
КонецФункции

Функция КатегорииУдержанийВлияющихНаНДФЛ() Экспорт
	
	КатегорииУдержаний = Новый Массив;
	КатегорииУдержаний.Добавить(Перечисления.КатегорииУдержаний.ДСВ);
	КатегорииУдержаний.Добавить(Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ);
		
	Возврат КатегорииУдержаний;
	
КонецФункции

Функция КатегорииУдержанийЗависящиеОтСтраховыхВзносов() Экспорт
	
	КатегорииУдержаний = Новый Массив;
	КатегорииУдержаний.Добавить(Перечисления.КатегорииУдержаний.ДСВ);
	КатегорииУдержаний.Добавить(Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ);
		
	Возврат КатегорииУдержаний;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьОперативныеПоказателиДляВыявленияУдержаний() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель КАК Показатель
	|ИЗ
	|	ПланВидовРасчета.Удержания.Показатели КАК Показатели
	|ГДЕ
	|	Показатели.ОпределяющийПоказатель
	|	И Показатели.Показатель.ОперативныйПоказательСотрудника";
	
	Набор = РегистрыСведений.ОперативныеПоказателиДляВыявленияУдержаний.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();		
КонецПроцедуры	

Функция СвойстваУдержанияПоКатегорииПоУмолчанию()
	
	Описание = Новый Структура(
		"СпособВыполненияУдержания, 
		|СпособРасчета, 
		|ФормулаРасчета, 
		|ВидДокументаУдержания, 
		|ВидОтпуска, 
		|ВидОперацииПоЗарплате,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|ОтборБазовых,
		|ДополнениеРасчетнойБазы,
		|ИменаИнструкций, 
		|ПараметрыВыбора, 
		|Рассчитывается,
		|ОчередностьРасчета,
		|ЯвляетсяВзысканием,
		|НедоступныеСвойства,
		|СтратегияОтраженияВУчете");
	
	// Недоступные свойства: строка, в которой перечислены имена свойств начислений, 
	// выбор которых недоступен для указанной категории.
	
	// Свойства по умолчанию
	Описание.НедоступныеСвойства = Новый Массив;
	Описание.ИменаИнструкций = "НедоступныеСвойства,ИменаИнструкций,ПараметрыВыбора,ОтборБазовых,ДополнениеРасчетнойБазы"; 
	Описание.Рассчитывается = Истина;
	Описание.ОчередностьРасчета = 0;
	Описание.ЯвляетсяВзысканием = Ложь;
	Описание.ДополнениеРасчетнойБазы = Ложь;
	Описание.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоФактическимНачислениям;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеУдержания() Экспорт
	
	Описание = Новый Структура(
	"Код, 
	|Наименование,
	|КраткоеНаименование,
	|КатегорияУдержания,
	|СпособВыполненияУдержания,
	|СпособРасчета,
	|ФормулаРасчета,
	|ВидОперацииПоЗарплате,
	|УчаствуетВРасчетеПервойПоловиныМесяца,
	|ВидОтпуска,
	|ОтборБазовых,
	|ДополнениеРасчетнойБазы,
	|ОпределяющиеПоказатели,
	|Отбор,
	|Рассчитывается,
	|ЯвляетсяВзысканием,
	|СсылкаНаОбъект"); // Содержит ссылку на объект, который уже был создан Из помощника начальной настройки программы);
	
	Описание.СпособВыполненияУдержания = Перечисления.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ПроизвольнаяФормула;
	Описание.УчаствуетВРасчетеПервойПоловиныМесяца = Истина;
	Описание.ДополнениеРасчетнойБазы = Ложь;
	
	Возврат Описание;
	
КонецФункции

Процедура СоздатьИзменитьУдержанияПоОписанию(Коллектор, Описание) Экспорт
	
	Отбор = Неопределено;
	Если ЗначениеЗаполнено(Описание.Отбор) Тогда
		Отбор = Новый Структура(Описание.Отбор);
		Если Описание.Отбор = "Ссылка" Тогда
			Отбор.Ссылка = Описание.СсылкаНаОбъект;
		Иначе
			ЗаполнитьЗначенияСвойств(Отбор, Описание, Описание.Отбор);
		КонецЕсли;
	КонецЕсли;
	
	УдержанияПоКатегории = РасчетЗарплаты.УдержанияПоКатегории(Описание.КатегорияУдержания, Отбор);
	
	УдержаниеОбъект = Неопределено;
	Если УдержанияПоКатегории.Количество() > 0 Тогда
		
		Если Описание.Отбор = "Ссылка" Тогда
			УдержаниеОбъект = УдержанияПоКатегории[0].ПолучитьОбъект();
		Иначе
			Для Каждого УдержаниеСсылка Из УдержанияПоКатегории Цикл
				УдержаниеОбъект = Коллектор[УдержаниеСсылка];
				Если УдержаниеОбъект = Неопределено Тогда
					УдержаниеОбъект = УдержаниеСсылка.ПолучитьОбъект();
					Коллектор.Вставить(УдержаниеСсылка, УдержаниеОбъект);
				КонецЕсли;
				УдержаниеОбъект.ВАрхиве = Ложь;
				УдержаниеОбъект.ПометкаУдаления = Ложь;
			КонецЦикла;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УдержаниеОбъект = Неопределено Тогда
		// Устанавливаем ссылку новому объекту.
		УдержаниеСсылка = ПланыВидовРасчета.Удержания.ПолучитьСсылку();
		УдержаниеОбъект = ПланыВидовРасчета.Удержания.СоздатьВидРасчета();
		УдержаниеОбъект.УстановитьСсылкуНового(УдержаниеСсылка);
		Описание.СсылкаНаОбъект = УдержаниеСсылка;
	Иначе
		УдержаниеСсылка = УдержаниеОбъект.Ссылка;
		УдержаниеОбъект.ВАрхиве = Ложь;
		УдержаниеОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Коллектор.Вставить(УдержаниеСсылка, УдержаниеОбъект);
	
	ЗаполнитьЗначенияСвойств(УдержаниеОбъект, Описание);
	
	Если Описание.ДополнениеРасчетнойБазы Тогда 
		ЗаполнитьПрочиеБазовыеДоходыУдержания(УдержаниеОбъект);
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьТаблицуПоказателейВидаРасчета(УдержаниеОбъект, Коллектор);

	// Базовые начисления
	Если Описание.ОтборБазовых <> Неопределено Тогда
		ОтборБазовых = ОбщегоНазначения.СкопироватьРекурсивно(Описание.ОтборБазовых);
		УдержаниеОбъект.ДополнительныеСвойства.Вставить("ОтборБазовых", ОтборБазовых);
	КонецЕсли;
	
	// Определяющие показатели
	ЗарплатаКадрыРасширенный.ОтметитьОпределяющиеПоказатели(УдержаниеОбъект, Описание.ОпределяющиеПоказатели);
	
КонецПроцедуры

Процедура ОтключитьИспользованиеУдержания(Коллектор, КатегорияУдержания, Отбор = Неопределено) Экспорт
		
	УдержанияПоКатегории = РасчетЗарплаты.УдержанияПоКатегории(КатегорияУдержания, Отбор);
	
	Для Каждого УдержаниеСсылка Из УдержанияПоКатегории Цикл
		УдержаниеОбъект = Коллектор[УдержаниеСсылка];
		Если УдержаниеОбъект = Неопределено Тогда
			УдержаниеОбъект = УдержаниеСсылка.ПолучитьОбъект();
			Коллектор.Вставить(УдержаниеСсылка, УдержаниеОбъект);
		КонецЕсли;
		УдержаниеОбъект.ВАрхиве = Истина;
	КонецЦикла;

КонецПроцедуры

Функция КатегорииБазовыхНачисленийУдержанийПоИсполнительнымДокументам() Экспорт 
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме);
	
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание);
	
	// Добавляем еще и больничные листы, но при расчете будем включать сумму расчетной базы только для тех исполнительных
	// документов,  для которых указано "Учитывать больничные листы".
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни);
	
	Возврат Категории;
	
КонецФункции

Функция КатегорииБазовыхНачисленийПрофсоюзныхВзносов()
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	
	Возврат Категории;
	
КонецФункции

Процедура ЗаполнитьПрочиеБазовыеДоходыУдержания(Удержание) Экспорт 
	
	ВидыПрочихДоходов = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРегистрациюПрочихДоходов") Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПрочихДоходов, Справочники.ВидыПрочихДоходовФизическихЛиц.ВидыВыплатДополненияРасчетнойБазыУдержаний());
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыБывшимСотрудникам") Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПрочихДоходов, Справочники.ВидыВыплатБывшимСотрудникам.ВидыВыплатДополненияРасчетнойБазыУдержаний());
	КонецЕсли;
	
	Удержание.ПрочиеБазовыеДоходы.Очистить();
	
	Для Каждого ВидДохода Из ВидыПрочихДоходов Цикл 
		НоваяСтрока = Удержание.ПрочиеБазовыеДоходы.Добавить();
		НоваяСтрока.ВидДохода = ВидДохода;
	КонецЦикла;
	
	Удержание.ПрочиеБазовыеДоходы.Сортировать("ВидДохода");
		
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПрочиеБазовыеДоходы(ПараметрыОбновления = Неопределено) Экспорт 
	
	ВидыПрочихДоходов = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыБывшимСотрудникам") Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПрочихДоходов, Справочники.ВидыПрочихДоходовФизическихЛиц.ВидыВыплатДополненияРасчетнойБазыУдержаний());
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРегистрациюПрочихДоходов") Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПрочихДоходов, Справочники.ВидыВыплатБывшимСотрудникам.ВидыВыплатДополненияРасчетнойБазыУдержаний());
	КонецЕсли;
	
	Если ВидыПрочихДоходов.Количество() = 0 Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	    Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Удержания.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Удержания КАК Удержания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.ПрочиеБазовыеДоходы КАК УдержанияПрочиеБазовыеДоходы
	               |		ПО Удержания.Ссылка = УдержанияПрочиеБазовыеДоходы.Ссылка
	               |ГДЕ
	               |	Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	               |	И УдержанияПрочиеБазовыеДоходы.Ссылка ЕСТЬ NULL";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	Если Выборка.Количество() = 0 Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	    Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Удержания", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого ВидДохода Из ВидыПрочихДоходов Цикл 
			НоваяСтрока = УдержаниеОбъект.ПрочиеБазовыеДоходы.Добавить();
			НоваяСтрока.ВидДохода = ВидДохода;
		КонецЦикла;
		
		УдержаниеОбъект.ПрочиеБазовыеДоходы.Сортировать("ВидДохода");
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(УдержаниеОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрОперативныеПоказателиДляВыявленияУдержаний(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель КАК Показатель
	|ИЗ
	|	ПланВидовРасчета.Удержания.Показатели КАК Показатели
	|ГДЕ
	|	Показатели.ОпределяющийПоказатель";
	
	РезультатЗапроса = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления,, Неопределено);
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;	
	
	ОписаниеБлокировки = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОписаниеБлокируемыхДанных(Метаданные.РегистрыСведений.ОперативныеПоказателиДляВыявленияУдержаний);
	
	Если ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
		Набор = РегистрыСведений.ОперативныеПоказателиДляВыявленияУдержаний.СоздатьНаборЗаписей();
		Набор.Загрузить(РезультатЗапроса.Выгрузить());
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура УдалитьДоходВНатуральнойФормеИзРасчетнойБазыИЛ(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка КАК Ссылка,
	|	УдержанияБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК УдержанияБазовыеВидыРасчета
	|		ПО Удержания.Ссылка = УдержанияБазовыеВидыРасчета.Ссылка
	|			И (УдержанияБазовыеВидыРасчета.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
	|ГДЕ
	|	Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|	И НЕ УдержанияБазовыеВидыРасчета.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	    Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ВидРасчета");
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Удержания", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска.ВидРасчета = Выборка.ВидРасчета;
			НайденныеСтроки = УдержаниеОбъект.БазовыеВидыРасчета.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				УдержаниеОбъект.БазовыеВидыРасчета.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(УдержаниеОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли