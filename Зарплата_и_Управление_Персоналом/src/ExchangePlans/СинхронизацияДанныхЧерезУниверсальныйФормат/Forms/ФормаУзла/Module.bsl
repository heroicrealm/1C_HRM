#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимВыгрузкиСотрудников = ?(Объект.ДанныеДляФормированияПроводокОтправлятьСводно, 1, 0);
	
	ВариантОтправкиВедомостей = 0;
	Если Объект.ОтправлятьВедомости И Объект.ОтправлятьВедомостиКакЗаявки Тогда
		ВариантОтправкиВедомостей = 2;
	ИначеЕсли Объект.ОтправлятьВедомости И НЕ Объект.ОтправлятьВедомостиКакЗаявки Тогда
		ВариантОтправкиВедомостей = 1;
	КонецЕсли;
	
	// Инициализируем доступность ссылки установки даты запрета редактирования
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УстановитьДатуЗапретаИзменений",
		"Доступность",
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДатыЗапретаИзменения));
	
	УстановитьВидимостьНаСервере();
	ОбновитьНаименованиеКомандФормы();
	ОбновитьСписокВыбораВерсийФорматаОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если (Не ЗавершениеРаботы = Неопределено И ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_УзелПланаОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаПриИзменении(Элемент)
	Объект.ПравилаОтправкиДокументов = "НеСинхронизировать";
	Объект.ОтправлятьВедомости = Ложь;
	Объект.ОтправлятьРегламентированныеОтчеты = Ложь;
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РежимВыгрузкиСотрудниковПриИзменении(Элемент)
	Объект.ДанныеДляФормированияПроводокОтправлятьСводно = ?(РежимВыгрузкиСотрудников = 1, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиВедомостейПриИзменении(Элемент)
	
	Если ВариантОтправкиВедомостей = 0 Тогда
		Объект.ОтправлятьВедомости = Ложь;
		Объект.ОтправлятьВедомостиКакЗаявки = Ложь;
	ИначеЕсли ВариантОтправкиВедомостей = 1 Тогда
		Объект.ОтправлятьВедомости = Истина;
		Объект.ОтправлятьВедомостиКакЗаявки = Ложь;
	Иначе
		Объект.ОтправлятьВедомости = Истина;
		Объект.ОтправлятьВедомостиКакЗаявки = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	КоллекцияФильтров = Новый Массив;
	КоллекцияФильтров.Добавить(Новый Структура("РеквизитОтбора, Условие, ИмяПараметра, ЗначениеПараметра", 
		"Ссылка", "<>", "УправленческаяОрганизация", ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация")));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "Организации");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Организация");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Организации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите организации для отбора'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьСписокВыбранныхШаблонов(Команда)
	КоллекцияФильтров = Новый Массив;
	КоллекцияФильтров.Добавить(Новый Структура("РеквизитОтбора, Условие, ИмяПараметра, ЗначениеПараметра", 
		"ВидыРаботЗаполняютсяВДокументе", "=", "ВидыРаботЗаполняютсяВДокументе", Истина));
	КоллекцияФильтров.Добавить(Новый Структура("РеквизитОтбора, Условие, ИмяПараметра, ЗначениеПараметра", 
		"ВыполненныеРаботыРаспределяютсяПоСотрудникам", "=", "ВыполненныеРаботыРаспределяютсяПоСотрудникам", Ложь));
	КоллекцияФильтров.Добавить(Новый Структура("РеквизитОтбора, Условие, ИмяПараметра, ЗначениеПараметра", 
		"ВыполненныеРаботыВводятсяСводно", "=", "ВыполненныеРаботыВводятсяСводно", Ложь));
		
	КоллекцияДополнительныхРеквизитов = Новый Массив;
	КоллекцияДополнительныхРеквизитов.Добавить(Новый Структура("ПутьКДанным, ИмяРеквизита, Представление, ПредставлениеНеЗаполненного",
		"Организация", "Организация", "Организация", "<по всем организациям>"));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ШаблоныВводаИсходныхДанных");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Шаблон");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите шаблоны ввода исходных данных'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	ПараметрыФормы.Вставить("КоллекцияДополнительныхРеквизитов",      КоллекцияДополнительныхРеквизитов);
	
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиенте
Процедура ЗавершениеВыбораФайлаМенеджераОбмена(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаРежимВыгрузкиПроводок",
		"Видимость",
		Объект.ВариантНастройки <> "ОбменУП2ЗУП3");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтправкаВедомостейОтчетов",
		"Видимость",
		Объект.ВариантНастройки = "ОбменЗУПБП");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтправкаВедомостей",
		"Видимость",
		Объект.ВариантНастройки <> "ОбменЗУПБП");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДополнительныеНастройкиОтправкиДокументов",
		"Доступность",
		Не Объект.ПравилаОтправкиСправочников = "НеСинхронизировать");	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаНачалаВыгрузкиДокументов",
		"Доступность",
		Объект.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаНеСинхронизироватьДокументы",
		"Доступность",
		Не Объект.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы.ГруппаДокументы.ПодчиненныеЭлементы,
		"ГруппаРежимОтправкиДокументов",
		"Доступность",
		Не Объект.ПравилаОтправкиСправочников = "НеСинхронизировать");
		
	#Область ГруппаНастройкаДополнительныхОтборов		
			
	#Область ГруппаСтраницыОтборПоОрганизациям
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтборПоОрганизациям",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") И Не Объект.ПравилаОтправкиСправочников = "НеСинхронизировать");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСписокВыбранныхОрганизаций",
		"Доступность",
		Объект.ИспользоватьОтборПоОрганизациям);
	#КонецОбласти
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставДополнительныхОтборов");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаНастройкаДополнительныхОтборов");
	
	#КонецОбласти

	#Область ГруппаПрочее
	
	#Область ГруппаДатаЗапретаРедактированияДанных
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДатаЗапретаРедактированияДанных",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаИзменения"));
	#КонецОбласти
		
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставПрочихНастроек");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаПрочее");
	
	#КонецОбласти
	
	#Область ПравилаПолученияДанных
	УстановитьВидимостьГруппыНаСервере(Элементы, "ПравилаПолученияДанных");
	#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		СписокВыбранныхЗначений.Колонки.Представление.Имя = СтруктураПараметров.ИмяКолонкиДляЗаполнения;
		Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновим заголовок выбранных организаций
	Если Объект.Организации.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ",");
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизаций.Заголовок = НовыйЗаголовокОрганизаций;
	
	// Обновим заголовок выбранных шаблонов ввода исходных данных
	Если Объект.ШаблоныВводаИсходныхДанных.Количество() > 0 Тогда
		
		ВыбранныеШаблоны = Объект.ШаблоныВводаИсходныхДанных.Выгрузить().ВыгрузитьКолонку("Шаблон");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.Наименование КАК Шаблон,
		|	ЕСТЬNULL(ВидыДокументовВводДанныхДляРасчетаЗарплаты.Организация.Наименование, """") КАК Организация
		|ИЗ
		|	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументовВводДанныхДляРасчетаЗарплаты
		|ГДЕ
		|	ВидыДокументовВводДанныхДляРасчетаЗарплаты.Ссылка В(&СписокШаблонов)");
		Запрос.УстановитьПараметр("СписокШаблонов", ВыбранныеШаблоны);
		
		НовыйЗаголовокШаблоновВводаИсходныхДанных = "";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйЗаголовокШаблоновВводаИсходныхДанных = НовыйЗаголовокШаблоновВводаИсходныхДанных
				+ " ," + Выборка.Шаблон
				+ " (" + ?(ПустаяСтрока(Выборка.Организация), "<по всем организациям>", Выборка.Организация) + ")";
		КонецЦикла;
		
		НовыйЗаголовокШаблоновВводаИсходныхДанных = Сред(НовыйЗаголовокШаблоновВводаИсходныхДанных, 3);
		
	Иначе
		
		НовыйЗаголовокШаблоновВводаИсходныхДанных = НСтр("ru = 'Выбрать шаблоны ввода исходных данных'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхШаблонов.Заголовок = НовыйЗаголовокШаблоновВводаИсходныхДанных;
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = Объект[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Возврат МассивВыбранныхЗначений;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьГруппыНаСервере(ЭлементыФормы, ИмяГруппы)
	
	ГруппаФормы = ЭлементыФормы.Найти(ИмяГруппы);
	
	Если ГруппаФормы = Неопределено
		Или Не ТипЗнч(ГруппаФормы) = Тип("ГруппаФормы") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Видимость = Ложь;
	
	Для Каждого ПодчиненныйЭлемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		
		Если Не ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")	Тогда
			Продолжить; // устанавливаем видимость только по видимости дочерних групп первого уровня вложенности
		КонецЕсли;
		
		Видимость = Видимость ИЛИ ПодчиненныйЭлемент.Видимость;
			
	КонецЦикла;
	
	ГруппаФормы.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораВерсийФорматаОбмена()
	
	СписокВерсийФормата = Элементы.ВерсияФорматаОбмена.СписокВыбора;
	СписокВерсийФормата.Очистить();
	
	ВерсииФормата = Новый Соответствие;
	ОбменДаннымиУниверсальныйФормат.ПриПолученииДоступныхВерсийФормата(ВерсииФормата, Объект.ВариантНастройки);
	
	Для Каждого ВерсияФормата Из ВерсииФормата Цикл
		СписокВерсийФормата.Добавить(ВерсияФормата.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

