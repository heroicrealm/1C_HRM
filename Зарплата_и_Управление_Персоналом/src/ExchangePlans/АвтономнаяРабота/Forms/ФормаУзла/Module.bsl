#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Элементы.Служебные.Видимость	= Ложь;
		Элементы.Служебные.Доступность	= Ложь;
		
	КонецЕсли;
	
	РежимСинхронизацииОрганизаций =
		?(Объект.ИспользоватьОтборПоОрганизациям И Объект.СинхронизироватьДанныеПоОрганизациям, "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям", "СинхронизироватьДанныеПоВсемОрганизациям");
	
	Организации.Загрузить(ВсеОрганизацииПриложения());
	
	ОтметитьВыбранныеЭлементыТаблицы("Организации", "Организация");
	
	РежимСинхронизацииПодразделений =
		?(Объект.ИспользоватьОтборПоПодразделениям И Объект.СинхронизироватьДанныеПоПодразделениям, "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям", "СинхронизироватьДанныеПоВсемПодразделениям");
	
	ДоступностьПодразделений = СинхронизацияДанныхЗарплатаКадрыСервер.ИспользуетсяСтруктураПредприятия();
	
	Если Не ДоступностьПодразделений Тогда
		ЗаполнитьСтруктурныеПодразделенияПоОрганизациямНаСервере();
	КонецЕсли;
	
	ВсеПодразделенияПриложения = ВсеПодразделенияПриложения();
	Если ВсеПодразделенияПриложения <> Неопределено Тогда
		ПодразделенияДерево = РеквизитФормыВЗначение("Подразделения");
		Для каждого СтрокаТаблицы Из ВсеПодразделенияПриложения Цикл
			СтрокаРодителя = ПодразделенияДерево.Строки.Найти(СтрокаТаблицы.ПодразделениеРодитель, "Подразделение", Истина);
			Если СтрокаРодителя = Неопределено Тогда
				СтрокаДерева = ПодразделенияДерево.Строки.Добавить();
			Иначе
				СтрокаДерева = СтрокаРодителя.Строки.Добавить();
			КонецЕсли;
			
			СтрокаДерева.Подразделение = СтрокаТаблицы.Подразделение;
		КонецЦикла;
		ПодразделенияДерево.Строки.Сортировать("Подразделение", Истина);
		// Отметим выбранные элементы
		Для Каждого СтрокаТаблицы Из Объект.Подразделения Цикл
			НайденнаяСтрока = ПодразделенияДерево.Строки.Найти(СтрокаТаблицы.Подразделение, "Подразделение", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.Использовать = Истина;
			КонецЕсли;
		КонецЦикла;
		ЗначениеВРеквизитФормы(ПодразделенияДерево, "Подразделения");
	КонецЕсли;
	
	// По умолчанию считаем, что после записи форму нужно закрыть, 
	// в связи с тем, что нельзя обработать событие закрытия в веб-клиенте.
	ЗакрыватьПослеЗаписи = Истина;
	
	УстановитьВидимостьЭлементов();
	Если Не Элементы.ГруппаНастройкиВыгрузкиДанныхПоПодразделениям.Видимость Тогда
		Если Не Объект.СинхронизироватьДанныеПоОрганизациям Тогда
			Объект.СинхронизироватьДанныеПоОрганизациям = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьВыполнениеОтложеннойОбработки();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимСинхронизацииОрганизацийПриИзмененииЗначения();
	РежимСинхронизацииПодразделенийПриИзмененииЗначения();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПроизводитсяЗаполнениеДанных Тогда
		ПодключитьОбработчикОжидания("ОтложеннаяОбработкаПрогресс", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВыполняетсяНачальнаяНастройкаПрограммы() Тогда
		
		Отказ = Истина;
		
		ТекстПредупреждения = НСтр("ru = 'Запись настройки узла невозможна, пока не завершена начальная настройка программы.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ДоступностьПодразделений Тогда
		
		Если Не ПараметрыЗаписи.Свойство("НеПроверятьДоступностьПодразделений") Или Не ПараметрыЗаписи.НеПроверятьДоступностьПодразделений Тогда
			ПодразделенияСоответствуютОрганизациям = ПодразделенияСоответствуютОрганизациям();
			
			Если Не ПодразделенияСоответствуютОрганизациям Тогда
				
				ТекстВопроса = НСтр("ru = 'Структурные подразделения не соответствуют отмеченным организациям. Исправить?'");
				Оповещение = Новый ОписаниеОповещения("ЗаполнитьСтруктурныеПодразделенияПоОрганизациямЗавершение", ЭтотОбъект);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормы", Истина);
	
	ТекущийОбъект.ИспользоватьОтборПоОрганизациям =
		(РежимСинхронизацииОрганизаций = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
	
	Если ТекущийОбъект.ИспользоватьОтборПоОрганизациям Тогда
		ТекущийОбъект.Организации.Загрузить(Организации.Выгрузить(Новый Структура("Использовать", Истина), "Организация"));
	Иначе
		ТекущийОбъект.Организации.Очистить();
	КонецЕсли;
	
	ТекущийОбъект.ИспользоватьОтборПоПодразделениям =
		(РежимСинхронизацииПодразделений = "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям");
	
	ТекущийОбъект.Подразделения.Очистить();
	Если ТекущийОбъект.ИспользоватьОтборПоПодразделениям Тогда
		ПодразделенияДерево = РеквизитФормыВЗначение("Подразделения");
		НайденныеСтроки = ПодразделенияДерево.Строки.НайтиСтроки(Новый Структура("Использовать", Истина), Истина);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТекущийОбъект.Подразделения.Добавить();
			НоваяСтрока.Подразделение = НайденнаяСтрока.Подразделение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗавершитьНастройкуСинхронизацииДанных(ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоФизическимЛицам(ТекущийОбъект);
	СинхронизацияДанныхЗарплатаКадры.ЗапуститьОтложеннуюОбработкуЗаполненияДанныхПоСотрудникам(ТекущийОбъект);
	ПроверитьВыполнениеОтложеннойОбработки();
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		// Признак необходимости закрытия держим постоянно взведенным.
		ЗакрыватьПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ЗакрытаФормаУзлаПланаОбмена");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимСинхронизацииОрганизацийПриИзменении(Элемент)
	
	РежимСинхронизацииОрганизацийПриИзмененииЗначения();
	
	Если Не ДоступностьПодразделений Тогда
		ЗаполнитьСтруктурныеПодразделенияПоОрганизациямНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииПодразделенийПриИзменении(Элемент)
	РежимСинхронизацииПодразделенийПриИзмененииЗначения();
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьДанныеПоОрганизациямПриИзменении(Элемент)
	
	РежимСинхронизацииОрганизацийПриИзмененииЗначения();
	
	Если Не ДоступностьПодразделений Тогда
		ЗаполнитьСтруктурныеПодразделенияПоОрганизациямНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьДанныеПоПодразделениямПриИзменении(Элемент)
	РежимСинхронизацииПодразделенийПриИзмененииЗначения();
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьДанныеПоОрганизациямРасширеннаяПодсказкаНажатие(Элемент)
	
	Уникальность = "Отчет.МигрирующиеОбъектыРИБ/КлючВарианта.ОбъектыРегламентированногоУчета";
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючВарианта", "ОбъектыРегламентированногоУчета");
	ПараметрыОткрытия.Вставить("КлючПараметровПечати", Уникальность);
	ПараметрыОткрытия.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.МигрирующиеОбъектыРИБ.Форма", ПараметрыОткрытия, ЭтаФорма, Уникальность);
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьДанныеПоПодразделениямРасширеннаяПодсказкаНажатие(Элемент)
	
	Уникальность = "Отчет.МигрирующиеОбъектыРИБ/КлючВарианта.ОбъектыУправленческогоУчета";
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючВарианта", "ОбъектыУправленческогоУчета");
	ПараметрыОткрытия.Вставить("КлючПараметровПечати", Уникальность);
	ПараметрыОткрытия.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.МигрирующиеОбъектыРИБ.Форма", ПараметрыОткрытия, ЭтаФорма, Уникальность);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОрганизации

&НаКлиенте
Процедура ОрганизацииИспользоватьПриИзменении(Элемент)
	
	Если Не ДоступностьПодразделений Тогда
		ЗаполнитьСтруктурныеПодразделенияПоОрганизациямНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодразделения

&НаКлиенте
Процедура ПодразделенияИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Подразделения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделенияИспользоватьПриИзмененииНаСервере(ТекущиеДанные.Подразделение, ТекущиеДанные.Использовать);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьВсеОрганизации(Команда)
	
	ВключитьОтключитьВсеЭлементыВТаблице(Истина, "Организации");
	Если Не ДоступностьПодразделений Тогда
		ВключитьОтключитьВсеЭлементыВДеревеЗначений(Истина, Подразделения.ПолучитьЭлементы());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеОрганизации(Команда)
	
	ВключитьОтключитьВсеЭлементыВТаблице(Ложь, "Организации");
	Если Не ДоступностьПодразделений Тогда
		ВключитьОтключитьВсеЭлементыВДеревеЗначений(Ложь, Подразделения.ПолучитьЭлементы());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеПодразделения(Команда)
	ВключитьОтключитьВсеЭлементыВДеревеЗначений(Истина, Подразделения.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПодразделения(Команда)
	ВключитьОтключитьВсеЭлементыВДеревеЗначений(Ложь, Подразделения.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеФормы(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Если ЭтоЗаписьПервогоУзлаСОтбором() Тогда
		
		ТекстВопроса =
			НСтр("ru='При записи настройки будет произведено заполнение организаций и структурных подразделений по сотрудникам и физическим лицам.
			|Создание начального образа будет недоступно, пока заполнение данных не будет выполнено.
			|Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗавершитьКомандуЗаписать", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		
		Записать();
		Если ЗакрыватьПослеЗаписи И Не ВыполняетсяНачальнаяНастройкаПрограммы() Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Функция ВыполняетсяНачальнаяНастройкаПрограммы()
	Возврат НачальнаяНастройкаПрограммы.ВыполняетсяНачальнаяНастройкаПрограммы();
КонецФункции

&НаСервере
Процедура ЗавершитьНастройкуСинхронизацииДанных(ТекущийОбъект, Отказ = Ложь)
	
	Если СинхронизацияДанныхЗарплатаКадрыСервер.СинхронизацияРазрешена(ТекущийОбъект) Тогда
		ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКомандуЗаписать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрыватьПослеЗаписи = Ложь;
	ПроизводитсяЗаполнениеДанных = Истина;
	
	ПодключитьОбработчикОжидания("ОтложеннаяОбработкаПрогресс", 0.2, Истина);
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьВсеЭлементыВТаблице(Включить, ИмяТаблицы)
	
	Для Каждого ЭлементКоллекции Из ЭтаФорма[ИмяТаблицы] Цикл
		ЭлементКоллекции.Использовать = Включить;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьВсеЭлементыВДеревеЗначений(Включить, Строки)
	
	Для Каждого ЭлементКоллекции Из Строки Цикл
		ЭлементКоллекции.Использовать = Включить;
		ВключитьОтключитьВсеЭлементыВДеревеЗначений(Включить, ЭлементКоллекции.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеОрганизацииПриложения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК Использовать,
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеПодразделенияПриложения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат Модуль.СтруктураПредприятия();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОтметитьВыбранныеЭлементыТаблицы(ИмяТаблицы, ИмяРеквизита)
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		Строки = ЭтаФорма[ИмяТаблицы].НайтиСтроки(Новый Структура(ИмяРеквизита, СтрокаТаблицы[ИмяРеквизита]));
		
		Для каждого НайденнаяСтрока Из Строки Цикл
			НайденнаяСтрока.Использовать = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииОрганизацийПриИзмененииЗначения()
	
	Элементы.Организации.Доступность =
		(РежимСинхронизацииОрганизаций = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииПодразделенийПриИзмененииЗначения()
	
	Элементы.Подразделения.Доступность =
		(РежимСинхронизацииПодразделений = "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям");
	
КонецПроцедуры

&НаСервере
Процедура ПодразделенияИспользоватьПриИзмененииНаСервере(Подразделение, Использование)
	
	МассивПодразделений = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МассивПодразделений = Модуль.ПодчиненныеПодразделения(Подразделение);
	КонецЕсли;
	
	УстановитьИспользованиеПодразделения(Подразделения.ПолучитьЭлементы(), МассивПодразделений, Использование);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеПодразделения(ЭлементыДерева, МассивПодразделений, Использование)
	
	Для каждого СтрокаПодразделения Из ЭлементыДерева Цикл
		Если МассивПодразделений.Найти(СтрокаПодразделения.Подразделение) <> Неопределено Тогда
			СтрокаПодразделения.Использовать = Использование;
		КонецЕсли;
		УстановитьИспользованиеПодразделения(СтрокаПодразделения.ПолучитьЭлементы(), МассивПодразделений, Использование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ВидимостьГруппыНастройкиПоПодразделениям = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиВыгрузкиДанныхПоПодразделениям", "Видимость", ВидимостьГруппыНастройкиПоПодразделениям);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СинхронизироватьДанныеПоОрганизациям", "Видимость", ВидимостьГруппыНастройкиПоПодразделениям);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗаполнениеДанных", "Видимость", ПроизводитсяЗаполнениеДанных);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроцентВыполненияПоОрганизациям", "Видимость", ПроизводитсяЗаполнениеДанных);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроцентВыполненияПоПодразделениям", "Видимость", ПроизводитсяЗаполнениеДанных);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщаяКомандаВыполнитьОбменДанными", "Доступность", Не ПроизводитсяЗаполнениеДанных);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СозданиеНачальногоОбраза", "Доступность", Не ПроизводитсяЗаполнениеДанных);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНастройкиВыгрузкиДанныхПоПодразделениям", "ТолькоПросмотр", Не ДоступностьПодразделений);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимСинхронизацииПодразделений", "Видимость", ДоступностьПодразделений);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТекстНедоступныйРаздел", "Видимость", Не ДоступностьПодразделений);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодразделенияВключитьВсеПодразделения", "Доступность", ДоступностьПодразделений);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодразделенияОтключитьВсеПодразделения", "Доступность", ДоступностьПодразделений);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктурныеПодразделенияПоОрганизациямНаСервере()
	
	Объект.СинхронизироватьДанныеПоПодразделениям = Объект.СинхронизироватьДанныеПоОрганизациям;
	
	Если РежимСинхронизацииОрганизаций = "СинхронизироватьДанныеПоВсемОрганизациям" Тогда
		РежимСинхронизацииПодразделений = "СинхронизироватьДанныеПоВсемПодразделениям";
	Иначе
		РежимСинхронизацииПодразделений = "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям";
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	Для Каждого СтрокаТаблицыОрганизации Из Организации Цикл
		Если СтрокаТаблицыОрганизации.Использовать Тогда
			МассивОрганизаций.Добавить(СтрокаТаблицыОрганизации.Организация);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из Подразделения.ПолучитьЭлементы() Цикл
		
		Если ТипЗнч(СтрокаДерева.Подразделение.Источник) = Тип("СправочникСсылка.Организации") 
			И МассивОрганизаций.Найти(СтрокаДерева.Подразделение.Источник) <> Неопределено Тогда
			СтрокаДерева.Использовать = Истина;
		Иначе
			СтрокаДерева.Использовать = Ложь;
		КонецЕсли;
		
		ПодразделенияИспользоватьПриИзмененииНаСервере(СтрокаДерева.Подразделение, СтрокаДерева.Использовать);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыполнениеОтложеннойОбработки()
	
	ПроизводитсяЗаполнениеДанных = 
		СинхронизацияДанныхЗарплатаКадрыСервер.ОрганизацииФизическихЛицЗаполняются()
		Или СинхронизацияДанныхЗарплатаКадрыСервер.ПодразделенияФизическихЛицЗаполняются()
		Или ПроизводитсяЗаполнениеДанных
		Или СинхронизацияДанныхЗарплатаКадрыСервер.ОрганизацииСотрудниковЗаполняются()
		Или СинхронизацияДанныхЗарплатаКадрыСервер.ПодразделенияСотрудниковЗаполняются();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложеннаяОбработкаПрогресс()
	
	Если ПроизводитсяЗаполнениеДанных Или Не СинхронизацияРазрешена() Тогда
		ОтложеннаяОбработкаПрогрессНаСервере();
		ИнтервалВызоваМетода = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 0.8);
		ПодключитьОбработчикОжидания("ОтложеннаяОбработкаПрогресс", ИнтервалВызоваМетода, Истина);
	Иначе
		ОтключитьОбработчикОжидания("ОтложеннаяОбработкаПрогресс");
		ЗавершитьНастройкуСинхронизацииДанных(Объект.Ссылка);
		Если ЗакрыватьПослеЗаписи Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СинхронизацияРазрешена()
	Возврат СинхронизацияДанныхЗарплатаКадрыСервер.СинхронизацияРазрешена(Объект.Ссылка);
КонецФункции

&НаСервере
Процедура ОтложеннаяОбработкаПрогрессНаСервере()
	
	ПроизводитсяЗаполнениеДанных = Ложь;
	ПроцентВыполненияПоОрганизациям = 0;
	ПроцентВыполненияПоПодразделениям = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиОрганизаций.ЗаполнениеПроизводится), ЛОЖЬ) КАК ЗаполнениеПроизводится,
	|	ЕСТЬNULL(СУММА(НастройкиОрганизаций.ОбъектовКОбработке), 0) КАК ОбъектовКОбработке,
	|	ЕСТЬNULL(СУММА(НастройкиОрганизаций.ОбъектовОбработано), 0) КАК ОбъектовОбработано
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкиОрганизацийФизическихЛиц.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится,
	|		НастройкиОрганизацийФизическихЛиц.ФизическихЛицКОбработке КАК ОбъектовКОбработке,
	|		НастройкиОрганизацийФизическихЛиц.ФизическихЛицОбработано КАК ОбъектовОбработано
	|	ИЗ
	|		РегистрСведений.НастройкиОрганизацийФизическихЛиц КАК НастройкиОрганизацийФизическихЛиц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НастройкиОрганизацийСотрудников.ЗаполнениеПроизводится,
	|		НастройкиОрганизацийСотрудников.СотрудниковКОбработке,
	|		НастройкиОрганизацийСотрудников.СотрудниковОбработано
	|	ИЗ
	|		РегистрСведений.НастройкиОрганизацийСотрудников КАК НастройкиОрганизацийСотрудников) КАК НастройкиОрганизаций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроизводитсяЗаполнениеДанных = ПроизводитсяЗаполнениеДанных Или Выборка.ЗаполнениеПроизводится;
		Если Выборка.ОбъектовКОбработке <> 0 Тогда
			ПроцентВыполненияПоОрганизациям = 100 * Выборка.ОбъектовОбработано / Выборка.ОбъектовКОбработке;
		Иначе
			ПроцентВыполненияПоОрганизациям = 0;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиПодразделений.ЗаполнениеПроизводится), ЛОЖЬ) КАК ЗаполнениеПроизводится,
	|	ЕСТЬNULL(СУММА(НастройкиПодразделений.ОбъектовКОбработке), 0) КАК ОбъектовКОбработке,
	|	ЕСТЬNULL(СУММА(НастройкиПодразделений.ОбъектовОбработано), 0) КАК ОбъектовОбработано
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкиПодразделенийФизическихЛиц.ЗаполнениеПроизводится КАК ЗаполнениеПроизводится,
	|		НастройкиПодразделенийФизическихЛиц.ФизическихЛицКОбработке КАК ОбъектовКОбработке,
	|		НастройкиПодразделенийФизическихЛиц.ФизическихЛицОбработано КАК ОбъектовОбработано
	|	ИЗ
	|		РегистрСведений.НастройкиПодразделенийФизическихЛиц КАК НастройкиПодразделенийФизическихЛиц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НастройкиПодразделенийСотрудников.ЗаполнениеПроизводится,
	|		НастройкиПодразделенийСотрудников.СотрудниковКОбработке,
	|		НастройкиПодразделенийСотрудников.СотрудниковОбработано
	|	ИЗ
	|		РегистрСведений.НастройкиПодразделенийСотрудников КАК НастройкиПодразделенийСотрудников) КАК НастройкиПодразделений";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроизводитсяЗаполнениеДанных = ПроизводитсяЗаполнениеДанных Или Выборка.ЗаполнениеПроизводится;
		Если Выборка.ОбъектовКОбработке <> 0 Тогда
			ПроцентВыполненияПоПодразделениям = 100 * Выборка.ОбъектовОбработано / Выборка.ОбъектовКОбработке;
		Иначе
			ПроцентВыполненияПоПодразделениям = 0;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
	ПредыдущийПроцентВыполненияПоОрганизациям = ПроцентВыполненияПоОрганизациям;
	ПредыдущийПроцентВыполненияПоПодразделениям = ПроцентВыполненияПоПодразделениям;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНачальногоОбраза(Команда)
	
	ПараметрыПомощника = Новый Структура("Ключ, Узел", Объект.Ссылка, Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.СозданиеНачальногоОбразаСФайлами",
		ПараметрыПомощника, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаСервере
Функция ЭтоЗаписьПервогоУзлаСОтбором()
	
	Если (Не СинхронизацияДанныхЗарплатаКадрыСервер.ИспользуютсяУзлыРИБСОтборомПоОрганизациям(Объект.Ссылка) 
			И РежимСинхронизацииОрганизаций = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям"
			И Объект.СинхронизироватьДанныеПоОрганизациям)
		Или (Не СинхронизацияДанныхЗарплатаКадрыСервер.ИспользуютсяУзлыРИБСОтборомПоПодразделениям(Объект.Ссылка)
			И РежимСинхронизацииПодразделений = "СинхронизироватьДанныеТолькоПоВыбраннымПодразделениям"
			И Объект.СинхронизироватьДанныеПоПодразделениям) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

&НаСервере
Функция ПодразделенияСоответствуютОрганизациям()
	
	МассивОрганизаций = Новый Массив;
	Для Каждого СтрокаТаблицыОрганизации Из Организации Цикл
		Если СтрокаТаблицыОрганизации.Использовать Тогда
			МассивОрганизаций.Добавить(СтрокаТаблицыОрганизации.Организация);
		КонецЕсли;
	КонецЦикла;
	
	ПодразделенияСоответствуютОрганизациям = Истина;
	Для Каждого СтрокаДерева Из Подразделения.ПолучитьЭлементы() Цикл
		
		Если ТипЗнч(СтрокаДерева.Подразделение.Источник) = Тип("СправочникСсылка.Организации") 
			И МассивОрганизаций.Найти(СтрокаДерева.Подразделение.Источник) <> Неопределено Тогда
			Если Не СтрокаДерева.Использовать Тогда
				ПодразделенияСоответствуютОрганизациям = Ложь;
			Иначе
				ПодразделенияСоответствуютОрганизациям = ИспользованиеПодразделенияСоответствуетВерхнемуУровню(СтрокаДерева.ПолучитьЭлементы(), СтрокаДерева.Использовать);
			КонецЕсли;
		ИначеЕсли СтрокаДерева.Использовать Тогда
			ПодразделенияСоответствуютОрганизациям = Ложь;
		КонецЕсли;
		
		Если Не ПодразделенияСоответствуютОрганизациям Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодразделенияСоответствуютОрганизациям;
	
КонецФункции

&НаСервере
Функция ИспользованиеПодразделенияСоответствуетВерхнемуУровню(ЭлементыДерева, Использование)
	
	Для каждого СтрокаПодразделения Из ЭлементыДерева Цикл
		
		Если СтрокаПодразделения.Использовать <> Использование Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СоответствуетВерхнемуУровню = ИспользованиеПодразделенияСоответствуетВерхнемуУровню(СтрокаПодразделения.ПолучитьЭлементы(), Использование);
		Если Не СоответствуетВерхнемуУровню Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктурныеПодразделенияПоОрганизациямЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да И Не ДоступностьПодразделений Тогда
		ЗаполнитьСтруктурныеПодразделенияПоОрганизациямНаСервере();
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("НеПроверятьДоступностьПодразделений", Истина);
	
	Записать(ПараметрыЗаписи);
	Если ЗакрыватьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
