#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет настройки, влияющие на использование плана обмена.
// 
// Параметры:
//  Настройки - Структура - настройки плана обмена по умолчанию, см. ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию,
//                          описание возвращаемого значения функции.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт
	
	Настройки.ПланОбменаИспользуетсяВМоделиСервиса = Истина;
	
	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки = Истина;
	Настройки.Алгоритмы.ОписаниеОграниченийПередачиДанных     = Истина;
	
КонецПроцедуры

// Заполняет набор параметров, определяющих вариант настройки обмена.
// 
// Параметры:
//  ОписаниеВарианта       - Структура - набор варианта настройки по умолчанию,
//                                       см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию,
//                                       описание возвращаемого значения.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт
	
	ОписаниеВарианта.ИспользоватьПомощникСозданияОбменаДанными = Ложь;
	
	ОписаниеВарианта.КраткаяИнформацияПоОбмену = НСтр("ru = 'Автономное рабочее место позволяет работать с информационной базой
	|без постоянного подключения к сети Интернет и при необходимости выполнять синхронизацию данных с базой,
	|расположенной в «облачном» сервисе, в режиме SaaS (Software-as-a-Service).'");
	
	ОписаниеВарианта.НаименованиеКонфигурацииКорреспондента = НСтр("ru = '1С:Зарплата и Управление Персоналом'");
	ОписаниеВарианта.ПодробнаяИнформацияПоОбмену = "ПланОбмена.АвтономнаяРабота.Форма.ПодробнаяИнформация";
	
	ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = НСтр("ru='Автономная работа'");
	
	ИспользуемыеТранспортыСообщенийОбмена = Новый Массив;
	ИспользуемыеТранспортыСообщенийОбмена.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена = ИспользуемыеТранспортыСообщенийОбмена;
	
	ОписаниеВарианта.ОбщиеДанныеУзлов = "ИспользоватьОтборПоОрганизациям, СинхронизироватьДанныеПоОрганизациям, Организации, ИспользоватьОтборПоПодразделениям, СинхронизироватьДанныеПоПодразделениям, Подразделения";
	
	// Отборы
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	
	СтруктураТабличнойЧастиПодразделения = Новый Структура;
	СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение", Новый Массив);
	
	ОписаниеВарианта.Отборы.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	ОписаниеВарианта.Отборы.Вставить("ИспользоватьОтборПоПодразделениям", Ложь);
	ОписаниеВарианта.Отборы.Вставить("СинхронизироватьДанныеПоОрганизациям", Истина);
	ОписаниеВарианта.Отборы.Вставить("СинхронизироватьДанныеПоПодразделениям",
		Не СинхронизацияДанныхЗарплатаКадрыСервер.ИспользуетсяСтруктураПредприятия());
	ОписаниеВарианта.Отборы.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	ОписаниеВарианта.Отборы.Вставить("Подразделения", СтруктураТабличнойЧастиПодразделения);
	
КонецПроцедуры

// Возвращает строку описания ограничений миграции данных для пользователя.
// Прикладной разработчик на основе установленных отборов на узле должен сформировать 
// строку описания ограничений удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена.
//  ВерсияКорреспондента   - Строка    - версия корреспондента.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//
// Возвращаемое значение:
//  Строка - описание ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	ОграничениеОтбора = "";
	
	// отбор по организациям
	Если НастройкаОтборовНаУзле.СинхронизироватьДанныеПоОрганизациям Тогда
		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
			СтрокаПредставленияОтбора = СтрСоединить(
				НастройкаОтборовНаУзле.Организации.Организация, "; ");
			ОграничениеОтбора = ОграничениеОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В автономном рабочем месте доступны данные только по организациям: %1'"), СтрокаПредставленияОтбора);
		Иначе
			ОграничениеОтбора = ОграничениеОтбора + НСтр("ru = 'В автономном рабочем месте доступны все организации.'");
		КонецЕсли;
	Иначе
		ОграничениеОтбора = ОграничениеОтбора + НСтр("ru = 'В автономном рабочем месте не используется синхронизация по организациям.'");
	КонецЕсли;
	
	// отбор по подразделениям
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Если НастройкаОтборовНаУзле.СинхронизироватьДанныеПоПодразделениям Тогда
			Если НастройкаОтборовНаУзле.ИспользоватьОтборПоПодразделениям Тогда
				СтрокаПредставленияОтбора = СтрСоединить(
					НастройкаОтборовНаУзле.Подразделения.Подразделение, "; ");
				ОграничениеОтбора = ОграничениеОтбора + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В автономном рабочем месте доступны данные только по подразделениям: %1'"), СтрокаПредставленияОтбора);
			Иначе
				ОграничениеОтбора = ОграничениеОтбора + Символы.ПС + НСтр("ru = 'В автономном рабочем месте доступны все подразделения.'");
			КонецЕсли;
		Иначе
			ОграничениеОтбора = ОграничениеОтбора + Символы.ПС + НСтр("ru = 'В автономном рабочем месте не используется синхронизация по подразделениям.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОграничениеОтбора;
	
КонецФункции

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("РегистрироватьИзменения");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления 
//
Процедура ОбновитьГлавныйУзелВАвтономномРабочемМесте(ПараметрыОбновления) Экспорт
	
	Если НЕ ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	Если ГлавныйУзел = Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		ВыполнитьНастройкуГлавногоУзла(ГлавныйУзел);
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	Исключение
		ПараметрыОбновления.ОбработкаЗавершена = Ложь;
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

Процедура ВыполнитьНастройкуГлавногоУзла(ГлавныйУзел) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГлавныйУзел,
		"СинхронизироватьДанныеПоОрганизациям,СинхронизироватьДанныеПоПодразделениям");
		
	Если НЕ ЗначенияРеквизитов.СинхронизироватьДанныеПоОрганизациям
		ИЛИ НЕ ЗначенияРеквизитов.СинхронизироватьДанныеПоПодразделениям Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("ПланОбмена.АвтономнаяРабота");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ГлавныйУзел);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ГлавныйУзелОбъект = ГлавныйУзел.ПолучитьОбъект();
			ГлавныйУзелОбъект.СинхронизироватьДанныеПоОрганизациям = Истина;
			ГлавныйУзелОбъект.СинхронизироватьДанныеПоПодразделениям = Истина;
			Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ГлавныйУзелОбъект, Истина);
			Иначе
				ГлавныйУзелОбъект.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_РеестрОбъектов";
	КомандаПечати.Представление = НСтр("ru = 'Реестр выгружаемых объектов'");
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрОбъектов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрОбъектов", НСтр("ru='Реестр выгружаемых объектов'"),
			ПечатьВыгружаемыхОбъектов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьВыгружаемыхОбъектов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_РеестрВыгружаемыхОбъектов";
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ПолныйСписокОбъектов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолныйСписокОбъектов, СинхронизацияДанныхЗарплатаКадрыСервер.ОбщиеОбъекты(), Истина);
	Если ПараметрыПечати.ВидОбъектов = "ОбъектыРегламентированногоУчета" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолныйСписокОбъектов, СинхронизацияДанныхЗарплатаКадрыСервер.ОбъектыРегламентированногоУчета(), Истина);
	ИначеЕсли ПараметрыПечати.ВидОбъектов = "ОбъектыУправленческогоУчета" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолныйСписокОбъектов, СинхронизацияДанныхЗарплатаКадрыСервер.ОбъектыУправленческогоУчета(), Истина);
	КонецЕсли;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ПланОбмена.АвтономнаяРабота.ПФ_MXL_РеестрОбъектов");
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Для Каждого ОбъектСписка Из ПолныйСписокОбъектов Цикл
		ОбластьСтрока.Параметры.ПолноеИмяОбъекта = ОбъектСписка;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПараметрыПечати.ВидОбъектов);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли
